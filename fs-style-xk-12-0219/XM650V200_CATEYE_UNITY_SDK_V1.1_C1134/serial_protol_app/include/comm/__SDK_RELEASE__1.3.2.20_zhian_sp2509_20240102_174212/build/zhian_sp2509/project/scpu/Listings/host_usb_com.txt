; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\objects\host_usb_com.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\host_usb_com.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O3 --diag_suppress=9931 -I..\..\config -I..\..\..\..\board -I..\..\..\..\common\include -I..\..\..\..\scpu\device\include\CMSIS -I..\..\..\..\scpu\device\include\Kneron -I..\..\..\..\scpu\framework\include -I..\..\..\..\scpu\framework\include\framework -I..\..\..\..\scpu\drivers\include -I..\..\..\..\scpu\drivers\include\media\touch -I..\..\..\..\scpu\drivers\include\media\flash -I..\..\..\..\scpu\lib\kdp_system\inc -I..\..\..\..\scpu\lib\kdp_application\include\ -I..\..\..\..\scpu\lib\kdp_application\base\ -I..\..\..\..\scpu\lib\kdp_application\misc -I..\..\..\..\scpu\lib\kdp_e2e_r1n1\include -I..\..\..\..\scpu\include -I..\..\..\..\scpu\middleware\ota -I..\..\..\..\scpu\middleware\comm -I..\..\..\..\scpu\middleware\kdp_comm -I..\..\..\..\scpu\share -I..\..\..\..\scpu\share\gui_lib -I..\..\user -I.\RTE\CMSIS -I.\RTE\_Target-scpu -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\RTOS2\Include -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\RTOS2\RTX\Include -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\Device\ARM\ARMCM4\Include -D__RTX -D__MICROLIB -D__UVISION_VERSION=538 -D_RTE_ -DARMCM4_FP -D_RTE_ -DARM_MATH_CM4 -DTARGET_SCPU -DLOG_ENABLE -DKL520 -DHEAD_POSE_CHECK_PERCENT --omf_browse=.\objects\host_usb_com.crf ..\..\..\..\scpu\middleware\comm\host_usb_com.c]
                          THUMB

                          AREA ||i.usb_com_read||, CODE, READONLY, ALIGN=2

                  usb_com_read PROC
;;;357    
;;;358    int usb_com_read(uint8_t *BufferPtr, uint32_t BufferLen, uint32_t flags, uint32_t mode)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;359    {
000004  461e              MOV      r6,r3
000006  4617              MOV      r7,r2
000008  4689              MOV      r9,r1
00000a  4682              MOV      r10,r0
;;;360        kdrv_status_t status;
;;;361        int os_flag;
;;;362    
;;;363        usb_set_notify_flag(osThreadGetId(), flags);
00000c  f7fffffe          BL       osThreadGetId
000010  4639              MOV      r1,r7
000012  f7fffffe          BL       usb_set_notify_flag
;;;364    
;;;365        if (mode) {  // waiting for previous tx complete ?
;;;366            //osThreadFlagsWait(flags, osFlagsWaitAll, osWaitForever);
;;;367            os_flag = osThreadFlagsWait(flags, osFlagsWaitAll, 1000);  // wait for max 1 second
;;;368            if (os_flag < 0) {
;;;369                err_msg("[usb_com] Data upload timed out\r\n");
;;;370                status = kdrv_usbd_reset_endpoint(USB_HOST_OUT);
;;;371                usb_mode = 1;
000016  4c21              LDR      r4,|L1.156|
000018  2501              MOVS     r5,#1                 ;367
;;;372    
;;;373                if (status != KDRV_STATUS_OK) {
;;;374                    err_msg("[usb_com] Error in usb reset [%d]\r\n", status);
;;;375                }
;;;376    
;;;377                return -1;  // signal error
00001a  f04f38ff          MOV      r8,#0xffffffff
00001e  b1a6              CBZ      r6,|L1.74|
000020  f44f727a          MOV      r2,#0x3e8             ;367
000024  2101              MOVS     r1,#1                 ;367
000026  4638              MOV      r0,r7                 ;367
000028  f7fffffe          BL       osThreadFlagsWait
00002c  2800              CMP      r0,#0                 ;368
00002e  da09              BGE      |L1.68|
000030  a11b              ADR      r1,|L1.160|
000032  2002              MOVS     r0,#2                 ;369
000034  f7fffffe          BL       kdp_level_printf
000038  2081              MOVS     r0,#0x81              ;370
00003a  f7fffffe          BL       kdrv_usbd_reset_endpoint
00003e  4602              MOV      r2,r0                 ;370
000040  6025              STR      r5,[r4,#0]            ;371  ; usb_mode
000042  e01f              B        |L1.132|
                  |L1.68|
;;;378            }
;;;379            usb_mode++;  // go to the receive phase
000044  6820              LDR      r0,[r4,#0]  ; usb_mode
000046  1c40              ADDS     r0,r0,#1
000048  6020              STR      r0,[r4,#0]  ; usb_mode
                  |L1.74|
;;;380        }
;;;381    
;;;382        status = kdrv_usbd_bulk_receive_async(USB_HOST_IN, (u32*) BufferPtr, BufferLen);
00004a  464a              MOV      r2,r9
00004c  4651              MOV      r1,r10
00004e  2002              MOVS     r0,#2
000050  f7fffffe          BL       kdrv_usbd_bulk_receive_async
000054  0002              MOVS     r2,r0
;;;383        if (status != KDRV_STATUS_OK) {
000056  d004              BEQ      |L1.98|
;;;384            err_msg("[usb_com] Error in usb_com read [%d]\r\n", status);
000058  a11a              ADR      r1,|L1.196|
                  |L1.90|
00005a  2002              MOVS     r0,#2                 ;374
00005c  f7fffffe          BL       kdp_level_printf
000060  e013              B        |L1.138|
                  |L1.98|
;;;385            return -1;
;;;386        }
;;;387    
;;;388        os_flag = osThreadFlagsWait(flags, osFlagsWaitAll, 5000);  // now wait for data rcv complete
000062  f2413288          MOV      r2,#0x1388
000066  2101              MOVS     r1,#1
000068  4638              MOV      r0,r7
00006a  f7fffffe          BL       osThreadFlagsWait
;;;389        if (os_flag < 0) {
00006e  2800              CMP      r0,#0
000070  da0e              BGE      |L1.144|
;;;390            err_msg("[usb_com] Data download timed out\r\n");
000072  a11e              ADR      r1,|L1.236|
000074  2002              MOVS     r0,#2
000076  f7fffffe          BL       kdp_level_printf
;;;391            usb_mode = 1;  // usb timed out, data transfer taking too long
00007a  6025              STR      r5,[r4,#0]  ; usb_mode
;;;392            status = kdrv_usbd_reset_endpoint(USB_HOST_IN);
00007c  2002              MOVS     r0,#2
00007e  f7fffffe          BL       kdrv_usbd_reset_endpoint
000082  4602              MOV      r2,r0
                  |L1.132|
000084  b10a              CBZ      r2,|L1.138|
;;;393            if (status != KDRV_STATUS_OK) {
;;;394                err_msg("[usb_com] Error in usb reset [%d]\r\n", status);
000086  a122              ADR      r1,|L1.272|
000088  e7e7              B        |L1.90|
                  |L1.138|
;;;395            }
;;;396            return -1;
00008a  4640              MOV      r0,r8
                  |L1.140|
;;;397        }
;;;398    
;;;399        usb_mode -= 2;  // back to previous state
;;;400    
;;;401        return usb_read_count;
;;;402    }
00008c  e8bd87f0          POP      {r4-r10,pc}
                  |L1.144|
000090  6820              LDR      r0,[r4,#0]            ;399  ; usb_mode
000092  1e80              SUBS     r0,r0,#2              ;399
000094  6020              STR      r0,[r4,#0]            ;399  ; usb_mode
000096  6860              LDR      r0,[r4,#4]            ;401  ; usb_read_count
000098  e7f8              B        |L1.140|
;;;403    
                          ENDP

00009a  0000              DCW      0x0000
                  |L1.156|
                          DCD      ||.data||
                  |L1.160|
0000a0  5b757362          DCB      "[usb_com] Data upload timed out\r\n",0
0000a4  5f636f6d
0000a8  5d204461
0000ac  74612075
0000b0  706c6f61
0000b4  64207469
0000b8  6d656420
0000bc  6f75740d
0000c0  0a00    
0000c2  00                DCB      0
0000c3  00                DCB      0
                  |L1.196|
0000c4  5b757362          DCB      "[usb_com] Error in usb_com read [%d]\r\n",0
0000c8  5f636f6d
0000cc  5d204572
0000d0  726f7220
0000d4  696e2075
0000d8  73625f63
0000dc  6f6d2072
0000e0  65616420
0000e4  5b25645d
0000e8  0d0a00  
0000eb  00                DCB      0
                  |L1.236|
0000ec  5b757362          DCB      "[usb_com] Data download timed out\r\n",0
0000f0  5f636f6d
0000f4  5d204461
0000f8  74612064
0000fc  6f776e6c
000100  6f616420
000104  74696d65
000108  64206f75
00010c  740d0a00
                  |L1.272|
000110  5b757362          DCB      "[usb_com] Error in usb reset [%d]\r\n",0
000114  5f636f6d
000118  5d204572
00011c  726f7220
000120  696e2075
000124  73622072
000128  65736574
00012c  205b2564
000130  5d0d0a00

                          AREA ||i.usb_com_write||, CODE, READONLY, ALIGN=2

                  usb_com_write PROC
;;;332    */
;;;333    int usb_com_write(uint8_t *BufferPtr, uint32_t BufferLen, uint32_t flags, uint32_t mode)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;334    {
000004  4698              MOV      r8,r3
000006  4616              MOV      r6,r2
000008  460f              MOV      r7,r1
00000a  4681              MOV      r9,r0
;;;335        usb_set_notify_flag(osThreadGetId(), flags);
00000c  f7fffffe          BL       osThreadGetId
000010  4631              MOV      r1,r6
000012  f7fffffe          BL       usb_set_notify_flag
;;;336    
;;;337        if (mode == 1) {
;;;338            usb_mode = 4;  // tell usb to wait for data tx done before next step
000016  2004              MOVS     r0,#4
000018  4c13              LDR      r4,|L2.104|
;;;339        } else if (mode == 2) { // alternate data mode ?
;;;340            if (usb_mode == 3) {  // still tx msg ?
;;;341                usb_mode = 4;
;;;342                if (usb_mode == 4) { // debounce in case of context switching
;;;343                    osThreadFlagsWait(flags, osFlagsWaitAll, osWaitForever);
00001a  1f45              SUBS     r5,r0,#5
00001c  f1b80f01          CMP      r8,#1                 ;337
000020  d003              BEQ      |L2.42|
000022  f1b80f02          CMP      r8,#2                 ;339
000026  d00f              BEQ      |L2.72|
000028  e000              B        |L2.44|
                  |L2.42|
00002a  6020              STR      r0,[r4,#0]            ;338  ; usb_mode
                  |L2.44|
;;;344                }
;;;345            }
;;;346            usb_mode = 3;
;;;347        }
;;;348    
;;;349        kdrv_status_t status = kdrv_usbd_bulk_send_async(USB_HOST_OUT, (u32*) BufferPtr, BufferLen);
00002c  463a              MOV      r2,r7
00002e  4649              MOV      r1,r9
000030  2081              MOVS     r0,#0x81
000032  f7fffffe          BL       kdrv_usbd_bulk_send_async
000036  0002              MOVS     r2,r0
;;;350        if (status != KDRV_STATUS_OK) {
000038  d014              BEQ      |L2.100|
;;;351            err_msg("[usb_com] Error in usb_com write [%d]\r\n", status);
00003a  a10c              ADR      r1,|L2.108|
00003c  2002              MOVS     r0,#2
00003e  f7fffffe          BL       kdp_level_printf
;;;352            return -1;  // error
000042  4628              MOV      r0,r5
                  |L2.68|
;;;353        }
;;;354    
;;;355        return 0;
;;;356    }
000044  e8bd87f0          POP      {r4-r10,pc}
                  |L2.72|
000048  6821              LDR      r1,[r4,#0]            ;340  ; usb_mode
00004a  2903              CMP      r1,#3                 ;340
00004c  d108              BNE      |L2.96|
00004e  6020              STR      r0,[r4,#0]            ;341  ; usb_mode
000050  6820              LDR      r0,[r4,#0]            ;342  ; usb_mode
000052  2804              CMP      r0,#4                 ;342
000054  d104              BNE      |L2.96|
000056  462a              MOV      r2,r5                 ;343
000058  2101              MOVS     r1,#1                 ;343
00005a  4630              MOV      r0,r6                 ;343
00005c  f7fffffe          BL       osThreadFlagsWait
                  |L2.96|
000060  2003              MOVS     r0,#3                 ;346
000062  e7e2              B        |L2.42|
                  |L2.100|
000064  2000              MOVS     r0,#0                 ;355
000066  e7ed              B        |L2.68|
;;;357    
                          ENDP

                  |L2.104|
                          DCD      ||.data||
                  |L2.108|
00006c  5b757362          DCB      "[usb_com] Error in usb_com write [%d]\r\n",0
000070  5f636f6d
000074  5d204572
000078  726f7220
00007c  696e2075
000080  73625f63
000084  6f6d2077
000088  72697465
00008c  205b2564
000090  5d0d0a00

                          AREA ||i.usb_comm_thread||, CODE, READONLY, ALIGN=2

                  usb_comm_thread PROC
;;;199    
;;;200    static void usb_comm_thread(void *argument)
000000  b50e              PUSH     {r1-r3,lr}
;;;201    {
;;;202        int32_t flags;
;;;203        kdrv_usbd_event_t usbevent;
;;;204        kdrv_status_t usb_status;
;;;205    
;;;206        while (1) {
;;;207            flags = osThreadFlagsWait(FLAG_USB_COMM_EVENT, osFlagsWaitAny, osWaitForever);
;;;208            osThreadFlagsClear(flags);
;;;209    
;;;210            if (flags & FLAG_USB_COMM_EVENT) {
;;;211                while(KDRV_STATUS_OK == kdrv_usbd_get_event(&usbevent)) {  // process all current events
;;;212                    dbg_msg("[usb] event = [%d] %x %d, mode %d\r\n", usbevent.ename, usbevent.data1, usbevent.data2, usb_mode);
;;;213    
;;;214                    switch (usb_mode)
;;;215                    {
;;;216                        case 0:  // init
;;;217                            if (usbevent.ename  ==  KDRV_USBD_EVENT_DEV_CONFIGURED) usb_mode = 1;  // after init, go to idle
;;;218                            break;
;;;219                        case 1:  // idle
;;;220                            if (usbevent.ename  ==  KDRV_USBD_EVENT_TRANSFER_OUT) {
;;;221                                usb_mode = 2;  // go to message input mode
;;;222                                usb_status = kdrv_usbd_bulk_receive_async(USB_HOST_IN, (u32*) msg_rbuf, MSG_DATA_BUF_MAX + sizeof(MsgHdr)+ sizeof(RspPram) + 4);
000002  f8df8128          LDR      r8,|L3.300|
000006  2501              MOVS     r5,#1                 ;217
000008  4c49              LDR      r4,|L3.304|
00000a  f04f39ff          MOV      r9,#0xffffffff        ;207
00000e  f2424a14          MOV      r10,#0x2414
000012  2602              MOVS     r6,#2                 ;221
                  |L3.20|
000014  464a              MOV      r2,r9                 ;207
000016  2100              MOVS     r1,#0                 ;207
000018  2010              MOVS     r0,#0x10              ;207
00001a  f7fffffe          BL       osThreadFlagsWait
00001e  4607              MOV      r7,r0                 ;207
000020  f7fffffe          BL       osThreadFlagsClear
000024  06f8              LSLS     r0,r7,#27             ;210
000026  d5f5              BPL      |L3.20|
000028  e06e              B        |L3.264|
                  |L3.42|
00002a  6820              LDR      r0,[r4,#0]            ;214  ; usb_mode
00002c  2806              CMP      r0,#6                 ;214
00002e  d26b              BCS      |L3.264|
000030  e8dff000          TBB      [pc,r0]               ;214
000034  03092837          DCB      0x03,0x09,0x28,0x37
000038  5863              DCB      0x58,0x63
                  |L3.58|
00003a  f89d0000          LDRB     r0,[sp,#0]            ;217
00003e  2805              CMP      r0,#5                 ;217
000040  d162              BNE      |L3.264|
                  |L3.66|
000042  6025              STR      r5,[r4,#0]            ;217  ; usb_mode
000044  e060              B        |L3.264|
000046  f89d0000          LDRB     r0,[sp,#0]            ;220
00004a  2808              CMP      r0,#8                 ;220
00004c  d110              BNE      |L3.112|
00004e  6026              STR      r6,[r4,#0]            ;221  ; usb_mode
000050  4652              MOV      r2,r10
000052  2002              MOVS     r0,#2
000054  f8d81000          LDR      r1,[r8,#0]  ; msg_rbuf
000058  f7fffffe          BL       kdrv_usbd_bulk_receive_async
00005c  0002              MOVS     r2,r0
;;;223                                if (usb_status != KDRV_STATUS_OK) {
00005e  d007              BEQ      |L3.112|
;;;224                                    err_msg("[usb] receive cmd ERROR %d\r\n", usb_status);
000060  a134              ADR      r1,|L3.308|
000062  2002              MOVS     r0,#2
000064  f7fffffe          BL       kdp_level_printf
;;;225                                    kdrv_usbd_reset_endpoint(USB_HOST_IN);
000068  2002              MOVS     r0,#2
00006a  f7fffffe          BL       kdrv_usbd_reset_endpoint
;;;226                                    usb_mode = 1;  // stay at idle
00006e  6025              STR      r5,[r4,#0]  ; usb_mode
                  |L3.112|
;;;227                                }
;;;228                            }
;;;229    						//patch: usb queue not in control
;;;230                            if (usbevent.ename == KDRV_USBD_EVENT_TRANSFER_DONE) {
000070  f89d0000          LDRB     r0,[sp,#0]
000074  2807              CMP      r0,#7
000076  d147              BNE      |L3.264|
;;;231                                if (usbevent.data1 == USB_HOST_OUT) {  //done with reply message
000078  9801              LDR      r0,[sp,#4]
00007a  2881              CMP      r0,#0x81
00007c  d144              BNE      |L3.264|
;;;232                                	usb_done_notify();
00007e  f7fffffe          BL       usb_done_notify
;;;233                                    usb_mode = 1;  // ready to send reply
000082  e7de              B        |L3.66|
;;;234                                }
;;;235                            }
;;;236                            break;
;;;237                        case 2:  // message in
;;;238                            if (usbevent.ename == KDRV_USBD_EVENT_TRANSFER_DONE) {
000084  f89d0000          LDRB     r0,[sp,#0]
000088  2807              CMP      r0,#7
00008a  d13d              BNE      |L3.264|
;;;239                                if (usbevent.data1 == USB_HOST_IN) {  // done with command message
00008c  9801              LDR      r0,[sp,#4]
00008e  2802              CMP      r0,#2
000090  d13a              BNE      |L3.264|
;;;240                                    if (usbevent.data2) {
000092  9802              LDR      r0,[sp,#8]
000094  2800              CMP      r0,#0
000096  d0d4              BEQ      |L3.66|
;;;241                                        usb_done_notify();
000098  f7fffffe          BL       usb_done_notify
;;;242                                        usb_mode = 3;  // ready to send reply
00009c  2003              MOVS     r0,#3
00009e  6020              STR      r0,[r4,#0]  ; usb_mode
0000a0  e032              B        |L3.264|
;;;243                                    }
;;;244                                    else { // empty msg
;;;245                                        usb_mode = 1;  // ignore the message ang back to idle
;;;246                                    }
;;;247                                }
;;;248                            }
;;;249                            break;
;;;250    					case 3:  // message out
;;;251    						if (usbevent.ename == KDRV_USBD_EVENT_TRANSFER_DONE) {
0000a2  f89d2000          LDRB     r2,[sp,#0]
0000a6  2a07              CMP      r2,#7
0000a8  d011              BEQ      |L3.206|
;;;252    							if (usbevent.data1 == USB_HOST_OUT) { // done with reply message
;;;253    								usb_mode = 1;  // back to idle
;;;254    							} else {
;;;255    								err_msg("USB mode 3, EP = %d\n", usbevent.data1);
;;;256    								usb_mode = 1;  // back to idle
;;;257    							}
;;;258    							break;
;;;259    						}
;;;260    						err_msg("Mode 3 exception, EVNT = %d [%d]\n", usbevent.ename, usbevent.data1);
0000aa  a12a              ADR      r1,|L3.340|
0000ac  2002              MOVS     r0,#2
0000ae  9b01              LDR      r3,[sp,#4]
0000b0  f7fffffe          BL       kdp_level_printf
;;;261    						if (usbevent.ename	==	KDRV_USBD_EVENT_TRANSFER_OUT) {  // a new command from host ?
0000b4  f89d0000          LDRB     r0,[sp,#0]
0000b8  2808              CMP      r0,#8
0000ba  d1be              BNE      |L3.58|
;;;262    							kdrv_status_t status;
;;;263    							//status = kdrv_usbd_reset_endpoint(USB_HOST_IN);  // terminate current outgoing message
;;;264    							status = KDRV_STATUS_OK;
;;;265    							if (status == KDRV_STATUS_OK) {
;;;266    								usb_status = kdrv_usbd_bulk_receive_async(USB_HOST_IN, (u32*) msg_rbuf, MSG_DATA_BUF_MAX + sizeof(MsgHdr)+ sizeof(RspPram) + 4);
0000bc  4652              MOV      r2,r10
0000be  2002              MOVS     r0,#2
0000c0  f8d81000          LDR      r1,[r8,#0]  ; msg_rbuf
0000c4  f7fffffe          BL       kdrv_usbd_bulk_receive_async
0000c8  b150              CBZ      r0,|L3.224|
;;;267    								if (usb_status == KDRV_STATUS_OK)
;;;268    									usb_mode = 2;  // go receive the incoming message
;;;269    								else
;;;270    									usb_mode = 1;
0000ca  6025              STR      r5,[r4,#0]  ; usb_mode
0000cc  e7b5              B        |L3.58|
                  |L3.206|
0000ce  9801              LDR      r0,[sp,#4]            ;252
0000d0  2881              CMP      r0,#0x81              ;252
0000d2  d0b6              BEQ      |L3.66|
0000d4  4602              MOV      r2,r0                 ;255
0000d6  a128              ADR      r1,|L3.376|
0000d8  2002              MOVS     r0,#2                 ;255
0000da  f7fffffe          BL       kdp_level_printf
0000de  e7b0              B        |L3.66|
                  |L3.224|
0000e0  6026              STR      r6,[r4,#0]            ;268  ; usb_mode
0000e2  e7aa              B        |L3.58|
;;;271    							}
;;;272    							else {
;;;273    								err_msg("[usb_com] Error in usb reset [%d]\r\n", status);
;;;274    								usb_mode = 1;
;;;275    							}
;;;276    						}
;;;277    						if (usbevent.ename	==	KDRV_USBD_EVENT_DEV_CONFIGURED)
;;;278    							usb_mode = 1;  // got an init, go to idle
;;;279    						break;
;;;280    
;;;281                        case 4:  // ack out  >>>> NOTE: data I/O is separated into two modes to avoid race conditions
;;;282                            if (usbevent.ename == KDRV_USBD_EVENT_TRANSFER_DONE) {  // ack tx done
0000e4  f89d0000          LDRB     r0,[sp,#0]
0000e8  2807              CMP      r0,#7
0000ea  d10d              BNE      |L3.264|
;;;283                                if (usbevent.data1 == USB_HOST_OUT) { // done with ack output
0000ec  9801              LDR      r0,[sp,#4]
0000ee  2881              CMP      r0,#0x81
0000f0  d10a              BNE      |L3.264|
;;;284                                    usb_done_notify();
0000f2  bf00              NOP      
                  |L3.244|
0000f4  f7fffffe          BL       usb_done_notify
0000f8  e006              B        |L3.264|
;;;285                                }
;;;286                            }
;;;287                            break;
;;;288                        case 5:  // image in
;;;289                            if (usbevent.ename == KDRV_USBD_EVENT_TRANSFER_DONE) {  // image rcv done
0000fa  f89d0000          LDRB     r0,[sp,#0]
0000fe  2807              CMP      r0,#7
000100  d102              BNE      |L3.264|
;;;290                                if (usbevent.data1 == USB_HOST_IN) {  // done with image in
000102  9801              LDR      r0,[sp,#4]
000104  2802              CMP      r0,#2
000106  d005              BEQ      |L3.276|
                  |L3.264|
000108  4668              MOV      r0,sp                 ;211
00010a  f7fffffe          BL       kdrv_usbd_get_event
00010e  2800              CMP      r0,#0                 ;211
000110  d180              BNE      |L3.20|
000112  e78a              B        |L3.42|
                  |L3.276|
;;;291                                    usb_read_count = usbevent.data2;
000114  9802              LDR      r0,[sp,#8]
000116  6060              STR      r0,[r4,#4]  ; usb_read_count
;;;292                                    if (usbevent.data2 == 0) {
000118  9802              LDR      r0,[sp,#8]
00011a  2800              CMP      r0,#0
00011c  d1ea              BNE      |L3.244|
;;;293                                        err_msg("[usb] ERROR, no data received.\r\n");
00011e  a11c              ADR      r1,|L3.400|
000120  2002              MOVS     r0,#2
000122  f7fffffe          BL       kdp_level_printf
;;;294                                        usb_mode = 2;
000126  6026              STR      r6,[r4,#0]  ; usb_mode
000128  e7e4              B        |L3.244|
;;;295                                    }
;;;296                                    usb_done_notify();
;;;297                                }
;;;298                            }
;;;299                            break;
;;;300                        default:  // ignore
;;;301                            break;
;;;302                    }
;;;303                }
;;;304            }
;;;305        }
;;;306    }
;;;307    
                          ENDP

00012a  0000              DCW      0x0000
                  |L3.300|
                          DCD      msg_rbuf
                  |L3.304|
                          DCD      ||.data||
                  |L3.308|
000134  5b757362          DCB      "[usb] receive cmd ERROR %d\r\n",0
000138  5d207265
00013c  63656976
000140  6520636d
000144  64204552
000148  524f5220
00014c  25640d0a
000150  00      
000151  00                DCB      0
000152  00                DCB      0
000153  00                DCB      0
                  |L3.340|
000154  4d6f6465          DCB      "Mode 3 exception, EVNT = %d [%d]\n",0
000158  20332065
00015c  78636570
000160  74696f6e
000164  2c204556
000168  4e54203d
00016c  20256420
000170  5b25645d
000174  0a00    
000176  00                DCB      0
000177  00                DCB      0
                  |L3.376|
000178  55534220          DCB      "USB mode 3, EP = %d\n",0
00017c  6d6f6465
000180  20332c20
000184  4550203d
000188  2025640a
00018c  00      
00018d  00                DCB      0
00018e  00                DCB      0
00018f  00                DCB      0
                  |L3.400|
000190  5b757362          DCB      "[usb] ERROR, no data received.\r\n",0
000194  5d204552
000198  524f522c
00019c  206e6f20
0001a0  64617461
0001a4  20726563
0001a8  65697665
0001ac  642e0d0a
0001b0  00      
0001b1  00                DCB      0
0001b2  00                DCB      0
0001b3  00                DCB      0

                          AREA ||i.usb_done_notify||, CODE, READONLY, ALIGN=2

                  usb_done_notify PROC
;;;183    
;;;184    static void usb_done_notify(void)
000000  4802              LDR      r0,|L4.12|
;;;185    {
;;;186        osThreadFlagsSet(tid_to_notify, flags_to_notify);
000002  6901              LDR      r1,[r0,#0x10]  ; flags_to_notify
000004  68c0              LDR      r0,[r0,#0xc]  ; tid_to_notify
000006  f7ffbffe          B.W      osThreadFlagsSet
;;;187    }
;;;188    
                          ENDP

00000a  0000              DCW      0x0000
                  |L4.12|
                          DCD      ||.data||

                          AREA ||i.usb_get_mode||, CODE, READONLY, ALIGN=2

                  usb_get_mode PROC
;;;316    
;;;317    int usb_get_mode(void)
000000  4801              LDR      r0,|L5.8|
;;;318    {
;;;319        return usb_mode;
000002  6800              LDR      r0,[r0,#0]  ; usb_mode
;;;320    }
000004  4770              BX       lr
;;;321    
                          ENDP

000006  0000              DCW      0x0000
                  |L5.8|
                          DCD      ||.data||

                          AREA ||i.usb_idle||, CODE, READONLY, ALIGN=2

                  usb_idle PROC
;;;311    
;;;312    void usb_idle(void)
000000  4901              LDR      r1,|L6.8|
;;;313    {
;;;314        usb_mode = 1;
000002  2001              MOVS     r0,#1
000004  6008              STR      r0,[r1,#0]  ; usb_mode
;;;315    }
000006  4770              BX       lr
;;;316    
                          ENDP

                  |L6.8|
                          DCD      ||.data||

                          AREA ||i.usb_init||, CODE, READONLY, ALIGN=2

                  usb_init PROC
;;;403    
;;;404    void usb_init(void)
000000  b510              PUSH     {r4,lr}
;;;405    {
000002  b08a              SUB      sp,sp,#0x28
;;;406        osThreadAttr_t attr = {
000004  2224              MOVS     r2,#0x24
000006  4912              LDR      r1,|L7.80|
000008  4668              MOV      r0,sp
00000a  f7fffffe          BL       __aeabi_memcpy4
;;;407            .stack_size = 512
;;;408        };
;;;409    
;;;410        tid_usb_comm = osThreadNew(usb_comm_thread, NULL, &attr);
00000e  466a              MOV      r2,sp
000010  2100              MOVS     r1,#0
000012  4810              LDR      r0,|L7.84|
000014  f7fffffe          BL       osThreadNew
000018  4c0f              LDR      r4,|L7.88|
00001a  60a0              STR      r0,[r4,#8]  ; tid_usb_comm
00001c  f7fffffe          BL       kdrv_usbd_initialize
000020  f1040124          ADD      r1,r4,#0x24
000024  2000              MOVS     r0,#0
000026  f7fffffe          BL       kdrv_usbd_set_device_descriptor
00002a  f1040014          ADD      r0,r4,#0x14
00002e  f7fffffe          BL       kdrv_usbd_set_string_descriptor
000032  f104013a          ADD      r1,r4,#0x3a
000036  2000              MOVS     r0,#0
000038  f7fffffe          BL       kdrv_usbd_set_device_qualifier_descriptor
00003c  2001              MOVS     r0,#1
00003e  f7fffffe          BL       kdrv_usbd_set_enable
000042  2110              MOVS     r1,#0x10
000044  68a0              LDR      r0,[r4,#8]  ; tid_usb_comm
000046  f7fffffe          BL       kdrv_usbd_register_thread_notification
;;;411        usb_init_dev();
;;;412    }
00004a  b00a              ADD      sp,sp,#0x28
00004c  bd10              POP      {r4,pc}
                          ENDP

00004e  0000              DCW      0x0000
                  |L7.80|
                          DCD      ||.constdata||
                  |L7.84|
                          DCD      usb_comm_thread
                  |L7.88|
                          DCD      ||.data||

                          AREA ||i.usb_set_notify_flag||, CODE, READONLY, ALIGN=2

                  usb_set_notify_flag PROC
;;;321    
;;;322    void usb_set_notify_flag(osThreadId_t tid, uint32_t flags)
000000  4a01              LDR      r2,|L8.8|
;;;323    {
;;;324        tid_to_notify = tid;
000002  e9c20103          STRD     r0,r1,[r2,#0xc]
;;;325        flags_to_notify = flags;
;;;326    }
000006  4770              BX       lr
;;;327    
                          ENDP

                  |L8.8|
                          DCD      ||.data||

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000200
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000

                          AREA ||.data||, DATA, ALIGN=2

                  usb_mode
                          DCD      0x00000000
                  usb_read_count
                          DCD      0x00000000
                  tid_usb_comm
                          DCD      0x00000000
                  tid_to_notify
                          DCD      0x00000000
                  flags_to_notify
                          DCD      0x00000000
                  str_desc
000014  0403              DCB      0x04,0x03
000016  0409              DCW      0x0409
                          DCD      str_desc_mun
                          DCD      str_desc_prd
                          DCD      str_desc_serial
                  dev_desc
000024  1201              DCB      0x12,0x01
000026  0200              DCW      0x0200
000028  00000040          DCB      0x00,0x00,0x00,0x40
00002c  32310100          DCW      0x3231,0x0100
000030  0001              DCW      0x0001
000032  0102              DCB      0x01,0x02
000034  0301              DCB      0x03,0x01
                          DCDU     confg_desc
                  dev_qual_desc
00003a  0a06              DCB      0x0a,0x06
00003c  0200              DCW      0x0200
00003e  0000              DCB      0x00,0x00
000040  00400100          DCB      0x00,0x40,0x01,0x00

                          AREA ||area_number.13||, DATA, ALIGN=2

                          EXPORTAS ||area_number.13||, ||.data||
                  FOTG200_BASE_ADDRESS
                          DCD      0xc0100000

                          AREA ||area_number.14||, DATA, ALIGN=2

                          EXPORTAS ||area_number.14||, ||.data||
                  OTG_BASE_ADDRESS
                          DCD      0xc0100000

                          AREA ||area_number.15||, DATA, ALIGN=0

                          EXPORTAS ||area_number.15||, ||.data||
                  endp_bulkIn_81_desc
000000  07058102          DCB      0x07,0x05,0x81,0x02
000004  0200              DCWU     0x0200
000006  00                DCB      0x00

                          AREA ||area_number.16||, DATA, ALIGN=0

                          EXPORTAS ||area_number.16||, ||.data||
                  endp_bulkOut_02_desc
000000  07050202          DCB      0x07,0x05,0x02,0x02
000004  0200              DCWU     0x0200
000006  00                DCB      0x00

                          AREA ||area_number.17||, DATA, ALIGN=0

                          EXPORTAS ||area_number.17||, ||.data||
                  endp_intIn_83_desc
000000  07058303          DCB      0x07,0x05,0x83,0x03
000004  0400              DCWU     0x0400
000006  64                DCB      0x64

                          AREA ||area_number.18||, DATA, ALIGN=0

                          EXPORTAS ||area_number.18||, ||.data||
                  endp_bulkOut_04_desc
000000  07050402          DCB      0x07,0x05,0x04,0x02
000004  0200              DCWU     0x0200
000006  00                DCB      0x00

                          AREA ||area_number.19||, DATA, ALIGN=0

                          EXPORTAS ||area_number.19||, ||.data||
                  intf_desc
000000  09040000          DCB      0x09,0x04,0x00,0x00
000004  04ff0000          DCB      0x04,0xff,0x00,0x00
000008  00                DCB      0x00
                          DCDU     endp_bulkIn_81_desc
                          DCDU     endp_bulkOut_02_desc
                          DCDU     endp_intIn_83_desc
                          DCDU     endp_bulkOut_04_desc

                          AREA ||area_number.20||, DATA, ALIGN=0

                          EXPORTAS ||area_number.20||, ||.data||
                  str_desc_mun
000000  0e034b00          DCB      0x0e,0x03,0x4b,0x00
000004  6e006500          DCB      0x6e,0x00,0x65,0x00
000008  72006f00          DCB      0x72,0x00,0x6f,0x00
00000c  6e000000          DCB      0x6e,0x00,0x00,0x00
                          %        16
000020  0000              DCB      0x00,0x00

                          AREA ||area_number.21||, DATA, ALIGN=0

                          EXPORTAS ||area_number.21||, ||.data||
                  str_desc_prd
000000  10034b00          DCB      0x10,0x03,0x4b,0x00
000004  6e006500          DCB      0x6e,0x00,0x65,0x00
000008  72006f00          DCB      0x72,0x00,0x6f,0x00
00000c  6e000000          DCB      0x6e,0x00,0x00,0x00
                          %        16
000020  0000              DCB      0x00,0x00

                          AREA ||area_number.22||, DATA, ALIGN=0

                          EXPORTAS ||area_number.22||, ||.data||
                  str_desc_serial
000000  12033500          DCB      0x12,0x03,0x35,0x00
000004  35003600          DCB      0x35,0x00,0x36,0x00
000008  36003700          DCB      0x36,0x00,0x37,0x00
00000c  37003800          DCB      0x37,0x00,0x38,0x00
000010  38000000          DCB      0x38,0x00,0x00,0x00
                          %        12
000020  0000              DCB      0x00,0x00

                          AREA ||area_number.23||, DATA, ALIGN=0

                          EXPORTAS ||area_number.23||, ||.data||
                  confg_desc
000000  0902              DCB      0x09,0x02
000002  002e              DCWU     0x002e
000004  010100c0          DCB      0x01,0x01,0x00,0xc0
000008  00                DCB      0x00
                          DCDU     intf_desc

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\scpu\\middleware\\comm\\host_usb_com.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___14_host_usb_com_c_usb_mode____REV16|
#line 208 "F:\\Users\\fu\\AppData\\Local\\Arm\\Packs\\ARM\\CMSIS\\5.9.0\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___14_host_usb_com_c_usb_mode____REV16| PROC
#line 209

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___14_host_usb_com_c_usb_mode____REVSH|
#line 223
|__asm___14_host_usb_com_c_usb_mode____REVSH| PROC
#line 224

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___14_host_usb_com_c_usb_mode____RRX|
#line 410
|__asm___14_host_usb_com_c_usb_mode____RRX| PROC
#line 411

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
