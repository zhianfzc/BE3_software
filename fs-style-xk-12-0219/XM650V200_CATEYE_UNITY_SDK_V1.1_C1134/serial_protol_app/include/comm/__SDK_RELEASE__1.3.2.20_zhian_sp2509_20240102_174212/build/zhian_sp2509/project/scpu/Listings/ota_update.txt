; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\objects\ota_update.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\ota_update.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O3 --diag_suppress=9931 -I..\..\config -I..\..\..\..\board -I..\..\..\..\common\include -I..\..\..\..\scpu\device\include\CMSIS -I..\..\..\..\scpu\device\include\Kneron -I..\..\..\..\scpu\framework\include -I..\..\..\..\scpu\framework\include\framework -I..\..\..\..\scpu\drivers\include -I..\..\..\..\scpu\drivers\include\media\touch -I..\..\..\..\scpu\drivers\include\media\flash -I..\..\..\..\scpu\lib\kdp_system\inc -I..\..\..\..\scpu\lib\kdp_application\include\ -I..\..\..\..\scpu\lib\kdp_application\base\ -I..\..\..\..\scpu\lib\kdp_application\misc -I..\..\..\..\scpu\lib\kdp_e2e_r1n1\include -I..\..\..\..\scpu\include -I..\..\..\..\scpu\middleware\ota -I..\..\..\..\scpu\middleware\comm -I..\..\..\..\scpu\middleware\kdp_comm -I..\..\..\..\scpu\share -I..\..\..\..\scpu\share\gui_lib -I..\..\user -I.\RTE\CMSIS -I.\RTE\_Target-scpu -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\RTOS2\Include -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\RTOS2\RTX\Include -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\Device\ARM\ARMCM4\Include -D__RTX -D__MICROLIB -D__UVISION_VERSION=538 -D_RTE_ -DARMCM4_FP -D_RTE_ -DARM_MATH_CM4 -DTARGET_SCPU -DLOG_ENABLE -DKL520 -DHEAD_POSE_CHECK_PERCENT --omf_browse=.\objects\ota_update.crf ..\..\..\..\scpu\middleware\ota\ota_update.c]
                          THUMB

                          AREA ||i.ota_burn_in_config||, CODE, READONLY, ALIGN=2

                  ota_burn_in_config PROC
;;;927    
;;;928    void ota_burn_in_config( UINT8  partition )
000000  b570              PUSH     {r4-r6,lr}
;;;929    {
000002  4604              MOV      r4,r0
;;;930        UINT8 ret = 0;
;;;931    
;;;932        if( partition & 0x1 )
000004  07c0              LSLS     r0,r0,#31
;;;933        {
;;;934            if( boot_cfg_0.scpu_cfg.flag== BOOT_STATE_FIRST_BOOT || boot_cfg_0.ncpu_cfg.flag== BOOT_STATE_FIRST_BOOT )
;;;935            {
;;;936                kdp_memxfer_ddr_to_flash(  (UINT32)PARTITION_0_CFG_START_IN_FLASH , (UINT32)&boot_cfg_0,sizeof(boot_cfg_0));
000006  f44f3568          MOV      r5,#0x3a000
00000a  d00b              BEQ      |L1.36|
00000c  4817              LDR      r0,|L1.108|
00000e  6881              LDR      r1,[r0,#8]            ;934  ; boot_cfg_0
000010  2902              CMP      r1,#2                 ;934
000012  d002              BEQ      |L1.26|
000014  6940              LDR      r0,[r0,#0x14]         ;934  ; boot_cfg_0
000016  2802              CMP      r0,#2                 ;934
000018  d104              BNE      |L1.36|
                  |L1.26|
00001a  2218              MOVS     r2,#0x18
00001c  4913              LDR      r1,|L1.108|
00001e  4628              MOV      r0,r5
000020  f7fffffe          BL       kdp_memxfer_ddr_to_flash
                  |L1.36|
;;;937                ret |= 0x01;
;;;938            }
;;;939        }
;;;940    
;;;941        if( partition & 0x2 )
000024  07a0              LSLS     r0,r4,#30
;;;942        {
;;;943            if ( boot_cfg_1.scpu_cfg.flag== BOOT_STATE_FIRST_BOOT || boot_cfg_1.ncpu_cfg.flag== BOOT_STATE_FIRST_BOOT )
;;;944            {
;;;945                kdp_memxfer_ddr_to_flash( (UINT32)PARTITION_1_CFG_START_IN_FLASH , (UINT32)&boot_cfg_1, sizeof(boot_cfg_1));
000026  f44f26f2          MOV      r6,#0x79000
00002a  d50d              BPL      |L1.72|
00002c  480f              LDR      r0,|L1.108|
00002e  3018              ADDS     r0,r0,#0x18           ;943
000030  6881              LDR      r1,[r0,#8]            ;943  ; boot_cfg_1
000032  2902              CMP      r1,#2                 ;943
000034  d002              BEQ      |L1.60|
000036  6940              LDR      r0,[r0,#0x14]         ;943  ; boot_cfg_1
000038  2802              CMP      r0,#2                 ;943
00003a  d105              BNE      |L1.72|
                  |L1.60|
00003c  490b              LDR      r1,|L1.108|
00003e  2218              MOVS     r2,#0x18
000040  3118              ADDS     r1,r1,#0x18
000042  4630              MOV      r0,r6
000044  f7fffffe          BL       kdp_memxfer_ddr_to_flash
                  |L1.72|
;;;946                ret |= 0x02;
;;;947            }
;;;948        }
;;;949    
;;;950        kdp_memxfer_flash_to_ddr( (UINT32)&boot_cfg_0 , PARTITION_0_CFG_START_IN_FLASH, sizeof(boot_cfg_0) );
000048  2218              MOVS     r2,#0x18
00004a  4629              MOV      r1,r5
00004c  4807              LDR      r0,|L1.108|
00004e  f7fffffe          BL       kdp_memxfer_flash_to_ddr
;;;951        kdp_memxfer_flash_to_ddr( (UINT32)&boot_cfg_1 , PARTITION_1_CFG_START_IN_FLASH, sizeof(boot_cfg_1) );
000052  4806              LDR      r0,|L1.108|
000054  2218              MOVS     r2,#0x18
000056  4631              MOV      r1,r6
000058  3018              ADDS     r0,r0,#0x18
00005a  f7fffffe          BL       kdp_memxfer_flash_to_ddr
;;;952    
;;;953        dbg_msg_console("part %d update OK", partition );
00005e  4622              MOV      r2,r4
000060  e8bd4070          POP      {r4-r6,lr}
000064  a102              ADR      r1,|L1.112|
000066  2001              MOVS     r0,#1
000068  f7ffbffe          B.W      kdp_level_printf
;;;954    }
;;;955    
                          ENDP

                  |L1.108|
                          DCD      ||.bss||
                  |L1.112|
000070  70617274          DCB      "part %d update OK\r\n",0
000074  20256420
000078  75706461
00007c  7465204f
000080  4b0d0a00

                          AREA ||i.ota_crc32||, CODE, READONLY, ALIGN=2

                  ota_crc32 PROC
;;;2551   
;;;2552   u32 ota_crc32( u8 *buf, size_t size)
000000  b510              PUSH     {r4,lr}
;;;2553   {
;;;2554       const u8 *p = buf;
;;;2555       u32 crc;
;;;2556       crc = ~0U;
000002  f04f32ff          MOV      r2,#0xffffffff
;;;2557       while (size--){
;;;2558           crc = crc32_tab[(crc ^ *p++) & 0xFF] ^ (crc >> 8);
000006  4b07              LDR      r3,|L2.36|
000008  e008              B        |L2.28|
00000a  bf00              NOP      
                  |L2.12|
00000c  f8104b01          LDRB     r4,[r0],#1
000010  4054              EORS     r4,r4,r2
000012  b2e4              UXTB     r4,r4
000014  f8534024          LDR      r4,[r3,r4,LSL #2]
000018  ea842212          EOR      r2,r4,r2,LSR #8
                  |L2.28|
00001c  1e49              SUBS     r1,r1,#1
00001e  d2f5              BCS      |L2.12|
;;;2559       }
;;;2560       return crc ^ ~0U;
000020  43d0              MVNS     r0,r2
;;;2561   }
000022  bd10              POP      {r4,pc}
;;;2562   
                          ENDP

                  |L2.36|
                          DCD      ||.constdata||

                          AREA ||i.ota_get_active_ncpu_partition||, CODE, READONLY, ALIGN=2

                  ota_get_active_ncpu_partition PROC
;;;422    */
;;;423    int ota_get_active_ncpu_partition(void)
000000  b510              PUSH     {r4,lr}
;;;424    {
;;;425    
;;;426        kdp_memxfer_flash_to_ddr((UINT32)&boot_cfg_0, PARTITION_0_CFG_START_IN_FLASH , sizeof( boot_cfg_0) );
000002  2218              MOVS     r2,#0x18
000004  f44f3168          MOV      r1,#0x3a000
000008  481d              LDR      r0,|L3.128|
00000a  f7fffffe          BL       kdp_memxfer_flash_to_ddr
;;;427        kdp_memxfer_flash_to_ddr((UINT32)&boot_cfg_1, PARTITION_1_CFG_START_IN_FLASH , sizeof( boot_cfg_1) );
00000e  481c              LDR      r0,|L3.128|
000010  2218              MOVS     r2,#0x18
000012  f44f21f2          MOV      r1,#0x79000
000016  3018              ADDS     r0,r0,#0x18
000018  f7fffffe          BL       kdp_memxfer_flash_to_ddr
;;;428    
;;;429    //    // add here
;;;430    //    dbg_msg("---------[OTA config] Config read status ---------");
;;;431    //
;;;432    //    dbg_msg("---------[OTA config] spcu---------");
;;;433    //
;;;434    //    dbg_msg("[OTA config]scpu 0 flag:%d, id:%d, seq:%d", boot_cfg_0.scpu_cfg.flag
;;;435    //    							 , boot_cfg_0.scpu_cfg.partition_id, boot_cfg_0.scpu_cfg.seq);
;;;436    //
;;;437    //    dbg_msg("[OTA config]scpu 1 flag:%d, id:%d, seq:%d", boot_cfg_1.scpu_cfg.flag
;;;438    //    							 , boot_cfg_1.scpu_cfg.partition_id, boot_cfg_1.scpu_cfg.seq);
;;;439    //
;;;440    //    dbg_msg("---------[OTA config] npcu---------");
;;;441    //
;;;442    //    dbg_msg("[OTA config]ncpu 0 flag:%d, id:%d, seq:%d", boot_cfg_0.ncpu_cfg.flag
;;;443    //    							 , boot_cfg_0.ncpu_cfg.partition_id, boot_cfg_0.ncpu_cfg.seq);
;;;444    //
;;;445    //    dbg_msg("[OTA config]ncpu 1 flag:%d, id:%d, seq:%d", boot_cfg_1.ncpu_cfg.flag
;;;446    //    							 , boot_cfg_1.ncpu_cfg.partition_id, boot_cfg_1.ncpu_cfg.seq);
;;;447    
;;;448        if ((boot_cfg_0.ncpu_cfg.flag == 0xffffffff) && (boot_cfg_1.ncpu_cfg.flag == 0xffffffff)) {
00001c  4a18              LDR      r2,|L3.128|
00001e  f1020018          ADD      r0,r2,#0x18           ;427
000022  6951              LDR      r1,[r2,#0x14]  ; boot_cfg_0
000024  1c4b              ADDS     r3,r1,#1
000026  d102              BNE      |L3.46|
000028  6943              LDR      r3,[r0,#0x14]  ; boot_cfg_1
00002a  1c5b              ADDS     r3,r3,#1
00002c  d010              BEQ      |L3.80|
                  |L3.46|
;;;449            // no config data is there, need to create them for partition 0/1
;;;450            ota_init_partition_boot_cfg();
;;;451            return 0;
;;;452        }
;;;453    
;;;454        if (boot_cfg_0.ncpu_cfg.flag & boot_cfg_1.ncpu_cfg.flag & BOOT_STATE_CONFIRMED)
00002e  6943              LDR      r3,[r0,#0x14]  ; boot_cfg_1
000030  ea010403          AND      r4,r1,r3
000034  07e4              LSLS     r4,r4,#31
000036  d011              BEQ      |L3.92|
;;;455        {
;;;456    
;;;457            if (BOOT_STATE_CONFIRMED == boot_cfg_0.ncpu_cfg.flag)
;;;458                boot_cfg_1.ncpu_cfg.flag = BOOT_STATE_NOT_CONFIRMED;
000038  2408              MOVS     r4,#8
00003a  2901              CMP      r1,#1                 ;457
00003c  d00b              BEQ      |L3.86|
;;;459            else if (BOOT_STATE_CONFIRMED == boot_cfg_1.ncpu_cfg.flag)
00003e  2b01              CMP      r3,#1
000040  d00b              BEQ      |L3.90|
;;;460                boot_cfg_0.ncpu_cfg.flag = BOOT_STATE_NOT_CONFIRMED;
;;;461            else
;;;462            {
;;;463                err_msg("Critical Error: 2 active NCPU boot config\n");
000042  a110              ADR      r1,|L3.132|
000044  2002              MOVS     r0,#2
000046  f7fffffe          BL       kdp_level_printf
;;;464                return -1;
00004a  f04f30ff          MOV      r0,#0xffffffff
;;;465            }
;;;466        }
;;;467    
;;;468        if ((boot_cfg_0.ncpu_cfg.partition_id == boot_cfg_1.ncpu_cfg.partition_id) &&
;;;469            (boot_cfg_0.ncpu_cfg.seq == boot_cfg_1.ncpu_cfg.seq))
;;;470        {
;;;471            // no config data is there, need to create them for partition 0/1
;;;472            ota_init_partition_boot_cfg();
;;;473            return 0;
;;;474        }
;;;475    
;;;476        if ((boot_cfg_0.ncpu_cfg.flag & BOOT_STATE_CONFIRMED) == BOOT_STATE_CONFIRMED)
;;;477            return 0;
;;;478    
;;;479        if ((boot_cfg_1.ncpu_cfg.flag & BOOT_STATE_CONFIRMED) == BOOT_STATE_CONFIRMED)
;;;480            return 1;
;;;481        return 0;
;;;482    }
00004e  bd10              POP      {r4,pc}
                  |L3.80|
000050  f7fffffe          BL       ota_init_partition_boot_cfg
000054  e00d              B        |L3.114|
                  |L3.86|
000056  6144              STR      r4,[r0,#0x14]         ;458  ; boot_cfg_1
000058  e000              B        |L3.92|
                  |L3.90|
00005a  6154              STR      r4,[r2,#0x14]         ;460  ; boot_cfg_0
                  |L3.92|
00005c  68d1              LDR      r1,[r2,#0xc]          ;468  ; boot_cfg_0
00005e  68c3              LDR      r3,[r0,#0xc]          ;468  ; boot_cfg_1
000060  4299              CMP      r1,r3                 ;468
000062  d103              BNE      |L3.108|
000064  6911              LDR      r1,[r2,#0x10]         ;469  ; boot_cfg_0
000066  6903              LDR      r3,[r0,#0x10]         ;469  ; boot_cfg_1
000068  4299              CMP      r1,r3                 ;469
00006a  d0f1              BEQ      |L3.80|
                  |L3.108|
00006c  7d11              LDRB     r1,[r2,#0x14]         ;476  ; boot_cfg_0
00006e  07c9              LSLS     r1,r1,#31             ;476
000070  d001              BEQ      |L3.118|
                  |L3.114|
000072  2000              MOVS     r0,#0                 ;477
                  |L3.116|
000074  bd10              POP      {r4,pc}
                  |L3.118|
000076  7d00              LDRB     r0,[r0,#0x14]         ;479  ; boot_cfg_1
000078  07c0              LSLS     r0,r0,#31             ;479
00007a  d0fb              BEQ      |L3.116|
00007c  2001              MOVS     r0,#1                 ;480
00007e  bd10              POP      {r4,pc}
;;;483    
                          ENDP

                  |L3.128|
                          DCD      ||.bss||
                  |L3.132|
000084  43726974          DCB      "Critical Error: 2 active NCPU boot config\n",0
000088  6963616c
00008c  20457272
000090  6f723a20
000094  32206163
000098  74697665
00009c  204e4350
0000a0  5520626f
0000a4  6f742063
0000a8  6f6e6669
0000ac  670a00  
0000af  00                DCB      0

                          AREA ||i.ota_get_active_scpu_partition||, CODE, READONLY, ALIGN=2

                  ota_get_active_scpu_partition PROC
;;;375    
;;;376    int ota_get_active_scpu_partition(void)
000000  b510              PUSH     {r4,lr}
;;;377    {
;;;378        kdp_memxfer_flash_to_ddr((UINT32)&boot_cfg_0, PARTITION_0_CFG_START_IN_FLASH , sizeof( boot_cfg_0) );
000002  2218              MOVS     r2,#0x18
000004  f44f3168          MOV      r1,#0x3a000
000008  481b              LDR      r0,|L4.120|
00000a  f7fffffe          BL       kdp_memxfer_flash_to_ddr
;;;379        kdp_memxfer_flash_to_ddr((UINT32)&boot_cfg_1, PARTITION_1_CFG_START_IN_FLASH , sizeof( boot_cfg_1) );
00000e  481a              LDR      r0,|L4.120|
000010  2218              MOVS     r2,#0x18
000012  f44f21f2          MOV      r1,#0x79000
000016  3018              ADDS     r0,r0,#0x18
000018  f7fffffe          BL       kdp_memxfer_flash_to_ddr
;;;380    
;;;381        if ((boot_cfg_0.scpu_cfg.flag == 0xffffffff) && (boot_cfg_1.scpu_cfg.flag == 0xffffffff)) {
00001c  4a16              LDR      r2,|L4.120|
00001e  f1020018          ADD      r0,r2,#0x18           ;379
000022  6891              LDR      r1,[r2,#8]  ; boot_cfg_0
000024  1c4b              ADDS     r3,r1,#1
000026  d102              BNE      |L4.46|
000028  6883              LDR      r3,[r0,#8]  ; boot_cfg_1
00002a  1c5b              ADDS     r3,r3,#1
00002c  d00c              BEQ      |L4.72|
                  |L4.46|
;;;382            // no config data is there, need to create them for partition 0/1
;;;383            ota_init_partition_boot_cfg();
;;;384            return 0;
;;;385        }
;;;386    
;;;387        if (boot_cfg_0.scpu_cfg.flag & boot_cfg_1.scpu_cfg.flag & BOOT_STATE_CONFIRMED)
00002e  6883              LDR      r3,[r0,#8]  ; boot_cfg_1
000030  ea010403          AND      r4,r1,r3
000034  07e4              LSLS     r4,r4,#31
000036  d00d              BEQ      |L4.84|
;;;388        {
;;;389            if (BOOT_STATE_CONFIRMED == boot_cfg_0.scpu_cfg.flag)
;;;390                boot_cfg_1.scpu_cfg.flag = BOOT_STATE_NOT_CONFIRMED;
000038  2408              MOVS     r4,#8
00003a  2901              CMP      r1,#1                 ;389
00003c  d007              BEQ      |L4.78|
;;;391            else if (BOOT_STATE_CONFIRMED == boot_cfg_1.scpu_cfg.flag)
00003e  2b01              CMP      r3,#1
000040  d007              BEQ      |L4.82|
;;;392                boot_cfg_0.scpu_cfg.flag = BOOT_STATE_NOT_CONFIRMED;
;;;393            else
;;;394            {
;;;395                dbg_msg("Critical Error: 2 active SCPU boot config");
;;;396                return -1;
000042  f04f30ff          MOV      r0,#0xffffffff
;;;397            }
;;;398        }
;;;399    
;;;400        if ((boot_cfg_0.scpu_cfg.partition_id == boot_cfg_1.scpu_cfg.partition_id)
;;;401            && (boot_cfg_0.scpu_cfg.seq == boot_cfg_1.scpu_cfg.seq))
;;;402        {
;;;403            // no config data is there, need to create them for partition 0/1
;;;404            ota_init_partition_boot_cfg();
;;;405            return 0;
;;;406        }
;;;407    
;;;408        if ((boot_cfg_0.scpu_cfg.flag & BOOT_STATE_CONFIRMED) == BOOT_STATE_CONFIRMED)
;;;409            return 0;
;;;410    
;;;411        if ((boot_cfg_1.scpu_cfg.flag & BOOT_STATE_CONFIRMED) == BOOT_STATE_CONFIRMED)
;;;412            return 1;
;;;413        return 0;
;;;414    }
000046  bd10              POP      {r4,pc}
                  |L4.72|
000048  f7fffffe          BL       ota_init_partition_boot_cfg
00004c  e00d              B        |L4.106|
                  |L4.78|
00004e  6084              STR      r4,[r0,#8]            ;390  ; boot_cfg_1
000050  e000              B        |L4.84|
                  |L4.82|
000052  6094              STR      r4,[r2,#8]            ;392  ; boot_cfg_0
                  |L4.84|
000054  6811              LDR      r1,[r2,#0]            ;400  ; boot_cfg_0
000056  6803              LDR      r3,[r0,#0]            ;400  ; boot_cfg_1
000058  4299              CMP      r1,r3                 ;400
00005a  d103              BNE      |L4.100|
00005c  6851              LDR      r1,[r2,#4]            ;401  ; boot_cfg_0
00005e  6843              LDR      r3,[r0,#4]            ;401  ; boot_cfg_1
000060  4299              CMP      r1,r3                 ;401
000062  d0f1              BEQ      |L4.72|
                  |L4.100|
000064  7a11              LDRB     r1,[r2,#8]            ;408  ; boot_cfg_0
000066  07c9              LSLS     r1,r1,#31             ;408
000068  d001              BEQ      |L4.110|
                  |L4.106|
00006a  2000              MOVS     r0,#0                 ;409
                  |L4.108|
00006c  bd10              POP      {r4,pc}
                  |L4.110|
00006e  7a00              LDRB     r0,[r0,#8]            ;411  ; boot_cfg_1
000070  07c0              LSLS     r0,r0,#31             ;411
000072  d0fb              BEQ      |L4.108|
000074  2001              MOVS     r0,#1                 ;412
000076  bd10              POP      {r4,pc}
;;;415    
                          ENDP

                  |L4.120|
                          DCD      ||.bss||

                          AREA ||i.ota_get_model_crc||, CODE, READONLY, ALIGN=1

                  ota_get_model_crc PROC
;;;2563   
;;;2564   UINT32 ota_get_model_crc(void)
000000  b508              PUSH     {r3,lr}
;;;2565   {
;;;2566       UINT32  crc;
;;;2567       kdp_memxfer_flash_to_ddr( (UINT32)&crc, KDP_FLASH_FW_INFO_SIZE , 4 );
000002  2204              MOVS     r2,#4
000004  f44f71fa          MOV      r1,#0x1f4
000008  4668              MOV      r0,sp
00000a  f7fffffe          BL       kdp_memxfer_flash_to_ddr
;;;2568       return 0x00;
00000e  2000              MOVS     r0,#0
;;;2569   }
000010  bd08              POP      {r3,pc}
;;;2570   #endif
                          ENDP


                          AREA ||i.ota_get_scpu_flag_status||, CODE, READONLY, ALIGN=2

                  ota_get_scpu_flag_status PROC
;;;1178   
;;;1179   int ota_get_scpu_flag_status( void )
000000  b570              PUSH     {r4-r6,lr}
;;;1180   {
;;;1181       int ret = -1;
;;;1182    
;;;1183       boot_cfg_0.ncpu_cfg.flag =0xFF;
000002  4d0f              LDR      r5,|L6.64|
000004  20ff              MOVS     r0,#0xff
;;;1184       boot_cfg_1.ncpu_cfg.flag =0xFF;
000006  f1050618          ADD      r6,r5,#0x18
00000a  6168              STR      r0,[r5,#0x14]  ; boot_cfg_0
;;;1185   
;;;1186       kdp_memxfer_flash_to_ddr((UINT32)&boot_cfg_0, PARTITION_0_CFG_START_IN_FLASH , sizeof( boot_cfg_0) );
00000c  6170              STR      r0,[r6,#0x14]  ; boot_cfg_1
00000e  f04f34ff          MOV      r4,#0xffffffff        ;1181
000012  2218              MOVS     r2,#0x18
000014  f44f3168          MOV      r1,#0x3a000
000018  4628              MOV      r0,r5
00001a  f7fffffe          BL       kdp_memxfer_flash_to_ddr
;;;1187       kdp_memxfer_flash_to_ddr((UINT32)&boot_cfg_1, PARTITION_1_CFG_START_IN_FLASH , sizeof( boot_cfg_1) );
00001e  2218              MOVS     r2,#0x18
000020  f44f21f2          MOV      r1,#0x79000
000024  4630              MOV      r0,r6
000026  f7fffffe          BL       kdp_memxfer_flash_to_ddr
;;;1188   
;;;1189       if( boot_cfg_0.scpu_cfg.flag == USER_STATE_ACTIVE )
00002a  68a8              LDR      r0,[r5,#8]  ; boot_cfg_0
00002c  2801              CMP      r0,#1
00002e  d100              BNE      |L6.50|
;;;1190       {
;;;1191           ret = 0;
000030  2400              MOVS     r4,#0
                  |L6.50|
;;;1192       }
;;;1193       
;;;1194       if( boot_cfg_1.scpu_cfg.flag == USER_STATE_ACTIVE )
000032  68b0              LDR      r0,[r6,#8]  ; boot_cfg_1
000034  2801              CMP      r0,#1
000036  d100              BNE      |L6.58|
;;;1195       {
;;;1196           ret = 1;
000038  2401              MOVS     r4,#1
                  |L6.58|
;;;1197       }
;;;1198       
;;;1199       return ret;
00003a  4620              MOV      r0,r4
;;;1200   }
00003c  bd70              POP      {r4-r6,pc}
;;;1201   
                          ENDP

00003e  0000              DCW      0x0000
                  |L6.64|
                          DCD      ||.bss||

                          AREA ||i.ota_handle_first_time_boot||, CODE, READONLY, ALIGN=2

                  ota_handle_first_time_boot PROC
;;;1043   
;;;1044   int ota_handle_first_time_boot(void)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;1045   {
;;;1046       int ret;
;;;1047   
;;;1048       #ifdef USE_KDRV
;;;1049       tmp_ver_buf = (u8*)KDP_DDR_OTA_FLASH_BUF_START_ADDR;
;;;1050       fn_read_data = kcomm_read;
;;;1051       #endif
;;;1052   
;;;1053       kdp_memxfer_init(MEMXFER_OPS_CPU, MEMXFER_OPS_CPU);
000004  2101              MOVS     r1,#1
000006  4608              MOV      r0,r1
000008  f7fffffe          BL       kdp_memxfer_init
;;;1054   
;;;1055       /* read flash to mem */
;;;1056       kdp_memxfer_flash_to_ddr( (UINT32)&boot_cfg_0 , PARTITION_0_CFG_START_IN_FLASH, sizeof(boot_cfg_0) );
00000c  f44f3868          MOV      r8,#0x3a000
000010  2218              MOVS     r2,#0x18
000012  4641              MOV      r1,r8
000014  483e              LDR      r0,|L7.272|
000016  f7fffffe          BL       kdp_memxfer_flash_to_ddr
;;;1057       kdp_memxfer_flash_to_ddr( (UINT32)&boot_cfg_1 , PARTITION_1_CFG_START_IN_FLASH, sizeof(boot_cfg_1) );
00001a  483d              LDR      r0,|L7.272|
00001c  f44f29f2          MOV      r9,#0x79000
000020  2218              MOVS     r2,#0x18
000022  4649              MOV      r1,r9
000024  3018              ADDS     r0,r0,#0x18
000026  f7fffffe          BL       kdp_memxfer_flash_to_ddr
;;;1058   
;;;1059       #if (OTA_CONFIG_LOG_EN==YES)
;;;1060       //add for debug
;;;1061       dbg_msg("SCPU config_0 flag 0x%x seq %d \n", boot_cfg_0.scpu_cfg.flag , boot_cfg_0.scpu_cfg.seq);
;;;1062       dbg_msg("SCPU config_1 flag 0x%x seq %d \n", boot_cfg_1.scpu_cfg.flag , boot_cfg_1.scpu_cfg.seq);
;;;1063       dbg_msg("NCPU config_0 flag 0x%x seq %d \n", boot_cfg_0.ncpu_cfg.flag , boot_cfg_0.ncpu_cfg.seq);
;;;1064       dbg_msg("NCPU config_1 flag 0x%x seq %d \n", boot_cfg_1.ncpu_cfg.flag , boot_cfg_1.ncpu_cfg.seq);
;;;1065       #endif
;;;1066   
;;;1067   
;;;1068       if ((boot_cfg_0.scpu_cfg.flag == 0xffffffff) && (boot_cfg_1.scpu_cfg.flag == 0xffffffff)) {
00002a  4d39              LDR      r5,|L7.272|
00002c  f04f36ff          MOV      r6,#0xffffffff
000030  f1050418          ADD      r4,r5,#0x18           ;1057
000034  68a8              LDR      r0,[r5,#8]  ; boot_cfg_0
000036  1c41              ADDS     r1,r0,#1
000038  d015              BEQ      |L7.102|
;;;1069           ret = -1;
;;;1070           goto exit;
;;;1071       }
;;;1072   
;;;1073       if ((boot_cfg_0.scpu_cfg.flag == BOOT_STATE_FIRST_BOOT) ||
00003a  2802              CMP      r0,#2
00003c  d018              BEQ      |L7.112|
                  |L7.62|
;;;1074           (boot_cfg_0.ncpu_cfg.flag == BOOT_STATE_FIRST_BOOT) ||
00003e  696a              LDR      r2,[r5,#0x14]  ; boot_cfg_0
000040  2a02              CMP      r2,#2
000042  d015              BEQ      |L7.112|
;;;1075           (boot_cfg_1.scpu_cfg.flag == BOOT_STATE_FIRST_BOOT) ||
000044  68a1              LDR      r1,[r4,#8]  ; boot_cfg_1
000046  2902              CMP      r1,#2
000048  d012              BEQ      |L7.112|
;;;1076           (boot_cfg_1.ncpu_cfg.flag == BOOT_STATE_FIRST_BOOT)) {
00004a  6963              LDR      r3,[r4,#0x14]  ; boot_cfg_1
00004c  2b02              CMP      r3,#2
00004e  d00f              BEQ      |L7.112|
000050  2601              MOVS     r6,#1                 ;1053
;;;1077           err_msg("Error: wrong state, BOOT_STATE_FIRST_BOOT shall not be here\n");
;;;1078           ret = -1;
;;;1079           goto exit;
;;;1080       }
;;;1081   
;;;1082       /* determine if necessary to read flash */
;;;1083   
;;;1084       if ((boot_cfg_0.scpu_cfg.flag != BOOT_STATE_POST_FIRST_BOOT) &&
;;;1085           (boot_cfg_0.ncpu_cfg.flag != BOOT_STATE_POST_FIRST_BOOT) &&
;;;1086           (boot_cfg_1.scpu_cfg.flag != BOOT_STATE_POST_FIRST_BOOT) &&
;;;1087           (boot_cfg_1.ncpu_cfg.flag != BOOT_STATE_POST_FIRST_BOOT)) {
;;;1088   
;;;1089           ret = 0;
;;;1090           goto exit;
;;;1091       }
;;;1092   
;;;1093       if (boot_cfg_0.scpu_cfg.flag == BOOT_STATE_POST_FIRST_BOOT) {
;;;1094           boot_cfg_0.scpu_cfg.flag = BOOT_STATE_CONFIRMED;
;;;1095           if(boot_cfg_1.scpu_cfg.flag == BOOT_STATE_CONFIRMED) {
;;;1096               boot_cfg_1.scpu_cfg.flag = BOOT_STATE_NOT_CONFIRMED;
000052  2708              MOVS     r7,#8
000054  2804              CMP      r0,#4                 ;1084
000056  d010              BEQ      |L7.122|
000058  2a04              CMP      r2,#4                 ;1085
00005a  d019              BEQ      |L7.144|
00005c  2904              CMP      r1,#4                 ;1086
00005e  d023              BEQ      |L7.168|
000060  2b04              CMP      r3,#4                 ;1087
000062  d145              BNE      |L7.240|
000064  e02c              B        |L7.192|
                  |L7.102|
000066  68a1              LDR      r1,[r4,#8]            ;1068  ; boot_cfg_1
000068  1c49              ADDS     r1,r1,#1              ;1068
00006a  d1e8              BNE      |L7.62|
                  |L7.108|
00006c  4634              MOV      r4,r6                 ;1069
00006e  e040              B        |L7.242|
                  |L7.112|
000070  a128              ADR      r1,|L7.276|
000072  2002              MOVS     r0,#2                 ;1077
000074  f7fffffe          BL       kdp_level_printf
000078  e7f8              B        |L7.108|
                  |L7.122|
00007a  60ae              STR      r6,[r5,#8]            ;1095  ; boot_cfg_0
00007c  2901              CMP      r1,#1                 ;1095
00007e  d100              BNE      |L7.130|
000080  60a7              STR      r7,[r4,#8]  ; boot_cfg_1
                  |L7.130|
;;;1097           }
;;;1098           err_msg("SCPU partition 0 was confirmed\n");
000082  a134              ADR      r1,|L7.340|
000084  2002              MOVS     r0,#2
000086  f7fffffe          BL       kdp_level_printf
;;;1099   
;;;1100       }
;;;1101   
;;;1102       if (boot_cfg_0.ncpu_cfg.flag == BOOT_STATE_POST_FIRST_BOOT) {
00008a  6968              LDR      r0,[r5,#0x14]  ; boot_cfg_0
00008c  2804              CMP      r0,#4
00008e  d108              BNE      |L7.162|
                  |L7.144|
;;;1103           boot_cfg_0.ncpu_cfg.flag = BOOT_STATE_CONFIRMED;
;;;1104           if(boot_cfg_1.ncpu_cfg.flag == BOOT_STATE_CONFIRMED) {
000090  616e              STR      r6,[r5,#0x14]  ; boot_cfg_0
000092  6960              LDR      r0,[r4,#0x14]  ; boot_cfg_1
000094  2801              CMP      r0,#1
000096  d100              BNE      |L7.154|
;;;1105               boot_cfg_1.ncpu_cfg.flag = BOOT_STATE_NOT_CONFIRMED;
000098  6167              STR      r7,[r4,#0x14]  ; boot_cfg_1
                  |L7.154|
;;;1106           }
;;;1107           err_msg("NCPU partition 0 was confirmed\n");
00009a  a136              ADR      r1,|L7.372|
00009c  2002              MOVS     r0,#2
00009e  f7fffffe          BL       kdp_level_printf
                  |L7.162|
;;;1108       }
;;;1109   
;;;1110       if (boot_cfg_1.scpu_cfg.flag == BOOT_STATE_POST_FIRST_BOOT) {
0000a2  68a0              LDR      r0,[r4,#8]  ; boot_cfg_1
0000a4  2804              CMP      r0,#4
0000a6  d108              BNE      |L7.186|
                  |L7.168|
;;;1111           boot_cfg_1.scpu_cfg.flag = BOOT_STATE_CONFIRMED;
;;;1112           if(boot_cfg_0.scpu_cfg.flag == BOOT_STATE_CONFIRMED) {
0000a8  60a6              STR      r6,[r4,#8]  ; boot_cfg_1
0000aa  68a8              LDR      r0,[r5,#8]  ; boot_cfg_0
0000ac  2801              CMP      r0,#1
0000ae  d100              BNE      |L7.178|
;;;1113               boot_cfg_0.scpu_cfg.flag = BOOT_STATE_NOT_CONFIRMED;
0000b0  60af              STR      r7,[r5,#8]  ; boot_cfg_0
                  |L7.178|
;;;1114           }
;;;1115           err_msg("SCPU partition 1 was confirmed\n");
0000b2  a138              ADR      r1,|L7.404|
0000b4  2002              MOVS     r0,#2
0000b6  f7fffffe          BL       kdp_level_printf
                  |L7.186|
;;;1116       }
;;;1117   
;;;1118       if (boot_cfg_1.ncpu_cfg.flag == BOOT_STATE_POST_FIRST_BOOT) {
0000ba  6960              LDR      r0,[r4,#0x14]  ; boot_cfg_1
0000bc  2804              CMP      r0,#4
0000be  d108              BNE      |L7.210|
                  |L7.192|
;;;1119           boot_cfg_1.ncpu_cfg.flag = BOOT_STATE_CONFIRMED;
;;;1120           if(boot_cfg_0.ncpu_cfg.flag == BOOT_STATE_CONFIRMED) {
0000c0  6166              STR      r6,[r4,#0x14]  ; boot_cfg_1
0000c2  6968              LDR      r0,[r5,#0x14]  ; boot_cfg_0
0000c4  2801              CMP      r0,#1
0000c6  d100              BNE      |L7.202|
;;;1121               boot_cfg_0.ncpu_cfg.flag = BOOT_STATE_NOT_CONFIRMED;
0000c8  616f              STR      r7,[r5,#0x14]  ; boot_cfg_0
                  |L7.202|
;;;1122           }
;;;1123           err_msg("NCPU partition 1 was confirmed\n");
0000ca  a13a              ADR      r1,|L7.436|
0000cc  2002              MOVS     r0,#2
0000ce  f7fffffe          BL       kdp_level_printf
                  |L7.210|
;;;1124       }
;;;1125   
;;;1126       ret = kdp_memxfer_ddr_to_flash((UINT32)PARTITION_0_CFG_START_IN_FLASH , (UINT32)&boot_cfg_0,sizeof(boot_cfg_0));
0000d2  2218              MOVS     r2,#0x18
0000d4  490e              LDR      r1,|L7.272|
0000d6  4644              MOV      r4,r8
0000d8  4640              MOV      r0,r8
0000da  f7fffffe          BL       kdp_memxfer_ddr_to_flash
;;;1127   
;;;1128       if (ret == 0 )
0000de  b178              CBZ      r0,|L7.256|
;;;1129       {
;;;1130           err_msg("Flash write fail on %x\n", PARTITION_0_CFG_START_IN_FLASH);
;;;1131           ret = OTA_FLASH_FAIL;
;;;1132           goto exit;
;;;1133       }
;;;1134   
;;;1135       ret = kdp_memxfer_ddr_to_flash((UINT32)PARTITION_1_CFG_START_IN_FLASH , (UINT32)&boot_cfg_1,sizeof(boot_cfg_1));
0000e0  490b              LDR      r1,|L7.272|
0000e2  2218              MOVS     r2,#0x18
0000e4  3118              ADDS     r1,r1,#0x18
0000e6  464c              MOV      r4,r9
0000e8  4648              MOV      r0,r9
0000ea  f7fffffe          BL       kdp_memxfer_ddr_to_flash
;;;1136       if (ret == 0 )
0000ee  b138              CBZ      r0,|L7.256|
                  |L7.240|
;;;1137       {
;;;1138           err_msg("Flash write fail on %x\n", PARTITION_1_CFG_START_IN_FLASH);
;;;1139           ret = OTA_FLASH_FAIL;
;;;1140       } else {
;;;1141           ret = 0;
0000f0  2400              MOVS     r4,#0
                  |L7.242|
;;;1142       }
;;;1143   
;;;1144   
;;;1145   
;;;1146   exit:
;;;1147       #if (OTA_CONFIG_LOG_EN==YES)
;;;1148       //for debug
;;;1149       dbg_msg("SCPU config_0 flag 0x%x seq %d \n", boot_cfg_0.scpu_cfg.flag , boot_cfg_0.scpu_cfg.seq);
;;;1150       dbg_msg("SCPU config_1 flag 0x%x seq %d \n", boot_cfg_1.scpu_cfg.flag , boot_cfg_1.scpu_cfg.seq);
;;;1151       dbg_msg("NCPU config_0 flag 0x%x seq %d \n", boot_cfg_0.ncpu_cfg.flag , boot_cfg_0.ncpu_cfg.seq);
;;;1152       dbg_msg("NCPU config_1 flag 0x%x seq %d \n", boot_cfg_1.ncpu_cfg.flag , boot_cfg_1.ncpu_cfg.seq);
;;;1153       #endif
;;;1154   
;;;1155       power_manager_register(PM_DEVICE_OTA_UPDATE, &ota_update_pm);
0000f2  4938              LDR      r1,|L7.468|
0000f4  2006              MOVS     r0,#6
0000f6  f7fffffe          BL       power_manager_register
;;;1156   
;;;1157       return ret;
0000fa  4620              MOV      r0,r4
;;;1158   }
0000fc  e8bd87f0          POP      {r4-r10,pc}
                  |L7.256|
000100  4622              MOV      r2,r4                 ;1138
000102  a135              ADR      r1,|L7.472|
000104  2002              MOVS     r0,#2                 ;1138
000106  f7fffffe          BL       kdp_level_printf
00010a  24fc              MOVS     r4,#0xfc              ;1139
00010c  e7f1              B        |L7.242|
;;;1159   
                          ENDP

00010e  0000              DCW      0x0000
                  |L7.272|
                          DCD      ||.bss||
                  |L7.276|
000114  4572726f          DCB      "Error: wrong state, BOOT_STATE_FIRST_BOOT shall not be "
000118  723a2077
00011c  726f6e67
000120  20737461
000124  74652c20
000128  424f4f54
00012c  5f535441
000130  54455f46
000134  49525354
000138  5f424f4f
00013c  54207368
000140  616c6c20
000144  6e6f7420
000148  626520  
00014b  68657265          DCB      "here\n",0
00014f  0a00    
000151  00                DCB      0
000152  00                DCB      0
000153  00                DCB      0
                  |L7.340|
000154  53435055          DCB      "SCPU partition 0 was confirmed\n",0
000158  20706172
00015c  74697469
000160  6f6e2030
000164  20776173
000168  20636f6e
00016c  6669726d
000170  65640a00
                  |L7.372|
000174  4e435055          DCB      "NCPU partition 0 was confirmed\n",0
000178  20706172
00017c  74697469
000180  6f6e2030
000184  20776173
000188  20636f6e
00018c  6669726d
000190  65640a00
                  |L7.404|
000194  53435055          DCB      "SCPU partition 1 was confirmed\n",0
000198  20706172
00019c  74697469
0001a0  6f6e2031
0001a4  20776173
0001a8  20636f6e
0001ac  6669726d
0001b0  65640a00
                  |L7.436|
0001b4  4e435055          DCB      "NCPU partition 1 was confirmed\n",0
0001b8  20706172
0001bc  74697469
0001c0  6f6e2031
0001c4  20776173
0001c8  20636f6e
0001cc  6669726d
0001d0  65640a00
                  |L7.468|
                          DCD      ||area_number.30||+0x14
                  |L7.472|
0001d8  466c6173          DCB      "Flash write fail on %x\n",0
0001dc  68207772
0001e0  69746520
0001e4  6661696c
0001e8  206f6e20
0001ec  25780a00

                          AREA ||i.ota_init_partition_boot_cfg||, CODE, READONLY, ALIGN=2

                  ota_init_partition_boot_cfg PROC
;;;327    #endif
;;;328    void ota_init_partition_boot_cfg(void)
000000  b570              PUSH     {r4-r6,lr}
;;;329    {
;;;330        int ret;
;;;331        boot_cfg_0.scpu_cfg.partition_id = 0;
000002  4919              LDR      r1,|L8.104|
000004  2200              MOVS     r2,#0
;;;332        boot_cfg_0.scpu_cfg.seq = 1;
000006  2001              MOVS     r0,#1
000008  e9c12000          STRD     r2,r0,[r1,#0]
00000c  e9c10202          STRD     r0,r2,[r1,#8]
;;;333        boot_cfg_0.scpu_cfg.flag = BOOT_STATE_CONFIRMED;
;;;334    
;;;335        boot_cfg_0.ncpu_cfg.partition_id = 0;
;;;336        boot_cfg_0.ncpu_cfg.seq = 1;
;;;337        boot_cfg_0.ncpu_cfg.flag = BOOT_STATE_CONFIRMED;
000010  6108              STR      r0,[r1,#0x10]  ; boot_cfg_0
;;;338    
;;;339        boot_cfg_1.scpu_cfg.partition_id = 1;
000012  6148              STR      r0,[r1,#0x14]  ; boot_cfg_0
000014  3118              ADDS     r1,r1,#0x18
;;;340        boot_cfg_1.scpu_cfg.seq = 0;
;;;341        boot_cfg_1.scpu_cfg.flag = BOOT_STATE_NOT_CONFIRMED;
000016  2308              MOVS     r3,#8
000018  c10d              STM      r1!,{r0,r2,r3}
;;;342    
;;;343        boot_cfg_1.ncpu_cfg.partition_id = 1;
;;;344        boot_cfg_1.ncpu_cfg.seq = 0;
;;;345        boot_cfg_1.ncpu_cfg.flag = BOOT_STATE_NOT_CONFIRMED;
;;;346    
;;;347    
;;;348        kdp_memxfer_flash_sector_multi_erase( PARTITION_0_CFG_START_IN_FLASH, PARTITION_0_CFG_START_IN_FLASH );
00001a  f44f3468          MOV      r4,#0x3a000
00001e  e881000d          STM      r1,{r0,r2,r3}         ;341
000022  4621              MOV      r1,r4
000024  4608              MOV      r0,r1
000026  f7fffffe          BL       kdp_memxfer_flash_sector_multi_erase
;;;349        kdp_memxfer_flash_sector_multi_erase( PARTITION_1_CFG_START_IN_FLASH, PARTITION_1_CFG_START_IN_FLASH );
00002a  f44f25f2          MOV      r5,#0x79000
00002e  4629              MOV      r1,r5
000030  4608              MOV      r0,r1
000032  f7fffffe          BL       kdp_memxfer_flash_sector_multi_erase
;;;350    
;;;351        ret = kdp_memxfer_ddr_to_flash(  (UINT32)PARTITION_0_CFG_START_IN_FLASH , (UINT32)&boot_cfg_0,sizeof(boot_cfg_0));
000036  2218              MOVS     r2,#0x18
000038  490b              LDR      r1,|L8.104|
00003a  4620              MOV      r0,r4
00003c  f7fffffe          BL       kdp_memxfer_ddr_to_flash
;;;352    
;;;353        if (ret == 0) {
;;;354        	dbg_msg("Error: Flash partition 0 config Timeout");
;;;355        }
;;;356    
;;;357        ret = kdp_memxfer_ddr_to_flash(  (UINT32)PARTITION_1_CFG_START_IN_FLASH , (UINT32)&boot_cfg_1,sizeof(boot_cfg_1));
000040  4909              LDR      r1,|L8.104|
000042  2218              MOVS     r2,#0x18
000044  3118              ADDS     r1,r1,#0x18
000046  4628              MOV      r0,r5
000048  f7fffffe          BL       kdp_memxfer_ddr_to_flash
;;;358    
;;;359        if (ret == 0) {
;;;360        	dbg_msg("Error: Flash partition 1 config Timeout");
;;;361        }
;;;362    
;;;363        kdp_memxfer_flash_to_ddr((UINT32)&boot_cfg_0, PARTITION_0_CFG_START_IN_FLASH , sizeof( boot_cfg_0) );
00004c  2218              MOVS     r2,#0x18
00004e  4621              MOV      r1,r4
000050  4805              LDR      r0,|L8.104|
000052  f7fffffe          BL       kdp_memxfer_flash_to_ddr
;;;364        kdp_memxfer_flash_to_ddr((UINT32)&boot_cfg_1, PARTITION_1_CFG_START_IN_FLASH , sizeof( boot_cfg_1) );
000056  4629              MOV      r1,r5
000058  e8bd4070          POP      {r4-r6,lr}
00005c  4802              LDR      r0,|L8.104|
00005e  2218              MOVS     r2,#0x18
000060  3018              ADDS     r0,r0,#0x18
000062  f7ffbffe          B.W      kdp_memxfer_flash_to_ddr
;;;365    
;;;366    }
;;;367    
                          ENDP

000066  0000              DCW      0x0000
                  |L8.104|
                          DCD      ||.bss||

                          AREA ||i.ota_update_case||, CODE, READONLY, ALIGN=2

                  ota_update_case PROC
;;;682    
;;;683    int ota_update_case( u8 update_case, u32 data_addr, u32 size )
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;684    {
000004  4615              MOV      r5,r2
;;;685        #ifdef USE_KDRV
;;;686        int ret;
;;;687        u32 sum32_download, sum32_embedded;
;;;688    
;;;689        if (ret == size) {
;;;690            sum32_embedded = *(u32 *)(data_addr + size - 4);
;;;691            sum32_download = kdp_gen_sum32((u8 *)data_addr, size - 4);
;;;692            if (sum32_embedded != sum32_download)
;;;693            {
;;;694                // ota_update_abort();
;;;695                return OTA_AUTH_FAIL;
;;;696            }
;;;697        } else {
;;;698            // ota_update_abort();
;;;699            return OTA_DOWNLOAD_FAIL;
;;;700        }
;;;701        #endif
;;;702    
;;;703        dbg_msg_console("update_case = %d, data_addr = %#X, size = %#X ",update_case, data_addr,size);
000006  9200              STR      r2,[sp,#0]
000008  4688              MOV      r8,r1                 ;684
00000a  4607              MOV      r7,r0                 ;684
00000c  460b              MOV      r3,r1
00000e  4602              MOV      r2,r0
000010  a118              ADR      r1,|L9.116|
000012  2001              MOVS     r0,#1
000014  f7fffffe          BL       kdp_level_printf
;;;704    
;;;705        //step 1: get all bin files and 4 alignment  //from USB buffer
;;;706        //init OTA ptr and variables
;;;707        Drv_OTA_init( &stOTA );
000018  4823              LDR      r0,|L9.168|
00001a  f7fffffe          BL       Drv_OTA_init
;;;708        //step 2: init config files
;;;709        //2-1
;;;710        stOTA.receive_cmd.cmd_stat = (UINT16) FLASH_CMD_ACT;
00001e  4c22              LDR      r4,|L9.168|
000020  2600              MOVS     r6,#0
;;;711        stOTA.receive_cmd.action_number = FLASH_CMD_ACT_NUM_INIT;
000022  2001              MOVS     r0,#1
000024  8166              STRH     r6,[r4,#0xa]          ;710
000026  73a0              STRB     r0,[r4,#0xe]
;;;712    
;;;713        stOTA.sector_offset = 0;
;;;714        stOTA.target_bytes = size;
;;;715        stOTA.target_sectors = stOTA.target_bytes>>12;
000028  6766              STR      r6,[r4,#0x74]  ; stOTA
00002a  0b28              LSRS     r0,r5,#12
00002c  f8c45080          STR      r5,[r4,#0x80]  ; stOTA
000030  f8a4007a          STRH     r0,[r4,#0x7a]
;;;716    
;;;717        if(  drv_flash_main( &stOTA ) != FLASH_DRV_OK )
000034  4620              MOV      r0,r4
000036  f7fffffe          BL       drv_flash_main
00003a  2801              CMP      r0,#1
00003c  d002              BEQ      |L9.68|
;;;718        {
;;;719            return OTA_AUTH_FAIL;
00003e  20fb              MOVS     r0,#0xfb
                  |L9.64|
;;;720        }
;;;721        //2-2
;;;722        stOTA.receive_cmd.cmd_stat = (UINT16) FLASH_CMD_ACT;
;;;723        stOTA.receive_cmd.action_number = update_case;
;;;724        if(  drv_flash_main( &stOTA ) != FLASH_DRV_OK )
;;;725        {
;;;726            return OTA_DOWNLOAD_FAIL;
;;;727    
;;;728        }
;;;729        //step 3: setting some parameters large program
;;;730        stOTA.receive_cmd.cmd_stat = (UINT16) FLASH_CMD_ACT;
;;;731        stOTA.receive_cmd.action_number = FLASH_CMD_ACT_NUM_PROC_DONE;
;;;732    
;;;733        //need to check the following parameter
;;;734        stOTA.ddr_ptr_index = size;//size-4        //need to assign correct bin size!
;;;735        stOTA.ddr_ptr = (UINT32*)data_addr;        //need to assign an address, 4 alignment
;;;736    
;;;737        if(  drv_flash_main( &stOTA ) != FLASH_DRV_OK )
;;;738        {
;;;739            return OTA_FLASH_FAIL;
;;;740        }
;;;741    
;;;742        return OTA_UPDATE_SUCCESS;
;;;743    }
000040  e8bd83f8          POP      {r3-r9,pc}
                  |L9.68|
000044  8166              STRH     r6,[r4,#0xa]          ;722
000046  73a7              STRB     r7,[r4,#0xe]          ;723
000048  4817              LDR      r0,|L9.168|
00004a  f7fffffe          BL       drv_flash_main
00004e  2801              CMP      r0,#1                 ;724
000050  d001              BEQ      |L9.86|
000052  20fd              MOVS     r0,#0xfd              ;726
000054  e7f4              B        |L9.64|
                  |L9.86|
000056  8166              STRH     r6,[r4,#0xa]          ;730
000058  2006              MOVS     r0,#6                 ;731
00005a  73a0              STRB     r0,[r4,#0xe]          ;731
00005c  e9c48522          STRD     r8,r5,[r4,#0x88]      ;731
000060  4811              LDR      r0,|L9.168|
000062  f7fffffe          BL       drv_flash_main
000066  2801              CMP      r0,#1                 ;737
000068  d001              BEQ      |L9.110|
00006a  20fc              MOVS     r0,#0xfc              ;739
00006c  e7e8              B        |L9.64|
                  |L9.110|
00006e  2000              MOVS     r0,#0                 ;742
000070  e7e6              B        |L9.64|
;;;744    
                          ENDP

000072  0000              DCW      0x0000
                  |L9.116|
000074  75706461          DCB      "update_case = %d, data_addr = %#X, size = %#X \r\n",0
000078  74655f63
00007c  61736520
000080  3d202564
000084  2c206461
000088  74615f61
00008c  64647220
000090  3d202523
000094  582c2073
000098  697a6520
00009c  3d202523
0000a0  58200d0a
0000a4  00      
0000a5  00                DCB      0
0000a6  00                DCB      0
0000a7  00                DCB      0
                  |L9.168|
                          DCD      stOTA

                          AREA ||i.ota_update_check_ncpu_ota||, CODE, READONLY, ALIGN=2

                  ota_update_check_ncpu_ota PROC
;;;1283   
;;;1284   void ota_update_check_ncpu_ota(u8 index)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1285   {
000004  4605              MOV      r5,r0
;;;1286       int area;
;;;1287       u32 ncrc = 0;
;;;1288   
;;;1289   
;;;1290       area = ota_get_active_ncpu_partition();
000006  f7fffffe          BL       ota_get_active_ncpu_partition
;;;1291   
;;;1292       if( area == 0 )
;;;1293       {
;;;1294           if(  boot_cfg_1.ncpu_cfg.flag == BOOT_STATE_POST_FIRST_BOOT  )
;;;1295           {
;;;1296               //check NCPU CRC
;;;1297               kdp_memxfer_flash_to_ddr( (u32)KDP_DDR_MODEL_START_ADDR, KDP_FLASH_FW_NCPU1_ADDR , KDP_FLASH_FW_NCPU_SIZE );
;;;1298               ncrc = ota_crc32( (u8 *)KDP_DDR_MODEL_START_ADDR, KDP_FLASH_FW_NCPU_SIZE );
;;;1299               if( ncrc == gncpu_crc )
00000a  4f23              LDR      r7,|L10.152|
00000c  2100              MOVS     r1,#0                 ;1290
00000e  f44f3680          MOV      r6,#0x10000           ;1297
000012  f04f43c0          MOV      r3,#0x60000000        ;1297
;;;1300               {
;;;1301                   gota_judge_pool[index] = 0x80;
000016  2280              MOVS     r2,#0x80
000018  f107040c          ADD      r4,r7,#0xc
00001c  b150              CBZ      r0,|L10.52|
;;;1302                   gota_judge_pool[index] += OTA_STAT_BOOT_JUDGE_OK;
;;;1303               }
;;;1304               else
;;;1305               {
;;;1306                   gota_judge_pool[index] = area << 7;
;;;1307                   gota_judge_pool[index] += OTA_STAT_BOOT_JUDGE_CRC_FAIL;
;;;1308               }
;;;1309           }
;;;1310           else if(  boot_cfg_1.ncpu_cfg.flag == BOOT_STATE_FIRST_BOOT )
;;;1311           {
;;;1312               gota_judge_pool[index] = area<<7;
;;;1313               gota_judge_pool[index] += OTA_STAT_BOOT_JUDGE_OTA_FAIL;
;;;1314           }
;;;1315           else
;;;1316           {
;;;1317               gota_judge_pool[index] = area<<7;
;;;1318               gota_judge_pool[index] += OTA_STAT_NOTHING;
;;;1319               #if(OTA_BOOT_CONFIG_LOG==YES)
;;;1320               dbg_msg_flash("ncpu active area: %d",area);
;;;1321               #endif
;;;1322           }
;;;1323        }
;;;1324        else if( area == 1 )
00001e  2801              CMP      r0,#1
000020  d106              BNE      |L10.48|
;;;1325        {
;;;1326            if(  boot_cfg_0.ncpu_cfg.flag == BOOT_STATE_POST_FIRST_BOOT )
000022  481e              LDR      r0,|L10.156|
000024  6940              LDR      r0,[r0,#0x14]  ; boot_cfg_0
000026  2804              CMP      r0,#4
000028  d022              BEQ      |L10.112|
;;;1327            {
;;;1328                kdp_memxfer_flash_to_ddr( (u32)KDP_DDR_MODEL_START_ADDR, KDP_FLASH_FW_NCPU_ADDR , KDP_FLASH_FW_NCPU_SIZE );
;;;1329                ncrc = ota_crc32( (u8 *)KDP_DDR_MODEL_START_ADDR, KDP_FLASH_FW_NCPU_SIZE );
;;;1330               if( ncrc == gncpu_crc )
;;;1331               {
;;;1332                   gota_judge_pool[index] = 0x00;
;;;1333                   gota_judge_pool[index] += OTA_STAT_BOOT_JUDGE_OK;
;;;1334               }
;;;1335               else
;;;1336               {
;;;1337                   gota_judge_pool[index] = area << 7;
;;;1338                   gota_judge_pool[index] += OTA_STAT_BOOT_JUDGE_CRC_FAIL;
;;;1339               }
;;;1340            }
;;;1341            else if(  boot_cfg_0.ncpu_cfg.flag == BOOT_STATE_FIRST_BOOT )
00002a  2802              CMP      r0,#2
00002c  d032              BEQ      |L10.148|
;;;1342            {
;;;1343                gota_judge_pool[index] = area<<7;
;;;1344                gota_judge_pool[index] += OTA_STAT_BOOT_JUDGE_OTA_FAIL;
;;;1345            }
;;;1346            else
;;;1347            {
;;;1348                gota_judge_pool[index] = area<<7;
;;;1349                gota_judge_pool[index] += OTA_STAT_NOTHING;
00002e  5562              STRB     r2,[r4,r5]
                  |L10.48|
;;;1350               #if(OTA_BOOT_CONFIG_LOG==YES)
;;;1351               dbg_msg_flash("ncpu active area: %d",area);
;;;1352               #endif
;;;1353            }
;;;1354        }
;;;1355   }
000030  e8bd81f0          POP      {r4-r8,pc}
                  |L10.52|
000034  4819              LDR      r0,|L10.156|
000036  3018              ADDS     r0,r0,#0x18           ;1294
000038  6940              LDR      r0,[r0,#0x14]         ;1294  ; boot_cfg_1
00003a  2804              CMP      r0,#4                 ;1294
00003c  d003              BEQ      |L10.70|
00003e  2802              CMP      r0,#2                 ;1310
000040  d014              BEQ      |L10.108|
000042  5561              STRB     r1,[r4,r5]            ;1318
000044  e7f4              B        |L10.48|
                  |L10.70|
000046  4632              MOV      r2,r6                 ;1297
000048  f44f21d2          MOV      r1,#0x69000           ;1297
00004c  4698              MOV      r8,r3                 ;1297
00004e  4618              MOV      r0,r3                 ;1297
000050  f7fffffe          BL       kdp_memxfer_flash_to_ddr
000054  4631              MOV      r1,r6                 ;1298
000056  4640              MOV      r0,r8                 ;1298
000058  f7fffffe          BL       ota_crc32
00005c  6879              LDR      r1,[r7,#4]            ;1299  ; gncpu_crc
00005e  4288              CMP      r0,r1                 ;1299
000060  d101              BNE      |L10.102|
000062  2082              MOVS     r0,#0x82              ;1302
000064  e000              B        |L10.104|
                  |L10.102|
000066  2004              MOVS     r0,#4                 ;1307
                  |L10.104|
000068  5560              STRB     r0,[r4,r5]            ;1302
00006a  e7e1              B        |L10.48|
                  |L10.108|
00006c  2003              MOVS     r0,#3                 ;1313
00006e  e7fb              B        |L10.104|
                  |L10.112|
000070  4632              MOV      r2,r6                 ;1328
000072  f44f3128          MOV      r1,#0x2a000           ;1328
000076  4698              MOV      r8,r3                 ;1328
000078  4618              MOV      r0,r3                 ;1328
00007a  f7fffffe          BL       kdp_memxfer_flash_to_ddr
00007e  4631              MOV      r1,r6                 ;1329
000080  4640              MOV      r0,r8                 ;1329
000082  f7fffffe          BL       ota_crc32
000086  6879              LDR      r1,[r7,#4]            ;1330  ; gncpu_crc
000088  4288              CMP      r0,r1                 ;1330
00008a  d101              BNE      |L10.144|
00008c  2002              MOVS     r0,#2                 ;1333
00008e  e7eb              B        |L10.104|
                  |L10.144|
000090  2084              MOVS     r0,#0x84              ;1338
000092  e7e9              B        |L10.104|
                  |L10.148|
000094  2083              MOVS     r0,#0x83              ;1344
000096  e7e7              B        |L10.104|
;;;1356   
                          ENDP

                  |L10.152|
                          DCD      ||area_number.30||
                  |L10.156|
                          DCD      ||.bss||

                          AREA ||i.ota_update_check_scpu_ota||, CODE, READONLY, ALIGN=2

                  ota_update_check_scpu_ota PROC
;;;1202   
;;;1203   void ota_update_check_scpu_ota(u8 index)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1204   {
000004  4605              MOV      r5,r0
;;;1205       int area;
;;;1206       u32 ncrc = 0;
;;;1207       area = ota_get_active_scpu_partition();
000006  f7fffffe          BL       ota_get_active_scpu_partition
;;;1208       if( area == 0 )
;;;1209       {
;;;1210           if(  boot_cfg_1.scpu_cfg.flag == BOOT_STATE_POST_FIRST_BOOT  )
;;;1211           {
;;;1212               #if(OTA_BOOT_CONFIG_LOG==YES)
;;;1213               dbg_msg_flash("scpu length : %d ", KDP_FLASH_FW_SCPU_SIZE-20 );
;;;1214               #endif
;;;1215               //check SCPU CRC
;;;1216               kdp_memxfer_flash_to_ddr( (u32)KDP_DDR_MODEL_START_ADDR, KDP_FLASH_FW_SCPU1_ADDR , (KDP_FLASH_FW_SCPU_SIZE-20) );
00000a  4e22              LDR      r6,|L11.148|
;;;1217               ncrc = ota_crc32( (u8 *)KDP_DDR_MODEL_START_ADDR, (KDP_FLASH_FW_SCPU_SIZE-20) );
;;;1218               #if(OTA_BOOT_CONFIG_LOG==YES)
;;;1219               dbg_msg_flash("scpu area1: 0x%x , crc_ans:0x%x ",ncrc, gscpu_crc );
;;;1220               #endif
;;;1221   
;;;1222               if( ncrc == gscpu_crc )
00000c  4f22              LDR      r7,|L11.152|
00000e  2100              MOVS     r1,#0                 ;1207
000010  06f3              LSLS     r3,r6,#27             ;1216
;;;1223               {
;;;1224                   gota_judge_pool[index] = 0x80;
000012  2280              MOVS     r2,#0x80
000014  f107040c          ADD      r4,r7,#0xc
000018  b150              CBZ      r0,|L11.48|
;;;1225                   gota_judge_pool[index] += OTA_STAT_BOOT_JUDGE_OK;
;;;1226               }
;;;1227               else
;;;1228               {
;;;1229                   gota_judge_pool[index] = area << 7;
;;;1230                   gota_judge_pool[index] += OTA_STAT_BOOT_JUDGE_CRC_FAIL;
;;;1231               }
;;;1232           }
;;;1233           else if(  boot_cfg_1.scpu_cfg.flag == BOOT_STATE_FIRST_BOOT )
;;;1234           {
;;;1235               gota_judge_pool[index] = area<<7;
;;;1236               gota_judge_pool[index] += OTA_STAT_BOOT_JUDGE_OTA_FAIL;
;;;1237           }
;;;1238           else
;;;1239           {
;;;1240               gota_judge_pool[index] = area<<7;
;;;1241               gota_judge_pool[index] += OTA_STAT_NOTHING;
;;;1242               #if(OTA_BOOT_CONFIG_LOG==YES)
;;;1243               dbg_msg_flash("scpu active area: %d",area);
;;;1244               #endif
;;;1245           }
;;;1246       }
;;;1247       else if( area == 1 )
00001a  2801              CMP      r0,#1
00001c  d106              BNE      |L11.44|
;;;1248       {
;;;1249   
;;;1250           if(  boot_cfg_0.scpu_cfg.flag == BOOT_STATE_POST_FIRST_BOOT )
00001e  481f              LDR      r0,|L11.156|
000020  6880              LDR      r0,[r0,#8]  ; boot_cfg_0
000022  2804              CMP      r0,#4
000024  d022              BEQ      |L11.108|
;;;1251           {
;;;1252               //check SCPU CRC
;;;1253               kdp_memxfer_flash_to_ddr( (u32)KDP_DDR_MODEL_START_ADDR, KDP_FLASH_FW_SCPU_ADDR , KDP_FLASH_FW_SCPU_SIZE-20 );
;;;1254               ncrc = ota_crc32( (u8 *)KDP_DDR_MODEL_START_ADDR, KDP_FLASH_FW_SCPU_SIZE-20 );
;;;1255               //check SCPU CRC
;;;1256               if( ncrc == gscpu_crc )
;;;1257               {
;;;1258                   gota_judge_pool[index] = 0x00;
;;;1259                   gota_judge_pool[index] += OTA_STAT_BOOT_JUDGE_OK;
;;;1260               }
;;;1261               else
;;;1262               {
;;;1263                   gota_judge_pool[index] = area << 7;
;;;1264                   gota_judge_pool[index] += OTA_STAT_BOOT_JUDGE_CRC_FAIL;
;;;1265               }
;;;1266           }
;;;1267           else if(  boot_cfg_0.scpu_cfg.flag == BOOT_STATE_FIRST_BOOT )
000026  2802              CMP      r0,#2
000028  d032              BEQ      |L11.144|
;;;1268           {
;;;1269               gota_judge_pool[index] = area<<7;
;;;1270               gota_judge_pool[index] += OTA_STAT_BOOT_JUDGE_OTA_FAIL;
;;;1271           }
;;;1272           else
;;;1273           {
;;;1274               gota_judge_pool[index] = area<<7;
;;;1275               gota_judge_pool[index] += OTA_STAT_NOTHING;
00002a  5562              STRB     r2,[r4,r5]
                  |L11.44|
;;;1276               #if(OTA_BOOT_CONFIG_LOG==YES)
;;;1277               dbg_msg_flash("scpu active area: %d",area);
;;;1278               #endif
;;;1279           }
;;;1280   
;;;1281       }
;;;1282   }
00002c  e8bd81f0          POP      {r4-r8,pc}
                  |L11.48|
000030  481a              LDR      r0,|L11.156|
000032  3018              ADDS     r0,r0,#0x18           ;1210
000034  6880              LDR      r0,[r0,#8]            ;1210  ; boot_cfg_1
000036  2804              CMP      r0,#4                 ;1210
000038  d003              BEQ      |L11.66|
00003a  2802              CMP      r0,#2                 ;1233
00003c  d014              BEQ      |L11.104|
00003e  5561              STRB     r1,[r4,r5]            ;1241
000040  e7f4              B        |L11.44|
                  |L11.66|
000042  4632              MOV      r2,r6                 ;1216
000044  f44f2182          MOV      r1,#0x41000           ;1216
000048  4698              MOV      r8,r3                 ;1216
00004a  4618              MOV      r0,r3                 ;1216
00004c  f7fffffe          BL       kdp_memxfer_flash_to_ddr
000050  4631              MOV      r1,r6                 ;1217
000052  4640              MOV      r0,r8                 ;1217
000054  f7fffffe          BL       ota_crc32
000058  6839              LDR      r1,[r7,#0]            ;1222  ; gscpu_crc
00005a  4288              CMP      r0,r1                 ;1222
00005c  d101              BNE      |L11.98|
00005e  2082              MOVS     r0,#0x82              ;1225
000060  e000              B        |L11.100|
                  |L11.98|
000062  2004              MOVS     r0,#4                 ;1230
                  |L11.100|
000064  5560              STRB     r0,[r4,r5]            ;1225
000066  e7e1              B        |L11.44|
                  |L11.104|
000068  2003              MOVS     r0,#3                 ;1236
00006a  e7fb              B        |L11.100|
                  |L11.108|
00006c  4632              MOV      r2,r6                 ;1253
00006e  f44f5100          MOV      r1,#0x2000            ;1253
000072  4698              MOV      r8,r3                 ;1253
000074  4618              MOV      r0,r3                 ;1253
000076  f7fffffe          BL       kdp_memxfer_flash_to_ddr
00007a  4631              MOV      r1,r6                 ;1254
00007c  4640              MOV      r0,r8                 ;1254
00007e  f7fffffe          BL       ota_crc32
000082  6839              LDR      r1,[r7,#0]            ;1256  ; gscpu_crc
000084  4288              CMP      r0,r1                 ;1256
000086  d101              BNE      |L11.140|
000088  2002              MOVS     r0,#2                 ;1259
00008a  e7eb              B        |L11.100|
                  |L11.140|
00008c  2084              MOVS     r0,#0x84              ;1264
00008e  e7e9              B        |L11.100|
                  |L11.144|
000090  2083              MOVS     r0,#0x83              ;1270
000092  e7e7              B        |L11.100|
;;;1283   
                          ENDP

                  |L11.148|
                          DCD      0x00027fec
                  |L11.152|
                          DCD      ||area_number.30||
                  |L11.156|
                          DCD      ||.bss||

                          AREA ||i.ota_update_deep_sleep||, CODE, READONLY, ALIGN=2

                  ota_update_deep_sleep PROC
;;;69     
;;;70     int ota_update_deep_sleep(enum pm_device_id dev_id)
000000  b570              PUSH     {r4-r6,lr}
;;;71     {
;;;72         while (flashing == 1) {
;;;73             err_msg("ota_update_deep_sleep: stop for flashing.\n");
;;;74             osThreadFlagsWait(BIT27, osFlagsWaitAll, osWaitForever);
000002  f04f34ff          MOV      r4,#0xffffffff
000006  f04f6500          MOV      r5,#0x8000000
00000a  4e0a              LDR      r6,|L12.52|
00000c  e008              B        |L12.32|
                  |L12.14|
00000e  a10a              ADR      r1,|L12.56|
000010  2002              MOVS     r0,#2                 ;73
000012  f7fffffe          BL       kdp_level_printf
000016  4622              MOV      r2,r4
000018  2101              MOVS     r1,#1
00001a  4628              MOV      r0,r5
00001c  f7fffffe          BL       osThreadFlagsWait
                  |L12.32|
000020  68b0              LDR      r0,[r6,#8]            ;72  ; flashing
000022  2801              CMP      r0,#1                 ;72
000024  d0f3              BEQ      |L12.14|
;;;75         }
;;;76         err_msg("ota_update_deep_sleep: ok\n");
000026  a10f              ADR      r1,|L12.100|
000028  2002              MOVS     r0,#2
00002a  f7fffffe          BL       kdp_level_printf
;;;77     
;;;78         return 0;
00002e  2000              MOVS     r0,#0
;;;79     }
000030  bd70              POP      {r4-r6,pc}
;;;80     
                          ENDP

000032  0000              DCW      0x0000
                  |L12.52|
                          DCD      ||area_number.30||
                  |L12.56|
000038  6f74615f          DCB      "ota_update_deep_sleep: stop for flashing.\n",0
00003c  75706461
000040  74655f64
000044  6565705f
000048  736c6565
00004c  703a2073
000050  746f7020
000054  666f7220
000058  666c6173
00005c  68696e67
000060  2e0a00  
000063  00                DCB      0
                  |L12.100|
000064  6f74615f          DCB      "ota_update_deep_sleep: ok\n",0
000068  75706461
00006c  74655f64
000070  6565705f
000074  736c6565
000078  703a206f
00007c  6b0a00  
00007f  00                DCB      0

                          AREA ||i.ota_update_force_switch_active_partition||, CODE, READONLY, ALIGN=2

                  ota_update_force_switch_active_partition PROC
;;;957    
;;;958    int ota_update_force_switch_active_partition( u32 partition )
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;959    {
000004  4684              MOV      r12,r0
;;;960        u32 seq;
;;;961        int ret;
;;;962    
;;;963        if( ( partition != 1 ) && ( partition != 2 ) ) {
;;;964            dbg_msg("OTA Error: wrong partition number");
;;;965            return -1;
000006  f04f34ff          MOV      r4,#0xffffffff
00000a  2801              CMP      r0,#1                 ;963
00000c  d002              BEQ      |L13.20|
00000e  f1bc0f02          CMP      r12,#2                ;963
000012  d10f              BNE      |L13.52|
                  |L13.20|
;;;966        }
;;;967    
;;;968        if ((boot_cfg_0.scpu_cfg.flag == 0xffffffff) && (boot_cfg_1.scpu_cfg.flag == 0xffffffff)) {
000014  4b3a              LDR      r3,|L13.256|
000016  f1030018          ADD      r0,r3,#0x18
00001a  6899              LDR      r1,[r3,#8]  ; boot_cfg_0
00001c  6885              LDR      r5,[r0,#8]
00001e  468a              MOV      r10,r1
000020  1c49              ADDS     r1,r1,#1
000022  d101              BNE      |L13.40|
000024  1c69              ADDS     r1,r5,#1
000026  d008              BEQ      |L13.58|
                  |L13.40|
;;;969            // no config data is there, need to create them for partition 0/1
;;;970            ota_init_partition_boot_cfg();
;;;971            return 0;
;;;972        }
;;;973    
;;;974        if (boot_cfg_0.ncpu_cfg.flag & boot_cfg_1.ncpu_cfg.flag & BOOT_STATE_CONFIRMED)
000028  6941              LDR      r1,[r0,#0x14]  ; boot_cfg_1
00002a  695f              LDR      r7,[r3,#0x14]  ; boot_cfg_0
00002c  4689              MOV      r9,r1
00002e  4039              ANDS     r1,r1,r7
000030  07c9              LSLS     r1,r1,#31
000032  d005              BEQ      |L13.64|
                  |L13.52|
;;;975        {
;;;976            dbg_msg("OTA Critical Error: 2 active NCPU boot config");
;;;977            return -1;
000034  4620              MOV      r0,r4
                  |L13.54|
;;;978        }
;;;979    
;;;980        if ((boot_cfg_0.ncpu_cfg.partition_id == boot_cfg_1.ncpu_cfg.partition_id)
;;;981            && (boot_cfg_0.ncpu_cfg.seq == boot_cfg_1.ncpu_cfg.seq))
;;;982        {
;;;983            // no config data is there, need to create them for partition 0/1
;;;984            ota_init_partition_boot_cfg();
;;;985            dbg_msg("OTA only one partition, cannot switch\n");
;;;986            return -1;
;;;987        }
;;;988    
;;;989        if ( partition == 1 )     //switch SCPU
;;;990        {
;;;991            if (boot_cfg_0.scpu_cfg.flag == BOOT_STATE_CONFIRMED)
;;;992            {
;;;993                boot_cfg_1.scpu_cfg.flag = BOOT_STATE_CONFIRMED;
;;;994                seq = MAX(boot_cfg_0.scpu_cfg.seq, boot_cfg_1.scpu_cfg.seq);
;;;995                boot_cfg_1.scpu_cfg.seq = seq + 1;
;;;996                boot_cfg_0.scpu_cfg.flag = BOOT_STATE_NOT_CONFIRMED;
;;;997    
;;;998            } else if (boot_cfg_1.scpu_cfg.flag == BOOT_STATE_CONFIRMED)
;;;999            {
;;;1000               boot_cfg_0.scpu_cfg.flag = BOOT_STATE_CONFIRMED;
;;;1001               seq = MAX(boot_cfg_0.scpu_cfg.seq, boot_cfg_1.scpu_cfg.seq);
;;;1002               boot_cfg_0.scpu_cfg.seq = seq + 1;
;;;1003               boot_cfg_1.scpu_cfg.flag = BOOT_STATE_NOT_CONFIRMED;
;;;1004           }
;;;1005       }
;;;1006   
;;;1007       if (partition == 2)     //switch NCPU
;;;1008       {
;;;1009           if ( boot_cfg_0.ncpu_cfg.flag == BOOT_STATE_CONFIRMED )
;;;1010           {
;;;1011               boot_cfg_1.ncpu_cfg.flag = BOOT_STATE_CONFIRMED;
;;;1012               seq = MAX(boot_cfg_0.ncpu_cfg.seq, boot_cfg_1.ncpu_cfg.seq);
;;;1013               boot_cfg_1.ncpu_cfg.seq = seq + 1;
;;;1014               boot_cfg_0.ncpu_cfg.flag = BOOT_STATE_NOT_CONFIRMED;
;;;1015   
;;;1016           } else if ( boot_cfg_1.ncpu_cfg.flag == BOOT_STATE_CONFIRMED )
;;;1017           {
;;;1018               boot_cfg_0.ncpu_cfg.flag = BOOT_STATE_CONFIRMED;
;;;1019               seq = MAX(boot_cfg_0.ncpu_cfg.seq, boot_cfg_1.ncpu_cfg.seq);
;;;1020               boot_cfg_0.ncpu_cfg.seq = seq + 1;
;;;1021               boot_cfg_1.ncpu_cfg.flag = BOOT_STATE_NOT_CONFIRMED;
;;;1022           }
;;;1023       }
;;;1024   
;;;1025       ret = kdp_memxfer_ddr_to_flash(  (UINT32)PARTITION_0_CFG_START_IN_FLASH , (UINT32)&boot_cfg_0,sizeof(boot_cfg_0));
;;;1026   
;;;1027       if ( ret == 0 )
;;;1028       {
;;;1029           dbg_msg("OTA Flash write fail on %x\n", PARTITION_0_CFG_START_IN_FLASH);
;;;1030           return OTA_FLASH_FAIL;
;;;1031       }
;;;1032   
;;;1033       ret = kdp_memxfer_ddr_to_flash(  (UINT32)PARTITION_1_CFG_START_IN_FLASH , (UINT32)&boot_cfg_1,sizeof(boot_cfg_1));
;;;1034   
;;;1035       if ( ret == 0 )
;;;1036       {
;;;1037           err_msg("OTA Flash write fail on %x\n", PARTITION_1_CFG_START_IN_FLASH);
;;;1038           return OTA_FLASH_FAIL;
;;;1039       }
;;;1040   
;;;1041       return OTA_UPDATE_SUCCESS;
;;;1042   }
000036  e8bd87f0          POP      {r4-r10,pc}
                  |L13.58|
00003a  f7fffffe          BL       ota_init_partition_boot_cfg
00003e  e055              B        |L13.236|
                  |L13.64|
000040  492f              LDR      r1,|L13.256|
000042  68de              LDR      r6,[r3,#0xc]          ;980  ; boot_cfg_0
000044  f8d0800c          LDR      r8,[r0,#0xc]          ;981  ; boot_cfg_1
000048  690a              LDR      r2,[r1,#0x10]         ;968
00004a  3118              ADDS     r1,r1,#0x18           ;968
00004c  4546              CMP      r6,r8                 ;980
00004e  6909              LDR      r1,[r1,#0x10]         ;981
000050  d104              BNE      |L13.92|
000052  428a              CMP      r2,r1                 ;981
000054  d102              BNE      |L13.92|
000056  f7fffffe          BL       ota_init_partition_boot_cfg
00005a  e7eb              B        |L13.52|
                  |L13.92|
00005c  2601              MOVS     r6,#1                 ;959
00005e  2408              MOVS     r4,#8                 ;996
000060  f1bc0f01          CMP      r12,#1                ;989
000064  d003              BEQ      |L13.110|
000066  f1bc0f02          CMP      r12,#2                ;1007
00006a  d01a              BEQ      |L13.162|
00006c  e02e              B        |L13.204|
                  |L13.110|
00006e  4924              LDR      r1,|L13.256|
000070  684a              LDR      r2,[r1,#4]            ;968
000072  3118              ADDS     r1,r1,#0x18           ;968
000074  f1ba0f01          CMP      r10,#1                ;991
000078  6849              LDR      r1,[r1,#4]            ;994
00007a  d002              BEQ      |L13.130|
00007c  2d01              CMP      r5,#1                 ;998
00007e  d008              BEQ      |L13.146|
000080  e024              B        |L13.204|
                  |L13.130|
000082  6086              STR      r6,[r0,#8]            ;994  ; boot_cfg_1
000084  428a              CMP      r2,r1                 ;994
000086  d300              BCC      |L13.138|
000088  4611              MOV      r1,r2                 ;994
                  |L13.138|
00008a  1c49              ADDS     r1,r1,#1              ;994
00008c  6041              STR      r1,[r0,#4]            ;996  ; boot_cfg_1
00008e  609c              STR      r4,[r3,#8]            ;996  ; boot_cfg_0
000090  e01c              B        |L13.204|
                  |L13.146|
000092  609e              STR      r6,[r3,#8]            ;1001  ; boot_cfg_0
000094  428a              CMP      r2,r1                 ;1001
000096  d300              BCC      |L13.154|
000098  4611              MOV      r1,r2                 ;1001
                  |L13.154|
00009a  1c49              ADDS     r1,r1,#1              ;1001
00009c  6059              STR      r1,[r3,#4]            ;1003  ; boot_cfg_0
00009e  6084              STR      r4,[r0,#8]            ;1003  ; boot_cfg_1
0000a0  e014              B        |L13.204|
                  |L13.162|
0000a2  2f01              CMP      r7,#1                 ;1009
0000a4  d003              BEQ      |L13.174|
0000a6  f1b90f01          CMP      r9,#1                 ;1016
0000aa  d008              BEQ      |L13.190|
0000ac  e00e              B        |L13.204|
                  |L13.174|
0000ae  6146              STR      r6,[r0,#0x14]         ;1012  ; boot_cfg_1
0000b0  428a              CMP      r2,r1                 ;1012
0000b2  d300              BCC      |L13.182|
0000b4  4611              MOV      r1,r2                 ;1012
                  |L13.182|
0000b6  1c49              ADDS     r1,r1,#1              ;1012
0000b8  6101              STR      r1,[r0,#0x10]         ;1014  ; boot_cfg_1
0000ba  615c              STR      r4,[r3,#0x14]         ;1014  ; boot_cfg_0
0000bc  e006              B        |L13.204|
                  |L13.190|
0000be  615e              STR      r6,[r3,#0x14]         ;1019  ; boot_cfg_0
0000c0  428a              CMP      r2,r1                 ;1019
0000c2  d300              BCC      |L13.198|
0000c4  4611              MOV      r1,r2                 ;1019
                  |L13.198|
0000c6  1c49              ADDS     r1,r1,#1              ;1019
0000c8  6119              STR      r1,[r3,#0x10]         ;1021  ; boot_cfg_0
0000ca  6144              STR      r4,[r0,#0x14]         ;1021  ; boot_cfg_1
                  |L13.204|
0000cc  2218              MOVS     r2,#0x18              ;1025
0000ce  490c              LDR      r1,|L13.256|
0000d0  f44f3068          MOV      r0,#0x3a000           ;1025
0000d4  f7fffffe          BL       kdp_memxfer_ddr_to_flash
0000d8  b150              CBZ      r0,|L13.240|
0000da  4909              LDR      r1,|L13.256|
0000dc  f44f24f2          MOV      r4,#0x79000           ;1033
0000e0  2218              MOVS     r2,#0x18              ;1033
0000e2  3118              ADDS     r1,r1,#0x18           ;1033
0000e4  4620              MOV      r0,r4                 ;1033
0000e6  f7fffffe          BL       kdp_memxfer_ddr_to_flash
0000ea  b118              CBZ      r0,|L13.244|
                  |L13.236|
0000ec  2000              MOVS     r0,#0                 ;1041
0000ee  e7a2              B        |L13.54|
                  |L13.240|
0000f0  20fc              MOVS     r0,#0xfc              ;1030
0000f2  e7a0              B        |L13.54|
                  |L13.244|
0000f4  4622              MOV      r2,r4                 ;1037
0000f6  a103              ADR      r1,|L13.260|
0000f8  2002              MOVS     r0,#2                 ;1037
0000fa  f7fffffe          BL       kdp_level_printf
0000fe  e7f7              B        |L13.240|
;;;1043   
                          ENDP

                  |L13.256|
                          DCD      ||.bss||
                  |L13.260|
000104  4f544120          DCB      "OTA Flash write fail on %x\n",0
000108  466c6173
00010c  68207772
000110  69746520
000114  6661696c
000118  206f6e20
00011c  25780a00

                          AREA ||i.ota_update_model||, CODE, READONLY, ALIGN=2

                  ota_update_model PROC
;;;620    
;;;621    int ota_update_model(u32 size)
000000  b570              PUSH     {r4-r6,lr}
;;;622    {
000002  4606              MOV      r6,r0
;;;623        #ifdef USE_KDRV
;;;624        int ret;
;;;625        u32 sum32_download, sum32_embedded;
;;;626        u32 ddr_buf;
;;;627    
;;;628        ddr_buf = KDP_DDR_OTA_FLASH_BUF_START_ADDR;
;;;629        ret = fn_read_data(ddr_buf, size);
;;;630    
;;;631        if (ret == size) {
;;;632            sum32_embedded = *(u32 *)(ddr_buf + size - 4);
;;;633            sum32_download = kdp_gen_sum32((u8 *)ddr_buf, size - 4);
;;;634            if (sum32_embedded != sum32_download)
;;;635            {
;;;636                // ota_update_abort();
;;;637                return MSG_AUTH_FAIL;
;;;638            }
;;;639        } else {
;;;640            // ota_update_abort();
;;;641            return MSG_DATA_ERROR;
;;;642        }
;;;643        stOTA.ddr_ptr = (u32 *)ddr_buf;
;;;644        stOTA.ddr_ptr_index = size-4;
;;;645        #endif
;;;646    
;;;647        //step 1: get all bin files and 4 alignment  //from USB buffer
;;;648        //init OTA ptr and variables
;;;649        Drv_OTA_init( &stOTA );
000004  4813              LDR      r0,|L14.84|
000006  f7fffffe          BL       Drv_OTA_init
;;;650        //step 2: init config files
;;;651        //2-1
;;;652        stOTA.receive_cmd.cmd_stat = (UINT16) FLASH_CMD_ACT;
00000a  4c12              LDR      r4,|L14.84|
00000c  2500              MOVS     r5,#0
;;;653        stOTA.receive_cmd.action_number = FLASH_CMD_ACT_NUM_INIT;
00000e  2001              MOVS     r0,#1
000010  8165              STRH     r5,[r4,#0xa]          ;652
000012  73a0              STRB     r0,[r4,#0xe]
;;;654        if(  drv_flash_main( &stOTA ) != FLASH_DRV_OK )
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       drv_flash_main
00001a  2801              CMP      r0,#1
00001c  d001              BEQ      |L14.34|
;;;655        {
;;;656            return MSG_AUTH_FAIL;
00001e  20fb              MOVS     r0,#0xfb
;;;657        }
;;;658        //2-2
;;;659        stOTA.receive_cmd.cmd_stat = (UINT16) FLASH_CMD_ACT;
;;;660        stOTA.receive_cmd.action_number = FLASH_CMD_ACT_NUM_SEL_MODEL;
;;;661        if(  drv_flash_main( &stOTA ) != FLASH_DRV_OK )
;;;662        {
;;;663            return MSG_DATA_ERROR;
;;;664    
;;;665        }
;;;666        //step 3: setting some parameters large program
;;;667        stOTA.receive_cmd.cmd_stat = (UINT16) FLASH_CMD_ACT;
;;;668        stOTA.receive_cmd.action_number = FLASH_CMD_ACT_NUM_PROC_DONE;
;;;669    
;;;670        //need to check the following parameter
;;;671        stOTA.ddr_ptr_index = size;        //need to assign correct bin size!
;;;672        stOTA.ddr_ptr = (UINT32*)0x60000000;        //need to assign an address, 4 alignment
;;;673    
;;;674        if(  drv_flash_main( &stOTA ) != FLASH_DRV_OK )
;;;675        {
;;;676            return MSG_FLASH_FAIL;
;;;677        }
;;;678    
;;;679        return OTA_UPDATE_SUCCESS;
;;;680    }
000020  bd70              POP      {r4-r6,pc}
                  |L14.34|
000022  8165              STRH     r5,[r4,#0xa]          ;659
000024  2009              MOVS     r0,#9                 ;660
000026  73a0              STRB     r0,[r4,#0xe]          ;660
000028  480a              LDR      r0,|L14.84|
00002a  f7fffffe          BL       drv_flash_main
00002e  2801              CMP      r0,#1                 ;661
000030  d001              BEQ      |L14.54|
000032  20fd              MOVS     r0,#0xfd              ;663
000034  bd70              POP      {r4-r6,pc}
                  |L14.54|
000036  8165              STRH     r5,[r4,#0xa]          ;667
000038  2006              MOVS     r0,#6                 ;668
00003a  73a0              STRB     r0,[r4,#0xe]          ;668
00003c  0700              LSLS     r0,r0,#28             ;672
00003e  e9c40622          STRD     r0,r6,[r4,#0x88]      ;672
000042  4804              LDR      r0,|L14.84|
000044  f7fffffe          BL       drv_flash_main
000048  2801              CMP      r0,#1                 ;674
00004a  d001              BEQ      |L14.80|
00004c  20fc              MOVS     r0,#0xfc              ;676
00004e  bd70              POP      {r4-r6,pc}
                  |L14.80|
000050  2000              MOVS     r0,#0                 ;679
000052  bd70              POP      {r4-r6,pc}
;;;681    
                          ENDP

                  |L14.84|
                          DCD      stOTA

                          AREA ||i.ota_update_ncpu||, CODE, READONLY, ALIGN=2

                  ota_update_ncpu PROC
;;;552    
;;;553    int ota_update_ncpu(void)
000000  b570              PUSH     {r4-r6,lr}
;;;554    {
;;;555        int ret = OTA_UPDATE_SUCCESS;
000002  2500              MOVS     r5,#0
;;;556    
;;;557        #ifdef USE_KDRV
;;;558        u32 local_sum32, remote_sum32;
;;;559        u8 *pBase;
;;;560        pBase = (u8 *)KDP_DDR_OTA_FLASH_BUF_START_ADDR;        //KDP_DDR_BASE;
;;;561        memset(pBase, 0, NCPU_IMAGE_SIZE);
;;;562        ret = fn_read_data((u32)pBase, NCPU_IMAGE_SIZE);        // fn_read_data = kcomm_read,
;;;563    
;;;564    
;;;565        if( ret == NCPU_IMAGE_SIZE )
;;;566        {
;;;567            local_sum32 = kdp_gen_sum32(pBase, NCPU_IMAGE_SIZE - 4);
;;;568            remote_sum32 = *(u32 *)(pBase + NCPU_IMAGE_SIZE - 4);
;;;569            if (local_sum32 != remote_sum32) {
;;;570                ret = MSG_AUTH_FAIL;
;;;571                goto exit;
;;;572            }
;;;573        }
;;;574        else
;;;575        {
;;;576            ret = MSG_DATA_ERROR;
;;;577            goto exit;
;;;578        }
;;;579        stOTA.ddr_ptr = (u32 *)pBase;
;;;580        stOTA.ddr_ptr_index = NCPU_IMAGE_SIZE-4;
;;;581        #endif
;;;582    
;;;583        //step 1: get all bin files and 4 alignment  //from USB buffer
;;;584        //init OTA ptr and variables
;;;585        Drv_OTA_init( &stOTA );
000004  4815              LDR      r0,|L15.92|
000006  f7fffffe          BL       Drv_OTA_init
;;;586        //step 2: init config files
;;;587        //2-1
;;;588        stOTA.receive_cmd.cmd_stat = (UINT16) FLASH_CMD_ACT;
00000a  4c14              LDR      r4,|L15.92|
00000c  2600              MOVS     r6,#0
;;;589        stOTA.receive_cmd.action_number = FLASH_CMD_ACT_NUM_INIT;
00000e  2001              MOVS     r0,#1
000010  8166              STRH     r6,[r4,#0xa]          ;588
000012  73a0              STRB     r0,[r4,#0xe]
;;;590        if(  drv_flash_main( &stOTA ) != FLASH_DRV_OK )
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       drv_flash_main
00001a  2801              CMP      r0,#1
00001c  d001              BEQ      |L15.34|
;;;591        {
;;;592            ret = MSG_AUTH_FAIL;
00001e  25fb              MOVS     r5,#0xfb
;;;593            goto exit;
000020  e01a              B        |L15.88|
                  |L15.34|
;;;594        }
;;;595        //2-2
;;;596        stOTA.receive_cmd.cmd_stat = (UINT16) FLASH_CMD_ACT;
000022  8166              STRH     r6,[r4,#0xa]
;;;597        stOTA.receive_cmd.action_number = FLASH_CMD_ACT_NUM_SEL_NCPU;
000024  2008              MOVS     r0,#8
000026  73a0              STRB     r0,[r4,#0xe]
;;;598        if(  drv_flash_main( &stOTA ) != FLASH_DRV_OK )
000028  480c              LDR      r0,|L15.92|
00002a  f7fffffe          BL       drv_flash_main
00002e  2801              CMP      r0,#1
000030  d001              BEQ      |L15.54|
;;;599        {
;;;600            ret = MSG_DATA_ERROR;
000032  25fd              MOVS     r5,#0xfd
;;;601            goto exit;
000034  e010              B        |L15.88|
                  |L15.54|
;;;602        }
;;;603        //step 3: setting some parameters large program
;;;604        stOTA.receive_cmd.cmd_stat = (UINT16) FLASH_CMD_ACT;
000036  8166              STRH     r6,[r4,#0xa]
;;;605        stOTA.receive_cmd.action_number = FLASH_CMD_ACT_NUM_PROC_DONE;
000038  2006              MOVS     r0,#6
00003a  73a0              STRB     r0,[r4,#0xe]
;;;606    
;;;607        //need to check the following parameter
;;;608        stOTA.ddr_ptr_index = NCPU_IMAGE_SIZE;        //need to assign correct bin size!
00003c  f44f3080          MOV      r0,#0x10000
;;;609        stOTA.ddr_ptr = (UINT32*)0x60000000;        //need to assign an address, 4 alignment
000040  f8c4008c          STR      r0,[r4,#0x8c]  ; stOTA
000044  f04f40c0          MOV      r0,#0x60000000
;;;610    
;;;611        if(  drv_flash_main( &stOTA ) != FLASH_DRV_OK )
000048  f8c40088          STR      r0,[r4,#0x88]  ; stOTA
00004c  4803              LDR      r0,|L15.92|
00004e  f7fffffe          BL       drv_flash_main
000052  2801              CMP      r0,#1
000054  d000              BEQ      |L15.88|
;;;612        {
;;;613            ret = MSG_FLASH_FAIL;
000056  25fc              MOVS     r5,#0xfc
                  |L15.88|
;;;614            goto exit;
;;;615        }
;;;616    
;;;617    exit:
;;;618        return ret;
000058  4628              MOV      r0,r5
;;;619    }
00005a  bd70              POP      {r4-r6,pc}
;;;620    
                          ENDP

                  |L15.92|
                          DCD      stOTA

                          AREA ||i.ota_update_ncpu_flag_status||, CODE, READONLY, ALIGN=2

                  ota_update_ncpu_flag_status PROC
;;;791    
;;;792    int ota_update_ncpu_flag_status( void )
000000  490d              LDR      r1,|L16.56|
;;;793    {
000002  b510              PUSH     {r4,lr}
;;;794        UINT32 seq;
;;;795        if ( boot_cfg_0.ncpu_cfg.flag & boot_cfg_1.ncpu_cfg.flag & BOOT_STATE_CONFIRMED )
000004  f1010218          ADD      r2,r1,#0x18
000008  694b              LDR      r3,[r1,#0x14]  ; boot_cfg_0
00000a  7d10              LDRB     r0,[r2,#0x14]  ; boot_cfg_1
00000c  4018              ANDS     r0,r0,r3
00000e  07c0              LSLS     r0,r0,#31
000010  d002              BEQ      |L16.24|
;;;796        {
;;;797        dbg_msg("OTA Error: scpu wrong partition number");
;;;798        return -1;
000012  f04f30ff          MOV      r0,#0xffffffff
;;;799        }
;;;800    
;;;801        seq = MAX( boot_cfg_0.ncpu_cfg.seq, boot_cfg_1.ncpu_cfg.seq ) + 1;
;;;802    
;;;803        if( boot_cfg_0.ncpu_cfg.flag == BOOT_STATE_CONFIRMED )
;;;804        {
;;;805            boot_cfg_1.ncpu_cfg.flag = BOOT_STATE_FIRST_BOOT;
;;;806            boot_cfg_1.ncpu_cfg.seq = seq;
;;;807        }
;;;808        else
;;;809        {
;;;810            boot_cfg_0.ncpu_cfg.flag = BOOT_STATE_FIRST_BOOT;
;;;811            boot_cfg_0.ncpu_cfg.seq = seq;
;;;812        }
;;;813        return 0;
;;;814    }
000016  bd10              POP      {r4,pc}
                  |L16.24|
000018  690c              LDR      r4,[r1,#0x10]         ;801  ; boot_cfg_0
00001a  6910              LDR      r0,[r2,#0x10]         ;801  ; boot_cfg_1
00001c  4284              CMP      r4,r0                 ;801
00001e  d300              BCC      |L16.34|
000020  4620              MOV      r0,r4                 ;801
                  |L16.34|
000022  2402              MOVS     r4,#2                 ;805
000024  1c40              ADDS     r0,r0,#1              ;805
000026  2b01              CMP      r3,#1                 ;803
000028  d003              BEQ      |L16.50|
00002a  e9c10404          STRD     r0,r4,[r1,#0x10]      ;803
                  |L16.46|
00002e  2000              MOVS     r0,#0                 ;813
000030  bd10              POP      {r4,pc}
                  |L16.50|
000032  e9c20404          STRD     r0,r4,[r2,#0x10]
000036  e7fa              B        |L16.46|
;;;815    
                          ENDP

                  |L16.56|
                          DCD      ||.bss||

                          AREA ||i.ota_update_scpu||, CODE, READONLY, ALIGN=2

                  ota_update_scpu PROC
;;;483    
;;;484    int ota_update_scpu(void)
000000  b570              PUSH     {r4-r6,lr}
;;;485    {
;;;486        int ret = OTA_UPDATE_SUCCESS;
000002  2500              MOVS     r5,#0
;;;487    
;;;488        #ifdef USE_KDRV
;;;489        u32 local_sum32, remote_sum32;
;;;490        u8 *pBase;
;;;491        pBase = (u8 *)KDP_DDR_OTA_FLASH_BUF_START_ADDR;        //KDP_DDR_BASE;
;;;492        memset(pBase, 0, SCPU_IMAGE_SIZE);
;;;493        ret = fn_read_data((u32)pBase, SCPU_IMAGE_SIZE);        // fn_read_data = kcomm_read,
;;;494    
;;;495    
;;;496        if( ret == SCPU_IMAGE_SIZE )
;;;497        {
;;;498            local_sum32 = kdp_gen_sum32(pBase, SCPU_IMAGE_SIZE - 4);
;;;499            remote_sum32 = *(u32 *)(pBase + SCPU_IMAGE_SIZE - 4);
;;;500            if (local_sum32 != remote_sum32) {
;;;501                ret = MSG_AUTH_FAIL;
;;;502                goto exit;
;;;503            }
;;;504        }
;;;505        else
;;;506        {
;;;507            ret = MSG_DATA_ERROR;
;;;508            goto exit;
;;;509        }
;;;510        stOTA.ddr_ptr = (u32 *)pBase;
;;;511        stOTA.ddr_ptr_index = SCPU_IMAGE_SIZE-4;
;;;512        #endif
;;;513    
;;;514        //step 1: get all bin files and 4 alignment  //from USB buffer
;;;515        //init OTA ptr and variables
;;;516        Drv_OTA_init( &stOTA );
000004  4815              LDR      r0,|L17.92|
000006  f7fffffe          BL       Drv_OTA_init
;;;517    
;;;518        //step 2: init config files
;;;519        //2-1
;;;520        stOTA.receive_cmd.cmd_stat = (UINT16) FLASH_CMD_ACT;
00000a  4c14              LDR      r4,|L17.92|
00000c  2600              MOVS     r6,#0
;;;521        stOTA.receive_cmd.action_number = FLASH_CMD_ACT_NUM_INIT;
00000e  2001              MOVS     r0,#1
000010  8166              STRH     r6,[r4,#0xa]          ;520
000012  73a0              STRB     r0,[r4,#0xe]
;;;522        if(  drv_flash_main( &stOTA ) != FLASH_DRV_OK )
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       drv_flash_main
00001a  2801              CMP      r0,#1
00001c  d001              BEQ      |L17.34|
;;;523        {
;;;524            ret = MSG_AUTH_FAIL;
00001e  25fb              MOVS     r5,#0xfb
;;;525            goto exit;
000020  e01a              B        |L17.88|
                  |L17.34|
;;;526        }
;;;527        //2-2
;;;528        stOTA.receive_cmd.cmd_stat = (UINT16) FLASH_CMD_ACT;
000022  8166              STRH     r6,[r4,#0xa]
;;;529        stOTA.receive_cmd.action_number = FLASH_CMD_ACT_NUM_SEL_SCPU;
000024  2007              MOVS     r0,#7
000026  73a0              STRB     r0,[r4,#0xe]
;;;530        if(  drv_flash_main( &stOTA ) != FLASH_DRV_OK )
000028  480c              LDR      r0,|L17.92|
00002a  f7fffffe          BL       drv_flash_main
00002e  2801              CMP      r0,#1
000030  d001              BEQ      |L17.54|
;;;531        {
;;;532            ret = MSG_DATA_ERROR;
000032  25fd              MOVS     r5,#0xfd
;;;533            goto exit;
000034  e010              B        |L17.88|
                  |L17.54|
;;;534        }
;;;535        //step 3: setting some parameters large program
;;;536        stOTA.receive_cmd.cmd_stat = (UINT16) FLASH_CMD_ACT;
000036  8166              STRH     r6,[r4,#0xa]
;;;537        stOTA.receive_cmd.action_number = FLASH_CMD_ACT_NUM_PROC_DONE;
000038  2006              MOVS     r0,#6
00003a  73a0              STRB     r0,[r4,#0xe]
;;;538    
;;;539        //need to check the following parameter
;;;540        stOTA.ddr_ptr_index = SCPU_IMAGE_SIZE;        //need to assign correct bin size!
00003c  f44f3020          MOV      r0,#0x28000
;;;541        stOTA.ddr_ptr = (UINT32*)0x60000000;        //need to assign an address, 4 alignment
000040  f8c4008c          STR      r0,[r4,#0x8c]  ; stOTA
000044  f04f40c0          MOV      r0,#0x60000000
;;;542    
;;;543        if(  drv_flash_main( &stOTA ) != FLASH_DRV_OK )
000048  f8c40088          STR      r0,[r4,#0x88]  ; stOTA
00004c  4803              LDR      r0,|L17.92|
00004e  f7fffffe          BL       drv_flash_main
000052  2801              CMP      r0,#1
000054  d000              BEQ      |L17.88|
;;;544        {
;;;545            ret = MSG_FLASH_FAIL;
000056  25fc              MOVS     r5,#0xfc
                  |L17.88|
;;;546            goto exit;
;;;547        }
;;;548    
;;;549    exit:
;;;550        return ret;
000058  4628              MOV      r0,r5
;;;551    }
00005a  bd70              POP      {r4-r6,pc}
;;;552    
                          ENDP

                  |L17.92|
                          DCD      stOTA

                          AREA ||i.ota_update_scpu_flag_status||, CODE, READONLY, ALIGN=2

                  ota_update_scpu_flag_status PROC
;;;744    
;;;745    int ota_update_scpu_flag_status( void )
000000  490d              LDR      r1,|L18.56|
;;;746    {
000002  b510              PUSH     {r4,lr}
;;;747        UINT32	seq =0;
;;;748    
;;;749        if ( boot_cfg_0.scpu_cfg.flag & boot_cfg_1.scpu_cfg.flag & BOOT_STATE_CONFIRMED )
000004  f1010218          ADD      r2,r1,#0x18
000008  688b              LDR      r3,[r1,#8]  ; boot_cfg_0
00000a  7a10              LDRB     r0,[r2,#8]  ; boot_cfg_1
00000c  4018              ANDS     r0,r0,r3
00000e  07c0              LSLS     r0,r0,#31
000010  d002              BEQ      |L18.24|
;;;750        {
;;;751        dbg_msg("OTA Error: scpu wrong partition number");
;;;752        return -1;
000012  f04f30ff          MOV      r0,#0xffffffff
;;;753        }
;;;754    
;;;755        seq = MAX( boot_cfg_0.scpu_cfg.seq, boot_cfg_1.scpu_cfg.seq ) + 1;
;;;756    
;;;757        if( boot_cfg_0.scpu_cfg.flag == BOOT_STATE_CONFIRMED )
;;;758        {
;;;759            boot_cfg_1.scpu_cfg.flag = BOOT_STATE_FIRST_BOOT; // BOOT_STATE_CONFIRMED;
;;;760            boot_cfg_1.scpu_cfg.seq = seq;
;;;761        }
;;;762        else
;;;763        {
;;;764            boot_cfg_0.scpu_cfg.flag = BOOT_STATE_FIRST_BOOT; //BOOT_STATE_CONFIRMED;
;;;765            boot_cfg_0.scpu_cfg.seq = seq;
;;;766        }
;;;767    
;;;768        #if (OTA_CONFIG_LOG_EN==YES)
;;;769        dbg_msg("----------------------------------------");
;;;770        dbg_msg("	-config0: scpu: flag:0x%X, part:0x%X, seq:0x%X"
;;;771            , boot_cfg_0.scpu_cfg.flag
;;;772            , boot_cfg_0.scpu_cfg.partition_id
;;;773            ,boot_cfg_0.scpu_cfg.seq);
;;;774        dbg_msg("	-config1: scpu: flag:0x%X, part:0x%X, seq:0x%X"
;;;775            , boot_cfg_1.scpu_cfg.flag
;;;776            , boot_cfg_1.scpu_cfg.partition_id
;;;777            ,boot_cfg_1.scpu_cfg.seq);
;;;778    
;;;779        dbg_msg("	-config0: ncpu: flag:0x%X, part:0x%X, seq:0x%X"
;;;780            , boot_cfg_0.ncpu_cfg.flag
;;;781            , boot_cfg_0.ncpu_cfg.partition_id
;;;782            ,boot_cfg_0.ncpu_cfg.seq);
;;;783        dbg_msg("	-config1: ncpu: flag:0x%X, part:0x%X, seq:0x%X"
;;;784            , boot_cfg_1.ncpu_cfg.flag
;;;785            , boot_cfg_1.ncpu_cfg.partition_id
;;;786            ,boot_cfg_1.ncpu_cfg.seq);
;;;787        #endif
;;;788    
;;;789    	return 0;
;;;790    }
000016  bd10              POP      {r4,pc}
                  |L18.24|
000018  684c              LDR      r4,[r1,#4]            ;755  ; boot_cfg_0
00001a  6850              LDR      r0,[r2,#4]            ;755  ; boot_cfg_1
00001c  4284              CMP      r4,r0                 ;755
00001e  d300              BCC      |L18.34|
000020  4620              MOV      r0,r4                 ;755
                  |L18.34|
000022  2402              MOVS     r4,#2                 ;759
000024  1c40              ADDS     r0,r0,#1              ;759
000026  2b01              CMP      r3,#1                 ;757
000028  d003              BEQ      |L18.50|
00002a  e9c10401          STRD     r0,r4,[r1,#4]         ;757
                  |L18.46|
00002e  2000              MOVS     r0,#0                 ;789
000030  bd10              POP      {r4,pc}
                  |L18.50|
000032  e9c20401          STRD     r0,r4,[r2,#4]
000036  e7fa              B        |L18.46|
;;;791    
                          ENDP

                  |L18.56|
                          DCD      ||.bss||

                          AREA ||i.ota_update_show_config||, CODE, READONLY, ALIGN=2

                  ota_update_show_config PROC
;;;1164   
;;;1165   void ota_update_show_config(void)
000000  b570              PUSH     {r4-r6,lr}
;;;1166   {
;;;1167       boot_cfg_0.ncpu_cfg.flag =0xFF;
000002  4c18              LDR      r4,|L19.100|
000004  20ff              MOVS     r0,#0xff
;;;1168       boot_cfg_1.ncpu_cfg.flag =0xFF;
000006  f1040518          ADD      r5,r4,#0x18
00000a  6160              STR      r0,[r4,#0x14]  ; boot_cfg_0
;;;1169   
;;;1170       kdp_memxfer_flash_to_ddr((UINT32)&boot_cfg_0, PARTITION_0_CFG_START_IN_FLASH , sizeof( boot_cfg_0) );
00000c  6168              STR      r0,[r5,#0x14]  ; boot_cfg_1
00000e  2218              MOVS     r2,#0x18
000010  f44f3168          MOV      r1,#0x3a000
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       kdp_memxfer_flash_to_ddr
;;;1171       kdp_memxfer_flash_to_ddr((UINT32)&boot_cfg_1, PARTITION_1_CFG_START_IN_FLASH , sizeof( boot_cfg_1) );
00001a  2218              MOVS     r2,#0x18
00001c  f44f21f2          MOV      r1,#0x79000
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       kdp_memxfer_flash_to_ddr
;;;1172       dbg_msg_console("SCPU config_0 flag 0x%x seq %d \n", boot_cfg_0.scpu_cfg.flag , boot_cfg_0.scpu_cfg.seq);
000026  e9d43201          LDRD     r3,r2,[r4,#4]
00002a  a10f              ADR      r1,|L19.104|
00002c  2001              MOVS     r0,#1
00002e  f7fffffe          BL       kdp_level_printf
;;;1173       dbg_msg_console("SCPU config_1 flag 0x%x seq %d \n", boot_cfg_1.scpu_cfg.flag , boot_cfg_1.scpu_cfg.seq);
000032  e9d53201          LDRD     r3,r2,[r5,#4]
000036  a115              ADR      r1,|L19.140|
000038  2001              MOVS     r0,#1
00003a  f7fffffe          BL       kdp_level_printf
;;;1174       dbg_msg_console("NCPU config_0 flag 0x%x seq %d \n", boot_cfg_0.ncpu_cfg.flag , boot_cfg_0.ncpu_cfg.seq);
00003e  e9d43204          LDRD     r3,r2,[r4,#0x10]
000042  a11b              ADR      r1,|L19.176|
000044  2001              MOVS     r0,#1
000046  f7fffffe          BL       kdp_level_printf
;;;1175       dbg_msg_console("NCPU config_1 flag 0x%x seq %d \n", boot_cfg_1.ncpu_cfg.flag , boot_cfg_1.ncpu_cfg.seq);
00004a  e9d53204          LDRD     r3,r2,[r5,#0x10]
00004e  a121              ADR      r1,|L19.212|
000050  2001              MOVS     r0,#1
000052  f7fffffe          BL       kdp_level_printf
;;;1176       dbg_msg_console("============================== \n");
000056  e8bd4070          POP      {r4-r6,lr}
00005a  a127              ADR      r1,|L19.248|
00005c  2001              MOVS     r0,#1
00005e  f7ffbffe          B.W      kdp_level_printf
;;;1177   }
;;;1178   
                          ENDP

000062  0000              DCW      0x0000
                  |L19.100|
                          DCD      ||.bss||
                  |L19.104|
000068  53435055          DCB      "SCPU config_0 flag 0x%x seq %d \n\r\n",0
00006c  20636f6e
000070  6669675f
000074  3020666c
000078  61672030
00007c  78257820
000080  73657120
000084  2564200a
000088  0d0a00  
00008b  00                DCB      0
                  |L19.140|
00008c  53435055          DCB      "SCPU config_1 flag 0x%x seq %d \n\r\n",0
000090  20636f6e
000094  6669675f
000098  3120666c
00009c  61672030
0000a0  78257820
0000a4  73657120
0000a8  2564200a
0000ac  0d0a00  
0000af  00                DCB      0
                  |L19.176|
0000b0  4e435055          DCB      "NCPU config_0 flag 0x%x seq %d \n\r\n",0
0000b4  20636f6e
0000b8  6669675f
0000bc  3020666c
0000c0  61672030
0000c4  78257820
0000c8  73657120
0000cc  2564200a
0000d0  0d0a00  
0000d3  00                DCB      0
                  |L19.212|
0000d4  4e435055          DCB      "NCPU config_1 flag 0x%x seq %d \n\r\n",0
0000d8  20636f6e
0000dc  6669675f
0000e0  3120666c
0000e4  61672030
0000e8  78257820
0000ec  73657120
0000f0  2564200a
0000f4  0d0a00  
0000f7  00                DCB      0
                  |L19.248|
0000f8  3d3d3d3d          DCB      "============================== \n\r\n",0
0000fc  3d3d3d3d
000100  3d3d3d3d
000104  3d3d3d3d
000108  3d3d3d3d
00010c  3d3d3d3d
000110  3d3d3d3d
000114  3d3d200a
000118  0d0a00  
00011b  00                DCB      0

                          AREA ||i.ota_update_sleep||, CODE, READONLY, ALIGN=2

                  ota_update_sleep PROC
;;;58     
;;;59     int ota_update_sleep(enum pm_device_id dev_id)
000000  b570              PUSH     {r4-r6,lr}
;;;60     {
;;;61         while (flashing == 1) {
;;;62             err_msg("ota_update_sleep: stop for flashing.\n");
;;;63             osThreadFlagsWait(BIT27, osFlagsWaitAll, osWaitForever);
000002  f04f34ff          MOV      r4,#0xffffffff
000006  f04f6500          MOV      r5,#0x8000000
00000a  4e0a              LDR      r6,|L20.52|
00000c  e008              B        |L20.32|
                  |L20.14|
00000e  a10a              ADR      r1,|L20.56|
000010  2002              MOVS     r0,#2                 ;62
000012  f7fffffe          BL       kdp_level_printf
000016  4622              MOV      r2,r4
000018  2101              MOVS     r1,#1
00001a  4628              MOV      r0,r5
00001c  f7fffffe          BL       osThreadFlagsWait
                  |L20.32|
000020  68b0              LDR      r0,[r6,#8]            ;61  ; flashing
000022  2801              CMP      r0,#1                 ;61
000024  d0f3              BEQ      |L20.14|
;;;64         }
;;;65         err_msg("ota_update_sleep: ok\n");
000026  a10e              ADR      r1,|L20.96|
000028  2002              MOVS     r0,#2
00002a  f7fffffe          BL       kdp_level_printf
;;;66     
;;;67         return 0;
00002e  2000              MOVS     r0,#0
;;;68     }
000030  bd70              POP      {r4-r6,pc}
;;;69     
                          ENDP

000032  0000              DCW      0x0000
                  |L20.52|
                          DCD      ||area_number.30||
                  |L20.56|
000038  6f74615f          DCB      "ota_update_sleep: stop for flashing.\n",0
00003c  75706461
000040  74655f73
000044  6c656570
000048  3a207374
00004c  6f702066
000050  6f722066
000054  6c617368
000058  696e672e
00005c  0a00    
00005e  00                DCB      0
00005f  00                DCB      0
                  |L20.96|
000060  6f74615f          DCB      "ota_update_sleep: ok\n",0
000064  75706461
000068  74655f73
00006c  6c656570
000070  3a206f6b
000074  0a00    
000076  00                DCB      0
000077  00                DCB      0

                          AREA ||i.ota_update_switch_active_partition||, CODE, READONLY, ALIGN=2

                  ota_update_switch_active_partition PROC
;;;816    
;;;817    int ota_update_switch_active_partition( u32 partition )
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;818    {
000004  4680              MOV      r8,r0
;;;819        UINT32 seq;
;;;820        int ret;
;;;821    
;;;822        if( ( partition != 1 ) && ( partition != 2 ) ) {
;;;823            dbg_msg("OTA Error: wrong partition number");
;;;824            return -1;
000006  f04f34ff          MOV      r4,#0xffffffff
00000a  2801              CMP      r0,#1                 ;822
00000c  d002              BEQ      |L21.20|
00000e  f1b80f02          CMP      r8,#2                 ;822
000012  d15f              BNE      |L21.212|
                  |L21.20|
;;;825        }
;;;826    
;;;827        if ((boot_cfg_0.scpu_cfg.flag == 0xffffffff) && (boot_cfg_1.scpu_cfg.flag == 0xffffffff)) {
000014  4941              LDR      r1,|L21.284|
000016  f1010218          ADD      r2,r1,#0x18
00001a  6888              LDR      r0,[r1,#8]  ; boot_cfg_0
00001c  6895              LDR      r5,[r2,#8]
00001e  4682              MOV      r10,r0
000020  1c40              ADDS     r0,r0,#1
000022  d101              BNE      |L21.40|
000024  1c68              ADDS     r0,r5,#1
000026  d008              BEQ      |L21.58|
                  |L21.40|
;;;828            // no config data is there, need to create them for partition 0/1
;;;829            ota_init_partition_boot_cfg();
;;;830            return 0;
;;;831        }
;;;832    
;;;833        if (boot_cfg_0.ncpu_cfg.flag & boot_cfg_1.ncpu_cfg.flag & BOOT_STATE_CONFIRMED)
000028  6948              LDR      r0,[r1,#0x14]  ; boot_cfg_0
00002a  f8d2c014          LDR      r12,[r2,#0x14]  ; boot_cfg_1
00002e  4681              MOV      r9,r0
000030  ea00000c          AND      r0,r0,r12
000034  07c0              LSLS     r0,r0,#31
000036  d14d              BNE      |L21.212|
000038  e002              B        |L21.64|
                  |L21.58|
00003a  f7fffffe          BL       ota_init_partition_boot_cfg
00003e  e063              B        |L21.264|
                  |L21.64|
000040  4836              LDR      r0,|L21.284|
;;;834        {
;;;835        	dbg_msg("OTA Critical Error: 2 active NCPU boot config");
;;;836            return -1;
;;;837        }
;;;838    
;;;839        if ((boot_cfg_0.ncpu_cfg.partition_id == boot_cfg_1.ncpu_cfg.partition_id)
000042  68ce              LDR      r6,[r1,#0xc]  ; boot_cfg_0
;;;840            && (boot_cfg_0.ncpu_cfg.seq == boot_cfg_1.ncpu_cfg.seq))
000044  68d7              LDR      r7,[r2,#0xc]  ; boot_cfg_1
000046  6903              LDR      r3,[r0,#0x10]         ;827
000048  3018              ADDS     r0,r0,#0x18           ;827
00004a  42be              CMP      r6,r7                 ;839
00004c  6900              LDR      r0,[r0,#0x10]
00004e  d104              BNE      |L21.90|
000050  4283              CMP      r3,r0
000052  d102              BNE      |L21.90|
;;;841        {
;;;842            // no config data is there, need to create them for partition 0/1
;;;843            ota_init_partition_boot_cfg();
000054  f7fffffe          BL       ota_init_partition_boot_cfg
;;;844            dbg_msg("OTA only one partition, cannot switch\n");
;;;845            return -1;
000058  e03c              B        |L21.212|
                  |L21.90|
00005a  2701              MOVS     r7,#1                 ;818
00005c  2608              MOVS     r6,#8                 ;827
;;;846        }
;;;847    
;;;848        if ( partition == 1 )     //switch SCPU
00005e  f1b80f01          CMP      r8,#1
000062  d003              BEQ      |L21.108|
;;;849        {
;;;850            /* determine if any update ever happened, if not, just return */
;;;851            if ( (boot_cfg_0.scpu_cfg.flag == BOOT_STATE_CONFIRMED) &&
;;;852                (boot_cfg_0.scpu_cfg.seq == 1) &&
;;;853                (boot_cfg_1.scpu_cfg.flag == BOOT_STATE_NOT_CONFIRMED) &&
;;;854                (boot_cfg_1.scpu_cfg.seq == 0) )
;;;855            {
;;;856            	dbg_msg("OTA Never have SCPU firmware updated, cannot switch");
;;;857                return -1;
;;;858            }
;;;859    
;;;860            if (boot_cfg_0.scpu_cfg.flag == BOOT_STATE_CONFIRMED)
;;;861            {
;;;862                boot_cfg_1.scpu_cfg.flag = BOOT_STATE_CONFIRMED;
;;;863                seq = MAX(boot_cfg_0.scpu_cfg.seq, boot_cfg_1.scpu_cfg.seq);
;;;864                boot_cfg_1.scpu_cfg.seq = seq + 1;
;;;865                boot_cfg_0.scpu_cfg.flag = BOOT_STATE_NOT_CONFIRMED;
;;;866    
;;;867            } else if (boot_cfg_1.scpu_cfg.flag == BOOT_STATE_CONFIRMED)
;;;868            {
;;;869                boot_cfg_0.scpu_cfg.flag = BOOT_STATE_CONFIRMED;
;;;870                seq = MAX(boot_cfg_0.scpu_cfg.seq, boot_cfg_1.scpu_cfg.seq);
;;;871                boot_cfg_0.scpu_cfg.seq = seq + 1;
;;;872                boot_cfg_1.scpu_cfg.flag = BOOT_STATE_NOT_CONFIRMED;
;;;873            }
;;;874        }
;;;875    
;;;876        if (partition == 2)     //switch NCPU
000064  f1b80f02          CMP      r8,#2
000068  d01f              BEQ      |L21.170|
00006a  e03d              B        |L21.232|
                  |L21.108|
00006c  482b              LDR      r0,|L21.284|
00006e  6843              LDR      r3,[r0,#4]            ;827
000070  3018              ADDS     r0,r0,#0x18           ;827
000072  f1ba0f01          CMP      r10,#1                ;851
000076  6840              LDR      r0,[r0,#4]            ;854
000078  d002              BEQ      |L21.128|
00007a  2d01              CMP      r5,#1                 ;867
00007c  d00d              BEQ      |L21.154|
00007e  e033              B        |L21.232|
                  |L21.128|
000080  2b01              CMP      r3,#1                 ;852
000082  d102              BNE      |L21.138|
000084  2d08              CMP      r5,#8                 ;853
000086  d100              BNE      |L21.138|
000088  b320              CBZ      r0,|L21.212|
                  |L21.138|
00008a  6097              STR      r7,[r2,#8]            ;863  ; boot_cfg_1
00008c  4283              CMP      r3,r0                 ;863
00008e  d300              BCC      |L21.146|
000090  4618              MOV      r0,r3                 ;863
                  |L21.146|
000092  1c40              ADDS     r0,r0,#1              ;863
000094  6050              STR      r0,[r2,#4]            ;865  ; boot_cfg_1
000096  608e              STR      r6,[r1,#8]            ;865  ; boot_cfg_0
000098  e026              B        |L21.232|
                  |L21.154|
00009a  608f              STR      r7,[r1,#8]            ;870  ; boot_cfg_0
00009c  4283              CMP      r3,r0                 ;870
00009e  d300              BCC      |L21.162|
0000a0  4618              MOV      r0,r3                 ;870
                  |L21.162|
0000a2  1c40              ADDS     r0,r0,#1              ;870
0000a4  6048              STR      r0,[r1,#4]            ;872  ; boot_cfg_0
0000a6  6096              STR      r6,[r2,#8]            ;872  ; boot_cfg_1
0000a8  e01e              B        |L21.232|
                  |L21.170|
;;;877        {
;;;878            /* determine if any update ever happened, if not, just return */
;;;879            if ((boot_cfg_0.ncpu_cfg.flag == BOOT_STATE_CONFIRMED) &&
0000aa  f1b90f01          CMP      r9,#1
0000ae  d003              BEQ      |L21.184|
;;;880               (boot_cfg_0.ncpu_cfg.seq == 1) &&
;;;881               (boot_cfg_1.ncpu_cfg.flag == BOOT_STATE_NOT_CONFIRMED) &&
;;;882               (boot_cfg_1.ncpu_cfg.seq == 0))
;;;883            {
;;;884            	dbg_msg("OTA Never have NCPU firmware updated, cannot switch\n");
;;;885                return -1;
;;;886            }
;;;887    
;;;888            if ( boot_cfg_0.ncpu_cfg.flag == BOOT_STATE_CONFIRMED )
;;;889            {
;;;890                boot_cfg_1.ncpu_cfg.flag = BOOT_STATE_CONFIRMED;
;;;891                seq = MAX(boot_cfg_0.ncpu_cfg.seq, boot_cfg_1.ncpu_cfg.seq);
;;;892                boot_cfg_1.ncpu_cfg.seq = seq + 1;
;;;893                boot_cfg_0.ncpu_cfg.flag = BOOT_STATE_NOT_CONFIRMED;
;;;894    
;;;895            } else if ( boot_cfg_1.ncpu_cfg.flag == BOOT_STATE_CONFIRMED )
0000b0  f1bc0f01          CMP      r12,#1
0000b4  d011              BEQ      |L21.218|
0000b6  e017              B        |L21.232|
                  |L21.184|
0000b8  2b01              CMP      r3,#1                 ;880
0000ba  d103              BNE      |L21.196|
0000bc  f1bc0f08          CMP      r12,#8                ;881
0000c0  d100              BNE      |L21.196|
0000c2  b138              CBZ      r0,|L21.212|
                  |L21.196|
0000c4  6157              STR      r7,[r2,#0x14]         ;891  ; boot_cfg_1
0000c6  4283              CMP      r3,r0                 ;891
0000c8  d300              BCC      |L21.204|
0000ca  4618              MOV      r0,r3                 ;891
                  |L21.204|
0000cc  1c40              ADDS     r0,r0,#1              ;891
0000ce  6110              STR      r0,[r2,#0x10]         ;893  ; boot_cfg_1
0000d0  614e              STR      r6,[r1,#0x14]         ;893  ; boot_cfg_0
0000d2  e009              B        |L21.232|
                  |L21.212|
0000d4  4620              MOV      r0,r4                 ;885
                  |L21.214|
;;;896            {
;;;897                boot_cfg_0.ncpu_cfg.flag = BOOT_STATE_CONFIRMED;
;;;898                seq = MAX(boot_cfg_0.ncpu_cfg.seq, boot_cfg_1.ncpu_cfg.seq);
;;;899                boot_cfg_0.ncpu_cfg.seq = seq + 1;
;;;900                boot_cfg_1.ncpu_cfg.flag = BOOT_STATE_NOT_CONFIRMED;
;;;901            }
;;;902        }
;;;903    
;;;904        ret = kdp_memxfer_ddr_to_flash(  (UINT32)PARTITION_0_CFG_START_IN_FLASH , (UINT32)&boot_cfg_0,sizeof(boot_cfg_0));
;;;905    
;;;906        if ( ret == 0 )
;;;907        {
;;;908            dbg_msg("OTA Flash write fail on %x\n", PARTITION_0_CFG_START_IN_FLASH);
;;;909            return OTA_FLASH_FAIL;
;;;910        }
;;;911    
;;;912        ret = kdp_memxfer_ddr_to_flash(  (UINT32)PARTITION_1_CFG_START_IN_FLASH , (UINT32)&boot_cfg_1,sizeof(boot_cfg_1));
;;;913    
;;;914        if ( ret == 0 )
;;;915        {
;;;916            err_msg("OTA Flash write fail on %x\n", PARTITION_1_CFG_START_IN_FLASH);
;;;917            return OTA_FLASH_FAIL;
;;;918        }
;;;919    
;;;920    //test use!!
;;;921    //    kdp_flash_read_data( PARTITION_0_CFG_START_IN_FLASH, &boot_cfg_0  , sizeof(boot_cfg_0) );
;;;922    //    kdp_flash_read_data( PARTITION_1_CFG_START_IN_FLASH, &boot_cfg_1  , sizeof(boot_cfg_1) );
;;;923    
;;;924        return OTA_UPDATE_SUCCESS;
;;;925    }
0000d6  e8bd87f0          POP      {r4-r10,pc}
                  |L21.218|
0000da  614f              STR      r7,[r1,#0x14]         ;898  ; boot_cfg_0
0000dc  4283              CMP      r3,r0                 ;898
0000de  d300              BCC      |L21.226|
0000e0  4618              MOV      r0,r3                 ;898
                  |L21.226|
0000e2  1c40              ADDS     r0,r0,#1              ;898
0000e4  6108              STR      r0,[r1,#0x10]         ;900  ; boot_cfg_0
0000e6  6156              STR      r6,[r2,#0x14]         ;900  ; boot_cfg_1
                  |L21.232|
0000e8  2218              MOVS     r2,#0x18              ;904
0000ea  490c              LDR      r1,|L21.284|
0000ec  f44f3068          MOV      r0,#0x3a000           ;904
0000f0  f7fffffe          BL       kdp_memxfer_ddr_to_flash
0000f4  b150              CBZ      r0,|L21.268|
0000f6  4909              LDR      r1,|L21.284|
0000f8  f44f24f2          MOV      r4,#0x79000           ;912
0000fc  2218              MOVS     r2,#0x18              ;912
0000fe  3118              ADDS     r1,r1,#0x18           ;912
000100  4620              MOV      r0,r4                 ;912
000102  f7fffffe          BL       kdp_memxfer_ddr_to_flash
000106  b118              CBZ      r0,|L21.272|
                  |L21.264|
000108  2000              MOVS     r0,#0                 ;924
00010a  e7e4              B        |L21.214|
                  |L21.268|
00010c  20fc              MOVS     r0,#0xfc              ;909
00010e  e7e2              B        |L21.214|
                  |L21.272|
000110  4622              MOV      r2,r4                 ;916
000112  a103              ADR      r1,|L21.288|
000114  2002              MOVS     r0,#2                 ;916
000116  f7fffffe          BL       kdp_level_printf
00011a  e7f7              B        |L21.268|
;;;926    
                          ENDP

                  |L21.284|
                          DCD      ||.bss||
                  |L21.288|
000120  4f544120          DCB      "OTA Flash write fail on %x\n",0
000124  466c6173
000128  68207772
00012c  69746520
000130  6661696c
000134  206f6e20
000138  25780a00

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  boot_cfg_0
                          %        24
                  boot_cfg_1
                          %        24

                          AREA ||area_number.24||, DATA, NOINIT, ALIGN=2

                          EXPORTAS ||area_number.24||, ||.bss||
                  user_cfg_0
                          %        36

                          AREA ||area_number.25||, DATA, NOINIT, ALIGN=2

                          EXPORTAS ||area_number.25||, ||.bss||
                  user_cfg_1
                          %        36

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  crc32_tab
                          DCD      0x00000000
                          DCD      0x77073096
                          DCD      0xee0e612c
                          DCD      0x990951ba
                          DCD      0x076dc419
                          DCD      0x706af48f
                          DCD      0xe963a535
                          DCD      0x9e6495a3
                          DCD      0x0edb8832
                          DCD      0x79dcb8a4
                          DCD      0xe0d5e91e
                          DCD      0x97d2d988
                          DCD      0x09b64c2b
                          DCD      0x7eb17cbd
                          DCD      0xe7b82d07
                          DCD      0x90bf1d91
                          DCD      0x1db71064
                          DCD      0x6ab020f2
                          DCD      0xf3b97148
                          DCD      0x84be41de
                          DCD      0x1adad47d
                          DCD      0x6ddde4eb
                          DCD      0xf4d4b551
                          DCD      0x83d385c7
                          DCD      0x136c9856
                          DCD      0x646ba8c0
                          DCD      0xfd62f97a
                          DCD      0x8a65c9ec
                          DCD      0x14015c4f
                          DCD      0x63066cd9
                          DCD      0xfa0f3d63
                          DCD      0x8d080df5
                          DCD      0x3b6e20c8
                          DCD      0x4c69105e
                          DCD      0xd56041e4
                          DCD      0xa2677172
                          DCD      0x3c03e4d1
                          DCD      0x4b04d447
                          DCD      0xd20d85fd
                          DCD      0xa50ab56b
                          DCD      0x35b5a8fa
                          DCD      0x42b2986c
                          DCD      0xdbbbc9d6
                          DCD      0xacbcf940
                          DCD      0x32d86ce3
                          DCD      0x45df5c75
                          DCD      0xdcd60dcf
                          DCD      0xabd13d59
                          DCD      0x26d930ac
                          DCD      0x51de003a
                          DCD      0xc8d75180
                          DCD      0xbfd06116
                          DCD      0x21b4f4b5
                          DCD      0x56b3c423
                          DCD      0xcfba9599
                          DCD      0xb8bda50f
                          DCD      0x2802b89e
                          DCD      0x5f058808
                          DCD      0xc60cd9b2
                          DCD      0xb10be924
                          DCD      0x2f6f7c87
                          DCD      0x58684c11
                          DCD      0xc1611dab
                          DCD      0xb6662d3d
                          DCD      0x76dc4190
                          DCD      0x01db7106
                          DCD      0x98d220bc
                          DCD      0xefd5102a
                          DCD      0x71b18589
                          DCD      0x06b6b51f
                          DCD      0x9fbfe4a5
                          DCD      0xe8b8d433
                          DCD      0x7807c9a2
                          DCD      0x0f00f934
                          DCD      0x9609a88e
                          DCD      0xe10e9818
                          DCD      0x7f6a0dbb
                          DCD      0x086d3d2d
                          DCD      0x91646c97
                          DCD      0xe6635c01
                          DCD      0x6b6b51f4
                          DCD      0x1c6c6162
                          DCD      0x856530d8
                          DCD      0xf262004e
                          DCD      0x6c0695ed
                          DCD      0x1b01a57b
                          DCD      0x8208f4c1
                          DCD      0xf50fc457
                          DCD      0x65b0d9c6
                          DCD      0x12b7e950
                          DCD      0x8bbeb8ea
                          DCD      0xfcb9887c
                          DCD      0x62dd1ddf
                          DCD      0x15da2d49
                          DCD      0x8cd37cf3
                          DCD      0xfbd44c65
                          DCD      0x4db26158
                          DCD      0x3ab551ce
                          DCD      0xa3bc0074
                          DCD      0xd4bb30e2
                          DCD      0x4adfa541
                          DCD      0x3dd895d7
                          DCD      0xa4d1c46d
                          DCD      0xd3d6f4fb
                          DCD      0x4369e96a
                          DCD      0x346ed9fc
                          DCD      0xad678846
                          DCD      0xda60b8d0
                          DCD      0x44042d73
                          DCD      0x33031de5
                          DCD      0xaa0a4c5f
                          DCD      0xdd0d7cc9
                          DCD      0x5005713c
                          DCD      0x270241aa
                          DCD      0xbe0b1010
                          DCD      0xc90c2086
                          DCD      0x5768b525
                          DCD      0x206f85b3
                          DCD      0xb966d409
                          DCD      0xce61e49f
                          DCD      0x5edef90e
                          DCD      0x29d9c998
                          DCD      0xb0d09822
                          DCD      0xc7d7a8b4
                          DCD      0x59b33d17
                          DCD      0x2eb40d81
                          DCD      0xb7bd5c3b
                          DCD      0xc0ba6cad
                          DCD      0xedb88320
                          DCD      0x9abfb3b6
                          DCD      0x03b6e20c
                          DCD      0x74b1d29a
                          DCD      0xead54739
                          DCD      0x9dd277af
                          DCD      0x04db2615
                          DCD      0x73dc1683
                          DCD      0xe3630b12
                          DCD      0x94643b84
                          DCD      0x0d6d6a3e
                          DCD      0x7a6a5aa8
                          DCD      0xe40ecf0b
                          DCD      0x9309ff9d
                          DCD      0x0a00ae27
                          DCD      0x7d079eb1
                          DCD      0xf00f9344
                          DCD      0x8708a3d2
                          DCD      0x1e01f268
                          DCD      0x6906c2fe
                          DCD      0xf762575d
                          DCD      0x806567cb
                          DCD      0x196c3671
                          DCD      0x6e6b06e7
                          DCD      0xfed41b76
                          DCD      0x89d32be0
                          DCD      0x10da7a5a
                          DCD      0x67dd4acc
                          DCD      0xf9b9df6f
                          DCD      0x8ebeeff9
                          DCD      0x17b7be43
                          DCD      0x60b08ed5
                          DCD      0xd6d6a3e8
                          DCD      0xa1d1937e
                          DCD      0x38d8c2c4
                          DCD      0x4fdff252
                          DCD      0xd1bb67f1
                          DCD      0xa6bc5767
                          DCD      0x3fb506dd
                          DCD      0x48b2364b
                          DCD      0xd80d2bda
                          DCD      0xaf0a1b4c
                          DCD      0x36034af6
                          DCD      0x41047a60
                          DCD      0xdf60efc3
                          DCD      0xa867df55
                          DCD      0x316e8eef
                          DCD      0x4669be79
                          DCD      0xcb61b38c
                          DCD      0xbc66831a
                          DCD      0x256fd2a0
                          DCD      0x5268e236
                          DCD      0xcc0c7795
                          DCD      0xbb0b4703
                          DCD      0x220216b9
                          DCD      0x5505262f
                          DCD      0xc5ba3bbe
                          DCD      0xb2bd0b28
                          DCD      0x2bb45a92
                          DCD      0x5cb36a04
                          DCD      0xc2d7ffa7
                          DCD      0xb5d0cf31
                          DCD      0x2cd99e8b
                          DCD      0x5bdeae1d
                          DCD      0x9b64c2b0
                          DCD      0xec63f226
                          DCD      0x756aa39c
                          DCD      0x026d930a
                          DCD      0x9c0906a9
                          DCD      0xeb0e363f
                          DCD      0x72076785
                          DCD      0x05005713
                          DCD      0x95bf4a82
                          DCD      0xe2b87a14
                          DCD      0x7bb12bae
                          DCD      0x0cb61b38
                          DCD      0x92d28e9b
                          DCD      0xe5d5be0d
                          DCD      0x7cdcefb7
                          DCD      0x0bdbdf21
                          DCD      0x86d3d2d4
                          DCD      0xf1d4e242
                          DCD      0x68ddb3f8
                          DCD      0x1fda836e
                          DCD      0x81be16cd
                          DCD      0xf6b9265b
                          DCD      0x6fb077e1
                          DCD      0x18b74777
                          DCD      0x88085ae6
                          DCD      0xff0f6a70
                          DCD      0x66063bca
                          DCD      0x11010b5c
                          DCD      0x8f659eff
                          DCD      0xf862ae69
                          DCD      0x616bffd3
                          DCD      0x166ccf45
                          DCD      0xa00ae278
                          DCD      0xd70dd2ee
                          DCD      0x4e048354
                          DCD      0x3903b3c2
                          DCD      0xa7672661
                          DCD      0xd06016f7
                          DCD      0x4969474d
                          DCD      0x3e6e77db
                          DCD      0xaed16a4a
                          DCD      0xd9d65adc
                          DCD      0x40df0b66
                          DCD      0x37d83bf0
                          DCD      0xa9bcae53
                          DCD      0xdebb9ec5
                          DCD      0x47b2cf7f
                          DCD      0x30b5ffe9
                          DCD      0xbdbdf21c
                          DCD      0xcabac28a
                          DCD      0x53b39330
                          DCD      0x24b4a3a6
                          DCD      0xbad03605
                          DCD      0xcdd70693
                          DCD      0x54de5729
                          DCD      0x23d967bf
                          DCD      0xb3667a2e
                          DCD      0xc4614ab8
                          DCD      0x5d681b02
                          DCD      0x2a6f2b94
                          DCD      0xb40bbe37
                          DCD      0xc30c8ea1
                          DCD      0x5a05df1b
                          DCD      0x2d02ef8d

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  4d525f53          DCB      "MR_SUCCESS",0
000004  55434345
000008  535300  
00000b  00                DCB      0
00000c  4d525f52          DCB      "MR_REJECTED",0
000010  454a4543
000014  54454400
000018  4d525f41          DCB      "MR_ABORTED",0
00001c  424f5254
000020  454400  
000023  00                DCB      0
000024  4d525f46          DCB      "MR_FAILED_DEV_OPEN_FAIL",0
000028  41494c45
00002c  445f4445
000030  565f4f50
000034  454e5f46
000038  41494c00
00003c  4d525f46          DCB      "MR_FAILED_UNKNOWN_REASON",0
000040  41494c45
000044  445f554e
000048  4b4e4f57
00004c  4e5f5245
000050  41534f4e
000054  00      
000055  00                DCB      0
000056  00                DCB      0
000057  00                DCB      0
000058  4d525f46          DCB      "MR_FAILED_INVALID_PARAM",0
00005c  41494c45
000060  445f494e
000064  56414c49
000068  445f5041
00006c  52414d00
000070  4d525f46          DCB      "MR_FAILED_OOM",0
000074  41494c45
000078  445f4f4f
00007c  4d00    
00007e  00                DCB      0
00007f  00                DCB      0
000080  4d525f46          DCB      "MR_FAILED_UNKNOWN_USER",0
000084  41494c45
000088  445f554e
00008c  4b4e4f57
000090  4e5f5553
000094  455200  
000097  00                DCB      0
000098  4d525f46          DCB      "MR_FAILED_MAX_USER",0
00009c  41494c45
0000a0  445f4d41
0000a4  585f5553
0000a8  455200  
0000ab  00                DCB      0
0000ac  4d525f46          DCB      "MR_FAILED_FACE_ENROLLED",0
0000b0  41494c45
0000b4  445f4641
0000b8  43455f45
0000bc  4e524f4c
0000c0  4c454400
0000c4  4d525f46          DCB      "MR_FAILED_LIVENESS_CHECK",0
0000c8  41494c45
0000cc  445f4c49
0000d0  56454e45
0000d4  53535f43
0000d8  4845434b
0000dc  00      
0000dd  00                DCB      0
0000de  00                DCB      0
0000df  00                DCB      0
0000e0  4d525f46          DCB      "MR_FAILED_TIME_OUT",0
0000e4  41494c45
0000e8  445f5449
0000ec  4d455f4f
0000f0  555400  
0000f3  00                DCB      0
0000f4  4d525f46          DCB      "MR_FAILED_AUTHORIZATION",0
0000f8  41494c45
0000fc  445f4155
000100  54484f52
000104  495a4154
000108  494f4e00
00010c  4d525f46          DCB      "MR_FAILED_READ_FILE",0
000110  41494c45
000114  445f5245
000118  41445f46
00011c  494c4500
000120  4d525f46          DCB      "MR_FAILED_WRITE_FILE",0
000124  41494c45
000128  445f5752
00012c  4954455f
000130  46494c45
000134  00      
000135  00                DCB      0
000136  00                DCB      0
000137  00                DCB      0
000138  4d525f46          DCB      "MR_FAILED_NO_ENCRYPT",0
00013c  41494c45
000140  445f4e4f
000144  5f454e43
000148  52595054
00014c  00      
00014d  00                DCB      0
00014e  00                DCB      0
00014f  00                DCB      0
000150  4d525f46          DCB      "MR_FAILED_STORE_ERR",0
000154  41494c45
000158  445f5354
00015c  4f52455f
000160  45525200
000164  4d525f46          DCB      "MR_FAILED_NO_IMG",0
000168  41494c45
00016c  445f4e4f
000170  5f494d47
000174  00      
000175  00                DCB      0
000176  00                DCB      0
000177  00                DCB      0
000178  4d525f46          DCB      "MR_FAILED_NO_IDX",0
00017c  41494c45
000180  445f4e4f
000184  5f494458
000188  00      
000189  00                DCB      0
00018a  00                DCB      0
00018b  00                DCB      0
00018c  4d525f46          DCB      "MR_FAILED_BUF_OVERFLOW",0
000190  41494c45
000194  445f4255
000198  465f4f56
00019c  4552464c
0001a0  4f5700  
0001a3  00                DCB      0
0001a4  4d525f46          DCB      "MR_FAILED_MASS_DATA_HEAD_EMPTY",0
0001a8  41494c45
0001ac  445f4d41
0001b0  53535f44
0001b4  4154415f
0001b8  48454144
0001bc  5f454d50
0001c0  545900  
0001c3  00                DCB      0
0001c4  4d525f46          DCB      "MR_FAILED_MASS_DATA_DB_ABNORMAL",0
0001c8  41494c45
0001cc  445f4d41
0001d0  53535f44
0001d4  4154415f
0001d8  44425f41
0001dc  424e4f52
0001e0  4d414c00
0001e4  4d525f46          DCB      "MR_FAILED_MASS_DATA_FM_ABNORMAL",0
0001e8  41494c45
0001ec  445f4d41
0001f0  53535f44
0001f4  4154415f
0001f8  464d5f41
0001fc  424e4f52
000200  4d414c00
000204  4d525f46          DCB      "MR_FAILED_NOT_READY",0
000208  41494c45
00020c  445f4e4f
000210  545f5245
000214  41445900
000218  4d525f46          DCB      "MR_FAILED_EXISTED_USER",0
00021c  41494c45
000220  445f4558
000224  49535445
000228  445f5553
00022c  455200  
00022f  00                DCB      0
000230  4d525f46          DCB      "MR_FAILED_IDX_OVERFLOW",0
000234  41494c45
000238  445f4944
00023c  585f4f56
000240  4552464c
000244  4f5700  
000247  00                DCB      0
000248  4d525f43          DCB      "MR_CONTIUNOUS",0
00024c  4f4e5449
000250  554e4f55
000254  5300    
000256  00                DCB      0
000257  00                DCB      0
000258  4d525f53          DCB      "MR_SUCCESS_BUT_DEL_USER",0
00025c  55434345
000260  53535f42
000264  55545f44
000268  454c5f55
00026c  53455200
000270  4d525f46          DCB      "MR_FAILED_INVALID_CMD",0
000274  41494c45
000278  445f494e
00027c  56414c49
000280  445f434d
000284  4400    
000286  00                DCB      0
000287  00                DCB      0
000288  00                DCB      0

                          AREA ||.data||, DATA, ALIGN=2

                  guser_area
                          DCD      0xffffffff

                          AREA ||area_number.30||, DATA, ALIGN=2

                          EXPORTAS ||area_number.30||, ||.data||
                  gscpu_crc
                          DCD      0xffffffff
                  gncpu_crc
                          DCD      0xffffffff
                  flashing
                          DCD      0x00000000
                  gota_judge_pool
                          DCD      0x00000000
000010  00000000          DCB      0x00,0x00,0x00,0x00
                  ota_update_pm
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      ota_update_sleep
                          DCD      0x00000000
                          DCD      ota_update_deep_sleep
                          DCD      0x00000000

                          AREA ||area_number.31||, DATA, ALIGN=2

                          EXPORTAS ||area_number.31||, ||.data||
                  gfwinfo_crc
                          DCD      0xffffffff

                          AREA ||area_number.32||, DATA, ALIGN=2

                          EXPORTAS ||area_number.32||, ||.data||
                  gmodel_crc
                          DCD      0xffffffff

                          AREA ||area_number.33||, DATA, ALIGN=2

                          EXPORTAS ||area_number.33||, ||.data||
                  gui_crc
                          DCD      0xffffffff

                          AREA ||i._str_uart_reply||, COMGROUP=_str_uart_reply, CODE, READONLY, ALIGN=2

                  _str_uart_reply PROC
;;;201    #pragma diag_suppress 111
;;;202    inline char *_str_uart_reply(enum uart_reply_result result)
000000  2814              CMP      r0,#0x14
;;;203    {
;;;204        switch (result)
000002  d04e              BEQ      |L144.162|
000004  dc0d              BGT      |L144.34|
000006  2814              CMP      r0,#0x14
000008  d22d              BCS      |L144.102|
00000a  e8dff000          TBB      [pc,r0]
00000e  2e30              DCB      0x2e,0x30
000010  322c3436          DCB      0x32,0x2c,0x34,0x36
000014  383a3c3e          DCB      0x38,0x3a,0x3c,0x3e
000018  402c4244          DCB      0x40,0x2c,0x42,0x44
00001c  462c2c2c          DCB      0x46,0x2c,0x2c,0x2c
000020  2c48              DCB      0x2c,0x48
                  |L144.34|
000022  2832              CMP      r0,#0x32
000024  d04d              BEQ      |L144.194|
000026  dc10              BGT      |L144.74|
000028  2818              CMP      r0,#0x18
00002a  d042              BEQ      |L144.178|
00002c  dc06              BGT      |L144.60|
00002e  2815              CMP      r0,#0x15
000030  d039              BEQ      |L144.166|
000032  2816              CMP      r0,#0x16
000034  d039              BEQ      |L144.170|
000036  2817              CMP      r0,#0x17
000038  d115              BNE      |L144.102|
00003a  e038              B        |L144.174|
                  |L144.60|
00003c  2819              CMP      r0,#0x19
00003e  d03a              BEQ      |L144.182|
000040  2830              CMP      r0,#0x30
000042  d03a              BEQ      |L144.186|
000044  2831              CMP      r0,#0x31
000046  d10e              BNE      |L144.102|
000048  e039              B        |L144.190|
                  |L144.74|
00004a  2836              CMP      r0,#0x36
00004c  d041              BEQ      |L144.210|
00004e  dc06              BGT      |L144.94|
000050  2833              CMP      r0,#0x33
000052  d038              BEQ      |L144.198|
000054  2834              CMP      r0,#0x34
000056  d038              BEQ      |L144.202|
000058  2835              CMP      r0,#0x35
00005a  d104              BNE      |L144.102|
00005c  e037              B        |L144.206|
                  |L144.94|
00005e  2840              CMP      r0,#0x40
000060  d039              BEQ      |L144.214|
000062  28ff              CMP      r0,#0xff
000064  d039              BEQ      |L144.218|
                  |L144.102|
;;;205        {
;;;206            CMD_REPLY_RESULT_MACRO(TO_STR)
;;;207        default:
;;;208            break;
;;;209        }
;;;210        
;;;211        return "";
000066  481e              LDR      r0,|L144.224|
;;;212    }
000068  4770              BX       lr
00006a  481e              LDR      r0,|L144.228|
00006c  4770              BX       lr
00006e  481e              LDR      r0,|L144.232|
000070  4770              BX       lr
000072  481e              LDR      r0,|L144.236|
000074  4770              BX       lr
000076  481e              LDR      r0,|L144.240|
000078  4770              BX       lr
00007a  481e              LDR      r0,|L144.244|
00007c  4770              BX       lr
00007e  481e              LDR      r0,|L144.248|
000080  4770              BX       lr
000082  481e              LDR      r0,|L144.252|
000084  4770              BX       lr
000086  481e              LDR      r0,|L144.256|
000088  4770              BX       lr
00008a  481e              LDR      r0,|L144.260|
00008c  4770              BX       lr
00008e  481e              LDR      r0,|L144.264|
000090  4770              BX       lr
000092  481e              LDR      r0,|L144.268|
000094  4770              BX       lr
000096  481e              LDR      r0,|L144.272|
000098  4770              BX       lr
00009a  481e              LDR      r0,|L144.276|
00009c  4770              BX       lr
00009e  481e              LDR      r0,|L144.280|
0000a0  4770              BX       lr
                  |L144.162|
0000a2  481e              LDR      r0,|L144.284|
0000a4  4770              BX       lr
                  |L144.166|
0000a6  481e              LDR      r0,|L144.288|
0000a8  4770              BX       lr
                  |L144.170|
0000aa  481e              LDR      r0,|L144.292|
0000ac  4770              BX       lr
                  |L144.174|
0000ae  481e              LDR      r0,|L144.296|
0000b0  4770              BX       lr
                  |L144.178|
0000b2  481e              LDR      r0,|L144.300|
0000b4  4770              BX       lr
                  |L144.182|
0000b6  481e              LDR      r0,|L144.304|
0000b8  4770              BX       lr
                  |L144.186|
0000ba  481e              LDR      r0,|L144.308|
0000bc  4770              BX       lr
                  |L144.190|
0000be  481e              LDR      r0,|L144.312|
0000c0  4770              BX       lr
                  |L144.194|
0000c2  481e              LDR      r0,|L144.316|
0000c4  4770              BX       lr
                  |L144.198|
0000c6  481e              LDR      r0,|L144.320|
0000c8  4770              BX       lr
                  |L144.202|
0000ca  481e              LDR      r0,|L144.324|
0000cc  4770              BX       lr
                  |L144.206|
0000ce  481e              LDR      r0,|L144.328|
0000d0  4770              BX       lr
                  |L144.210|
0000d2  481e              LDR      r0,|L144.332|
0000d4  4770              BX       lr
                  |L144.214|
0000d6  481e              LDR      r0,|L144.336|
0000d8  4770              BX       lr
                  |L144.218|
0000da  481e              LDR      r0,|L144.340|
0000dc  4770              BX       lr
;;;213    #pragma diag_warning 111
                          ENDP

0000de  0000              DCW      0x0000
                  |L144.224|
                          DCD      ||.conststring||+0x288
                  |L144.228|
                          DCD      ||.conststring||
                  |L144.232|
                          DCD      ||.conststring||+0xc
                  |L144.236|
                          DCD      ||.conststring||+0x18
                  |L144.240|
                          DCD      ||.conststring||+0x24
                  |L144.244|
                          DCD      ||.conststring||+0x3c
                  |L144.248|
                          DCD      ||.conststring||+0x58
                  |L144.252|
                          DCD      ||.conststring||+0x70
                  |L144.256|
                          DCD      ||.conststring||+0x80
                  |L144.260|
                          DCD      ||.conststring||+0x98
                  |L144.264|
                          DCD      ||.conststring||+0xac
                  |L144.268|
                          DCD      ||.conststring||+0xc4
                  |L144.272|
                          DCD      ||.conststring||+0xe0
                  |L144.276|
                          DCD      ||.conststring||+0xf4
                  |L144.280|
                          DCD      ||.conststring||+0x10c
                  |L144.284|
                          DCD      ||.conststring||+0x120
                  |L144.288|
                          DCD      ||.conststring||+0x138
                  |L144.292|
                          DCD      ||.conststring||+0x150
                  |L144.296|
                          DCD      ||.conststring||+0x164
                  |L144.300|
                          DCD      ||.conststring||+0x178
                  |L144.304|
                          DCD      ||.conststring||+0x18c
                  |L144.308|
                          DCD      ||.conststring||+0x1a4
                  |L144.312|
                          DCD      ||.conststring||+0x1c4
                  |L144.316|
                          DCD      ||.conststring||+0x1e4
                  |L144.320|
                          DCD      ||.conststring||+0x204
                  |L144.324|
                          DCD      ||.conststring||+0x218
                  |L144.328|
                          DCD      ||.conststring||+0x230
                  |L144.332|
                          DCD      ||.conststring||+0x248
                  |L144.336|
                          DCD      ||.conststring||+0x258
                  |L144.340|
                          DCD      ||.conststring||+0x270

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\scpu\\middleware\\ota\\ota_update.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___12_ota_update_c_9bad1270____REV16|
#line 208 "F:\\Users\\fu\\AppData\\Local\\Arm\\Packs\\ARM\\CMSIS\\5.9.0\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___12_ota_update_c_9bad1270____REV16| PROC
#line 209

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___12_ota_update_c_9bad1270____REVSH|
#line 223
|__asm___12_ota_update_c_9bad1270____REVSH| PROC
#line 224

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___12_ota_update_c_9bad1270____RRX|
#line 410
|__asm___12_ota_update_c_9bad1270____RRX| PROC
#line 411

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
