; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\objects\power_manager.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\power_manager.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O3 --diag_suppress=9931 -I..\..\config -I..\..\..\..\board -I..\..\..\..\common\include -I..\..\..\..\scpu\device\include\CMSIS -I..\..\..\..\scpu\device\include\Kneron -I..\..\..\..\scpu\framework\include -I..\..\..\..\scpu\framework\include\framework -I..\..\..\..\scpu\drivers\include -I..\..\..\..\scpu\drivers\include\media\touch -I..\..\..\..\scpu\drivers\include\media\flash -I..\..\..\..\scpu\lib\kdp_system\inc -I..\..\..\..\scpu\lib\kdp_application\include\ -I..\..\..\..\scpu\lib\kdp_application\base\ -I..\..\..\..\scpu\lib\kdp_application\misc -I..\..\..\..\scpu\lib\kdp_e2e_r1n1\include -I..\..\..\..\scpu\include -I..\..\..\..\scpu\middleware\ota -I..\..\..\..\scpu\middleware\comm -I..\..\..\..\scpu\middleware\kdp_comm -I..\..\..\..\scpu\share -I..\..\..\..\scpu\share\gui_lib -I..\..\user -I.\RTE\CMSIS -I.\RTE\_Target-scpu -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\RTOS2\Include -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\RTOS2\RTX\Include -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\Device\ARM\ARMCM4\Include -D__RTX -D__MICROLIB -D__UVISION_VERSION=538 -D_RTE_ -DARMCM4_FP -D_RTE_ -DARM_MATH_CM4 -DTARGET_SCPU -DLOG_ENABLE -DKL520 -DHEAD_POSE_CHECK_PERCENT --omf_browse=.\objects\power_manager.crf ..\..\..\..\scpu\drivers\system\power_manager.c]
                          THUMB

                          AREA ||i.__NVIC_SetVector||, CODE, READONLY, ALIGN=2

                  __NVIC_SetVector PROC
;;;1910    */
;;;1911   __STATIC_INLINE void __NVIC_SetVector(IRQn_Type IRQn, uint32_t vector)
000000  4a02              LDR      r2,|L1.12|
;;;1912   {
;;;1913     uint32_t *vectors = (uint32_t *)SCB->VTOR;
000002  6812              LDR      r2,[r2,#0]
;;;1914     vectors[(int32_t)IRQn + NVIC_USER_IRQ_OFFSET] = vector;
000004  eb020080          ADD      r0,r2,r0,LSL #2
000008  6401              STR      r1,[r0,#0x40]
;;;1915     /* ARM Application Note 321 states that the M4 does not require the architectural barrier */
;;;1916   }
00000a  4770              BX       lr
;;;1917   
                          ENDP

                  |L1.12|
                          DCD      0xe000ed08

                          AREA ||i.power_manager_cpu_idle||, CODE, READONLY, ALIGN=2

                  power_manager_cpu_idle PROC
;;;228    
;;;229    __NO_RETURN void power_manager_cpu_idle(void)
000000  4d07              LDR      r5,|L2.32|
                  |L2.2|
;;;230    {
;;;231        uint32_t tick_start, tick_end, tick_idle;
;;;232    
;;;233        while(1) {
;;;234            rtc_get_date_time_in_secs(&idle_entry_time_in_secs);
000002  4807              LDR      r0,|L2.32|
000004  3008              ADDS     r0,r0,#8
000006  f7fffffe          BL       rtc_get_date_time_in_secs
;;;235            tick_start = osKernelGetTickCount();
00000a  f7fffffe          BL       osKernelGetTickCount
00000e  4604              MOV      r4,r0
;;;236            __WFI();
000010  bf30              WFI      
;;;237            tick_end = osKernelGetTickCount();
000012  f7fffffe          BL       osKernelGetTickCount
;;;238            tick_idle = tick_end - tick_start;
;;;239            cpu_idle_counter += tick_idle;
000016  6829              LDR      r1,[r5,#0]  ; cpu_idle_counter
000018  1b00              SUBS     r0,r0,r4              ;238
00001a  4408              ADD      r0,r0,r1
00001c  6028              STR      r0,[r5,#0]  ; cpu_idle_counter
00001e  e7f0              B        |L2.2|
;;;240        }
;;;241    }
;;;242    
                          ENDP

                  |L2.32|
                          DCD      ||.data||

                          AREA ||i.power_manager_deep_sleep||, CODE, READONLY, ALIGN=2

                  power_manager_deep_sleep PROC
;;;200    
;;;201    void power_manager_deep_sleep(void)
000000  4803              LDR      r0,|L3.16|
;;;202    {
;;;203        if (power_tid)
000002  6840              LDR      r0,[r0,#4]  ; power_tid
000004  2800              CMP      r0,#0                 ;202
000006  d002              BEQ      |L3.14|
;;;204            osThreadFlagsSet(power_tid, FLAG_SYSTEM_DEEP_SLEEP);
000008  2110              MOVS     r1,#0x10
00000a  f7ffbffe          B.W      osThreadFlagsSet
                  |L3.14|
;;;205    }
00000e  4770              BX       lr
;;;206    
                          ENDP

                  |L3.16|
                          DCD      ||.data||

                          AREA ||i.power_manager_do_shutdown||, CODE, READONLY, ALIGN=2

                  power_manager_do_shutdown PROC
;;;375    
;;;376    static void power_manager_do_shutdown(void)
000000  2100              MOVS     r1,#0
;;;377    {
;;;378        power_mgr_set_domain(POWER_DOMAIN_NPU, 0);
000002  2002              MOVS     r0,#2
000004  f7fffffe          BL       power_mgr_set_domain
;;;379    
;;;380        err_msg("!!! shutdown ...\n\n");
000008  a107              ADR      r1,|L4.40|
00000a  2002              MOVS     r0,#2
00000c  f7fffffe          BL       kdp_level_printf
;;;381    
;;;382        /* Disable alarm */
;;;383        rtc_alarm_disable(ALARM_IN_SECS);
000010  2001              MOVS     r0,#1
000012  f7fffffe          BL       rtc_alarm_disable
;;;384    
;;;385        /* Power off everything except RTC */
;;;386        power_mgr_softoff(POWER_MGR_MODE_RTC);
000016  2000              MOVS     r0,#0
000018  f7fffffe          BL       power_mgr_softoff
;;;387        __WFI();
00001c  bf30              WFI      
;;;388    
;;;389        err_msg("!!! shutdown failed!\n");
00001e  a107              ADR      r1,|L4.60|
000020  2002              MOVS     r0,#2
000022  f7fffffe          BL       kdp_level_printf
                  |L4.38|
;;;390        for (;;);
000026  e7fe              B        |L4.38|
;;;391    }
;;;392    
                          ENDP

                  |L4.40|
000028  21212120          DCB      "!!! shutdown ...\n\n",0
00002c  73687574
000030  646f776e
000034  202e2e2e
000038  0a0a00  
00003b  00                DCB      0
                  |L4.60|
00003c  21212120          DCB      "!!! shutdown failed!\n",0
000040  73687574
000044  646f776e
000048  20666169
00004c  6c656421
000050  0a00    
000052  00                DCB      0
000053  00                DCB      0

                          AREA ||i.power_manager_error_notify||, CODE, READONLY, ALIGN=2

                  power_manager_error_notify PROC
;;;181    
;;;182    void power_manager_error_notify(uint32_t code, void *object_id)
000000  b510              PUSH     {r4,lr}
;;;183    {
;;;184        err_msg("scpu: exception: code=%d, object_id=0x%p\n", code, object_id);
000002  460b              MOV      r3,r1
000004  4602              MOV      r2,r0
000006  a107              ADR      r1,|L5.36|
000008  2002              MOVS     r0,#2
00000a  f7fffffe          BL       kdp_level_printf
;;;185        if (power_tid)
00000e  4810              LDR      r0,|L5.80|
000010  6840              LDR      r0,[r0,#4]  ; power_tid
000012  2800              CMP      r0,#0
000014  d005              BEQ      |L5.34|
;;;186            osThreadFlagsSet(power_tid, FLAG_SYSTEM_ERROR);
000016  e8bd4010          POP      {r4,lr}
00001a  f44f7180          MOV      r1,#0x100
00001e  f7ffbffe          B.W      osThreadFlagsSet
                  |L5.34|
;;;187    }
000022  bd10              POP      {r4,pc}
;;;188    
                          ENDP

                  |L5.36|
000024  73637075          DCB      "scpu: exception: code=%d, object_id=0x%p\n",0
000028  3a206578
00002c  63657074
000030  696f6e3a
000034  20636f64
000038  653d2564
00003c  2c206f62
000040  6a656374
000044  5f69643d
000048  30782570
00004c  0a00    
00004e  00                DCB      0
00004f  00                DCB      0
                  |L5.80|
                          DCD      ||.data||

                          AREA ||i.power_manager_init||, CODE, READONLY, ALIGN=2

                  power_manager_init PROC
;;;558    
;;;559    void power_manager_init(void)
000000  b500              PUSH     {lr}
;;;560    {
000002  b089              SUB      sp,sp,#0x24
;;;561        osThreadAttr_t attr = {
000004  2224              MOVS     r2,#0x24
000006  4910              LDR      r1,|L6.72|
000008  4668              MOV      r0,sp
00000a  f7fffffe          BL       __aeabi_memcpy4
;;;562            .stack_size = 512,
;;;563            .priority = osPriorityRealtime7
;;;564        };
;;;565    
;;;566        power_tid = osThreadNew(power_manager_thread, NULL, &attr);
00000e  466a              MOV      r2,sp
000010  2100              MOVS     r1,#0
000012  480e              LDR      r0,|L6.76|
000014  f7fffffe          BL       osThreadNew
000018  490d              LDR      r1,|L6.80|
;;;567    
;;;568        NVIC_SetVector(HardFault_IRQn, (uint32_t)scpu_hard_fault);
00001a  6048              STR      r0,[r1,#4]  ; power_tid
00001c  490d              LDR      r1,|L6.84|
00001e  f06f000c          MVN      r0,#0xc
000022  f7fffffe          BL       __NVIC_SetVector
;;;569        NVIC_SetVector(MemoryManagement_IRQn, (uint32_t)scpu_mem_mnmt);
000026  490c              LDR      r1,|L6.88|
000028  f06f000b          MVN      r0,#0xb
00002c  f7fffffe          BL       __NVIC_SetVector
;;;570        NVIC_SetVector(BusFault_IRQn, (uint32_t)scpu_bus_fault);
000030  490a              LDR      r1,|L6.92|
000032  f06f000a          MVN      r0,#0xa
000036  f7fffffe          BL       __NVIC_SetVector
;;;571        NVIC_SetVector(UsageFault_IRQn, (uint32_t)scpu_usage_fault);
00003a  4909              LDR      r1,|L6.96|
00003c  f06f0009          MVN      r0,#9
000040  f7fffffe          BL       __NVIC_SetVector
;;;572    }
000044  b009              ADD      sp,sp,#0x24
000046  bd00              POP      {pc}
                          ENDP

                  |L6.72|
                          DCD      ||.constdata||
                  |L6.76|
                          DCD      power_manager_thread
                  |L6.80|
                          DCD      ||.data||
                  |L6.84|
                          DCD      scpu_hard_fault
                  |L6.88|
                          DCD      scpu_mem_mnmt
                  |L6.92|
                          DCD      scpu_bus_fault
                  |L6.96|
                          DCD      scpu_usage_fault

                          AREA ||i.power_manager_register||, CODE, READONLY, ALIGN=2

                  power_manager_register PROC
;;;522    /* Registration APIs */
;;;523    int power_manager_register(enum pm_device_id dev_id, struct pm_s *pm_p)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;524    {
000004  4605              MOV      r5,r0
;;;525        int i;
;;;526    
;;;527        if (dev_id >= PM_DEVICE_MAX || pm_p == NULL)
000006  280d              CMP      r0,#0xd
000008  d20e              BCS      |L7.40|
00000a  b169              CBZ      r1,|L7.40|
;;;528            return -1;
;;;529    
;;;530        for (i = 0; i < PM_DEVICE_MAX; i++) {
;;;531            if (pm_dev_fns[i].inuse == 0) {
00000c  4c0f              LDR      r4,|L7.76|
00000e  2000              MOVS     r0,#0                 ;530
                  |L7.16|
000010  eb000280          ADD      r2,r0,r0,LSL #2
000014  eb0402c2          ADD      r2,r4,r2,LSL #3
000018  6852              LDR      r2,[r2,#4]
00001a  b142              CBZ      r2,|L7.46|
00001c  1c40              ADDS     r0,r0,#1
00001e  280d              CMP      r0,#0xd               ;530
000020  dbf6              BLT      |L7.16|
                  |L7.34|
;;;532                memcpy(&pm_dev_fns[i].pm, pm_p, sizeof(struct pm_s));
;;;533                pm_dev_fns[i].dev_id = dev_id;
;;;534                pm_dev_fns[i].inuse = 1;
;;;535                break;
;;;536            }
;;;537        }
;;;538    
;;;539        return 0;
000022  2000              MOVS     r0,#0
                  |L7.36|
;;;540    }
000024  e8bd81f0          POP      {r4-r8,pc}
                  |L7.40|
000028  f04f30ff          MOV      r0,#0xffffffff        ;528
00002c  e7fa              B        |L7.36|
                  |L7.46|
00002e  eb000680          ADD      r6,r0,r0,LSL #2       ;532
000032  eb0407c6          ADD      r7,r4,r6,LSL #3       ;532
000036  f1070008          ADD      r0,r7,#8              ;532
00003a  2220              MOVS     r2,#0x20              ;532
00003c  f7fffffe          BL       __aeabi_memcpy4
000040  f8045036          STRB     r5,[r4,r6,LSL #3]     ;533
000044  2001              MOVS     r0,#1                 ;534
000046  6078              STR      r0,[r7,#4]            ;535
000048  e7eb              B        |L7.34|
;;;541    
                          ENDP

00004a  0000              DCW      0x0000
                  |L7.76|
                          DCD      ||.bss||

                          AREA ||i.power_manager_reset||, CODE, READONLY, ALIGN=2

                  power_manager_reset PROC
;;;188    
;;;189    void power_manager_reset(void)
000000  4803              LDR      r0,|L8.16|
;;;190    {
;;;191        if (power_tid)
000002  6840              LDR      r0,[r0,#4]  ; power_tid
000004  2800              CMP      r0,#0                 ;190
000006  d002              BEQ      |L8.14|
;;;192            osThreadFlagsSet(power_tid, FLAG_SYSTEM_RESET);
000008  2101              MOVS     r1,#1
00000a  f7ffbffe          B.W      osThreadFlagsSet
                  |L8.14|
;;;193    }
00000e  4770              BX       lr
;;;194    
                          ENDP

                  |L8.16|
                          DCD      ||.data||

                          AREA ||i.power_manager_shutdown||, CODE, READONLY, ALIGN=2

                  power_manager_shutdown PROC
;;;206    
;;;207    void power_manager_shutdown(void)
000000  4803              LDR      r0,|L9.16|
;;;208    {
;;;209        if (power_tid)
000002  6840              LDR      r0,[r0,#4]  ; power_tid
000004  2800              CMP      r0,#0                 ;208
000006  d002              BEQ      |L9.14|
;;;210            osThreadFlagsSet(power_tid, FLAG_SYSTEM_SHUTDOWN);
000008  2140              MOVS     r1,#0x40
00000a  f7ffbffe          B.W      osThreadFlagsSet
                  |L9.14|
;;;211    }
00000e  4770              BX       lr
;;;212    
                          ENDP

                  |L9.16|
                          DCD      ||.data||

                          AREA ||i.power_manager_sleep||, CODE, READONLY, ALIGN=2

                  power_manager_sleep PROC
;;;194    
;;;195    void power_manager_sleep(void)
000000  4803              LDR      r0,|L10.16|
;;;196    {
;;;197        if (power_tid)
000002  6840              LDR      r0,[r0,#4]  ; power_tid
000004  2800              CMP      r0,#0                 ;196
000006  d002              BEQ      |L10.14|
;;;198            osThreadFlagsSet(power_tid, FLAG_SYSTEM_SLEEP);
000008  2108              MOVS     r1,#8
00000a  f7ffbffe          B.W      osThreadFlagsSet
                  |L10.14|
;;;199    }
00000e  4770              BX       lr
;;;200    
                          ENDP

                  |L10.16|
                          DCD      ||.data||

                          AREA ||i.power_manager_thread||, CODE, READONLY, ALIGN=2

                  power_manager_thread PROC
;;;394    
;;;395    void power_manager_thread(void *arg)
000000  b088              SUB      sp,sp,#0x20
;;;396    {
;;;397        uint32_t status, timeout;
;;;398        uint32_t current_time, elapsed_time, nap_time, pwrbtn_press_time, pwrbtn_release_time;
;;;399        uint32_t last_power_manager_time;
;;;400    
;;;401        /* Init system/power/rtc control on SCU */
;;;402        // scu_system_init();
;;;403    
;;;404    #ifdef PRINT_CPU_USAGE
;;;405        timeout = PERIOD_PRINT;
;;;406    #else
;;;407        timeout = osWaitForever;
000002  f04f37ff          MOV      r7,#0xffffffff
;;;408    #endif
;;;409    
;;;410        /* init last_power_manager_time */
;;;411        rtc_get_date_time_in_secs(&last_power_manager_time);
000006  a805              ADD      r0,sp,#0x14
000008  f7fffffe          BL       rtc_get_date_time_in_secs
;;;412    
;;;413        while(1)
;;;414        {
;;;415            status = osThreadFlagsWait(FLAGS_ALL, osFlagsWaitAny, timeout);
00000c  f8df80a4          LDR      r8,|L11.180|
;;;416    
;;;417            /* update last_power_manager_time */
;;;418            rtc_get_date_time_in_secs(&last_power_manager_time);
;;;419    
;;;420    #ifndef REDUCE_CODE_SIZE
;;;421            if (status == osFlagsErrorTimeout) {
;;;422                power_mgr_cpu_usage();
;;;423                continue;
;;;424            }
;;;425    
;;;426            if (status & FLAG_SYSTEM_SLEEP) {
;;;427                power_manager_do_sleep();
;;;428            }
;;;429    
;;;430            if (status & FLAG_SYSTEM_DEEP_SLEEP) {
;;;431                power_manager_do_deep_sleep();
;;;432            }
;;;433    #endif
;;;434    
;;;435            if (status & FLAG_SYSTEM_RESET) {
;;;436                err_msg("!!! reset\r\n");
;;;437                // will not come back
;;;438                power_mgr_sw_reset();
;;;439            }
;;;440    
;;;441            if (status & FLAG_SYSTEM_SHUTDOWN) {
;;;442                // will not come back
;;;443                power_manager_do_shutdown();
;;;444            }
;;;445    
;;;446            if (status & FLAG_SYSTEM_NAP) {
;;;447                rtc_get_date_time_in_secs(&current_time);
;;;448    
;;;449                if (last_power_manager_time < idle_entry_time_in_secs)
000010  4e29              LDR      r6,|L11.184|
                  |L11.18|
000012  463a              MOV      r2,r7                 ;415
000014  2100              MOVS     r1,#0                 ;415
000016  4640              MOV      r0,r8                 ;415
000018  f7fffffe          BL       osThreadFlagsWait
00001c  4604              MOV      r4,r0                 ;415
00001e  a805              ADD      r0,sp,#0x14           ;418
000020  f7fffffe          BL       rtc_get_date_time_in_secs
000024  07e0              LSLS     r0,r4,#31             ;435
000026  d005              BEQ      |L11.52|
000028  a124              ADR      r1,|L11.188|
00002a  2002              MOVS     r0,#2                 ;436
00002c  f7fffffe          BL       kdp_level_printf
000030  f7fffffe          BL       power_mgr_sw_reset
                  |L11.52|
000034  0660              LSLS     r0,r4,#25             ;441
000036  d431              BMI      |L11.156|
000038  07a0              LSLS     r0,r4,#30             ;446
00003a  d511              BPL      |L11.96|
00003c  4668              MOV      r0,sp                 ;447
00003e  f7fffffe          BL       rtc_get_date_time_in_secs
000042  9905              LDR      r1,[sp,#0x14]
000044  68b0              LDR      r0,[r6,#8]  ; idle_entry_time_in_secs
000046  4281              CMP      r1,r0
000048  d203              BCS      |L11.82|
;;;450                    // idle time is newer
;;;451                    elapsed_time = current_time - idle_entry_time_in_secs;
00004a  9900              LDR      r1,[sp,#0]
00004c  1a08              SUBS     r0,r1,r0
;;;452                else
;;;453                    // last idle is old = not idle much or hijacked
;;;454                    elapsed_time = 0;
;;;455    
;;;456                /* set next alarm */
;;;457                if (elapsed_time < NAP_TIME_1) {
00004e  281e              CMP      r0,#0x1e
000050  d206              BCS      |L11.96|
                  |L11.82|
;;;458                    nap_time = NAP_TIME_1;
000052  201e              MOVS     r0,#0x1e
;;;459                    rtc_alarm_enable(ALARM_IN_SECS, &nap_time, NULL);
000054  9006              STR      r0,[sp,#0x18]
000056  2200              MOVS     r2,#0
000058  a906              ADD      r1,sp,#0x18
00005a  2001              MOVS     r0,#1
00005c  f7fffffe          BL       rtc_alarm_enable
                  |L11.96|
;;;460                }
;;;461    #ifndef REDUCE_CODE_SIZE
;;;462                else if (elapsed_time < NAP_TIME_2) {
;;;463                    rtc_current_time_info();
;;;464                    err_msg("Idle: %d seconds -> nap\n", elapsed_time);
;;;465                    /* Set longer nap time */
;;;466                    nap_time = NAP_TIME_2;
;;;467                    rtc_alarm_enable(ALARM_IN_SECS, &nap_time, NULL);
;;;468                    /* Take nap */
;;;469                    power_manager_do_nap();
;;;470                    /* regular nap time upon wakeup */
;;;471                    nap_time = NAP_TIME_1;
;;;472                    rtc_alarm_enable(ALARM_IN_SECS, &nap_time, NULL);
;;;473                } else {
;;;474                    rtc_current_time_info();
;;;475                    err_msg("Idle: %d seconds -> deep nap\n", elapsed_time);
;;;476                    /* Set even longer nap time */
;;;477                    nap_time = NAP_TIME_2 * 10;
;;;478                    rtc_alarm_enable(ALARM_IN_SECS, &nap_time, NULL);
;;;479                    /* Take deep nap */
;;;480                    power_manager_do_deep_nap();
;;;481                    /* regular nap time upon wakeup */
;;;482                    nap_time = NAP_TIME_1;
;;;483                    rtc_alarm_enable(ALARM_IN_SECS, &nap_time, NULL);
;;;484                }
;;;485    #endif
;;;486            }
;;;487    
;;;488            if (status & FLAG_SYSTEM_TIMER) {
000060  06a0              LSLS     r0,r4,#26
000062  d504              BPL      |L11.110|
;;;489                rtc_current_time_info();
000064  f7fffffe          BL       rtc_current_time_info
;;;490    
;;;491                rtc_get_date_time_in_secs(&current_time);
000068  4668              MOV      r0,sp
00006a  f7fffffe          BL       rtc_get_date_time_in_secs
                  |L11.110|
;;;492                elapsed_time = current_time - idle_entry_time_in_secs;
;;;493    
;;;494                //dbg_msg("Idle: %d\n", elapsed_time);
;;;495            }
;;;496    
;;;497            if (status & FLAG_SYSTEM_ERROR) {
00006e  05e0              LSLS     r0,r4,#23
000070  d505              BPL      |L11.126|
;;;498                err_msg("!!! scpu: error\n");
000072  a115              ADR      r1,|L11.200|
000074  2002              MOVS     r0,#2
000076  f7fffffe          BL       kdp_level_printf
;;;499    #if 1
;;;500                power_mgr_sw_reset();
00007a  f7fffffe          BL       power_mgr_sw_reset
                  |L11.126|
;;;501    #else
;;;502                // for debug
;;;503                for (;;);
;;;504    #endif
;;;505            }
;;;506    
;;;507            if (status & FLAG_SYSTEM_PWRBTN_FALL) {
00007e  03e0              LSLS     r0,r4,#15
000080  d50e              BPL      |L11.160|
;;;508                rtc_get_date_time_in_secs(&pwrbtn_release_time);
000082  a802              ADD      r0,sp,#8
000084  f7fffffe          BL       rtc_get_date_time_in_secs
000088  e9dd0101          LDRD     r0,r1,[sp,#4]
;;;509                elapsed_time = pwrbtn_release_time - pwrbtn_press_time;
00008c  1a0d              SUBS     r5,r1,r0
;;;510                err_msg("!!! PWR Button pressed for %d seconds:\n", elapsed_time);
00008e  462a              MOV      r2,r5
000090  a112              ADR      r1,|L11.220|
000092  2002              MOVS     r0,#2
000094  f7fffffe          BL       kdp_level_printf
;;;511                if (elapsed_time > 6)
000098  2d06              CMP      r5,#6
00009a  d901              BLS      |L11.160|
                  |L11.156|
;;;512                    power_manager_do_shutdown();
00009c  f7fffffe          BL       power_manager_do_shutdown
                  |L11.160|
;;;513            }
;;;514    
;;;515            if (status & FLAG_SYSTEM_PWRBTN_RISE) {
0000a0  03a0              LSLS     r0,r4,#14
0000a2  d5b6              BPL      |L11.18|
;;;516                rtc_get_date_time_in_secs(&pwrbtn_press_time);
0000a4  a801              ADD      r0,sp,#4
0000a6  f7fffffe          BL       rtc_get_date_time_in_secs
;;;517                err_msg("!!! PWR Button Press&Hold 7+ seconds for shutdown (RTC mode)\n");
0000aa  a116              ADR      r1,|L11.260|
0000ac  2002              MOVS     r0,#2
0000ae  f7fffffe          BL       kdp_level_printf
0000b2  e7ae              B        |L11.18|
;;;518            }
;;;519        }
;;;520    }
;;;521    
                          ENDP

                  |L11.180|
                          DCD      0x0003017f
                  |L11.184|
                          DCD      ||.data||
                  |L11.188|
0000bc  21212120          DCB      "!!! reset\r\n",0
0000c0  72657365
0000c4  740d0a00
                  |L11.200|
0000c8  21212120          DCB      "!!! scpu: error\n",0
0000cc  73637075
0000d0  3a206572
0000d4  726f720a
0000d8  00      
0000d9  00                DCB      0
0000da  00                DCB      0
0000db  00                DCB      0
                  |L11.220|
0000dc  21212120          DCB      "!!! PWR Button pressed for %d seconds:\n",0
0000e0  50575220
0000e4  42757474
0000e8  6f6e2070
0000ec  72657373
0000f0  65642066
0000f4  6f722025
0000f8  64207365
0000fc  636f6e64
000100  733a0a00
                  |L11.260|
000104  21212120          DCB      "!!! PWR Button Press&Hold 7+ seconds for shutdown (RTC "
000108  50575220
00010c  42757474
000110  6f6e2050
000114  72657373
000118  26486f6c
00011c  6420372b
000120  20736563
000124  6f6e6473
000128  20666f72
00012c  20736875
000130  74646f77
000134  6e202852
000138  544320  
00013b  6d6f6465          DCB      "mode)\n",0
00013f  290a00  
000142  00                DCB      0
000143  00                DCB      0

                          AREA ||i.power_manager_unregister||, CODE, READONLY, ALIGN=2

                  power_manager_unregister PROC
;;;541    
;;;542    void power_manager_unregister(enum pm_device_id dev_id, struct pm_s *pm_p)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;543    {
;;;544        int i;
;;;545    
;;;546        if (dev_id >= PM_DEVICE_MAX || pm_p == NULL)
000004  280d              CMP      r0,#0xd
000006  d21d              BCS      |L12.68|
000008  2900              CMP      r1,#0
00000a  d01b              BEQ      |L12.68|
;;;547            return;
;;;548    
;;;549        for (i = 0; i < PM_DEVICE_MAX; i++) {
;;;550            if (pm_dev_fns[i].dev_id == dev_id && pm_dev_fns[i].pm.sleep == pm_p->sleep && pm_dev_fns[i].inuse) {
00000c  4c10              LDR      r4,|L12.80|
00000e  2200              MOVS     r2,#0                 ;549
                  |L12.16|
000010  eb020582          ADD      r5,r2,r2,LSL #2
000014  f8143035          LDRB     r3,[r4,r5,LSL #3]
000018  4283              CMP      r3,r0
00001a  d115              BNE      |L12.72|
00001c  eb0406c5          ADD      r6,r4,r5,LSL #3
000020  690f              LDR      r7,[r1,#0x10]
000022  69b3              LDR      r3,[r6,#0x18]
000024  42bb              CMP      r3,r7
000026  d10f              BNE      |L12.72|
000028  6873              LDR      r3,[r6,#4]
00002a  b16b              CBZ      r3,|L12.72|
;;;551                memset(&pm_dev_fns[i].pm, 0, sizeof(struct pm_s));
00002c  eb020082          ADD      r0,r2,r2,LSL #2
000030  eb0400c0          ADD      r0,r4,r0,LSL #3
000034  2120              MOVS     r1,#0x20
000036  3008              ADDS     r0,r0,#8
000038  f7fffffe          BL       __aeabi_memclr4
;;;552                pm_dev_fns[i].dev_id = PM_DEVICE_NONE;
00003c  2000              MOVS     r0,#0
00003e  f8040035          STRB     r0,[r4,r5,LSL #3]
;;;553                pm_dev_fns[i].inuse = 0;
;;;554                return;
000042  6070              STR      r0,[r6,#4]
                  |L12.68|
;;;555            }
;;;556        }
;;;557    }
000044  e8bd81f0          POP      {r4-r8,pc}
                  |L12.72|
000048  1c52              ADDS     r2,r2,#1
00004a  2a0d              CMP      r2,#0xd               ;549
00004c  dbe0              BLT      |L12.16|
00004e  e7f9              B        |L12.68|
;;;558    
                          ENDP

                  |L12.80|
                          DCD      ||.bss||

                          AREA ||i.scpu_bus_fault||, CODE, READONLY, ALIGN=2

                  scpu_bus_fault PROC
;;;167    
;;;168    static void scpu_bus_fault(void)
000000  b510              PUSH     {r4,lr}
;;;169    {
;;;170        err_msg("scpu: scpu_bus_fault !\n");
000002  a107              ADR      r1,|L13.32|
000004  2002              MOVS     r0,#2
000006  f7fffffe          BL       kdp_level_printf
;;;171        if (power_tid)
00000a  480b              LDR      r0,|L13.56|
00000c  6840              LDR      r0,[r0,#4]  ; power_tid
00000e  2800              CMP      r0,#0
000010  d005              BEQ      |L13.30|
;;;172            osThreadFlagsSet(power_tid, FLAG_SYSTEM_ERROR);
000012  e8bd4010          POP      {r4,lr}
000016  f44f7180          MOV      r1,#0x100
00001a  f7ffbffe          B.W      osThreadFlagsSet
                  |L13.30|
;;;173    }
00001e  bd10              POP      {r4,pc}
;;;174    
                          ENDP

                  |L13.32|
000020  73637075          DCB      "scpu: scpu_bus_fault !\n",0
000024  3a207363
000028  70755f62
00002c  75735f66
000030  61756c74
000034  20210a00
                  |L13.56|
                          DCD      ||.data||

                          AREA ||i.scpu_hard_fault||, CODE, READONLY, ALIGN=2

                  scpu_hard_fault PROC
;;;131    
;;;132    static void scpu_hard_fault(void)
000000  b51c              PUSH     {r2-r4,lr}
;;;133    {
;;;134        if (_lr & 4) {
;;;135            stack = _psp;
000002  4c12              LDR      r4,|L14.76|
000004  ea5f704e          LSLS     r0,lr,#29             ;134
000008  d504              BPL      |L14.20|
00000a  f3ef8009          MRS      r0,PSP
00000e  60e0              STR      r0,[r4,#0xc]  ; stack
000010  3018              ADDS     r0,r0,#0x18
;;;136            pc = stack + 24;
000012  e003              B        |L14.28|
                  |L14.20|
;;;137        }
;;;138        else {
;;;139            stack = _msp;
000014  f3ef8008          MRS      r0,MSP
000018  60e0              STR      r0,[r4,#0xc]  ; stack
00001a  3028              ADDS     r0,r0,#0x28
                  |L14.28|
;;;140            pc = stack + 40;
;;;141        }
;;;142    
;;;143        err_msg("scpu: hard fault @ %08X, PC = %08X, LR = %08X, SP = %08X\n", *(u32*)MMFAR,
00001c  6120              STR      r0,[r4,#0x10]  ; pc
00001e  f1000208          ADD      r2,r0,#8
000022  f8501c04          LDR      r1,[r0,#-4]
000026  e9cd1200          STRD     r1,r2,[sp,#0]
00002a  6803              LDR      r3,[r0,#0]
00002c  4808              LDR      r0,|L14.80|
00002e  a109              ADR      r1,|L14.84|
000030  6802              LDR      r2,[r0,#0]
000032  2002              MOVS     r0,#2
000034  f7fffffe          BL       kdp_level_printf
;;;144            *(u32*)pc, *(u32*)(pc-4), (u32)pc+8);
;;;145        if (power_tid)
000038  6860              LDR      r0,[r4,#4]  ; power_tid
00003a  b118              CBZ      r0,|L14.68|
;;;146            osThreadFlagsSet(power_tid, FLAG_SYSTEM_ERROR);
00003c  f44f7180          MOV      r1,#0x100
000040  f7fffffe          BL       osThreadFlagsSet
                  |L14.68|
;;;147        *(u32*)pc = (u32)&scpu_wait_reset;  // modify stack to go to the wait forever loop
000044  6921              LDR      r1,[r4,#0x10]  ; pc
000046  4812              LDR      r0,|L14.144|
000048  6008              STR      r0,[r1,#0]
;;;148    }
00004a  bd1c              POP      {r2-r4,pc}
;;;149    
                          ENDP

                  |L14.76|
                          DCD      ||.data||
                  |L14.80|
                          DCD      0xe000ed34
                  |L14.84|
000054  73637075          DCB      "scpu: hard fault @ %08X, PC = %08X, LR = %08X, SP = %08"
000058  3a206861
00005c  72642066
000060  61756c74
000064  20402025
000068  3038582c
00006c  20504320
000070  3d202530
000074  38582c20
000078  4c52203d
00007c  20253038
000080  582c2053
000084  50203d20
000088  253038  
00008b  580a00            DCB      "X\n",0
00008e  00                DCB      0
00008f  00                DCB      0
                  |L14.144|
                          DCD      scpu_wait_reset

                          AREA ||i.scpu_mem_mnmt||, CODE, READONLY, ALIGN=2

                  scpu_mem_mnmt PROC
;;;149    
;;;150    static void scpu_mem_mnmt(void)
000000  b51c              PUSH     {r2-r4,lr}
;;;151    {
;;;152        if (_lr & 4) {
;;;153            stack = _psp;
000002  4c12              LDR      r4,|L15.76|
000004  ea5f704e          LSLS     r0,lr,#29             ;152
000008  d504              BPL      |L15.20|
00000a  f3ef8009          MRS      r0,PSP
00000e  60e0              STR      r0,[r4,#0xc]  ; stack
000010  3018              ADDS     r0,r0,#0x18
;;;154            pc = stack + 24;
000012  e003              B        |L15.28|
                  |L15.20|
;;;155        }
;;;156        else {
;;;157            stack = _msp;
000014  f3ef8008          MRS      r0,MSP
000018  60e0              STR      r0,[r4,#0xc]  ; stack
00001a  3028              ADDS     r0,r0,#0x28
                  |L15.28|
;;;158            pc = stack + 40;
;;;159        }
;;;160    
;;;161        err_msg("scpu: memory fault @ %08X, PC = %08X, LR = %08X, SP = %08X\n", *(u32*)MMFAR,
00001c  6120              STR      r0,[r4,#0x10]  ; pc
00001e  f1000208          ADD      r2,r0,#8
000022  f8501c04          LDR      r1,[r0,#-4]
000026  e9cd1200          STRD     r1,r2,[sp,#0]
00002a  6803              LDR      r3,[r0,#0]
00002c  4808              LDR      r0,|L15.80|
00002e  a109              ADR      r1,|L15.84|
000030  6802              LDR      r2,[r0,#0]
000032  2002              MOVS     r0,#2
000034  f7fffffe          BL       kdp_level_printf
;;;162            *(u32*)pc, *(u32*)(pc-4), (u32)pc+8);
;;;163        if (power_tid)
000038  6860              LDR      r0,[r4,#4]  ; power_tid
00003a  b118              CBZ      r0,|L15.68|
;;;164            osThreadFlagsSet(power_tid, FLAG_SYSTEM_ERROR);
00003c  f44f7180          MOV      r1,#0x100
000040  f7fffffe          BL       osThreadFlagsSet
                  |L15.68|
;;;165        *(u32*)pc = (u32)&scpu_wait_reset;  // modify stack to go to the wait forever loop
000044  6921              LDR      r1,[r4,#0x10]  ; pc
000046  4812              LDR      r0,|L15.144|
000048  6008              STR      r0,[r1,#0]
;;;166    }
00004a  bd1c              POP      {r2-r4,pc}
;;;167    
                          ENDP

                  |L15.76|
                          DCD      ||.data||
                  |L15.80|
                          DCD      0xe000ed34
                  |L15.84|
000054  73637075          DCB      "scpu: memory fault @ %08X, PC = %08X, LR = %08X, SP = %"
000058  3a206d65
00005c  6d6f7279
000060  20666175
000064  6c742040
000068  20253038
00006c  582c2050
000070  43203d20
000074  25303858
000078  2c204c52
00007c  203d2025
000080  3038582c
000084  20535020
000088  3d2025  
00008b  3038580a          DCB      "08X\n",0
00008f  00      
                  |L15.144|
                          DCD      scpu_wait_reset

                          AREA ||i.scpu_usage_fault||, CODE, READONLY, ALIGN=2

                  scpu_usage_fault PROC
;;;174    
;;;175    static void scpu_usage_fault(void)
000000  b510              PUSH     {r4,lr}
;;;176    {
;;;177        err_msg("scpu: scpu_usage_fault !\n");
000002  a107              ADR      r1,|L16.32|
000004  2002              MOVS     r0,#2
000006  f7fffffe          BL       kdp_level_printf
;;;178        if (power_tid)
00000a  480c              LDR      r0,|L16.60|
00000c  6840              LDR      r0,[r0,#4]  ; power_tid
00000e  2800              CMP      r0,#0
000010  d005              BEQ      |L16.30|
;;;179            osThreadFlagsSet(power_tid, FLAG_SYSTEM_ERROR);
000012  e8bd4010          POP      {r4,lr}
000016  f44f7180          MOV      r1,#0x100
00001a  f7ffbffe          B.W      osThreadFlagsSet
                  |L16.30|
;;;180    }
00001e  bd10              POP      {r4,pc}
;;;181    
                          ENDP

                  |L16.32|
000020  73637075          DCB      "scpu: scpu_usage_fault !\n",0
000024  3a207363
000028  70755f75
00002c  73616765
000030  5f666175
000034  6c742021
000038  0a00    
00003a  00                DCB      0
00003b  00                DCB      0
                  |L16.60|
                          DCD      ||.data||

                          AREA ||i.scpu_wait_reset||, CODE, READONLY, ALIGN=2

                  scpu_wait_reset PROC
;;;112    
;;;113    static void scpu_wait_reset(void)
000000  b510              PUSH     {r4,lr}
;;;114    {
;;;115        osThreadId_t calling_tid = osThreadGetId();
000002  f7fffffe          BL       osThreadGetId
;;;116        if ((calling_tid == 0) || (calling_tid == power_tid)){  // no os or if power mgmnt thread is in trouble
000006  b118              CBZ      r0,|L17.16|
000008  4906              LDR      r1,|L17.36|
00000a  6849              LDR      r1,[r1,#4]  ; power_tid
00000c  4288              CMP      r0,r1
00000e  d100              BNE      |L17.18|
                  |L17.16|
;;;117    #if 0
;;;118                power_mgr_sw_reset();
;;;119    #else
;;;120                for (;;);
000010  e7fe              B        |L17.16|
                  |L17.18|
;;;121    #endif
;;;122        }
;;;123        else  // let power mgmnt thread handles the reset
;;;124            osThreadFlagsWait((u32)calling_tid , FLAG_WAIT_FOREVER, osWaitForever);
000012  e8bd4010          POP      {r4,lr}
000016  f04f32ff          MOV      r2,#0xffffffff
00001a  f04f4180          MOV      r1,#0x40000000
00001e  f7ffbffe          B.W      osThreadFlagsWait
;;;125    }
;;;126    
                          ENDP

000022  0000              DCW      0x0000
                  |L17.36|
                          DCD      ||.data||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  pm_dev_fns
                          %        520

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000200
                          DCD      0x00000037
                          DCD      0x00000000
                          DCD      0x00000000

                          AREA ||.data||, DATA, ALIGN=2

                  cpu_idle_counter
                          DCD      0x00000000
                  power_tid
                          DCD      0x00000000
                  idle_entry_time_in_secs
                          DCD      0x00000000
                  stack
                          DCD      0x00000000
                  ||pc||
                          DCD      0x00000000

                          AREA ||area_number.23||, DATA, ALIGN=2

                          EXPORTAS ||area_number.23||, ||.data||
                  sleep_state
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\scpu\\drivers\\system\\power_manager.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_power_manager_c_e2c9aeba____REV16|
#line 208 "F:\\Users\\fu\\AppData\\Local\\Arm\\Packs\\ARM\\CMSIS\\5.9.0\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___15_power_manager_c_e2c9aeba____REV16| PROC
#line 209

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_power_manager_c_e2c9aeba____REVSH|
#line 223
|__asm___15_power_manager_c_e2c9aeba____REVSH| PROC
#line 224

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___15_power_manager_c_e2c9aeba____RRX|
#line 410
|__asm___15_power_manager_c_e2c9aeba____RRX| PROC
#line 411

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
