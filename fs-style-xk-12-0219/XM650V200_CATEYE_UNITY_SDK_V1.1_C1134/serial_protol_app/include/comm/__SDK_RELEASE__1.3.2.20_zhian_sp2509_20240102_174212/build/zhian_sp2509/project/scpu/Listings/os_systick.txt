; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\objects\os_systick.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\os_systick.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O3 --diag_suppress=9931 -I..\..\config -I..\..\..\..\board -I..\..\..\..\common\include -I..\..\..\..\scpu\device\include\CMSIS -I..\..\..\..\scpu\device\include\Kneron -I..\..\..\..\scpu\framework\include -I..\..\..\..\scpu\framework\include\framework -I..\..\..\..\scpu\drivers\include -I..\..\..\..\scpu\drivers\include\media\touch -I..\..\..\..\scpu\drivers\include\media\flash -I..\..\..\..\scpu\lib\kdp_system\inc -I..\..\..\..\scpu\lib\kdp_application\include\ -I..\..\..\..\scpu\lib\kdp_application\base\ -I..\..\..\..\scpu\lib\kdp_application\misc -I..\..\..\..\scpu\lib\kdp_e2e_r1n1\include -I..\..\..\..\scpu\include -I..\..\..\..\scpu\middleware\ota -I..\..\..\..\scpu\middleware\comm -I..\..\..\..\scpu\middleware\kdp_comm -I..\..\..\..\scpu\share -I..\..\..\..\scpu\share\gui_lib -I..\..\user -I.\RTE\CMSIS -I.\RTE\_Target-scpu -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\RTOS2\Include -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\RTOS2\RTX\Include -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\Device\ARM\ARMCM4\Include -D__RTX -D__MICROLIB -D__UVISION_VERSION=538 -D_RTE_ -DARMCM4_FP -D_RTE_ -DARM_MATH_CM4 -DTARGET_SCPU -DLOG_ENABLE -DKL520 -DHEAD_POSE_CHECK_PERCENT --omf_browse=.\objects\os_systick.crf F:/Users/fu/AppData/Local/Arm/Packs/ARM/CMSIS/5.9.0/CMSIS/RTOS2/Source/os_systick.c]
                          THUMB

                          AREA ||i.OS_Tick_AcknowledgeIRQ||, CODE, READONLY, ALIGN=1

                  OS_Tick_AcknowledgeIRQ PROC
;;;102    // Acknowledge OS Tick IRQ.
;;;103    __WEAK void OS_Tick_AcknowledgeIRQ (void) {
000000  f04f20e0          MOV      r0,#0xe000e000
;;;104      (void)SysTick->CTRL;
000004  6900              LDR      r0,[r0,#0x10]
;;;105    }
000006  4770              BX       lr
;;;106    
                          ENDP


                          AREA ||i.OS_Tick_Disable||, CODE, READONLY, ALIGN=2

                  OS_Tick_Disable PROC
;;;91     /// Disable OS Tick.
;;;92     __WEAK void OS_Tick_Disable (void) {
000000  f04f20e0          MOV      r0,#0xe000e000
;;;93     
;;;94       SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
000004  6901              LDR      r1,[r0,#0x10]
000006  f0210101          BIC      r1,r1,#1
00000a  6101              STR      r1,[r0,#0x10]
;;;95     
;;;96       if ((SCB->ICSR & SCB_ICSR_PENDSTSET_Msk) != 0U) {
00000c  4805              LDR      r0,|L2.36|
00000e  6801              LDR      r1,[r0,#0]
000010  0149              LSLS     r1,r1,#5
000012  d505              BPL      |L2.32|
;;;97         SCB->ICSR = SCB_ICSR_PENDSTCLR_Msk;
000014  f04f7100          MOV      r1,#0x2000000
000018  6001              STR      r1,[r0,#0]
;;;98         PendST = 1U;
00001a  4903              LDR      r1,|L2.40|
00001c  2001              MOVS     r0,#1
00001e  7008              STRB     r0,[r1,#0]
                  |L2.32|
;;;99       }
;;;100    }
000020  4770              BX       lr
;;;101    
                          ENDP

000022  0000              DCW      0x0000
                  |L2.36|
                          DCD      0xe000ed04
                  |L2.40|
                          DCD      ||.bss.os||

                          AREA ||i.OS_Tick_Enable||, CODE, READONLY, ALIGN=2

                  OS_Tick_Enable PROC
;;;80     /// Enable OS Tick.
;;;81     __WEAK void OS_Tick_Enable (void) {
000000  4807              LDR      r0,|L3.32|
;;;82     
;;;83       if (PendST != 0U) {
000002  7801              LDRB     r1,[r0,#0]  ; PendST
000004  b129              CBZ      r1,|L3.18|
;;;84         PendST = 0U;
000006  2100              MOVS     r1,#0
000008  7001              STRB     r1,[r0,#0]
;;;85         SCB->ICSR = SCB_ICSR_PENDSTSET_Msk;
00000a  4906              LDR      r1,|L3.36|
00000c  f04f6080          MOV      r0,#0x4000000
000010  6008              STR      r0,[r1,#0]
                  |L3.18|
;;;86       }
;;;87     
;;;88       SysTick->CTRL |=  SysTick_CTRL_ENABLE_Msk;
000012  f04f20e0          MOV      r0,#0xe000e000
000016  6901              LDR      r1,[r0,#0x10]
000018  f0410101          ORR      r1,r1,#1
00001c  6101              STR      r1,[r0,#0x10]
;;;89     }
00001e  4770              BX       lr
;;;90     
                          ENDP

                  |L3.32|
                          DCD      ||.bss.os||
                  |L3.36|
                          DCD      0xe000ed04

                          AREA ||i.OS_Tick_GetClock||, CODE, READONLY, ALIGN=2

                  OS_Tick_GetClock PROC
;;;112    // Get OS Tick clock.
;;;113    __WEAK uint32_t OS_Tick_GetClock (void) {
000000  4801              LDR      r0,|L4.8|
;;;114      return (SystemCoreClock);
000002  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
;;;115    }
000004  4770              BX       lr
;;;116    
                          ENDP

000006  0000              DCW      0x0000
                  |L4.8|
                          DCD      SystemCoreClock

                          AREA ||i.OS_Tick_GetCount||, CODE, READONLY, ALIGN=1

                  OS_Tick_GetCount PROC
;;;122    // Get OS Tick count value.
;;;123    __WEAK uint32_t OS_Tick_GetCount (void) {
000000  f04f20e0          MOV      r0,#0xe000e000
;;;124      uint32_t load = SysTick->LOAD;
000004  6941              LDR      r1,[r0,#0x14]
;;;125      return  (load - SysTick->VAL);
000006  6980              LDR      r0,[r0,#0x18]
000008  1a08              SUBS     r0,r1,r0
;;;126    }
00000a  4770              BX       lr
;;;127    
                          ENDP


                          AREA ||i.OS_Tick_GetIRQn||, CODE, READONLY, ALIGN=1

                  OS_Tick_GetIRQn PROC
;;;107    // Get OS Tick IRQ number.
;;;108    __WEAK int32_t  OS_Tick_GetIRQn (void) {
000000  f04f30ff          MOV      r0,#0xffffffff
;;;109      return ((int32_t)SysTick_IRQn);
;;;110    }
000004  4770              BX       lr
;;;111    
                          ENDP


                          AREA ||i.OS_Tick_GetInterval||, CODE, READONLY, ALIGN=1

                  OS_Tick_GetInterval PROC
;;;117    // Get OS Tick interval.
;;;118    __WEAK uint32_t OS_Tick_GetInterval (void) {
000000  f04f20e0          MOV      r0,#0xe000e000
;;;119      return (SysTick->LOAD + 1U);
000004  6940              LDR      r0,[r0,#0x14]
000006  1c40              ADDS     r0,r0,#1
;;;120    }
000008  4770              BX       lr
;;;121    
                          ENDP


                          AREA ||i.OS_Tick_GetOverflow||, CODE, READONLY, ALIGN=2

                  OS_Tick_GetOverflow PROC
;;;128    // Get OS Tick overflow status.
;;;129    __WEAK uint32_t OS_Tick_GetOverflow (void) {
000000  4802              LDR      r0,|L8.12|
;;;130      return ((SCB->ICSR & SCB_ICSR_PENDSTSET_Msk) >> SCB_ICSR_PENDSTSET_Pos);
000002  6800              LDR      r0,[r0,#0]
000004  f3c06080          UBFX     r0,r0,#26,#1
;;;131    }
000008  4770              BX       lr
;;;132    
                          ENDP

00000a  0000              DCW      0x0000
                  |L8.12|
                          DCD      0xe000ed04

                          AREA ||i.OS_Tick_Setup||, CODE, READONLY, ALIGN=2

                  OS_Tick_Setup PROC
;;;39     // Setup OS Tick.
;;;40     __WEAK int32_t OS_Tick_Setup (uint32_t freq, IRQHandler_t handler) {
000000  f04f31ff          MOV      r1,#0xffffffff
000004  b138              CBZ      r0,|L9.22|
;;;41       uint32_t load;
;;;42       (void)handler;
;;;43     
;;;44       if (freq == 0U) {
;;;45         //lint -e{904} "Return statement before end of function"
;;;46         return (-1);
;;;47       }
;;;48     
;;;49       load = (SystemCoreClock / freq) - 1U;
000006  4a0b              LDR      r2,|L9.52|
000008  6812              LDR      r2,[r2,#0]  ; SystemCoreClock
00000a  fbb2f0f0          UDIV     r0,r2,r0
00000e  1e40              SUBS     r0,r0,#1
;;;50       if (load > 0x00FFFFFFU) {
000010  f1b07f80          CMP      r0,#0x1000000
000014  d301              BCC      |L9.26|
                  |L9.22|
;;;51         //lint -e{904} "Return statement before end of function"
;;;52         return (-1);
000016  4608              MOV      r0,r1
;;;53       }
;;;54     
;;;55       // Set SysTick Interrupt Priority
;;;56     #if   ((defined(__ARM_ARCH_8M_MAIN__)   && (__ARM_ARCH_8M_MAIN__   != 0)) || \
;;;57            (defined(__ARM_ARCH_8_1M_MAIN__) && (__ARM_ARCH_8_1M_MAIN__ != 0)) || \
;;;58            (defined(__CORTEX_M)             && (__CORTEX_M             == 7U)))
;;;59       SCB->SHPR[11] = SYSTICK_IRQ_PRIORITY;
;;;60     #elif  (defined(__ARM_ARCH_8M_BASE__)   && (__ARM_ARCH_8M_BASE__   != 0))
;;;61       SCB->SHPR[1] |= ((uint32_t)SYSTICK_IRQ_PRIORITY << 24);
;;;62     #elif ((defined(__ARM_ARCH_7M__)        && (__ARM_ARCH_7M__        != 0)) || \
;;;63            (defined(__ARM_ARCH_7EM__)       && (__ARM_ARCH_7EM__       != 0)))
;;;64       SCB->SHP[11]  = SYSTICK_IRQ_PRIORITY;
;;;65     #elif  (defined(__ARM_ARCH_6M__)        && (__ARM_ARCH_6M__        != 0))
;;;66       SCB->SHP[1]  |= ((uint32_t)SYSTICK_IRQ_PRIORITY << 24);
;;;67     #else
;;;68     #error "Unknown ARM Core!"
;;;69     #endif
;;;70     
;;;71       SysTick->CTRL =  SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_TICKINT_Msk;
;;;72       SysTick->LOAD =  load;
;;;73       SysTick->VAL  =  0U;
;;;74     
;;;75       PendST = 0U;
;;;76     
;;;77       return (0);
;;;78     }
000018  4770              BX       lr
                  |L9.26|
00001a  4a07              LDR      r2,|L9.56|
00001c  21ff              MOVS     r1,#0xff              ;64
00001e  7011              STRB     r1,[r2,#0]            ;64
000020  f04f21e0          MOV      r1,#0xe000e000        ;71
000024  2206              MOVS     r2,#6                 ;71
000026  610a              STR      r2,[r1,#0x10]         ;71
000028  6148              STR      r0,[r1,#0x14]         ;72
00002a  2000              MOVS     r0,#0                 ;73
00002c  6188              STR      r0,[r1,#0x18]         ;73
00002e  4903              LDR      r1,|L9.60|
000030  7008              STRB     r0,[r1,#0]            ;75
000032  4770              BX       lr
;;;79     
                          ENDP

                  |L9.52|
                          DCD      SystemCoreClock
                  |L9.56|
                          DCD      0xe000ed23
                  |L9.60|
                          DCD      ||.bss.os||

                          AREA ||.bss.os||, DATA, ALIGN=0

                  PendST
000000  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "F:/Users/fu/AppData/Local/Arm/Packs/ARM/CMSIS/5.9.0/CMSIS/RTOS2/Source/os_systick.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___12_os_systick_c____REV16|
#line 208 "F:\\Users\\fu\\AppData\\Local\\Arm\\Packs\\ARM\\CMSIS\\5.9.0\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___12_os_systick_c____REV16| PROC
#line 209

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___12_os_systick_c____REVSH|
#line 223
|__asm___12_os_systick_c____REVSH| PROC
#line 224

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___12_os_systick_c____RRX|
#line 410
|__asm___12_os_systick_c____RRX| PROC
#line 411

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
