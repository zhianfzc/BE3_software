L 1 "F:/Users/fu/AppData/Local/Arm/Packs/ARM/CMSIS/5.9.0/CMSIS/RTOS2/RTX/Source/rtx_evr.c"
N/*
N * Copyright (c) 2013-2021 Arm Limited. All rights reserved.
N *
N * SPDX-License-Identifier: Apache-2.0
N *
N * Licensed under the Apache License, Version 2.0 (the License); you may
N * not use this file except in compliance with the License.
N * You may obtain a copy of the License at
N *
N * www.apache.org/licenses/LICENSE-2.0
N *
N * Unless required by applicable law or agreed to in writing, software
N * distributed under the License is distributed on an AS IS BASIS, WITHOUT
N * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
N * See the License for the specific language governing permissions and
N * limitations under the License.
N *
N * -----------------------------------------------------------------------------
N *
N * Project:     CMSIS-RTOS RTX
N * Title:       RTX Event Recorder
N *
N * -----------------------------------------------------------------------------
N */
N
N#include <string.h>
L 1 "F:\Keil_v5\ARM\ARMCC\Bin\..\include\string.h" 1
N/* string.h: ANSI 'C' (X3J11 Oct 88) library header, section 4.11 */
N/* Copyright (C) Codemist Ltd., 1988-1993.                        */
N/* Copyright 1991-1993 ARM Limited. All rights reserved.          */
N/* version 0.04 */
N
N/*
N * RCS $Revision$
N * Checkin $Date$
N */
N
N/*
N * string.h declares one type and several functions, and defines one macro
N * useful for manipulating character arrays and other objects treated as
N * character arrays. Various methods are used for determining the lengths of
N * the arrays, but in all cases a char * or void * argument points to the
N * initial (lowest addresses) character of the array. If an array is written
N * beyond the end of an object, the behaviour is undefined.
N */
N
N#ifndef __string_h
N#define __string_h
N#define __ARMCLIB_VERSION 5060037
N
N#define _ARMABI __declspec(__nothrow)
N
N  #ifndef __STRING_DECLS
N  #define __STRING_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S        namespace std {
S        #define __CLIBNS std::
S        extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N#if defined(__cplusplus) || !defined(__STRICT_ANSI__)
X#if 0L || !0L
N /* unconditional in C++ and non-strict C for consistency of debug info */
N  #if __sizeof_ptr == 8
X  #if 4 == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
N  #else
N    typedef unsigned int size_t;   /* see <stddef.h> */
N  #endif
N#elif !defined(__size_t)
X#elif !0L
S  #define __size_t 1
S  #if __sizeof_ptr == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
S  #else
S    typedef unsigned int size_t;   /* see <stddef.h> */
S  #endif
N#endif
N
N#undef NULL
N#define NULL 0                   /* see <stddef.h> */
N
Nextern _ARMABI void *memcpy(void * __restrict /*s1*/,
Xextern __declspec(__nothrow) void *memcpy(void * __restrict  ,
N                    const void * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies n characters from the object pointed to by s2 into the object
N    * pointed to by s1. If copying takes place between objects that overlap,
N    * the behaviour is undefined.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI void *memmove(void * /*s1*/,
Xextern __declspec(__nothrow) void *memmove(void *  ,
N                    const void * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies n characters from the object pointed to by s2 into the object
N    * pointed to by s1. Copying takes place as if the n characters from the
N    * object pointed to by s2 are first copied into a temporary array of n
N    * characters that does not overlap the objects pointed to by s1 and s2,
N    * and then the n characters from the temporary array are copied into the
N    * object pointed to by s1.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI char *strcpy(char * __restrict /*s1*/, const char * __restrict /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strcpy(char * __restrict  , const char * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies the string pointed to by s2 (including the terminating nul
N    * character) into the array pointed to by s1. If copying takes place
N    * between objects that overlap, the behaviour is undefined.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI char *strncpy(char * __restrict /*s1*/, const char * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strncpy(char * __restrict  , const char * __restrict  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies not more than n characters (characters that follow a null
N    * character are not copied) from the array pointed to by s2 into the array
N    * pointed to by s1. If copying takes place between objects that overlap,
N    * the behaviour is undefined.
N    * Returns: the value of s1.
N    */
N
Nextern _ARMABI char *strcat(char * __restrict /*s1*/, const char * __restrict /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strcat(char * __restrict  , const char * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * appends a copy of the string pointed to by s2 (including the terminating
N    * null character) to the end of the string pointed to by s1. The initial
N    * character of s2 overwrites the null character at the end of s1.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI char *strncat(char * __restrict /*s1*/, const char * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strncat(char * __restrict  , const char * __restrict  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * appends not more than n characters (a null character and characters that
N    * follow it are not appended) from the array pointed to by s2 to the end of
N    * the string pointed to by s1. The initial character of s2 overwrites the
N    * null character at the end of s1. A terminating null character is always
N    * appended to the result.
N    * Returns: the value of s1.
N    */
N
N/*
N * The sign of a nonzero value returned by the comparison functions is
N * determined by the sign of the difference between the values of the first
N * pair of characters (both interpreted as unsigned char) that differ in the
N * objects being compared.
N */
N
Nextern _ARMABI int memcmp(const void * /*s1*/, const void * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int memcmp(const void *  , const void *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the first n characters of the object pointed to by s1 to the
N    * first n characters of the object pointed to by s2.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the object pointed to by s1 is greater than, equal to, or
N    *          less than the object pointed to by s2.
N    */
Nextern _ARMABI int strcmp(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strcmp(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the string pointed to by s1 to the string pointed to by s2.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strncmp(const char * /*s1*/, const char * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strncmp(const char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares not more than n characters (characters that follow a null
N    * character are not compared) from the array pointed to by s1 to the array
N    * pointed to by s2.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strcasecmp(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strcasecmp(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the string pointed to by s1 to the string pointed to by s2,
N    * case-insensitively as defined by the current locale.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strncasecmp(const char * /*s1*/, const char * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strncasecmp(const char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares not more than n characters (characters that follow a null
N    * character are not compared) from the array pointed to by s1 to the array
N    * pointed to by s2, case-insensitively as defined by the current locale.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strcoll(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strcoll(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the string pointed to by s1 to the string pointed to by s2, both
N    * interpreted as appropriate to the LC_COLLATE category of the current
N    * locale.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2 when both are interpreted
N    *          as appropriate to the current locale.
N    */
N
Nextern _ARMABI size_t strxfrm(char * __restrict /*s1*/, const char * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) size_t strxfrm(char * __restrict  , const char * __restrict  , size_t  ) __attribute__((__nonnull__(2)));
N   /*
N    * transforms the string pointed to by s2 and places the resulting string
N    * into the array pointed to by s1. The transformation function is such that
N    * if the strcmp function is applied to two transformed strings, it returns
N    * a value greater than, equal to or less than zero, corresponding to the
N    * result of the strcoll function applied to the same two original strings.
N    * No more than n characters are placed into the resulting array pointed to
N    * by s1, including the terminating null character. If n is zero, s1 is
N    * permitted to be a null pointer. If copying takes place between objects
N    * that overlap, the behaviour is undefined.
N    * Returns: The length of the transformed string is returned (not including
N    *          the terminating null character). If the value returned is n or
N    *          more, the contents of the array pointed to by s1 are
N    *          indeterminate.
N    */
N
N
N#ifdef __cplusplus
Sextern _ARMABI const void *memchr(const void * /*s*/, int /*c*/, size_t /*n*/) __attribute__((__nonnull__(1)));
Sextern "C++" void *memchr(void * __s, int __c, size_t __n) __attribute__((__nonnull__(1)));
Sextern "C++" inline void *memchr(void * __s, int __c, size_t __n)
S    { return const_cast<void *>(memchr(const_cast<const void *>(__s), __c, __n)); }
N#else
Nextern _ARMABI void *memchr(const void * /*s*/, int /*c*/, size_t /*n*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) void *memchr(const void *  , int  , size_t  ) __attribute__((__nonnull__(1)));
N#endif
N   /*
N    * locates the first occurence of c (converted to an unsigned char) in the
N    * initial n characters (each interpreted as unsigned char) of the object
N    * pointed to by s.
N    * Returns: a pointer to the located character, or a null pointer if the
N    *          character does not occur in the object.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Sextern "C++" char *strchr(char * __s, int __c) __attribute__((__nonnull__(1)));
Sextern "C++" inline char *strchr(char * __s, int __c)
S    { return const_cast<char *>(strchr(const_cast<const char *>(__s), __c)); }
N#else
Nextern _ARMABI char *strchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) char *strchr(const char *  , int  ) __attribute__((__nonnull__(1)));
N#endif
N   /*
N    * locates the first occurence of c (converted to an char) in the string
N    * pointed to by s (including the terminating null character).
N    * Returns: a pointer to the located character, or a null pointer if the
N    *          character does not occur in the string.
N    */
N
Nextern _ARMABI size_t strcspn(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strcspn(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * computes the length of the initial segment of the string pointed to by s1
N    * which consists entirely of characters not from the string pointed to by
N    * s2. The terminating null character is not considered part of s2.
N    * Returns: the length of the segment.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strpbrk(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Sextern "C++" char *strpbrk(char * __s1, const char * __s2) __attribute__((__nonnull__(1,2)));
Sextern "C++" inline char *strpbrk(char * __s1, const char * __s2)
S    { return const_cast<char *>(strpbrk(const_cast<const char *>(__s1), __s2)); }
N#else
Nextern _ARMABI char *strpbrk(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strpbrk(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N#endif
N   /*
N    * locates the first occurence in the string pointed to by s1 of any
N    * character from the string pointed to by s2.
N    * Returns: returns a pointer to the character, or a null pointer if no
N    *          character form s2 occurs in s1.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strrchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Sextern "C++" char *strrchr(char * __s, int __c) __attribute__((__nonnull__(1)));
Sextern "C++" inline char *strrchr(char * __s, int __c)
S    { return const_cast<char *>(strrchr(const_cast<const char *>(__s), __c)); }
N#else
Nextern _ARMABI char *strrchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) char *strrchr(const char *  , int  ) __attribute__((__nonnull__(1)));
N#endif
N   /*
N    * locates the last occurence of c (converted to a char) in the string
N    * pointed to by s. The terminating null character is considered part of
N    * the string.
N    * Returns: returns a pointer to the character, or a null pointer if c does
N    *          not occur in the string.
N    */
N
Nextern _ARMABI size_t strspn(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strspn(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * computes the length of the initial segment of the string pointed to by s1
N    * which consists entirely of characters from the string pointed to by S2
N    * Returns: the length of the segment.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strstr(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Sextern "C++" char *strstr(char * __s1, const char * __s2) __attribute__((__nonnull__(1,2)));
Sextern "C++" inline char *strstr(char * __s1, const char * __s2)
S    { return const_cast<char *>(strstr(const_cast<const char *>(__s1), __s2)); }
N#else
Nextern _ARMABI char *strstr(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strstr(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N#endif
N   /*
N    * locates the first occurence in the string pointed to by s1 of the
N    * sequence of characters (excluding the terminating null character) in the
N    * string pointed to by s2.
N    * Returns: a pointer to the located string, or a null pointer if the string
N    *          is not found.
N    */
N
Nextern _ARMABI char *strtok(char * __restrict /*s1*/, const char * __restrict /*s2*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) char *strtok(char * __restrict  , const char * __restrict  ) __attribute__((__nonnull__(2)));
Nextern _ARMABI char *_strtok_r(char * /*s1*/, const char * /*s2*/, char ** /*ptr*/) __attribute__((__nonnull__(2,3)));
Xextern __declspec(__nothrow) char *_strtok_r(char *  , const char *  , char **  ) __attribute__((__nonnull__(2,3)));
N#ifndef __STRICT_ANSI__
Nextern _ARMABI char *strtok_r(char * /*s1*/, const char * /*s2*/, char ** /*ptr*/) __attribute__((__nonnull__(2,3)));
Xextern __declspec(__nothrow) char *strtok_r(char *  , const char *  , char **  ) __attribute__((__nonnull__(2,3)));
N#endif
N   /*
N    * A sequence of calls to the strtok function breaks the string pointed to
N    * by s1 into a sequence of tokens, each of which is delimited by a
N    * character from the string pointed to by s2. The first call in the
N    * sequence has s1 as its first argument, and is followed by calls with a
N    * null pointer as their first argument. The separator string pointed to by
N    * s2 may be different from call to call.
N    * The first call in the sequence searches for the first character that is
N    * not contained in the current separator string s2. If no such character
N    * is found, then there are no tokens in s1 and the strtok function returns
N    * a null pointer. If such a character is found, it is the start of the
N    * first token.
N    * The strtok function then searches from there for a character that is
N    * contained in the current separator string. If no such character is found,
N    * the current token extends to the end of the string pointed to by s1, and
N    * subsequent searches for a token will fail. If such a character is found,
N    * it is overwritten by a null character, which terminates the current
N    * token. The strtok function saves a pointer to the following character,
N    * from which the next search for a token will start.
N    * Each subsequent call, with a null pointer as the value for the first
N    * argument, starts searching from the saved pointer and behaves as
N    * described above.
N    * Returns: pointer to the first character of a token, or a null pointer if
N    *          there is no token.
N    *
N    * strtok_r() is a common extension which works exactly like
N    * strtok(), but instead of storing its state in a hidden
N    * library variable, requires the user to pass in a pointer to a
N    * char * variable which will be used instead. Any sequence of
N    * calls to strtok_r() passing the same char ** pointer should
N    * behave exactly like the corresponding sequence of calls to
N    * strtok(). This means that strtok_r() can safely be used in
N    * multi-threaded programs, and also that you can tokenise two
N    * strings in parallel.
N    */
N
Nextern _ARMABI void *memset(void * /*s*/, int /*c*/, size_t /*n*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) void *memset(void *  , int  , size_t  ) __attribute__((__nonnull__(1)));
N   /*
N    * copies the value of c (converted to an unsigned char) into each of the
N    * first n charactes of the object pointed to by s.
N    * Returns: the value of s.
N    */
Nextern _ARMABI char *strerror(int /*errnum*/);
Xextern __declspec(__nothrow) char *strerror(int  );
N   /*
N    * maps the error number in errnum to an error message string.
N    * Returns: a pointer to the string, the contents of which are
N    *          implementation-defined. The array pointed to shall not be
N    *          modified by the program, but may be overwritten by a
N    *          subsequent call to the strerror function.
N    */
Nextern _ARMABI size_t strlen(const char * /*s*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) size_t strlen(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * computes the length of the string pointed to by s.
N    * Returns: the number of characters that precede the terminating null
N    *          character.
N    */
N
Nextern _ARMABI size_t strlcpy(char * /*dst*/, const char * /*src*/, size_t /*len*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strlcpy(char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies the string src into the string dst, using no more than
N    * len bytes of dst. Always null-terminates dst _within the
N    * length len (i.e. will copy at most len-1 bytes of string plus
N    * a NUL), unless len is actually zero.
N    * 
N    * Return value is the length of the string that _would_ have
N    * been written, i.e. the length of src. Thus, the operation
N    * succeeded without truncation if and only if ret < len;
N    * otherwise, the value in ret tells you how big to make dst if
N    * you decide to reallocate it. (That value does _not_ include
N    * the NUL.)
N    * 
N    * This is a BSD-derived library extension, which we are
N    * permitted to declare in a standard header because ISO defines
N    * function names beginning with 'str' as reserved for future
N    * expansion of <string.h>.
N    */
N
Nextern _ARMABI size_t strlcat(char * /*dst*/, const char * /*src*/, size_t /*len*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strlcat(char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * concatenates the string src to the string dst, using no more
N    * than len bytes of dst. Always null-terminates dst _within the
N    * length len (i.e. will copy at most len-1 bytes of string plus
N    * a NUL), unless len is actually zero.
N    * 
N    * Return value is the length of the string that _would_ have
N    * been written, i.e. the length of src plus the original length
N    * of dst. Thus, the operation succeeded without truncation if
N    * and only if ret < len; otherwise, the value in ret tells you
N    * how big to make dst if you decide to reallocate it. (That
N    * value does _not_ include the NUL.)
N    * 
N    * If no NUL is encountered within the first len bytes of dst,
N    * then the length of dst is considered to have been equal to
N    * len for the purposes of the return value (as if there were a
N    * NUL at dst[len]). Thus, the return value in this case is len
N    * + strlen(src).
N    * 
N    * This is a BSD-derived library extension, which we are
N    * permitted to declare in a standard header because ISO defines
N    * function names beginning with 'str' as reserved for future
N    * expansion of <string.h>.
N    */
N
Nextern _ARMABI void _membitcpybl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpybl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpybb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpybb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpyhl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpyhl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpyhb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpyhb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpywl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpywl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpywb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpywb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovebl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovebl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovebb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovebb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovehl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovehl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovehb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovehb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovewl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovewl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovewb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovewb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
N    /*
N     * Copies or moves a piece of memory from one place to another,
N     * with one-bit granularity. So you can start or finish a copy
N     * part way through a byte, and you can copy between regions
N     * with different alignment within a byte.
N     * 
N     * All these functions have the same prototype: two void *
N     * pointers for destination and source, then two integers
N     * giving the bit offset from those pointers, and finally the
N     * number of bits to copy.
N     * 
N     * Just like memcpy and memmove, the "cpy" functions copy as
N     * fast as they can in the assumption that the memory regions
N     * do not overlap, while the "move" functions cope correctly
N     * with overlap.
N     *
N     * Treating memory as a stream of individual bits requires
N     * defining a convention about what order those bits are
N     * considered to be arranged in. The above functions support
N     * multiple conventions:
N     * 
N     *  - the "bl" functions consider the unit of memory to be the
N     *    byte, and consider the bits within each byte to be
N     *    arranged in little-endian fashion, so that the LSB comes
N     *    first. (For example, membitcpybl(a,b,0,7,1) would copy
N     *    the MSB of the byte at b to the LSB of the byte at a.)
N     * 
N     *  - the "bb" functions consider the unit of memory to be the
N     *    byte, and consider the bits within each byte to be
N     *    arranged in big-endian fashion, so that the MSB comes
N     *    first.
N     * 
N     *  - the "hl" functions consider the unit of memory to be the
N     *    16-bit halfword, and consider the bits within each word
N     *    to be arranged in little-endian fashion.
N     * 
N     *  - the "hb" functions consider the unit of memory to be the
N     *    16-bit halfword, and consider the bits within each word
N     *    to be arranged in big-endian fashion.
N     * 
N     *  - the "wl" functions consider the unit of memory to be the
N     *    32-bit word, and consider the bits within each word to be
N     *    arranged in little-endian fashion.
N     * 
N     *  - the "wb" functions consider the unit of memory to be the
N     *    32-bit word, and consider the bits within each word to be
N     *    arranged in big-endian fashion.
N     */
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STRING_DECLS */
N
N  #ifdef __cplusplus
S    #ifndef __STRING_NO_EXPORTS
S      using ::std::size_t;
S      using ::std::memcpy;
S      using ::std::memmove;
S      using ::std::strcpy;
S      using ::std::strncpy;
S      using ::std::strcat;
S      using ::std::strncat;
S      using ::std::memcmp;
S      using ::std::strcmp;
S      using ::std::strncmp;
S      using ::std::strcasecmp;
S      using ::std::strncasecmp;
S      using ::std::strcoll;
S      using ::std::strxfrm;
S      using ::std::memchr;
S      using ::std::strchr;
S      using ::std::strcspn;
S      using ::std::strpbrk;
S      using ::std::strrchr;
S      using ::std::strspn;
S      using ::std::strstr;
S      using ::std::strtok;
S#ifndef __STRICT_ANSI__
S      using ::std::strtok_r;
S#endif
S      using ::std::_strtok_r;
S      using ::std::memset;
S      using ::std::strerror;
S      using ::std::strlen;
S      using ::std::strlcpy;
S      using ::std::strlcat;
S      using ::std::_membitcpybl;
S      using ::std::_membitcpybb;
S      using ::std::_membitcpyhl;
S      using ::std::_membitcpyhb;
S      using ::std::_membitcpywl;
S      using ::std::_membitcpywb;
S      using ::std::_membitmovebl;
S      using ::std::_membitmovebb;
S      using ::std::_membitmovehl;
S      using ::std::_membitmovehb;
S      using ::std::_membitmovewl;
S      using ::std::_membitmovewb;
S    #endif /* __STRING_NO_EXPORTS */
N  #endif /* __cplusplus */
N
N#endif
N
N/* end of string.h */
N
L 27 "F:/Users/fu/AppData/Local/Arm/Packs/ARM/CMSIS/5.9.0/CMSIS/RTOS2/RTX/Source/rtx_evr.c" 2
N#include "cmsis_compiler.h"
L 1 "F:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include\cmsis_compiler.h" 1
N/**************************************************************************//**
N * @file     cmsis_compiler.h
N * @brief    CMSIS compiler generic header file
N * @version  V5.1.0
N * @date     09. October 2018
N ******************************************************************************/
N/*
N * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
N *
N * SPDX-License-Identifier: Apache-2.0
N *
N * Licensed under the Apache License, Version 2.0 (the License); you may
N * not use this file except in compliance with the License.
N * You may obtain a copy of the License at
N *
N * www.apache.org/licenses/LICENSE-2.0
N *
N * Unless required by applicable law or agreed to in writing, software
N * distributed under the License is distributed on an AS IS BASIS, WITHOUT
N * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
N * See the License for the specific language governing permissions and
N * limitations under the License.
N */
N
N#ifndef __CMSIS_COMPILER_H
N#define __CMSIS_COMPILER_H
N
N#include <stdint.h>
L 1 "F:\Keil_v5\ARM\ARMCC\Bin\..\include\stdint.h" 1
N/* Copyright (C) ARM Ltd., 1999,2014 */
N/* All rights reserved */
N
N/*
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: agrant $
N */
N
N#ifndef __stdint_h
N#define __stdint_h
N#define __ARMCLIB_VERSION 5060037
N
N  #ifdef __INT64_TYPE__
S    /* armclang predefines '__INT64_TYPE__' and '__INT64_C_SUFFIX__' */
S    #define __INT64 __INT64_TYPE__
N  #else
N    /* armcc has builtin '__int64' which can be used in --strict mode */
N    #define __INT64 __int64
N    #define __INT64_C_SUFFIX__ ll
N  #endif
N  #define __PASTE2(x, y) x ## y
N  #define __PASTE(x, y) __PASTE2(x, y)
N  #define __INT64_C(x)  __ESCAPE__(__PASTE(x, __INT64_C_SUFFIX__))
N  #define __UINT64_C(x)  __ESCAPE__(__PASTE(x ## u, __INT64_C_SUFFIX__))
N  #if defined(__clang__) || (defined(__ARMCC_VERSION) && !defined(__STRICT_ANSI__))
X  #if 0L || (1L && !0L)
N    /* armclang and non-strict armcc allow 'long long' in system headers */
N    #define __LONGLONG long long
N  #else
S    /* strict armcc has '__int64' */
S    #define __LONGLONG __int64
N  #endif
N
N  #ifndef __STDINT_DECLS
N  #define __STDINT_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S      namespace std {
S          #define __CLIBNS std::
S          extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N
N/*
N * 'signed' is redundant below, except for 'signed char' and if
N * the typedef is used to declare a bitfield.
N */
N
N    /* 7.18.1.1 */
N
N    /* exact-width signed integer types */
Ntypedef   signed          char int8_t;
Ntypedef   signed short     int int16_t;
Ntypedef   signed           int int32_t;
Ntypedef   signed       __INT64 int64_t;
Xtypedef   signed       __int64 int64_t;
N
N    /* exact-width unsigned integer types */
Ntypedef unsigned          char uint8_t;
Ntypedef unsigned short     int uint16_t;
Ntypedef unsigned           int uint32_t;
Ntypedef unsigned       __INT64 uint64_t;
Xtypedef unsigned       __int64 uint64_t;
N
N    /* 7.18.1.2 */
N
N    /* smallest type of at least n bits */
N    /* minimum-width signed integer types */
Ntypedef   signed          char int_least8_t;
Ntypedef   signed short     int int_least16_t;
Ntypedef   signed           int int_least32_t;
Ntypedef   signed       __INT64 int_least64_t;
Xtypedef   signed       __int64 int_least64_t;
N
N    /* minimum-width unsigned integer types */
Ntypedef unsigned          char uint_least8_t;
Ntypedef unsigned short     int uint_least16_t;
Ntypedef unsigned           int uint_least32_t;
Ntypedef unsigned       __INT64 uint_least64_t;
Xtypedef unsigned       __int64 uint_least64_t;
N
N    /* 7.18.1.3 */
N
N    /* fastest minimum-width signed integer types */
Ntypedef   signed           int int_fast8_t;
Ntypedef   signed           int int_fast16_t;
Ntypedef   signed           int int_fast32_t;
Ntypedef   signed       __INT64 int_fast64_t;
Xtypedef   signed       __int64 int_fast64_t;
N
N    /* fastest minimum-width unsigned integer types */
Ntypedef unsigned           int uint_fast8_t;
Ntypedef unsigned           int uint_fast16_t;
Ntypedef unsigned           int uint_fast32_t;
Ntypedef unsigned       __INT64 uint_fast64_t;
Xtypedef unsigned       __int64 uint_fast64_t;
N
N    /* 7.18.1.4 integer types capable of holding object pointers */
N#if __sizeof_ptr == 8
X#if 4 == 8
Stypedef   signed       __INT64 intptr_t;
Stypedef unsigned       __INT64 uintptr_t;
N#else
Ntypedef   signed           int intptr_t;
Ntypedef unsigned           int uintptr_t;
N#endif
N
N    /* 7.18.1.5 greatest-width integer types */
Ntypedef   signed     __LONGLONG intmax_t;
Xtypedef   signed     long long intmax_t;
Ntypedef unsigned     __LONGLONG uintmax_t;
Xtypedef unsigned     long long uintmax_t;
N
N
N#if !defined(__cplusplus) || defined(__STDC_LIMIT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.2.1 */
N
N    /* minimum values of exact-width signed integer types */
N#define INT8_MIN                   -128
N#define INT16_MIN                -32768
N#define INT32_MIN          (~0x7fffffff)   /* -2147483648 is unsigned */
N#define INT64_MIN  __INT64_C(~0x7fffffffffffffff) /* -9223372036854775808 is unsigned */
N
N    /* maximum values of exact-width signed integer types */
N#define INT8_MAX                    127
N#define INT16_MAX                 32767
N#define INT32_MAX            2147483647
N#define INT64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of exact-width unsigned integer types */
N#define UINT8_MAX                   255
N#define UINT16_MAX                65535
N#define UINT32_MAX           4294967295u
N#define UINT64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.2 */
N
N    /* minimum values of minimum-width signed integer types */
N#define INT_LEAST8_MIN                   -128
N#define INT_LEAST16_MIN                -32768
N#define INT_LEAST32_MIN          (~0x7fffffff)
N#define INT_LEAST64_MIN  __INT64_C(~0x7fffffffffffffff)
N
N    /* maximum values of minimum-width signed integer types */
N#define INT_LEAST8_MAX                    127
N#define INT_LEAST16_MAX                 32767
N#define INT_LEAST32_MAX            2147483647
N#define INT_LEAST64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of minimum-width unsigned integer types */
N#define UINT_LEAST8_MAX                   255
N#define UINT_LEAST16_MAX                65535
N#define UINT_LEAST32_MAX           4294967295u
N#define UINT_LEAST64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.3 */
N
N    /* minimum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MIN           (~0x7fffffff)
N#define INT_FAST16_MIN          (~0x7fffffff)
N#define INT_FAST32_MIN          (~0x7fffffff)
N#define INT_FAST64_MIN  __INT64_C(~0x7fffffffffffffff)
N
N    /* maximum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MAX             2147483647
N#define INT_FAST16_MAX            2147483647
N#define INT_FAST32_MAX            2147483647
N#define INT_FAST64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of fastest minimum-width unsigned integer types */
N#define UINT_FAST8_MAX            4294967295u
N#define UINT_FAST16_MAX           4294967295u
N#define UINT_FAST32_MAX           4294967295u
N#define UINT_FAST64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.4 */
N
N    /* minimum value of pointer-holding signed integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define INTPTR_MIN INT64_MIN
N#else
N#define INTPTR_MIN INT32_MIN
N#endif
N
N    /* maximum value of pointer-holding signed integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define INTPTR_MAX INT64_MAX
N#else
N#define INTPTR_MAX INT32_MAX
N#endif
N
N    /* maximum value of pointer-holding unsigned integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define UINTPTR_MAX UINT64_MAX
N#else
N#define UINTPTR_MAX UINT32_MAX
N#endif
N
N    /* 7.18.2.5 */
N
N    /* minimum value of greatest-width signed integer type */
N#define INTMAX_MIN  __ESCAPE__(~0x7fffffffffffffffll)
N
N    /* maximum value of greatest-width signed integer type */
N#define INTMAX_MAX  __ESCAPE__(9223372036854775807ll)
N
N    /* maximum value of greatest-width unsigned integer type */
N#define UINTMAX_MAX __ESCAPE__(18446744073709551615ull)
N
N    /* 7.18.3 */
N
N    /* limits of ptrdiff_t */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define PTRDIFF_MIN INT64_MIN
S#define PTRDIFF_MAX INT64_MAX
N#else
N#define PTRDIFF_MIN INT32_MIN
N#define PTRDIFF_MAX INT32_MAX
N#endif
N
N    /* limits of sig_atomic_t */
N#define SIG_ATOMIC_MIN (~0x7fffffff)
N#define SIG_ATOMIC_MAX   2147483647
N
N    /* limit of size_t */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define SIZE_MAX UINT64_MAX
N#else
N#define SIZE_MAX UINT32_MAX
N#endif
N
N    /* limits of wchar_t */
N    /* NB we have to undef and redef because they're defined in both
N     * stdint.h and wchar.h */
N#undef WCHAR_MIN
N#undef WCHAR_MAX
N
N#if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
X#if 0L || (0L && __ARM_SIZEOF_WCHAR_T == 4)
S  #define WCHAR_MIN   0
S  #define WCHAR_MAX   0xffffffffU
N#else
N  #define WCHAR_MIN   0
N  #define WCHAR_MAX   65535
N#endif
N
N    /* limits of wint_t */
N#define WINT_MIN (~0x7fffffff)
N#define WINT_MAX 2147483647
N
N#endif /* __STDC_LIMIT_MACROS */
N
N#if !defined(__cplusplus) || defined(__STDC_CONSTANT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.4.1 macros for minimum-width integer constants */
N#define INT8_C(x)   (x)
N#define INT16_C(x)  (x)
N#define INT32_C(x)  (x)
N#define INT64_C(x)  __INT64_C(x)
N
N#define UINT8_C(x)  (x ## u)
N#define UINT16_C(x) (x ## u)
N#define UINT32_C(x) (x ## u)
N#define UINT64_C(x) __UINT64_C(x)
N
N    /* 7.18.4.2 macros for greatest-width integer constants */
N#define INTMAX_C(x)  __ESCAPE__(x ## ll)
N#define UINTMAX_C(x) __ESCAPE__(x ## ull)
N
N#endif /* __STDC_CONSTANT_MACROS */
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STDINT_DECLS */
N
N  #ifdef __cplusplus
S    #ifndef __STDINT_NO_EXPORTS
S      using ::std::int8_t;
S      using ::std::int16_t;
S      using ::std::int32_t;
S      using ::std::int64_t;
S      using ::std::uint8_t;
S      using ::std::uint16_t;
S      using ::std::uint32_t;
S      using ::std::uint64_t;
S      using ::std::int_least8_t;
S      using ::std::int_least16_t;
S      using ::std::int_least32_t;
S      using ::std::int_least64_t;
S      using ::std::uint_least8_t;
S      using ::std::uint_least16_t;
S      using ::std::uint_least32_t;
S      using ::std::uint_least64_t;
S      using ::std::int_fast8_t;
S      using ::std::int_fast16_t;
S      using ::std::int_fast32_t;
S      using ::std::int_fast64_t;
S      using ::std::uint_fast8_t;
S      using ::std::uint_fast16_t;
S      using ::std::uint_fast32_t;
S      using ::std::uint_fast64_t;
S      using ::std::intptr_t;
S      using ::std::uintptr_t;
S      using ::std::intmax_t;
S      using ::std::uintmax_t;
S    #endif
N  #endif /* __cplusplus */
N
N#undef __INT64
N#undef __LONGLONG
N
N#endif /* __stdint_h */
N
N/* end of stdint.h */
L 29 "F:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include\cmsis_compiler.h" 2
N
N/*
N * Arm Compiler 4/5
N */
N#if   defined ( __CC_ARM )
X#if   1L
N  #include "cmsis_armcc.h"
L 1 "F:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include\cmsis_armcc.h" 1
N/**************************************************************************//**
N * @file     cmsis_armcc.h
N * @brief    CMSIS compiler ARMCC (Arm Compiler 5) header file
N * @version  V5.3.2
N * @date     27. May 2021
N ******************************************************************************/
N/*
N * Copyright (c) 2009-2021 Arm Limited. All rights reserved.
N *
N * SPDX-License-Identifier: Apache-2.0
N *
N * Licensed under the Apache License, Version 2.0 (the License); you may
N * not use this file except in compliance with the License.
N * You may obtain a copy of the License at
N *
N * www.apache.org/licenses/LICENSE-2.0
N *
N * Unless required by applicable law or agreed to in writing, software
N * distributed under the License is distributed on an AS IS BASIS, WITHOUT
N * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
N * See the License for the specific language governing permissions and
N * limitations under the License.
N */
N
N#ifndef __CMSIS_ARMCC_H
N#define __CMSIS_ARMCC_H
N
N
N#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 400677)
X#if 1L && (5060750 < 400677)
S  #error "Please use Arm Compiler Toolchain V4.0.677 or later!"
N#endif
N
N/* CMSIS compiler control architecture macros */
N#if ((defined (__TARGET_ARCH_6_M  ) && (__TARGET_ARCH_6_M   == 1)) || \
N     (defined (__TARGET_ARCH_6S_M ) && (__TARGET_ARCH_6S_M  == 1))   )
X#if ((0L && (__TARGET_ARCH_6_M   == 1)) ||      (0L && (__TARGET_ARCH_6S_M  == 1))   )
S  #define __ARM_ARCH_6M__           1
N#endif
N
N#if (defined (__TARGET_ARCH_7_M ) && (__TARGET_ARCH_7_M  == 1))
X#if (0L && (__TARGET_ARCH_7_M  == 1))
S  #define __ARM_ARCH_7M__           1
N#endif
N
N#if (defined (__TARGET_ARCH_7E_M) && (__TARGET_ARCH_7E_M == 1))
X#if (1L && (1 == 1))
N  #define __ARM_ARCH_7EM__          1
N#endif
N
N  /* __ARM_ARCH_8M_BASE__  not applicable */
N  /* __ARM_ARCH_8M_MAIN__  not applicable */
N  /* __ARM_ARCH_8_1M_MAIN__  not applicable */
N
N/* CMSIS compiler control DSP macros */
N#if ((defined (__ARM_ARCH_7EM__) && (__ARM_ARCH_7EM__ == 1))     )
X#if ((1L && (1 == 1))     )
N  #define __ARM_FEATURE_DSP         1
N#endif
N
N/* CMSIS compiler specific defines */
N#ifndef   __ASM
N  #define __ASM                                  __asm
N#endif
N#ifndef   __INLINE
N  #define __INLINE                               __inline
N#endif
N#ifndef   __STATIC_INLINE
N  #define __STATIC_INLINE                        static __inline
N#endif
N#ifndef   __STATIC_FORCEINLINE
N  #define __STATIC_FORCEINLINE                   static __forceinline
N#endif
N#ifndef   __NO_RETURN
N  #define __NO_RETURN                            __declspec(noreturn)
N#endif
N#ifndef   __USED
N  #define __USED                                 __attribute__((used))
N#endif
N#ifndef   __WEAK
N  #define __WEAK                                 __attribute__((weak))
N#endif
N#ifndef   __PACKED
N  #define __PACKED                               __attribute__((packed))
N#endif
N#ifndef   __PACKED_STRUCT
N  #define __PACKED_STRUCT                        __packed struct
N#endif
N#ifndef   __PACKED_UNION
N  #define __PACKED_UNION                         __packed union
N#endif
N#ifndef   __UNALIGNED_UINT32        /* deprecated */
N  #define __UNALIGNED_UINT32(x)                  (*((__packed uint32_t *)(x)))
N#endif
N#ifndef   __UNALIGNED_UINT16_WRITE
N  #define __UNALIGNED_UINT16_WRITE(addr, val)    ((*((__packed uint16_t *)(addr))) = (val))
N#endif
N#ifndef   __UNALIGNED_UINT16_READ
N  #define __UNALIGNED_UINT16_READ(addr)          (*((const __packed uint16_t *)(addr)))
N#endif
N#ifndef   __UNALIGNED_UINT32_WRITE
N  #define __UNALIGNED_UINT32_WRITE(addr, val)    ((*((__packed uint32_t *)(addr))) = (val))
N#endif
N#ifndef   __UNALIGNED_UINT32_READ
N  #define __UNALIGNED_UINT32_READ(addr)          (*((const __packed uint32_t *)(addr)))
N#endif
N#ifndef   __ALIGNED
N  #define __ALIGNED(x)                           __attribute__((aligned(x)))
N#endif
N#ifndef   __RESTRICT
N  #define __RESTRICT                             __restrict
N#endif
N#ifndef   __COMPILER_BARRIER
N  #define __COMPILER_BARRIER()                   __memory_changed()
N#endif
N
N/* #########################  Startup and Lowlevel Init  ######################## */
N
N#ifndef __PROGRAM_START
N#define __PROGRAM_START           __main
N#endif
N
N#ifndef __INITIAL_SP
N#define __INITIAL_SP              Image$$ARM_LIB_STACK$$ZI$$Limit
N#endif
N
N#ifndef __STACK_LIMIT
N#define __STACK_LIMIT             Image$$ARM_LIB_STACK$$ZI$$Base
N#endif
N
N#ifndef __VECTOR_TABLE
N#define __VECTOR_TABLE            __Vectors
N#endif
N
N#ifndef __VECTOR_TABLE_ATTRIBUTE
N#define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section("RESET")))
N#endif
N
N/* ##########################  Core Instruction Access  ######################### */
N/** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
N  Access to dedicated instructions
N  @{
N*/
N
N/**
N  \brief   No Operation
N  \details No Operation does nothing. This instruction can be used for code alignment purposes.
N */
N#define __NOP                             __nop
N
N
N/**
N  \brief   Wait For Interrupt
N  \details Wait For Interrupt is a hint instruction that suspends execution until one of a number of events occurs.
N */
N#define __WFI                             __wfi
N
N
N/**
N  \brief   Wait For Event
N  \details Wait For Event is a hint instruction that permits the processor to enter
N           a low-power state until one of a number of events occurs.
N */
N#define __WFE                             __wfe
N
N
N/**
N  \brief   Send Event
N  \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
N */
N#define __SEV                             __sev
N
N
N/**
N  \brief   Instruction Synchronization Barrier
N  \details Instruction Synchronization Barrier flushes the pipeline in the processor,
N           so that all instructions following the ISB are fetched from cache or memory,
N           after the instruction has been completed.
N */
N#define __ISB()                           __isb(0xF)
N
N/**
N  \brief   Data Synchronization Barrier
N  \details Acts as a special kind of Data Memory Barrier.
N           It completes when all explicit memory accesses before this instruction complete.
N */
N#define __DSB()                           __dsb(0xF)
N
N/**
N  \brief   Data Memory Barrier
N  \details Ensures the apparent order of the explicit memory operations before
N           and after the instruction, without ensuring their completion.
N */
N#define __DMB()                           __dmb(0xF)
N
N
N/**
N  \brief   Reverse byte order (32 bit)
N  \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x78563412.
N  \param [in]    value  Value to reverse
N  \return               Reversed value
N */
N#define __REV                             __rev
N
N
N/**
N  \brief   Reverse byte order (16 bit)
N  \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 0x34127856.
N  \param [in]    value  Value to reverse
N  \return               Reversed value
N */
N#ifndef __NO_EMBEDDED_ASM
N__attribute__((section(".rev16_text"))) __STATIC_INLINE __ASM uint32_t __REV16(uint32_t value)
X__attribute__((section(".rev16_text"))) static __inline __asm uint32_t __REV16(uint32_t value)
N{
N  rev16 r0, r0
N  bx lr
N}
N#endif
N
N
N/**
N  \brief   Reverse byte order (16 bit)
N  \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For example, 0x0080 becomes 0x8000.
N  \param [in]    value  Value to reverse
N  \return               Reversed value
N */
N#ifndef __NO_EMBEDDED_ASM
N__attribute__((section(".revsh_text"))) __STATIC_INLINE __ASM int16_t __REVSH(int16_t value)
X__attribute__((section(".revsh_text"))) static __inline __asm int16_t __REVSH(int16_t value)
N{
N  revsh r0, r0
N  bx lr
N}
N#endif
N
N
N/**
N  \brief   Rotate Right in unsigned value (32 bit)
N  \details Rotate Right (immediate) provides the value of the contents of a register rotated by a variable number of bits.
N  \param [in]    op1  Value to rotate
N  \param [in]    op2  Number of Bits to rotate
N  \return               Rotated value
N */
N#define __ROR                             __ror
N
N
N/**
N  \brief   Breakpoint
N  \details Causes the processor to enter Debug state.
N           Debug tools can use this to investigate system state when the instruction at a particular address is reached.
N  \param [in]    value  is ignored by the processor.
N                 If required, a debugger can use it to store additional information about the breakpoint.
N */
N#define __BKPT(value)                       __breakpoint(value)
N
N
N/**
N  \brief   Reverse bit order of value
N  \details Reverses the bit order of the given value.
N  \param [in]    value  Value to reverse
N  \return               Reversed value
N */
N#if ((defined (__ARM_ARCH_7M__ ) && (__ARM_ARCH_7M__  == 1)) || \
N     (defined (__ARM_ARCH_7EM__) && (__ARM_ARCH_7EM__ == 1))     )
X#if ((0L && (__ARM_ARCH_7M__  == 1)) ||      (1L && (1 == 1))     )
N  #define __RBIT                          __rbit
N#else
S__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
S{
S  uint32_t result;
S  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
S
S  result = value;                      /* r will be reversed bits of v; first get LSB of v */
S  for (value >>= 1U; value != 0U; value >>= 1U)
S  {
S    result <<= 1U;
S    result |= value & 1U;
S    s--;
S  }
S  result <<= s;                        /* shift when v's highest bits are zero */
S  return result;
S}
N#endif
N
N
N/**
N  \brief   Count leading zeros
N  \details Counts the number of leading zeros of a data value.
N  \param [in]  value  Value to count the leading zeros
N  \return             number of leading zeros in value
N */
N#define __CLZ                             __clz
N
N
N#if ((defined (__ARM_ARCH_7M__ ) && (__ARM_ARCH_7M__  == 1)) || \
N     (defined (__ARM_ARCH_7EM__) && (__ARM_ARCH_7EM__ == 1))     )
X#if ((0L && (__ARM_ARCH_7M__  == 1)) ||      (1L && (1 == 1))     )
N
N/**
N  \brief   LDR Exclusive (8 bit)
N  \details Executes a exclusive LDR instruction for 8 bit value.
N  \param [in]    ptr  Pointer to data
N  \return             value of type uint8_t at (*ptr)
N */
N#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 5060020)
X#if 1L && (5060750 < 5060020)
S  #define __LDREXB(ptr)                                                        ((uint8_t ) __ldrex(ptr))
N#else
N  #define __LDREXB(ptr)          _Pragma("push") _Pragma("diag_suppress 3731") ((uint8_t ) __ldrex(ptr))  _Pragma("pop")
N#endif
N
N
N/**
N  \brief   LDR Exclusive (16 bit)
N  \details Executes a exclusive LDR instruction for 16 bit values.
N  \param [in]    ptr  Pointer to data
N  \return        value of type uint16_t at (*ptr)
N */
N#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 5060020)
X#if 1L && (5060750 < 5060020)
S  #define __LDREXH(ptr)                                                        ((uint16_t) __ldrex(ptr))
N#else
N  #define __LDREXH(ptr)          _Pragma("push") _Pragma("diag_suppress 3731") ((uint16_t) __ldrex(ptr))  _Pragma("pop")
N#endif
N
N
N/**
N  \brief   LDR Exclusive (32 bit)
N  \details Executes a exclusive LDR instruction for 32 bit values.
N  \param [in]    ptr  Pointer to data
N  \return        value of type uint32_t at (*ptr)
N */
N#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 5060020)
X#if 1L && (5060750 < 5060020)
S  #define __LDREXW(ptr)                                                        ((uint32_t ) __ldrex(ptr))
N#else
N  #define __LDREXW(ptr)          _Pragma("push") _Pragma("diag_suppress 3731") ((uint32_t ) __ldrex(ptr))  _Pragma("pop")
N#endif
N
N
N/**
N  \brief   STR Exclusive (8 bit)
N  \details Executes a exclusive STR instruction for 8 bit values.
N  \param [in]  value  Value to store
N  \param [in]    ptr  Pointer to location
N  \return          0  Function succeeded
N  \return          1  Function failed
N */
N#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 5060020)
X#if 1L && (5060750 < 5060020)
S  #define __STREXB(value, ptr)                                                 __strex(value, ptr)
N#else
N  #define __STREXB(value, ptr)   _Pragma("push") _Pragma("diag_suppress 3731") __strex(value, ptr)        _Pragma("pop")
N#endif
N
N
N/**
N  \brief   STR Exclusive (16 bit)
N  \details Executes a exclusive STR instruction for 16 bit values.
N  \param [in]  value  Value to store
N  \param [in]    ptr  Pointer to location
N  \return          0  Function succeeded
N  \return          1  Function failed
N */
N#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 5060020)
X#if 1L && (5060750 < 5060020)
S  #define __STREXH(value, ptr)                                                 __strex(value, ptr)
N#else
N  #define __STREXH(value, ptr)   _Pragma("push") _Pragma("diag_suppress 3731") __strex(value, ptr)        _Pragma("pop")
N#endif
N
N
N/**
N  \brief   STR Exclusive (32 bit)
N  \details Executes a exclusive STR instruction for 32 bit values.
N  \param [in]  value  Value to store
N  \param [in]    ptr  Pointer to location
N  \return          0  Function succeeded
N  \return          1  Function failed
N */
N#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 5060020)
X#if 1L && (5060750 < 5060020)
S  #define __STREXW(value, ptr)                                                 __strex(value, ptr)
N#else
N  #define __STREXW(value, ptr)   _Pragma("push") _Pragma("diag_suppress 3731") __strex(value, ptr)        _Pragma("pop")
N#endif
N
N
N/**
N  \brief   Remove the exclusive lock
N  \details Removes the exclusive lock which is created by LDREX.
N */
N#define __CLREX                           __clrex
N
N
N/**
N  \brief   Signed Saturate
N  \details Saturates a signed value.
N  \param [in]  value  Value to be saturated
N  \param [in]    sat  Bit position to saturate to (1..32)
N  \return             Saturated value
N */
N#define __SSAT                            __ssat
N
N
N/**
N  \brief   Unsigned Saturate
N  \details Saturates an unsigned value.
N  \param [in]  value  Value to be saturated
N  \param [in]    sat  Bit position to saturate to (0..31)
N  \return             Saturated value
N */
N#define __USAT                            __usat
N
N
N/**
N  \brief   Rotate Right with Extend (32 bit)
N  \details Moves each bit of a bitstring right by one bit.
N           The carry input is shifted in at the left end of the bitstring.
N  \param [in]    value  Value to rotate
N  \return               Rotated value
N */
N#ifndef __NO_EMBEDDED_ASM
N__attribute__((section(".rrx_text"))) __STATIC_INLINE __ASM uint32_t __RRX(uint32_t value)
X__attribute__((section(".rrx_text"))) static __inline __asm uint32_t __RRX(uint32_t value)
N{
N  rrx r0, r0
N  bx lr
N}
N#endif
N
N
N/**
N  \brief   LDRT Unprivileged (8 bit)
N  \details Executes a Unprivileged LDRT instruction for 8 bit value.
N  \param [in]    ptr  Pointer to data
N  \return             value of type uint8_t at (*ptr)
N */
N#define __LDRBT(ptr)                      ((uint8_t )  __ldrt(ptr))
N
N
N/**
N  \brief   LDRT Unprivileged (16 bit)
N  \details Executes a Unprivileged LDRT instruction for 16 bit values.
N  \param [in]    ptr  Pointer to data
N  \return        value of type uint16_t at (*ptr)
N */
N#define __LDRHT(ptr)                      ((uint16_t)  __ldrt(ptr))
N
N
N/**
N  \brief   LDRT Unprivileged (32 bit)
N  \details Executes a Unprivileged LDRT instruction for 32 bit values.
N  \param [in]    ptr  Pointer to data
N  \return        value of type uint32_t at (*ptr)
N */
N#define __LDRT(ptr)                       ((uint32_t ) __ldrt(ptr))
N
N
N/**
N  \brief   STRT Unprivileged (8 bit)
N  \details Executes a Unprivileged STRT instruction for 8 bit values.
N  \param [in]  value  Value to store
N  \param [in]    ptr  Pointer to location
N */
N#define __STRBT(value, ptr)               __strt(value, ptr)
N
N
N/**
N  \brief   STRT Unprivileged (16 bit)
N  \details Executes a Unprivileged STRT instruction for 16 bit values.
N  \param [in]  value  Value to store
N  \param [in]    ptr  Pointer to location
N */
N#define __STRHT(value, ptr)               __strt(value, ptr)
N
N
N/**
N  \brief   STRT Unprivileged (32 bit)
N  \details Executes a Unprivileged STRT instruction for 32 bit values.
N  \param [in]  value  Value to store
N  \param [in]    ptr  Pointer to location
N */
N#define __STRT(value, ptr)                __strt(value, ptr)
N
N#else  /* ((defined (__ARM_ARCH_7M__ ) && (__ARM_ARCH_7M__  == 1)) || \
N           (defined (__ARM_ARCH_7EM__) && (__ARM_ARCH_7EM__ == 1))     ) */
X#else   
S
S/**
S  \brief   Signed Saturate
S  \details Saturates a signed value.
S  \param [in]  value  Value to be saturated
S  \param [in]    sat  Bit position to saturate to (1..32)
S  \return             Saturated value
S */
S__attribute__((always_inline)) __STATIC_INLINE int32_t __SSAT(int32_t val, uint32_t sat)
S{
S  if ((sat >= 1U) && (sat <= 32U))
S  {
S    const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
S    const int32_t min = -1 - max ;
S    if (val > max)
S    {
S      return max;
S    }
S    else if (val < min)
S    {
S      return min;
S    }
S  }
S  return val;
S}
S
S/**
S  \brief   Unsigned Saturate
S  \details Saturates an unsigned value.
S  \param [in]  value  Value to be saturated
S  \param [in]    sat  Bit position to saturate to (0..31)
S  \return             Saturated value
S */
S__attribute__((always_inline)) __STATIC_INLINE uint32_t __USAT(int32_t val, uint32_t sat)
S{
S  if (sat <= 31U)
S  {
S    const uint32_t max = ((1U << sat) - 1U);
S    if (val > (int32_t)max)
S    {
S      return max;
S    }
S    else if (val < 0)
S    {
S      return 0U;
S    }
S  }
S  return (uint32_t)val;
S}
S
N#endif /* ((defined (__ARM_ARCH_7M__ ) && (__ARM_ARCH_7M__  == 1)) || \
N           (defined (__ARM_ARCH_7EM__) && (__ARM_ARCH_7EM__ == 1))     ) */
X#endif  
N
N/*@}*/ /* end of group CMSIS_Core_InstructionInterface */
N
N
N/* ###########################  Core Function Access  ########################### */
N/** \ingroup  CMSIS_Core_FunctionInterface
N    \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
N  @{
N */
N
N/**
N  \brief   Enable IRQ Interrupts
N  \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
N           Can only be executed in Privileged modes.
N */
N/* intrinsic void __enable_irq();     */
N
N
N/**
N  \brief   Disable IRQ Interrupts
N  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
N           Can only be executed in Privileged modes.
N */
N/* intrinsic void __disable_irq();    */
N
N/**
N  \brief   Get Control Register
N  \details Returns the content of the Control Register.
N  \return               Control Register value
N */
N__STATIC_INLINE uint32_t __get_CONTROL(void)
Xstatic __inline uint32_t __get_CONTROL(void)
N{
N  register uint32_t __regControl         __ASM("control");
X  register uint32_t __regControl         __asm("control");
N  return(__regControl);
N}
N
N
N/**
N  \brief   Set Control Register
N  \details Writes the given value to the Control Register.
N  \param [in]    control  Control Register value to set
N */
N__STATIC_INLINE void __set_CONTROL(uint32_t control)
Xstatic __inline void __set_CONTROL(uint32_t control)
N{
N  register uint32_t __regControl         __ASM("control");
X  register uint32_t __regControl         __asm("control");
N  __regControl = control;
N  __ISB();
X  __isb(0xF);
N}
N
N
N/**
N  \brief   Get IPSR Register
N  \details Returns the content of the IPSR Register.
N  \return               IPSR Register value
N */
N__STATIC_INLINE uint32_t __get_IPSR(void)
Xstatic __inline uint32_t __get_IPSR(void)
N{
N  register uint32_t __regIPSR          __ASM("ipsr");
X  register uint32_t __regIPSR          __asm("ipsr");
N  return(__regIPSR);
N}
N
N
N/**
N  \brief   Get APSR Register
N  \details Returns the content of the APSR Register.
N  \return               APSR Register value
N */
N__STATIC_INLINE uint32_t __get_APSR(void)
Xstatic __inline uint32_t __get_APSR(void)
N{
N  register uint32_t __regAPSR          __ASM("apsr");
X  register uint32_t __regAPSR          __asm("apsr");
N  return(__regAPSR);
N}
N
N
N/**
N  \brief   Get xPSR Register
N  \details Returns the content of the xPSR Register.
N  \return               xPSR Register value
N */
N__STATIC_INLINE uint32_t __get_xPSR(void)
Xstatic __inline uint32_t __get_xPSR(void)
N{
N  register uint32_t __regXPSR          __ASM("xpsr");
X  register uint32_t __regXPSR          __asm("xpsr");
N  return(__regXPSR);
N}
N
N
N/**
N  \brief   Get Process Stack Pointer
N  \details Returns the current value of the Process Stack Pointer (PSP).
N  \return               PSP Register value
N */
N__STATIC_INLINE uint32_t __get_PSP(void)
Xstatic __inline uint32_t __get_PSP(void)
N{
N  register uint32_t __regProcessStackPointer  __ASM("psp");
X  register uint32_t __regProcessStackPointer  __asm("psp");
N  return(__regProcessStackPointer);
N}
N
N
N/**
N  \brief   Set Process Stack Pointer
N  \details Assigns the given value to the Process Stack Pointer (PSP).
N  \param [in]    topOfProcStack  Process Stack Pointer value to set
N */
N__STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
Xstatic __inline void __set_PSP(uint32_t topOfProcStack)
N{
N  register uint32_t __regProcessStackPointer  __ASM("psp");
X  register uint32_t __regProcessStackPointer  __asm("psp");
N  __regProcessStackPointer = topOfProcStack;
N}
N
N
N/**
N  \brief   Get Main Stack Pointer
N  \details Returns the current value of the Main Stack Pointer (MSP).
N  \return               MSP Register value
N */
N__STATIC_INLINE uint32_t __get_MSP(void)
Xstatic __inline uint32_t __get_MSP(void)
N{
N  register uint32_t __regMainStackPointer     __ASM("msp");
X  register uint32_t __regMainStackPointer     __asm("msp");
N  return(__regMainStackPointer);
N}
N
N
N/**
N  \brief   Set Main Stack Pointer
N  \details Assigns the given value to the Main Stack Pointer (MSP).
N  \param [in]    topOfMainStack  Main Stack Pointer value to set
N */
N__STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
Xstatic __inline void __set_MSP(uint32_t topOfMainStack)
N{
N  register uint32_t __regMainStackPointer     __ASM("msp");
X  register uint32_t __regMainStackPointer     __asm("msp");
N  __regMainStackPointer = topOfMainStack;
N}
N
N
N/**
N  \brief   Get Priority Mask
N  \details Returns the current state of the priority mask bit from the Priority Mask Register.
N  \return               Priority Mask value
N */
N__STATIC_INLINE uint32_t __get_PRIMASK(void)
Xstatic __inline uint32_t __get_PRIMASK(void)
N{
N  register uint32_t __regPriMask         __ASM("primask");
X  register uint32_t __regPriMask         __asm("primask");
N  return(__regPriMask);
N}
N
N
N/**
N  \brief   Set Priority Mask
N  \details Assigns the given value to the Priority Mask Register.
N  \param [in]    priMask  Priority Mask
N */
N__STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
Xstatic __inline void __set_PRIMASK(uint32_t priMask)
N{
N  register uint32_t __regPriMask         __ASM("primask");
X  register uint32_t __regPriMask         __asm("primask");
N  __regPriMask = (priMask);
N}
N
N
N#if ((defined (__ARM_ARCH_7M__ ) && (__ARM_ARCH_7M__  == 1)) || \
N     (defined (__ARM_ARCH_7EM__) && (__ARM_ARCH_7EM__ == 1))     )
X#if ((0L && (__ARM_ARCH_7M__  == 1)) ||      (1L && (1 == 1))     )
N
N/**
N  \brief   Enable FIQ
N  \details Enables FIQ interrupts by clearing special-purpose register FAULTMASK.
N           Can only be executed in Privileged modes.
N */
N#define __enable_fault_irq                __enable_fiq
N
N
N/**
N  \brief   Disable FIQ
N  \details Disables FIQ interrupts by setting special-purpose register FAULTMASK.
N           Can only be executed in Privileged modes.
N */
N#define __disable_fault_irq               __disable_fiq
N
N
N/**
N  \brief   Get Base Priority
N  \details Returns the current value of the Base Priority register.
N  \return               Base Priority register value
N */
N__STATIC_INLINE uint32_t  __get_BASEPRI(void)
Xstatic __inline uint32_t  __get_BASEPRI(void)
N{
N  register uint32_t __regBasePri         __ASM("basepri");
X  register uint32_t __regBasePri         __asm("basepri");
N  return(__regBasePri);
N}
N
N
N/**
N  \brief   Set Base Priority
N  \details Assigns the given value to the Base Priority register.
N  \param [in]    basePri  Base Priority value to set
N */
N__STATIC_INLINE void __set_BASEPRI(uint32_t basePri)
Xstatic __inline void __set_BASEPRI(uint32_t basePri)
N{
N  register uint32_t __regBasePri         __ASM("basepri");
X  register uint32_t __regBasePri         __asm("basepri");
N  __regBasePri = (basePri & 0xFFU);
N}
N
N
N/**
N  \brief   Set Base Priority with condition
N  \details Assigns the given value to the Base Priority register only if BASEPRI masking is disabled,
N           or the new value increases the BASEPRI priority level.
N  \param [in]    basePri  Base Priority value to set
N */
N__STATIC_INLINE void __set_BASEPRI_MAX(uint32_t basePri)
Xstatic __inline void __set_BASEPRI_MAX(uint32_t basePri)
N{
N  register uint32_t __regBasePriMax      __ASM("basepri_max");
X  register uint32_t __regBasePriMax      __asm("basepri_max");
N  __regBasePriMax = (basePri & 0xFFU);
N}
N
N
N/**
N  \brief   Get Fault Mask
N  \details Returns the current value of the Fault Mask register.
N  \return               Fault Mask register value
N */
N__STATIC_INLINE uint32_t __get_FAULTMASK(void)
Xstatic __inline uint32_t __get_FAULTMASK(void)
N{
N  register uint32_t __regFaultMask       __ASM("faultmask");
X  register uint32_t __regFaultMask       __asm("faultmask");
N  return(__regFaultMask);
N}
N
N
N/**
N  \brief   Set Fault Mask
N  \details Assigns the given value to the Fault Mask register.
N  \param [in]    faultMask  Fault Mask value to set
N */
N__STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
Xstatic __inline void __set_FAULTMASK(uint32_t faultMask)
N{
N  register uint32_t __regFaultMask       __ASM("faultmask");
X  register uint32_t __regFaultMask       __asm("faultmask");
N  __regFaultMask = (faultMask & (uint32_t)1U);
N}
N
N#endif /* ((defined (__ARM_ARCH_7M__ ) && (__ARM_ARCH_7M__  == 1)) || \
N           (defined (__ARM_ARCH_7EM__) && (__ARM_ARCH_7EM__ == 1))     ) */
X#endif  
N
N
N/**
N  \brief   Get FPSCR
N  \details Returns the current value of the Floating Point Status/Control register.
N  \return               Floating Point Status/Control register value
N */
N__STATIC_INLINE uint32_t __get_FPSCR(void)
Xstatic __inline uint32_t __get_FPSCR(void)
N{
N#if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
N     (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
X#if ((0L && (__FPU_PRESENT == 1U)) &&      (0L && (__FPU_USED    == 1U))     )
S  register uint32_t __regfpscr         __ASM("fpscr");
S  return(__regfpscr);
N#else
N   return(0U);
N#endif
N}
N
N
N/**
N  \brief   Set FPSCR
N  \details Assigns the given value to the Floating Point Status/Control register.
N  \param [in]    fpscr  Floating Point Status/Control value to set
N */
N__STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
Xstatic __inline void __set_FPSCR(uint32_t fpscr)
N{
N#if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
N     (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
X#if ((0L && (__FPU_PRESENT == 1U)) &&      (0L && (__FPU_USED    == 1U))     )
S  register uint32_t __regfpscr         __ASM("fpscr");
S  __regfpscr = (fpscr);
N#else
N  (void)fpscr;
N#endif
N}
N
N
N/*@} end of CMSIS_Core_RegAccFunctions */
N
N
N/* ###################  Compiler specific Intrinsics  ########################### */
N/** \defgroup CMSIS_SIMD_intrinsics CMSIS SIMD Intrinsics
N  Access to dedicated SIMD instructions
N  @{
N*/
N
N#if ((defined (__ARM_ARCH_7EM__) && (__ARM_ARCH_7EM__ == 1))     )
X#if ((1L && (1 == 1))     )
N
N#define __SADD8                           __sadd8
N#define __QADD8                           __qadd8
N#define __SHADD8                          __shadd8
N#define __UADD8                           __uadd8
N#define __UQADD8                          __uqadd8
N#define __UHADD8                          __uhadd8
N#define __SSUB8                           __ssub8
N#define __QSUB8                           __qsub8
N#define __SHSUB8                          __shsub8
N#define __USUB8                           __usub8
N#define __UQSUB8                          __uqsub8
N#define __UHSUB8                          __uhsub8
N#define __SADD16                          __sadd16
N#define __QADD16                          __qadd16
N#define __SHADD16                         __shadd16
N#define __UADD16                          __uadd16
N#define __UQADD16                         __uqadd16
N#define __UHADD16                         __uhadd16
N#define __SSUB16                          __ssub16
N#define __QSUB16                          __qsub16
N#define __SHSUB16                         __shsub16
N#define __USUB16                          __usub16
N#define __UQSUB16                         __uqsub16
N#define __UHSUB16                         __uhsub16
N#define __SASX                            __sasx
N#define __QASX                            __qasx
N#define __SHASX                           __shasx
N#define __UASX                            __uasx
N#define __UQASX                           __uqasx
N#define __UHASX                           __uhasx
N#define __SSAX                            __ssax
N#define __QSAX                            __qsax
N#define __SHSAX                           __shsax
N#define __USAX                            __usax
N#define __UQSAX                           __uqsax
N#define __UHSAX                           __uhsax
N#define __USAD8                           __usad8
N#define __USADA8                          __usada8
N#define __SSAT16                          __ssat16
N#define __USAT16                          __usat16
N#define __UXTB16                          __uxtb16
N#define __UXTAB16                         __uxtab16
N#define __SXTB16                          __sxtb16
N#define __SXTAB16                         __sxtab16
N#define __SMUAD                           __smuad
N#define __SMUADX                          __smuadx
N#define __SMLAD                           __smlad
N#define __SMLADX                          __smladx
N#define __SMLALD                          __smlald
N#define __SMLALDX                         __smlaldx
N#define __SMUSD                           __smusd
N#define __SMUSDX                          __smusdx
N#define __SMLSD                           __smlsd
N#define __SMLSDX                          __smlsdx
N#define __SMLSLD                          __smlsld
N#define __SMLSLDX                         __smlsldx
N#define __SEL                             __sel
N#define __QADD                            __qadd
N#define __QSUB                            __qsub
N
N#define __PKHBT(ARG1,ARG2,ARG3)          ( ((((uint32_t)(ARG1))          ) & 0x0000FFFFUL) |  \
N                                           ((((uint32_t)(ARG2)) << (ARG3)) & 0xFFFF0000UL)  )
X#define __PKHBT(ARG1,ARG2,ARG3)          ( ((((uint32_t)(ARG1))          ) & 0x0000FFFFUL) |                                             ((((uint32_t)(ARG2)) << (ARG3)) & 0xFFFF0000UL)  )
N
N#define __PKHTB(ARG1,ARG2,ARG3)          ( ((((uint32_t)(ARG1))          ) & 0xFFFF0000UL) |  \
N                                           ((((uint32_t)(ARG2)) >> (ARG3)) & 0x0000FFFFUL)  )
X#define __PKHTB(ARG1,ARG2,ARG3)          ( ((((uint32_t)(ARG1))          ) & 0xFFFF0000UL) |                                             ((((uint32_t)(ARG2)) >> (ARG3)) & 0x0000FFFFUL)  )
N
N#define __SMMLA(ARG1,ARG2,ARG3)          ( (int32_t)((((int64_t)(ARG1) * (ARG2)) + \
N                                                      ((int64_t)(ARG3) << 32U)     ) >> 32U))
X#define __SMMLA(ARG1,ARG2,ARG3)          ( (int32_t)((((int64_t)(ARG1) * (ARG2)) +                                                       ((int64_t)(ARG3) << 32U)     ) >> 32U))
N
N#define __SXTB16_RORn(ARG1, ARG2)        __SXTB16(__ROR(ARG1, ARG2))
N
N#define __SXTAB16_RORn(ARG1, ARG2, ARG3) __SXTAB16(ARG1, __ROR(ARG2, ARG3))
N
N#endif /* ((defined (__ARM_ARCH_7EM__) && (__ARM_ARCH_7EM__ == 1))     ) */
N/*@} end of group CMSIS_SIMD_intrinsics */
N
N
N#endif /* __CMSIS_ARMCC_H */
L 35 "F:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include\cmsis_compiler.h" 2
N
N
N/*
N * Arm Compiler 6.6 LTM (armclang)
N */
N#elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050) && (__ARMCC_VERSION < 6100100)
X#elif 1L && (5060750 >= 6010050) && (5060750 < 6100100)
S  #include "cmsis_armclang_ltm.h"
S
S  /*
S * Arm Compiler above 6.10.1 (armclang)
S */
S#elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6100100)
S  #include "cmsis_armclang.h"
S
S
S/*
S * GNU Compiler
S */
S#elif defined ( __GNUC__ )
S  #include "cmsis_gcc.h"
S
S
S/*
S * IAR Compiler
S */
S#elif defined ( __ICCARM__ )
S  #include <cmsis_iccarm.h>
S
S
S/*
S * TI Arm Compiler
S */
S#elif defined ( __TI_ARM__ )
S  #include <cmsis_ccs.h>
S
S  #ifndef   __ASM
S    #define __ASM                                  __asm
S  #endif
S  #ifndef   __INLINE
S    #define __INLINE                               inline
S  #endif
S  #ifndef   __STATIC_INLINE
S    #define __STATIC_INLINE                        static inline
S  #endif
S  #ifndef   __STATIC_FORCEINLINE
S    #define __STATIC_FORCEINLINE                   __STATIC_INLINE
S  #endif
S  #ifndef   __NO_RETURN
S    #define __NO_RETURN                            __attribute__((noreturn))
S  #endif
S  #ifndef   __USED
S    #define __USED                                 __attribute__((used))
S  #endif
S  #ifndef   __WEAK
S    #define __WEAK                                 __attribute__((weak))
S  #endif
S  #ifndef   __PACKED
S    #define __PACKED                               __attribute__((packed))
S  #endif
S  #ifndef   __PACKED_STRUCT
S    #define __PACKED_STRUCT                        struct __attribute__((packed))
S  #endif
S  #ifndef   __PACKED_UNION
S    #define __PACKED_UNION                         union __attribute__((packed))
S  #endif
S  #ifndef   __UNALIGNED_UINT32        /* deprecated */
S    struct __attribute__((packed)) T_UINT32 { uint32_t v; };
S    #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
S  #endif
S  #ifndef   __UNALIGNED_UINT16_WRITE
S    __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
S    #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void*)(addr))->v) = (val))
S  #endif
S  #ifndef   __UNALIGNED_UINT16_READ
S    __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
S    #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(addr))->v)
S  #endif
S  #ifndef   __UNALIGNED_UINT32_WRITE
S    __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
S    #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))->v) = (val))
S  #endif
S  #ifndef   __UNALIGNED_UINT32_READ
S    __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
S    #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(addr))->v)
S  #endif
S  #ifndef   __ALIGNED
S    #define __ALIGNED(x)                           __attribute__((aligned(x)))
S  #endif
S  #ifndef   __RESTRICT
S    #define __RESTRICT                             __restrict
S  #endif
S  #ifndef   __COMPILER_BARRIER
S    #warning No compiler specific solution for __COMPILER_BARRIER. __COMPILER_BARRIER is ignored.
S    #define __COMPILER_BARRIER()                   (void)0
S  #endif
S
S
S/*
S * TASKING Compiler
S */
S#elif defined ( __TASKING__ )
S  /*
S   * The CMSIS functions have been implemented as intrinsics in the compiler.
S   * Please use "carm -?i" to get an up to date list of all intrinsics,
S   * Including the CMSIS ones.
S   */
S
S  #ifndef   __ASM
S    #define __ASM                                  __asm
S  #endif
S  #ifndef   __INLINE
S    #define __INLINE                               inline
S  #endif
S  #ifndef   __STATIC_INLINE
S    #define __STATIC_INLINE                        static inline
S  #endif
S  #ifndef   __STATIC_FORCEINLINE
S    #define __STATIC_FORCEINLINE                   __STATIC_INLINE
S  #endif
S  #ifndef   __NO_RETURN
S    #define __NO_RETURN                            __attribute__((noreturn))
S  #endif
S  #ifndef   __USED
S    #define __USED                                 __attribute__((used))
S  #endif
S  #ifndef   __WEAK
S    #define __WEAK                                 __attribute__((weak))
S  #endif
S  #ifndef   __PACKED
S    #define __PACKED                               __packed__
S  #endif
S  #ifndef   __PACKED_STRUCT
S    #define __PACKED_STRUCT                        struct __packed__
S  #endif
S  #ifndef   __PACKED_UNION
S    #define __PACKED_UNION                         union __packed__
S  #endif
S  #ifndef   __UNALIGNED_UINT32        /* deprecated */
S    struct __packed__ T_UINT32 { uint32_t v; };
S    #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
S  #endif
S  #ifndef   __UNALIGNED_UINT16_WRITE
S    __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
S    #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))->v) = (val))
S  #endif
S  #ifndef   __UNALIGNED_UINT16_READ
S    __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
S    #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(addr))->v)
S  #endif
S  #ifndef   __UNALIGNED_UINT32_WRITE
S    __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
S    #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))->v) = (val))
S  #endif
S  #ifndef   __UNALIGNED_UINT32_READ
S    __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
S    #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(addr))->v)
S  #endif
S  #ifndef   __ALIGNED
S    #define __ALIGNED(x)              __align(x)
S  #endif
S  #ifndef   __RESTRICT
S    #warning No compiler specific solution for __RESTRICT. __RESTRICT is ignored.
S    #define __RESTRICT
S  #endif
S  #ifndef   __COMPILER_BARRIER
S    #warning No compiler specific solution for __COMPILER_BARRIER. __COMPILER_BARRIER is ignored.
S    #define __COMPILER_BARRIER()                   (void)0
S  #endif
S
S
S/*
S * COSMIC Compiler
S */
S#elif defined ( __CSMC__ )
S   #include <cmsis_csm.h>
S
S #ifndef   __ASM
S    #define __ASM                                  _asm
S  #endif
S  #ifndef   __INLINE
S    #define __INLINE                               inline
S  #endif
S  #ifndef   __STATIC_INLINE
S    #define __STATIC_INLINE                        static inline
S  #endif
S  #ifndef   __STATIC_FORCEINLINE
S    #define __STATIC_FORCEINLINE                   __STATIC_INLINE
S  #endif
S  #ifndef   __NO_RETURN
S    // NO RETURN is automatically detected hence no warning here
S    #define __NO_RETURN
S  #endif
S  #ifndef   __USED
S    #warning No compiler specific solution for __USED. __USED is ignored.
S    #define __USED
S  #endif
S  #ifndef   __WEAK
S    #define __WEAK                                 __weak
S  #endif
S  #ifndef   __PACKED
S    #define __PACKED                               @packed
S  #endif
S  #ifndef   __PACKED_STRUCT
S    #define __PACKED_STRUCT                        @packed struct
S  #endif
S  #ifndef   __PACKED_UNION
S    #define __PACKED_UNION                         @packed union
S  #endif
S  #ifndef   __UNALIGNED_UINT32        /* deprecated */
S    @packed struct T_UINT32 { uint32_t v; };
S    #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
S  #endif
S  #ifndef   __UNALIGNED_UINT16_WRITE
S    __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
S    #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))->v) = (val))
S  #endif
S  #ifndef   __UNALIGNED_UINT16_READ
S    __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
S    #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(addr))->v)
S  #endif
S  #ifndef   __UNALIGNED_UINT32_WRITE
S    __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
S    #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))->v) = (val))
S  #endif
S  #ifndef   __UNALIGNED_UINT32_READ
S    __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
S    #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(addr))->v)
S  #endif
S  #ifndef   __ALIGNED
S    #warning No compiler specific solution for __ALIGNED. __ALIGNED is ignored.
S    #define __ALIGNED(x)
S  #endif
S  #ifndef   __RESTRICT
S    #warning No compiler specific solution for __RESTRICT. __RESTRICT is ignored.
S    #define __RESTRICT
S  #endif
S  #ifndef   __COMPILER_BARRIER
S    #warning No compiler specific solution for __COMPILER_BARRIER. __COMPILER_BARRIER is ignored.
S    #define __COMPILER_BARRIER()                   (void)0
S  #endif
S
S
S#else
S  #error Unknown compiler.
N#endif
N
N
N#endif /* __CMSIS_COMPILER_H */
N
L 28 "F:/Users/fu/AppData/Local/Arm/Packs/ARM/CMSIS/5.9.0/CMSIS/RTOS2/RTX/Source/rtx_evr.c" 2
N#include "rtx_evr.h"                    // RTX Event Recorder definitions
L 1 "F:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\RTOS2\RTX\Include\rtx_evr.h" 1
N/*
N * Copyright (c) 2013-2021 Arm Limited. All rights reserved.
N *
N * SPDX-License-Identifier: Apache-2.0
N *
N * Licensed under the Apache License, Version 2.0 (the License); you may
N * not use this file except in compliance with the License.
N * You may obtain a copy of the License at
N *
N * www.apache.org/licenses/LICENSE-2.0
N *
N * Unless required by applicable law or agreed to in writing, software
N * distributed under the License is distributed on an AS IS BASIS, WITHOUT
N * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
N * See the License for the specific language governing permissions and
N * limitations under the License.
N *
N * -----------------------------------------------------------------------------
N *
N * Project:     CMSIS-RTOS RTX
N * Title:       RTX Event Recorder definitions
N *
N * -----------------------------------------------------------------------------
N */
N
N#ifndef RTX_EVR_H_
N#define RTX_EVR_H_
N
N#include "rtx_os.h"                     // RTX OS definitions
L 1 "F:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\RTOS2\RTX\Include\rtx_os.h" 1
N/*
N * Copyright (c) 2013-2021 Arm Limited. All rights reserved.
N *
N * SPDX-License-Identifier: Apache-2.0
N *
N * Licensed under the Apache License, Version 2.0 (the License); you may
N * not use this file except in compliance with the License.
N * You may obtain a copy of the License at
N *
N * www.apache.org/licenses/LICENSE-2.0
N *
N * Unless required by applicable law or agreed to in writing, software
N * distributed under the License is distributed on an AS IS BASIS, WITHOUT
N * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
N * See the License for the specific language governing permissions and
N * limitations under the License.
N *
N * -----------------------------------------------------------------------------
N *
N * Project:     CMSIS-RTOS RTX
N * Title:       RTX OS definitions
N *
N * -----------------------------------------------------------------------------
N */
N 
N#ifndef RTX_OS_H_
N#define RTX_OS_H_
N 
N#include <stdint.h>
N#include <stddef.h>
L 1 "F:\Keil_v5\ARM\ARMCC\Bin\..\include\stddef.h" 1
N/* stddef.h: ANSI 'C' (X3J11 Oct 88) library header, section 4.1.4 */
N
N/* Copyright (C) ARM Ltd., 1999
N * All rights reserved
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: agrant $
N */
N
N/* Copyright (C) Codemist Ltd., 1988                            */
N/* Copyright 1991 ARM Limited. All rights reserved.             */
N/* version 0.05 */
N
N/*
N * The following types and macros are defined in several headers referred to in
N * the descriptions of the functions declared in that header. They are also
N * defined in this header file.
N */
N
N#ifndef __stddef_h
N#define __stddef_h
N#define __ARMCLIB_VERSION 5060037
N
N  #ifndef __STDDEF_DECLS
N  #define __STDDEF_DECLS
N    #undef __CLIBNS
N    #ifdef __cplusplus
S        namespace std {
S        #define __CLIBNS ::std::
S        extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N#if __sizeof_ptr == 8
X#if 4 == 8
S  typedef signed long ptrdiff_t;
N#else
N  typedef signed int ptrdiff_t;
N#endif
N
N#if defined(__cplusplus) || !defined(__STRICT_ANSI__)
X#if 0L || !0L
N /* unconditional in C++ and non-strict C for consistency of debug info */
N  #if __sizeof_ptr == 8
X  #if 4 == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
N  #else
N    typedef unsigned int size_t;   /* see <stddef.h> */
N  #endif
N#elif !defined(__size_t)
X#elif !0L
S  #define __size_t 1
S  #if __sizeof_ptr == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
S  #else
S    typedef unsigned int size_t;   /* see <stddef.h> */
S  #endif
S   /* the unsigned integral type of the result of the sizeof operator. */
N#endif
N
N#ifndef __cplusplus  /* wchar_t is a builtin type for C++ */
N  #if !defined(__STRICT_ANSI__)
X  #if !0L
N  /* unconditional in non-strict C for consistency of debug info */
N    #if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
X    #if 0L || (0L && __ARM_SIZEOF_WCHAR_T == 4)
S      typedef unsigned int wchar_t; /* also in <stdlib.h> and <inttypes.h> */
N    #else
N      typedef unsigned short wchar_t; /* also in <stdlib.h> and <inttypes.h> */
N    #endif
N  #elif !defined(__wchar_t)
X  #elif !0L
S    #define __wchar_t 1
S    #if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
S      typedef unsigned int wchar_t; /* also in <stdlib.h> and <inttypes.h> */
S    #else
S      typedef unsigned short wchar_t; /* also in <stdlib.h> and <inttypes.h> */
S    #endif
S   /*
S    * An integral type whose range of values can represent distinct codes for
S    * all members of the largest extended character set specified among the
S    * supported locales; the null character shall have the code value zero and
S    * each member of the basic character set shall have a code value when used
S    * as the lone character in an integer character constant.
S    */
N  #endif
N#endif
N
N#undef NULL  /* others (e.g. <stdio.h>) also define */
N#define NULL 0
N   /* null pointer constant. */
N
N#ifdef __clang__
S  #define offsetof(t, d) __builtin_offsetof(t, d)
N#else
N  /* EDG uses __INTADDR__ to avoid errors when strict */
N  #define offsetof(t, memb) ((__CLIBNS size_t)__INTADDR__(&(((t *)0)->memb)))
N#endif
N
N#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 201112L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X#if !0L || (1L && 201112L <= 199901L) || (0L && 201103L <= __cplusplus)
N  typedef long double max_align_t;
N#endif
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STDDEF_DECLS */
N
N
N  #ifdef __cplusplus
S    #ifndef __STDDEF_NO_EXPORTS
S      using ::std::size_t;
S      using ::std::ptrdiff_t;
S      #if !defined(__STRICT_ANSI__) || (defined(__cplusplus) && 201103L <= __cplusplus)
S        using ::std::max_align_t;
S      #endif
S    #endif 
N  #endif /* __cplusplus */
N
N#endif
N
N/* end of stddef.h */
N
L 31 "F:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\RTOS2\RTX\Include\rtx_os.h" 2
N#include "cmsis_os2.h"
L 1 "F:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\RTOS2\Include\cmsis_os2.h" 1
N/*
N * Copyright (c) 2013-2020 Arm Limited. All rights reserved.
N *
N * SPDX-License-Identifier: Apache-2.0
N *
N * Licensed under the Apache License, Version 2.0 (the License); you may
N * not use this file except in compliance with the License.
N * You may obtain a copy of the License at
N *
N * www.apache.org/licenses/LICENSE-2.0
N *
N * Unless required by applicable law or agreed to in writing, software
N * distributed under the License is distributed on an AS IS BASIS, WITHOUT
N * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
N * See the License for the specific language governing permissions and
N * limitations under the License.
N *
N * ----------------------------------------------------------------------
N *
N * $Date:        12. June 2020
N * $Revision:    V2.1.3
N *
N * Project:      CMSIS-RTOS2 API
N * Title:        cmsis_os2.h header file
N *
N * Version 2.1.3
N *    Additional functions allowed to be called from Interrupt Service Routines:
N *    - osThreadGetId
N * Version 2.1.2
N *    Additional functions allowed to be called from Interrupt Service Routines:
N *    - osKernelGetInfo, osKernelGetState
N * Version 2.1.1
N *    Additional functions allowed to be called from Interrupt Service Routines:
N *    - osKernelGetTickCount, osKernelGetTickFreq
N *    Changed Kernel Tick type to uint32_t:
N *    - updated: osKernelGetTickCount, osDelayUntil
N * Version 2.1.0
N *    Support for critical and uncritical sections (nesting safe):
N *    - updated: osKernelLock, osKernelUnlock
N *    - added: osKernelRestoreLock
N *    Updated Thread and Event Flags:
N *    - changed flags parameter and return type from int32_t to uint32_t
N * Version 2.0.0
N *    Initial Release
N *---------------------------------------------------------------------------*/
N 
N#ifndef CMSIS_OS2_H_
N#define CMSIS_OS2_H_
N 
N#ifndef __NO_RETURN
S#if   defined(__CC_ARM)
S#define __NO_RETURN __declspec(noreturn)
S#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
S#define __NO_RETURN __attribute__((__noreturn__))
S#elif defined(__GNUC__)
S#define __NO_RETURN __attribute__((__noreturn__))
S#elif defined(__ICCARM__)
S#define __NO_RETURN __noreturn
S#else
S#define __NO_RETURN
S#endif
N#endif
N 
N#include <stdint.h>
N#include <stddef.h>
N 
N#ifdef  __cplusplus
Sextern "C"
S{
N#endif
N 
N 
N//  ==== Enumerations, structures, defines ====
N 
N/// Version information.
Ntypedef struct {
N  uint32_t                       api;   ///< API version (major.minor.rev: mmnnnrrrr dec).
N  uint32_t                    kernel;   ///< Kernel version (major.minor.rev: mmnnnrrrr dec).
N} osVersion_t;
N 
N/// Kernel state.
Ntypedef enum {
N  osKernelInactive        =  0,         ///< Inactive.
N  osKernelReady           =  1,         ///< Ready.
N  osKernelRunning         =  2,         ///< Running.
N  osKernelLocked          =  3,         ///< Locked.
N  osKernelSuspended       =  4,         ///< Suspended.
N  osKernelError           = -1,         ///< Error.
N  osKernelReserved        = 0x7FFFFFFF  ///< Prevents enum down-size compiler optimization.
N} osKernelState_t;
N 
N/// Thread state.
Ntypedef enum {
N  osThreadInactive        =  0,         ///< Inactive.
N  osThreadReady           =  1,         ///< Ready.
N  osThreadRunning         =  2,         ///< Running.
N  osThreadBlocked         =  3,         ///< Blocked.
N  osThreadTerminated      =  4,         ///< Terminated.
N  osThreadError           = -1,         ///< Error.
N  osThreadReserved        = 0x7FFFFFFF  ///< Prevents enum down-size compiler optimization.
N} osThreadState_t;
N 
N/// Priority values.
Ntypedef enum {
N  osPriorityNone          =  0,         ///< No priority (not initialized).
N  osPriorityIdle          =  1,         ///< Reserved for Idle thread.
N  osPriorityLow           =  8,         ///< Priority: low
N  osPriorityLow1          =  8+1,       ///< Priority: low + 1
N  osPriorityLow2          =  8+2,       ///< Priority: low + 2
N  osPriorityLow3          =  8+3,       ///< Priority: low + 3
N  osPriorityLow4          =  8+4,       ///< Priority: low + 4
N  osPriorityLow5          =  8+5,       ///< Priority: low + 5
N  osPriorityLow6          =  8+6,       ///< Priority: low + 6
N  osPriorityLow7          =  8+7,       ///< Priority: low + 7
N  osPriorityBelowNormal   = 16,         ///< Priority: below normal
N  osPriorityBelowNormal1  = 16+1,       ///< Priority: below normal + 1
N  osPriorityBelowNormal2  = 16+2,       ///< Priority: below normal + 2
N  osPriorityBelowNormal3  = 16+3,       ///< Priority: below normal + 3
N  osPriorityBelowNormal4  = 16+4,       ///< Priority: below normal + 4
N  osPriorityBelowNormal5  = 16+5,       ///< Priority: below normal + 5
N  osPriorityBelowNormal6  = 16+6,       ///< Priority: below normal + 6
N  osPriorityBelowNormal7  = 16+7,       ///< Priority: below normal + 7
N  osPriorityNormal        = 24,         ///< Priority: normal
N  osPriorityNormal1       = 24+1,       ///< Priority: normal + 1
N  osPriorityNormal2       = 24+2,       ///< Priority: normal + 2
N  osPriorityNormal3       = 24+3,       ///< Priority: normal + 3
N  osPriorityNormal4       = 24+4,       ///< Priority: normal + 4
N  osPriorityNormal5       = 24+5,       ///< Priority: normal + 5
N  osPriorityNormal6       = 24+6,       ///< Priority: normal + 6
N  osPriorityNormal7       = 24+7,       ///< Priority: normal + 7
N  osPriorityAboveNormal   = 32,         ///< Priority: above normal
N  osPriorityAboveNormal1  = 32+1,       ///< Priority: above normal + 1
N  osPriorityAboveNormal2  = 32+2,       ///< Priority: above normal + 2
N  osPriorityAboveNormal3  = 32+3,       ///< Priority: above normal + 3
N  osPriorityAboveNormal4  = 32+4,       ///< Priority: above normal + 4
N  osPriorityAboveNormal5  = 32+5,       ///< Priority: above normal + 5
N  osPriorityAboveNormal6  = 32+6,       ///< Priority: above normal + 6
N  osPriorityAboveNormal7  = 32+7,       ///< Priority: above normal + 7
N  osPriorityHigh          = 40,         ///< Priority: high
N  osPriorityHigh1         = 40+1,       ///< Priority: high + 1
N  osPriorityHigh2         = 40+2,       ///< Priority: high + 2
N  osPriorityHigh3         = 40+3,       ///< Priority: high + 3
N  osPriorityHigh4         = 40+4,       ///< Priority: high + 4
N  osPriorityHigh5         = 40+5,       ///< Priority: high + 5
N  osPriorityHigh6         = 40+6,       ///< Priority: high + 6
N  osPriorityHigh7         = 40+7,       ///< Priority: high + 7
N  osPriorityRealtime      = 48,         ///< Priority: realtime
N  osPriorityRealtime1     = 48+1,       ///< Priority: realtime + 1
N  osPriorityRealtime2     = 48+2,       ///< Priority: realtime + 2
N  osPriorityRealtime3     = 48+3,       ///< Priority: realtime + 3
N  osPriorityRealtime4     = 48+4,       ///< Priority: realtime + 4
N  osPriorityRealtime5     = 48+5,       ///< Priority: realtime + 5
N  osPriorityRealtime6     = 48+6,       ///< Priority: realtime + 6
N  osPriorityRealtime7     = 48+7,       ///< Priority: realtime + 7
N  osPriorityISR           = 56,         ///< Reserved for ISR deferred thread.
N  osPriorityError         = -1,         ///< System cannot determine priority or illegal priority.
N  osPriorityReserved      = 0x7FFFFFFF  ///< Prevents enum down-size compiler optimization.
N} osPriority_t;
N 
N/// Entry point of a thread.
Ntypedef void (*osThreadFunc_t) (void *argument);
N 
N/// Timer callback function.
Ntypedef void (*osTimerFunc_t) (void *argument);
N 
N/// Timer type.
Ntypedef enum {
N  osTimerOnce               = 0,          ///< One-shot timer.
N  osTimerPeriodic           = 1           ///< Repeating timer.
N} osTimerType_t;
N 
N// Timeout value.
N#define osWaitForever         0xFFFFFFFFU ///< Wait forever timeout value.
N 
N// Flags options (\ref osThreadFlagsWait and \ref osEventFlagsWait).
N#define osFlagsWaitAny        0x00000000U ///< Wait for any flag (default).
N#define osFlagsWaitAll        0x00000001U ///< Wait for all flags.
N#define osFlagsNoClear        0x00000002U ///< Do not clear flags which have been specified to wait for.
N 
N// Flags errors (returned by osThreadFlagsXxxx and osEventFlagsXxxx).
N#define osFlagsError          0x80000000U ///< Error indicator.
N#define osFlagsErrorUnknown   0xFFFFFFFFU ///< osError (-1).
N#define osFlagsErrorTimeout   0xFFFFFFFEU ///< osErrorTimeout (-2).
N#define osFlagsErrorResource  0xFFFFFFFDU ///< osErrorResource (-3).
N#define osFlagsErrorParameter 0xFFFFFFFCU ///< osErrorParameter (-4).
N#define osFlagsErrorISR       0xFFFFFFFAU ///< osErrorISR (-6).
N 
N// Thread attributes (attr_bits in \ref osThreadAttr_t).
N#define osThreadDetached      0x00000000U ///< Thread created in detached mode (default)
N#define osThreadJoinable      0x00000001U ///< Thread created in joinable mode
N 
N// Mutex attributes (attr_bits in \ref osMutexAttr_t).
N#define osMutexRecursive      0x00000001U ///< Recursive mutex.
N#define osMutexPrioInherit    0x00000002U ///< Priority inherit protocol.
N#define osMutexRobust         0x00000008U ///< Robust mutex.
N 
N/// Status code values returned by CMSIS-RTOS functions.
Ntypedef enum {
N  osOK                      =  0,         ///< Operation completed successfully.
N  osError                   = -1,         ///< Unspecified RTOS error: run-time error but no other error message fits.
N  osErrorTimeout            = -2,         ///< Operation not completed within the timeout period.
N  osErrorResource           = -3,         ///< Resource not available.
N  osErrorParameter          = -4,         ///< Parameter error.
N  osErrorNoMemory           = -5,         ///< System is out of memory: it was impossible to allocate or reserve memory for the operation.
N  osErrorISR                = -6,         ///< Not allowed in ISR context: the function cannot be called from interrupt service routines.
N  osStatusReserved          = 0x7FFFFFFF  ///< Prevents enum down-size compiler optimization.
N} osStatus_t;
N 
N 
N/// \details Thread ID identifies the thread.
Ntypedef void *osThreadId_t;
N 
N/// \details Timer ID identifies the timer.
Ntypedef void *osTimerId_t;
N 
N/// \details Event Flags ID identifies the event flags.
Ntypedef void *osEventFlagsId_t;
N 
N/// \details Mutex ID identifies the mutex.
Ntypedef void *osMutexId_t;
N 
N/// \details Semaphore ID identifies the semaphore.
Ntypedef void *osSemaphoreId_t;
N 
N/// \details Memory Pool ID identifies the memory pool.
Ntypedef void *osMemoryPoolId_t;
N 
N/// \details Message Queue ID identifies the message queue.
Ntypedef void *osMessageQueueId_t;
N 
N 
N#ifndef TZ_MODULEID_T
N#define TZ_MODULEID_T
N/// \details Data type that identifies secure software modules called by a process.
Ntypedef uint32_t TZ_ModuleId_t;
N#endif
N 
N 
N/// Attributes structure for thread.
Ntypedef struct {
N  const char                   *name;   ///< name of the thread
N  uint32_t                 attr_bits;   ///< attribute bits
N  void                      *cb_mem;    ///< memory for control block
N  uint32_t                   cb_size;   ///< size of provided memory for control block
N  void                   *stack_mem;    ///< memory for stack
N  uint32_t                stack_size;   ///< size of stack
N  osPriority_t              priority;   ///< initial thread priority (default: osPriorityNormal)
N  TZ_ModuleId_t            tz_module;   ///< TrustZone module identifier
N  uint32_t                  reserved;   ///< reserved (must be 0)
N} osThreadAttr_t;
N 
N/// Attributes structure for timer.
Ntypedef struct {
N  const char                   *name;   ///< name of the timer
N  uint32_t                 attr_bits;   ///< attribute bits
N  void                      *cb_mem;    ///< memory for control block
N  uint32_t                   cb_size;   ///< size of provided memory for control block
N} osTimerAttr_t;
N 
N/// Attributes structure for event flags.
Ntypedef struct {
N  const char                   *name;   ///< name of the event flags
N  uint32_t                 attr_bits;   ///< attribute bits
N  void                      *cb_mem;    ///< memory for control block
N  uint32_t                   cb_size;   ///< size of provided memory for control block
N} osEventFlagsAttr_t;
N 
N/// Attributes structure for mutex.
Ntypedef struct {
N  const char                   *name;   ///< name of the mutex
N  uint32_t                 attr_bits;   ///< attribute bits
N  void                      *cb_mem;    ///< memory for control block
N  uint32_t                   cb_size;   ///< size of provided memory for control block
N} osMutexAttr_t;
N 
N/// Attributes structure for semaphore.
Ntypedef struct {
N  const char                   *name;   ///< name of the semaphore
N  uint32_t                 attr_bits;   ///< attribute bits
N  void                      *cb_mem;    ///< memory for control block
N  uint32_t                   cb_size;   ///< size of provided memory for control block
N} osSemaphoreAttr_t;
N 
N/// Attributes structure for memory pool.
Ntypedef struct {
N  const char                   *name;   ///< name of the memory pool
N  uint32_t                 attr_bits;   ///< attribute bits
N  void                      *cb_mem;    ///< memory for control block
N  uint32_t                   cb_size;   ///< size of provided memory for control block
N  void                      *mp_mem;    ///< memory for data storage
N  uint32_t                   mp_size;   ///< size of provided memory for data storage 
N} osMemoryPoolAttr_t;
N 
N/// Attributes structure for message queue.
Ntypedef struct {
N  const char                   *name;   ///< name of the message queue
N  uint32_t                 attr_bits;   ///< attribute bits
N  void                      *cb_mem;    ///< memory for control block
N  uint32_t                   cb_size;   ///< size of provided memory for control block
N  void                      *mq_mem;    ///< memory for data storage
N  uint32_t                   mq_size;   ///< size of provided memory for data storage 
N} osMessageQueueAttr_t;
N 
N 
N//  ==== Kernel Management Functions ====
N 
N/// Initialize the RTOS Kernel.
N/// \return status code that indicates the execution status of the function.
NosStatus_t osKernelInitialize (void);
N 
N///  Get RTOS Kernel Information.
N/// \param[out]    version       pointer to buffer for retrieving version information.
N/// \param[out]    id_buf        pointer to buffer for retrieving kernel identification string.
N/// \param[in]     id_size       size of buffer for kernel identification string.
N/// \return status code that indicates the execution status of the function.
NosStatus_t osKernelGetInfo (osVersion_t *version, char *id_buf, uint32_t id_size);
N 
N/// Get the current RTOS Kernel state.
N/// \return current RTOS Kernel state.
NosKernelState_t osKernelGetState (void);
N 
N/// Start the RTOS Kernel scheduler.
N/// \return status code that indicates the execution status of the function.
NosStatus_t osKernelStart (void);
N 
N/// Lock the RTOS Kernel scheduler.
N/// \return previous lock state (1 - locked, 0 - not locked, error code if negative).
Nint32_t osKernelLock (void);
N 
N/// Unlock the RTOS Kernel scheduler.
N/// \return previous lock state (1 - locked, 0 - not locked, error code if negative).
Nint32_t osKernelUnlock (void);
N 
N/// Restore the RTOS Kernel scheduler lock state.
N/// \param[in]     lock          lock state obtained by \ref osKernelLock or \ref osKernelUnlock.
N/// \return new lock state (1 - locked, 0 - not locked, error code if negative).
Nint32_t osKernelRestoreLock (int32_t lock);
N 
N/// Suspend the RTOS Kernel scheduler.
N/// \return time in ticks, for how long the system can sleep or power-down.
Nuint32_t osKernelSuspend (void);
N 
N/// Resume the RTOS Kernel scheduler.
N/// \param[in]     sleep_ticks   time in ticks for how long the system was in sleep or power-down mode.
Nvoid osKernelResume (uint32_t sleep_ticks);
N 
N/// Get the RTOS kernel tick count.
N/// \return RTOS kernel current tick count.
Nuint32_t osKernelGetTickCount (void);
N 
N/// Get the RTOS kernel tick frequency.
N/// \return frequency of the kernel tick in hertz, i.e. kernel ticks per second.
Nuint32_t osKernelGetTickFreq (void);
N 
N/// Get the RTOS kernel system timer count.
N/// \return RTOS kernel current system timer count as 32-bit value.
Nuint32_t osKernelGetSysTimerCount (void);
N 
N/// Get the RTOS kernel system timer frequency.
N/// \return frequency of the system timer in hertz, i.e. timer ticks per second.
Nuint32_t osKernelGetSysTimerFreq (void);
N 
N 
N//  ==== Thread Management Functions ====
N 
N/// Create a thread and add it to Active Threads.
N/// \param[in]     func          thread function.
N/// \param[in]     argument      pointer that is passed to the thread function as start argument.
N/// \param[in]     attr          thread attributes; NULL: default values.
N/// \return thread ID for reference by other functions or NULL in case of error.
NosThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr);
N 
N/// Get name of a thread.
N/// \param[in]     thread_id     thread ID obtained by \ref osThreadNew or \ref osThreadGetId.
N/// \return name as null-terminated string.
Nconst char *osThreadGetName (osThreadId_t thread_id);
N 
N/// Return the thread ID of the current running thread.
N/// \return thread ID for reference by other functions or NULL in case of error.
NosThreadId_t osThreadGetId (void);
N 
N/// Get current thread state of a thread.
N/// \param[in]     thread_id     thread ID obtained by \ref osThreadNew or \ref osThreadGetId.
N/// \return current thread state of the specified thread.
NosThreadState_t osThreadGetState (osThreadId_t thread_id);
N 
N/// Get stack size of a thread.
N/// \param[in]     thread_id     thread ID obtained by \ref osThreadNew or \ref osThreadGetId.
N/// \return stack size in bytes.
Nuint32_t osThreadGetStackSize (osThreadId_t thread_id);
N 
N/// Get available stack space of a thread based on stack watermark recording during execution.
N/// \param[in]     thread_id     thread ID obtained by \ref osThreadNew or \ref osThreadGetId.
N/// \return remaining stack space in bytes.
Nuint32_t osThreadGetStackSpace (osThreadId_t thread_id);
N 
N/// Change priority of a thread.
N/// \param[in]     thread_id     thread ID obtained by \ref osThreadNew or \ref osThreadGetId.
N/// \param[in]     priority      new priority value for the thread function.
N/// \return status code that indicates the execution status of the function.
NosStatus_t osThreadSetPriority (osThreadId_t thread_id, osPriority_t priority);
N 
N/// Get current priority of a thread.
N/// \param[in]     thread_id     thread ID obtained by \ref osThreadNew or \ref osThreadGetId.
N/// \return current priority value of the specified thread.
NosPriority_t osThreadGetPriority (osThreadId_t thread_id);
N 
N/// Pass control to next thread that is in state \b READY.
N/// \return status code that indicates the execution status of the function.
NosStatus_t osThreadYield (void);
N 
N/// Suspend execution of a thread.
N/// \param[in]     thread_id     thread ID obtained by \ref osThreadNew or \ref osThreadGetId.
N/// \return status code that indicates the execution status of the function.
NosStatus_t osThreadSuspend (osThreadId_t thread_id);
N 
N/// Resume execution of a thread.
N/// \param[in]     thread_id     thread ID obtained by \ref osThreadNew or \ref osThreadGetId.
N/// \return status code that indicates the execution status of the function.
NosStatus_t osThreadResume (osThreadId_t thread_id);
N 
N/// Detach a thread (thread storage can be reclaimed when thread terminates).
N/// \param[in]     thread_id     thread ID obtained by \ref osThreadNew or \ref osThreadGetId.
N/// \return status code that indicates the execution status of the function.
NosStatus_t osThreadDetach (osThreadId_t thread_id);
N 
N/// Wait for specified thread to terminate.
N/// \param[in]     thread_id     thread ID obtained by \ref osThreadNew or \ref osThreadGetId.
N/// \return status code that indicates the execution status of the function.
NosStatus_t osThreadJoin (osThreadId_t thread_id);
N 
N/// Terminate execution of current running thread.
N__NO_RETURN void osThreadExit (void);
X__declspec(noreturn) void osThreadExit (void);
N 
N/// Terminate execution of a thread.
N/// \param[in]     thread_id     thread ID obtained by \ref osThreadNew or \ref osThreadGetId.
N/// \return status code that indicates the execution status of the function.
NosStatus_t osThreadTerminate (osThreadId_t thread_id);
N 
N/// Get number of active threads.
N/// \return number of active threads.
Nuint32_t osThreadGetCount (void);
N 
N/// Enumerate active threads.
N/// \param[out]    thread_array  pointer to array for retrieving thread IDs.
N/// \param[in]     array_items   maximum number of items in array for retrieving thread IDs.
N/// \return number of enumerated threads.
Nuint32_t osThreadEnumerate (osThreadId_t *thread_array, uint32_t array_items);
N 
N 
N//  ==== Thread Flags Functions ====
N 
N/// Set the specified Thread Flags of a thread.
N/// \param[in]     thread_id     thread ID obtained by \ref osThreadNew or \ref osThreadGetId.
N/// \param[in]     flags         specifies the flags of the thread that shall be set.
N/// \return thread flags after setting or error code if highest bit set.
Nuint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags);
N 
N/// Clear the specified Thread Flags of current running thread.
N/// \param[in]     flags         specifies the flags of the thread that shall be cleared.
N/// \return thread flags before clearing or error code if highest bit set.
Nuint32_t osThreadFlagsClear (uint32_t flags);
N 
N/// Get the current Thread Flags of current running thread.
N/// \return current thread flags.
Nuint32_t osThreadFlagsGet (void);
N 
N/// Wait for one or more Thread Flags of the current running thread to become signaled.
N/// \param[in]     flags         specifies the flags to wait for.
N/// \param[in]     options       specifies flags options (osFlagsXxxx).
N/// \param[in]     timeout       \ref CMSIS_RTOS_TimeOutValue or 0 in case of no time-out.
N/// \return thread flags before clearing or error code if highest bit set.
Nuint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout);
N 
N 
N//  ==== Generic Wait Functions ====
N 
N/// Wait for Timeout (Time Delay).
N/// \param[in]     ticks         \ref CMSIS_RTOS_TimeOutValue "time ticks" value
N/// \return status code that indicates the execution status of the function.
NosStatus_t osDelay (uint32_t ticks);
N 
N/// Wait until specified time.
N/// \param[in]     ticks         absolute time in ticks
N/// \return status code that indicates the execution status of the function.
NosStatus_t osDelayUntil (uint32_t ticks);
N 
N 
N//  ==== Timer Management Functions ====
N 
N/// Create and Initialize a timer.
N/// \param[in]     func          function pointer to callback function.
N/// \param[in]     type          \ref osTimerOnce for one-shot or \ref osTimerPeriodic for periodic behavior.
N/// \param[in]     argument      argument to the timer callback function.
N/// \param[in]     attr          timer attributes; NULL: default values.
N/// \return timer ID for reference by other functions or NULL in case of error.
NosTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr);
N 
N/// Get name of a timer.
N/// \param[in]     timer_id      timer ID obtained by \ref osTimerNew.
N/// \return name as null-terminated string.
Nconst char *osTimerGetName (osTimerId_t timer_id);
N 
N/// Start or restart a timer.
N/// \param[in]     timer_id      timer ID obtained by \ref osTimerNew.
N/// \param[in]     ticks         \ref CMSIS_RTOS_TimeOutValue "time ticks" value of the timer.
N/// \return status code that indicates the execution status of the function.
NosStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks);
N 
N/// Stop a timer.
N/// \param[in]     timer_id      timer ID obtained by \ref osTimerNew.
N/// \return status code that indicates the execution status of the function.
NosStatus_t osTimerStop (osTimerId_t timer_id);
N 
N/// Check if a timer is running.
N/// \param[in]     timer_id      timer ID obtained by \ref osTimerNew.
N/// \return 0 not running, 1 running.
Nuint32_t osTimerIsRunning (osTimerId_t timer_id);
N 
N/// Delete a timer.
N/// \param[in]     timer_id      timer ID obtained by \ref osTimerNew.
N/// \return status code that indicates the execution status of the function.
NosStatus_t osTimerDelete (osTimerId_t timer_id);
N 
N 
N//  ==== Event Flags Management Functions ====
N 
N/// Create and Initialize an Event Flags object.
N/// \param[in]     attr          event flags attributes; NULL: default values.
N/// \return event flags ID for reference by other functions or NULL in case of error.
NosEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr);
N 
N/// Get name of an Event Flags object.
N/// \param[in]     ef_id         event flags ID obtained by \ref osEventFlagsNew.
N/// \return name as null-terminated string.
Nconst char *osEventFlagsGetName (osEventFlagsId_t ef_id);
N 
N/// Set the specified Event Flags.
N/// \param[in]     ef_id         event flags ID obtained by \ref osEventFlagsNew.
N/// \param[in]     flags         specifies the flags that shall be set.
N/// \return event flags after setting or error code if highest bit set.
Nuint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags);
N 
N/// Clear the specified Event Flags.
N/// \param[in]     ef_id         event flags ID obtained by \ref osEventFlagsNew.
N/// \param[in]     flags         specifies the flags that shall be cleared.
N/// \return event flags before clearing or error code if highest bit set.
Nuint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags);
N 
N/// Get the current Event Flags.
N/// \param[in]     ef_id         event flags ID obtained by \ref osEventFlagsNew.
N/// \return current event flags.
Nuint32_t osEventFlagsGet (osEventFlagsId_t ef_id);
N 
N/// Wait for one or more Event Flags to become signaled.
N/// \param[in]     ef_id         event flags ID obtained by \ref osEventFlagsNew.
N/// \param[in]     flags         specifies the flags to wait for.
N/// \param[in]     options       specifies flags options (osFlagsXxxx).
N/// \param[in]     timeout       \ref CMSIS_RTOS_TimeOutValue or 0 in case of no time-out.
N/// \return event flags before clearing or error code if highest bit set.
Nuint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout);
N 
N/// Delete an Event Flags object.
N/// \param[in]     ef_id         event flags ID obtained by \ref osEventFlagsNew.
N/// \return status code that indicates the execution status of the function.
NosStatus_t osEventFlagsDelete (osEventFlagsId_t ef_id);
N 
N 
N//  ==== Mutex Management Functions ====
N 
N/// Create and Initialize a Mutex object.
N/// \param[in]     attr          mutex attributes; NULL: default values.
N/// \return mutex ID for reference by other functions or NULL in case of error.
NosMutexId_t osMutexNew (const osMutexAttr_t *attr);
N 
N/// Get name of a Mutex object.
N/// \param[in]     mutex_id      mutex ID obtained by \ref osMutexNew.
N/// \return name as null-terminated string.
Nconst char *osMutexGetName (osMutexId_t mutex_id);
N 
N/// Acquire a Mutex or timeout if it is locked.
N/// \param[in]     mutex_id      mutex ID obtained by \ref osMutexNew.
N/// \param[in]     timeout       \ref CMSIS_RTOS_TimeOutValue or 0 in case of no time-out.
N/// \return status code that indicates the execution status of the function.
NosStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout);
N 
N/// Release a Mutex that was acquired by \ref osMutexAcquire.
N/// \param[in]     mutex_id      mutex ID obtained by \ref osMutexNew.
N/// \return status code that indicates the execution status of the function.
NosStatus_t osMutexRelease (osMutexId_t mutex_id);
N 
N/// Get Thread which owns a Mutex object.
N/// \param[in]     mutex_id      mutex ID obtained by \ref osMutexNew.
N/// \return thread ID of owner thread or NULL when mutex was not acquired.
NosThreadId_t osMutexGetOwner (osMutexId_t mutex_id);
N 
N/// Delete a Mutex object.
N/// \param[in]     mutex_id      mutex ID obtained by \ref osMutexNew.
N/// \return status code that indicates the execution status of the function.
NosStatus_t osMutexDelete (osMutexId_t mutex_id);
N 
N 
N//  ==== Semaphore Management Functions ====
N 
N/// Create and Initialize a Semaphore object.
N/// \param[in]     max_count     maximum number of available tokens.
N/// \param[in]     initial_count initial number of available tokens.
N/// \param[in]     attr          semaphore attributes; NULL: default values.
N/// \return semaphore ID for reference by other functions or NULL in case of error.
NosSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr);
N 
N/// Get name of a Semaphore object.
N/// \param[in]     semaphore_id  semaphore ID obtained by \ref osSemaphoreNew.
N/// \return name as null-terminated string.
Nconst char *osSemaphoreGetName (osSemaphoreId_t semaphore_id);
N 
N/// Acquire a Semaphore token or timeout if no tokens are available.
N/// \param[in]     semaphore_id  semaphore ID obtained by \ref osSemaphoreNew.
N/// \param[in]     timeout       \ref CMSIS_RTOS_TimeOutValue or 0 in case of no time-out.
N/// \return status code that indicates the execution status of the function.
NosStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout);
N 
N/// Release a Semaphore token up to the initial maximum count.
N/// \param[in]     semaphore_id  semaphore ID obtained by \ref osSemaphoreNew.
N/// \return status code that indicates the execution status of the function.
NosStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id);
N 
N/// Get current Semaphore token count.
N/// \param[in]     semaphore_id  semaphore ID obtained by \ref osSemaphoreNew.
N/// \return number of tokens available.
Nuint32_t osSemaphoreGetCount (osSemaphoreId_t semaphore_id);
N 
N/// Delete a Semaphore object.
N/// \param[in]     semaphore_id  semaphore ID obtained by \ref osSemaphoreNew.
N/// \return status code that indicates the execution status of the function.
NosStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id);
N 
N 
N//  ==== Memory Pool Management Functions ====
N 
N/// Create and Initialize a Memory Pool object.
N/// \param[in]     block_count   maximum number of memory blocks in memory pool.
N/// \param[in]     block_size    memory block size in bytes.
N/// \param[in]     attr          memory pool attributes; NULL: default values.
N/// \return memory pool ID for reference by other functions or NULL in case of error.
NosMemoryPoolId_t osMemoryPoolNew (uint32_t block_count, uint32_t block_size, const osMemoryPoolAttr_t *attr);
N 
N/// Get name of a Memory Pool object.
N/// \param[in]     mp_id         memory pool ID obtained by \ref osMemoryPoolNew.
N/// \return name as null-terminated string.
Nconst char *osMemoryPoolGetName (osMemoryPoolId_t mp_id);
N 
N/// Allocate a memory block from a Memory Pool.
N/// \param[in]     mp_id         memory pool ID obtained by \ref osMemoryPoolNew.
N/// \param[in]     timeout       \ref CMSIS_RTOS_TimeOutValue or 0 in case of no time-out.
N/// \return address of the allocated memory block or NULL in case of no memory is available.
Nvoid *osMemoryPoolAlloc (osMemoryPoolId_t mp_id, uint32_t timeout);
N 
N/// Return an allocated memory block back to a Memory Pool.
N/// \param[in]     mp_id         memory pool ID obtained by \ref osMemoryPoolNew.
N/// \param[in]     block         address of the allocated memory block to be returned to the memory pool.
N/// \return status code that indicates the execution status of the function.
NosStatus_t osMemoryPoolFree (osMemoryPoolId_t mp_id, void *block);
N 
N/// Get maximum number of memory blocks in a Memory Pool.
N/// \param[in]     mp_id         memory pool ID obtained by \ref osMemoryPoolNew.
N/// \return maximum number of memory blocks.
Nuint32_t osMemoryPoolGetCapacity (osMemoryPoolId_t mp_id);
N 
N/// Get memory block size in a Memory Pool.
N/// \param[in]     mp_id         memory pool ID obtained by \ref osMemoryPoolNew.
N/// \return memory block size in bytes.
Nuint32_t osMemoryPoolGetBlockSize (osMemoryPoolId_t mp_id);
N 
N/// Get number of memory blocks used in a Memory Pool.
N/// \param[in]     mp_id         memory pool ID obtained by \ref osMemoryPoolNew.
N/// \return number of memory blocks used.
Nuint32_t osMemoryPoolGetCount (osMemoryPoolId_t mp_id);
N 
N/// Get number of memory blocks available in a Memory Pool.
N/// \param[in]     mp_id         memory pool ID obtained by \ref osMemoryPoolNew.
N/// \return number of memory blocks available.
Nuint32_t osMemoryPoolGetSpace (osMemoryPoolId_t mp_id);
N 
N/// Delete a Memory Pool object.
N/// \param[in]     mp_id         memory pool ID obtained by \ref osMemoryPoolNew.
N/// \return status code that indicates the execution status of the function.
NosStatus_t osMemoryPoolDelete (osMemoryPoolId_t mp_id);
N 
N 
N//  ==== Message Queue Management Functions ====
N 
N/// Create and Initialize a Message Queue object.
N/// \param[in]     msg_count     maximum number of messages in queue.
N/// \param[in]     msg_size      maximum message size in bytes.
N/// \param[in]     attr          message queue attributes; NULL: default values.
N/// \return message queue ID for reference by other functions or NULL in case of error.
NosMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr);
N 
N/// Get name of a Message Queue object.
N/// \param[in]     mq_id         message queue ID obtained by \ref osMessageQueueNew.
N/// \return name as null-terminated string.
Nconst char *osMessageQueueGetName (osMessageQueueId_t mq_id);
N 
N/// Put a Message into a Queue or timeout if Queue is full.
N/// \param[in]     mq_id         message queue ID obtained by \ref osMessageQueueNew.
N/// \param[in]     msg_ptr       pointer to buffer with message to put into a queue.
N/// \param[in]     msg_prio      message priority.
N/// \param[in]     timeout       \ref CMSIS_RTOS_TimeOutValue or 0 in case of no time-out.
N/// \return status code that indicates the execution status of the function.
NosStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout);
N 
N/// Get a Message from a Queue or timeout if Queue is empty.
N/// \param[in]     mq_id         message queue ID obtained by \ref osMessageQueueNew.
N/// \param[out]    msg_ptr       pointer to buffer for message to get from a queue.
N/// \param[out]    msg_prio      pointer to buffer for message priority or NULL.
N/// \param[in]     timeout       \ref CMSIS_RTOS_TimeOutValue or 0 in case of no time-out.
N/// \return status code that indicates the execution status of the function.
NosStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout);
N 
N/// Get maximum number of messages in a Message Queue.
N/// \param[in]     mq_id         message queue ID obtained by \ref osMessageQueueNew.
N/// \return maximum number of messages.
Nuint32_t osMessageQueueGetCapacity (osMessageQueueId_t mq_id);
N 
N/// Get maximum message size in a Message Queue.
N/// \param[in]     mq_id         message queue ID obtained by \ref osMessageQueueNew.
N/// \return maximum message size in bytes.
Nuint32_t osMessageQueueGetMsgSize (osMessageQueueId_t mq_id);
N 
N/// Get number of queued messages in a Message Queue.
N/// \param[in]     mq_id         message queue ID obtained by \ref osMessageQueueNew.
N/// \return number of queued messages.
Nuint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id);
N 
N/// Get number of available slots for messages in a Message Queue.
N/// \param[in]     mq_id         message queue ID obtained by \ref osMessageQueueNew.
N/// \return number of available slots for messages.
Nuint32_t osMessageQueueGetSpace (osMessageQueueId_t mq_id);
N 
N/// Reset a Message Queue to initial empty state.
N/// \param[in]     mq_id         message queue ID obtained by \ref osMessageQueueNew.
N/// \return status code that indicates the execution status of the function.
NosStatus_t osMessageQueueReset (osMessageQueueId_t mq_id);
N 
N/// Delete a Message Queue object.
N/// \param[in]     mq_id         message queue ID obtained by \ref osMessageQueueNew.
N/// \return status code that indicates the execution status of the function.
NosStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id);
N 
N 
N#ifdef  __cplusplus
S}
N#endif
N 
N#endif  // CMSIS_OS2_H_
L 32 "F:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\RTOS2\RTX\Include\rtx_os.h" 2
N#include "rtx_def.h"
L 1 "F:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\RTOS2\RTX\Include\rtx_def.h" 1
N/*
N * Copyright (c) 2021 Arm Limited. All rights reserved.
N *
N * SPDX-License-Identifier: Apache-2.0
N *
N * Licensed under the Apache License, Version 2.0 (the License); you may
N * not use this file except in compliance with the License.
N * You may obtain a copy of the License at
N *
N * www.apache.org/licenses/LICENSE-2.0
N *
N * Unless required by applicable law or agreed to in writing, software
N * distributed under the License is distributed on an AS IS BASIS, WITHOUT
N * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
N * See the License for the specific language governing permissions and
N * limitations under the License.
N *
N * -----------------------------------------------------------------------------
N *
N * Project:     CMSIS-RTOS RTX
N * Title:       RTX derived definitions
N *
N * -----------------------------------------------------------------------------
N */
N
N#ifndef RTX_DEF_H_
N#define RTX_DEF_H_
N
N#ifdef   _RTE_
N#include "RTE_Components.h"
L 1 ".\RTE\_Target-scpu\RTE_Components.h" 1
N
N/*
N * Auto generated Run-Time-Environment Configuration File
N *      *** Do not modify ! ***
N *
N * Project: 'scpu' 
N * Target:  'Target-scpu' 
N */
N
N#ifndef RTE_COMPONENTS_H
N#define RTE_COMPONENTS_H
N
N
N/*
N * Define the Device Header File: 
N */
N#define CMSIS_device_header "ARMCM4_FP.h"
N
N/* ARM::CMSIS:RTOS2:Keil RTX5:Source:5.5.4 */
N#define RTE_CMSIS_RTOS2                 /* CMSIS-RTOS2 */
N        #define RTE_CMSIS_RTOS2_RTX5            /* CMSIS-RTOS2 Keil RTX5 */
N        #define RTE_CMSIS_RTOS2_RTX5_SOURCE     /* CMSIS-RTOS2 Keil RTX5 Source */
N
N
N#endif /* RTE_COMPONENTS_H */
L 31 "F:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\RTOS2\RTX\Include\rtx_def.h" 2
N#endif
N#include "RTX_Config.h"
L 1 ".\RTE\CMSIS\RTX_Config.h" 1
N/*
N * Copyright (c) 2013-2018 Arm Limited. All rights reserved.
N *
N * SPDX-License-Identifier: Apache-2.0
N *
N * Licensed under the Apache License, Version 2.0 (the License); you may
N * not use this file except in compliance with the License.
N * You may obtain a copy of the License at
N *
N * www.apache.org/licenses/LICENSE-2.0
N *
N * Unless required by applicable law or agreed to in writing, software
N * distributed under the License is distributed on an AS IS BASIS, WITHOUT
N * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
N * See the License for the specific language governing permissions and
N * limitations under the License.
N *
N * -----------------------------------------------------------------------------
N *
N * $Revision:   V5.4.0
N *
N * Project:     CMSIS-RTOS RTX
N * Title:       RTX Configuration definitions
N *
N * -----------------------------------------------------------------------------
N */
N 
N#ifndef RTX_CONFIG_H_
N#define RTX_CONFIG_H_
N 
N#ifdef   _RTE_
N#include "RTE_Components.h"
N#ifdef    RTE_RTX_CONFIG_H
S#include  RTE_RTX_CONFIG_H
N#endif
N#endif
N 
N//-------- <<< Use Configuration Wizard in Context Menu >>> --------------------
N 
N// <h>System Configuration
N// =======================
N 
N//   <o>Global Dynamic Memory size [bytes] <0-1073741824:8>
N//   <i> Defines the combined global dynamic memory size.
N//   <i> Default: 4096
N#ifndef OS_DYNAMIC_MEM_SIZE
N#define OS_DYNAMIC_MEM_SIZE         4096
N#endif
N 
N//   <o>Kernel Tick Frequency [Hz] <1-1000000>
N//   <i> Defines base time unit for delays and timeouts.
N//   <i> Default: 1000 (1ms tick)
N#ifndef OS_TICK_FREQ
N#define OS_TICK_FREQ                1000
N#endif
N 
N//   <e>Round-Robin Thread switching
N//   <i> Enables Round-Robin Thread switching.
N#ifndef OS_ROBIN_ENABLE
N#define OS_ROBIN_ENABLE             1
N#endif
N 
N//     <o>Round-Robin Timeout <1-1000>
N//     <i> Defines how many ticks a thread will execute before a thread switch.
N//     <i> Default: 5
N#ifndef OS_ROBIN_TIMEOUT
N#define OS_ROBIN_TIMEOUT            5
N#endif
N 
N//   </e>
N 
N//   <o>ISR FIFO Queue 
N//      <4=>  4 entries    <8=>   8 entries   <12=>  12 entries   <16=>  16 entries
N//     <24=> 24 entries   <32=>  32 entries   <48=>  48 entries   <64=>  64 entries
N//     <96=> 96 entries  <128=> 128 entries  <196=> 196 entries  <256=> 256 entries
N//   <i> RTOS Functions called from ISR store requests to this buffer.
N//   <i> Default: 16 entries
N#ifndef OS_ISR_FIFO_QUEUE
N#define OS_ISR_FIFO_QUEUE           16
N#endif
N 
N//   <q>Object Memory usage counters
N//   <i> Enables object memory usage counters (requires RTX source variant).
N#ifndef OS_OBJ_MEM_USAGE
N#define OS_OBJ_MEM_USAGE            1
N#endif
N 
N// </h>
N 
N// <h>Thread Configuration
N// =======================
N 
N//   <e>Object specific Memory allocation
N//   <i> Enables object specific memory allocation.
N#ifndef OS_THREAD_OBJ_MEM
N#define OS_THREAD_OBJ_MEM           1
N#endif
N 
N//     <o>Number of user Threads <1-1000>
N//     <i> Defines maximum number of user threads that can be active at the same time.
N//     <i> Applies to user threads with system provided memory for control blocks.
N#ifndef OS_THREAD_NUM
N#define OS_THREAD_NUM               16
N#endif
N 
N//     <o>Number of user Threads with default Stack size <0-1000>
N//     <i> Defines maximum number of user threads with default stack size.
N//     <i> Applies to user threads with zero stack size specified.
N#ifndef OS_THREAD_DEF_STACK_NUM
N#define OS_THREAD_DEF_STACK_NUM     0
N#endif
N 
N//     <o>Total Stack size [bytes] for user Threads with user-provided Stack size <0-1073741824:8>
N//     <i> Defines the combined stack size for user threads with user-provided stack size.
N//     <i> Applies to user threads with user-provided stack size and system provided memory for stack.
N//     <i> Default: 0
N#ifndef OS_THREAD_USER_STACK_SIZE
N#define OS_THREAD_USER_STACK_SIZE   15360
N#endif
N 
N//   </e>
N 
N//   <o>Default Thread Stack size [bytes] <96-1073741824:8>
N//   <i> Defines stack size for threads with zero stack size specified.
N//   <i> Default: 256
N#ifndef OS_STACK_SIZE
N#define OS_STACK_SIZE               256
N#endif
N 
N//   <o>Idle Thread Stack size [bytes] <72-1073741824:8>
N//   <i> Defines stack size for Idle thread.
N//   <i> Default: 256
N#ifndef OS_IDLE_THREAD_STACK_SIZE
N#define OS_IDLE_THREAD_STACK_SIZE   256
N#endif
N 
N//   <o>Idle Thread TrustZone Module Identifier
N//   <i> Defines TrustZone Thread Context Management Identifier.
N//   <i> Applies only to cores with TrustZone technology.
N//   <i> Default: 0 (not used)
N#ifndef OS_IDLE_THREAD_TZ_MOD_ID
N#define OS_IDLE_THREAD_TZ_MOD_ID    0
N#endif
N 
N//   <q>Stack overrun checking
N//   <i> Enables stack overrun check at thread switch.
N//   <i> Enabling this option increases slightly the execution time of a thread switch.
N#ifndef OS_STACK_CHECK
N#define OS_STACK_CHECK              1
N#endif
N 
N//   <q>Stack usage watermark
N//   <i> Initializes thread stack with watermark pattern for analyzing stack usage.
N//   <i> Enabling this option increases significantly the execution time of thread creation.
N#ifndef OS_STACK_WATERMARK
N#define OS_STACK_WATERMARK          0
N#endif
N 
N//   <o>Processor mode for Thread execution 
N//     <0=> Unprivileged mode 
N//     <1=> Privileged mode
N//   <i> Default: Privileged mode
N#ifndef OS_PRIVILEGE_MODE
N#define OS_PRIVILEGE_MODE           1
N#endif
N 
N// </h>
N 
N// <h>Timer Configuration
N// ======================
N 
N//   <e>Object specific Memory allocation
N//   <i> Enables object specific memory allocation.
N#ifndef OS_TIMER_OBJ_MEM
N#define OS_TIMER_OBJ_MEM            0
N#endif
N 
N//     <o>Number of Timer objects <1-1000>
N//     <i> Defines maximum number of objects that can be active at the same time.
N//     <i> Applies to objects with system provided memory for control blocks.
N#ifndef OS_TIMER_NUM
N#define OS_TIMER_NUM                1
N#endif
N 
N//   </e>
N 
N//   <o>Timer Thread Priority
N//      <8=> Low
N//     <16=> Below Normal  <24=> Normal  <32=> Above Normal
N//     <40=> High
N//     <48=> Realtime
N//   <i> Defines priority for timer thread
N//   <i> Default: High
N#ifndef OS_TIMER_THREAD_PRIO
N#define OS_TIMER_THREAD_PRIO        24
N#endif
N 
N//   <o>Timer Thread Stack size [bytes] <0-1073741824:8>
N//   <i> Defines stack size for Timer thread.
N//   <i> May be set to 0 when timers are not used.
N//   <i> Default: 256
N#ifndef OS_TIMER_THREAD_STACK_SIZE
N#define OS_TIMER_THREAD_STACK_SIZE  1024
N#endif
N 
N//   <o>Timer Thread TrustZone Module Identifier
N//   <i> Defines TrustZone Thread Context Management Identifier.
N//   <i> Applies only to cores with TrustZone technology.
N//   <i> Default: 0 (not used)
N#ifndef OS_TIMER_THREAD_TZ_MOD_ID
N#define OS_TIMER_THREAD_TZ_MOD_ID   0
N#endif
N 
N//   <o>Timer Callback Queue entries <0-256>
N//   <i> Number of concurrent active timer callback functions.
N//   <i> May be set to 0 when timers are not used.
N//   <i> Default: 4
N#ifndef OS_TIMER_CB_QUEUE
N#define OS_TIMER_CB_QUEUE           4
N#endif
N 
N// </h>
N 
N// <h>Event Flags Configuration
N// ============================
N 
N//   <e>Object specific Memory allocation
N//   <i> Enables object specific memory allocation.
N#ifndef OS_EVFLAGS_OBJ_MEM
N#define OS_EVFLAGS_OBJ_MEM          0
N#endif
N 
N//     <o>Number of Event Flags objects <1-1000>
N//     <i> Defines maximum number of objects that can be active at the same time.
N//     <i> Applies to objects with system provided memory for control blocks.
N#ifndef OS_EVFLAGS_NUM
N#define OS_EVFLAGS_NUM              1
N#endif
N 
N//   </e>
N 
N// </h>
N 
N// <h>Mutex Configuration
N// ======================
N 
N//   <e>Object specific Memory allocation
N//   <i> Enables object specific memory allocation.
N#ifndef OS_MUTEX_OBJ_MEM
N#define OS_MUTEX_OBJ_MEM            0
N#endif
N 
N//     <o>Number of Mutex objects <1-1000>
N//     <i> Defines maximum number of objects that can be active at the same time.
N//     <i> Applies to objects with system provided memory for control blocks.
N#ifndef OS_MUTEX_NUM
N#define OS_MUTEX_NUM                1
N#endif
N 
N//   </e>
N 
N// </h>
N 
N// <h>Semaphore Configuration
N// ==========================
N 
N//   <e>Object specific Memory allocation
N//   <i> Enables object specific memory allocation.
N#ifndef OS_SEMAPHORE_OBJ_MEM
N#define OS_SEMAPHORE_OBJ_MEM        0
N#endif
N 
N//     <o>Number of Semaphore objects <1-1000>
N//     <i> Defines maximum number of objects that can be active at the same time.
N//     <i> Applies to objects with system provided memory for control blocks.
N#ifndef OS_SEMAPHORE_NUM
N#define OS_SEMAPHORE_NUM            1
N#endif
N 
N//   </e>
N 
N// </h>
N 
N// <h>Memory Pool Configuration
N// ============================
N 
N//   <e>Object specific Memory allocation
N//   <i> Enables object specific memory allocation.
N#ifndef OS_MEMPOOL_OBJ_MEM
N#define OS_MEMPOOL_OBJ_MEM          0
N#endif
N 
N//     <o>Number of Memory Pool objects <1-1000>
N//     <i> Defines maximum number of objects that can be active at the same time.
N//     <i> Applies to objects with system provided memory for control blocks.
N#ifndef OS_MEMPOOL_NUM
N#define OS_MEMPOOL_NUM              1
N#endif
N 
N//     <o>Data Storage Memory size [bytes] <0-1073741824:8>
N//     <i> Defines the combined data storage memory size.
N//     <i> Applies to objects with system provided memory for data storage.
N//     <i> Default: 0
N#ifndef OS_MEMPOOL_DATA_SIZE
N#define OS_MEMPOOL_DATA_SIZE        0
N#endif
N 
N//   </e>
N 
N// </h>
N 
N// <h>Message Queue Configuration
N// ==============================
N 
N//   <e>Object specific Memory allocation
N//   <i> Enables object specific memory allocation.
N#ifndef OS_MSGQUEUE_OBJ_MEM
N#define OS_MSGQUEUE_OBJ_MEM         0
N#endif
N 
N//     <o>Number of Message Queue objects <1-1000>
N//     <i> Defines maximum number of objects that can be active at the same time.
N//     <i> Applies to objects with system provided memory for control blocks.
N#ifndef OS_MSGQUEUE_NUM
N#define OS_MSGQUEUE_NUM             1
N#endif
N 
N//     <o>Data Storage Memory size [bytes] <0-1073741824:8>
N//     <i> Defines the combined data storage memory size.
N//     <i> Applies to objects with system provided memory for data storage.
N//     <i> Default: 0
N#ifndef OS_MSGQUEUE_DATA_SIZE
N#define OS_MSGQUEUE_DATA_SIZE       0
N#endif
N 
N//   </e>
N 
N// </h>
N 
N// <h>Event Recorder Configuration
N// ===============================
N 
N//   <e>Global Initialization
N//   <i> Initialize Event Recorder during 'osKernelInitialize'.
N#ifndef OS_EVR_INIT
N#define OS_EVR_INIT                 0
N#endif
N 
N//     <q>Start recording
N//     <i> Start event recording after initialization.
N#ifndef OS_EVR_START
N#define OS_EVR_START                1
N#endif
N 
N//     <h>Global Event Filter Setup
N//     <i> Initial event filter settings applied to all components.
N//       <o.0>Error events
N//       <o.1>API function call events
N//       <o.2>Operation events
N//       <o.3>Detailed operation events
N//     </h>
N#ifndef OS_EVR_LEVEL
N#define OS_EVR_LEVEL                0x00U
N#endif
N 
N//     <h>RTOS Event Filter Setup
N//     <i> Event filter settings for RTX components.
N//     <i> Only applicable if events for the respective component are generated.
N 
N//       <e.7>Memory Management
N//       <i> Filter enable settings for Memory Management events.
N//         <o.0>Error events
N//         <o.1>API function call events
N//         <o.2>Operation events
N//         <o.3>Detailed operation events
N//       </e>
N#ifndef OS_EVR_MEMORY_FILTER
N#define OS_EVR_MEMORY_FILTER        0x81U
N#endif
N 
N//       <e.7>Kernel
N//       <i> Filter enable settings for Kernel events.
N//         <o.0>Error events
N//         <o.1>API function call events
N//         <o.2>Operation events
N//         <o.3>Detailed operation events
N//       </e>
N#ifndef OS_EVR_KERNEL_FILTER
N#define OS_EVR_KERNEL_FILTER        0x81U
N#endif
N 
N//       <e.7>Thread
N//       <i> Filter enable settings for Thread events.
N//         <o.0>Error events
N//         <o.1>API function call events
N//         <o.2>Operation events
N//         <o.3>Detailed operation events
N//       </e>
N#ifndef OS_EVR_THREAD_FILTER
N#define OS_EVR_THREAD_FILTER        0x85U
N#endif
N 
N//       <e.7>Timer
N//       <i> Filter enable settings for Timer events.
N//         <o.0>Error events
N//         <o.1>API function call events
N//         <o.2>Operation events
N//         <o.3>Detailed operation events
N//       </e>
N#ifndef OS_EVR_TIMER_FILTER
N#define OS_EVR_TIMER_FILTER         0x81U
N#endif
N 
N//       <e.7>Event Flags
N//       <i> Filter enable settings for Event Flags events.
N//         <o.0>Error events
N//         <o.1>API function call events
N//         <o.2>Operation events
N//         <o.3>Detailed operation events
N//       </e>
N#ifndef OS_EVR_EVFLAGS_FILTER
N#define OS_EVR_EVFLAGS_FILTER       0x81U
N#endif
N 
N//       <e.7>Mutex
N//       <i> Filter enable settings for Mutex events.
N//         <o.0>Error events
N//         <o.1>API function call events
N//         <o.2>Operation events
N//         <o.3>Detailed operation events
N//       </e>
N#ifndef OS_EVR_MUTEX_FILTER
N#define OS_EVR_MUTEX_FILTER         0x81U
N#endif
N 
N//       <e.7>Semaphore
N//       <i> Filter enable settings for Semaphore events.
N//         <o.0>Error events
N//         <o.1>API function call events
N//         <o.2>Operation events
N//         <o.3>Detailed operation events
N//       </e>
N#ifndef OS_EVR_SEMAPHORE_FILTER
N#define OS_EVR_SEMAPHORE_FILTER     0x81U
N#endif
N 
N//       <e.7>Memory Pool
N//       <i> Filter enable settings for Memory Pool events.
N//         <o.0>Error events
N//         <o.1>API function call events
N//         <o.2>Operation events
N//         <o.3>Detailed operation events
N//       </e>
N#ifndef OS_EVR_MEMPOOL_FILTER
N#define OS_EVR_MEMPOOL_FILTER       0x81U
N#endif
N 
N//       <e.7>Message Queue
N//       <i> Filter enable settings for Message Queue events.
N//         <o.0>Error events
N//         <o.1>API function call events
N//         <o.2>Operation events
N//         <o.3>Detailed operation events
N//       </e>
N#ifndef OS_EVR_MSGQUEUE_FILTER
N#define OS_EVR_MSGQUEUE_FILTER      0x81U
N#endif
N 
N//     </h>
N 
N//   </e>
N 
N//   <h>RTOS Event Generation
N//   <i> Enables event generation for RTX components (requires RTX source variant).
N 
N//     <q>Memory Management
N//     <i> Enables Memory Management event generation.
N#ifndef OS_EVR_MEMORY
N#define OS_EVR_MEMORY               1
N#endif
N 
N//     <q>Kernel
N//     <i> Enables Kernel event generation.
N#ifndef OS_EVR_KERNEL
N#define OS_EVR_KERNEL               1
N#endif
N 
N//     <q>Thread
N//     <i> Enables Thread event generation.
N#ifndef OS_EVR_THREAD
N#define OS_EVR_THREAD               1
N#endif
N 
N//     <q>Timer
N//     <i> Enables Timer event generation.
N#ifndef OS_EVR_TIMER
N#define OS_EVR_TIMER                1
N#endif
N 
N//     <q>Event Flags
N//     <i> Enables Event Flags event generation.
N#ifndef OS_EVR_EVFLAGS
N#define OS_EVR_EVFLAGS              1
N#endif
N  
N//     <q>Mutex
N//     <i> Enables Mutex event generation.
N#ifndef OS_EVR_MUTEX
N#define OS_EVR_MUTEX                1
N#endif
N 
N//     <q>Semaphore
N//     <i> Enables Semaphore event generation.
N#ifndef OS_EVR_SEMAPHORE
N#define OS_EVR_SEMAPHORE            1
N#endif
N 
N//     <q>Memory Pool
N//     <i> Enables Memory Pool event generation.
N#ifndef OS_EVR_MEMPOOL
N#define OS_EVR_MEMPOOL              1
N#endif
N 
N//     <q>Message Queue
N//     <i> Enables Message Queue event generation.
N#ifndef OS_EVR_MSGQUEUE
N#define OS_EVR_MSGQUEUE             1
N#endif
N 
N//   </h>
N 
N// </h>
N 
N// Number of Threads which use standard C/C++ library libspace
N// (when thread specific memory allocation is not used).
N#if (OS_THREAD_OBJ_MEM == 0)
X#if (1 == 0)
S#define OS_THREAD_LIBSPACE_NUM      4
N#else
N#define OS_THREAD_LIBSPACE_NUM      OS_THREAD_NUM
N#endif
N 
N//------------- <<< end of configuration section >>> ---------------------------
N 
N#endif  // RTX_CONFIG_H_
L 33 "F:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\RTOS2\RTX\Include\rtx_def.h" 2
N
N#if (defined(OS_OBJ_MEM_USAGE) && (OS_OBJ_MEM_USAGE != 0))
X#if (1L && (1 != 0))
N  #define RTX_OBJ_MEM_USAGE
N#endif
N
N#if (defined(OS_STACK_CHECK) && (OS_STACK_CHECK != 0))
X#if (1L && (1 != 0))
N  #define RTX_STACK_CHECK
N#endif
N
N#ifdef  RTE_CMSIS_RTOS2_RTX5_ARMV8M_NS
S  #define DOMAIN_NS             1
N#endif
N
N#endif  // RTX_DEF_H_
L 33 "F:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\RTOS2\RTX\Include\rtx_os.h" 2
N 
N#ifdef  __cplusplus
Sextern "C"
S{
N#endif
N 
N 
N/// Kernel Information
N#define osRtxVersionAPI      20010003   ///< API version (2.1.3)
N#define osRtxVersionKernel   50050004   ///< Kernel version (5.5.4)
N#define osRtxKernelId     "RTX V5.5.4"  ///< Kernel identification string
N 
N 
N//  ==== Common definitions ====
N 
N/// Object Identifier definitions
N#define osRtxIdInvalid          0x00U
N#define osRtxIdThread           0xF1U
N#define osRtxIdTimer            0xF2U
N#define osRtxIdEventFlags       0xF3U
N#define osRtxIdMutex            0xF5U
N#define osRtxIdSemaphore        0xF6U
N#define osRtxIdMemoryPool       0xF7U
N#define osRtxIdMessage          0xF9U
N#define osRtxIdMessageQueue     0xFAU
N 
N/// Object Flags definitions
N#define osRtxFlagSystemObject   0x01U
N#define osRtxFlagSystemMemory   0x02U
N 
N 
N//  ==== Kernel definitions ====
N 
N/// Kernel State definitions
N#define osRtxKernelInactive             ((uint8_t)osKernelInactive)
N#define osRtxKernelReady                ((uint8_t)osKernelReady)
N#define osRtxKernelRunning              ((uint8_t)osKernelRunning)
N#define osRtxKernelLocked               ((uint8_t)osKernelLocked)
N#define osRtxKernelSuspended            ((uint8_t)osKernelSuspended)
N 
N 
N//  ==== Thread definitions ====
N 
N/// Thread State definitions (extending osThreadState)
N#define osRtxThreadStateMask            0x0FU
N 
N#define osRtxThreadInactive             ((uint8_t)osThreadInactive)
N#define osRtxThreadReady                ((uint8_t)osThreadReady)
N#define osRtxThreadRunning              ((uint8_t)osThreadRunning)
N#define osRtxThreadBlocked              ((uint8_t)osThreadBlocked)
N#define osRtxThreadTerminated           ((uint8_t)osThreadTerminated)
N 
N#define osRtxThreadWaitingDelay         ((uint8_t)(osRtxThreadBlocked | 0x10U))
N#define osRtxThreadWaitingJoin          ((uint8_t)(osRtxThreadBlocked | 0x20U))
N#define osRtxThreadWaitingThreadFlags   ((uint8_t)(osRtxThreadBlocked | 0x30U))
N#define osRtxThreadWaitingEventFlags    ((uint8_t)(osRtxThreadBlocked | 0x40U))
N#define osRtxThreadWaitingMutex         ((uint8_t)(osRtxThreadBlocked | 0x50U))
N#define osRtxThreadWaitingSemaphore     ((uint8_t)(osRtxThreadBlocked | 0x60U))
N#define osRtxThreadWaitingMemoryPool    ((uint8_t)(osRtxThreadBlocked | 0x70U))
N#define osRtxThreadWaitingMessageGet    ((uint8_t)(osRtxThreadBlocked | 0x80U))
N#define osRtxThreadWaitingMessagePut    ((uint8_t)(osRtxThreadBlocked | 0x90U))
N 
N/// Thread Flags definitions
N#define osRtxThreadFlagDefStack 0x10U   ///< Default Stack flag
N 
N/// Stack Marker definitions
N#define osRtxStackMagicWord     0xE25A2EA5U ///< Stack Magic Word (Stack Base)
N#define osRtxStackFillPattern   0xCCCCCCCCU ///< Stack Fill Pattern 
N 
N/// Thread Control Block
Ntypedef struct osRtxThread_s {
N  uint8_t                          id;  ///< Object Identifier
N  uint8_t                       state;  ///< Object State
N  uint8_t                       flags;  ///< Object Flags
N  uint8_t                        attr;  ///< Object Attributes
N  const char                    *name;  ///< Object Name
N  struct osRtxThread_s   *thread_next;  ///< Link pointer to next Thread in Object list
N  struct osRtxThread_s   *thread_prev;  ///< Link pointer to previous Thread in Object list
N  struct osRtxThread_s    *delay_next;  ///< Link pointer to next Thread in Delay list
N  struct osRtxThread_s    *delay_prev;  ///< Link pointer to previous Thread in Delay list
N  struct osRtxThread_s   *thread_join;  ///< Thread waiting to Join
N  uint32_t                      delay;  ///< Delay Time/Round Robin Time Tick
N  int8_t                     priority;  ///< Thread Priority
N  int8_t                priority_base;  ///< Base Priority
N  uint8_t                 stack_frame;  ///< Stack Frame (EXC_RETURN[7..0])
N  uint8_t               flags_options;  ///< Thread/Event Flags Options
N  uint32_t                 wait_flags;  ///< Waiting Thread/Event Flags
N  uint32_t               thread_flags;  ///< Thread Flags
N  struct osRtxMutex_s     *mutex_list;  ///< Link pointer to list of owned Mutexes
N  void                     *stack_mem;  ///< Stack Memory
N  uint32_t                 stack_size;  ///< Stack Size
N  uint32_t                         sp;  ///< Current Stack Pointer
N  uint32_t                thread_addr;  ///< Thread entry address
N  uint32_t                  tz_memory;  ///< TrustZone Memory Identifier
N#ifdef RTX_TF_M_EXTENSION
S  uint32_t                  tz_module;  ///< TrustZone Module Identifier
N#endif
N} osRtxThread_t;
N 
N 
N//  ==== Timer definitions ====
N 
N/// Timer State definitions
N#define osRtxTimerInactive      0x00U   ///< Timer Inactive
N#define osRtxTimerStopped       0x01U   ///< Timer Stopped
N#define osRtxTimerRunning       0x02U   ///< Timer Running
N 
N/// Timer Type definitions
N#define osRtxTimerPeriodic      ((uint8_t)osTimerPeriodic)
N 
N/// Timer Function Information
Ntypedef struct {
N  osTimerFunc_t                  func;  ///< Function Pointer
N  void                           *arg;  ///< Function Argument
N} osRtxTimerFinfo_t;
N 
N/// Timer Control Block
Ntypedef struct osRtxTimer_s {
N  uint8_t                          id;  ///< Object Identifier
N  uint8_t                       state;  ///< Object State
N  uint8_t                       flags;  ///< Object Flags
N  uint8_t                        type;  ///< Timer Type (Periodic/One-shot)
N  const char                    *name;  ///< Object Name
N  struct osRtxTimer_s           *prev;  ///< Pointer to previous active Timer
N  struct osRtxTimer_s           *next;  ///< Pointer to next active Timer
N  uint32_t                       tick;  ///< Timer current Tick
N  uint32_t                       load;  ///< Timer Load value
N  osRtxTimerFinfo_t             finfo;  ///< Timer Function Info
N} osRtxTimer_t;
N 
N 
N//  ==== Event Flags definitions ====
N 
N/// Event Flags Control Block
Ntypedef struct {
N  uint8_t                          id;  ///< Object Identifier
N  uint8_t              reserved_state;  ///< Object State (not used)
N  uint8_t                       flags;  ///< Object Flags
N  uint8_t                    reserved;
N  const char                    *name;  ///< Object Name
N  osRtxThread_t          *thread_list;  ///< Waiting Threads List
N  uint32_t                event_flags;  ///< Event Flags
N} osRtxEventFlags_t;
N 
N 
N//  ==== Mutex definitions ====
N 
N/// Mutex Control Block
Ntypedef struct osRtxMutex_s {
N  uint8_t                          id;  ///< Object Identifier
N  uint8_t              reserved_state;  ///< Object State (not used)
N  uint8_t                       flags;  ///< Object Flags
N  uint8_t                        attr;  ///< Object Attributes
N  const char                    *name;  ///< Object Name
N  osRtxThread_t          *thread_list;  ///< Waiting Threads List
N  osRtxThread_t         *owner_thread;  ///< Owner Thread
N  struct osRtxMutex_s     *owner_prev;  ///< Pointer to previous owned Mutex
N  struct osRtxMutex_s     *owner_next;  ///< Pointer to next owned Mutex
N  uint8_t                        lock;  ///< Lock counter
N  uint8_t                  padding[3];
N} osRtxMutex_t;
N 
N 
N//  ==== Semaphore definitions ====
N 
N/// Semaphore Control Block
Ntypedef struct {
N  uint8_t                          id;  ///< Object Identifier
N  uint8_t              reserved_state;  ///< Object State (not used)
N  uint8_t                       flags;  ///< Object Flags
N  uint8_t                    reserved;
N  const char                    *name;  ///< Object Name
N  osRtxThread_t          *thread_list;  ///< Waiting Threads List
N  uint16_t                     tokens;  ///< Current number of tokens
N  uint16_t                 max_tokens;  ///< Maximum number of tokens
N} osRtxSemaphore_t;
N 
N 
N//  ==== Memory Pool definitions ====
N 
N/// Memory Pool Information
Ntypedef struct {
N  uint32_t                 max_blocks;  ///< Maximum number of Blocks
N  uint32_t                used_blocks;  ///< Number of used Blocks
N  uint32_t                 block_size;  ///< Block Size
N  void                    *block_base;  ///< Block Memory Base Address
N  void                     *block_lim;  ///< Block Memory Limit Address
N  void                    *block_free;  ///< First free Block Address
N} osRtxMpInfo_t;
N 
N/// Memory Pool Control Block
Ntypedef struct {
N  uint8_t                          id;  ///< Object Identifier
N  uint8_t              reserved_state;  ///< Object State (not used)
N  uint8_t                       flags;  ///< Object Flags
N  uint8_t                    reserved;
N  const char                    *name;  ///< Object Name
N  osRtxThread_t          *thread_list;  ///< Waiting Threads List
N  osRtxMpInfo_t               mp_info;  ///< Memory Pool Info
N} osRtxMemoryPool_t;
N 
N 
N//  ==== Message Queue definitions ====
N 
N/// Message Control Block
Ntypedef struct osRtxMessage_s {
N  uint8_t                          id;  ///< Object Identifier
N  uint8_t              reserved_state;  ///< Object State (not used)
N  uint8_t                       flags;  ///< Object Flags
N  uint8_t                    priority;  ///< Message Priority
N  struct osRtxMessage_s         *prev;  ///< Pointer to previous Message
N  struct osRtxMessage_s         *next;  ///< Pointer to next Message
N} osRtxMessage_t;
N 
N/// Message Queue Control Block
Ntypedef struct {
N  uint8_t                          id;  ///< Object Identifier
N  uint8_t              reserved_state;  ///< Object State (not used)
N  uint8_t                       flags;  ///< Object Flags
N  uint8_t                    reserved;
N  const char                    *name;  ///< Object Name
N  osRtxThread_t          *thread_list;  ///< Waiting Threads List
N  osRtxMpInfo_t               mp_info;  ///< Memory Pool Info
N  uint32_t                   msg_size;  ///< Message Size
N  uint32_t                  msg_count;  ///< Number of queued Messages
N  osRtxMessage_t           *msg_first;  ///< Pointer to first Message
N  osRtxMessage_t            *msg_last;  ///< Pointer to last Message
N} osRtxMessageQueue_t;
N 
N 
N//  ==== Generic Object definitions ====
N 
N/// Generic Object Control Block
Ntypedef struct {
N  uint8_t                          id;  ///< Object Identifier
N  uint8_t                       state;  ///< Object State
N  uint8_t                       flags;  ///< Object Flags
N  uint8_t                    reserved;
N  const char                    *name;  ///< Object Name
N  osRtxThread_t          *thread_list;  ///< Threads List
N} osRtxObject_t;
N 
N 
N//  ==== OS Runtime Information definitions ====
N 
N/// OS Runtime Information structure
Ntypedef struct {
N  const char                   *os_id;  ///< OS Identification
N  uint32_t                    version;  ///< OS Version
N  struct {                              ///< Kernel Info
N    uint8_t                     state;  ///< State
N    volatile uint8_t          blocked;  ///< Blocked
N    uint8_t                    pendSV;  ///< Pending SV
N    uint8_t                  reserved;
N    uint32_t                     tick;  ///< Tick counter
N  } kernel;
N  int32_t                   tick_irqn;  ///< Tick Timer IRQ Number
N  struct {                              ///< Thread Info
N    struct {                            ///< Thread Run Info
N      osRtxThread_t             *curr;  ///< Current running Thread
N      osRtxThread_t             *next;  ///< Next Thread to Run
N    } run;
N    osRtxObject_t               ready;  ///< Ready List Object
N    osRtxThread_t               *idle;  ///< Idle Thread
N    osRtxThread_t         *delay_list;  ///< Delay List
N    osRtxThread_t          *wait_list;  ///< Wait List (no Timeout)
N    osRtxThread_t     *terminate_list;  ///< Terminate Thread List
N    uint32_t                 reserved;
N    struct {                            ///< Thread Round Robin Info
N      osRtxThread_t           *thread;  ///< Round Robin Thread
N      uint32_t                timeout;  ///< Round Robin Timeout
N    } robin;
N  } thread;
N  struct {                              ///< Timer Info
N    osRtxTimer_t                *list;  ///< Active Timer List
N    osRtxThread_t             *thread;  ///< Timer Thread
N    osRtxMessageQueue_t           *mq;  ///< Timer Message Queue
N    void                (*tick)(void);  ///< Timer Tick Function
N  } timer;
N  struct {                              ///< ISR Post Processing Queue
N    uint16_t                      max;  ///< Maximum Items
N    uint16_t                      cnt;  ///< Item Count
N    uint16_t                       in;  ///< Incoming Item Index
N    uint16_t                      out;  ///< Outgoing Item Index
N    void                       **data;  ///< Queue Data
N  } isr_queue;
N  struct {                                      ///< ISR Post Processing functions
N    void          (*thread)(osRtxThread_t*);    ///< Thread Post Processing function
N    void (*event_flags)(osRtxEventFlags_t*);    ///< Event Flags Post Processing function
N    void    (*semaphore)(osRtxSemaphore_t*);    ///< Semaphore Post Processing function
N    void (*memory_pool)(osRtxMemoryPool_t*);    ///< Memory Pool Post Processing function
N    void        (*message)(osRtxMessage_t*);    ///< Message Post Processing function
N  } post_process;
N  struct {                              ///< Memory Pools (Variable Block Size)
N    void                       *stack;  ///< Stack Memory
N    void                     *mp_data;  ///< Memory Pool Data Memory
N    void                     *mq_data;  ///< Message Queue Data Memory
N    void                      *common;  ///< Common Memory
N  } mem;
N  struct {                              ///< Memory Pools (Fixed Block Size)
N    osRtxMpInfo_t              *stack;  ///< Stack for Threads
N    osRtxMpInfo_t             *thread;  ///< Thread Control Blocks
N    osRtxMpInfo_t              *timer;  ///< Timer Control Blocks
N    osRtxMpInfo_t        *event_flags;  ///< Event Flags Control Blocks
N    osRtxMpInfo_t              *mutex;  ///< Mutex Control Blocks
N    osRtxMpInfo_t          *semaphore;  ///< Semaphore Control Blocks
N    osRtxMpInfo_t        *memory_pool;  ///< Memory Pool Control Blocks
N    osRtxMpInfo_t      *message_queue;  ///< Message Queue Control Blocks
N  } mpi;
N} osRtxInfo_t;
N 
Nextern osRtxInfo_t osRtxInfo;           ///< OS Runtime Information
N 
N/// OS Runtime Object Memory Usage structure
Ntypedef struct {
N  uint32_t cnt_alloc;                   ///< Counter for alloc
N  uint32_t cnt_free;                    ///< Counter for free
N  uint32_t max_used;                    ///< Maximum used
N} osRtxObjectMemUsage_t;
N 
N/// OS Runtime Object Memory Usage variables
Nextern osRtxObjectMemUsage_t osRtxThreadMemUsage;
Nextern osRtxObjectMemUsage_t osRtxTimerMemUsage;
Nextern osRtxObjectMemUsage_t osRtxEventFlagsMemUsage;
Nextern osRtxObjectMemUsage_t osRtxMutexMemUsage;
Nextern osRtxObjectMemUsage_t osRtxSemaphoreMemUsage;
Nextern osRtxObjectMemUsage_t osRtxMemoryPoolMemUsage;
Nextern osRtxObjectMemUsage_t osRtxMessageQueueMemUsage;
N 
N 
N//  ==== OS API definitions ====
N 
N// Object Limits definitions
N#define osRtxThreadFlagsLimit    31U    ///< number of Thread Flags available per thread
N#define osRtxEventFlagsLimit     31U    ///< number of Event Flags available per object
N#define osRtxMutexLockLimit      255U   ///< maximum number of recursive mutex locks
N#define osRtxSemaphoreTokenLimit 65535U ///< maximum number of tokens per semaphore
N 
N// Control Block sizes
N#define osRtxThreadCbSize        sizeof(osRtxThread_t)
N#define osRtxTimerCbSize         sizeof(osRtxTimer_t)
N#define osRtxEventFlagsCbSize    sizeof(osRtxEventFlags_t)
N#define osRtxMutexCbSize         sizeof(osRtxMutex_t)
N#define osRtxSemaphoreCbSize     sizeof(osRtxSemaphore_t)
N#define osRtxMemoryPoolCbSize    sizeof(osRtxMemoryPool_t)
N#define osRtxMessageQueueCbSize  sizeof(osRtxMessageQueue_t)
N 
N/// Memory size in bytes for Memory Pool storage.
N/// \param         block_count   maximum number of memory blocks in memory pool.
N/// \param         block_size    memory block size in bytes.
N#define osRtxMemoryPoolMemSize(block_count, block_size) \
N  (4*(block_count)*(((block_size)+3)/4))
X#define osRtxMemoryPoolMemSize(block_count, block_size)   (4*(block_count)*(((block_size)+3)/4))
N 
N/// Memory size in bytes for Message Queue storage.
N/// \param         msg_count     maximum number of messages in queue.
N/// \param         msg_size      maximum message size in bytes.
N#define osRtxMessageQueueMemSize(msg_count, msg_size) \
N  (4*(msg_count)*(3+(((msg_size)+3)/4)))
X#define osRtxMessageQueueMemSize(msg_count, msg_size)   (4*(msg_count)*(3+(((msg_size)+3)/4)))
N 
N 
N//  ==== OS External Functions ====
N 
N// OS Error Codes
N#define osRtxErrorStackUnderflow        1U  ///< \deprecated Superseded by \ref osRtxErrorStackOverflow.
N#define osRtxErrorStackOverflow         1U  ///< Stack overflow, i.e. stack pointer below its lower memory limit for descending stacks.
N#define osRtxErrorISRQueueOverflow      2U  ///< ISR Queue overflow detected when inserting object.
N#define osRtxErrorTimerQueueOverflow    3U  ///< User Timer Callback Queue overflow detected for timer.
N#define osRtxErrorClibSpace             4U  ///< Standard C/C++ library libspace not available: increase \c OS_THREAD_LIBSPACE_NUM.
N#define osRtxErrorClibMutex             5U  ///< Standard C/C++ library mutex initialization failed.
N 
N/// OS Error Callback function
Nextern uint32_t osRtxErrorNotify (uint32_t code, void *object_id);
Nextern uint32_t osRtxKernelErrorNotify (uint32_t code, void *object_id);
N 
N/// OS Idle Thread
Nextern void osRtxIdleThread (void *argument);
N 
N/// OS Exception handlers
Nextern void SVC_Handler     (void);
Nextern void PendSV_Handler  (void);
Nextern void SysTick_Handler (void);
N 
N/// OS Trusted Firmware M Extension
N#ifdef RTX_TF_M_EXTENSION
Sextern uint32_t osRtxTzGetModuleId (void);
N#endif
N 
N 
N//  ==== OS External Configuration ====
N 
N/// OS Configuration flags
N#define osRtxConfigPrivilegedMode   (1UL<<0)    ///< Threads in Privileged mode
N#define osRtxConfigStackCheck       (1UL<<1)    ///< Stack overrun checking
N#define osRtxConfigStackWatermark   (1UL<<2)    ///< Stack usage Watermark
N 
N/// OS Configuration structure
Ntypedef struct {
N  uint32_t                             flags;   ///< OS Configuration Flags
N  uint32_t                         tick_freq;   ///< Kernel Tick Frequency
N  uint32_t                     robin_timeout;   ///< Round Robin Timeout Tick
N  struct {                                      ///< ISR Post Processing Queue
N    void                              **data;   ///< Queue Data
N    uint16_t                             max;   ///< Maximum Items
N    uint16_t                         padding;
N  } isr_queue;
N  struct {                                      ///< Memory Pools (Variable Block Size)
N    void                         *stack_addr;   ///< Stack Memory Address
N    uint32_t                      stack_size;   ///< Stack Memory Size
N    void                       *mp_data_addr;   ///< Memory Pool Memory Address
N    uint32_t                    mp_data_size;   ///< Memory Pool Memory Size
N    void                       *mq_data_addr;   ///< Message Queue Data Memory Address
N    uint32_t                    mq_data_size;   ///< Message Queue Data Memory Size
N    void                        *common_addr;   ///< Common Memory Address
N    uint32_t                     common_size;   ///< Common Memory Size
N  } mem;
N  struct {                                      ///< Memory Pools (Fixed Block Size)
N    osRtxMpInfo_t                     *stack;   ///< Stack for Threads
N    osRtxMpInfo_t                    *thread;   ///< Thread Control Blocks
N    osRtxMpInfo_t                     *timer;   ///< Timer Control Blocks
N    osRtxMpInfo_t               *event_flags;   ///< Event Flags Control Blocks
N    osRtxMpInfo_t                     *mutex;   ///< Mutex Control Blocks
N    osRtxMpInfo_t                 *semaphore;   ///< Semaphore Control Blocks
N    osRtxMpInfo_t               *memory_pool;   ///< Memory Pool Control Blocks
N    osRtxMpInfo_t             *message_queue;   ///< Message Queue Control Blocks
N  } mpi;
N  uint32_t                 thread_stack_size;   ///< Default Thread Stack Size
N  const
N  osThreadAttr_t           *idle_thread_attr;   ///< Idle Thread Attributes
N  const
N  osThreadAttr_t          *timer_thread_attr;   ///< Timer Thread Attributes
N  void               (*timer_thread)(void *);   ///< Timer Thread Function
N  int32_t               (*timer_setup)(void);   ///< Timer Setup Function
N  const
N  osMessageQueueAttr_t        *timer_mq_attr;   ///< Timer Message Queue Attributes
N  uint32_t                     timer_mq_mcnt;   ///< Timer Message Queue maximum Messages
N} osRtxConfig_t;
N 
Nextern const osRtxConfig_t osRtxConfig;         ///< OS Configuration
N 
N 
N#ifdef  __cplusplus
S}
N#endif
N 
N#endif  // RTX_OS_H_
L 30 "F:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\RTOS2\RTX\Include\rtx_evr.h" 2
N
N// Initial Thread configuration covered also Thread Flags and Generic Wait
N#ifndef   OS_EVR_THFLAGS
N#define   OS_EVR_THFLAGS        OS_EVR_THREAD
N#endif
N#ifndef   OS_EVR_WAIT
N#define   OS_EVR_WAIT           OS_EVR_THREAD
N#endif
N
N#ifdef   _RTE_
N#include "RTE_Components.h"
N#endif
N
N#ifdef    RTE_Compiler_EventRecorder
S
S//lint -emacro((835,845),EventID) [MISRA Note 13]
S
S#include "EventRecorder.h"
S#include "EventRecorderConf.h"
S
S#if ((defined(OS_EVR_INIT) && (OS_EVR_INIT != 0)) || (EVENT_TIMESTAMP_SOURCE == 2))
S#ifndef EVR_RTX_KERNEL_GET_STATE_DISABLE
S#define EVR_RTX_KERNEL_GET_STATE_DISABLE
S#endif
S#endif
S
S#if (EVENT_TIMESTAMP_SOURCE == 2)
S#ifndef EVR_RTX_KERNEL_GET_SYS_TIMER_COUNT_DISABLE
S#define EVR_RTX_KERNEL_GET_SYS_TIMER_COUNT_DISABLE
S#endif
S#ifndef EVR_RTX_KERNEL_GET_SYS_TIMER_FREQ_DISABLE
S#define EVR_RTX_KERNEL_GET_SYS_TIMER_FREQ_DISABLE
S#endif
S#endif
S
S/// RTOS component number
S#define EvtRtxMemoryNo                  (0xF0U)
S#define EvtRtxKernelNo                  (0xF1U)
S#define EvtRtxThreadNo                  (0xF2U)
S#define EvtRtxThreadFlagsNo             (0xF4U)
S#define EvtRtxWaitNo                    (0xF3U)
S#define EvtRtxTimerNo                   (0xF6U)
S#define EvtRtxEventFlagsNo              (0xF5U)
S#define EvtRtxMutexNo                   (0xF7U)
S#define EvtRtxSemaphoreNo               (0xF8U)
S#define EvtRtxMemoryPoolNo              (0xF9U)
S#define EvtRtxMessageQueueNo            (0xFAU)
S
N#endif  // RTE_Compiler_EventRecorder
N
N
N/// Extended Status codes
N#define osRtxErrorKernelNotReady        (-7)
N#define osRtxErrorKernelNotRunning      (-8)
N#define osRtxErrorInvalidControlBlock   (-9)
N#define osRtxErrorInvalidDataMemory     (-10)
N#define osRtxErrorInvalidThreadStack    (-11)
N#define osRtxErrorInvalidPriority       (-12)
N#define osRtxErrorThreadNotJoinable     (-13)
N#define osRtxErrorMutexNotOwned         (-14)
N#define osRtxErrorMutexNotLocked        (-15)
N#define osRtxErrorMutexLockLimit        (-16)
N#define osRtxErrorSemaphoreCountLimit   (-17)
N#define osRtxErrorTZ_InitContext_S      (-18)
N#define osRtxErrorTZ_AllocContext_S     (-19)
N#define osRtxErrorTZ_FreeContext_S      (-20)
N#define osRtxErrorTZ_LoadContext_S      (-21)
N#define osRtxErrorTZ_SaveContext_S      (-22)
N
N
N//  ==== Memory Events ====
N
N/**
N  \brief  Event on memory initialization (Op)
N  \param[in]  mem           pointer to memory pool.
N  \param[in]  size          size of a memory pool in bytes.
N  \param[in]  result        execution status: 1 - success, 0 - failure.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MEMORY != 0) && !defined(EVR_RTX_MEMORY_INIT_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxMemoryInit (void *mem, uint32_t size, uint32_t result);
N#else
S#define EvrRtxMemoryInit(mem, size, result)
N#endif
N
N/**
N  \brief  Event on memory allocate (Op)
N  \param[in]  mem           pointer to memory pool.
N  \param[in]  size          size of a memory block in bytes.
N  \param[in]  type          memory block type: 0 - generic, 1 - control block.
N  \param[in]  block         pointer to allocated memory block or NULL in case of no memory is available.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MEMORY != 0) && !defined(EVR_RTX_MEMORY_ALLOC_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxMemoryAlloc (void *mem, uint32_t size, uint32_t type, void *block);
N#else
S#define EvrRtxMemoryAlloc(mem, size, type, block)
N#endif
N
N/**
N  \brief  Event on memory free (Op)
N  \param[in]  mem           pointer to memory pool.
N  \param[in]  block         memory block to be returned to the memory pool.
N  \param[in]  result        execution status: 1 - success, 0 - failure.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MEMORY != 0) && !defined(EVR_RTX_MEMORY_FREE_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxMemoryFree (void *mem, void *block, uint32_t result);
N#else
S#define EvrRtxMemoryFree(mem, block, result)
N#endif
N
N/**
N  \brief  Event on memory block initialization (Op)
N  \param[in]  mp_info       memory pool info.
N  \param[in]  block_count   maximum number of memory blocks in memory pool.
N  \param[in]  block_size    size of a memory block in bytes.
N  \param[in]  block_mem     pointer to memory for block storage.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MEMORY != 0) && !defined(EVR_RTX_MEMORY_BLOCK_INIT_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxMemoryBlockInit (osRtxMpInfo_t *mp_info, uint32_t block_count, uint32_t block_size, void *block_mem);
N#else
S#define EvrRtxMemoryBlockInit(mp_info, block_count, block_size, block_mem)
N#endif
N
N/**
N  \brief  Event on memory block alloc (Op)
N  \param[in]  mp_info       memory pool info.
N  \param[in]  block         address of the allocated memory block or NULL in case of no memory is available.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MEMORY != 0) && !defined(EVR_RTX_MEMORY_BLOCK_ALLOC_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxMemoryBlockAlloc (osRtxMpInfo_t *mp_info, void *block);
N#else
S#define EvrRtxMemoryBlockAlloc(mp_info, block)
N#endif
N
N/**
N  \brief  Event on memory block free (Op)
N  \param[in]  mp_info       memory pool info.
N  \param[in]  block         address of the allocated memory block to be returned to the memory pool.
N  \param[in]  status        extended execution status.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MEMORY != 0) && !defined(EVR_RTX_MEMORY_BLOCK_FREE_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxMemoryBlockFree (osRtxMpInfo_t *mp_info, void *block, int32_t status);
N#else
S#define EvrRtxMemoryBlockFree(mp_info, block, status)
N#endif
N
N
N//  ==== Kernel Events ====
N
N/**
N  \brief  Event on RTOS kernel error (Error)
N  \param[in]  status        extended execution status.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_KERNEL != 0) && !defined(EVR_RTX_KERNEL_ERROR_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxKernelError (int32_t status);
N#else
S#define EvrRtxKernelError(status)
N#endif
N
N/**
N  \brief  Event on RTOS kernel initialize (API)
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_KERNEL != 0) && !defined(EVR_RTX_KERNEL_INITIALIZE_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxKernelInitialize (void);
N#else
S#define EvrRtxKernelInitialize()
N#endif
N
N/**
N  \brief  Event on successful RTOS kernel initialize (Op)
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_KERNEL != 0) && !defined(EVR_RTX_KERNEL_INITIALIZED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxKernelInitialized (void);
N#else
S#define EvrRtxKernelInitialized()
N#endif
N
N/**
N  \brief  Event on RTOS kernel information retrieve (API)
N  \param[in]  version       pointer to buffer for retrieving version information.
N  \param[in]  id_buf        pointer to buffer for retrieving kernel identification string.
N  \param[in]  id_size       size of buffer for kernel identification string.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_KERNEL != 0) && !defined(EVR_RTX_KERNEL_GET_INFO_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxKernelGetInfo (osVersion_t *version, char *id_buf, uint32_t id_size);
N#else
S#define EvrRtxKernelGetInfo(version, id_buf, id_size)
N#endif
N
N/**
N  \brief  Event on successful RTOS kernel information retrieve (Op)
N  \param[in]  version       pointer to buffer for retrieving version information.
N  \param[in]  id_buf        pointer to buffer for retrieving kernel identification string.
N  \param[in]  id_size       size of buffer for kernel identification string.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_KERNEL != 0) && !defined(EVR_RTX_KERNEL_INFO_RETRIEVED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxKernelInfoRetrieved (const osVersion_t *version, const char *id_buf, uint32_t id_size);
N#else
S#define EvrRtxKernelInfoRetrieved(version, id_buf, id_size)
N#endif
N
N/**
N  \brief  Event on current RTOS Kernel state retrieve (API)
N  \param[in]  state         current RTOS Kernel state.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_KERNEL != 0) && !defined(EVR_RTX_KERNEL_GET_STATE_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxKernelGetState (osKernelState_t state);
N#else
S#define EvrRtxKernelGetState(state)
N#endif
N
N/**
N  \brief  Event on RTOS Kernel scheduler start (API)
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_KERNEL != 0) && !defined(EVR_RTX_KERNEL_START_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxKernelStart (void);
N#else
S#define EvrRtxKernelStart()
N#endif
N
N/**
N  \brief  Event on successful RTOS Kernel scheduler start (Op)
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_KERNEL != 0) && !defined(EVR_RTX_KERNEL_STARTED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxKernelStarted (void);
N#else
S#define EvrRtxKernelStarted()
N#endif
N
N/**
N  \brief  Event on RTOS Kernel scheduler lock (API)
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_KERNEL != 0) && !defined(EVR_RTX_KERNEL_LOCK_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxKernelLock (void);
N#else
S#define EvrRtxKernelLock()
N#endif
N
N/**
N  \brief  Event on successful RTOS Kernel scheduler lock (Op)
N  \param[in]  lock          previous lock state (1 - locked, 0 - not locked).
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_KERNEL != 0) && !defined(EVR_RTX_KERNEL_LOCKED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxKernelLocked (int32_t lock);
N#else
S#define EvrRtxKernelLocked(lock)
N#endif
N
N/**
N  \brief  Event on RTOS Kernel scheduler unlock (API)
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_KERNEL != 0) && !defined(EVR_RTX_KERNEL_UNLOCK_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxKernelUnlock (void);
N#else
S#define EvrRtxKernelUnlock()
N#endif
N
N/**
N  \brief  Event on successful RTOS Kernel scheduler unlock (Op)
N  \param[in]  lock          previous lock state (1 - locked, 0 - not locked).
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_KERNEL != 0) && !defined(EVR_RTX_KERNEL_UNLOCKED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxKernelUnlocked (int32_t lock);
N#else
S#define EvrRtxKernelUnlocked(lock)
N#endif
N
N/**
N  \brief  Event on RTOS Kernel scheduler lock state restore (API)
N  \param[in]  lock          lock state obtained by \ref osKernelLock or \ref osKernelUnlock.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_KERNEL != 0) && !defined(EVR_RTX_KERNEL_RESTORE_LOCK_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxKernelRestoreLock (int32_t lock);
N#else
S#define EvrRtxKernelRestoreLock(lock)
N#endif
N
N/**
N  \brief  Event on successful RTOS Kernel scheduler lock state restore (Op)
N  \param[in]  lock          new lock state (1 - locked, 0 - not locked).
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_KERNEL != 0) && !defined(EVR_RTX_KERNEL_LOCK_RESTORED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxKernelLockRestored (int32_t lock);
N#else
S#define EvrRtxKernelLockRestored(lock)
N#endif
N
N/**
N  \brief  Event on RTOS Kernel scheduler suspend (API)
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_KERNEL != 0) && !defined(EVR_RTX_KERNEL_SUSPEND_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxKernelSuspend (void);
N#else
S#define EvrRtxKernelSuspend()
N#endif
N
N/**
N  \brief  Event on successful RTOS Kernel scheduler suspend (Op)
N  \param[in]  sleep_ticks   time in ticks, for how long the system can sleep or power-down.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_KERNEL != 0) && !defined(EVR_RTX_KERNEL_SUSPENDED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxKernelSuspended (uint32_t sleep_ticks);
N#else
S#define EvrRtxKernelSuspended(sleep_ticks)
N#endif
N
N/**
N  \brief  Event on RTOS Kernel scheduler resume (API)
N  \param[in]  sleep_ticks   time in ticks, for how long the system was in sleep or power-down mode.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_KERNEL != 0) && !defined(EVR_RTX_KERNEL_RESUME_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxKernelResume (uint32_t sleep_ticks);
N#else
S#define EvrRtxKernelResume(sleep_ticks)
N#endif
N
N/**
N  \brief  Event on successful RTOS Kernel scheduler resume (Op)
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_KERNEL != 0) && !defined(EVR_RTX_KERNEL_RESUMED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxKernelResumed (void);
N#else
S#define EvrRtxKernelResumed()
N#endif
N
N/**
N  \brief  Event on RTOS kernel tick count retrieve (API)
N  \param[in]  count         RTOS kernel current tick count.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_KERNEL != 0) && !defined(EVR_RTX_KERNEL_GET_TICK_COUNT_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxKernelGetTickCount (uint32_t count);
N#else
S#define EvrRtxKernelGetTickCount(count)
N#endif
N
N/**
N  \brief  Event on RTOS kernel tick frequency retrieve (API)
N  \param[in]  freq          frequency of the kernel tick.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_KERNEL != 0) && !defined(EVR_RTX_KERNEL_GET_TICK_FREQ_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxKernelGetTickFreq (uint32_t freq);
N#else
S#define EvrRtxKernelGetTickFreq(freq)
N#endif
N
N/**
N  \brief  Event on RTOS kernel system timer count retrieve (API)
N  \param[in]  count         RTOS kernel current system timer count as 32-bit value.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_KERNEL != 0) && !defined(EVR_RTX_KERNEL_GET_SYS_TIMER_COUNT_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxKernelGetSysTimerCount (uint32_t count);
N#else
S#define EvrRtxKernelGetSysTimerCount(count)
N#endif
N
N/**
N  \brief  Event on RTOS kernel system timer frequency retrieve (API)
N  \param[in]  freq          frequency of the system timer.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_KERNEL != 0) && !defined(EVR_RTX_KERNEL_GET_SYS_TIMER_FREQ_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxKernelGetSysTimerFreq (uint32_t freq);
N#else
S#define EvrRtxKernelGetSysTimerFreq(freq)
N#endif
N
N/**
N  \brief  Event on RTOS kernel system error (Error)
N  \param[in]  code          error code.
N  \param[in]  object_id     object that caused the error.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_KERNEL != 0) && !defined(EVR_RTX_KERNEL_ERROR_NOTIFY_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxKernelErrorNotify (uint32_t code, void *object_id);
N#else
S#define EvrRtxKernelErrorNotify(code, object_id)
N#endif
N
N
N//  ==== Thread Events ====
N
N/**
N  \brief  Event on thread error (Error)
N  \param[in]  thread_id     thread ID obtained by \ref osThreadNew or \ref osThreadGetId or NULL when ID is unknown.
N  \param[in]  status        extended execution status.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_THREAD != 0) && !defined(EVR_RTX_THREAD_ERROR_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxThreadError (osThreadId_t thread_id, int32_t status);
N#else
S#define EvrRtxThreadError(thread_id, status)
N#endif
N
N/**
N  \brief  Event on thread create and intialize (API)
N  \param[in]  func          thread function.
N  \param[in]  argument      pointer that is passed to the thread function as start argument.
N  \param[in]  attr          thread attributes.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_THREAD != 0) && !defined(EVR_RTX_THREAD_NEW_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr);
N#else
S#define EvrRtxThreadNew(func, argument, attr)
N#endif
N
N/**
N  \brief  Event on successful thread create (Op)
N  \param[in]  thread_id     thread ID obtained by \ref osThreadNew or \ref osThreadGetId.
N  \param[in]  thread_addr   thread entry address.
N  \param[in]  name          pointer to thread object name.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_THREAD != 0) && !defined(EVR_RTX_THREAD_CREATED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxThreadCreated (osThreadId_t thread_id, uint32_t thread_addr, const char *name);
N#else
S#define EvrRtxThreadCreated(thread_id, thread_addr, name)
N#endif
N
N/**
N  \brief  Event on thread name retrieve (API)
N  \param[in]  thread_id     thread ID obtained by \ref osThreadNew or \ref osThreadGetId.
N  \param[in]  name          pointer to thread object name.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_THREAD != 0) && !defined(EVR_RTX_THREAD_GET_NAME_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxThreadGetName (osThreadId_t thread_id, const char *name);
N#else
S#define EvrRtxThreadGetName(thread_id, name)
N#endif
N
N/**
N  \brief  Event on current running thread ID retrieve (API)
N  \param[in]  thread_id     thread ID obtained by \ref osThreadNew or \ref osThreadGetId.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_THREAD != 0) && !defined(EVR_RTX_THREAD_GET_ID_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxThreadGetId (osThreadId_t thread_id);
N#else
S#define EvrRtxThreadGetId(thread_id)
N#endif
N
N/**
N  \brief  Event on thread state retrieve (API)
N  \param[in]  thread_id     thread ID obtained by \ref osThreadNew or \ref osThreadGetId.
N  \param[in]  state         current thread state of the specified thread.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_THREAD != 0) && !defined(EVR_RTX_THREAD_GET_STATE_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxThreadGetState (osThreadId_t thread_id, osThreadState_t state);
N#else
S#define EvrRtxThreadGetState(thread_id, state)
N#endif
N
N/**
N  \brief  Event on thread stack size retrieve (API)
N  \param[in]  thread_id     thread ID obtained by \ref osThreadNew or \ref osThreadGetId.
N  \param[in]  stack_size    stack size in bytes.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_THREAD != 0) && !defined(EVR_RTX_THREAD_GET_STACK_SIZE_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxThreadGetStackSize (osThreadId_t thread_id, uint32_t stack_size);
N#else
S#define EvrRtxThreadGetStackSize(thread_id, stack_size)
N#endif
N
N/**
N  \brief  Event on available stack space retrieve (API)
N  \param[in]  thread_id     thread ID obtained by \ref osThreadNew or \ref osThreadGetId.
N  \param[in]  stack_space   remaining stack space in bytes.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_THREAD != 0) && !defined(EVR_RTX_THREAD_GET_STACK_SPACE_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxThreadGetStackSpace (osThreadId_t thread_id, uint32_t stack_space);
N#else
S#define EvrRtxThreadGetStackSpace(thread_id, stack_space)
N#endif
N
N/**
N  \brief  Event on thread priority set (API)
N  \param[in]  thread_id     thread ID obtained by \ref osThreadNew or \ref osThreadGetId.
N  \param[in]  priority      new priority value for the thread function.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_THREAD != 0) && !defined(EVR_RTX_THREAD_SET_PRIORITY_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxThreadSetPriority (osThreadId_t thread_id, osPriority_t priority);
N#else
S#define EvrRtxThreadSetPriority(thread_id, priority)
N#endif
N
N/**
N  \brief  Event on thread priority updated (Op)
N  \param[in]  thread_id     thread ID obtained by \ref osThreadNew or \ref osThreadGetId.
N  \param[in]  priority      new priority value for the thread function.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_THREAD != 0) && !defined(EVR_RTX_THREAD_PRIORITY_UPDATED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxThreadPriorityUpdated (osThreadId_t thread_id, osPriority_t priority);
N#else
S#define EvrRtxThreadPriorityUpdated(thread_id, priority)
N#endif
N
N/**
N  \brief  Event on thread priority retrieve (API)
N  \param[in]  thread_id     thread ID obtained by \ref osThreadNew or \ref osThreadGetId.
N  \param[in]  priority      current priority value of the specified thread.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_THREAD != 0) && !defined(EVR_RTX_THREAD_GET_PRIORITY_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxThreadGetPriority (osThreadId_t thread_id, osPriority_t priority);
N#else
S#define EvrRtxThreadGetPriority(thread_id, priority)
N#endif
N
N/**
N  \brief  Event on thread yield (API)
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_THREAD != 0) && !defined(EVR_RTX_THREAD_YIELD_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxThreadYield (void);
N#else
S#define EvrRtxThreadYield()
N#endif
N
N/**
N  \brief  Event on thread suspend (API)
N  \param[in]  thread_id     thread ID obtained by \ref osThreadNew or \ref osThreadGetId.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_THREAD != 0) && !defined(EVR_RTX_THREAD_SUSPEND_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxThreadSuspend (osThreadId_t thread_id);
N#else
S#define EvrRtxThreadSuspend(thread_id)
N#endif
N
N/**
N  \brief  Event on successful thread suspend (Op)
N  \param[in]  thread_id     thread ID obtained by \ref osThreadNew or \ref osThreadGetId.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_THREAD != 0) && !defined(EVR_RTX_THREAD_SUSPENDED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxThreadSuspended (osThreadId_t thread_id);
N#else
S#define EvrRtxThreadSuspended(thread_id)
N#endif
N
N/**
N  \brief  Event on thread resume (API)
N  \param[in]  thread_id     thread ID obtained by \ref osThreadNew or \ref osThreadGetId.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_THREAD != 0) && !defined(EVR_RTX_THREAD_RESUME_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxThreadResume (osThreadId_t thread_id);
N#else
S#define EvrRtxThreadResume(thread_id)
N#endif
N
N/**
N  \brief  Event on successful thread resume (Op)
N  \param[in]  thread_id     thread ID obtained by \ref osThreadNew or \ref osThreadGetId.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_THREAD != 0) && !defined(EVR_RTX_THREAD_RESUMED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxThreadResumed (osThreadId_t thread_id);
N#else
S#define EvrRtxThreadResumed(thread_id)
N#endif
N
N/**
N  \brief  Event on thread detach (API)
N  \param[in]  thread_id     thread ID obtained by \ref osThreadNew or \ref osThreadGetId.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_THREAD != 0) && !defined(EVR_RTX_THREAD_DETACH_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxThreadDetach (osThreadId_t thread_id);
N#else
S#define EvrRtxThreadDetach(thread_id)
N#endif
N
N/**
N  \brief  Event on successful thread detach (Op)
N  \param[in]  thread_id     thread ID obtained by \ref osThreadNew or \ref osThreadGetId.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_THREAD != 0) && !defined(EVR_RTX_THREAD_DETACHED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxThreadDetached (osThreadId_t thread_id);
N#else
S#define EvrRtxThreadDetached(thread_id)
N#endif
N
N/**
N  \brief  Event on thread join (API)
N  \param[in]  thread_id     thread ID obtained by \ref osThreadNew or \ref osThreadGetId.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_THREAD != 0) && !defined(EVR_RTX_THREAD_JOIN_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxThreadJoin (osThreadId_t thread_id);
N#else
S#define EvrRtxThreadJoin(thread_id)
N#endif
N
N/**
N  \brief  Event on pending thread join (Op)
N  \param[in]  thread_id     thread ID obtained by \ref osThreadNew or \ref osThreadGetId.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_THREAD != 0) && !defined(EVR_RTX_THREAD_JOIN_PENDING_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxThreadJoinPending (osThreadId_t thread_id);
N#else
S#define EvrRtxThreadJoinPending(thread_id)
N#endif
N
N/**
N  \brief  Event on successful thread join (Op)
N  \param[in]  thread_id     thread ID obtained by \ref osThreadNew or \ref osThreadGetId.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_THREAD != 0) && !defined(EVR_RTX_THREAD_JOINED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxThreadJoined (osThreadId_t thread_id);
N#else
S#define EvrRtxThreadJoined(thread_id)
N#endif
N
N/**
N  \brief  Event on thread execution block (Detail)
N  \param[in]  thread_id     thread ID obtained by \ref osThreadNew or \ref osThreadGetId.
N  \param[in]  timeout       \ref CMSIS_RTOS_TimeOutValue or 0 in case of no time-out.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_THREAD != 0) && !defined(EVR_RTX_THREAD_BLOCKED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxThreadBlocked (osThreadId_t thread_id, uint32_t timeout);
N#else
S#define EvrRtxThreadBlocked(thread_id, timeout)
N#endif
N
N/**
N  \brief  Event on thread execution unblock (Detail)
N  \param[in]  thread_id     thread ID obtained by \ref osThreadNew or \ref osThreadGetId.
N  \param[in]  ret_val       extended execution status of the thread.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_THREAD != 0) && !defined(EVR_RTX_THREAD_UNBLOCKED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxThreadUnblocked (osThreadId_t thread_id, uint32_t ret_val);
N#else
S#define EvrRtxThreadUnblocked(thread_id, ret_val)
N#endif
N
N/**
N  \brief  Event on running thread pre-emption (Detail)
N  \param[in]  thread_id     thread ID obtained by \ref osThreadNew or \ref osThreadGetId.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_THREAD != 0) && !defined(EVR_RTX_THREAD_PREEMPTED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxThreadPreempted (osThreadId_t thread_id);
N#else
S#define EvrRtxThreadPreempted(thread_id)
N#endif
N
N/**
N  \brief  Event on running thread switch (Op)
N  \param[in]  thread_id     thread ID obtained by \ref osThreadNew or \ref osThreadGetId.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_THREAD != 0) && !defined(EVR_RTX_THREAD_SWITCHED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxThreadSwitched (osThreadId_t thread_id);
N#else
S#define EvrRtxThreadSwitched(thread_id)
N#endif
N
N/**
N  \brief  Event on thread exit (API)
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_THREAD != 0) && !defined(EVR_RTX_THREAD_EXIT_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxThreadExit (void);
N#else
S#define EvrRtxThreadExit()
N#endif
N
N/**
N  \brief  Event on thread terminate (API)
N  \param[in]  thread_id     thread ID obtained by \ref osThreadNew or \ref osThreadGetId.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_THREAD != 0) && !defined(EVR_RTX_THREAD_TERMINATE_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxThreadTerminate (osThreadId_t thread_id);
N#else
S#define EvrRtxThreadTerminate(thread_id)
N#endif
N
N/**
N  \brief  Event on successful thread terminate (Op)
N  \param[in]  thread_id     thread ID obtained by \ref osThreadNew or \ref osThreadGetId.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_THREAD != 0) && !defined(EVR_RTX_THREAD_DESTROYED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxThreadDestroyed (osThreadId_t thread_id);
N#else
S#define EvrRtxThreadDestroyed(thread_id)
N#endif
N
N/**
N  \brief  Event on active thread count retrieve (API)
N  \param[in]  count         number of active threads.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_THREAD != 0) && !defined(EVR_RTX_THREAD_GET_COUNT_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxThreadGetCount (uint32_t count);
N#else
S#define EvrRtxThreadGetCount(count)
N#endif
N
N/**
N  \brief  Event on active threads enumerate (API)
N  \param[in]  thread_array  pointer to array for retrieving thread IDs.
N  \param[in]  array_items   maximum number of items in array for retrieving thread IDs.
N  \param[in]  count         number of enumerated threads.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_THREAD != 0) && !defined(EVR_RTX_THREAD_ENUMERATE_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxThreadEnumerate (osThreadId_t *thread_array, uint32_t array_items, uint32_t count);
N#else
S#define EvrRtxThreadEnumerate(thread_array, array_items, count)
N#endif
N
N
N//  ==== Thread Flags Events ====
N
N/**
N  \brief  Event on thread flags error (Error)
N  \param[in]  thread_id     thread ID obtained by \ref osThreadNew or \ref osThreadGetId or NULL when ID is unknown.
N  \param[in]  status        extended execution status.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_THFLAGS != 0) && !defined(EVR_RTX_THREAD_FLAGS_ERROR_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxThreadFlagsError (osThreadId_t thread_id, int32_t status);
N#else
S#define EvrRtxThreadFlagsError(thread_id, status)
N#endif
N
N/**
N  \brief  Event on thread flags set (API)
N  \param[in]   thread_id     thread ID obtained by \ref osThreadNew or \ref osThreadGetId.
N  \param[in]   flags         flags of the thread that shall be set.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_THFLAGS != 0) && !defined(EVR_RTX_THREAD_FLAGS_SET_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxThreadFlagsSet (osThreadId_t thread_id, uint32_t flags);
N#else
S#define EvrRtxThreadFlagsSet(thread_id, flags)
N#endif
N
N/**
N  \brief  Event on successful thread flags set (Op)
N  \param[in]  thread_id     thread ID obtained by \ref osThreadNew or \ref osThreadGetId.
N  \param[in]  thread_flags  thread flags after setting.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_THFLAGS != 0) && !defined(EVR_RTX_THREAD_FLAGS_SET_DONE_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxThreadFlagsSetDone (osThreadId_t thread_id, uint32_t thread_flags);
N#else
S#define EvrRtxThreadFlagsSetDone(thread_id, thread_flags)
N#endif
N
N/**
N  \brief  Event on thread flags clear (API)
N  \param[in]  flags         flags of the thread that shall be cleared.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_THFLAGS != 0) && !defined(EVR_RTX_THREAD_FLAGS_CLEAR_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxThreadFlagsClear (uint32_t flags);
N#else
S#define EvrRtxThreadFlagsClear(flags)
N#endif
N
N/**
N  \brief  Event on successful thread flags clear (Op)
N  \param[in]  thread_flags  thread flags before clearing.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_THFLAGS != 0) && !defined(EVR_RTX_THREAD_FLAGS_CLEAR_DONE_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxThreadFlagsClearDone (uint32_t thread_flags);
N#else
S#define EvrRtxThreadFlagsClearDone(thread_flags)
N#endif
N
N/**
N  \brief  Event on thread flags retrieve (API)
N  \param[in]  thread_flags  current thread flags.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_THFLAGS != 0) && !defined(EVR_RTX_THREAD_FLAGS_GET_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxThreadFlagsGet (uint32_t thread_flags);
N#else
S#define EvrRtxThreadFlagsGet(thread_flags)
N#endif
N
N/**
N  \brief  Event on wait for thread flags (API)
N  \param[in]  flags         flags to wait for.
N  \param[in]  options       flags options (osFlagsXxxx).
N  \param[in]  timeout       \ref CMSIS_RTOS_TimeOutValue or 0 in case of no time-out.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_THFLAGS != 0) && !defined(EVR_RTX_THREAD_FLAGS_WAIT_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout);
N#else
S#define EvrRtxThreadFlagsWait(flags, options, timeout)
N#endif
N
N/**
N  \brief  Event on pending wait for thread flags (Op)
N  \param[in]  flags         flags to wait for.
N  \param[in]  options       flags options (osFlagsXxxx).
N  \param[in]  timeout       \ref CMSIS_RTOS_TimeOutValue or 0 in case of no time-out.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_THFLAGS != 0) && !defined(EVR_RTX_THREAD_FLAGS_WAIT_PENDING_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxThreadFlagsWaitPending (uint32_t flags, uint32_t options, uint32_t timeout);
N#else
S#define EvrRtxThreadFlagsWaitPending(flags, options, timeout)
N#endif
N
N/**
N  \brief  Event on wait timeout for thread flags (Op)
N  \param[in]  thread_id     thread ID obtained by \ref osThreadNew or \ref osThreadGetId.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_THFLAGS != 0) && !defined(EVR_RTX_THREAD_FLAGS_WAIT_TIMEOUT_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxThreadFlagsWaitTimeout (osThreadId_t thread_id);
N#else
S#define EvrRtxThreadFlagsWaitTimeout(thread_id)
N#endif
N
N/**
N  \brief  Event on successful wait for thread flags (Op)
N  \param[in]  flags         flags to wait for.
N  \param[in]  options       flags options (osFlagsXxxx).
N  \param[in]  thread_flags  thread flags before clearing.
N  \param[in]  thread_id     thread ID obtained by \ref osThreadNew or \ref osThreadGetId.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_THFLAGS != 0) && !defined(EVR_RTX_THREAD_FLAGS_WAIT_COMPLETED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxThreadFlagsWaitCompleted (uint32_t flags, uint32_t options, uint32_t thread_flags, osThreadId_t thread_id);
N#else
S#define EvrRtxThreadFlagsWaitCompleted(flags, options, thread_flags, thread_id)
N#endif
N
N/**
N  \brief  Event on unsuccessful wait for thread flags (Op)
N  \param[in]  flags         flags to wait for.
N  \param[in]  options       flags options (osFlagsXxxx).
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_THFLAGS != 0) && !defined(EVR_RTX_THREAD_FLAGS_WAIT_NOT_COMPLETED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxThreadFlagsWaitNotCompleted (uint32_t flags, uint32_t options);
N#else
S#define EvrRtxThreadFlagsWaitNotCompleted(flags, options)
N#endif
N
N
N//  ==== Generic Wait Events ====
N
N/**
N  \brief  Event on delay error (Error)
N  \param[in]  status        extended execution status.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_WAIT != 0) && !defined(EVR_RTX_DELAY_ERROR_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxDelayError (int32_t status);
N#else
S#define EvrRtxDelayError(status)
N#endif
N
N/**
N  \brief  Event on delay for specified time (API)
N  \param[in]  ticks         \ref CMSIS_RTOS_TimeOutValue "time ticks" value.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_WAIT != 0) && !defined(EVR_RTX_DELAY_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxDelay (uint32_t ticks);
N#else
S#define EvrRtxDelay(ticks)
N#endif
N
N/**
N  \brief  Event on delay until specified time (API)
N  \param[in]  ticks         absolute time in ticks.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_WAIT != 0) && !defined(EVR_RTX_DELAY_UNTIL_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxDelayUntil (uint32_t ticks);
N#else
S#define EvrRtxDelayUntil(ticks)
N#endif
N
N/**
N  \brief  Event on delay started (Op)
N  \param[in]  ticks         \ref CMSIS_RTOS_TimeOutValue "time ticks" value.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_WAIT != 0) && !defined(EVR_RTX_DELAY_STARTED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxDelayStarted (uint32_t ticks);
N#else
S#define EvrRtxDelayStarted(ticks)
N#endif
N
N/**
N  \brief  Event on delay until specified time started (Op)
N  \param[in]  ticks         \ref CMSIS_RTOS_TimeOutValue "time ticks" value.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_WAIT != 0) && !defined(EVR_RTX_DELAY_UNTIL_STARTED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxDelayUntilStarted (uint32_t ticks);
N#else
S#define EvrRtxDelayUntilStarted(ticks)
N#endif
N
N/**
N  \brief  Event on delay completed (Op)
N  \param[in]  thread_id     thread ID obtained by \ref osThreadNew or \ref osThreadGetId.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_WAIT != 0) && !defined(EVR_RTX_DELAY_COMPLETED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxDelayCompleted (osThreadId_t thread_id);
N#else
S#define EvrRtxDelayCompleted(thread_id)
N#endif
N
N
N//  ==== Timer Events ====
N
N/**
N  \brief  Event on timer error (Error)
N  \param[in]  timer_id      timer ID obtained by \ref osTimerNew or NULL when ID is unknown.
N  \param[in]  status        extended execution status.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_TIMER != 0) && !defined(EVR_RTX_TIMER_ERROR_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxTimerError (osTimerId_t timer_id, int32_t status);
N#else
S#define EvrRtxTimerError(timer_id, status)
N#endif
N
N/**
N  \brief  Event on timer callback call (Op)
N  \param[in]  func          start address of a timer call back function.
N  \param[in]  argument      argument to the timer call back function.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_TIMER != 0) && !defined(EVR_RTX_TIMER_CALLBACK_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxTimerCallback (osTimerFunc_t func, void *argument);
N#else
S#define EvrRtxTimerCallback(func, argument)
N#endif
N
N/**
N  \brief  Event on timer create and initialize (API)
N  \param[in]  func          start address of a timer call back function.
N  \param[in]  type          osTimerOnce for one-shot or osTimerPeriodic for periodic behavior.
N  \param[in]  argument      argument to the timer call back function.
N  \param[in]  attr          timer attributes.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_TIMER != 0) && !defined(EVR_RTX_TIMER_NEW_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr);
N#else
S#define EvrRtxTimerNew(func, type, argument, attr)
N#endif
N
N/**
N  \brief  Event on successful timer create (Op)
N  \param[in]  timer_id      timer ID obtained by \ref osTimerNew.
N  \param[in]  name          pointer to timer object name.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_TIMER != 0) && !defined(EVR_RTX_TIMER_CREATED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxTimerCreated (osTimerId_t timer_id, const char *name);
N#else
S#define EvrRtxTimerCreated(timer_id, name)
N#endif
N
N/**
N  \brief  Event on timer name retrieve (API)
N  \param[in]  timer_id      timer ID obtained by \ref osTimerNew.
N  \param[in]  name          pointer to timer object name.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_TIMER != 0) && !defined(EVR_RTX_TIMER_GET_NAME_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxTimerGetName (osTimerId_t timer_id, const char *name);
N#else
S#define EvrRtxTimerGetName(timer_id, name)
N#endif
N
N/**
N  \brief  Event on timer start (API)
N  \param[in]  timer_id      timer ID obtained by \ref osTimerNew.
N  \param[in]  ticks         \ref CMSIS_RTOS_TimeOutValue "time ticks" value of the timer.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_TIMER != 0) && !defined(EVR_RTX_TIMER_START_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxTimerStart (osTimerId_t timer_id, uint32_t ticks);
N#else
S#define EvrRtxTimerStart(timer_id, ticks)
N#endif
N
N/**
N  \brief  Event on successful timer start (Op)
N  \param[in]  timer_id      timer ID obtained by \ref osTimerNew.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_TIMER != 0) && !defined(EVR_RTX_TIMER_STARTED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxTimerStarted (osTimerId_t timer_id);
N#else
S#define EvrRtxTimerStarted(timer_id)
N#endif
N
N/**
N  \brief  Event on timer stop (API)
N  \param[in]  timer_id      timer ID obtained by \ref osTimerNew.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_TIMER != 0) && !defined(EVR_RTX_TIMER_STOP_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxTimerStop (osTimerId_t timer_id);
N#else
S#define EvrRtxTimerStop(timer_id)
N#endif
N
N/**
N  \brief  Event on successful timer stop (Op)
N  \param[in]  timer_id      timer ID obtained by \ref osTimerNew.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_TIMER != 0) && !defined(EVR_RTX_TIMER_STOPPED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxTimerStopped (osTimerId_t timer_id);
N#else
S#define EvrRtxTimerStopped(timer_id)
N#endif
N
N/**
N  \brief  Event on timer running state check (API)
N  \param[in]  timer_id      timer ID obtained by \ref osTimerNew.
N  \param[in]  running       running state: 0 not running, 1 running.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_TIMER != 0) && !defined(EVR_RTX_TIMER_IS_RUNNING_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxTimerIsRunning (osTimerId_t timer_id, uint32_t running);
N#else
S#define EvrRtxTimerIsRunning(timer_id, running)
N#endif
N
N/**
N  \brief  Event on timer delete (API)
N  \param[in]  timer_id      timer ID obtained by \ref osTimerNew.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_TIMER != 0) && !defined(EVR_RTX_TIMER_DELETE_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxTimerDelete (osTimerId_t timer_id);
N#else
S#define EvrRtxTimerDelete(timer_id)
N#endif
N
N/**
N  \brief  Event on successful timer delete (Op)
N  \param[in]  timer_id      timer ID obtained by \ref osTimerNew.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_TIMER != 0) && !defined(EVR_RTX_TIMER_DESTROYED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxTimerDestroyed (osTimerId_t timer_id);
N#else
S#define EvrRtxTimerDestroyed(timer_id)
N#endif
N
N
N//  ==== Event Flags Events ====
N
N/**
N  \brief  Event on event flags error (Error)
N  \param[in]  ef_id         event flags ID obtained by \ref osEventFlagsNew or NULL when ID is unknown.
N  \param[in]  status        extended execution status.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_EVFLAGS != 0) && !defined(EVR_RTX_EVENT_FLAGS_ERROR_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxEventFlagsError (osEventFlagsId_t ef_id, int32_t status);
N#else
S#define EvrRtxEventFlagsError(ef_id, status)
N#endif
N
N/**
N  \brief  Event on event flags create and initialize (API)
N  \param[in]  attr          event flags attributes.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_EVFLAGS != 0) && !defined(EVR_RTX_EVENT_FLAGS_NEW_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxEventFlagsNew (const osEventFlagsAttr_t *attr);
N#else
S#define EvrRtxEventFlagsNew(attr)
N#endif
N
N/**
N  \brief  Event on successful event flags create (Op)
N  \param[in]  ef_id         event flags ID obtained by \ref osEventFlagsNew.
N  \param[in]  name          pointer to event flags object name.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_EVFLAGS != 0) && !defined(EVR_RTX_EVENT_FLAGS_CREATED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxEventFlagsCreated (osEventFlagsId_t ef_id, const char *name);
N#else
S#define EvrRtxEventFlagsCreated(ef_id, name)
N#endif
N
N/**
N  \brief  Event on event flags name retrieve (API)
N  \param[in]  ef_id         event flags ID obtained by \ref osEventFlagsNew.
N  \param[in]  name          pointer to event flags object name.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_EVFLAGS != 0) && !defined(EVR_RTX_EVENT_FLAGS_GET_NAME_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxEventFlagsGetName (osEventFlagsId_t ef_id, const char *name);
N#else
S#define EvrRtxEventFlagsGetName(ef_id, name)
N#endif
N
N/**
N  \brief  Event on event flags set (API)
N  \param[in]  ef_id         event flags ID obtained by \ref osEventFlagsNew.
N  \param[in]  flags         flags that shall be set.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_EVFLAGS != 0) && !defined(EVR_RTX_EVENT_FLAGS_SET_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags);
N#else
S#define EvrRtxEventFlagsSet(ef_id, flags)
N#endif
N
N/**
N  \brief  Event on successful event flags set (Op)
N  \param[in]  ef_id         event flags ID obtained by \ref osEventFlagsNew.
N  \param[in]  event_flags   event flags after setting.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_EVFLAGS != 0) && !defined(EVR_RTX_EVENT_FLAGS_SET_DONE_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxEventFlagsSetDone (osEventFlagsId_t ef_id, uint32_t event_flags);
N#else
S#define EvrRtxEventFlagsSetDone(ef_id, event_flags)
N#endif
N
N/**
N  \brief  Event on event flags clear (API)
N  \param[in]  ef_id         event flags ID obtained by \ref osEventFlagsNew.
N  \param[in]  flags         flags that shall be cleared.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_EVFLAGS != 0) && !defined(EVR_RTX_EVENT_FLAGS_CLEAR_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags);
N#else
S#define EvrRtxEventFlagsClear(ef_id, flags)
N#endif
N
N/**
N  \brief  Event on successful event flags clear (Op)
N  \param[in]  ef_id         event flags ID obtained by \ref osEventFlagsNew.
N  \param[in]  event_flags   event flags before clearing.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_EVFLAGS != 0) && !defined(EVR_RTX_EVENT_FLAGS_CLEAR_DONE_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxEventFlagsClearDone (osEventFlagsId_t ef_id, uint32_t event_flags);
N#else
S#define EvrRtxEventFlagsClearDone(ef_id, event_flags)
N#endif
N
N/**
N  \brief  Event on event flags retrieve (API)
N  \param[in]  ef_id         event flags ID obtained by \ref osEventFlagsNew.
N  \param[in]  event_flags   current event flags.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_EVFLAGS != 0) && !defined(EVR_RTX_EVENT_FLAGS_GET_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxEventFlagsGet (osEventFlagsId_t ef_id, uint32_t event_flags);
N#else
S#define EvrRtxEventFlagsGet(ef_id, event_flags)
N#endif
N
N/**
N  \brief  Event on wait for event flags (API)
N  \param[in]  ef_id         event flags ID obtained by \ref osEventFlagsNew.
N  \param[in]  flags         flags to wait for.
N  \param[in]  options       flags options (osFlagsXxxx).
N  \param[in]  timeout       \ref CMSIS_RTOS_TimeOutValue or 0 in case of no time-out.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_EVFLAGS != 0) && !defined(EVR_RTX_EVENT_FLAGS_WAIT_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout);
N#else
S#define EvrRtxEventFlagsWait(ef_id, flags, options, timeout)
N#endif
N
N/**
N  \brief  Event on pending wait for event flags (Op)
N  \param[in]  ef_id         event flags ID obtained by \ref osEventFlagsNew.
N  \param[in]  flags         flags to wait for.
N  \param[in]  options       flags options (osFlagsXxxx).
N  \param[in]  timeout       \ref CMSIS_RTOS_TimeOutValue or 0 in case of no time-out.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_EVFLAGS != 0) && !defined(EVR_RTX_EVENT_FLAGS_WAIT_PENDING_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxEventFlagsWaitPending (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout);
N#else
S#define EvrRtxEventFlagsWaitPending(ef_id, flags, options, timeout)
N#endif
N
N/**
N  \brief  Event on wait timeout for event flags (Op)
N  \param[in]  ef_id         event flags ID obtained by \ref osEventFlagsNew.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_EVFLAGS != 0) && !defined(EVR_RTX_EVENT_FLAGS_WAIT_TIMEOUT_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxEventFlagsWaitTimeout (osEventFlagsId_t ef_id);
N#else
S#define EvrRtxEventFlagsWaitTimeout(ef_id)
N#endif
N
N/**
N  \brief  Event on successful wait for event flags (Op)
N  \param[in]  ef_id         event flags ID obtained by \ref osEventFlagsNew.
N  \param[in]  flags         flags to wait for.
N  \param[in]  options       flags options (osFlagsXxxx).
N  \param[in]  event_flags   event flags before clearing or 0 if specified flags have not been set.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_EVFLAGS != 0) && !defined(EVR_RTX_EVENT_FLAGS_WAIT_COMPLETED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxEventFlagsWaitCompleted (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t event_flags);
N#else
S#define EvrRtxEventFlagsWaitCompleted(ef_id, flags, options, event_flags)
N#endif
N
N/**
N  \brief  Event on unsuccessful wait for event flags (Op)
N  \param[in]  ef_id         event flags ID obtained by \ref osEventFlagsNew.
N  \param[in]  flags         flags to wait for.
N  \param[in]  options       flags options (osFlagsXxxx).
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_EVFLAGS != 0) && !defined(EVR_RTX_EVENT_FLAGS_WAIT_NOT_COMPLETED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxEventFlagsWaitNotCompleted (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options);
N#else
S#define EvrRtxEventFlagsWaitNotCompleted(ef_id, flags, options)
N#endif
N
N/**
N  \brief  Event on event flags delete (API)
N  \param[in]  ef_id         event flags ID obtained by \ref osEventFlagsNew.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_EVFLAGS != 0) && !defined(EVR_RTX_EVENT_FLAGS_DELETE_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxEventFlagsDelete (osEventFlagsId_t ef_id);
N#else
S#define EvrRtxEventFlagsDelete(ef_id)
N#endif
N
N/**
N  \brief  Event on successful event flags delete (Op)
N  \param[in]  ef_id         event flags ID obtained by \ref osEventFlagsNew.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_EVFLAGS != 0) && !defined(EVR_RTX_EVENT_FLAGS_DESTROYED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxEventFlagsDestroyed (osEventFlagsId_t ef_id);
N#else
S#define EvrRtxEventFlagsDestroyed(ef_id)
N#endif
N
N
N//  ==== Mutex Events ====
N
N/**
N  \brief  Event on mutex error (Error)
N  \param[in]  mutex_id  mutex ID obtained by \ref osMutexNew or NULL when ID is unknown.
N  \param[in]  status    extended execution status.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MUTEX != 0) && !defined(EVR_RTX_MUTEX_ERROR_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxMutexError (osMutexId_t mutex_id, int32_t status);
N#else
S#define EvrRtxMutexError(mutex_id, status)
N#endif
N
N/**
N  \brief  Event on mutex create and initialize (API)
N  \param[in]  attr      mutex attributes.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MUTEX != 0) && !defined(EVR_RTX_MUTEX_NEW_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxMutexNew (const osMutexAttr_t *attr);
N#else
S#define EvrRtxMutexNew(attr)
N#endif
N
N/**
N  \brief  Event on successful mutex create (Op)
N  \param[in]  mutex_id  mutex ID obtained by \ref osMutexNew.
N  \param[in]  name      pointer to mutex object name.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MUTEX != 0) && !defined(EVR_RTX_MUTEX_CREATED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxMutexCreated (osMutexId_t mutex_id, const char *name);
N#else
S#define EvrRtxMutexCreated(mutex_id, name)
N#endif
N
N/**
N  \brief  Event on mutex name retrieve (API)
N  \param[in]  mutex_id  mutex ID obtained by \ref osMutexNew.
N  \param[in]  name      pointer to mutex object name.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MUTEX != 0) && !defined(EVR_RTX_MUTEX_GET_NAME_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxMutexGetName (osMutexId_t mutex_id, const char *name);
N#else
S#define EvrRtxMutexGetName(mutex_id, name)
N#endif
N
N/**
N  \brief  Event on mutex acquire (API)
N  \param[in]  mutex_id  mutex ID obtained by \ref osMutexNew.
N  \param[in]  timeout   \ref CMSIS_RTOS_TimeOutValue or 0 in case of no time-out.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MUTEX != 0) && !defined(EVR_RTX_MUTEX_ACQUIRE_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxMutexAcquire (osMutexId_t mutex_id, uint32_t timeout);
N#else
S#define EvrRtxMutexAcquire(mutex_id, timeout)
N#endif
N
N/**
N  \brief  Event on pending mutex acquire (Op)
N  \param[in]  mutex_id  mutex ID obtained by \ref osMutexNew.
N  \param[in]  timeout   \ref CMSIS_RTOS_TimeOutValue or 0 in case of no time-out.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MUTEX != 0) && !defined(EVR_RTX_MUTEX_ACQUIRE_PENDING_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxMutexAcquirePending (osMutexId_t mutex_id, uint32_t timeout);
N#else
S#define EvrRtxMutexAcquirePending(mutex_id, timeout)
N#endif
N
N/**
N  \brief  Event on mutex acquire timeout (Op)
N  \param[in]  mutex_id  mutex ID obtained by \ref osMutexNew.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MUTEX != 0) && !defined(EVR_RTX_MUTEX_ACQUIRE_TIMEOUT_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxMutexAcquireTimeout (osMutexId_t mutex_id);
N#else
S#define EvrRtxMutexAcquireTimeout(mutex_id)
N#endif
N
N/**
N  \brief  Event on successful mutex acquire (Op)
N  \param[in]  mutex_id  mutex ID obtained by \ref osMutexNew.
N  \param[in]  lock      current number of times mutex object is locked.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MUTEX != 0) && !defined(EVR_RTX_MUTEX_ACQUIRED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxMutexAcquired (osMutexId_t mutex_id, uint32_t lock);
N#else
S#define EvrRtxMutexAcquired(mutex_id, lock)
N#endif
N
N/**
N  \brief  Event on unsuccessful mutex acquire (Op)
N  \param[in]  mutex_id  mutex ID obtained by \ref osMutexNew.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MUTEX != 0) && !defined(EVR_RTX_MUTEX_NOT_ACQUIRED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxMutexNotAcquired (osMutexId_t mutex_id);
N#else
S#define EvrRtxMutexNotAcquired(mutex_id)
N#endif
N
N/**
N  \brief  Event on mutex release (API)
N  \param[in]  mutex_id  mutex ID obtained by \ref osMutexNew.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MUTEX != 0) && !defined(EVR_RTX_MUTEX_RELEASE_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxMutexRelease (osMutexId_t mutex_id);
N#else
S#define EvrRtxMutexRelease(mutex_id)
N#endif
N
N/**
N  \brief  Event on successful mutex release (Op)
N  \param[in]  mutex_id  mutex ID obtained by \ref osMutexNew.
N  \param[in]  lock      current number of times mutex object is locked.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MUTEX != 0) && !defined(EVR_RTX_MUTEX_RELEASED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxMutexReleased (osMutexId_t mutex_id, uint32_t lock);
N#else
S#define EvrRtxMutexReleased(mutex_id, lock)
N#endif
N
N/**
N  \brief  Event on mutex owner retrieve (API)
N  \param[in]  mutex_id  mutex ID obtained by \ref osMutexNew.
N  \param[in]  thread_id thread ID obtained by \ref osThreadNew or \ref osThreadGetId.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MUTEX != 0) && !defined(EVR_RTX_MUTEX_GET_OWNER_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxMutexGetOwner (osMutexId_t mutex_id, osThreadId_t thread_id);
N#else
S#define EvrRtxMutexGetOwner(mutex_id, thread_id)
N#endif
N
N/**
N  \brief  Event on mutex delete (API)
N  \param[in]  mutex_id  mutex ID obtained by \ref osMutexNew.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MUTEX != 0) && !defined(EVR_RTX_MUTEX_DELETE_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxMutexDelete (osMutexId_t mutex_id);
N#else
S#define EvrRtxMutexDelete(mutex_id)
N#endif
N
N/**
N  \brief  Event on successful mutex delete (Op)
N  \param[in]  mutex_id  mutex ID obtained by \ref osMutexNew.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MUTEX != 0) && !defined(EVR_RTX_MUTEX_DESTROYED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxMutexDestroyed (osMutexId_t mutex_id);
N#else
S#define EvrRtxMutexDestroyed(mutex_id)
N#endif
N
N
N//  ==== Semaphore Events ====
N
N/**
N  \brief  Event on semaphore error (Error)
N  \param[in]  semaphore_id  semaphore ID obtained by \ref osSemaphoreNew or NULL when ID is unknown.
N  \param[in]  status        extended execution status.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_SEMAPHORE != 0) && !defined(EVR_RTX_SEMAPHORE_ERROR_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxSemaphoreError (osSemaphoreId_t semaphore_id, int32_t status);
N#else
S#define EvrRtxSemaphoreError(semaphore_id, status)
N#endif
N
N/**
N  \brief  Event on semaphore create and initialize (API)
N  \param[in]  max_count     maximum number of available tokens.
N  \param[in]  initial_count initial number of available tokens.
N  \param[in]  attr          semaphore attributes.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_SEMAPHORE != 0) && !defined(EVR_RTX_SEMAPHORE_NEW_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr);
N#else
S#define EvrRtxSemaphoreNew(max_count, initial_count, attr)
N#endif
N
N/**
N  \brief  Event on successful semaphore create (Op)
N  \param[in]  semaphore_id  semaphore ID obtained by \ref osSemaphoreNew.
N  \param[in]  name          pointer to semaphore object name.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_SEMAPHORE != 0) && !defined(EVR_RTX_SEMAPHORE_CREATED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxSemaphoreCreated (osSemaphoreId_t semaphore_id, const char *name);
N#else
S#define EvrRtxSemaphoreCreated(semaphore_id, name)
N#endif
N
N/**
N  \brief  Event on semaphore name retrieve (API)
N  \param[in]  semaphore_id  semaphore ID obtained by \ref osSemaphoreNew.
N  \param[in]  name          pointer to semaphore object name.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_SEMAPHORE != 0) && !defined(EVR_RTX_SEMAPHORE_GET_NAME_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxSemaphoreGetName (osSemaphoreId_t semaphore_id, const char *name);
N#else
S#define EvrRtxSemaphoreGetName(semaphore_id, name)
N#endif
N
N/**
N  \brief  Event on semaphore acquire (API)
N  \param[in]  semaphore_id  semaphore ID obtained by \ref osSemaphoreNew.
N  \param[in]  timeout       \ref CMSIS_RTOS_TimeOutValue or 0 in case of no time-out.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_SEMAPHORE != 0) && !defined(EVR_RTX_SEMAPHORE_ACQUIRE_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout);
N#else
S#define EvrRtxSemaphoreAcquire(semaphore_id, timeout)
N#endif
N
N/**
N  \brief  Event on pending semaphore acquire (Op)
N  \param[in]  semaphore_id  semaphore ID obtained by \ref osSemaphoreNew.
N  \param[in]  timeout       \ref CMSIS_RTOS_TimeOutValue or 0 in case of no time-out.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_SEMAPHORE != 0) && !defined(EVR_RTX_SEMAPHORE_ACQUIRE_PENDING_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxSemaphoreAcquirePending (osSemaphoreId_t semaphore_id, uint32_t timeout);
N#else
S#define EvrRtxSemaphoreAcquirePending(semaphore_id, timeout)
N#endif
N
N/**
N  \brief  Event on semaphore acquire timeout (Op)
N  \param[in]  semaphore_id  semaphore ID obtained by \ref osSemaphoreNew.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_SEMAPHORE != 0) && !defined(EVR_RTX_SEMAPHORE_ACQUIRE_TIMEOUT_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxSemaphoreAcquireTimeout (osSemaphoreId_t semaphore_id);
N#else
S#define EvrRtxSemaphoreAcquireTimeout(semaphore_id)
N#endif
N
N/**
N  \brief  Event on successful semaphore acquire (Op)
N  \param[in]  semaphore_id  semaphore ID obtained by \ref osSemaphoreNew.
N  \param[in]  tokens        number of available tokens.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_SEMAPHORE != 0) && !defined(EVR_RTX_SEMAPHORE_ACQUIRED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxSemaphoreAcquired (osSemaphoreId_t semaphore_id, uint32_t tokens);
N#else
S#define EvrRtxSemaphoreAcquired(semaphore_id, tokens)
N#endif
N
N/**
N  \brief  Event on unsuccessful semaphore acquire (Op)
N  \param[in]  semaphore_id  semaphore ID obtained by \ref osSemaphoreNew.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_SEMAPHORE != 0) && !defined(EVR_RTX_SEMAPHORE_NOT_ACQUIRED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxSemaphoreNotAcquired (osSemaphoreId_t semaphore_id);
N#else
S#define EvrRtxSemaphoreNotAcquired(semaphore_id)
N#endif
N
N/**
N  \brief  Event on semaphore release (API)
N  \param[in]  semaphore_id  semaphore ID obtained by \ref osSemaphoreNew.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_SEMAPHORE != 0) && !defined(EVR_RTX_SEMAPHORE_RELEASE_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxSemaphoreRelease (osSemaphoreId_t semaphore_id);
N#else
S#define EvrRtxSemaphoreRelease(semaphore_id)
N#endif
N
N/**
N  \brief  Event on successful semaphore release (Op)
N  \param[in]  semaphore_id  semaphore ID obtained by \ref osSemaphoreNew.
N  \param[in]  tokens        number of available tokens.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_SEMAPHORE != 0) && !defined(EVR_RTX_SEMAPHORE_RELEASED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxSemaphoreReleased (osSemaphoreId_t semaphore_id, uint32_t tokens);
N#else
S#define EvrRtxSemaphoreReleased(semaphore_id, tokens)
N#endif
N
N/**
N  \brief  Event on semaphore token count retrieval (API)
N  \param[in]  semaphore_id  semaphore ID obtained by \ref osSemaphoreNew.
N  \param[in]  count         current number of available tokens.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_SEMAPHORE != 0) && !defined(EVR_RTX_SEMAPHORE_GET_COUNT_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxSemaphoreGetCount (osSemaphoreId_t semaphore_id, uint32_t count);
N#else
S#define EvrRtxSemaphoreGetCount(semaphore_id, count)
N#endif
N
N/**
N  \brief  Event on semaphore delete (API)
N  \param[in]  semaphore_id  semaphore ID obtained by \ref osSemaphoreNew.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_SEMAPHORE != 0) && !defined(EVR_RTX_SEMAPHORE_DELETE_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxSemaphoreDelete (osSemaphoreId_t semaphore_id);
N#else
S#define EvrRtxSemaphoreDelete(semaphore_id)
N#endif
N
N/**
N  \brief  Event on successful semaphore delete (Op)
N  \param[in]  semaphore_id  semaphore ID obtained by \ref osSemaphoreNew.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_SEMAPHORE != 0) && !defined(EVR_RTX_SEMAPHORE_DESTROYED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxSemaphoreDestroyed (osSemaphoreId_t semaphore_id);
N#else
S#define EvrRtxSemaphoreDestroyed(semaphore_id)
N#endif
N
N
N//  ==== Memory Pool Events ====
N
N/**
N  \brief  Event on memory pool error (Error)
N  \param[in]  mp_id         memory pool ID obtained by \ref osMemoryPoolNew or NULL when ID is unknown.
N  \param[in]  status        extended execution status.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MEMPOOL != 0) && !defined(EVR_RTX_MEMORY_POOL_ERROR_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxMemoryPoolError (osMemoryPoolId_t mp_id, int32_t status);
N#else
S#define EvrRtxMemoryPoolError(mp_id, status)
N#endif
N
N/**
N  \brief  Event on memory pool create and initialize (API)
N  \param[in]  block_count   maximum number of memory blocks in memory pool.
N  \param[in]  block_size    memory block size in bytes.
N  \param[in]  attr          memory pool attributes; NULL: default values.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MEMPOOL != 0) && !defined(EVR_RTX_MEMORY_POOL_NEW_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxMemoryPoolNew (uint32_t block_count, uint32_t block_size, const osMemoryPoolAttr_t *attr);
N#else
S#define EvrRtxMemoryPoolNew(block_count, block_size, attr)
N#endif
N
N/**
N  \brief  Event on successful memory pool create (Op)
N  \param[in]  mp_id         memory pool ID obtained by \ref osMemoryPoolNew.
N  \param[in]  name          pointer to memory pool object name.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MEMPOOL != 0) && !defined(EVR_RTX_MEMORY_POOL_CREATED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxMemoryPoolCreated (osMemoryPoolId_t mp_id, const char *name);
N#else
S#define EvrRtxMemoryPoolCreated(mp_id, name)
N#endif
N
N/**
N  \brief  Event on memory pool name retrieve (API)
N  \param[in]  mp_id         memory pool ID obtained by \ref osMemoryPoolNew.
N  \param[in]  name          pointer to memory pool object name.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MEMPOOL != 0) && !defined(EVR_RTX_MEMORY_POOL_GET_NAME_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxMemoryPoolGetName (osMemoryPoolId_t mp_id, const char *name);
N#else
S#define EvrRtxMemoryPoolGetName(mp_id, name)
N#endif
N
N/**
N  \brief  Event on memory pool allocation (API)
N  \param[in]  mp_id         memory pool ID obtained by \ref osMemoryPoolNew.
N  \param[in]  timeout       \ref CMSIS_RTOS_TimeOutValue or 0 in case of no time-out.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MEMPOOL != 0) && !defined(EVR_RTX_MEMORY_POOL_ALLOC_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxMemoryPoolAlloc (osMemoryPoolId_t mp_id, uint32_t timeout);
N#else
S#define EvrRtxMemoryPoolAlloc(mp_id, timeout)
N#endif
N
N/**
N  \brief  Event on pending memory pool allocation (Op)
N  \param[in]  mp_id         memory pool ID obtained by \ref osMemoryPoolNew.
N  \param[in]  timeout       \ref CMSIS_RTOS_TimeOutValue or 0 in case of no time-out.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MEMPOOL != 0) && !defined(EVR_RTX_MEMORY_POOL_ALLOC_PENDING_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxMemoryPoolAllocPending (osMemoryPoolId_t mp_id, uint32_t timeout);
N#else
S#define EvrRtxMemoryPoolAllocPending(mp_id, timeout)
N#endif
N
N/**
N  \brief  Event on memory pool allocation timeout (Op)
N  \param[in]  mp_id         memory pool ID obtained by \ref osMemoryPoolNew.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MEMPOOL != 0) && !defined(EVR_RTX_MEMORY_POOL_ALLOC_TIMEOUT_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxMemoryPoolAllocTimeout (osMemoryPoolId_t mp_id);
N#else
S#define EvrRtxMemoryPoolAllocTimeout(mp_id)
N#endif
N
N/**
N  \brief  Event on successful memory pool allocation (Op)
N  \param[in]  mp_id         memory pool ID obtained by \ref osMemoryPoolNew.
N  \param[in]  block         address of the allocated memory block.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MEMPOOL != 0) && !defined(EVR_RTX_MEMORY_POOL_ALLOCATED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxMemoryPoolAllocated (osMemoryPoolId_t mp_id, void *block);
N#else
S#define EvrRtxMemoryPoolAllocated(mp_id, block)
N#endif
N
N/**
N  \brief  Event on unsuccessful memory pool allocation (Op)
N  \param[in]  mp_id         memory pool ID obtained by \ref osMemoryPoolNew.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MEMPOOL != 0) && !defined(EVR_RTX_MEMORY_POOL_ALLOC_FAILED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxMemoryPoolAllocFailed (osMemoryPoolId_t mp_id);
N#else
S#define EvrRtxMemoryPoolAllocFailed(mp_id)
N#endif
N
N/**
N  \brief  Event on memory pool free (API)
N  \param[in]  mp_id         memory pool ID obtained by \ref osMemoryPoolNew.
N  \param[in]  block         address of the allocated memory block to be returned to the memory pool.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MEMPOOL != 0) && !defined(EVR_RTX_MEMORY_POOL_FREE_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxMemoryPoolFree (osMemoryPoolId_t mp_id, void *block);
N#else
S#define EvrRtxMemoryPoolFree(mp_id, block)
N#endif
N
N/**
N  \brief  Event on successful memory pool free (Op)
N  \param[in]  mp_id         memory pool ID obtained by \ref osMemoryPoolNew.
N  \param[in]  block         address of the allocated memory block to be returned to the memory pool.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MEMPOOL != 0) && !defined(EVR_RTX_MEMORY_POOL_DEALLOCATED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxMemoryPoolDeallocated (osMemoryPoolId_t mp_id, void *block);
N#else
S#define EvrRtxMemoryPoolDeallocated(mp_id, block)
N#endif
N
N/**
N  \brief  Event on unsuccessful memory pool free (Op)
N  \param[in]  mp_id         memory pool ID obtained by \ref osMemoryPoolNew.
N  \param[in]  block         address of the allocated memory block to be returned to the memory pool.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MEMPOOL != 0) && !defined(EVR_RTX_MEMORY_POOL_FREE_FAILED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxMemoryPoolFreeFailed (osMemoryPoolId_t mp_id, void *block);
N#else
S#define EvrRtxMemoryPoolFreeFailed(mp_id, block)
N#endif
N
N/**
N  \brief  Event on memory pool capacity retrieve (API)
N  \param[in]  mp_id         memory pool ID obtained by \ref osMemoryPoolNew.
N  \param[in]  capacity      maximum number of memory blocks.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MEMPOOL != 0) && !defined(EVR_RTX_MEMORY_POOL_GET_CAPACITY_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxMemoryPoolGetCapacity (osMemoryPoolId_t mp_id, uint32_t capacity);
N#else
S#define EvrRtxMemoryPoolGetCapacity(mp_id, capacity)
N#endif
N
N/**
N  \brief  Event on memory pool block size retrieve (API)
N  \param[in]  mp_id         memory pool ID obtained by \ref osMemoryPoolNew.
N  \param[in]  block_size    memory block size in bytes.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MEMPOOL != 0) && !defined(EVR_RTX_MEMORY_POOL_GET_BLOCK_SZIE_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxMemoryPoolGetBlockSize (osMemoryPoolId_t mp_id, uint32_t block_size);
N#else
S#define EvrRtxMemoryPoolGetBlockSize(mp_id, block_size)
N#endif
N
N/**
N  \brief  Event on used memory pool blocks retrieve (API)
N  \param[in]  mp_id         memory pool ID obtained by \ref osMemoryPoolNew.
N  \param[in]  count         number of memory blocks used.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MEMPOOL != 0) && !defined(EVR_RTX_MEMORY_POOL_GET_COUNT_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxMemoryPoolGetCount (osMemoryPoolId_t mp_id, uint32_t count);
N#else
S#define EvrRtxMemoryPoolGetCount(mp_id, count)
N#endif
N
N/**
N  \brief  Event on available memory pool blocks retrieve (API)
N  \param[in]  mp_id         memory pool ID obtained by \ref osMemoryPoolNew.
N  \param[in]  space         number of memory blocks available.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MEMPOOL != 0) && !defined(EVR_RTX_MEMORY_POOL_GET_SPACE_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxMemoryPoolGetSpace (osMemoryPoolId_t mp_id, uint32_t space);
N#else
S#define EvrRtxMemoryPoolGetSpace(mp_id, space)
N#endif
N
N/**
N  \brief  Event on memory pool delete (API)
N  \param[in]  mp_id         memory pool ID obtained by \ref osMemoryPoolNew.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MEMPOOL != 0) && !defined(EVR_RTX_MEMORY_POOL_DELETE_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxMemoryPoolDelete (osMemoryPoolId_t mp_id);
N#else
S#define EvrRtxMemoryPoolDelete(mp_id)
N#endif
N
N/**
N  \brief  Event on successful memory pool delete (Op)
N  \param[in]  mp_id         memory pool ID obtained by \ref osMemoryPoolNew.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MEMPOOL != 0) && !defined(EVR_RTX_MEMORY_POOL_DESTROYED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxMemoryPoolDestroyed (osMemoryPoolId_t mp_id);
N#else
S#define EvrRtxMemoryPoolDestroyed(mp_id)
N#endif
N
N
N//  ==== Message Queue Events ====
N
N/**
N  \brief  Event on message queue error (Error)
N  \param[in]  mq_id         message queue ID obtained by \ref osMessageQueueNew or NULL when ID is unknown.
N  \param[in]  status        extended execution status.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MSGQUEUE != 0) && !defined(EVR_RTX_MESSAGE_QUEUE_ERROR_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxMessageQueueError (osMessageQueueId_t mq_id, int32_t status);
N#else
S#define EvrRtxMessageQueueError(mq_id, status)
N#endif
N
N/**
N  \brief  Event on message queue create and initialization (API)
N  \param[in]  msg_count     maximum number of messages in queue.
N  \param[in]  msg_size      maximum message size in bytes.
N  \param[in]  attr          message queue attributes; NULL: default values.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MSGQUEUE != 0) && !defined(EVR_RTX_MESSAGE_QUEUE_NEW_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr);
N#else
S#define EvrRtxMessageQueueNew(msg_count, msg_size, attr)
N#endif
N
N/**
N  \brief  Event on successful message queue create (Op)
N  \param[in]  mq_id         message queue ID obtained by \ref osMessageQueueNew.
N  \param[in]  name          pointer to message queue object name.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MSGQUEUE != 0) && !defined(EVR_RTX_MESSAGE_QUEUE_CREATED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxMessageQueueCreated (osMessageQueueId_t mq_id, const char *name);
N#else
S#define EvrRtxMessageQueueCreated(mq_id, name)
N#endif
N
N/**
N  \brief  Event on message queue name retrieve(API)
N  \param[in]  mq_id         message queue ID obtained by \ref osMessageQueueNew.
N  \param[in]  name          pointer to message queue object name.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MSGQUEUE != 0) && !defined(EVR_RTX_MESSAGE_QUEUE_GET_NAME_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxMessageQueueGetName (osMessageQueueId_t mq_id, const char *name);
N#else
S#define EvrRtxMessageQueueGetName(mq_id, name)
N#endif
N
N/**
N  \brief  Event on message put (API)
N  \param[in]  mq_id         message queue ID obtained by \ref osMessageQueueNew.
N  \param[in]  msg_ptr       pointer to buffer with message to put into a queue.
N  \param[in]  msg_prio      message priority.
N  \param[in]  timeout       \ref CMSIS_RTOS_TimeOutValue or 0 in case of no time-out.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MSGQUEUE != 0) && !defined(EVR_RTX_MESSAGE_QUEUE_PUT_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout);
N#else
S#define EvrRtxMessageQueuePut(mq_id, msg_ptr, msg_prio, timeout)
N#endif
N
N/**
N  \brief  Event on pending message put (Op)
N  \param[in]  mq_id         message queue ID obtained by \ref osMessageQueueNew.
N  \param[in]  msg_ptr       pointer to buffer with message to put into a queue.
N  \param[in]  timeout       \ref CMSIS_RTOS_TimeOutValue or 0 in case of no time-out.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MSGQUEUE != 0) && !defined(EVR_RTX_MESSAGE_QUEUE_PUT_PENDING_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxMessageQueuePutPending (osMessageQueueId_t mq_id, const void *msg_ptr, uint32_t timeout);
N#else
S#define EvrRtxMessageQueuePutPending(mq_id, msg_ptr, timeout)
N#endif
N
N/**
N  \brief  Event on message put timeout (Op)
N  \param[in]  mq_id         message queue ID obtained by \ref osMessageQueueNew.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MSGQUEUE != 0) && !defined(EVR_RTX_MESSAGE_QUEUE_PUT_TIMEOUT_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxMessageQueuePutTimeout (osMessageQueueId_t mq_id);
N#else
S#define EvrRtxMessageQueuePutTimeout(mq_id)
N#endif
N
N/**
N  \brief  Event on pending message insert (Op)
N  \param[in]  mq_id         message queue ID obtained by \ref osMessageQueueNew.
N  \param[in]  msg_ptr       pointer to buffer with message to put into a queue.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MSGQUEUE != 0) && !defined(EVR_RTX_MESSAGE_QUEUE_INSERT_PENDING_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxMessageQueueInsertPending (osMessageQueueId_t mq_id, const void *msg_ptr);
N#else
S#define EvrRtxMessageQueueInsertPending(mq_id, msg_ptr)
N#endif
N
N/**
N  \brief  Event on successful message insert (Op)
N  \param[in]  mq_id         message queue ID obtained by \ref osMessageQueueNew.
N  \param[in]  msg_ptr       pointer to buffer with message to put into a queue.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MSGQUEUE != 0) && !defined(EVR_RTX_MESSAGE_QUEUE_INSERTED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxMessageQueueInserted (osMessageQueueId_t mq_id, const void *msg_ptr);
N#else
S#define EvrRtxMessageQueueInserted(mq_id, msg_ptr)
N#endif
N
N/**
N  \brief  Event on unsuccessful message insert (Op)
N  \param[in]  mq_id         message queue ID obtained by \ref osMessageQueueNew.
N  \param[in]  msg_ptr       pointer to buffer with message to put into a queue.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MSGQUEUE != 0) && !defined(EVR_RTX_MESSAGE_QUEUE_NOT_INSERTED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxMessageQueueNotInserted (osMessageQueueId_t mq_id, const void *msg_ptr);
N#else
S#define EvrRtxMessageQueueNotInserted(mq_id, msg_ptr)
N#endif
N
N/**
N  \brief  Event on message get (API)
N  \param[in]  mq_id         message queue ID obtained by \ref osMessageQueueNew.
N  \param[in]  msg_ptr       pointer to buffer for message to get from a queue.
N  \param[in]  msg_prio      message priority.
N  \param[in]  timeout       \ref CMSIS_RTOS_TimeOutValue or 0 in case of no time-out.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MSGQUEUE != 0) && !defined(EVR_RTX_MESSAGE_QUEUE_GET_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout);
N#else
S#define EvrRtxMessageQueueGet(mq_id, msg_ptr, msg_prio, timeout)
N#endif
N
N/**
N  \brief  Event on pending message get (Op)
N  \param[in]  mq_id         message queue ID obtained by \ref osMessageQueueNew.
N  \param[in]  msg_ptr       pointer to buffer for message to get from a queue.
N  \param[in]  timeout       \ref CMSIS_RTOS_TimeOutValue or 0 in case of no time-out.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MSGQUEUE != 0) && !defined(EVR_RTX_MESSAGE_QUEUE_GET_PENDING_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxMessageQueueGetPending (osMessageQueueId_t mq_id, void *msg_ptr, uint32_t timeout);
N#else
S#define EvrRtxMessageQueueGetPending(mq_id, msg_ptr, timeout)
N#endif
N
N/**
N  \brief  Event on message get timeout (Op)
N  \param[in]  mq_id         message queue ID obtained by \ref osMessageQueueNew.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MSGQUEUE != 0) && !defined(EVR_RTX_MESSAGE_QUEUE_GET_TIMEOUT_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxMessageQueueGetTimeout (osMessageQueueId_t mq_id);
N#else
S#define EvrRtxMessageQueueGetTimeout(mq_id)
N#endif
N
N/**
N  \brief  Event on successful message get (Op)
N  \param[in]  mq_id         message queue ID obtained by \ref osMessageQueueNew.
N  \param[in]  msg_ptr       pointer to buffer for message to get from a queue.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MSGQUEUE != 0) && !defined(EVR_RTX_MESSAGE_QUEUE_RETRIEVED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxMessageQueueRetrieved (osMessageQueueId_t mq_id, void *msg_ptr);
N#else
S#define EvrRtxMessageQueueRetrieved(mq_id, msg_ptr)
N#endif
N
N/**
N  \brief  Event on unsuccessful message get (Op)
N  \param[in]  mq_id         message queue ID obtained by \ref osMessageQueueNew.
N  \param[in]  msg_ptr       pointer to buffer for message to get from a queue.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MSGQUEUE != 0) && !defined(EVR_RTX_MESSAGE_QUEUE_NOT_RETRIEVED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxMessageQueueNotRetrieved (osMessageQueueId_t mq_id, void *msg_ptr);
N#else
S#define EvrRtxMessageQueueNotRetrieved(mq_id, msg_ptr)
N#endif
N
N/**
N  \brief  Event on message queue capacity retrieve (API)
N  \param[in]  mq_id         message queue ID obtained by \ref osMessageQueueNew.
N  \param[in]  capacity      maximum number of messages.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MSGQUEUE != 0) && !defined(EVR_RTX_MESSAGE_QUEUE_GET_CAPACITY_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxMessageQueueGetCapacity (osMessageQueueId_t mq_id, uint32_t capacity);
N#else
S#define EvrRtxMessageQueueGetCapacity(mq_id, capacity)
N#endif
N
N/**
N  \brief  Event on message queue message size retrieve (API)
N  \param[in]  mq_id         message queue ID obtained by \ref osMessageQueueNew.
N  \param[in]  msg_size      maximum message size in bytes.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MSGQUEUE != 0) && !defined(EVR_RTX_MESSAGE_QUEUE_GET_MSG_SIZE_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxMessageQueueGetMsgSize (osMessageQueueId_t mq_id, uint32_t msg_size);
N#else
S#define EvrRtxMessageQueueGetMsgSize(mq_id, msg_size)
N#endif
N
N/**
N  \brief  Event on message queue message count retrieve (API)
N  \param[in]  mq_id         message queue ID obtained by \ref osMessageQueueNew.
N  \param[in]  count         number of queued messages.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MSGQUEUE != 0) && !defined(EVR_RTX_MESSAGE_QUEUE_GET_COUNT_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxMessageQueueGetCount (osMessageQueueId_t mq_id, uint32_t count);
N#else
S#define EvrRtxMessageQueueGetCount(mq_id, count)
N#endif
N
N/**
N  \brief  Event on message queue message slots retrieve (API)
N  \param[in]  mq_id         message queue ID obtained by \ref osMessageQueueNew.
N  \param[in]  space         number of available slots for messages.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MSGQUEUE != 0) && !defined(EVR_RTX_MESSAGE_QUEUE_GET_SPACE_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxMessageQueueGetSpace (osMessageQueueId_t mq_id, uint32_t space);
N#else
S#define EvrRtxMessageQueueGetSpace(mq_id, space)
N#endif
N
N/**
N  \brief  Event on message queue reset (API)
N  \param[in]  mq_id         message queue ID obtained by \ref osMessageQueueNew.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MSGQUEUE != 0) && !defined(EVR_RTX_MESSAGE_QUEUE_RESET_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxMessageQueueReset (osMessageQueueId_t mq_id);
N#else
S#define EvrRtxMessageQueueReset(mq_id)
N#endif
N
N/**
N  \brief  Event on successful message queue reset (Op)
N  \param[in]  mq_id         message queue ID obtained by \ref osMessageQueueNew.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MSGQUEUE != 0) && !defined(EVR_RTX_MESSAGE_QUEUE_RESET_DONE_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxMessageQueueResetDone (osMessageQueueId_t mq_id);
N#else
S#define EvrRtxMessageQueueResetDone(mq_id)
N#endif
N
N/**
N  \brief  Event on message queue delete (API)
N  \param[in]  mq_id         message queue ID obtained by \ref osMessageQueueNew.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MSGQUEUE != 0) && !defined(EVR_RTX_MESSAGE_QUEUE_DELETE_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxMessageQueueDelete (osMessageQueueId_t mq_id);
N#else
S#define EvrRtxMessageQueueDelete(mq_id)
N#endif
N
N/**
N  \brief  Event on successful message queue delete (Op)
N  \param[in]  mq_id         message queue ID obtained by \ref osMessageQueueNew.
N*/
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MSGQUEUE != 0) && !defined(EVR_RTX_MESSAGE_QUEUE_DESTROYED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
Nextern void EvrRtxMessageQueueDestroyed (osMessageQueueId_t mq_id);
N#else
S#define EvrRtxMessageQueueDestroyed(mq_id)
N#endif
N
N
N#endif  // RTX_EVR_H_
L 29 "F:/Users/fu/AppData/Local/Arm/Packs/ARM/CMSIS/5.9.0/CMSIS/RTOS2/RTX/Source/rtx_evr.c" 2
N
N#ifdef  RTE_Compiler_EventRecorder
S
S//lint -e923 -e9074 -e9078 [MISRA Note 13]
S
S/// Event IDs for "RTX Memory Management"
S#define EvtRtxMemoryInit                    EventID(EventLevelOp,     EvtRtxMemoryNo, 0x00U)
S#define EvtRtxMemoryAlloc                   EventID(EventLevelOp,     EvtRtxMemoryNo, 0x01U)
S#define EvtRtxMemoryFree                    EventID(EventLevelOp,     EvtRtxMemoryNo, 0x02U)
S#define EvtRtxMemoryBlockInit               EventID(EventLevelOp,     EvtRtxMemoryNo, 0x03U)
S#define EvtRtxMemoryBlockAlloc              EventID(EventLevelOp,     EvtRtxMemoryNo, 0x04U)
S#define EvtRtxMemoryBlockFree               EventID(EventLevelOp,     EvtRtxMemoryNo, 0x05U)
S
S/// Event IDs for "RTX Kernel"
S#define EvtRtxKernelError                   EventID(EventLevelError,  EvtRtxKernelNo, 0x00U)
S#define EvtRtxKernelInitialize              EventID(EventLevelAPI,    EvtRtxKernelNo, 0x01U)
S#define EvtRtxKernelInitialized             EventID(EventLevelOp,     EvtRtxKernelNo, 0x02U)
S#define EvtRtxKernelGetInfo                 EventID(EventLevelAPI,    EvtRtxKernelNo, 0x03U)
S#define EvtRtxKernelInfoRetrieved           EventID(EventLevelOp,     EvtRtxKernelNo, 0x04U)
S#define EvtRtxKernelInfoRetrieved_Detail    EventID(EventLevelDetail, EvtRtxKernelNo, 0x05U)
S#define EvtRtxKernelGetState                EventID(EventLevelAPI,    EvtRtxKernelNo, 0x06U)
S#define EvtRtxKernelStart                   EventID(EventLevelAPI,    EvtRtxKernelNo, 0x07U)
S#define EvtRtxKernelStarted                 EventID(EventLevelOp,     EvtRtxKernelNo, 0x08U)
S#define EvtRtxKernelLock                    EventID(EventLevelAPI,    EvtRtxKernelNo, 0x09U)
S#define EvtRtxKernelLocked                  EventID(EventLevelOp,     EvtRtxKernelNo, 0x0AU)
S#define EvtRtxKernelUnlock                  EventID(EventLevelAPI,    EvtRtxKernelNo, 0x0BU)
S#define EvtRtxKernelUnlocked                EventID(EventLevelOp,     EvtRtxKernelNo, 0x0CU)
S#define EvtRtxKernelRestoreLock             EventID(EventLevelAPI,    EvtRtxKernelNo, 0x0DU)
S#define EvtRtxKernelLockRestored            EventID(EventLevelOp,     EvtRtxKernelNo, 0x0EU)
S#define EvtRtxKernelSuspend                 EventID(EventLevelAPI,    EvtRtxKernelNo, 0x0FU)
S#define EvtRtxKernelSuspended               EventID(EventLevelOp,     EvtRtxKernelNo, 0x10U)
S#define EvtRtxKernelResume                  EventID(EventLevelAPI,    EvtRtxKernelNo, 0x11U)
S#define EvtRtxKernelResumed                 EventID(EventLevelOp,     EvtRtxKernelNo, 0x12U)
S#define EvtRtxKernelGetTickCount            EventID(EventLevelAPI,    EvtRtxKernelNo, 0x13U)
S#define EvtRtxKernelGetTickFreq             EventID(EventLevelAPI,    EvtRtxKernelNo, 0x14U)
S#define EvtRtxKernelGetSysTimerCount        EventID(EventLevelAPI,    EvtRtxKernelNo, 0x15U)
S#define EvtRtxKernelGetSysTimerFreq         EventID(EventLevelAPI,    EvtRtxKernelNo, 0x16U)
S#define EvtRtxKernelErrorNotify             EventID(EventLevelError,  EvtRtxKernelNo, 0x19U)
S
S/// Event IDs for "RTX Thread"
S#define EvtRtxThreadError                   EventID(EventLevelError,  EvtRtxThreadNo, 0x00U)
S#define EvtRtxThreadNew                     EventID(EventLevelAPI,    EvtRtxThreadNo, 0x01U)
S#define EvtRtxThreadCreated_Addr            EventID(EventLevelOp,     EvtRtxThreadNo, 0x03U)
S#define EvtRtxThreadCreated_Name            EventID(EventLevelOp,     EvtRtxThreadNo, 0x2CU)
S#define EvtRtxThreadGetName                 EventID(EventLevelAPI,    EvtRtxThreadNo, 0x04U)
S#define EvtRtxThreadGetId                   EventID(EventLevelAPI,    EvtRtxThreadNo, 0x06U)
S#define EvtRtxThreadGetState                EventID(EventLevelAPI,    EvtRtxThreadNo, 0x07U)
S#define EvtRtxThreadGetStackSize            EventID(EventLevelAPI,    EvtRtxThreadNo, 0x08U)
S#define EvtRtxThreadGetStackSpace           EventID(EventLevelAPI,    EvtRtxThreadNo, 0x09U)
S#define EvtRtxThreadSetPriority             EventID(EventLevelAPI,    EvtRtxThreadNo, 0x0AU)
S#define EvtRtxThreadPriorityUpdated         EventID(EventLevelOp,     EvtRtxThreadNo, 0x2DU)
S#define EvtRtxThreadGetPriority             EventID(EventLevelAPI,    EvtRtxThreadNo, 0x0BU)
S#define EvtRtxThreadYield                   EventID(EventLevelAPI,    EvtRtxThreadNo, 0x0CU)
S#define EvtRtxThreadSuspend                 EventID(EventLevelAPI,    EvtRtxThreadNo, 0x0DU)
S#define EvtRtxThreadSuspended               EventID(EventLevelOp,     EvtRtxThreadNo, 0x0EU)
S#define EvtRtxThreadResume                  EventID(EventLevelAPI,    EvtRtxThreadNo, 0x0FU)
S#define EvtRtxThreadResumed                 EventID(EventLevelOp,     EvtRtxThreadNo, 0x10U)
S#define EvtRtxThreadDetach                  EventID(EventLevelAPI,    EvtRtxThreadNo, 0x11U)
S#define EvtRtxThreadDetached                EventID(EventLevelOp,     EvtRtxThreadNo, 0x12U)
S#define EvtRtxThreadJoin                    EventID(EventLevelAPI,    EvtRtxThreadNo, 0x13U)
S#define EvtRtxThreadJoinPending             EventID(EventLevelOp,     EvtRtxThreadNo, 0x14U)
S#define EvtRtxThreadJoined                  EventID(EventLevelOp,     EvtRtxThreadNo, 0x15U)
S#define EvtRtxThreadBlocked                 EventID(EventLevelDetail, EvtRtxThreadNo, 0x16U)
S#define EvtRtxThreadUnblocked               EventID(EventLevelDetail, EvtRtxThreadNo, 0x17U)
S#define EvtRtxThreadPreempted               EventID(EventLevelDetail, EvtRtxThreadNo, 0x18U)
S#define EvtRtxThreadSwitched                EventID(EventLevelOp,     EvtRtxThreadNo, 0x19U)
S#define EvtRtxThreadExit                    EventID(EventLevelAPI,    EvtRtxThreadNo, 0x1AU)
S#define EvtRtxThreadTerminate               EventID(EventLevelAPI,    EvtRtxThreadNo, 0x1BU)
S#define EvtRtxThreadDestroyed               EventID(EventLevelOp,     EvtRtxThreadNo, 0x1CU)
S#define EvtRtxThreadGetCount                EventID(EventLevelAPI,    EvtRtxThreadNo, 0x1DU)
S#define EvtRtxThreadEnumerate               EventID(EventLevelAPI,    EvtRtxThreadNo, 0x1EU)
S
S/// Event IDs for "RTX Thread Flags"
S#define EvtRtxThreadFlagsError              EventID(EventLevelError,  EvtRtxThreadFlagsNo, 0x00U)
S#define EvtRtxThreadFlagsSet                EventID(EventLevelAPI,    EvtRtxThreadFlagsNo, 0x01U)
S#define EvtRtxThreadFlagsSetDone            EventID(EventLevelOp,     EvtRtxThreadFlagsNo, 0x02U)
S#define EvtRtxThreadFlagsClear              EventID(EventLevelAPI,    EvtRtxThreadFlagsNo, 0x03U)
S#define EvtRtxThreadFlagsClearDone          EventID(EventLevelOp,     EvtRtxThreadFlagsNo, 0x04U)
S#define EvtRtxThreadFlagsGet                EventID(EventLevelAPI,    EvtRtxThreadFlagsNo, 0x05U)
S#define EvtRtxThreadFlagsWait               EventID(EventLevelAPI,    EvtRtxThreadFlagsNo, 0x06U)
S#define EvtRtxThreadFlagsWaitPending        EventID(EventLevelOp,     EvtRtxThreadFlagsNo, 0x07U)
S#define EvtRtxThreadFlagsWaitTimeout        EventID(EventLevelOp,     EvtRtxThreadFlagsNo, 0x08U)
S#define EvtRtxThreadFlagsWaitCompleted      EventID(EventLevelOp,     EvtRtxThreadFlagsNo, 0x09U)
S#define EvtRtxThreadFlagsWaitNotCompleted   EventID(EventLevelOp,     EvtRtxThreadFlagsNo, 0x0AU)
S
S/// Event IDs for "RTX Generic Wait"
S#define EvtRtxDelayError                    EventID(EventLevelError,  EvtRtxWaitNo, 0x00U)
S#define EvtRtxDelay                         EventID(EventLevelAPI,    EvtRtxWaitNo, 0x01U)
S#define EvtRtxDelayUntil                    EventID(EventLevelAPI,    EvtRtxWaitNo, 0x02U)
S#define EvtRtxDelayStarted                  EventID(EventLevelOp,     EvtRtxWaitNo, 0x03U)
S#define EvtRtxDelayUntilStarted             EventID(EventLevelOp,     EvtRtxWaitNo, 0x04U)
S#define EvtRtxDelayCompleted                EventID(EventLevelOp,     EvtRtxWaitNo, 0x05U)
S
S/// Event IDs for "RTX Timer"
S#define EvtRtxTimerError                    EventID(EventLevelError,  EvtRtxTimerNo, 0x00U)
S#define EvtRtxTimerCallback                 EventID(EventLevelOp,     EvtRtxTimerNo, 0x01U)
S#define EvtRtxTimerNew                      EventID(EventLevelAPI,    EvtRtxTimerNo, 0x02U)
S#define EvtRtxTimerCreated                  EventID(EventLevelOp,     EvtRtxTimerNo, 0x04U)
S#define EvtRtxTimerGetName                  EventID(EventLevelAPI,    EvtRtxTimerNo, 0x05U)
S#define EvtRtxTimerStart                    EventID(EventLevelAPI,    EvtRtxTimerNo, 0x07U)
S#define EvtRtxTimerStarted                  EventID(EventLevelOp,     EvtRtxTimerNo, 0x08U)
S#define EvtRtxTimerStop                     EventID(EventLevelAPI,    EvtRtxTimerNo, 0x09U)
S#define EvtRtxTimerStopped                  EventID(EventLevelOp,     EvtRtxTimerNo, 0x0AU)
S#define EvtRtxTimerIsRunning                EventID(EventLevelAPI,    EvtRtxTimerNo, 0x0BU)
S#define EvtRtxTimerDelete                   EventID(EventLevelAPI,    EvtRtxTimerNo, 0x0CU)
S#define EvtRtxTimerDestroyed                EventID(EventLevelOp,     EvtRtxTimerNo, 0x0DU)
S
S/// Event IDs for "RTX Event Flags"
S#define EvtRtxEventFlagsError               EventID(EventLevelError,  EvtRtxEventFlagsNo, 0x00U)
S#define EvtRtxEventFlagsNew                 EventID(EventLevelAPI,    EvtRtxEventFlagsNo, 0x01U)
S#define EvtRtxEventFlagsCreated             EventID(EventLevelOp,     EvtRtxEventFlagsNo, 0x03U)
S#define EvtRtxEventFlagsGetName             EventID(EventLevelAPI,    EvtRtxEventFlagsNo, 0x04U)
S#define EvtRtxEventFlagsSet                 EventID(EventLevelAPI,    EvtRtxEventFlagsNo, 0x06U)
S#define EvtRtxEventFlagsSetDone             EventID(EventLevelOp,     EvtRtxEventFlagsNo, 0x07U)
S#define EvtRtxEventFlagsClear               EventID(EventLevelAPI,    EvtRtxEventFlagsNo, 0x08U)
S#define EvtRtxEventFlagsClearDone           EventID(EventLevelOp,     EvtRtxEventFlagsNo, 0x09U)
S#define EvtRtxEventFlagsGet                 EventID(EventLevelAPI,    EvtRtxEventFlagsNo, 0x0AU)
S#define EvtRtxEventFlagsWait                EventID(EventLevelAPI,    EvtRtxEventFlagsNo, 0x0BU)
S#define EvtRtxEventFlagsWaitPending         EventID(EventLevelOp,     EvtRtxEventFlagsNo, 0x0CU)
S#define EvtRtxEventFlagsWaitTimeout         EventID(EventLevelOp,     EvtRtxEventFlagsNo, 0x0DU)
S#define EvtRtxEventFlagsWaitCompleted       EventID(EventLevelOp,     EvtRtxEventFlagsNo, 0x0EU)
S#define EvtRtxEventFlagsWaitNotCompleted    EventID(EventLevelOp,     EvtRtxEventFlagsNo, 0x0FU)
S#define EvtRtxEventFlagsDelete              EventID(EventLevelAPI,    EvtRtxEventFlagsNo, 0x10U)
S#define EvtRtxEventFlagsDestroyed           EventID(EventLevelOp,     EvtRtxEventFlagsNo, 0x11U)
S
S/// Event IDs for "RTX Mutex"
S#define EvtRtxMutexError                    EventID(EventLevelError,  EvtRtxMutexNo, 0x00U)
S#define EvtRtxMutexNew                      EventID(EventLevelAPI,    EvtRtxMutexNo, 0x01U)
S#define EvtRtxMutexCreated                  EventID(EventLevelOp,     EvtRtxMutexNo, 0x03U)
S#define EvtRtxMutexGetName                  EventID(EventLevelAPI,    EvtRtxMutexNo, 0x04U)
S#define EvtRtxMutexAcquire                  EventID(EventLevelAPI,    EvtRtxMutexNo, 0x06U)
S#define EvtRtxMutexAcquirePending           EventID(EventLevelOp,     EvtRtxMutexNo, 0x07U)
S#define EvtRtxMutexAcquireTimeout           EventID(EventLevelOp,     EvtRtxMutexNo, 0x08U)
S#define EvtRtxMutexAcquired                 EventID(EventLevelOp,     EvtRtxMutexNo, 0x09U)
S#define EvtRtxMutexNotAcquired              EventID(EventLevelOp,     EvtRtxMutexNo, 0x0AU)
S#define EvtRtxMutexRelease                  EventID(EventLevelAPI,    EvtRtxMutexNo, 0x0BU)
S#define EvtRtxMutexReleased                 EventID(EventLevelOp,     EvtRtxMutexNo, 0x0CU)
S#define EvtRtxMutexGetOwner                 EventID(EventLevelAPI,    EvtRtxMutexNo, 0x0DU)
S#define EvtRtxMutexDelete                   EventID(EventLevelAPI,    EvtRtxMutexNo, 0x0EU)
S#define EvtRtxMutexDestroyed                EventID(EventLevelOp,     EvtRtxMutexNo, 0x0FU)
S
S/// Event IDs for "RTX Semaphore"
S#define EvtRtxSemaphoreError                EventID(EventLevelError,  EvtRtxSemaphoreNo, 0x00U)
S#define EvtRtxSemaphoreNew                  EventID(EventLevelAPI,    EvtRtxSemaphoreNo, 0x01U)
S#define EvtRtxSemaphoreCreated              EventID(EventLevelOp,     EvtRtxSemaphoreNo, 0x03U)
S#define EvtRtxSemaphoreGetName              EventID(EventLevelAPI,    EvtRtxSemaphoreNo, 0x04U)
S#define EvtRtxSemaphoreAcquire              EventID(EventLevelAPI,    EvtRtxSemaphoreNo, 0x06U)
S#define EvtRtxSemaphoreAcquirePending       EventID(EventLevelOp,     EvtRtxSemaphoreNo, 0x07U)
S#define EvtRtxSemaphoreAcquireTimeout       EventID(EventLevelOp,     EvtRtxSemaphoreNo, 0x08U)
S#define EvtRtxSemaphoreAcquired             EventID(EventLevelOp,     EvtRtxSemaphoreNo, 0x09U)
S#define EvtRtxSemaphoreNotAcquired          EventID(EventLevelOp,     EvtRtxSemaphoreNo, 0x0AU)
S#define EvtRtxSemaphoreRelease              EventID(EventLevelAPI,    EvtRtxSemaphoreNo, 0x0BU)
S#define EvtRtxSemaphoreReleased             EventID(EventLevelOp,     EvtRtxSemaphoreNo, 0x0CU)
S#define EvtRtxSemaphoreGetCount             EventID(EventLevelAPI,    EvtRtxSemaphoreNo, 0x0DU)
S#define EvtRtxSemaphoreDelete               EventID(EventLevelAPI,    EvtRtxSemaphoreNo, 0x0EU)
S#define EvtRtxSemaphoreDestroyed            EventID(EventLevelOp,     EvtRtxSemaphoreNo, 0x0FU)
S
S/// Event IDs for "RTX Memory Pool"
S#define EvtRtxMemoryPoolError               EventID(EventLevelError,  EvtRtxMemoryPoolNo, 0x00U)
S#define EvtRtxMemoryPoolNew                 EventID(EventLevelAPI,    EvtRtxMemoryPoolNo, 0x01U)
S#define EvtRtxMemoryPoolCreated             EventID(EventLevelOp,     EvtRtxMemoryPoolNo, 0x03U)
S#define EvtRtxMemoryPoolGetName             EventID(EventLevelAPI,    EvtRtxMemoryPoolNo, 0x04U)
S#define EvtRtxMemoryPoolAlloc               EventID(EventLevelAPI,    EvtRtxMemoryPoolNo, 0x06U)
S#define EvtRtxMemoryPoolAllocPending        EventID(EventLevelOp,     EvtRtxMemoryPoolNo, 0x07U)
S#define EvtRtxMemoryPoolAllocTimeout        EventID(EventLevelOp,     EvtRtxMemoryPoolNo, 0x08U)
S#define EvtRtxMemoryPoolAllocated           EventID(EventLevelOp,     EvtRtxMemoryPoolNo, 0x09U)
S#define EvtRtxMemoryPoolAllocFailed         EventID(EventLevelOp,     EvtRtxMemoryPoolNo, 0x0AU)
S#define EvtRtxMemoryPoolFree                EventID(EventLevelAPI,    EvtRtxMemoryPoolNo, 0x0BU)
S#define EvtRtxMemoryPoolDeallocated         EventID(EventLevelOp,     EvtRtxMemoryPoolNo, 0x0CU)
S#define EvtRtxMemoryPoolFreeFailed          EventID(EventLevelOp,     EvtRtxMemoryPoolNo, 0x0DU)
S#define EvtRtxMemoryPoolGetCapacity         EventID(EventLevelAPI,    EvtRtxMemoryPoolNo, 0x0EU)
S#define EvtRtxMemoryPoolGetBlockSize        EventID(EventLevelAPI,    EvtRtxMemoryPoolNo, 0x0FU)
S#define EvtRtxMemoryPoolGetCount            EventID(EventLevelAPI,    EvtRtxMemoryPoolNo, 0x10U)
S#define EvtRtxMemoryPoolGetSpace            EventID(EventLevelAPI,    EvtRtxMemoryPoolNo, 0x11U)
S#define EvtRtxMemoryPoolDelete              EventID(EventLevelAPI,    EvtRtxMemoryPoolNo, 0x12U)
S#define EvtRtxMemoryPoolDestroyed           EventID(EventLevelOp,     EvtRtxMemoryPoolNo, 0x13U)
S
S/// Event IDs for "RTX Message Queue"
S#define EvtRtxMessageQueueError             EventID(EventLevelError,  EvtRtxMessageQueueNo, 0x00U)
S#define EvtRtxMessageQueueNew               EventID(EventLevelAPI,    EvtRtxMessageQueueNo, 0x01U)
S#define EvtRtxMessageQueueCreated           EventID(EventLevelOp,     EvtRtxMessageQueueNo, 0x03U)
S#define EvtRtxMessageQueueGetName           EventID(EventLevelAPI,    EvtRtxMessageQueueNo, 0x04U)
S#define EvtRtxMessageQueuePut               EventID(EventLevelAPI,    EvtRtxMessageQueueNo, 0x06U)
S#define EvtRtxMessageQueuePutPending        EventID(EventLevelOp,     EvtRtxMessageQueueNo, 0x07U)
S#define EvtRtxMessageQueuePutTimeout        EventID(EventLevelOp,     EvtRtxMessageQueueNo, 0x08U)
S#define EvtRtxMessageQueueInsertPending     EventID(EventLevelOp,     EvtRtxMessageQueueNo, 0x09U)
S#define EvtRtxMessageQueueInserted          EventID(EventLevelOp,     EvtRtxMessageQueueNo, 0x0AU)
S#define EvtRtxMessageQueueNotInserted       EventID(EventLevelOp,     EvtRtxMessageQueueNo, 0x0BU)
S#define EvtRtxMessageQueueGet               EventID(EventLevelAPI,    EvtRtxMessageQueueNo, 0x0CU)
S#define EvtRtxMessageQueueGetPending        EventID(EventLevelOp,     EvtRtxMessageQueueNo, 0x0DU)
S#define EvtRtxMessageQueueGetTimeout        EventID(EventLevelOp,     EvtRtxMessageQueueNo, 0x0EU)
S#define EvtRtxMessageQueueRetrieved         EventID(EventLevelOp,     EvtRtxMessageQueueNo, 0x0FU)
S#define EvtRtxMessageQueueNotRetrieved      EventID(EventLevelOp,     EvtRtxMessageQueueNo, 0x10U)
S#define EvtRtxMessageQueueGetCapacity       EventID(EventLevelAPI,    EvtRtxMessageQueueNo, 0x11U)
S#define EvtRtxMessageQueueGetMsgSize        EventID(EventLevelAPI,    EvtRtxMessageQueueNo, 0x12U)
S#define EvtRtxMessageQueueGetCount          EventID(EventLevelAPI,    EvtRtxMessageQueueNo, 0x13U)
S#define EvtRtxMessageQueueGetSpace          EventID(EventLevelAPI,    EvtRtxMessageQueueNo, 0x14U)
S#define EvtRtxMessageQueueReset             EventID(EventLevelAPI,    EvtRtxMessageQueueNo, 0x15U)
S#define EvtRtxMessageQueueResetDone         EventID(EventLevelOp,     EvtRtxMessageQueueNo, 0x16U)
S#define EvtRtxMessageQueueDelete            EventID(EventLevelAPI,    EvtRtxMessageQueueNo, 0x17U)
S#define EvtRtxMessageQueueDestroyed         EventID(EventLevelOp,     EvtRtxMessageQueueNo, 0x18U)
S
N#endif  // RTE_Compiler_EventRecorder
N
N//lint -esym(522, EvrRtx*) "Functions 'EvrRtx*' can be overridden (do not lack side-effects)"
N
N
N//  ==== Memory Events ====
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MEMORY != 0) && !defined(EVR_RTX_MEMORY_INIT_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxMemoryInit (void *mem, uint32_t size, uint32_t result) {
X__attribute__((weak)) void EvrRtxMemoryInit (void *mem, uint32_t size, uint32_t result) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord4(EvtRtxMemoryInit, (uint32_t)mem, size, result, 0U);
N#else
N  (void)mem;
N  (void)size;
N  (void)result;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MEMORY != 0) && !defined(EVR_RTX_MEMORY_ALLOC_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxMemoryAlloc (void *mem, uint32_t size, uint32_t type, void *block) {
X__attribute__((weak)) void EvrRtxMemoryAlloc (void *mem, uint32_t size, uint32_t type, void *block) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord4(EvtRtxMemoryAlloc, (uint32_t)mem, size, type, (uint32_t)block);
N#else
N  (void)mem;
N  (void)size;
N  (void)type;
N  (void)block;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MEMORY != 0) && !defined(EVR_RTX_MEMORY_FREE_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxMemoryFree (void *mem, void *block, uint32_t result) {
X__attribute__((weak)) void EvrRtxMemoryFree (void *mem, void *block, uint32_t result) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord4(EvtRtxMemoryFree, (uint32_t)mem, (uint32_t)block, result, 0U);
N#else
N  (void)mem;
N  (void)block;
N  (void)result;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MEMORY != 0) && !defined(EVR_RTX_MEMORY_BLOCK_INIT_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxMemoryBlockInit (osRtxMpInfo_t *mp_info, uint32_t block_count, uint32_t block_size, void *block_mem) {
X__attribute__((weak)) void EvrRtxMemoryBlockInit (osRtxMpInfo_t *mp_info, uint32_t block_count, uint32_t block_size, void *block_mem) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord4(EvtRtxMemoryBlockInit, (uint32_t)mp_info, block_count, block_size, (uint32_t)block_mem);
N#else
N  (void)mp_info;
N  (void)block_count;
N  (void)block_size;
N  (void)block_mem;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MEMORY != 0) && !defined(EVR_RTX_MEMORY_BLOCK_ALLOC_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxMemoryBlockAlloc (osRtxMpInfo_t *mp_info, void *block) {
X__attribute__((weak)) void EvrRtxMemoryBlockAlloc (osRtxMpInfo_t *mp_info, void *block) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxMemoryBlockAlloc, (uint32_t)mp_info, (uint32_t)block);
N#else
N  (void)mp_info;
N  (void)block;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MEMORY != 0) && !defined(EVR_RTX_MEMORY_BLOCK_FREE_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxMemoryBlockFree (osRtxMpInfo_t *mp_info, void *block, int32_t status) {
X__attribute__((weak)) void EvrRtxMemoryBlockFree (osRtxMpInfo_t *mp_info, void *block, int32_t status) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord4(EvtRtxMemoryBlockFree, (uint32_t)mp_info, (uint32_t)block, (uint32_t)status, 0U);
N#else
N  (void)mp_info;
N  (void)block;
N  (void)status;
N#endif
N}
N#endif
N
N
N//  ==== Kernel Events ====
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_KERNEL != 0) && !defined(EVR_RTX_KERNEL_ERROR_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxKernelError (int32_t status) {
X__attribute__((weak)) void EvrRtxKernelError (int32_t status) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxKernelError, (uint32_t)status, 0U); 
N#else
N  (void)status;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_KERNEL != 0) && !defined(EVR_RTX_KERNEL_INITIALIZE_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxKernelInitialize (void) {
X__attribute__((weak)) void EvrRtxKernelInitialize (void) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxKernelInitialize, 0U, 0U);
N#else
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_KERNEL != 0) && !defined(EVR_RTX_KERNEL_INITIALIZED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxKernelInitialized (void) {
X__attribute__((weak)) void EvrRtxKernelInitialized (void) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxKernelInitialized, 0U, 0U);
N#else
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_KERNEL != 0) && !defined(EVR_RTX_KERNEL_GET_INFO_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxKernelGetInfo (osVersion_t *version, char *id_buf, uint32_t id_size) {
X__attribute__((weak)) void EvrRtxKernelGetInfo (osVersion_t *version, char *id_buf, uint32_t id_size) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord4(EvtRtxKernelGetInfo, (uint32_t)version, (uint32_t)id_buf, id_size, 0U);
N#else
N  (void)version;
N  (void)id_buf;
N  (void)id_size;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_KERNEL != 0) && !defined(EVR_RTX_KERNEL_INFO_RETRIEVED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxKernelInfoRetrieved (const osVersion_t *version, const char *id_buf, uint32_t id_size) {
X__attribute__((weak)) void EvrRtxKernelInfoRetrieved (const osVersion_t *version, const char *id_buf, uint32_t id_size) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  if (version != NULL) {
S    (void)EventRecord2(EvtRtxKernelInfoRetrieved, version->api, version->kernel);
S  }
S  if (id_buf != NULL) {
S    (void)EventRecordData(EvtRtxKernelInfoRetrieved_Detail, id_buf, id_size);
S  }
N#else
N  (void)version;
N  (void)id_buf;
N  (void)id_size;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_KERNEL != 0) && !defined(EVR_RTX_KERNEL_GET_STATE_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxKernelGetState (osKernelState_t state) {
X__attribute__((weak)) void EvrRtxKernelGetState (osKernelState_t state) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxKernelGetState, (uint32_t)state, 0U);
N#else
N  (void)state;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_KERNEL != 0) && !defined(EVR_RTX_KERNEL_START_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxKernelStart (void) {
X__attribute__((weak)) void EvrRtxKernelStart (void) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxKernelStart, 0U, 0U);
N#else
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_KERNEL != 0) && !defined(EVR_RTX_KERNEL_STARTED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxKernelStarted (void) {
X__attribute__((weak)) void EvrRtxKernelStarted (void) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxKernelStarted, 0U, 0U);
N#else
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_KERNEL != 0) && !defined(EVR_RTX_KERNEL_LOCK_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxKernelLock (void) {
X__attribute__((weak)) void EvrRtxKernelLock (void) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxKernelLock, 0U, 0U);
N#else
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_KERNEL != 0) && !defined(EVR_RTX_KERNEL_LOCKED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxKernelLocked (int32_t lock) {
X__attribute__((weak)) void EvrRtxKernelLocked (int32_t lock) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxKernelLocked, (uint32_t)lock, 0U);
N#else
N  (void)lock;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_KERNEL != 0) && !defined(EVR_RTX_KERNEL_UNLOCK_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxKernelUnlock (void) {
X__attribute__((weak)) void EvrRtxKernelUnlock (void) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxKernelUnlock, 0U, 0U);
N#else
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_KERNEL != 0) && !defined(EVR_RTX_KERNEL_UNLOCKED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxKernelUnlocked (int32_t lock) {
X__attribute__((weak)) void EvrRtxKernelUnlocked (int32_t lock) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxKernelUnlocked, (uint32_t)lock, 0U);
N#else
N  (void)lock;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_KERNEL != 0) && !defined(EVR_RTX_KERNEL_RESTORE_LOCK_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxKernelRestoreLock (int32_t lock) {
X__attribute__((weak)) void EvrRtxKernelRestoreLock (int32_t lock) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxKernelRestoreLock, (uint32_t)lock, 0U);
N#else
N  (void)lock;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_KERNEL != 0) && !defined(EVR_RTX_KERNEL_LOCK_RESTORED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxKernelLockRestored (int32_t lock) {
X__attribute__((weak)) void EvrRtxKernelLockRestored (int32_t lock) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxKernelLockRestored, (uint32_t)lock, 0U);
N#else
N  (void)lock;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_KERNEL != 0) && !defined(EVR_RTX_KERNEL_SUSPEND_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxKernelSuspend (void) {
X__attribute__((weak)) void EvrRtxKernelSuspend (void) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxKernelSuspend, 0U, 0U);
N#else
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_KERNEL != 0) && !defined(EVR_RTX_KERNEL_SUSPENDED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxKernelSuspended (uint32_t sleep_ticks) {
X__attribute__((weak)) void EvrRtxKernelSuspended (uint32_t sleep_ticks) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxKernelSuspended, sleep_ticks, 0U);
N#else
N  (void)sleep_ticks;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_KERNEL != 0) && !defined(EVR_RTX_KERNEL_RESUME_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxKernelResume (uint32_t sleep_ticks) {
X__attribute__((weak)) void EvrRtxKernelResume (uint32_t sleep_ticks) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxKernelResume, sleep_ticks, 0U);
N#else
N  (void)sleep_ticks;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_KERNEL != 0) && !defined(EVR_RTX_KERNEL_RESUMED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxKernelResumed (void) {
X__attribute__((weak)) void EvrRtxKernelResumed (void) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxKernelResumed, 0U, 0U);
N#else
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_KERNEL != 0) && !defined(EVR_RTX_KERNEL_GET_TICK_COUNT_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxKernelGetTickCount (uint32_t count) {
X__attribute__((weak)) void EvrRtxKernelGetTickCount (uint32_t count) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxKernelGetTickCount, count, 0U);
N#else
N  (void)count;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_KERNEL != 0) && !defined(EVR_RTX_KERNEL_GET_TICK_FREQ_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxKernelGetTickFreq (uint32_t freq) {
X__attribute__((weak)) void EvrRtxKernelGetTickFreq (uint32_t freq) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxKernelGetTickFreq, freq, 0U);
N#else
N  (void)freq;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_KERNEL != 0) && !defined(EVR_RTX_KERNEL_GET_SYS_TIMER_COUNT_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxKernelGetSysTimerCount (uint32_t count) {
X__attribute__((weak)) void EvrRtxKernelGetSysTimerCount (uint32_t count) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxKernelGetSysTimerCount, count, 0U);
N#else
N  (void)count;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_KERNEL != 0) && !defined(EVR_RTX_KERNEL_GET_SYS_TIMER_FREQ_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxKernelGetSysTimerFreq (uint32_t freq) {
X__attribute__((weak)) void EvrRtxKernelGetSysTimerFreq (uint32_t freq) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxKernelGetSysTimerFreq, freq, 0U);
N#else
N  (void)freq;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_KERNEL != 0) && !defined(EVR_RTX_KERNEL_ERROR_NOTIFY_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxKernelErrorNotify (uint32_t code, void *object_id) {
X__attribute__((weak)) void EvrRtxKernelErrorNotify (uint32_t code, void *object_id) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxKernelErrorNotify, code, (uint32_t)object_id);
N#else
N  (void)code;
N  (void)object_id;
N#endif
N}
N#endif
N
N
N//  ==== Thread Events ====
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_THREAD != 0) && !defined(EVR_RTX_THREAD_ERROR_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxThreadError (osThreadId_t thread_id, int32_t status) {
X__attribute__((weak)) void EvrRtxThreadError (osThreadId_t thread_id, int32_t status) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxThreadError, (uint32_t)thread_id, (uint32_t)status);
N#else
N  (void)thread_id;
N  (void)status;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_THREAD != 0) && !defined(EVR_RTX_THREAD_NEW_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
X__attribute__((weak)) void EvrRtxThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord4(EvtRtxThreadNew, (uint32_t)func, (uint32_t)argument, (uint32_t)attr, 0U);
N#else
N  (void)func;
N  (void)argument;
N  (void)attr;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_THREAD != 0) && !defined(EVR_RTX_THREAD_CREATED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxThreadCreated (osThreadId_t thread_id, uint32_t thread_addr, const char *name) {
X__attribute__((weak)) void EvrRtxThreadCreated (osThreadId_t thread_id, uint32_t thread_addr, const char *name) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  if (name != NULL) {
S    (void)EventRecord2(EvtRtxThreadCreated_Name, (uint32_t)thread_id, (uint32_t)name);
S  } else {
S    (void)EventRecord2(EvtRtxThreadCreated_Addr, (uint32_t)thread_id, thread_addr);
S  }
N#else
N  (void)thread_id;
N  (void)thread_addr;
N  (void)name;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_THREAD != 0) && !defined(EVR_RTX_THREAD_GET_NAME_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxThreadGetName (osThreadId_t thread_id, const char *name) {
X__attribute__((weak)) void EvrRtxThreadGetName (osThreadId_t thread_id, const char *name) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxThreadGetName, (uint32_t)thread_id, (uint32_t)name);
N#else
N  (void)thread_id;
N  (void)name;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_THREAD != 0) && !defined(EVR_RTX_THREAD_GET_ID_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxThreadGetId (osThreadId_t thread_id) {
X__attribute__((weak)) void EvrRtxThreadGetId (osThreadId_t thread_id) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxThreadGetId, (uint32_t)thread_id, 0U);
N#else
N  (void)thread_id;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_THREAD != 0) && !defined(EVR_RTX_THREAD_GET_STATE_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxThreadGetState (osThreadId_t thread_id, osThreadState_t state) {
X__attribute__((weak)) void EvrRtxThreadGetState (osThreadId_t thread_id, osThreadState_t state) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxThreadGetState, (uint32_t)thread_id, (uint32_t)state);
N#else
N  (void)thread_id;
N  (void)state;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_THREAD != 0) && !defined(EVR_RTX_THREAD_GET_STACK_SIZE_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxThreadGetStackSize (osThreadId_t thread_id, uint32_t stack_size) {
X__attribute__((weak)) void EvrRtxThreadGetStackSize (osThreadId_t thread_id, uint32_t stack_size) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxThreadGetStackSize, (uint32_t)thread_id, stack_size);
N#else
N  (void)thread_id;
N  (void)stack_size;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_THREAD != 0) && !defined(EVR_RTX_THREAD_GET_STACK_SPACE_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxThreadGetStackSpace (osThreadId_t thread_id, uint32_t stack_space) {
X__attribute__((weak)) void EvrRtxThreadGetStackSpace (osThreadId_t thread_id, uint32_t stack_space) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxThreadGetStackSpace, (uint32_t)thread_id, stack_space);
N#else
N  (void)thread_id;
N  (void)stack_space;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_THREAD != 0) && !defined(EVR_RTX_THREAD_SET_PRIORITY_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxThreadSetPriority (osThreadId_t thread_id, osPriority_t priority) {
X__attribute__((weak)) void EvrRtxThreadSetPriority (osThreadId_t thread_id, osPriority_t priority) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxThreadSetPriority, (uint32_t)thread_id, (uint32_t)priority);
N#else
N  (void)thread_id;
N  (void)priority;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_THREAD != 0) && !defined(EVR_RTX_THREAD_PRIORITY_UPDATED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxThreadPriorityUpdated (osThreadId_t thread_id, osPriority_t priority) {
X__attribute__((weak)) void EvrRtxThreadPriorityUpdated (osThreadId_t thread_id, osPriority_t priority) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxThreadPriorityUpdated, (uint32_t)thread_id, (uint32_t)priority);
N#else
N  (void)thread_id;
N  (void)priority;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_THREAD != 0) && !defined(EVR_RTX_THREAD_GET_PRIORITY_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxThreadGetPriority (osThreadId_t thread_id, osPriority_t priority) {
X__attribute__((weak)) void EvrRtxThreadGetPriority (osThreadId_t thread_id, osPriority_t priority) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxThreadGetPriority, (uint32_t)thread_id, (uint32_t)priority);
N#else
N  (void)thread_id;
N  (void)priority;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_THREAD != 0) && !defined(EVR_RTX_THREAD_YIELD_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxThreadYield (void) {
X__attribute__((weak)) void EvrRtxThreadYield (void) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxThreadYield, 0U, 0U);
N#else
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_THREAD != 0) && !defined(EVR_RTX_THREAD_SUSPEND_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxThreadSuspend (osThreadId_t thread_id) {
X__attribute__((weak)) void EvrRtxThreadSuspend (osThreadId_t thread_id) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxThreadSuspend, (uint32_t)thread_id, 0U);
N#else
N  (void)thread_id;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_THREAD != 0) && !defined(EVR_RTX_THREAD_SUSPENDED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxThreadSuspended (osThreadId_t thread_id) {
X__attribute__((weak)) void EvrRtxThreadSuspended (osThreadId_t thread_id) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxThreadSuspended, (uint32_t)thread_id, 0U);
N#else
N  (void)thread_id;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_THREAD != 0) && !defined(EVR_RTX_THREAD_RESUME_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxThreadResume (osThreadId_t thread_id) {
X__attribute__((weak)) void EvrRtxThreadResume (osThreadId_t thread_id) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxThreadResume, (uint32_t)thread_id, 0U);
N#else
N  (void)thread_id;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_THREAD != 0) && !defined(EVR_RTX_THREAD_RESUMED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxThreadResumed (osThreadId_t thread_id) {
X__attribute__((weak)) void EvrRtxThreadResumed (osThreadId_t thread_id) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxThreadResumed, (uint32_t)thread_id, 0U);
N#else
N  (void)thread_id;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_THREAD != 0) && !defined(EVR_RTX_THREAD_DETACH_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxThreadDetach (osThreadId_t thread_id) {
X__attribute__((weak)) void EvrRtxThreadDetach (osThreadId_t thread_id) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxThreadDetach, (uint32_t)thread_id, 0U);
N#else
N  (void)thread_id;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_THREAD != 0) && !defined(EVR_RTX_THREAD_DETACHED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxThreadDetached (osThreadId_t thread_id) {
X__attribute__((weak)) void EvrRtxThreadDetached (osThreadId_t thread_id) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxThreadDetached, (uint32_t)thread_id, 0U);
N#else
N  (void)thread_id;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_THREAD != 0) && !defined(EVR_RTX_THREAD_JOIN_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxThreadJoin (osThreadId_t thread_id) {
X__attribute__((weak)) void EvrRtxThreadJoin (osThreadId_t thread_id) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxThreadJoin, (uint32_t)thread_id, 0U);
N#else
N  (void)thread_id;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_THREAD != 0) && !defined(EVR_RTX_THREAD_JOIN_PENDING_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxThreadJoinPending (osThreadId_t thread_id) {
X__attribute__((weak)) void EvrRtxThreadJoinPending (osThreadId_t thread_id) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxThreadJoinPending, (uint32_t)thread_id, 0U);
N#else
N  (void)thread_id;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_THREAD != 0) && !defined(EVR_RTX_THREAD_JOINED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxThreadJoined (osThreadId_t thread_id) {
X__attribute__((weak)) void EvrRtxThreadJoined (osThreadId_t thread_id) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxThreadJoined, (uint32_t)thread_id, 0U);
N#else
N  (void)thread_id;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_THREAD != 0) && !defined(EVR_RTX_THREAD_BLOCKED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxThreadBlocked (osThreadId_t thread_id, uint32_t timeout) {
X__attribute__((weak)) void EvrRtxThreadBlocked (osThreadId_t thread_id, uint32_t timeout) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxThreadBlocked, (uint32_t)thread_id, timeout);
N#else
N  (void)thread_id;
N  (void)timeout;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_THREAD != 0) && !defined(EVR_RTX_THREAD_UNBLOCKED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxThreadUnblocked (osThreadId_t thread_id, uint32_t ret_val) {
X__attribute__((weak)) void EvrRtxThreadUnblocked (osThreadId_t thread_id, uint32_t ret_val) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxThreadUnblocked, (uint32_t)thread_id, ret_val);
N#else
N  (void)thread_id;
N  (void)ret_val;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_THREAD != 0) && !defined(EVR_RTX_THREAD_PREEMPTED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxThreadPreempted (osThreadId_t thread_id) {
X__attribute__((weak)) void EvrRtxThreadPreempted (osThreadId_t thread_id) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxThreadPreempted, (uint32_t)thread_id, 0U);
N#else
N  (void)thread_id;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_THREAD != 0) && !defined(EVR_RTX_THREAD_SWITCHED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxThreadSwitched (osThreadId_t thread_id) {
X__attribute__((weak)) void EvrRtxThreadSwitched (osThreadId_t thread_id) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxThreadSwitched, (uint32_t)thread_id, 0U);
N#else
N  (void)thread_id;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_THREAD != 0) && !defined(EVR_RTX_THREAD_EXIT_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxThreadExit (void) {
X__attribute__((weak)) void EvrRtxThreadExit (void) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxThreadExit, 0U, 0U);
N#else
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_THREAD != 0) && !defined(EVR_RTX_THREAD_TERMINATE_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxThreadTerminate (osThreadId_t thread_id) {
X__attribute__((weak)) void EvrRtxThreadTerminate (osThreadId_t thread_id) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxThreadTerminate, (uint32_t)thread_id, 0U);
N#else
N  (void)thread_id;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_THREAD != 0) && !defined(EVR_RTX_THREAD_DESTROYED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxThreadDestroyed (osThreadId_t thread_id) {
X__attribute__((weak)) void EvrRtxThreadDestroyed (osThreadId_t thread_id) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxThreadDestroyed, (uint32_t)thread_id, 0U);
N#else
N  (void)thread_id;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_THREAD != 0) && !defined(EVR_RTX_THREAD_GET_COUNT_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxThreadGetCount (uint32_t count) {
X__attribute__((weak)) void EvrRtxThreadGetCount (uint32_t count) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxThreadGetCount, count, 0U);
N#else
N  (void)count;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_THREAD != 0) && !defined(EVR_RTX_THREAD_ENUMERATE_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxThreadEnumerate (osThreadId_t *thread_array, uint32_t array_items, uint32_t count) {
X__attribute__((weak)) void EvrRtxThreadEnumerate (osThreadId_t *thread_array, uint32_t array_items, uint32_t count) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord4(EvtRtxThreadEnumerate, (uint32_t)thread_array, array_items, count, 0U);
N#else
N  (void)thread_array;
N  (void)array_items;
N  (void)count;
N#endif
N}
N#endif
N
N
N//  ==== Thread Flags Events ====
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_THFLAGS != 0) && !defined(EVR_RTX_THREAD_FLAGS_ERROR_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxThreadFlagsError (osThreadId_t thread_id, int32_t status) {
X__attribute__((weak)) void EvrRtxThreadFlagsError (osThreadId_t thread_id, int32_t status) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxThreadFlagsError, (uint32_t)thread_id, (uint32_t)status);
N#else
N  (void)thread_id;
N  (void)status;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_THFLAGS != 0) && !defined(EVR_RTX_THREAD_FLAGS_SET_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
X__attribute__((weak)) void EvrRtxThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxThreadFlagsSet, (uint32_t)thread_id, flags);
N#else
N  (void)thread_id;
N  (void)flags;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_THFLAGS != 0) && !defined(EVR_RTX_THREAD_FLAGS_SET_DONE_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxThreadFlagsSetDone (osThreadId_t thread_id, uint32_t thread_flags) {
X__attribute__((weak)) void EvrRtxThreadFlagsSetDone (osThreadId_t thread_id, uint32_t thread_flags) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxThreadFlagsSetDone, (uint32_t)thread_id, thread_flags);
N#else
N  (void)thread_id;
N  (void)thread_flags;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_THFLAGS != 0) && !defined(EVR_RTX_THREAD_FLAGS_CLEAR_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxThreadFlagsClear (uint32_t flags) {
X__attribute__((weak)) void EvrRtxThreadFlagsClear (uint32_t flags) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxThreadFlagsClear, flags, 0U);
N#else
N  (void)flags;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_THFLAGS != 0) && !defined(EVR_RTX_THREAD_FLAGS_CLEAR_DONE_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxThreadFlagsClearDone (uint32_t thread_flags) {
X__attribute__((weak)) void EvrRtxThreadFlagsClearDone (uint32_t thread_flags) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxThreadFlagsClearDone, thread_flags, 0U);
N#else
N  (void)thread_flags;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_THFLAGS != 0) && !defined(EVR_RTX_THREAD_FLAGS_GET_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxThreadFlagsGet (uint32_t thread_flags) {
X__attribute__((weak)) void EvrRtxThreadFlagsGet (uint32_t thread_flags) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxThreadFlagsGet, thread_flags, 0U);
N#else
N  (void)thread_flags;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_THFLAGS != 0) && !defined(EVR_RTX_THREAD_FLAGS_WAIT_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
X__attribute__((weak)) void EvrRtxThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord4(EvtRtxThreadFlagsWait, flags, options, timeout, 0U);
N#else
N  (void)flags;
N  (void)options;
N  (void)timeout;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_THFLAGS != 0) && !defined(EVR_RTX_THREAD_FLAGS_WAIT_PENDING_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxThreadFlagsWaitPending (uint32_t flags, uint32_t options, uint32_t timeout) {
X__attribute__((weak)) void EvrRtxThreadFlagsWaitPending (uint32_t flags, uint32_t options, uint32_t timeout) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord4(EvtRtxThreadFlagsWaitPending, flags, options, timeout, 0U);
N#else
N  (void)flags;
N  (void)options;
N  (void)timeout;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_THFLAGS != 0) && !defined(EVR_RTX_THREAD_FLAGS_WAIT_TIMEOUT_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxThreadFlagsWaitTimeout (osThreadId_t thread_id) {
X__attribute__((weak)) void EvrRtxThreadFlagsWaitTimeout (osThreadId_t thread_id) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxThreadFlagsWaitTimeout, (uint32_t)thread_id, 0U);
N#else
N  (void)thread_id;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_THFLAGS != 0) && !defined(EVR_RTX_THREAD_FLAGS_WAIT_COMPLETED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxThreadFlagsWaitCompleted (uint32_t flags, uint32_t options, uint32_t thread_flags, osThreadId_t thread_id) {
X__attribute__((weak)) void EvrRtxThreadFlagsWaitCompleted (uint32_t flags, uint32_t options, uint32_t thread_flags, osThreadId_t thread_id) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord4(EvtRtxThreadFlagsWaitCompleted, flags, options, thread_flags, (uint32_t)thread_id);
N#else
N  (void)flags;
N  (void)options;
N  (void)thread_flags;
N  (void)thread_id;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_THFLAGS != 0) && !defined(EVR_RTX_THREAD_FLAGS_WAIT_NOT_COMPLETED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxThreadFlagsWaitNotCompleted (uint32_t flags, uint32_t options) {
X__attribute__((weak)) void EvrRtxThreadFlagsWaitNotCompleted (uint32_t flags, uint32_t options) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxThreadFlagsWaitNotCompleted, flags, options);
N#else
N  (void)flags;
N  (void)options;
N#endif
N}
N#endif
N
N
N//  ==== Generic Wait Events ====
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_WAIT != 0) && !defined(EVR_RTX_DELAY_ERROR_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxDelayError (int32_t status) {
X__attribute__((weak)) void EvrRtxDelayError (int32_t status) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxDelayError, (uint32_t)status, 0U);
N#else
N  (void)status;
N#endif
N}
N#endif
N
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_WAIT != 0) && !defined(EVR_RTX_DELAY_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxDelay (uint32_t ticks) {
X__attribute__((weak)) void EvrRtxDelay (uint32_t ticks) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxDelay, ticks, 0U);
N#else
N  (void)ticks;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_WAIT != 0) && !defined(EVR_RTX_DELAY_UNTIL_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxDelayUntil (uint32_t ticks) {
X__attribute__((weak)) void EvrRtxDelayUntil (uint32_t ticks) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxDelayUntil, ticks, 0U);
N#else
N  (void)ticks;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_WAIT != 0) && !defined(EVR_RTX_DELAY_STARTED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxDelayStarted (uint32_t ticks) {
X__attribute__((weak)) void EvrRtxDelayStarted (uint32_t ticks) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxDelayStarted, ticks, 0U);
N#else
N  (void)ticks;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_WAIT != 0) && !defined(EVR_RTX_DELAY_UNTIL_STARTED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxDelayUntilStarted (uint32_t ticks) {
X__attribute__((weak)) void EvrRtxDelayUntilStarted (uint32_t ticks) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxDelayUntilStarted, ticks, 0U);
N#else
N  (void)ticks;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_WAIT != 0) && !defined(EVR_RTX_DELAY_COMPLETED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxDelayCompleted (osThreadId_t thread_id) {
X__attribute__((weak)) void EvrRtxDelayCompleted (osThreadId_t thread_id) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxDelayCompleted, (uint32_t)thread_id, 0U);
N#else
N  (void)thread_id;
N#endif
N}
N#endif
N
N
N//  ==== Timer Events ====
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_TIMER != 0) && !defined(EVR_RTX_TIMER_ERROR_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxTimerError (osTimerId_t timer_id, int32_t status) {
X__attribute__((weak)) void EvrRtxTimerError (osTimerId_t timer_id, int32_t status) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxTimerError, (uint32_t)timer_id, (uint32_t)status);
N#else
N  (void)timer_id;
N  (void)status;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_TIMER != 0) && !defined(EVR_RTX_TIMER_CALLBACK_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxTimerCallback (osTimerFunc_t func, void *argument) {
X__attribute__((weak)) void EvrRtxTimerCallback (osTimerFunc_t func, void *argument) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxTimerCallback, (uint32_t)func, (uint32_t)argument);
N#else
N  (void)func;
N  (void)argument;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_TIMER != 0) && !defined(EVR_RTX_TIMER_NEW_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
X__attribute__((weak)) void EvrRtxTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord4(EvtRtxTimerNew, (uint32_t)func, (uint32_t)type, (uint32_t)argument, (uint32_t)attr);
N#else
N  (void)func;
N  (void)type;
N  (void)argument;
N  (void)attr;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_TIMER != 0) && !defined(EVR_RTX_TIMER_CREATED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxTimerCreated (osTimerId_t timer_id, const char *name) {
X__attribute__((weak)) void EvrRtxTimerCreated (osTimerId_t timer_id, const char *name) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxTimerCreated, (uint32_t)timer_id, (uint32_t)name);
N#else
N  (void)timer_id;
N  (void)name;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_TIMER != 0) && !defined(EVR_RTX_TIMER_GET_NAME_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxTimerGetName (osTimerId_t timer_id, const char *name) {
X__attribute__((weak)) void EvrRtxTimerGetName (osTimerId_t timer_id, const char *name) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxTimerGetName, (uint32_t)timer_id, (uint32_t)name);
N#else
N  (void)timer_id;
N  (void)name;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_TIMER != 0) && !defined(EVR_RTX_TIMER_START_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxTimerStart (osTimerId_t timer_id, uint32_t ticks) {
X__attribute__((weak)) void EvrRtxTimerStart (osTimerId_t timer_id, uint32_t ticks) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxTimerStart, (uint32_t)timer_id, ticks);
N#else
N  (void)timer_id;
N  (void)ticks;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_TIMER != 0) && !defined(EVR_RTX_TIMER_STARTED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxTimerStarted (osTimerId_t timer_id) {
X__attribute__((weak)) void EvrRtxTimerStarted (osTimerId_t timer_id) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxTimerStarted, (uint32_t)timer_id, 0U);
N#else
N  (void)timer_id;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_TIMER != 0) && !defined(EVR_RTX_TIMER_STOP_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxTimerStop (osTimerId_t timer_id) {
X__attribute__((weak)) void EvrRtxTimerStop (osTimerId_t timer_id) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxTimerStop, (uint32_t)timer_id, 0U);
N#else
N  (void)timer_id;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_TIMER != 0) && !defined(EVR_RTX_TIMER_STOPPED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxTimerStopped (osTimerId_t timer_id) {
X__attribute__((weak)) void EvrRtxTimerStopped (osTimerId_t timer_id) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxTimerStopped, (uint32_t)timer_id, 0U);
N#else
N  (void)timer_id;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_TIMER != 0) && !defined(EVR_RTX_TIMER_IS_RUNNING_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxTimerIsRunning (osTimerId_t timer_id, uint32_t running) {
X__attribute__((weak)) void EvrRtxTimerIsRunning (osTimerId_t timer_id, uint32_t running) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxTimerIsRunning, (uint32_t)timer_id, running);
N#else
N  (void)timer_id;
N  (void)running;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_TIMER != 0) && !defined(EVR_RTX_TIMER_DELETE_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxTimerDelete (osTimerId_t timer_id) {
X__attribute__((weak)) void EvrRtxTimerDelete (osTimerId_t timer_id) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxTimerDelete, (uint32_t)timer_id, 0U);
N#else
N  (void)timer_id;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_TIMER != 0) && !defined(EVR_RTX_TIMER_DESTROYED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxTimerDestroyed (osTimerId_t timer_id) {
X__attribute__((weak)) void EvrRtxTimerDestroyed (osTimerId_t timer_id) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxTimerDestroyed, (uint32_t)timer_id, 0U);
N#else
N  (void)timer_id;
N#endif
N}
N#endif
N
N
N//  ==== Event Flags Events ====
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_EVFLAGS != 0) && !defined(EVR_RTX_EVENT_FLAGS_ERROR_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxEventFlagsError (osEventFlagsId_t ef_id, int32_t status) {
X__attribute__((weak)) void EvrRtxEventFlagsError (osEventFlagsId_t ef_id, int32_t status) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxEventFlagsError, (uint32_t)ef_id, (uint32_t)status);
N#else
N  (void)ef_id;
N  (void)status;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_EVFLAGS != 0) && !defined(EVR_RTX_EVENT_FLAGS_NEW_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxEventFlagsNew (const osEventFlagsAttr_t *attr) {
X__attribute__((weak)) void EvrRtxEventFlagsNew (const osEventFlagsAttr_t *attr) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxEventFlagsNew, (uint32_t)attr, 0U);
N#else
N  (void)attr;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_EVFLAGS != 0) && !defined(EVR_RTX_EVENT_FLAGS_CREATED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxEventFlagsCreated (osEventFlagsId_t ef_id, const char *name) {
X__attribute__((weak)) void EvrRtxEventFlagsCreated (osEventFlagsId_t ef_id, const char *name) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxEventFlagsCreated, (uint32_t)ef_id, (uint32_t)name);
N#else
N  (void)ef_id;
N  (void)name;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_EVFLAGS != 0) && !defined(EVR_RTX_EVENT_FLAGS_GET_NAME_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxEventFlagsGetName (osEventFlagsId_t ef_id, const char *name) {
X__attribute__((weak)) void EvrRtxEventFlagsGetName (osEventFlagsId_t ef_id, const char *name) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxEventFlagsGetName, (uint32_t)ef_id, (uint32_t)name);
N#else
N  (void)ef_id;
N  (void)name;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_EVFLAGS != 0) && !defined(EVR_RTX_EVENT_FLAGS_SET_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
X__attribute__((weak)) void EvrRtxEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxEventFlagsSet, (uint32_t)ef_id, flags);
N#else
N  (void)ef_id;
N  (void)flags;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_EVFLAGS != 0) && !defined(EVR_RTX_EVENT_FLAGS_SET_DONE_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxEventFlagsSetDone (osEventFlagsId_t ef_id, uint32_t event_flags) {
X__attribute__((weak)) void EvrRtxEventFlagsSetDone (osEventFlagsId_t ef_id, uint32_t event_flags) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxEventFlagsSetDone, (uint32_t)ef_id, event_flags);
N#else
N  (void)ef_id;
N  (void)event_flags;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_EVFLAGS != 0) && !defined(EVR_RTX_EVENT_FLAGS_CLEAR_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
X__attribute__((weak)) void EvrRtxEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxEventFlagsClear, (uint32_t)ef_id, flags);
N#else
N  (void)ef_id;
N  (void)flags;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_EVFLAGS != 0) && !defined(EVR_RTX_EVENT_FLAGS_CLEAR_DONE_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxEventFlagsClearDone (osEventFlagsId_t ef_id, uint32_t event_flags) {
X__attribute__((weak)) void EvrRtxEventFlagsClearDone (osEventFlagsId_t ef_id, uint32_t event_flags) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxEventFlagsClearDone, (uint32_t)ef_id, event_flags);
N#else
N  (void)ef_id;
N  (void)event_flags;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_EVFLAGS != 0) && !defined(EVR_RTX_EVENT_FLAGS_GET_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxEventFlagsGet (osEventFlagsId_t ef_id, uint32_t event_flags) {
X__attribute__((weak)) void EvrRtxEventFlagsGet (osEventFlagsId_t ef_id, uint32_t event_flags) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxEventFlagsGet, (uint32_t)ef_id, event_flags);
N#else
N  (void)ef_id;
N  (void)event_flags;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_EVFLAGS != 0) && !defined(EVR_RTX_EVENT_FLAGS_WAIT_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
X__attribute__((weak)) void EvrRtxEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord4(EvtRtxEventFlagsWait, (uint32_t)ef_id, flags, options, timeout);
N#else
N  (void)ef_id;
N  (void)flags;
N  (void)options;
N  (void)timeout;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_EVFLAGS != 0) && !defined(EVR_RTX_EVENT_FLAGS_WAIT_PENDING_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxEventFlagsWaitPending (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
X__attribute__((weak)) void EvrRtxEventFlagsWaitPending (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord4(EvtRtxEventFlagsWaitPending, (uint32_t)ef_id, flags, options, timeout);
N#else
N  (void)ef_id;
N  (void)flags;
N  (void)options;
N  (void)timeout;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_EVFLAGS != 0) && !defined(EVR_RTX_EVENT_FLAGS_WAIT_TIMEOUT_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxEventFlagsWaitTimeout (osEventFlagsId_t ef_id) {
X__attribute__((weak)) void EvrRtxEventFlagsWaitTimeout (osEventFlagsId_t ef_id) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxEventFlagsWaitTimeout, (uint32_t)ef_id, 0U);
N#else
N  (void)ef_id;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_EVFLAGS != 0) && !defined(EVR_RTX_EVENT_FLAGS_WAIT_COMPLETED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxEventFlagsWaitCompleted (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t event_flags) {
X__attribute__((weak)) void EvrRtxEventFlagsWaitCompleted (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t event_flags) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord4(EvtRtxEventFlagsWaitCompleted, (uint32_t)ef_id, flags, options, event_flags);
N#else
N  (void)ef_id;
N  (void)flags;
N  (void)options;
N  (void)event_flags;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_EVFLAGS != 0) && !defined(EVR_RTX_EVENT_FLAGS_WAIT_NOT_COMPLETED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxEventFlagsWaitNotCompleted (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options) {
X__attribute__((weak)) void EvrRtxEventFlagsWaitNotCompleted (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord4(EvtRtxEventFlagsWaitNotCompleted, (uint32_t)ef_id, flags, options, 0U);
N#else
N  (void)ef_id;
N  (void)flags;
N  (void)options;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_EVFLAGS != 0) && !defined(EVR_RTX_EVENT_FLAGS_DELETE_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxEventFlagsDelete (osEventFlagsId_t ef_id) {
X__attribute__((weak)) void EvrRtxEventFlagsDelete (osEventFlagsId_t ef_id) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxEventFlagsDelete, (uint32_t)ef_id, 0U);
N#else
N  (void)ef_id;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_EVFLAGS != 0) && !defined(EVR_RTX_EVENT_FLAGS_DESTROYED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxEventFlagsDestroyed (osEventFlagsId_t ef_id) {
X__attribute__((weak)) void EvrRtxEventFlagsDestroyed (osEventFlagsId_t ef_id) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxEventFlagsDestroyed, (uint32_t)ef_id, 0U);
N#else
N  (void)ef_id;
N#endif
N}
N#endif
N
N
N//  ==== Mutex Events ====
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MUTEX != 0) && !defined(EVR_RTX_MUTEX_ERROR_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxMutexError (osMutexId_t mutex_id, int32_t status) {
X__attribute__((weak)) void EvrRtxMutexError (osMutexId_t mutex_id, int32_t status) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxMutexError, (uint32_t)mutex_id, (uint32_t)status);
N#else
N  (void)mutex_id;
N  (void)status;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MUTEX != 0) && !defined(EVR_RTX_MUTEX_NEW_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxMutexNew (const osMutexAttr_t *attr) {
X__attribute__((weak)) void EvrRtxMutexNew (const osMutexAttr_t *attr) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxMutexNew, (uint32_t)attr, 0U);
N#else
N  (void)attr;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MUTEX != 0) && !defined(EVR_RTX_MUTEX_CREATED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxMutexCreated (osMutexId_t mutex_id, const char *name) {
X__attribute__((weak)) void EvrRtxMutexCreated (osMutexId_t mutex_id, const char *name) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxMutexCreated, (uint32_t)mutex_id, (uint32_t)name);
N#else
N  (void)mutex_id;
N  (void)name;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MUTEX != 0) && !defined(EVR_RTX_MUTEX_GET_NAME_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxMutexGetName (osMutexId_t mutex_id, const char *name) {
X__attribute__((weak)) void EvrRtxMutexGetName (osMutexId_t mutex_id, const char *name) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxMutexGetName, (uint32_t)mutex_id, (uint32_t)name);
N#else
N  (void)mutex_id;
N  (void)name;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MUTEX != 0) && !defined(EVR_RTX_MUTEX_ACQUIRE_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
X__attribute__((weak)) void EvrRtxMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxMutexAcquire, (uint32_t)mutex_id, timeout);
N#else
N  (void)mutex_id;
N  (void)timeout;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MUTEX != 0) && !defined(EVR_RTX_MUTEX_ACQUIRE_PENDING_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxMutexAcquirePending (osMutexId_t mutex_id, uint32_t timeout) {
X__attribute__((weak)) void EvrRtxMutexAcquirePending (osMutexId_t mutex_id, uint32_t timeout) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxMutexAcquirePending, (uint32_t)mutex_id, timeout);
N#else
N  (void)mutex_id;
N  (void)timeout;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MUTEX != 0) && !defined(EVR_RTX_MUTEX_ACQUIRE_TIMEOUT_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxMutexAcquireTimeout (osMutexId_t mutex_id) {
X__attribute__((weak)) void EvrRtxMutexAcquireTimeout (osMutexId_t mutex_id) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxMutexAcquireTimeout, (uint32_t)mutex_id, 0U);
N#else
N  (void)mutex_id;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MUTEX != 0) && !defined(EVR_RTX_MUTEX_ACQUIRED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxMutexAcquired (osMutexId_t mutex_id, uint32_t lock) {
X__attribute__((weak)) void EvrRtxMutexAcquired (osMutexId_t mutex_id, uint32_t lock) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxMutexAcquired, (uint32_t)mutex_id, lock);
N#else
N  (void)mutex_id;
N  (void)lock;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MUTEX != 0) && !defined(EVR_RTX_MUTEX_NOT_ACQUIRED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxMutexNotAcquired (osMutexId_t mutex_id) {
X__attribute__((weak)) void EvrRtxMutexNotAcquired (osMutexId_t mutex_id) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxMutexNotAcquired, (uint32_t)mutex_id, 0U);
N#else
N  (void)mutex_id;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MUTEX != 0) && !defined(EVR_RTX_MUTEX_RELEASE_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxMutexRelease (osMutexId_t mutex_id) {
X__attribute__((weak)) void EvrRtxMutexRelease (osMutexId_t mutex_id) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxMutexRelease, (uint32_t)mutex_id, 0U);
N#else
N  (void)mutex_id;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MUTEX != 0) && !defined(EVR_RTX_MUTEX_RELEASED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxMutexReleased (osMutexId_t mutex_id, uint32_t lock) {
X__attribute__((weak)) void EvrRtxMutexReleased (osMutexId_t mutex_id, uint32_t lock) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxMutexReleased, (uint32_t)mutex_id, lock);
N#else
N  (void)mutex_id;
N  (void)lock;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MUTEX != 0) && !defined(EVR_RTX_MUTEX_GET_OWNER_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxMutexGetOwner (osMutexId_t mutex_id, osThreadId_t thread_id) {
X__attribute__((weak)) void EvrRtxMutexGetOwner (osMutexId_t mutex_id, osThreadId_t thread_id) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxMutexGetOwner, (uint32_t)mutex_id, (uint32_t)thread_id);
N#else
N  (void)mutex_id;
N  (void)thread_id;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MUTEX != 0) && !defined(EVR_RTX_MUTEX_DELETE_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxMutexDelete (osMutexId_t mutex_id) {
X__attribute__((weak)) void EvrRtxMutexDelete (osMutexId_t mutex_id) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxMutexDelete, (uint32_t)mutex_id, 0U);
N#else
N  (void)mutex_id;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MUTEX != 0) && !defined(EVR_RTX_MUTEX_DESTROYED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxMutexDestroyed (osMutexId_t mutex_id) {
X__attribute__((weak)) void EvrRtxMutexDestroyed (osMutexId_t mutex_id) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxMutexDestroyed, (uint32_t)mutex_id, 0U);
N#else
N  (void)mutex_id;
N#endif
N}
N#endif
N
N
N//  ==== Semaphore Events ====
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_SEMAPHORE != 0) && !defined(EVR_RTX_SEMAPHORE_ERROR_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxSemaphoreError (osSemaphoreId_t semaphore_id, int32_t status) {
X__attribute__((weak)) void EvrRtxSemaphoreError (osSemaphoreId_t semaphore_id, int32_t status) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxSemaphoreError, (uint32_t)semaphore_id, (uint32_t)status);
N#else
N  (void)semaphore_id;
N  (void)status;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_SEMAPHORE != 0) && !defined(EVR_RTX_SEMAPHORE_NEW_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
X__attribute__((weak)) void EvrRtxSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord4(EvtRtxSemaphoreNew, max_count, initial_count, (uint32_t)attr, 0U);
N#else
N  (void)max_count;
N  (void)initial_count;
N  (void)attr;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_SEMAPHORE != 0) && !defined(EVR_RTX_SEMAPHORE_CREATED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxSemaphoreCreated (osSemaphoreId_t semaphore_id, const char *name) {
X__attribute__((weak)) void EvrRtxSemaphoreCreated (osSemaphoreId_t semaphore_id, const char *name) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxSemaphoreCreated, (uint32_t)semaphore_id, (uint32_t)name);
N#else
N  (void)semaphore_id;
N  (void)name;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_SEMAPHORE != 0) && !defined(EVR_RTX_SEMAPHORE_GET_NAME_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxSemaphoreGetName (osSemaphoreId_t semaphore_id, const char *name) {
X__attribute__((weak)) void EvrRtxSemaphoreGetName (osSemaphoreId_t semaphore_id, const char *name) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxSemaphoreGetName, (uint32_t)semaphore_id, (uint32_t)name);
N#else
N#endif
N  (void)semaphore_id;
N  (void)name;
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_SEMAPHORE != 0) && !defined(EVR_RTX_SEMAPHORE_ACQUIRE_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
X__attribute__((weak)) void EvrRtxSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxSemaphoreAcquire, (uint32_t)semaphore_id, timeout);
N#else
N  (void)semaphore_id;
N  (void)timeout;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_SEMAPHORE != 0) && !defined(EVR_RTX_SEMAPHORE_ACQUIRE_PENDING_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxSemaphoreAcquirePending (osSemaphoreId_t semaphore_id, uint32_t timeout) {
X__attribute__((weak)) void EvrRtxSemaphoreAcquirePending (osSemaphoreId_t semaphore_id, uint32_t timeout) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxSemaphoreAcquirePending, (uint32_t)semaphore_id, (uint32_t)timeout);
N#else
N  (void)semaphore_id;
N  (void)timeout;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_SEMAPHORE != 0) && !defined(EVR_RTX_SEMAPHORE_ACQUIRE_TIMEOUT_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxSemaphoreAcquireTimeout (osSemaphoreId_t semaphore_id) {
X__attribute__((weak)) void EvrRtxSemaphoreAcquireTimeout (osSemaphoreId_t semaphore_id) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxSemaphoreAcquireTimeout, (uint32_t)semaphore_id, 0U);
N#else
N  (void)semaphore_id;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_SEMAPHORE != 0) && !defined(EVR_RTX_SEMAPHORE_ACQUIRED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxSemaphoreAcquired (osSemaphoreId_t semaphore_id, uint32_t tokens) {
X__attribute__((weak)) void EvrRtxSemaphoreAcquired (osSemaphoreId_t semaphore_id, uint32_t tokens) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxSemaphoreAcquired, (uint32_t)semaphore_id, tokens);
N#else
N  (void)semaphore_id;
N  (void)tokens;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_SEMAPHORE != 0) && !defined(EVR_RTX_SEMAPHORE_NOT_ACQUIRED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxSemaphoreNotAcquired (osSemaphoreId_t semaphore_id) {
X__attribute__((weak)) void EvrRtxSemaphoreNotAcquired (osSemaphoreId_t semaphore_id) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxSemaphoreNotAcquired, (uint32_t)semaphore_id, 0U);
N#else
N  (void)semaphore_id;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_SEMAPHORE != 0) && !defined(EVR_RTX_SEMAPHORE_RELEASE_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxSemaphoreRelease (osSemaphoreId_t semaphore_id) {
X__attribute__((weak)) void EvrRtxSemaphoreRelease (osSemaphoreId_t semaphore_id) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxSemaphoreRelease, (uint32_t)semaphore_id, 0U);
N#else
N  (void)semaphore_id;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_SEMAPHORE != 0) && !defined(EVR_RTX_SEMAPHORE_RELEASED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxSemaphoreReleased (osSemaphoreId_t semaphore_id, uint32_t tokens) {
X__attribute__((weak)) void EvrRtxSemaphoreReleased (osSemaphoreId_t semaphore_id, uint32_t tokens) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxSemaphoreReleased, (uint32_t)semaphore_id, tokens);
N#else
N  (void)semaphore_id;
N  (void)tokens;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_SEMAPHORE != 0) && !defined(EVR_RTX_SEMAPHORE_GET_COUNT_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxSemaphoreGetCount (osSemaphoreId_t semaphore_id, uint32_t count) {
X__attribute__((weak)) void EvrRtxSemaphoreGetCount (osSemaphoreId_t semaphore_id, uint32_t count) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxSemaphoreGetCount, (uint32_t)semaphore_id, count);
N#else
N  (void)semaphore_id;
N  (void)count;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_SEMAPHORE != 0) && !defined(EVR_RTX_SEMAPHORE_DELETE_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxSemaphoreDelete (osSemaphoreId_t semaphore_id) {
X__attribute__((weak)) void EvrRtxSemaphoreDelete (osSemaphoreId_t semaphore_id) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxSemaphoreDelete, (uint32_t)semaphore_id, 0U);
N#else
N  (void)semaphore_id;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_SEMAPHORE != 0) && !defined(EVR_RTX_SEMAPHORE_DESTROYED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxSemaphoreDestroyed (osSemaphoreId_t semaphore_id) {
X__attribute__((weak)) void EvrRtxSemaphoreDestroyed (osSemaphoreId_t semaphore_id) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxSemaphoreDestroyed, (uint32_t)semaphore_id, 0U);
N#else
N  (void)semaphore_id;
N#endif
N}
N#endif
N
N
N//  ==== Memory Pool Events ====
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MEMPOOL != 0) && !defined(EVR_RTX_MEMORY_POOL_ERROR_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxMemoryPoolError (osMemoryPoolId_t mp_id, int32_t status) {
X__attribute__((weak)) void EvrRtxMemoryPoolError (osMemoryPoolId_t mp_id, int32_t status) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxMemoryPoolError, (uint32_t)mp_id, (uint32_t)status);
N#else
N  (void)mp_id;
N  (void)status;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MEMPOOL != 0) && !defined(EVR_RTX_MEMORY_POOL_NEW_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxMemoryPoolNew (uint32_t block_count, uint32_t block_size, const osMemoryPoolAttr_t *attr) {
X__attribute__((weak)) void EvrRtxMemoryPoolNew (uint32_t block_count, uint32_t block_size, const osMemoryPoolAttr_t *attr) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord4(EvtRtxMemoryPoolNew, block_count, block_size, (uint32_t)attr, 0U);
N#else
N  (void)block_count;
N  (void)block_size;
N  (void)attr;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MEMPOOL != 0) && !defined(EVR_RTX_MEMORY_POOL_CREATED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxMemoryPoolCreated (osMemoryPoolId_t mp_id, const char *name) {
X__attribute__((weak)) void EvrRtxMemoryPoolCreated (osMemoryPoolId_t mp_id, const char *name) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxMemoryPoolCreated, (uint32_t)mp_id, (uint32_t)name);
N#else
N  (void)mp_id;
N  (void)name;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MEMPOOL != 0) && !defined(EVR_RTX_MEMORY_POOL_GET_NAME_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxMemoryPoolGetName (osMemoryPoolId_t mp_id, const char *name) {
X__attribute__((weak)) void EvrRtxMemoryPoolGetName (osMemoryPoolId_t mp_id, const char *name) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxMemoryPoolGetName, (uint32_t)mp_id, (uint32_t)name);
N#else
N  (void)mp_id;
N  (void)name;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MEMPOOL != 0) && !defined(EVR_RTX_MEMORY_POOL_ALLOC_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxMemoryPoolAlloc (osMemoryPoolId_t mp_id, uint32_t timeout) {
X__attribute__((weak)) void EvrRtxMemoryPoolAlloc (osMemoryPoolId_t mp_id, uint32_t timeout) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxMemoryPoolAlloc, (uint32_t)mp_id, timeout);
N#else
N  (void)mp_id;
N  (void)timeout;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MEMPOOL != 0) && !defined(EVR_RTX_MEMORY_POOL_ALLOC_PENDING_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxMemoryPoolAllocPending (osMemoryPoolId_t mp_id, uint32_t timeout) {
X__attribute__((weak)) void EvrRtxMemoryPoolAllocPending (osMemoryPoolId_t mp_id, uint32_t timeout) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxMemoryPoolAllocPending, (uint32_t)mp_id, timeout);
N#else
N  (void)mp_id;
N  (void)timeout;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MEMPOOL != 0) && !defined(EVR_RTX_MEMORY_POOL_ALLOC_TIMEOUT_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxMemoryPoolAllocTimeout (osMemoryPoolId_t mp_id) {
X__attribute__((weak)) void EvrRtxMemoryPoolAllocTimeout (osMemoryPoolId_t mp_id) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxMemoryPoolAllocTimeout, (uint32_t)mp_id, 0U);
N#else
N  (void)mp_id;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MEMPOOL != 0) && !defined(EVR_RTX_MEMORY_POOL_ALLOCATED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxMemoryPoolAllocated (osMemoryPoolId_t mp_id, void *block) {
X__attribute__((weak)) void EvrRtxMemoryPoolAllocated (osMemoryPoolId_t mp_id, void *block) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxMemoryPoolAllocated, (uint32_t)mp_id, (uint32_t)block);
N#else
N  (void)mp_id;
N  (void)block;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MEMPOOL != 0) && !defined(EVR_RTX_MEMORY_POOL_ALLOC_FAILED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxMemoryPoolAllocFailed (osMemoryPoolId_t mp_id) {
X__attribute__((weak)) void EvrRtxMemoryPoolAllocFailed (osMemoryPoolId_t mp_id) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxMemoryPoolAllocFailed, (uint32_t)mp_id, 0U);
N#else
N  (void)mp_id;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MEMPOOL != 0) && !defined(EVR_RTX_MEMORY_POOL_FREE_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxMemoryPoolFree (osMemoryPoolId_t mp_id, void *block) {
X__attribute__((weak)) void EvrRtxMemoryPoolFree (osMemoryPoolId_t mp_id, void *block) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxMemoryPoolFree, (uint32_t)mp_id, (uint32_t)block);
N#else
N  (void)mp_id;
N  (void)block;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MEMPOOL != 0) && !defined(EVR_RTX_MEMORY_POOL_DEALLOCATED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxMemoryPoolDeallocated (osMemoryPoolId_t mp_id, void *block) {
X__attribute__((weak)) void EvrRtxMemoryPoolDeallocated (osMemoryPoolId_t mp_id, void *block) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxMemoryPoolDeallocated, (uint32_t)mp_id, (uint32_t)block);
N#else
N  (void)mp_id;
N  (void)block;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MEMPOOL != 0) && !defined(EVR_RTX_MEMORY_POOL_FREE_FAILED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxMemoryPoolFreeFailed (osMemoryPoolId_t mp_id, void *block) {
X__attribute__((weak)) void EvrRtxMemoryPoolFreeFailed (osMemoryPoolId_t mp_id, void *block) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxMemoryPoolFreeFailed, (uint32_t)mp_id, (uint32_t)block);
N#else
N  (void)mp_id;
N  (void)block;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MEMPOOL != 0) && !defined(EVR_RTX_MEMORY_POOL_GET_CAPACITY_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxMemoryPoolGetCapacity (osMemoryPoolId_t mp_id, uint32_t capacity) {
X__attribute__((weak)) void EvrRtxMemoryPoolGetCapacity (osMemoryPoolId_t mp_id, uint32_t capacity) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxMemoryPoolGetCapacity, (uint32_t)mp_id, capacity);
N#else
N  (void)mp_id;
N  (void)capacity;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MEMPOOL != 0) && !defined(EVR_RTX_MEMORY_POOL_GET_BLOCK_SZIE_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxMemoryPoolGetBlockSize (osMemoryPoolId_t mp_id, uint32_t block_size) {
X__attribute__((weak)) void EvrRtxMemoryPoolGetBlockSize (osMemoryPoolId_t mp_id, uint32_t block_size) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxMemoryPoolGetBlockSize, (uint32_t)mp_id, block_size);
N#else
N  (void)mp_id;
N  (void)block_size;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MEMPOOL != 0) && !defined(EVR_RTX_MEMORY_POOL_GET_COUNT_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxMemoryPoolGetCount (osMemoryPoolId_t mp_id, uint32_t count) {
X__attribute__((weak)) void EvrRtxMemoryPoolGetCount (osMemoryPoolId_t mp_id, uint32_t count) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxMemoryPoolGetCount, (uint32_t)mp_id, count);
N#else
N  (void)mp_id;
N  (void)count;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MEMPOOL != 0) && !defined(EVR_RTX_MEMORY_POOL_GET_SPACE_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxMemoryPoolGetSpace (osMemoryPoolId_t mp_id, uint32_t space) {
X__attribute__((weak)) void EvrRtxMemoryPoolGetSpace (osMemoryPoolId_t mp_id, uint32_t space) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxMemoryPoolGetSpace, (uint32_t)mp_id, space);
N#else
N  (void)mp_id;
N  (void)space;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MEMPOOL != 0) && !defined(EVR_RTX_MEMORY_POOL_DELETE_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxMemoryPoolDelete (osMemoryPoolId_t mp_id) {
X__attribute__((weak)) void EvrRtxMemoryPoolDelete (osMemoryPoolId_t mp_id) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxMemoryPoolDelete, (uint32_t)mp_id, 0U);
N#else
N  (void)mp_id;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MEMPOOL != 0) && !defined(EVR_RTX_MEMORY_POOL_DESTROYED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxMemoryPoolDestroyed (osMemoryPoolId_t mp_id) {
X__attribute__((weak)) void EvrRtxMemoryPoolDestroyed (osMemoryPoolId_t mp_id) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxMemoryPoolDestroyed, (uint32_t)mp_id, 0U);
N#else
N  (void)mp_id;
N#endif
N}
N#endif
N
N
N//  ==== Message Queue Events ====
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MSGQUEUE != 0) && !defined(EVR_RTX_MESSAGE_QUEUE_ERROR_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxMessageQueueError (osMessageQueueId_t mq_id, int32_t status) {
X__attribute__((weak)) void EvrRtxMessageQueueError (osMessageQueueId_t mq_id, int32_t status) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2 (EvtRtxMessageQueueError, (uint32_t)mq_id, (uint32_t)status);
N#else
N  (void)mq_id;
N  (void)status;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MSGQUEUE != 0) && !defined(EVR_RTX_MESSAGE_QUEUE_NEW_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
X__attribute__((weak)) void EvrRtxMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord4(EvtRtxMessageQueueNew, msg_count, msg_size, (uint32_t)attr, 0U);
N#else
N  (void)msg_count;
N  (void)msg_size;
N  (void)attr;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MSGQUEUE != 0) && !defined(EVR_RTX_MESSAGE_QUEUE_CREATED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxMessageQueueCreated (osMessageQueueId_t mq_id, const char *name) {
X__attribute__((weak)) void EvrRtxMessageQueueCreated (osMessageQueueId_t mq_id, const char *name) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxMessageQueueCreated, (uint32_t)mq_id, (uint32_t)name);
N#else
N  (void)mq_id;
N  (void)name;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MSGQUEUE != 0) && !defined(EVR_RTX_MESSAGE_QUEUE_GET_NAME_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxMessageQueueGetName (osMessageQueueId_t mq_id, const char *name) {
X__attribute__((weak)) void EvrRtxMessageQueueGetName (osMessageQueueId_t mq_id, const char *name) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxMessageQueueGetName, (uint32_t)mq_id, (uint32_t)name);
N#else
N  (void)mq_id;
N  (void)name;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MSGQUEUE != 0) && !defined(EVR_RTX_MESSAGE_QUEUE_PUT_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
X__attribute__((weak)) void EvrRtxMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord4(EvtRtxMessageQueuePut, (uint32_t)mq_id, (uint32_t)msg_ptr, (uint32_t)msg_prio, timeout);
N#else
N  (void)mq_id;
N  (void)msg_ptr;
N  (void)msg_prio;
N  (void)timeout;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MSGQUEUE != 0) && !defined(EVR_RTX_MESSAGE_QUEUE_PUT_PENDING_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxMessageQueuePutPending (osMessageQueueId_t mq_id, const void *msg_ptr, uint32_t timeout) {
X__attribute__((weak)) void EvrRtxMessageQueuePutPending (osMessageQueueId_t mq_id, const void *msg_ptr, uint32_t timeout) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord4(EvtRtxMessageQueuePutPending, (uint32_t)mq_id, (uint32_t)msg_ptr, timeout, 0U);
N#else
N  (void)mq_id;
N  (void)msg_ptr;
N  (void)timeout;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MSGQUEUE != 0) && !defined(EVR_RTX_MESSAGE_QUEUE_PUT_TIMEOUT_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxMessageQueuePutTimeout (osMessageQueueId_t mq_id) {
X__attribute__((weak)) void EvrRtxMessageQueuePutTimeout (osMessageQueueId_t mq_id) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxMessageQueuePutTimeout, (uint32_t)mq_id, 0U);
N#else
N  (void)mq_id;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MSGQUEUE != 0) && !defined(EVR_RTX_MESSAGE_QUEUE_INSERT_PENDING_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxMessageQueueInsertPending (osMessageQueueId_t mq_id, const void *msg_ptr) {
X__attribute__((weak)) void EvrRtxMessageQueueInsertPending (osMessageQueueId_t mq_id, const void *msg_ptr) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxMessageQueueInsertPending, (uint32_t)mq_id, (uint32_t)msg_ptr);
N#else
N  (void)mq_id;
N  (void)msg_ptr;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MSGQUEUE != 0) && !defined(EVR_RTX_MESSAGE_QUEUE_INSERTED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxMessageQueueInserted (osMessageQueueId_t mq_id, const void *msg_ptr) {
X__attribute__((weak)) void EvrRtxMessageQueueInserted (osMessageQueueId_t mq_id, const void *msg_ptr) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxMessageQueueInserted, (uint32_t)mq_id, (uint32_t)msg_ptr);
N#else
N  (void)mq_id;
N  (void)msg_ptr;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MSGQUEUE != 0) && !defined(EVR_RTX_MESSAGE_QUEUE_NOT_INSERTED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxMessageQueueNotInserted (osMessageQueueId_t mq_id, const void *msg_ptr) {
X__attribute__((weak)) void EvrRtxMessageQueueNotInserted (osMessageQueueId_t mq_id, const void *msg_ptr) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxMessageQueueNotInserted, (uint32_t)mq_id, (uint32_t)msg_ptr);
N#else
N  (void)mq_id;
N  (void)msg_ptr;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MSGQUEUE != 0) && !defined(EVR_RTX_MESSAGE_QUEUE_GET_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
X__attribute__((weak)) void EvrRtxMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord4(EvtRtxMessageQueueGet, (uint32_t)mq_id, (uint32_t)msg_ptr, (uint32_t)msg_prio, timeout);
N#else
N  (void)mq_id;
N  (void)msg_ptr;
N  (void)msg_prio;
N  (void)timeout;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MSGQUEUE != 0) && !defined(EVR_RTX_MESSAGE_QUEUE_GET_PENDING_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxMessageQueueGetPending (osMessageQueueId_t mq_id, void *msg_ptr, uint32_t timeout) {
X__attribute__((weak)) void EvrRtxMessageQueueGetPending (osMessageQueueId_t mq_id, void *msg_ptr, uint32_t timeout) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord4(EvtRtxMessageQueueGetPending, (uint32_t)mq_id, (uint32_t)msg_ptr, timeout, 0U);
N#else
N  (void)mq_id;
N  (void)msg_ptr;
N  (void)timeout;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MSGQUEUE != 0) && !defined(EVR_RTX_MESSAGE_QUEUE_GET_TIMEOUT_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxMessageQueueGetTimeout (osMessageQueueId_t mq_id) {
X__attribute__((weak)) void EvrRtxMessageQueueGetTimeout (osMessageQueueId_t mq_id) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxMessageQueueGetTimeout, (uint32_t)mq_id, 0U);
N#else
N  (void)mq_id;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MSGQUEUE != 0) && !defined(EVR_RTX_MESSAGE_QUEUE_RETRIEVED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxMessageQueueRetrieved (osMessageQueueId_t mq_id, void *msg_ptr) {
X__attribute__((weak)) void EvrRtxMessageQueueRetrieved (osMessageQueueId_t mq_id, void *msg_ptr) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxMessageQueueRetrieved, (uint32_t)mq_id, (uint32_t)msg_ptr);
N#else
N  (void)mq_id;
N  (void)msg_ptr;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MSGQUEUE != 0) && !defined(EVR_RTX_MESSAGE_QUEUE_NOT_RETRIEVED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxMessageQueueNotRetrieved (osMessageQueueId_t mq_id, void *msg_ptr) {
X__attribute__((weak)) void EvrRtxMessageQueueNotRetrieved (osMessageQueueId_t mq_id, void *msg_ptr) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxMessageQueueNotRetrieved, (uint32_t)mq_id, (uint32_t)msg_ptr);
N#else
N  (void)mq_id;
N  (void)msg_ptr;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MSGQUEUE != 0) && !defined(EVR_RTX_MESSAGE_QUEUE_GET_CAPACITY_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxMessageQueueGetCapacity (osMessageQueueId_t mq_id, uint32_t capacity) {
X__attribute__((weak)) void EvrRtxMessageQueueGetCapacity (osMessageQueueId_t mq_id, uint32_t capacity) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxMessageQueueGetCapacity, (uint32_t)mq_id, capacity);
N#else
N  (void)mq_id;
N  (void)capacity;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MSGQUEUE != 0) && !defined(EVR_RTX_MESSAGE_QUEUE_GET_MSG_SIZE_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxMessageQueueGetMsgSize (osMessageQueueId_t mq_id, uint32_t msg_size) {
X__attribute__((weak)) void EvrRtxMessageQueueGetMsgSize (osMessageQueueId_t mq_id, uint32_t msg_size) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxMessageQueueGetMsgSize, (uint32_t)mq_id, msg_size);
N#else
N  (void)mq_id;
N  (void)msg_size;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MSGQUEUE != 0) && !defined(EVR_RTX_MESSAGE_QUEUE_GET_COUNT_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxMessageQueueGetCount (osMessageQueueId_t mq_id, uint32_t count) {
X__attribute__((weak)) void EvrRtxMessageQueueGetCount (osMessageQueueId_t mq_id, uint32_t count) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxMessageQueueGetCount, (uint32_t)mq_id, count);
N#else
N  (void)mq_id;
N  (void)count;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MSGQUEUE != 0) && !defined(EVR_RTX_MESSAGE_QUEUE_GET_SPACE_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxMessageQueueGetSpace (osMessageQueueId_t mq_id, uint32_t space) {
X__attribute__((weak)) void EvrRtxMessageQueueGetSpace (osMessageQueueId_t mq_id, uint32_t space) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxMessageQueueGetSpace, (uint32_t)mq_id, space);
N#else
N  (void)mq_id;
N  (void)space;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MSGQUEUE != 0) && !defined(EVR_RTX_MESSAGE_QUEUE_RESET_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxMessageQueueReset (osMessageQueueId_t mq_id) {
X__attribute__((weak)) void EvrRtxMessageQueueReset (osMessageQueueId_t mq_id) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxMessageQueueReset, (uint32_t)mq_id, 0U);
N#else
N  (void)mq_id;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MSGQUEUE != 0) && !defined(EVR_RTX_MESSAGE_QUEUE_RESET_DONE_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxMessageQueueResetDone (osMessageQueueId_t mq_id) {
X__attribute__((weak)) void EvrRtxMessageQueueResetDone (osMessageQueueId_t mq_id) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxMessageQueueResetDone, (uint32_t)mq_id, 0U);
N#else
N  (void)mq_id;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MSGQUEUE != 0) && !defined(EVR_RTX_MESSAGE_QUEUE_DELETE_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxMessageQueueDelete (osMessageQueueId_t mq_id) {
X__attribute__((weak)) void EvrRtxMessageQueueDelete (osMessageQueueId_t mq_id) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxMessageQueueDelete, (uint32_t)mq_id, 0U);
N#else
N  (void)mq_id;
N#endif
N}
N#endif
N
N#if (!defined(EVR_RTX_DISABLE) && (OS_EVR_MSGQUEUE != 0) && !defined(EVR_RTX_MESSAGE_QUEUE_DESTROYED_DISABLE))
X#if (!0L && (1 != 0) && !0L)
N__WEAK void EvrRtxMessageQueueDestroyed (osMessageQueueId_t mq_id) {
X__attribute__((weak)) void EvrRtxMessageQueueDestroyed (osMessageQueueId_t mq_id) {
N#if defined(RTE_Compiler_EventRecorder)
X#if 0L
S  (void)EventRecord2(EvtRtxMessageQueueDestroyed, (uint32_t)mq_id, 0U);
N#else
N  (void)mq_id;
N#endif
N}
N#endif
