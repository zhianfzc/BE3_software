; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\objects\kl520_api.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\kl520_api.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O3 --diag_suppress=9931 -I..\..\config -I..\..\..\..\board -I..\..\..\..\common\include -I..\..\..\..\scpu\device\include\CMSIS -I..\..\..\..\scpu\device\include\Kneron -I..\..\..\..\scpu\framework\include -I..\..\..\..\scpu\framework\include\framework -I..\..\..\..\scpu\drivers\include -I..\..\..\..\scpu\drivers\include\media\touch -I..\..\..\..\scpu\drivers\include\media\flash -I..\..\..\..\scpu\lib\kdp_system\inc -I..\..\..\..\scpu\lib\kdp_application\include\ -I..\..\..\..\scpu\lib\kdp_application\base\ -I..\..\..\..\scpu\lib\kdp_application\misc -I..\..\..\..\scpu\lib\kdp_e2e_r1n1\include -I..\..\..\..\scpu\include -I..\..\..\..\scpu\middleware\ota -I..\..\..\..\scpu\middleware\comm -I..\..\..\..\scpu\middleware\kdp_comm -I..\..\..\..\scpu\share -I..\..\..\..\scpu\share\gui_lib -I..\..\user -I.\RTE\CMSIS -I.\RTE\_Target-scpu -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\RTOS2\Include -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\RTOS2\RTX\Include -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\Device\ARM\ARMCM4\Include -D__RTX -D__MICROLIB -D__UVISION_VERSION=538 -D_RTE_ -DARMCM4_FP -D_RTE_ -DARM_MATH_CM4 -DTARGET_SCPU -DLOG_ENABLE -DKL520 -DHEAD_POSE_CHECK_PERCENT --omf_browse=.\objects\kl520_api.crf ..\..\..\..\scpu\share\kl520_api.c]
                          THUMB

                          AREA ||i._kl520_api_dp_layout_lm||, CODE, READONLY, ALIGN=2

                  _kl520_api_dp_layout_lm PROC
;;;677    
;;;678    void _kl520_api_dp_layout_lm(kl520_dp_draw_info *info, int flag)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;679    {   
000004  b097              SUB      sp,sp,#0x5c
000006  4604              MOV      r4,r0
000008  4689              MOV      r9,r1
;;;680        u16 color;
;;;681        u32 pen_width;
;;;682        
;;;683        struct video_input_params params;
;;;684        
;;;685        if(kdp_video_renderer_get_params(&params))
00000a  a806              ADD      r0,sp,#0x18
00000c  f7fffffe          BL       kdp_video_renderer_get_params
000010  2800              CMP      r0,#0
000012  d17d              BNE      |L1.272|
;;;686            return; 
;;;687        
;;;688        int org_x = (int)0;
000014  4683              MOV      r11,r0
;;;689        int org_y = (int)0;
;;;690    
;;;691        int dp_w = (int)params.dp_out_w;
000016  f8bd802e          LDRH     r8,[sp,#0x2e]
;;;692        int dp_h = (int)params.dp_out_h;
00001a  f8bd7030          LDRH     r7,[sp,#0x30]
;;;693    
;;;694        int img_w = (int)params.dp_area_w;
00001e  f8bd602a          LDRH     r6,[sp,#0x2a]
;;;695        int img_h = (int)params.dp_area_h;
000022  f8bd502c          LDRH     r5,[sp,#0x2c]
000026  46da              MOV      r10,r11               ;689
;;;696    
;;;697        
;;;698        if (KL520_FACE_FAIL == flag)
000028  f1b90f02          CMP      r9,#2
00002c  d070              BEQ      |L1.272|
;;;699        {
;;;700    #if (KL520_API_SHOW_FAIL_LM == YES)
;;;701            color = LCD_DISPLAY_FDR_FAIL_COLOR;
;;;702            pen_width = LCD_DISPLAY_FDR_FAIL_PEN_WIDTH;
;;;703    #else
;;;704            return;
;;;705    #endif
;;;706        }
;;;707        else
;;;708        {
;;;709            color = LCD_DISPLAY_LM_OK_COLOR;
00002e  f24070ff          MOV      r0,#0x7ff
;;;710            pen_width = LCD_DISPLAY_LM_OK_PEN_WIDTH;
000032  2104              MOVS     r1,#4
;;;711        }
;;;712    
;;;713        kl520_api_dp_set_pen_rgb565(color, pen_width);
000034  9015              STR      r0,[sp,#0x54]
000036  f7fffffe          BL       kl520_api_dp_set_pen_rgb565
;;;714    
;;;715        if (params.src_cam_idx == CAMERA_DEVICE_NIR_IDX) { /*NIR*/
00003a  4950              LDR      r1,|L1.380|
00003c  f8bd0020          LDRH     r0,[sp,#0x20]
000040  7809              LDRB     r1,[r1,#0]  ; nir_sensor_index
000042  4288              CMP      r0,r1
000044  d147              BNE      |L1.214|
;;;716            int bbx = (int)(org_x + info->n1_rc.start_x - DISPLAY_NIR_X_OFFSET) * dp_w / img_w;
000046  8920              LDRH     r0,[r4,#8]
;;;717            int bby = (int)(org_y + info->n1_rc.start_y - DISPLAY_NIR_Y_OFFSET) * dp_h / img_h;
;;;718            int bbw = (int)(info->n1_rc.end_x - info->n1_rc.start_x) * dp_w / img_w;
;;;719            int bbh = (int)(info->n1_rc.end_y - info->n1_rc.start_y) * dp_h / img_h;
;;;720        
;;;721            for(u8 i=0;i<LAND_MARK_POINTS;i++)
000048  46d9              MOV      r9,r11
00004a  fb00f108          MUL      r1,r0,r8              ;716
00004e  fb91f1f6          SDIV     r1,r1,r6              ;716
000052  9101              STR      r1,[sp,#4]            ;717
000054  8961              LDRH     r1,[r4,#0xa]          ;717
000056  fb01f207          MUL      r2,r1,r7              ;717
00005a  fb92f2f5          SDIV     r2,r2,r5              ;717
00005e  9200              STR      r2,[sp,#0]            ;718
000060  89a2              LDRH     r2,[r4,#0xc]          ;718
000062  1a10              SUBS     r0,r2,r0              ;718
000064  fb00f008          MUL      r0,r0,r8              ;718
000068  fb90f0f6          SDIV     r0,r0,r6              ;718
00006c  9005              STR      r0,[sp,#0x14]         ;719
00006e  89e0              LDRH     r0,[r4,#0xe]          ;719
000070  1a40              SUBS     r0,r0,r1              ;719
000072  4378              MULS     r0,r7,r0              ;719
000074  fb90f0f5          SDIV     r0,r0,r5              ;719
000078  f8cd0010          STR.W    r0,[sp,#0x10]
                  |L1.124|
;;;722            {
;;;723                int lmx = (int)(org_x + info->n1_pt_array[i].x - DISPLAY_NIR_X_OFFSET) * dp_w / img_w;
00007c  eb0401c9          ADD      r1,r4,r9,LSL #3
000080  6b8a              LDR      r2,[r1,#0x38]
000082  eb02000b          ADD      r0,r2,r11
;;;724                int lmy = (int)(org_y + info->n1_pt_array[i].y - DISPLAY_NIR_Y_OFFSET) * dp_h / img_h;
000086  6bca              LDR      r2,[r1,#0x3c]
000088  fb00f008          MUL      r0,r0,r8              ;723
00008c  eb02010a          ADD      r1,r2,r10
000090  4379              MULS     r1,r7,r1
000092  fb90f0f6          SDIV     r0,r0,r6              ;723
000096  fb91f1f5          SDIV     r1,r1,r5
;;;725                
;;;726                if(lmx>0 && lmy>0)
00009a  2800              CMP      r0,#0
00009c  dd05              BLE      |L1.170|
00009e  2900              CMP      r1,#0
0000a0  dd03              BLE      |L1.170|
;;;727                    kl520_api_dp_draw_rect(lmx, lmy, 4, 4);
0000a2  2304              MOVS     r3,#4
0000a4  461a              MOV      r2,r3
0000a6  f7fffffe          BL       kl520_api_dp_draw_rect
                  |L1.170|
0000aa  f1090001          ADD      r0,r9,#1              ;721
0000ae  f00009ff          AND      r9,r0,#0xff           ;721
0000b2  f1b90f05          CMP      r9,#5                 ;721
0000b6  d3e1              BCC      |L1.124|
;;;728            }
;;;729            
;;;730            kl520_api_dp_set_pen_rgb565(color, LCD_DISPLAY_LM_BOX_PEN_WIDTH);
0000b8  2101              MOVS     r1,#1
0000ba  9815              LDR      r0,[sp,#0x54]
0000bc  f7fffffe          BL       kl520_api_dp_set_pen_rgb565
;;;731                if(bbx>0 && bby>0)
0000c0  9801              LDR      r0,[sp,#4]
0000c2  2800              CMP      r0,#0
0000c4  dd56              BLE      |L1.372|
0000c6  9800              LDR      r0,[sp,#0]
0000c8  2800              CMP      r0,#0
0000ca  dd53              BLE      |L1.372|
;;;732                    kl520_api_dp_draw_rect(bbx, bby, bbw, bbh);
0000cc  e9dd3204          LDRD     r3,r2,[sp,#0x10]
0000d0  4601              MOV      r1,r0
0000d2  9801              LDR      r0,[sp,#4]
0000d4  e04c              B        |L1.368|
                  |L1.214|
;;;733        
;;;734        }
;;;735        else if (params.src_cam_idx == CAMERA_DEVICE_RGB_IDX) {
0000d6  492a              LDR      r1,|L1.384|
0000d8  7809              LDRB     r1,[r1,#0]  ; rgb_sensor_index
0000da  4288              CMP      r0,r1
0000dc  d14a              BNE      |L1.372|
;;;736            int bbx = (int)(org_x + info->r1_rc.start_x - DISPLAY_RGB_X_OFFSET) * dp_w / img_w;
0000de  8820              LDRH     r0,[r4,#0]
0000e0  fb00f108          MUL      r1,r0,r8
0000e4  fb91f1f6          SDIV     r1,r1,r6
;;;737            int bby = (int)(org_y + info->r1_rc.start_y - DISPLAY_RGB_Y_OFFSET) * dp_h / img_h;
0000e8  9103              STR      r1,[sp,#0xc]
0000ea  8861              LDRH     r1,[r4,#2]
0000ec  fb01f207          MUL      r2,r1,r7
0000f0  fb92f2f5          SDIV     r2,r2,r5
;;;738            int bbw = (int)(info->r1_rc.end_x - info->r1_rc.start_x) * dp_w / img_w;
0000f4  9202              STR      r2,[sp,#8]
0000f6  88a2              LDRH     r2,[r4,#4]
0000f8  1a10              SUBS     r0,r2,r0
0000fa  fb00f008          MUL      r0,r0,r8
0000fe  fb90f0f6          SDIV     r0,r0,r6
;;;739            int bbh = (int)(info->r1_rc.end_y - info->r1_rc.start_y) * dp_h / img_h;
000102  9001              STR      r0,[sp,#4]
000104  88e0              LDRH     r0,[r4,#6]
000106  1a40              SUBS     r0,r0,r1
000108  4378              MULS     r0,r7,r0
00010a  fb90f0f5          SDIV     r0,r0,r5
;;;740        
;;;741            for(u8 i=0;i<LAND_MARK_POINTS;i++)
00010e  e000              B        |L1.274|
                  |L1.272|
000110  e030              B        |L1.372|
                  |L1.274|
000112  f04f0900          MOV      r9,#0
000116  9000              STR      r0,[sp,#0]
                  |L1.280|
;;;742            {
;;;743                int lmx = (int)(org_x + info->r1_pt_array[i].x - DISPLAY_RGB_X_OFFSET) * dp_w / img_w;
000118  eb0401c9          ADD      r1,r4,r9,LSL #3
00011c  690a              LDR      r2,[r1,#0x10]
00011e  eb02000b          ADD      r0,r2,r11
;;;744                int lmy = (int)(org_y + info->r1_pt_array[i].y - DISPLAY_RGB_Y_OFFSET) * dp_h / img_h;
000122  694a              LDR      r2,[r1,#0x14]
000124  fb00f008          MUL      r0,r0,r8              ;743
000128  eb02010a          ADD      r1,r2,r10
00012c  4379              MULS     r1,r7,r1
00012e  fb90f0f6          SDIV     r0,r0,r6              ;743
000132  fb91f1f5          SDIV     r1,r1,r5
;;;745                
;;;746                if(lmx>0 && lmy>0)
000136  2800              CMP      r0,#0
000138  dd05              BLE      |L1.326|
00013a  2900              CMP      r1,#0
00013c  dd03              BLE      |L1.326|
;;;747                    kl520_api_dp_draw_rect(lmx, lmy, 4, 4);
00013e  2304              MOVS     r3,#4
000140  461a              MOV      r2,r3
000142  f7fffffe          BL       kl520_api_dp_draw_rect
                  |L1.326|
000146  f1090001          ADD      r0,r9,#1              ;741
00014a  f00009ff          AND      r9,r0,#0xff           ;741
00014e  f1b90f05          CMP      r9,#5                 ;741
000152  d3e1              BCC      |L1.280|
;;;748            }
;;;749                        
;;;750            kl520_api_dp_set_pen_rgb565(color, LCD_DISPLAY_LM_BOX_PEN_WIDTH);
000154  2101              MOVS     r1,#1
000156  9815              LDR      r0,[sp,#0x54]
000158  f7fffffe          BL       kl520_api_dp_set_pen_rgb565
;;;751                if(bbx>0 && bby>0)
00015c  9803              LDR      r0,[sp,#0xc]
00015e  2800              CMP      r0,#0
000160  dd08              BLE      |L1.372|
000162  9802              LDR      r0,[sp,#8]
000164  2800              CMP      r0,#0
000166  dd05              BLE      |L1.372|
;;;752                    kl520_api_dp_draw_rect(bbx, bby, bbw, bbh);
000168  e9dd3200          LDRD     r3,r2,[sp,#0]
00016c  4601              MOV      r1,r0
00016e  9803              LDR      r0,[sp,#0xc]
                  |L1.368|
000170  f7fffffe          BL       kl520_api_dp_draw_rect
                  |L1.372|
;;;753        }
;;;754    }
000174  b017              ADD      sp,sp,#0x5c
000176  e8bd8ff0          POP      {r4-r11,pc}
;;;755    
                          ENDP

00017a  0000              DCW      0x0000
                  |L1.380|
                          DCD      nir_sensor_index
                  |L1.384|
                          DCD      rgb_sensor_index

                          AREA ||i.kl520_api_customer_chk_key_exist||, CODE, READONLY, ALIGN=1

                  kl520_api_customer_chk_key_exist PROC
;;;1137   
;;;1138   BOOL kl520_api_customer_chk_key_exist(u8* ptr, u8 nLen)
000000  b510              PUSH     {r4,lr}
;;;1139   {
;;;1140       u8 i, nCnt = 0;
000002  2300              MOVS     r3,#0
;;;1141   
;;;1142       for ( i = 0; i < nLen; i++ )
000004  461a              MOV      r2,r3
000006  e006              B        |L2.22|
                  |L2.8|
;;;1143       {
;;;1144           if ( *(ptr+i) == 0xFF )
000008  5c84              LDRB     r4,[r0,r2]
00000a  2cff              CMP      r4,#0xff
00000c  d101              BNE      |L2.18|
00000e  1c5b              ADDS     r3,r3,#1
;;;1145           {
;;;1146               nCnt++;
000010  b2db              UXTB     r3,r3
                  |L2.18|
000012  1c52              ADDS     r2,r2,#1
000014  b2d2              UXTB     r2,r2                 ;1142
                  |L2.22|
000016  428a              CMP      r2,r1                 ;1142
000018  d3f6              BCC      |L2.8|
;;;1147           }
;;;1148       }
;;;1149   
;;;1150       if ( nCnt == nLen)
00001a  428b              CMP      r3,r1
00001c  d101              BNE      |L2.34|
;;;1151       {
;;;1152           return FALSE;   //No Key
00001e  2000              MOVS     r0,#0
;;;1153       }
;;;1154       else
;;;1155       {
;;;1156           return TRUE;   //Key inside
;;;1157       }
;;;1158   }
000020  bd10              POP      {r4,pc}
                  |L2.34|
000022  2001              MOVS     r0,#1                 ;1156
000024  bd10              POP      {r4,pc}
;;;1159   
                          ENDP


                          AREA ||i.kl520_api_customer_clr||, CODE, READONLY, ALIGN=2

                  kl520_api_customer_clr PROC
;;;1159   
;;;1160   int kl520_api_customer_clr(void)
000000  b510              PUSH     {r4,lr}
;;;1161   {
;;;1162   
;;;1163       memset((void *)KDP_DDR_MEM_START, 0xFF, sizeof(kl520_customer_info));
000002  2130              MOVS     r1,#0x30
000004  064c              LSLS     r4,r1,#25
000006  22ff              MOVS     r2,#0xff
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       __aeabi_memset
;;;1164       kdp_memxfer_ddr_to_flash((u32)KDP_FLASH_INF_ADDR, (u32)KDP_DDR_MEM_START, sizeof(kl520_customer_info));
00000e  2230              MOVS     r2,#0x30
000010  4621              MOV      r1,r4
000012  4802              LDR      r0,|L3.28|
000014  f7fffffe          BL       kdp_memxfer_ddr_to_flash
;;;1165   
;;;1166       return 0;
000018  2000              MOVS     r0,#0
;;;1167   }
00001a  bd10              POP      {r4,pc}
;;;1168   
                          ENDP

                  |L3.28|
                          DCD      0x00fd1000

                          AREA ||i.kl520_api_customer_get||, CODE, READONLY, ALIGN=2

                  kl520_api_customer_get PROC
;;;1110   
;;;1111   int kl520_api_customer_get(kl520_customer_info *cusinfo){
000000  b570              PUSH     {r4-r6,lr}
;;;1112   
;;;1113       //int ret = -1;
;;;1114       static u32 CusInfoAddr = 0;
;;;1115       u32 nLength = sizeof(kl520_customer_info);
;;;1116       if(nLength > KDP_FLASH_INF_SIZE){
;;;1117           dbg_msg_api("error Length");
;;;1118       }
;;;1119   
;;;1120       if(CusInfoAddr == 0){
000002  4d0a              LDR      r5,|L4.44|
000004  4606              MOV      r6,r0                 ;1111
000006  2430              MOVS     r4,#0x30              ;1115
000008  68a8              LDR      r0,[r5,#8]            ;1111  ; CusInfoAddr
00000a  b918              CBNZ     r0,|L4.20|
;;;1121           CusInfoAddr= kdp_ddr_reserve(nLength);
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       kdp_ddr_reserve
000012  60a8              STR      r0,[r5,#8]  ; CusInfoAddr
                  |L4.20|
;;;1122       }
;;;1123   
;;;1124       kdp_memxfer_flash_to_ddr(CusInfoAddr, KDP_FLASH_INF_ADDR, nLength);
000014  4622              MOV      r2,r4
000016  4906              LDR      r1,|L4.48|
000018  f7fffffe          BL       kdp_memxfer_flash_to_ddr
;;;1125   
;;;1126       memcpy(cusinfo, (void *)CusInfoAddr, nLength);
00001c  4622              MOV      r2,r4
00001e  4630              MOV      r0,r6
000020  68a9              LDR      r1,[r5,#8]  ; CusInfoAddr
000022  f7fffffe          BL       __aeabi_memcpy
;;;1127   
;;;1128       return 0;
000026  2000              MOVS     r0,#0
;;;1129   }
000028  bd70              POP      {r4-r6,pc}
;;;1130   
                          ENDP

00002a  0000              DCW      0x0000
                  |L4.44|
                          DCD      ||.data||
                  |L4.48|
                          DCD      0x00fd1000

                          AREA ||i.kl520_api_customer_info||, CODE, READONLY, ALIGN=1

                  kl520_api_customer_info PROC
;;;1168   
;;;1169   u32 kl520_api_customer_info(void){
000000  b500              PUSH     {lr}
000002  b08d              SUB      sp,sp,#0x34
;;;1170   
;;;1171       kl520_customer_info tCusinf;
;;;1172       kl520_api_customer_get(&tCusinf);
000004  4668              MOV      r0,sp
000006  f7fffffe          BL       kl520_api_customer_get
;;;1173   
;;;1174       dbg_msg_api("tCusinf.nCusInfo0=%d",tCusinf.nCusInfo0);
;;;1175       dbg_msg_api("tCusinf.nCusInfo1=%d",tCusinf.nCusInfo1);
;;;1176       dbg_msg_api("tCusinf.nCusInfo2=%u",tCusinf.nCusInfo2);
;;;1177       dbg_msg_api("tCusinf.nCusInfo3=%llu",tCusinf.nCusInfo3);
;;;1178   
;;;1179       return 0;
;;;1180   }
00000a  b00d              ADD      sp,sp,#0x34
00000c  2000              MOVS     r0,#0                 ;1179
00000e  bd00              POP      {pc}
;;;1181   
                          ENDP


                          AREA ||i.kl520_api_customer_write||, CODE, READONLY, ALIGN=2

                  kl520_api_customer_write PROC
;;;1130   
;;;1131   int kl520_api_customer_write(kl520_customer_info *cusinfo){
000000  b510              PUSH     {r4,lr}
;;;1132   
;;;1133       kdp_memxfer_ddr_to_flash((u32)KDP_FLASH_INF_ADDR, (u32)cusinfo, sizeof(kl520_customer_info));
000002  4601              MOV      r1,r0
000004  2230              MOVS     r2,#0x30
000006  4802              LDR      r0,|L6.16|
000008  f7fffffe          BL       kdp_memxfer_ddr_to_flash
;;;1134   
;;;1135       return 0;
00000c  2000              MOVS     r0,#0
;;;1136   }
00000e  bd10              POP      {r4,pc}
;;;1137   
                          ENDP

                  |L6.16|
                          DCD      0x00fd1000

                          AREA ||i.kl520_api_dp_close||, CODE, READONLY, ALIGN=2

                  kl520_api_dp_close PROC
;;;259    
;;;260    void kl520_api_dp_close(void)
000000  4803              LDR      r0,|L7.16|
;;;261    {
;;;262        if (DEV_INIT_STATE_INITED == m_dp_inited) {
000002  7801              LDRB     r1,[r0,#0]  ; m_dp_inited
000004  2901              CMP      r1,#1
000006  d101              BNE      |L7.12|
;;;263    #if ( CFG_PANEL_TYPE != PANEL_NULL )
;;;264            struct video_input_params params;
;;;265            kdp_video_renderer_get_params(&params);
;;;266    
;;;267            kl520_api_dp_fresh_bg(BLACK, 2);
;;;268    
;;;269            osDelay(1);
;;;270            kl520_api_dp_set_backlight(0);//turn off backlight
;;;271    
;;;272            kdp_video_renderer_stop();
;;;273    #endif
;;;274            m_dp_inited = DEV_INIT_STATE_UNINIT;
000008  2100              MOVS     r1,#0
00000a  7001              STRB     r1,[r0,#0]
                  |L7.12|
;;;275        }
;;;276    }
00000c  4770              BX       lr
;;;277    
                          ENDP

00000e  0000              DCW      0x0000
                  |L7.16|
                          DCD      ||.data||

                          AREA ||i.kl520_api_dp_draw_bitmap||, CODE, READONLY, ALIGN=1

                  kl520_api_dp_draw_bitmap PROC
;;;179    
;;;180    int kl520_api_dp_draw_bitmap(u32 org_x, u32 org_y, u32 width, u32 height, void *buf)
000000  b538              PUSH     {r3-r5,lr}
;;;181    {
;;;182        return kdp_display_draw_bitmap(org_x, org_y, width, height, buf);
000002  9c04              LDR      r4,[sp,#0x10]
000004  9400              STR      r4,[sp,#0]
000006  f7fffffe          BL       kdp_display_draw_bitmap
;;;183    }
00000a  bd38              POP      {r3-r5,pc}
;;;184    
                          ENDP


                          AREA ||i.kl520_api_dp_draw_line||, CODE, READONLY, ALIGN=1

                  kl520_api_dp_draw_line PROC
;;;174    
;;;175    int kl520_api_dp_draw_line(u32 xs, u32 ys, u32 xe, u32 ye)
000000  f7ffbffe          B.W      kdp_display_draw_line
;;;176    {
;;;177        return kdp_display_draw_line(xs, ys, xe, ye);
;;;178    }
;;;179    
                          ENDP


                          AREA ||i.kl520_api_dp_draw_rect||, CODE, READONLY, ALIGN=1

                  kl520_api_dp_draw_rect PROC
;;;184    
;;;185    int kl520_api_dp_draw_rect(int x, int y, int width, int height)
000000  f7ffbffe          B.W      kdp_display_draw_rect
;;;186    {
;;;187        return kdp_display_draw_rect(x, y, width, height);
;;;188    }
;;;189    
                          ENDP


                          AREA ||i.kl520_api_dp_fill_rect||, CODE, READONLY, ALIGN=1

                  kl520_api_dp_fill_rect PROC
;;;189    
;;;190    int kl520_api_dp_fill_rect(u32 org_x, u32 org_y, u32 width, u32 height)
000000  f7ffbffe          B.W      kdp_display_fill_rect
;;;191    {
;;;192        return kdp_display_fill_rect(org_x, org_y, width, height);
;;;193    }
;;;194    
                          ENDP


                          AREA ||i.kl520_api_dp_five_face_disable||, CODE, READONLY, ALIGN=2

                  kl520_api_dp_five_face_disable PROC
;;;159    
;;;160    void kl520_api_dp_five_face_disable(void)
000000  4901              LDR      r1,|L12.8|
;;;161    {
;;;162        m_dp_five_face_enable = FALSE;
000002  2000              MOVS     r0,#0
000004  7088              STRB     r0,[r1,#2]
;;;163    }
000006  4770              BX       lr
;;;164    
                          ENDP

                  |L12.8|
                          DCD      ||.data||

                          AREA ||i.kl520_api_dp_five_face_enable||, CODE, READONLY, ALIGN=2

                  kl520_api_dp_five_face_enable PROC
;;;154    
;;;155    void kl520_api_dp_five_face_enable(void)
000000  4901              LDR      r1,|L13.8|
;;;156    {
;;;157        m_dp_five_face_enable = TRUE;
000002  2001              MOVS     r0,#1
000004  7088              STRB     r0,[r1,#2]
;;;158    }
000006  4770              BX       lr
;;;159    
                          ENDP

                  |L13.8|
                          DCD      ||.data||

                          AREA ||i.kl520_api_dp_five_face_get||, CODE, READONLY, ALIGN=2

                  kl520_api_dp_five_face_get PROC
;;;164    
;;;165    BOOL kl520_api_dp_five_face_get(void)
000000  4801              LDR      r0,|L14.8|
;;;166    {
;;;167        return m_dp_five_face_enable;
000002  7880              LDRB     r0,[r0,#2]  ; m_dp_five_face_enable
;;;168    }
000004  4770              BX       lr
;;;169    
                          ENDP

000006  0000              DCW      0x0000
                  |L14.8|
                          DCD      ||.data||

                          AREA ||i.kl520_api_dp_fresh||, CODE, READONLY, ALIGN=1

                  kl520_api_dp_fresh PROC
;;;115    
;;;116    int kl520_api_dp_fresh(void) 
000000  f7ffbffe          B.W      kdp_display_fresh
;;;117    {
;;;118        int ret = kdp_display_fresh();
;;;119    #if CFG_USB_EXPORT_STREAM_IMG == YES
;;;120        {
;;;121            s8 export_image_ctrl = kl520_api_export_stream_get_image_crtl();
;;;122            eSTREAM_IMAGE_EXPORT_SRC export_rx_crtl = kl520_api_export_stream_get_image_export_crtl();
;;;123            if( export_rx_crtl == STRAM_IMAGE_DISPALY_e )
;;;124            {
;;;125                kl520_api_export_stream_image(MIPI_CAM_RGB, kdp_display_get_buffer_addr(), STRAM_IMAGE_DISPALY_e );
;;;126                kl520_api_export_stream_image_ready();
;;;127            }
;;;128        }
;;;129        
;;;130    #endif //CFG_USB_EXPORT_STREAM_IMG == YES
;;;131    
;;;132    #if ( CFG_PANEL_TYPE != PANEL_NULL )
;;;133        user_io_chk_backlight();
;;;134    #endif
;;;135    
;;;136        return ret;
;;;137    }
;;;138    
                          ENDP


                          AREA ||i.kl520_api_dp_fresh_bg||, CODE, READONLY, ALIGN=1

                  kl520_api_dp_fresh_bg PROC
;;;245    
;;;246    int kl520_api_dp_fresh_bg(u16 nColor, u8 nWidth)
000000  2000              MOVS     r0,#0
;;;247    {    
;;;248        int ret = 0;
;;;249    #if ( CFG_PANEL_TYPE != PANEL_NULL )
;;;250        do
;;;251        {
;;;252            KDP_CHK_BREAK(kl520_api_dp_set_pen_rgb565(nColor, nWidth));
;;;253            KDP_CHK_BREAK(kl520_api_dp_fill_rect(0, 0, DISPLAY_WIDTH, DISPLAY_HEIGHT));
;;;254            KDP_CHK_BREAK(kl520_api_dp_fresh());
;;;255        } while (0);
;;;256    #endif
;;;257        return ret;
;;;258    }
000002  4770              BX       lr
;;;259    
                          ENDP


                          AREA ||i.kl520_api_dp_get_backlight||, CODE, READONLY, ALIGN=1

                  kl520_api_dp_get_backlight PROC
;;;105    
;;;106    int kl520_api_dp_get_backlight(void)
000000  f7ffbffe          B.W      user_io_get_backlight
;;;107    {
;;;108        return user_io_get_backlight();
;;;109    }
;;;110    
                          ENDP


                          AREA ||i.kl520_api_dp_get_device_id||, CODE, READONLY, ALIGN=2

                  kl520_api_dp_get_device_id PROC
;;;194    
;;;195    int kl520_api_dp_get_device_id(void)
000000  4809              LDR      r0,|L18.40|
;;;196    {
000002  b510              PUSH     {r4,lr}
;;;197    	int nDeviceId;
;;;198    
;;;199    	if ( m_dp_inited == DEV_INIT_STATE_UNINIT )
000004  7800              LDRB     r0,[r0,#0]  ; m_dp_inited
000006  b120              CBZ      r0,|L18.18|
;;;200    	{
;;;201    		kl520_api_dp_open( DISPLAY_WIDTH, DISPLAY_HEIGHT );
;;;202    		nDeviceId = kdp_display_get_device_id();
;;;203    		kl520_api_dp_close();
;;;204    	}
;;;205    	else
;;;206    	{
;;;207    		nDeviceId = kdp_display_get_device_id();
000008  f7fffffe          BL       kdp_display_get_device_id
00000c  4602              MOV      r2,r0
                  |L18.14|
;;;208    	}
;;;209    
;;;210        return nDeviceId;
00000e  4610              MOV      r0,r2
;;;211    }
000010  bd10              POP      {r4,pc}
                  |L18.18|
000012  21f0              MOVS     r1,#0xf0              ;201
000014  f44f70a0          MOV      r0,#0x140             ;201
000018  f7fffffe          BL       kl520_api_dp_open
00001c  f7fffffe          BL       kdp_display_get_device_id
000020  4602              MOV      r2,r0                 ;202
000022  f7fffffe          BL       kl520_api_dp_close
000026  e7f2              B        |L18.14|
;;;212    
                          ENDP

                  |L18.40|
                          DCD      ||.data||

                          AREA ||i.kl520_api_dp_init_get||, CODE, READONLY, ALIGN=2

                  kl520_api_dp_init_get PROC
;;;240    
;;;241    u8 kl520_api_dp_init_get(void)
000000  4801              LDR      r0,|L19.8|
;;;242    {
;;;243        return m_dp_inited;
000002  7800              LDRB     r0,[r0,#0]  ; m_dp_inited
;;;244    }
000004  4770              BX       lr
;;;245    
                          ENDP

000006  0000              DCW      0x0000
                  |L19.8|
                          DCD      ||.data||

                          AREA ||i.kl520_api_dp_layout_disable||, CODE, READONLY, ALIGN=2

                  kl520_api_dp_layout_disable PROC
;;;144    
;;;145    void kl520_api_dp_layout_disable(void)
000000  4901              LDR      r1,|L20.8|
;;;146    {
;;;147        m_dp_layout_enable = FALSE;
000002  2000              MOVS     r0,#0
000004  7048              STRB     r0,[r1,#1]
;;;148    }
000006  4770              BX       lr
;;;149    
                          ENDP

                  |L20.8|
                          DCD      ||.data||

                          AREA ||i.kl520_api_dp_layout_enable||, CODE, READONLY, ALIGN=2

                  kl520_api_dp_layout_enable PROC
;;;139    
;;;140    void kl520_api_dp_layout_enable(void)
000000  4901              LDR      r1,|L21.8|
;;;141    {
;;;142        m_dp_layout_enable = TRUE;
000002  2001              MOVS     r0,#1
000004  7048              STRB     r0,[r1,#1]
;;;143    }
000006  4770              BX       lr
;;;144    
                          ENDP

                  |L21.8|
                          DCD      ||.data||

                          AREA ||i.kl520_api_dp_layout_get||, CODE, READONLY, ALIGN=2

                  kl520_api_dp_layout_get PROC
;;;149    
;;;150    BOOL kl520_api_dp_layout_get(void)
000000  4801              LDR      r0,|L22.8|
;;;151    {
;;;152        return m_dp_layout_enable;
000002  7840              LDRB     r0,[r0,#1]  ; m_dp_layout_enable
;;;153    }
000004  4770              BX       lr
;;;154    
                          ENDP

000006  0000              DCW      0x0000
                  |L22.8|
                          DCD      ||.data||

                          AREA ||i.kl520_api_dp_open||, CODE, READONLY, ALIGN=2

                  kl520_api_dp_open PROC
;;;212    
;;;213    int kl520_api_dp_open(u32 width, u32 height)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;214    {
000004  b092              SUB      sp,sp,#0x48
000006  4688              MOV      r8,r1
000008  4607              MOV      r7,r0
;;;215        s32 ret = -1;
00000a  f04f34ff          MOV      r4,#0xffffffff
;;;216        struct video_input_params params;
;;;217        u8 cam_idx = kdp_video_renderer_get_idx();
00000e  f7fffffe          BL       kdp_video_renderer_get_idx
;;;218        
;;;219        if (!m_dp_inited) {
000012  4d10              LDR      r5,|L23.84|
000014  4606              MOV      r6,r0                 ;217
000016  7828              LDRB     r0,[r5,#0]  ; m_dp_inited
000018  b9a8              CBNZ     r0,|L23.70|
;;;220            lcd_power_on();
00001a  f7fffffe          BL       lcd_power_on
;;;221    
;;;222            params = kdp_video_renderer_setting(cam_idx);
00001e  4631              MOV      r1,r6
000020  a809              ADD      r0,sp,#0x24
000022  f7fffffe          BL       kdp_video_renderer_setting
000026  2224              MOVS     r2,#0x24
000028  a909              ADD      r1,sp,#0x24
00002a  4668              MOV      r0,sp
00002c  f7fffffe          BL       __aeabi_memcpy4
;;;223            params.dp_out_w = width;
000030  f8ad7016          STRH     r7,[sp,#0x16]
;;;224            params.dp_out_h = height;
000034  f8ad8018          STRH     r8,[sp,#0x18]
;;;225    
;;;226            //kl520_measure_stamp(E_MEASURE_DISPLAY_INIT);
;;;227            ret = kdp_video_renderer_open(&params);
000038  4668              MOV      r0,sp
00003a  f7fffffe          BL       kdp_video_renderer_open
00003e  0004              MOVS     r4,r0
;;;228            //kl520_measure_stamp(E_MEASURE_DISPLAY_INIT_DONE);
;;;229            if(ret == 0)
000040  d005              BEQ      |L23.78|
;;;230                m_dp_inited = DEV_INIT_STATE_INITED;
;;;231            else
;;;232            {
;;;233                m_dp_inited = DEV_INIT_STATE_ERROR;
000042  2002              MOVS     r0,#2
                  |L23.68|
000044  7028              STRB     r0,[r5,#0]            ;230
                  |L23.70|
;;;234            }
;;;235            
;;;236        }
;;;237        
;;;238        return ret;
;;;239    }
000046  b012              ADD      sp,sp,#0x48
000048  4620              MOV      r0,r4                 ;238
00004a  e8bd81f0          POP      {r4-r8,pc}
                  |L23.78|
00004e  2001              MOVS     r0,#1                 ;230
000050  e7f8              B        |L23.68|
;;;240    
                          ENDP

000052  0000              DCW      0x0000
                  |L23.84|
                          DCD      ||.data||

                          AREA ||i.kl520_api_dp_set_backlight||, CODE, READONLY, ALIGN=1

                  kl520_api_dp_set_backlight PROC
;;;110    
;;;111    int kl520_api_dp_set_backlight(int light)
000000  f7ffbffe          B.W      user_io_set_backlight
;;;112    {
;;;113        return user_io_set_backlight(light);
;;;114    }
;;;115    
                          ENDP


                          AREA ||i.kl520_api_dp_set_pen_rgb565||, CODE, READONLY, ALIGN=1

                  kl520_api_dp_set_pen_rgb565 PROC
;;;169    
;;;170    int kl520_api_dp_set_pen_rgb565(unsigned short color, unsigned int pen_width)
000000  f7ffbffe          B.W      kdp_display_set_pen_rgb565
;;;171    {
;;;172        return kdp_display_set_pen_rgb565(color, pen_width);
;;;173    }
;;;174    
                          ENDP


                          AREA ||i.kl520_api_face_notify||, CODE, READONLY, ALIGN=2

                  kl520_api_face_notify PROC
;;;927    #ifdef DB_DRAWING_CUSTOMER_COLOR
;;;928    void kl520_api_face_notify(int face_status)
000000  2801              CMP      r0,#1
;;;929    {
000002  d001              BEQ      |L26.8|
;;;930        if((KL520_FACE_DB_OK == face_status)
;;;931        || (KL520_FACE_DB_FAIL == face_status))
000004  2803              CMP      r0,#3
000006  d101              BNE      |L26.12|
                  |L26.8|
;;;932        {
;;;933            kl520_fdfr_drawing_timer_flag = face_status;
000008  4901              LDR      r1,|L26.16|
00000a  6008              STR      r0,[r1,#0]  ; kl520_fdfr_drawing_timer_flag
                  |L26.12|
;;;934        }
;;;935    }
00000c  4770              BX       lr
;;;936    #endif
                          ENDP

00000e  0000              DCW      0x0000
                  |L26.16|
                          DCD      kl520_fdfr_drawing_timer_flag

                          AREA ||i.kl520_api_free_device_info||, CODE, READONLY, ALIGN=1

                  kl520_api_free_device_info PROC
;;;907    
;;;908    void kl520_api_free_device_info(system_info* t_system_info)
000000  b510              PUSH     {r4,lr}
;;;909    {
000002  4604              MOV      r4,r0
;;;910        if (t_system_info->extra_device_id_array) {
000004  6f40              LDR      r0,[r0,#0x74]
000006  2800              CMP      r0,#0                 ;909
000008  d003              BEQ      |L27.18|
;;;911            free(t_system_info->extra_device_id_array);
00000a  f7fffffe          BL       free
;;;912            t_system_info->extra_device_id_array = NULL;
00000e  2000              MOVS     r0,#0
000010  6760              STR      r0,[r4,#0x74]
                  |L27.18|
;;;913        }
;;;914    }
000012  bd10              POP      {r4,pc}
;;;915    
                          ENDP


                          AREA ||i.kl520_api_get_device_info||, CODE, READONLY, ALIGN=2

                  kl520_api_get_device_info PROC
;;;829    
;;;830    int kl520_api_get_device_info(system_info* t_system_info)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;831    {
000004  4604              MOV      r4,r0
;;;832        int ret = 0;
000006  2500              MOVS     r5,#0
000008  f7fffffe          BL       kdp_sys_get_unique_id
;;;833        
;;;834        //TODO : get fw version and kl520 id.
;;;835        t_system_info->unique_id = kl520_api_get_unique_id();
;;;836        t_system_info->spl_version = kdp_sys_get_spl_version();
00000c  6020              STR      r0,[r4,#0]
00000e  f7fffffe          BL       kdp_sys_get_spl_version
;;;837        kl520_api_get_scpu_version(&t_system_info->fw_scpu_version);
000012  6060              STR      r0,[r4,#4]
000014  f1040008          ADD      r0,r4,#8
000018  f7fffffe          BL       kl520_api_get_scpu_version
;;;838        kl520_api_get_ncpu_version(&t_system_info->fw_ncpu_version);
00001c  f1040010          ADD      r0,r4,#0x10
000020  f7fffffe          BL       kl520_api_get_ncpu_version
;;;839        
;;;840    #if ( CFG_COM_BUS_TYPE&COM_BUS_UART_MASK ) && ( UART_PROTOCOL_VERSION >= 0x0200 )
;;;841    	extern u16 kdp_comm_get_protocol_version(void);
;;;842        t_system_info->com_protocol_version = kdp_comm_get_protocol_version();
000024  f7fffffe          BL       kdp_comm_get_protocol_version
000028  8320              STRH     r0,[r4,#0x18]
;;;843    #endif
;;;844    
;;;845    
;;;846        {
;;;847            kdp_model_load_model(-1);
00002a  1e68              SUBS     r0,r5,#1
00002c  f7fffffe          BL       kdp_model_load_model
;;;848            t_system_info->model_count = kdp_model_get_model_count();
000030  f7fffffe          BL       kdp_model_get_model_count
;;;849            if (!t_system_info->model_infos)
000034  61e0              STR      r0,[r4,#0x1c]
000036  6a21              LDR      r1,[r4,#0x20]
000038  b919              CBNZ     r1,|L28.66|
;;;850                t_system_info->model_infos = (struct kdp_model_s**)kdp_ddr_reserve(sizeof(struct kdp_model_s*) * t_system_info->model_count);
00003a  0080              LSLS     r0,r0,#2
00003c  f7fffffe          BL       kdp_ddr_reserve
000040  6220              STR      r0,[r4,#0x20]
                  |L28.66|
;;;851            for (int i = 0; i < t_system_info->model_count; ++i) {
000042  2600              MOVS     r6,#0
000044  e006              B        |L28.84|
                  |L28.70|
;;;852                t_system_info->model_infos[i] = (struct kdp_model_s*)kdp_model_get_model_info(i);
000046  4630              MOV      r0,r6
000048  f7fffffe          BL       kdp_model_get_model_info
00004c  6a21              LDR      r1,[r4,#0x20]
00004e  f8410026          STR      r0,[r1,r6,LSL #2]
000052  1c76              ADDS     r6,r6,#1
                  |L28.84|
000054  69e0              LDR      r0,[r4,#0x1c]         ;851
000056  42b0              CMP      r0,r6                 ;851
000058  dcf5              BGT      |L28.70|
;;;853            }
;;;854        }
;;;855    
;;;856        //NIR camera
;;;857        strncpy(t_system_info->device_id_0.device_name, "Camera 0", sizeof(t_system_info->device_id_0.device_name));
00005a  220c              MOVS     r2,#0xc
00005c  a136              ADR      r1,|L28.312|
00005e  f1040024          ADD      r0,r4,#0x24
000062  f7fffffe          BL       strncpy
;;;858        t_system_info->device_id_0.id = kl520_api_camera_get_id(0);
000066  2000              MOVS     r0,#0
000068  f7fffffe          BL       kl520_api_camera_get_id
;;;859        //RGB camera
;;;860        strncpy(t_system_info->device_id_1.device_name, "Camera 1", sizeof(t_system_info->device_id_1.device_name));
00006c  6320              STR      r0,[r4,#0x30]
00006e  220c              MOVS     r2,#0xc
000070  a134              ADR      r1,|L28.324|
000072  f1040034          ADD      r0,r4,#0x34
000076  f7fffffe          BL       strncpy
;;;861        t_system_info->device_id_1.id = kl520_api_camera_get_id(1);
00007a  2001              MOVS     r0,#1
00007c  f7fffffe          BL       kl520_api_camera_get_id
;;;862        //Flash
;;;863        strncpy(t_system_info->device_id_2.device_name, "nor flash", sizeof(t_system_info->device_id_2.device_name));
000080  6420              STR      r0,[r4,#0x40]
000082  220c              MOVS     r2,#0xc
000084  a132              ADR      r1,|L28.336|
000086  f1040044          ADD      r0,r4,#0x44
00008a  f7fffffe          BL       strncpy
00008e  f7fffffe          BL       kdp520_memxfer_get_flash_device_id
;;;864        t_system_info->device_id_2.id = kl520_api_memxfer_get_device_id();
;;;865        //Display
;;;866        strncpy(t_system_info->device_id_3.device_name, "Display", sizeof(t_system_info->device_id_3.device_name));
000092  6520              STR      r0,[r4,#0x50]
000094  220c              MOVS     r2,#0xc
000096  a131              ADR      r1,|L28.348|
000098  f1040054          ADD      r0,r4,#0x54
00009c  f7fffffe          BL       strncpy
;;;867        t_system_info->device_id_3.id = kl520_api_dp_get_device_id();
0000a0  f7fffffe          BL       kl520_api_dp_get_device_id
;;;868        //Touch
;;;869        strncpy(t_system_info->device_id_4.device_name, "Touch", sizeof(t_system_info->device_id_4.device_name));
0000a4  6620              STR      r0,[r4,#0x60]
0000a6  220c              MOVS     r2,#0xc
0000a8  a12e              ADR      r1,|L28.356|
0000aa  f1040064          ADD      r0,r4,#0x64
0000ae  f7fffffe          BL       strncpy
;;;870        t_system_info->device_id_4.id = kl520_api_touch_get_device_id();
0000b2  f7fffffe          BL       kl520_api_touch_get_device_id
;;;871    
;;;872        //t_system_info->device_id_5.device_name = "aw9523b";
;;;873        //t_system_info->device_id_5.id = kl520_api_io_ext_get_device_id(0);
;;;874        t_system_info->extra_device_cnt = user_io_get_extra_device_cnt();
0000b6  6720              STR      r0,[r4,#0x70]
0000b8  f7fffffe          BL       user_io_get_extra_device_cnt
;;;875        if (t_system_info->extra_device_cnt > 0) {
0000bc  67a0              STR      r0,[r4,#0x78]
0000be  b1d0              CBZ      r0,|L28.246|
;;;876            t_system_info->extra_device_id_array = 
0000c0  0100              LSLS     r0,r0,#4
0000c2  f7fffffe          BL       malloc
;;;877                (device_id*)malloc(t_system_info->extra_device_cnt * sizeof(device_id));
;;;878            if (t_system_info->extra_device_id_array) {
0000c6  6760              STR      r0,[r4,#0x74]
0000c8  b1a8              CBZ      r0,|L28.246|
;;;879                for (u32 i = 0; i < t_system_info->extra_device_cnt; ++i) {
0000ca  2600              MOVS     r6,#0
0000cc  e010              B        |L28.240|
                  |L28.206|
;;;880                    device_id *device = &t_system_info->extra_device_id_array[i];
0000ce  6f60              LDR      r0,[r4,#0x74]
0000d0  eb001706          ADD      r7,r0,r6,LSL #4
;;;881                    device->id = user_io_get_extra_device_id(i);
0000d4  4630              MOV      r0,r6
0000d6  f7fffffe          BL       user_io_get_extra_device_id
;;;882                    user_io_get_extra_device_name(i, device->device_name, sizeof(device->device_name));
0000da  60f8              STR      r0,[r7,#0xc]
0000dc  220c              MOVS     r2,#0xc
0000de  4639              MOV      r1,r7
0000e0  4630              MOV      r0,r6
0000e2  f7fffffe          BL       user_io_get_extra_device_name
;;;883                    if (device->id == 0) {
0000e6  68f8              LDR      r0,[r7,#0xc]
0000e8  b908              CBNZ     r0,|L28.238|
;;;884                        ret |= KL520_DEVICE_ERR_IOEXTENDER_ID;
0000ea  f0450520          ORR      r5,r5,#0x20
                  |L28.238|
0000ee  1c76              ADDS     r6,r6,#1
                  |L28.240|
0000f0  6fa0              LDR      r0,[r4,#0x78]         ;879
0000f2  42b0              CMP      r0,r6                 ;879
0000f4  d8eb              BHI      |L28.206|
                  |L28.246|
;;;885                    }
;;;886                }
;;;887            }
;;;888        }
;;;889    
;;;890        if(t_system_info->device_id_0.id != NIR_SENSOR_ID)
0000f6  6b20              LDR      r0,[r4,#0x30]
0000f8  f5b07f99          CMP      r0,#0x132
0000fc  d001              BEQ      |L28.258|
;;;891            ret |= KL520_DEVICE_ERR_NIR_ID;
0000fe  f0450501          ORR      r5,r5,#1
                  |L28.258|
;;;892    
;;;893        if(t_system_info->device_id_1.id != RGB_SENSOR_ID)
000102  6c20              LDR      r0,[r4,#0x40]
000104  f5a05104          SUB      r1,r0,#0x2100
000108  3945              SUBS     r1,r1,#0x45
00010a  d001              BEQ      |L28.272|
;;;894            ret |= KL520_DEVICE_ERR_RGB_ID;
00010c  f0450502          ORR      r5,r5,#2
                  |L28.272|
;;;895    
;;;896        if(t_system_info->device_id_2.id != FLASH_ID)
000110  6d20              LDR      r0,[r4,#0x50]
000112  28c8              CMP      r0,#0xc8
000114  d001              BEQ      |L28.282|
;;;897            ret |= KL520_DEVICE_ERR_FLASH_ID;
000116  f0450504          ORR      r5,r5,#4
                  |L28.282|
;;;898    
;;;899        if(t_system_info->device_id_3.id != LCM_ID)
00011a  6e20              LDR      r0,[r4,#0x60]
00011c  f5a04105          SUB      r1,r0,#0x8500
000120  3952              SUBS     r1,r1,#0x52
000122  d001              BEQ      |L28.296|
;;;900            ret |= KL520_DEVICE_ERR_LCM_ID;
000124  f0450510          ORR      r5,r5,#0x10
                  |L28.296|
;;;901    
;;;902        if(t_system_info->device_id_4.id != TOUCH_ID)
000128  6f20              LDR      r0,[r4,#0x70]
00012a  2882              CMP      r0,#0x82
00012c  d001              BEQ      |L28.306|
;;;903            ret |= KL520_DEVICE_ERR_TOUCH_ID;
00012e  f0450508          ORR      r5,r5,#8
                  |L28.306|
;;;904    
;;;905        return ret;
000132  4628              MOV      r0,r5
;;;906    }
000134  e8bd81f0          POP      {r4-r8,pc}
;;;907    
                          ENDP

                  |L28.312|
000138  43616d65          DCB      "Camera 0",0
00013c  72612030
000140  00      
000141  00                DCB      0
000142  00                DCB      0
000143  00                DCB      0
                  |L28.324|
000144  43616d65          DCB      "Camera 1",0
000148  72612031
00014c  00      
00014d  00                DCB      0
00014e  00                DCB      0
00014f  00                DCB      0
                  |L28.336|
000150  6e6f7220          DCB      "nor flash",0
000154  666c6173
000158  6800    
00015a  00                DCB      0
00015b  00                DCB      0
                  |L28.348|
00015c  44697370          DCB      "Display",0
000160  6c617900
                  |L28.356|
000164  546f7563          DCB      "Touch",0
000168  6800    
00016a  00                DCB      0
00016b  00                DCB      0

                          AREA ||i.kl520_api_get_event||, CODE, READONLY, ALIGN=2

                  kl520_api_get_event PROC
;;;916    static osEventFlagsId_t api_event_id = 0;
;;;917    osEventFlagsId_t kl520_api_get_event()
000000  b510              PUSH     {r4,lr}
;;;918    {
;;;919        if (0 == api_event_id)
000002  4c04              LDR      r4,|L29.20|
000004  6860              LDR      r0,[r4,#4]            ;918  ; api_event_id
000006  2800              CMP      r0,#0                 ;918
000008  d102              BNE      |L29.16|
;;;920        {
;;;921            api_event_id = create_event();
00000a  f7fffffe          BL       create_event
00000e  6060              STR      r0,[r4,#4]  ; api_event_id
                  |L29.16|
;;;922        }
;;;923    
;;;924        return api_event_id;
;;;925    }
000010  bd10              POP      {r4,pc}
;;;926    
                          ENDP

000012  0000              DCW      0x0000
                  |L29.20|
                          DCD      ||.data||

                          AREA ||i.kl520_api_get_model_version||, CODE, READONLY, ALIGN=2

                  kl520_api_get_model_version PROC
;;;791    
;;;792    struct fw_misc_data *kl520_api_get_model_version(void) 
000000  4800              LDR      r0,|L30.4|
;;;793    {
;;;794        return &g_model_version;
;;;795    }
000002  4770              BX       lr
;;;796    
                          ENDP

                  |L30.4|
                          DCD      g_model_version

                          AREA ||i.kl520_api_get_ncpu_version||, CODE, READONLY, ALIGN=2

                  kl520_api_get_ncpu_version PROC
;;;773    
;;;774    int kl520_api_get_ncpu_version(struct fw_misc_data *g_fw_misc) 
000000  4907              LDR      r1,|L31.32|
;;;775    {
;;;776        u32 temp;
;;;777        
;;;778        temp = readl(SdRAM_MEM_BASE + SdRAM_MEM_SIZE - DRAM_MISCDATA_SIZE + 8);
000002  6809              LDR      r1,[r1,#0]
;;;779        g_fw_misc->version[0] = (u8)temp;
000004  7001              STRB     r1,[r0,#0]
;;;780        g_fw_misc->version[1] = (u8)(temp>>8);
000006  0a0a              LSRS     r2,r1,#8
000008  7042              STRB     r2,[r0,#1]
;;;781        g_fw_misc->version[2] = (u8)(temp>>16);
00000a  0c0a              LSRS     r2,r1,#16
00000c  7082              STRB     r2,[r0,#2]
;;;782        g_fw_misc->version[3] = (u8)(temp>>24);
00000e  0e09              LSRS     r1,r1,#24
000010  70c1              STRB     r1,[r0,#3]
;;;783        g_fw_misc->date = readl(SdRAM_MEM_BASE + SdRAM_MEM_SIZE - DRAM_MISCDATA_SIZE + 12);
000012  4903              LDR      r1,|L31.32|
000014  1d09              ADDS     r1,r1,#4
000016  6809              LDR      r1,[r1,#0]
;;;784        dbg_msg_api("KDP520-NCPU_v%d.%d.%d.%d_%d.bin"   , g_fw_misc->version[0]
;;;785                                                                , g_fw_misc->version[1]
;;;786                                                                , g_fw_misc->version[2] 
;;;787                                                                , g_fw_misc->version[3]
;;;788                                                                , g_fw_misc->date);
;;;789        return 0;
000018  6041              STR      r1,[r0,#4]
00001a  2000              MOVS     r0,#0
;;;790    }
00001c  4770              BX       lr
;;;791    
                          ENDP

00001e  0000              DCW      0x0000
                  |L31.32|
                          DCD      0x10217ff8

                          AREA ||i.kl520_api_get_scpu_version||, CODE, READONLY, ALIGN=2

                  kl520_api_get_scpu_version PROC
;;;755    
;;;756    int kl520_api_get_scpu_version(struct fw_misc_data *g_fw_misc) 
000000  4907              LDR      r1,|L32.32|
;;;757    {
;;;758        u32 temp;
;;;759        
;;;760        temp = readl(SdRAM_MEM_BASE + SdRAM_MEM_SIZE - DRAM_MISCDATA_SIZE);
000002  6809              LDR      r1,[r1,#0]
;;;761        g_fw_misc->version[0] = (u8)temp;
000004  7001              STRB     r1,[r0,#0]
;;;762        g_fw_misc->version[1] = (u8)(temp>>8);
000006  0a0a              LSRS     r2,r1,#8
000008  7042              STRB     r2,[r0,#1]
;;;763        g_fw_misc->version[2] = (u8)(temp>>16);
00000a  0c0a              LSRS     r2,r1,#16
00000c  7082              STRB     r2,[r0,#2]
;;;764        g_fw_misc->version[3] = (u8)(temp>>24);
00000e  0e09              LSRS     r1,r1,#24
000010  70c1              STRB     r1,[r0,#3]
;;;765        g_fw_misc->date = readl(SdRAM_MEM_BASE + SdRAM_MEM_SIZE - DRAM_MISCDATA_SIZE + 4);
000012  4903              LDR      r1,|L32.32|
000014  1d09              ADDS     r1,r1,#4
000016  6809              LDR      r1,[r1,#0]
;;;766        dbg_msg_api("ZF-BP3-X-2509_v%d.%d.%d.%d_%d.bin"   , g_fw_misc->version[0]
;;;767                                                                , g_fw_misc->version[1]
;;;768                                                                , g_fw_misc->version[2] 
;;;769                                                                , g_fw_misc->version[3]
;;;770                                                                , g_fw_misc->date);
;;;771        return 0;
000018  6041              STR      r1,[r0,#4]
00001a  2000              MOVS     r0,#0
;;;772    }
00001c  4770              BX       lr
;;;773    
                          ENDP

00001e  0000              DCW      0x0000
                  |L32.32|
                          DCD      0x10217ff0

                          AREA ||i.kl520_api_get_unique_id||, CODE, READONLY, ALIGN=1

                  kl520_api_get_unique_id PROC
;;;796    
;;;797    u32 kl520_api_get_unique_id(void) {
000000  f7ffbffe          B.W      kdp_sys_get_unique_id
;;;798        return kdp_sys_get_unique_id();
;;;799    }
;;;800    u16 kl520_api_memxfer_get_device_id(void) {
                          ENDP


                          AREA ||i.kl520_api_get_version_info||, CODE, READONLY, ALIGN=1

                  kl520_api_get_version_info PROC
;;;806    
;;;807    int kl520_api_get_version_info(system_info* t_system_info)
000000  b570              PUSH     {r4-r6,lr}
;;;808    {
000002  4604              MOV      r4,r0
;;;809        int ret = 0;
000004  2600              MOVS     r6,#0
000006  f7fffffe          BL       kdp_sys_get_unique_id
;;;810        
;;;811        //TODO : get fw version and kl520 id.
;;;812        t_system_info->unique_id = kl520_api_get_unique_id();
;;;813        t_system_info->spl_version = kdp_sys_get_spl_version();
00000a  6020              STR      r0,[r4,#0]
00000c  f7fffffe          BL       kdp_sys_get_spl_version
;;;814        kl520_api_get_scpu_version(&t_system_info->fw_scpu_version);
000010  6060              STR      r0,[r4,#4]
000012  f1040008          ADD      r0,r4,#8
000016  f7fffffe          BL       kl520_api_get_scpu_version
;;;815        kl520_api_get_ncpu_version(&t_system_info->fw_ncpu_version);
00001a  f1040010          ADD      r0,r4,#0x10
00001e  f7fffffe          BL       kl520_api_get_ncpu_version
;;;816        
;;;817        {
;;;818            kdp_model_load_model(-1);
000022  1e70              SUBS     r0,r6,#1
000024  f7fffffe          BL       kdp_model_load_model
;;;819            t_system_info->model_count = kdp_model_get_model_count();
000028  f7fffffe          BL       kdp_model_get_model_count
;;;820            if (!t_system_info->model_infos)
00002c  61e0              STR      r0,[r4,#0x1c]
00002e  6a21              LDR      r1,[r4,#0x20]
000030  b919              CBNZ     r1,|L34.58|
;;;821                t_system_info->model_infos = (struct kdp_model_s**)kdp_ddr_reserve(sizeof(struct kdp_model_s*) * t_system_info->model_count);
000032  0080              LSLS     r0,r0,#2
000034  f7fffffe          BL       kdp_ddr_reserve
000038  6220              STR      r0,[r4,#0x20]
                  |L34.58|
;;;822            for (int i = 0; i < t_system_info->model_count; ++i) {
00003a  2500              MOVS     r5,#0
00003c  e006              B        |L34.76|
                  |L34.62|
;;;823                t_system_info->model_infos[i] = (struct kdp_model_s*)kdp_model_get_model_info(i);
00003e  4628              MOV      r0,r5
000040  f7fffffe          BL       kdp_model_get_model_info
000044  6a21              LDR      r1,[r4,#0x20]
000046  f8410025          STR      r0,[r1,r5,LSL #2]
00004a  1c6d              ADDS     r5,r5,#1
                  |L34.76|
00004c  69e0              LDR      r0,[r4,#0x1c]         ;822
00004e  42a8              CMP      r0,r5                 ;822
000050  dcf5              BGT      |L34.62|
;;;824            }
;;;825        }
;;;826        
;;;827        return ret;
000052  4630              MOV      r0,r6
;;;828    }
000054  bd70              POP      {r4-r6,pc}
;;;829    
                          ENDP


                          AREA ||i.kl520_api_log_set_user_level||, CODE, READONLY, ALIGN=2

                  kl520_api_log_set_user_level PROC
;;;971    
;;;972    void kl520_api_log_set_user_level(u32 cpu_id, u8 level)
000000  b570              PUSH     {r4-r6,lr}
;;;973    {
000002  460d              MOV      r5,r1
000004  4604              MOV      r4,r0
;;;974        if (kdp_com_is_inited()) {
000006  f7fffffe          BL       kdp_com_is_inited
00000a  2800              CMP      r0,#0
00000c  d00b              BEQ      |L35.38|
;;;975            if (cpu_id == CPU_ID_SCPU)
00000e  4806              LDR      r0,|L35.40|
000010  4284              CMP      r4,r0
;;;976                log_set_user_level_scpu(level);
;;;977            else
;;;978                log_set_user_level_ncpu(level);
000012  4628              MOV      r0,r5
000014  d103              BNE      |L35.30|
000016  e8bd4070          POP      {r4-r6,lr}            ;976
00001a  f7ffbffe          B.W      log_set_user_level_scpu
                  |L35.30|
00001e  e8bd4070          POP      {r4-r6,lr}
000022  f7ffbffe          B.W      log_set_user_level_ncpu
                  |L35.38|
;;;979        }
;;;980    }
000026  bd70              POP      {r4-r6,pc}
;;;981    
                          ENDP

                  |L35.40|
                          DCD      0x53430000

                          AREA ||i.kl520_api_memxfer_get_device_id||, CODE, READONLY, ALIGN=1

                  kl520_api_memxfer_get_device_id PROC
;;;799    }
;;;800    u16 kl520_api_memxfer_get_device_id(void) {
000000  f7ffbffe          B.W      kdp520_memxfer_get_flash_device_id
;;;801        return kdp520_memxfer_get_flash_device_id();
;;;802    }
;;;803    // static u16 kl520_api_io_ext_get_device_id(u32 device_idx) {
                          ENDP


                          AREA ||i.kl520_api_model_count||, CODE, READONLY, ALIGN=1

                  kl520_api_model_count PROC
;;;1100   
;;;1101   int kl520_api_model_count(void)
000000  f7ffbffe          B.W      kdp_model_get_model_count
;;;1102   {
;;;1103       return kdp_model_get_model_count();
;;;1104   }
;;;1105   
                          ENDP


                          AREA ||i.kl520_api_model_version||, CODE, READONLY, ALIGN=1

                  kl520_api_model_version PROC
;;;1105   
;;;1106   int kl520_api_model_version(uint8_t idx)
000000  f7ffbffe          B.W      kdp_model_version
;;;1107   {
;;;1108       return kdp_model_version( idx );
;;;1109   }
;;;1110   
                          ENDP


                          AREA ||i.kl520_api_ota_switch_NCPU||, CODE, READONLY, ALIGN=1

                  kl520_api_ota_switch_NCPU PROC
;;;1095   
;;;1096   void kl520_api_ota_switch_NCPU(void)
000000  2002              MOVS     r0,#2
;;;1097   {
;;;1098       ota_update_force_switch_active_partition(2);
000002  f7ffbffe          B.W      ota_update_force_switch_active_partition
;;;1099   }
;;;1100   
                          ENDP


                          AREA ||i.kl520_api_ota_switch_SCPU||, CODE, READONLY, ALIGN=1

                  kl520_api_ota_switch_SCPU PROC
;;;1090   
;;;1091   void kl520_api_ota_switch_SCPU(void)
000000  2001              MOVS     r0,#1
;;;1092   {
;;;1093       ota_update_force_switch_active_partition(1);
000002  f7ffbffe          B.W      ota_update_force_switch_active_partition
;;;1094   }
;;;1095   
                          ENDP


                          AREA ||i.kl520_api_set_rgb_led_level||, CODE, READONLY, ALIGN=1

                  kl520_api_set_rgb_led_level PROC
;;;981    
;;;982    void kl520_api_set_rgb_led_level(BOOL reset, s32 level)
000000  b570              PUSH     {r4-r6,lr}
;;;983    {
000002  460c              MOV      r4,r1
000004  4605              MOV      r5,r0
;;;984        kdp_e2e_prop *prop = kdp_e2e_prop_get_inst();
000006  f7fffffe          BL       kdp_e2e_prop_get_inst
;;;985        if (!reset) {
00000a  b11d              CBZ      r5,|L41.20|
;;;986            kdp_e2e_prop_set_manual_value(prop, r1_led_value, level);
;;;987        }
;;;988        else
;;;989        {
;;;990            kdp_e2e_prop_reset_r1_led_value();
00000c  e8bd4070          POP      {r4-r6,lr}
000010  f7ffbffe          B.W      kdp_e2e_prop_reset_r1_led_value
                  |L41.20|
000014  2101              MOVS     r1,#1                 ;986
000016  f8801175          STRB     r1,[r0,#0x175]        ;986
00001a  f8d01178          LDR      r1,[r0,#0x178]        ;986
00001e  42a1              CMP      r1,r4                 ;986
000020  d004              BEQ      |L41.44|
000022  2100              MOVS     r1,#0                 ;986
000024  f8801174          STRB     r1,[r0,#0x174]        ;986
000028  f8c04178          STR      r4,[r0,#0x178]        ;986
                  |L41.44|
;;;991        }
;;;992    }
00002c  bd70              POP      {r4-r6,pc}
;;;993    
                          ENDP


                          AREA ||i.kl520_api_timer_close||, CODE, READONLY, ALIGN=1

                  kl520_api_timer_close PROC
;;;52     
;;;53     int kl520_api_timer_close(pwmtimer timer)
000000  f7ffbffe          B.W      kdp_timer_close
;;;54     {
;;;55         return kdp_timer_close(timer);
;;;56     }
;;;57     
                          ENDP


                          AREA ||i.kl520_api_timer_init||, CODE, READONLY, ALIGN=1

                  kl520_api_timer_init PROC
;;;42     
;;;43     BOOL kl520_api_timer_init(pwmtimer timer, u32 tick)
000000  f7ffbffe          B.W      kdp_timer_init
;;;44     {
;;;45         return kdp_timer_init(timer, tick);
;;;46     }
;;;47     
                          ENDP


                          AREA ||i.kl520_api_timer_tick_reset||, CODE, READONLY, ALIGN=1

                  kl520_api_timer_tick_reset PROC
;;;47     
;;;48     void kl520_api_timer_tick_reset(pwmtimer timer)
000000  f7ffbffe          B.W      kdp_timer_tick_reset
;;;49     {
;;;50         kdp_timer_tick_reset(timer);
;;;51     }
;;;52     
                          ENDP


                          AREA ||i.kl520_api_tmr2_user||, CODE, READONLY, ALIGN=2

                  kl520_api_tmr2_user PROC
;;;57     
;;;58     void kl520_api_tmr2_user(u32 *tick)
000000  b570              PUSH     {r4-r6,lr}
;;;59     {
000002  4604              MOV      r4,r0
000004  f7fffffe          BL       user_io_get_backlight
;;;60         static BOOL _led = TRUE; 
;;;61         if(*tick < kl520_api_dp_get_backlight())
;;;62         {
;;;63             if(_led != TRUE)
000008  4d0c              LDR      r5,|L45.60|
00000a  6822              LDR      r2,[r4,#0]            ;61
00000c  2600              MOVS     r6,#0
00000e  4290              CMP      r0,r2                 ;61
;;;64             {   
;;;65                 //Temp sol
;;;66                 kdp520_gpio_setdata(1 << GPIO_26);
;;;67             }
;;;68             _led = TRUE;
;;;69         }
;;;70         else
;;;71         {        
;;;72             if(_led != FALSE)
000010  78e8              LDRB     r0,[r5,#3]  ; _led
000012  f04f6180          MOV      r1,#0x4000000         ;66
000016  d907              BLS      |L45.40|
000018  2801              CMP      r0,#1                 ;63
00001a  d002              BEQ      |L45.34|
00001c  4608              MOV      r0,r1                 ;66
00001e  f7fffffe          BL       kdp520_gpio_setdata
                  |L45.34|
000022  2001              MOVS     r0,#1                 ;68
000024  70e8              STRB     r0,[r5,#3]            ;68
000026  e004              B        |L45.50|
                  |L45.40|
000028  b110              CBZ      r0,|L45.48|
;;;73             {
;;;74                 //Temp sol
;;;75                 kdp520_gpio_cleardata(1 << GPIO_26);
00002a  4608              MOV      r0,r1
00002c  f7fffffe          BL       kdp520_gpio_cleardata
                  |L45.48|
;;;76             }
;;;77             _led = FALSE;
000030  70ee              STRB     r6,[r5,#3]
                  |L45.50|
;;;78         }
;;;79     
;;;80         if(*tick >= 100)
000032  6820              LDR      r0,[r4,#0]
000034  2864              CMP      r0,#0x64
000036  d300              BCC      |L45.58|
;;;81         {
;;;82             *tick = 0;
000038  6026              STR      r6,[r4,#0]
                  |L45.58|
;;;83         }
;;;84     }
00003a  bd70              POP      {r4-r6,pc}
;;;85     
                          ENDP

                  |L45.60|
                          DCD      ||.data||

                          AREA ||i.kl520_api_tmr3_user||, CODE, READONLY, ALIGN=1

                  kl520_api_tmr3_user PROC
;;;85     
;;;86     void kl520_api_tmr3_user(u32 *tick)
000000  4770              BX       lr
;;;87     {
;;;88     }
;;;89     
                          ENDP


                          AREA ||i.kl520_api_tmr4_user||, CODE, READONLY, ALIGN=1

                  kl520_api_tmr4_user PROC
;;;89     
;;;90     void kl520_api_tmr4_user(u32 *tick)
000000  4770              BX       lr
;;;91     {
;;;92     }
;;;93     
                          ENDP


                          AREA ||i.kl520_api_tmr5_user||, CODE, READONLY, ALIGN=1

                  kl520_api_tmr5_user PROC
;;;93     
;;;94     void kl520_api_tmr5_user(u32 *tick)
000000  4770              BX       lr
;;;95     {
;;;96     }
;;;97     
                          ENDP


                          AREA ||i.kl520_api_tmr6_user||, CODE, READONLY, ALIGN=1

                  kl520_api_tmr6_user PROC
;;;97     
;;;98     void kl520_api_tmr6_user(u32 *tick)
000000  4770              BX       lr
;;;99     {
;;;100    }
;;;101        
                          ENDP


                          AREA ||i.kl520_engineering_calibration||, CODE, READONLY, ALIGN=1

                  kl520_engineering_calibration PROC
;;;1064   
;;;1065   int kl520_engineering_calibration(u8 type, u32 *args)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1066   {
000002  4605              MOV      r5,r0
;;;1067       int ret = -1;
000004  f04f34ff          MOV      r4,#0xffffffff
;;;1068       u16 height = DISPLAY_HEIGHT;
;;;1069   
;;;1070       int old_tm = kl520_api_face_add_get_timeout();
000008  f7fffffe          BL       kl520_api_face_add_get_timeout
00000c  4606              MOV      r6,r0
;;;1071       kl520_api_face_add_set_timeout(type); //set timeout val;
00000e  4628              MOV      r0,r5
000010  f7fffffe          BL       kl520_api_face_add_set_timeout
;;;1072   
;;;1073       //set to 1 face mode
;;;1074       kl520_api_face_set_add_mode(FACE_ADD_MODE_1_FACE);
000014  2001              MOVS     r0,#1
000016  f7fffffe          BL       kl520_api_face_set_add_mode
;;;1075       kdp_e2e_prop_set2(face_mode, FACE_MODE_ENG_CAL); //set to calibration mode
00001a  f7fffffe          BL       kdp_e2e_prop_get_inst
00001e  2106              MOVS     r1,#6
;;;1076   
;;;1077       if(kl520_api_face_add_internal(0, 0, DISPLAY_WIDTH, height, FACE_ADD_TYPE_NORMAL) != KL520_FACE_OK)
000020  6101              STR      r1,[r0,#0x10]
000022  2000              MOVS     r0,#0
000024  23f0              MOVS     r3,#0xf0
000026  f44f72a0          MOV      r2,#0x140
00002a  4601              MOV      r1,r0
00002c  9000              STR      r0,[sp,#0]
00002e  f7fffffe          BL       kl520_api_face_add_internal
000032  b900              CBNZ     r0,|L50.54|
;;;1078       {
;;;1079           dbg_msg_algo("camera engineering calibration failed.\n");
;;;1080           ret = -1;
;;;1081       } else {
;;;1082           ret = 0;
000034  2400              MOVS     r4,#0
                  |L50.54|
;;;1083       }
;;;1084   
;;;1085       kl520_api_face_add_set_timeout(old_tm); //set it back
000036  4630              MOV      r0,r6
000038  f7fffffe          BL       kl520_api_face_add_set_timeout
;;;1086       kl520_api_face_close();
00003c  f7fffffe          BL       kl520_api_face_close
;;;1087   
;;;1088       return ret;
000040  4620              MOV      r0,r4
;;;1089   }
000042  bdf8              POP      {r3-r7,pc}
;;;1090   
                          ENDP


                          AREA ||i.kl520_measure_info||, CODE, READONLY, ALIGN=1

                  kl520_measure_info PROC
;;;954    
;;;955    void kl520_measure_info(void){
000000  4770              BX       lr
;;;956    #if (MEASURE_RECOGNITION == YES)    
;;;957        u16 i;
;;;958        
;;;959        dbg_msg_console(" ID |MEASURE_TIMESTAMP           | TIMESTAMP(ms)");
;;;960        
;;;961        for(i=0;i<E_MEASURE_NUM;i++)
;;;962        {   
;;;963            dbg_msg_console(" %02d |%-33s| %06d", i, MEASURE_STAMP_STRING[i], nTimeStamp[i]);
;;;964        }
;;;965    
;;;966        i = 68;
;;;967        dbg_msg_console(" ID |MEASURE_TIMESTAMP           | TIMESTAMP(ms)");
;;;968        dbg_msg_console(" %02d |%-33s| %06d", i, MEASURE_STAMP_STRING[i], nTimeStamp[i]);
;;;969    #endif
;;;970    }
;;;971    
                          ENDP


                          AREA ||i.kl520_measure_init||, CODE, READONLY, ALIGN=2

                  kl520_measure_init PROC
;;;941    
;;;942    void kl520_measure_init(void){
000000  4901              LDR      r1,|L52.8|
;;;943        
;;;944        kdp_tmr_init(TMR3, PWMTMR_1MSEC_PERIOD);
000002  2003              MOVS     r0,#3
000004  f7ffbffe          B.W      kdp_tmr_init
;;;945    }
;;;946    
                          ENDP

                  |L52.8|
                          DCD      0x000186a0

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  4d525f53          DCB      "MR_SUCCESS",0
000004  55434345
000008  535300  
00000b  00                DCB      0
00000c  4d525f52          DCB      "MR_REJECTED",0
000010  454a4543
000014  54454400
000018  4d525f41          DCB      "MR_ABORTED",0
00001c  424f5254
000020  454400  
000023  00                DCB      0
000024  4d525f46          DCB      "MR_FAILED_DEV_OPEN_FAIL",0
000028  41494c45
00002c  445f4445
000030  565f4f50
000034  454e5f46
000038  41494c00
00003c  4d525f46          DCB      "MR_FAILED_UNKNOWN_REASON",0
000040  41494c45
000044  445f554e
000048  4b4e4f57
00004c  4e5f5245
000050  41534f4e
000054  00      
000055  00                DCB      0
000056  00                DCB      0
000057  00                DCB      0
000058  4d525f46          DCB      "MR_FAILED_INVALID_PARAM",0
00005c  41494c45
000060  445f494e
000064  56414c49
000068  445f5041
00006c  52414d00
000070  4d525f46          DCB      "MR_FAILED_OOM",0
000074  41494c45
000078  445f4f4f
00007c  4d00    
00007e  00                DCB      0
00007f  00                DCB      0
000080  4d525f46          DCB      "MR_FAILED_UNKNOWN_USER",0
000084  41494c45
000088  445f554e
00008c  4b4e4f57
000090  4e5f5553
000094  455200  
000097  00                DCB      0
000098  4d525f46          DCB      "MR_FAILED_MAX_USER",0
00009c  41494c45
0000a0  445f4d41
0000a4  585f5553
0000a8  455200  
0000ab  00                DCB      0
0000ac  4d525f46          DCB      "MR_FAILED_FACE_ENROLLED",0
0000b0  41494c45
0000b4  445f4641
0000b8  43455f45
0000bc  4e524f4c
0000c0  4c454400
0000c4  4d525f46          DCB      "MR_FAILED_LIVENESS_CHECK",0
0000c8  41494c45
0000cc  445f4c49
0000d0  56454e45
0000d4  53535f43
0000d8  4845434b
0000dc  00      
0000dd  00                DCB      0
0000de  00                DCB      0
0000df  00                DCB      0
0000e0  4d525f46          DCB      "MR_FAILED_TIME_OUT",0
0000e4  41494c45
0000e8  445f5449
0000ec  4d455f4f
0000f0  555400  
0000f3  00                DCB      0
0000f4  4d525f46          DCB      "MR_FAILED_AUTHORIZATION",0
0000f8  41494c45
0000fc  445f4155
000100  54484f52
000104  495a4154
000108  494f4e00
00010c  4d525f46          DCB      "MR_FAILED_READ_FILE",0
000110  41494c45
000114  445f5245
000118  41445f46
00011c  494c4500
000120  4d525f46          DCB      "MR_FAILED_WRITE_FILE",0
000124  41494c45
000128  445f5752
00012c  4954455f
000130  46494c45
000134  00      
000135  00                DCB      0
000136  00                DCB      0
000137  00                DCB      0
000138  4d525f46          DCB      "MR_FAILED_NO_ENCRYPT",0
00013c  41494c45
000140  445f4e4f
000144  5f454e43
000148  52595054
00014c  00      
00014d  00                DCB      0
00014e  00                DCB      0
00014f  00                DCB      0
000150  4d525f46          DCB      "MR_FAILED_STORE_ERR",0
000154  41494c45
000158  445f5354
00015c  4f52455f
000160  45525200
000164  4d525f46          DCB      "MR_FAILED_NO_IMG",0
000168  41494c45
00016c  445f4e4f
000170  5f494d47
000174  00      
000175  00                DCB      0
000176  00                DCB      0
000177  00                DCB      0
000178  4d525f46          DCB      "MR_FAILED_NO_IDX",0
00017c  41494c45
000180  445f4e4f
000184  5f494458
000188  00      
000189  00                DCB      0
00018a  00                DCB      0
00018b  00                DCB      0
00018c  4d525f46          DCB      "MR_FAILED_BUF_OVERFLOW",0
000190  41494c45
000194  445f4255
000198  465f4f56
00019c  4552464c
0001a0  4f5700  
0001a3  00                DCB      0
0001a4  4d525f46          DCB      "MR_FAILED_MASS_DATA_HEAD_EMPTY",0
0001a8  41494c45
0001ac  445f4d41
0001b0  53535f44
0001b4  4154415f
0001b8  48454144
0001bc  5f454d50
0001c0  545900  
0001c3  00                DCB      0
0001c4  4d525f46          DCB      "MR_FAILED_MASS_DATA_DB_ABNORMAL",0
0001c8  41494c45
0001cc  445f4d41
0001d0  53535f44
0001d4  4154415f
0001d8  44425f41
0001dc  424e4f52
0001e0  4d414c00
0001e4  4d525f46          DCB      "MR_FAILED_MASS_DATA_FM_ABNORMAL",0
0001e8  41494c45
0001ec  445f4d41
0001f0  53535f44
0001f4  4154415f
0001f8  464d5f41
0001fc  424e4f52
000200  4d414c00
000204  4d525f46          DCB      "MR_FAILED_NOT_READY",0
000208  41494c45
00020c  445f4e4f
000210  545f5245
000214  41445900
000218  4d525f46          DCB      "MR_FAILED_EXISTED_USER",0
00021c  41494c45
000220  445f4558
000224  49535445
000228  445f5553
00022c  455200  
00022f  00                DCB      0
000230  4d525f46          DCB      "MR_FAILED_IDX_OVERFLOW",0
000234  41494c45
000238  445f4944
00023c  585f4f56
000240  4552464c
000244  4f5700  
000247  00                DCB      0
000248  4d525f43          DCB      "MR_CONTIUNOUS",0
00024c  4f4e5449
000250  554e4f55
000254  5300    
000256  00                DCB      0
000257  00                DCB      0
000258  4d525f53          DCB      "MR_SUCCESS_BUT_DEL_USER",0
00025c  55434345
000260  53535f42
000264  55545f44
000268  454c5f55
00026c  53455200
000270  4d525f46          DCB      "MR_FAILED_INVALID_CMD",0
000274  41494c45
000278  445f494e
00027c  56414c49
000280  445f434d
000284  4400    
000286  00                DCB      0
000287  00                DCB      0
000288  00                DCB      0

                          AREA ||.data||, DATA, ALIGN=2

                  m_dp_inited
000000  00                DCB      0x00
                  m_dp_layout_enable
000001  00                DCB      0x00
                  m_dp_five_face_enable
000002  00                DCB      0x00
                  _led
000003  01                DCB      0x01
                  api_event_id
                          DCD      0x00000000
                  CusInfoAddr
                          DCD      0x00000000

                          AREA ||i._str_uart_reply||, COMGROUP=_str_uart_reply, CODE, READONLY, ALIGN=2

                  _str_uart_reply PROC
;;;201    #pragma diag_suppress 111
;;;202    inline char *_str_uart_reply(enum uart_reply_result result)
000000  2814              CMP      r0,#0x14
;;;203    {
;;;204        switch (result)
000002  d04e              BEQ      |L313.162|
000004  dc0d              BGT      |L313.34|
000006  2814              CMP      r0,#0x14
000008  d22d              BCS      |L313.102|
00000a  e8dff000          TBB      [pc,r0]
00000e  2e30              DCB      0x2e,0x30
000010  322c3436          DCB      0x32,0x2c,0x34,0x36
000014  383a3c3e          DCB      0x38,0x3a,0x3c,0x3e
000018  402c4244          DCB      0x40,0x2c,0x42,0x44
00001c  462c2c2c          DCB      0x46,0x2c,0x2c,0x2c
000020  2c48              DCB      0x2c,0x48
                  |L313.34|
000022  2832              CMP      r0,#0x32
000024  d04d              BEQ      |L313.194|
000026  dc10              BGT      |L313.74|
000028  2818              CMP      r0,#0x18
00002a  d042              BEQ      |L313.178|
00002c  dc06              BGT      |L313.60|
00002e  2815              CMP      r0,#0x15
000030  d039              BEQ      |L313.166|
000032  2816              CMP      r0,#0x16
000034  d039              BEQ      |L313.170|
000036  2817              CMP      r0,#0x17
000038  d115              BNE      |L313.102|
00003a  e038              B        |L313.174|
                  |L313.60|
00003c  2819              CMP      r0,#0x19
00003e  d03a              BEQ      |L313.182|
000040  2830              CMP      r0,#0x30
000042  d03a              BEQ      |L313.186|
000044  2831              CMP      r0,#0x31
000046  d10e              BNE      |L313.102|
000048  e039              B        |L313.190|
                  |L313.74|
00004a  2836              CMP      r0,#0x36
00004c  d041              BEQ      |L313.210|
00004e  dc06              BGT      |L313.94|
000050  2833              CMP      r0,#0x33
000052  d038              BEQ      |L313.198|
000054  2834              CMP      r0,#0x34
000056  d038              BEQ      |L313.202|
000058  2835              CMP      r0,#0x35
00005a  d104              BNE      |L313.102|
00005c  e037              B        |L313.206|
                  |L313.94|
00005e  2840              CMP      r0,#0x40
000060  d039              BEQ      |L313.214|
000062  28ff              CMP      r0,#0xff
000064  d039              BEQ      |L313.218|
                  |L313.102|
;;;205        {
;;;206            CMD_REPLY_RESULT_MACRO(TO_STR)
;;;207        default:
;;;208            break;
;;;209        }
;;;210        
;;;211        return "";
000066  481e              LDR      r0,|L313.224|
;;;212    }
000068  4770              BX       lr
00006a  481e              LDR      r0,|L313.228|
00006c  4770              BX       lr
00006e  481e              LDR      r0,|L313.232|
000070  4770              BX       lr
000072  481e              LDR      r0,|L313.236|
000074  4770              BX       lr
000076  481e              LDR      r0,|L313.240|
000078  4770              BX       lr
00007a  481e              LDR      r0,|L313.244|
00007c  4770              BX       lr
00007e  481e              LDR      r0,|L313.248|
000080  4770              BX       lr
000082  481e              LDR      r0,|L313.252|
000084  4770              BX       lr
000086  481e              LDR      r0,|L313.256|
000088  4770              BX       lr
00008a  481e              LDR      r0,|L313.260|
00008c  4770              BX       lr
00008e  481e              LDR      r0,|L313.264|
000090  4770              BX       lr
000092  481e              LDR      r0,|L313.268|
000094  4770              BX       lr
000096  481e              LDR      r0,|L313.272|
000098  4770              BX       lr
00009a  481e              LDR      r0,|L313.276|
00009c  4770              BX       lr
00009e  481e              LDR      r0,|L313.280|
0000a0  4770              BX       lr
                  |L313.162|
0000a2  481e              LDR      r0,|L313.284|
0000a4  4770              BX       lr
                  |L313.166|
0000a6  481e              LDR      r0,|L313.288|
0000a8  4770              BX       lr
                  |L313.170|
0000aa  481e              LDR      r0,|L313.292|
0000ac  4770              BX       lr
                  |L313.174|
0000ae  481e              LDR      r0,|L313.296|
0000b0  4770              BX       lr
                  |L313.178|
0000b2  481e              LDR      r0,|L313.300|
0000b4  4770              BX       lr
                  |L313.182|
0000b6  481e              LDR      r0,|L313.304|
0000b8  4770              BX       lr
                  |L313.186|
0000ba  481e              LDR      r0,|L313.308|
0000bc  4770              BX       lr
                  |L313.190|
0000be  481e              LDR      r0,|L313.312|
0000c0  4770              BX       lr
                  |L313.194|
0000c2  481e              LDR      r0,|L313.316|
0000c4  4770              BX       lr
                  |L313.198|
0000c6  481e              LDR      r0,|L313.320|
0000c8  4770              BX       lr
                  |L313.202|
0000ca  481e              LDR      r0,|L313.324|
0000cc  4770              BX       lr
                  |L313.206|
0000ce  481e              LDR      r0,|L313.328|
0000d0  4770              BX       lr
                  |L313.210|
0000d2  481e              LDR      r0,|L313.332|
0000d4  4770              BX       lr
                  |L313.214|
0000d6  481e              LDR      r0,|L313.336|
0000d8  4770              BX       lr
                  |L313.218|
0000da  481e              LDR      r0,|L313.340|
0000dc  4770              BX       lr
;;;213    #pragma diag_warning 111
                          ENDP

0000de  0000              DCW      0x0000
                  |L313.224|
                          DCD      ||.conststring||+0x288
                  |L313.228|
                          DCD      ||.conststring||
                  |L313.232|
                          DCD      ||.conststring||+0xc
                  |L313.236|
                          DCD      ||.conststring||+0x18
                  |L313.240|
                          DCD      ||.conststring||+0x24
                  |L313.244|
                          DCD      ||.conststring||+0x3c
                  |L313.248|
                          DCD      ||.conststring||+0x58
                  |L313.252|
                          DCD      ||.conststring||+0x70
                  |L313.256|
                          DCD      ||.conststring||+0x80
                  |L313.260|
                          DCD      ||.conststring||+0x98
                  |L313.264|
                          DCD      ||.conststring||+0xac
                  |L313.268|
                          DCD      ||.conststring||+0xc4
                  |L313.272|
                          DCD      ||.conststring||+0xe0
                  |L313.276|
                          DCD      ||.conststring||+0xf4
                  |L313.280|
                          DCD      ||.conststring||+0x10c
                  |L313.284|
                          DCD      ||.conststring||+0x120
                  |L313.288|
                          DCD      ||.conststring||+0x138
                  |L313.292|
                          DCD      ||.conststring||+0x150
                  |L313.296|
                          DCD      ||.conststring||+0x164
                  |L313.300|
                          DCD      ||.conststring||+0x178
                  |L313.304|
                          DCD      ||.conststring||+0x18c
                  |L313.308|
                          DCD      ||.conststring||+0x1a4
                  |L313.312|
                          DCD      ||.conststring||+0x1c4
                  |L313.316|
                          DCD      ||.conststring||+0x1e4
                  |L313.320|
                          DCD      ||.conststring||+0x204
                  |L313.324|
                          DCD      ||.conststring||+0x218
                  |L313.328|
                          DCD      ||.conststring||+0x230
                  |L313.332|
                          DCD      ||.conststring||+0x248
                  |L313.336|
                          DCD      ||.conststring||+0x258
                  |L313.340|
                          DCD      ||.conststring||+0x270

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\scpu\\share\\kl520_api.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___11_kl520_api_c_bb3ec05d____REV16|
#line 208 "F:\\Users\\fu\\AppData\\Local\\Arm\\Packs\\ARM\\CMSIS\\5.9.0\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___11_kl520_api_c_bb3ec05d____REV16| PROC
#line 209

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___11_kl520_api_c_bb3ec05d____REVSH|
#line 223
|__asm___11_kl520_api_c_bb3ec05d____REVSH| PROC
#line 224

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___11_kl520_api_c_bb3ec05d____RRX|
#line 410
|__asm___11_kl520_api_c_bb3ec05d____RRX| PROC
#line 411

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
