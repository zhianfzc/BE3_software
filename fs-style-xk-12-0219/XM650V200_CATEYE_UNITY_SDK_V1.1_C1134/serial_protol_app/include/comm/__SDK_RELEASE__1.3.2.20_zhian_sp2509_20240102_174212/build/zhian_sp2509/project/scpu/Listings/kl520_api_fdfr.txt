; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\objects\kl520_api_fdfr.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\kl520_api_fdfr.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O3 --diag_suppress=9931 -I..\..\config -I..\..\..\..\board -I..\..\..\..\common\include -I..\..\..\..\scpu\device\include\CMSIS -I..\..\..\..\scpu\device\include\Kneron -I..\..\..\..\scpu\framework\include -I..\..\..\..\scpu\framework\include\framework -I..\..\..\..\scpu\drivers\include -I..\..\..\..\scpu\drivers\include\media\touch -I..\..\..\..\scpu\drivers\include\media\flash -I..\..\..\..\scpu\lib\kdp_system\inc -I..\..\..\..\scpu\lib\kdp_application\include\ -I..\..\..\..\scpu\lib\kdp_application\base\ -I..\..\..\..\scpu\lib\kdp_application\misc -I..\..\..\..\scpu\lib\kdp_e2e_r1n1\include -I..\..\..\..\scpu\include -I..\..\..\..\scpu\middleware\ota -I..\..\..\..\scpu\middleware\comm -I..\..\..\..\scpu\middleware\kdp_comm -I..\..\..\..\scpu\share -I..\..\..\..\scpu\share\gui_lib -I..\..\user -I.\RTE\CMSIS -I.\RTE\_Target-scpu -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\RTOS2\Include -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\RTOS2\RTX\Include -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\Device\ARM\ARMCM4\Include -D__RTX -D__MICROLIB -D__UVISION_VERSION=538 -D_RTE_ -DARMCM4_FP -D_RTE_ -DARM_MATH_CM4 -DTARGET_SCPU -DLOG_ENABLE -DKL520 -DHEAD_POSE_CHECK_PERCENT --omf_browse=.\objects\kl520_api_fdfr.crf ..\..\..\..\scpu\share\kl520_api_fdfr.c]
                          THUMB

                          AREA ||i._api_fdfr_cam_capture||, CODE, READONLY, ALIGN=1

                  _api_fdfr_cam_capture PROC
;;;1487   
;;;1488   static BOOL _api_fdfr_cam_capture(int cam_idx)
000000  b510              PUSH     {r4,lr}
;;;1489   {
000002  4604              MOV      r4,r0
;;;1490       if (((0 == cam_idx)?CFG_SENSOR_0_TYPE:CFG_SENSOR_1_TYPE) == SENSOR_TYPE_NULL)
;;;1491           return TRUE;
;;;1492   
;;;1493       unsigned int frame_addr = 0;
;;;1494       kdp_e2e_face_variables *vars = kdp_e2e_get_face_variables();
000004  f7fffffe          BL       kdp_e2e_get_face_variables
;;;1495   
;;;1496   #if CFG_SNAPSHOT_ENABLE == 1 || CFG_SNAPSHOT_ENABLE == 2
;;;1497       if(kl520_api_sim_is_running() == TRUE)
;;;1498       {
;;;1499           frame_addr = kl520_api_snapshot_ddr_addr(cam_idx);
;;;1500       }
;;;1501       else
;;;1502   #endif
;;;1503       {
;;;1504           frame_addr = kdp_fb_mgr_next_inf(cam_idx, &vars->buf_idx[cam_idx]);
000008  eb000184          ADD      r1,r0,r4,LSL #2
00000c  4620              MOV      r0,r4
00000e  3140              ADDS     r1,r1,#0x40
000010  f7fffffe          BL       kdp_fb_mgr_next_inf
000014  0001              MOVS     r1,r0
000016  d004              BEQ      |L1.34|
;;;1505       }
;;;1506   #if (FB_TILE_RECODE == YES)
;;;1507       if(kdp_fb_mgr_tile_delay(cam_idx, vars->buf_idx[cam_idx]) == TRUE){
;;;1508           dbg_msg_console("Tile is not reday");
;;;1509           return FALSE;
;;;1510       }
;;;1511   #endif
;;;1512   
;;;1513       if (0 == frame_addr){
;;;1514   #if (MEASURE_RECOGNITION == YES)
;;;1515           if(CAMERA_DEVICE_RGB_IDX == cam_idx)
;;;1516               _kl520_measure_stamp_fb_mgr_rgb_next_inf();
;;;1517   #endif
;;;1518           return FALSE;
;;;1519       }
;;;1520   
;;;1521       kdp_e2e_set_img_mem_addr(cam_idx, frame_addr);
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       kdp_e2e_set_img_mem_addr
;;;1522   
;;;1523   #if (CFG_E2E_NIR_TWO_STAGE_LIGHT == YES)
;;;1524       kl520_api_nir_reserve(cam_idx, frame_addr);
;;;1525   #endif    
;;;1526       
;;;1527   #if CFG_SNAPSHOT_ENABLE == 1 || CFG_SNAPSHOT_ENABLE == 2
;;;1528       kl520_api_snapshot_fdfr_cam(cam_idx, frame_addr);
;;;1529   #endif
;;;1530   
;;;1531       return TRUE;
00001e  2001              MOVS     r0,#1
;;;1532   }
000020  bd10              POP      {r4,pc}
                  |L1.34|
000022  2000              MOVS     r0,#0                 ;1518
000024  bd10              POP      {r4,pc}
;;;1533   #if CFG_ONE_SHOT_MODE == YES
                          ENDP


                          AREA ||i._api_fdfr_cam_prepare||, CODE, READONLY, ALIGN=1

                  _api_fdfr_cam_prepare PROC
;;;1584   
;;;1585   static void _api_fdfr_cam_prepare(int cam_idx)
000000  b570              PUSH     {r4-r6,lr}
;;;1586   {
000002  4605              MOV      r5,r0
;;;1587       kdp_e2e_face_variables *vars = kdp_e2e_get_face_variables();
000004  f7fffffe          BL       kdp_e2e_get_face_variables
000008  4604              MOV      r4,r0
;;;1588       if(kl520_api_sim_is_running() == FALSE) {
00000a  f7fffffe          BL       kl520_api_sim_is_running
00000e  2800              CMP      r0,#0
000010  d107              BNE      |L2.34|
;;;1589           kdp_fb_mgr_inf_done(cam_idx, vars->buf_idx[cam_idx]);
000012  eb040085          ADD      r0,r4,r5,LSL #2
000016  6c01              LDR      r1,[r0,#0x40]
000018  4628              MOV      r0,r5
00001a  e8bd4070          POP      {r4-r6,lr}
00001e  f7ffbffe          B.W      kdp_fb_mgr_inf_done
                  |L2.34|
;;;1590       }
;;;1591   }
000022  bd70              POP      {r4-r6,pc}
;;;1592   
                          ENDP


                          AREA ||i._api_fdfr_check_eye||, CODE, READONLY, ALIGN=2

                  _api_fdfr_check_eye PROC
;;;796    
;;;797    u32 _api_fdfr_check_eye(void)
000000  b510              PUSH     {r4,lr}
;;;798    {
;;;799        u32 _fdfr_state = FDFR_STATUS_NORMAL;
000002  241c              MOVS     r4,#0x1c
;;;800        kdp_e2e_face_variables *vars_cur = kdp_e2e_get_face_variables();
000004  f7fffffe          BL       kdp_e2e_get_face_variables
;;;801    
;;;802    #define  EYE_CLOSE_RATIO     (0.5f)
;;;803    #define  EYE_OPEN_RATIO      (0.5f)
;;;804    #define  EYE_CLOSE_OPEN_RATIO     ((EYE_CLOSE_RATIO+EYE_OPEN_RATIO)/2)
;;;805        float eye_min = MIN(vars_cur->eye_left_ratio[0], vars_cur->eye_right_ratio[0]);
000008  edd00a3e          VLDR     s1,[r0,#0xf8]
00000c  ed900a40          VLDR     s0,[r0,#0x100]
000010  eef40ac0          VCMPE.F32 s1,s0
000014  eef1fa10          VMRS     APSR_nzcv,FPSCR
000018  dd03              BLE      |L3.34|
00001a  bf00              NOP      
00001c  eeb01a40          VMOV.F32 s2,s0
000020  e001              B        |L3.38|
                  |L3.34|
000022  eeb01a60          VMOV.F32 s2,s1
                  |L3.38|
000026  ee110a10          VMOV     r0,s2
;;;806        float eye_max = MAX(vars_cur->eye_left_ratio[0], vars_cur->eye_right_ratio[0]);
00002a  d301              BCC      |L3.48|
00002c  eeb00a60          VMOV.F32 s0,s1
                  |L3.48|
000030  ee101a10          VMOV     r1,s0
;;;807    #if (CFG_CONSOLE_MODE!=0)
;;;808        dbg_msg_console("[%d,%d]vars_cur->eye_left_ratio=%f, vars_cur->eye_right_ratio=%f", dp_draw_info.e2e_pos.x, dp_draw_info.e2e_pos.y, vars_cur->eye_left_ratio[0], vars_cur->eye_right_ratio[0]);
;;;809    #endif
;;;810        if( eye_min <= EYE_CLOSE_RATIO)
000034  f04f527c          MOV      r2,#0x3f000000
000038  4290              CMP      r0,r2
00003a  dc01              BGT      |L3.64|
;;;811        {
;;;812        		#if (CFG_CONSOLE_MODE!=0)            
;;;813            dbg_msg_console("eye_min=%f \033[31m[close]\033[m", eye_min);
;;;814        		#endif
;;;815            _fdfr_state = FDFR_STATUS_EYE_CLOSED;
00003c  2413              MOVS     r4,#0x13
00003e  e002              B        |L3.70|
                  |L3.64|
;;;816        }
;;;817        else if(eye_min > EYE_OPEN_RATIO)
000040  4290              CMP      r0,r2
000042  dc00              BGT      |L3.70|
;;;818        {
;;;819        		#if (CFG_CONSOLE_MODE!=0)
;;;820            dbg_msg_console("eye_min=%f  \033[32m[open]\033[m", eye_min);
;;;821        		#endif
;;;822        		_fdfr_state = FDFR_STATUS_NORMAL;
;;;823        }
;;;824        else if(eye_max >= EYE_CLOSE_OPEN_RATIO)
;;;825        {
;;;826        		#if (CFG_CONSOLE_MODE!=0)
;;;827            dbg_msg_console("eye_min=%f \033[33m[close_open]\033[m", eye_min);
;;;828        		#endif
;;;829        		 _fdfr_state = FDFR_STATUS_EYE_CLOSE_UNKNOW_STATUS;//FDFR_STATUS_EYE_CLOSE_STATUS_OPEN_EYE;//FDFR_STATUS_EYE_CLOSE_UNKNOW_STATUS;
000044  2414              MOVS     r4,#0x14
                  |L3.70|
;;;830        }
;;;831        else
;;;832        {
;;;833        		 _fdfr_state = FDFR_STATUS_EYE_CLOSE_UNKNOW_STATUS;//FDFR_STATUS_EYE_CLOSE_STATUS_CLOSE_EYE;
;;;834        }
;;;835          
;;;836        //dbg_msg_console("[%d,%d]vars_cur->eye_left_ratio=%f, vars_cur->eye_right_ratio=%f", dp_draw_info.e2e_pos.x, dp_draw_info.e2e_pos.y, vars_cur->eye_left_ratio, vars_cur->eye_right_ratio);
;;;837        return _fdfr_state;
000046  4620              MOV      r0,r4
;;;838    }
000048  bd10              POP      {r4,pc}
;;;839    
                          ENDP


                          AREA ||i._api_fdfr_chk_timeout||, CODE, READONLY, ALIGN=2

                  _api_fdfr_chk_timeout PROC
;;;1912   
;;;1913   bool _api_fdfr_chk_timeout(int timeout)
000000  b570              PUSH     {r4-r6,lr}
;;;1914   {
000002  4605              MOV      r5,r0
;;;1915       bool ret = FALSE;
000004  2400              MOVS     r4,#0
;;;1916   
;;;1917       static int _nShowimerPre = -1;
;;;1918   
;;;1919       int _nShowimerCur = -1;
;;;1920   
;;;1921       u32 curr_tick = kdp_current_t3_tick();
000006  f7fffffe          BL       kdp_current_t3_tick
;;;1922   
;;;1923       _nShowimerCur = curr_tick - m_fdfr_tick;
00000a  4904              LDR      r1,|L4.28|
00000c  698a              LDR      r2,[r1,#0x18]  ; m_fdfr_tick
00000e  1a80              SUBS     r0,r0,r2
;;;1924   
;;;1925       if ( _nShowimerCur >= timeout)
000010  42a8              CMP      r0,r5
000012  db00              BLT      |L4.22|
;;;1926       {
;;;1927           ret = TRUE;
000014  2401              MOVS     r4,#1
                  |L4.22|
;;;1928       }
;;;1929   
;;;1930       if(_nShowimerPre != _nShowimerCur){
;;;1931           dbg_msg_api("Timer Tick=%d/%d",_nShowimerCur,timeout);
;;;1932       }
;;;1933   
;;;1934       _nShowimerPre = _nShowimerCur;
;;;1935   
;;;1936       return ret;
000016  6688              STR      r0,[r1,#0x68]  ; _nShowimerPre
000018  4620              MOV      r0,r4
;;;1937   }
00001a  bd70              POP      {r4-r6,pc}
;;;1938   
                          ENDP

                  |L4.28|
                          DCD      ||.data||

                          AREA ||i._api_fdfr_ckeck_move||, CODE, READONLY, ALIGN=2

                  _api_fdfr_ckeck_move PROC
;;;1983   
;;;1984   u32 _api_fdfr_ckeck_move(void)
000000  e92d41ff          PUSH     {r0-r8,lr}
;;;1985   {
;;;1986       static u16 prev_x = 0;
;;;1987       static u16 prev_y = 0;
;;;1988   
;;;1989       u32 _fdfr_state = FDFR_STATUS_OK;
000004  2500              MOVS     r5,#0
;;;1990       s32 x, y, w, h;
;;;1991   
;;;1992       if( kdp_e2e_util_get_person_position(&x, &y, &w, &h) == 1){
000006  ab03              ADD      r3,sp,#0xc
000008  aa02              ADD      r2,sp,#8
00000a  a901              ADD      r1,sp,#4
00000c  4668              MOV      r0,sp
00000e  f7fffffe          BL       kdp_e2e_util_get_person_position
000012  2801              CMP      r0,#1
000014  d128              BNE      |L5.104|
;;;1993   
;;;1994           if( is_face_moved_thresh(prev_x, prev_y, (u16)x, (u16)y) == 1 ) {
000016  4c16              LDR      r4,|L5.112|
000018  9b00              LDR      r3,[sp,#0]
00001a  9801              LDR      r0,[sp,#4]
00001c  8aa2              LDRH     r2,[r4,#0x14]  ; prev_x
00001e  8ae6              LDRH     r6,[r4,#0x16]  ; prev_y
000020  b29f              UXTH     r7,r3
000022  b281              UXTH     r1,r0
000024  1aba              SUBS     r2,r7,r2
000026  d500              BPL      |L5.42|
000028  4252              RSBS     r2,r2,#0
                  |L5.42|
00002a  1b89              SUBS     r1,r1,r6
00002c  d500              BPL      |L5.48|
00002e  4249              RSBS     r1,r1,#0
                  |L5.48|
000030  2a28              CMP      r2,#0x28
000032  da05              BGE      |L5.64|
000034  2928              CMP      r1,#0x28
000036  da03              BGE      |L5.64|
;;;1995               prev_x = x;
;;;1996               prev_y = y;
;;;1997               face_non_move_cnt = 1;
;;;1998           } else {
;;;1999               face_non_move_cnt++;
000038  6ce0              LDR      r0,[r4,#0x4c]  ; face_non_move_cnt
00003a  1c40              ADDS     r0,r0,#1
00003c  64e0              STR      r0,[r4,#0x4c]  ; face_non_move_cnt
00003e  e003              B        |L5.72|
                  |L5.64|
000040  82a3              STRH     r3,[r4,#0x14]         ;1995
000042  2101              MOVS     r1,#1                 ;1995
000044  82e0              STRH     r0,[r4,#0x16]         ;1996
000046  64e1              STR      r1,[r4,#0x4c]         ;1997  ; face_non_move_cnt
                  |L5.72|
;;;2000           }
;;;2001   
;;;2002           if( (kdp_e2e_prop_get2(flow_mode) > FLOW_MODE_SIM_VIRTUAL ) )
000048  f7fffffe          BL       kdp_e2e_prop_get_inst
00004c  68c0              LDR      r0,[r0,#0xc]
00004e  2801              CMP      r0,#1
000050  d901              BLS      |L5.86|
;;;2003           {
;;;2004               face_non_move_cnt = FACE_NOT_MOVE_CNT;
000052  2003              MOVS     r0,#3
000054  64e0              STR      r0,[r4,#0x4c]  ; face_non_move_cnt
                  |L5.86|
;;;2005           }
;;;2006   
;;;2007           dbg_msg_user("face_non_move_cnt=%d", face_non_move_cnt);
000056  a107              ADR      r1,|L5.116|
000058  2001              MOVS     r0,#1
00005a  6ce2              LDR      r2,[r4,#0x4c]  ; face_non_move_cnt
00005c  f7fffffe          BL       kdp_user_level_printf
;;;2008   
;;;2009           if(face_non_move_cnt < FACE_NOT_MOVE_CNT ) {
000060  6ce0              LDR      r0,[r4,#0x4c]  ; face_non_move_cnt
000062  2803              CMP      r0,#3
000064  da00              BGE      |L5.104|
;;;2010               _fdfr_state = FDFR_STATUS_WAIT_DONT_MOVE;
000066  250f              MOVS     r5,#0xf
                  |L5.104|
;;;2011           }
;;;2012       }
;;;2013   
;;;2014       return _fdfr_state;
;;;2015   }
000068  b004              ADD      sp,sp,#0x10
00006a  4628              MOV      r0,r5                 ;2014
00006c  e8bd81f0          POP      {r4-r8,pc}
;;;2016   
                          ENDP

                  |L5.112|
                          DCD      ||.data||
                  |L5.116|
000074  66616365          DCB      "face_non_move_cnt=%d\r\n",0
000078  5f6e6f6e
00007c  5f6d6f76
000080  655f636e
000084  743d2564
000088  0d0a00  
00008b  00                DCB      0

                          AREA ||i._api_fdfr_ckeck_position_xy||, CODE, READONLY, ALIGN=1

                  _api_fdfr_ckeck_position_xy PROC
;;;839    
;;;840    u32 _api_fdfr_ckeck_position_xy(s32 x, s32 y, s32 w, s32 h)
000000  b510              PUSH     {r4,lr}
;;;841    {
000002  4604              MOV      r4,r0
;;;842        u32 _fdfr_state = FDFR_STATUS_NORMAL;
000004  201c              MOVS     r0,#0x1c
;;;843        
;;;844    #if (CFG_PANEL_TYPE > PANEL_NULL)
;;;845        struct video_input_params params;
;;;846        kdp_video_renderer_get_params(&params);
;;;847        int dp_w = (int)params.dp_out_w;
;;;848        int dp_h = (int)params.dp_out_h;
;;;849        int img_w = (int)params.dp_area_w;
;;;850        int img_h = (int)params.dp_area_h;
;;;851    
;;;852        x = x * dp_w / img_w;
;;;853        y = y * dp_h / img_h;
;;;854    #endif
;;;855    
;;;856        dbg_msg_algo("[FACE_POS] (x, y, w, h)= (%d, %d, %d, %d)", x, y, w, h);
;;;857    
;;;858        if( y < FACE_POSTITON_UP_THRESH )
000006  291e              CMP      r1,#0x1e
000008  da01              BGE      |L6.14|
;;;859            _fdfr_state = FDFR_STATUS_TOOUP;
;;;860        else if((y + h) > FACE_POSTITON_DOWN_THRESH)
;;;861            _fdfr_state = FDFR_STATUS_TOODOWN;
;;;862        else if(x < FACE_POSTITON_LEFT_THRESH)
;;;863            _fdfr_state = FDFR_STATUS_TOOLEFT;
;;;864        else if((x + w) > FACE_POSTITON_RIGHT_THRESH)
;;;865            _fdfr_state = FDFR_STATUS_TOORIGHT;
;;;866    
;;;867    
;;;868    #if (CFG_CAMERA_ROTATE == 1)
;;;869        switch (_fdfr_state)
;;;870        {
;;;871            case FDFR_STATUS_TOOLEFT:
;;;872                _fdfr_state = FDFR_STATUS_TOODOWN;
;;;873                dbg_msg_algo("[FDFR_STATUS_TOODOWN");
;;;874                break;
;;;875            case FDFR_STATUS_TOORIGHT:
;;;876                _fdfr_state = FDFR_STATUS_TOOUP;
;;;877                dbg_msg_algo("[FDFR_STATUS_TOOUP");
;;;878                break;
;;;879            case FDFR_STATUS_TOOUP:
;;;880                _fdfr_state = FDFR_STATUS_TOOLEFT;
00000a  2018              MOVS     r0,#0x18
;;;881                dbg_msg_algo("[FDFR_STATUS_TOOLEFT");
;;;882                break;
;;;883            case FDFR_STATUS_TOODOWN:
;;;884                _fdfr_state = FDFR_STATUS_TOORIGHT;
;;;885                dbg_msg_algo("[FDFR_STATUS_TOORIGHT");
;;;886                break;
;;;887            default:
;;;888                break;
;;;889        }
;;;890    #endif
;;;891    
;;;892        return _fdfr_state;
;;;893    }
00000c  bd10              POP      {r4,pc}
                  |L6.14|
00000e  4419              ADD      r1,r1,r3              ;860
000010  f240233a          MOV      r3,#0x23a             ;860
000014  4299              CMP      r1,r3                 ;860
000016  dd01              BLE      |L6.28|
000018  2019              MOVS     r0,#0x19              ;884
                  |L6.26|
00001a  bd10              POP      {r4,pc}
                  |L6.28|
00001c  2c28              CMP      r4,#0x28              ;862
00001e  da01              BGE      |L6.36|
000020  2018              MOVS     r0,#0x18              ;863
000022  e003              B        |L6.44|
                  |L6.36|
000024  18a1              ADDS     r1,r4,r2              ;864
000026  f5b17f3e          CMP      r1,#0x2f8             ;864
00002a  dc03              BGT      |L6.52|
                  |L6.44|
00002c  2818              CMP      r0,#0x18              ;869
00002e  d003              BEQ      |L6.56|
000030  2819              CMP      r0,#0x19              ;869
000032  d1f2              BNE      |L6.26|
                  |L6.52|
000034  2016              MOVS     r0,#0x16              ;876
000036  bd10              POP      {r4,pc}
                  |L6.56|
000038  2017              MOVS     r0,#0x17              ;872
00003a  bd10              POP      {r4,pc}
;;;894    
                          ENDP


                          AREA ||i._api_fdfr_close_timeout||, CODE, READONLY, ALIGN=1

                  _api_fdfr_close_timeout PROC
;;;1907   
;;;1908   void _api_fdfr_close_timeout(void)
000000  2003              MOVS     r0,#3
;;;1909   {
;;;1910       kl520_api_timer_close(PWMTIMER3);
000002  f7ffbffe          B.W      kl520_api_timer_close
;;;1911   }
;;;1912   
                          ENDP


                          AREA ||i._api_fdfr_handle_face_recog_error||, CODE, READONLY, ALIGN=2

                  _api_fdfr_handle_face_recog_error PROC
;;;2618   
;;;2619   static void _api_fdfr_handle_face_recog_error(struct api_fdfr_context *ctx, int fdr_result)
000000  b570              PUSH     {r4-r6,lr}
;;;2620   {
;;;2621       if (KL520_FACE_INVALID == fdr_result)
;;;2622       {
;;;2623           ctx->state = FDFR_STATUS_INVALID;
;;;2624   #if CFG_SNAPSHOT_ENABLE == 1 || CFG_SNAPSHOT_ENABLE == 2
;;;2625           kl520_api_snapshot_adv_shot_after_fdfr_element();
;;;2626   #endif
;;;2627           _api_fdfr_set_event(FLAGS_API_FDFR_RECOGNITION_EVT, KL520_APP_FLAG_FDFR_ERR, TRUE);
;;;2628           kdp_e2e_nir_led_flag_off();
;;;2629           // dbg_msg_console("KL520_FACE_INVALID");
;;;2630       }
;;;2631       else if (KL520_FACE_DETECTED == fdr_result) {
;;;2632           ctx->state = FDFR_STATUS_DETECTED;
;;;2633           m_face_appear = TRUE;
000002  4d25              LDR      r5,|L8.152|
000004  4604              MOV      r4,r0                 ;2620
000006  f44f6680          MOV      r6,#0x400             ;2627
00000a  290b              CMP      r1,#0xb               ;2621
00000c  d007              BEQ      |L8.30|
00000e  2001              MOVS     r0,#1                 ;2627
000010  2910              CMP      r1,#0x10              ;2631
000012  d00e              BEQ      |L8.50|
;;;2634           dbg_msg_algo("KL520_FACE_DETECTED");
;;;2635       }
;;;2636       else if (KL520_FACE_MASK == fdr_result)
000014  2911              CMP      r1,#0x11
000016  d010              BEQ      |L8.58|
;;;2637       {
;;;2638           ctx->state = FDFR_STATUS_MASK;
;;;2639           m_face_appear = TRUE;
;;;2640   
;;;2641           _api_fdfr_set_event(FLAGS_API_FDFR_RECOGNITION_EVT, KL520_APP_FLAG_FDFR_ERR, FALSE);
;;;2642   
;;;2643           //osDelay(KL520_FDFR_KEEP_MS);
;;;2644       }
;;;2645       else if(KL520_FACE_LOW_QUALITY  == fdr_result)
000018  2919              CMP      r1,#0x19
00001a  d012              BEQ      |L8.66|
00001c  e018              B        |L8.80|
                  |L8.30|
00001e  2010              MOVS     r0,#0x10              ;2623
000020  7020              STRB     r0,[r4,#0]            ;2623
000022  2201              MOVS     r2,#1                 ;2627
000024  2102              MOVS     r1,#2                 ;2627
000026  4630              MOV      r0,r6                 ;2627
000028  f7fffffe          BL       _api_fdfr_set_event
00002c  f7fffffe          BL       kdp_e2e_nir_led_flag_off
000030  e00e              B        |L8.80|
                  |L8.50|
000032  210b              MOVS     r1,#0xb               ;2632
000034  7021              STRB     r1,[r4,#0]            ;2632
000036  7168              STRB     r0,[r5,#5]            ;2633
000038  e00a              B        |L8.80|
                  |L8.58|
00003a  2111              MOVS     r1,#0x11              ;2638
00003c  7021              STRB     r1,[r4,#0]            ;2638
00003e  7168              STRB     r0,[r5,#5]            ;2639
000040  e001              B        |L8.70|
                  |L8.66|
;;;2646       {
;;;2647           ctx->state = FDFR_STATUS_LOW_QUALITY;
000042  201a              MOVS     r0,#0x1a
000044  7020              STRB     r0,[r4,#0]
                  |L8.70|
;;;2648           _api_fdfr_set_event(FLAGS_API_FDFR_RECOGNITION_EVT, KL520_APP_FLAG_FDFR_ERR, FALSE);
000046  2200              MOVS     r2,#0
000048  2102              MOVS     r1,#2
00004a  4630              MOV      r0,r6
00004c  f7fffffe          BL       _api_fdfr_set_event
                  |L8.80|
;;;2649       }
;;;2650   
;;;2651       if ((_api_fdfr_chk_timeout(m_face_recognition_timeout) == TRUE) || (kdp_e2e_prop_get2(flow_mode) > FLOW_MODE_SIM_VIRTUAL) )
000050  6b28              LDR      r0,[r5,#0x30]  ; m_face_recognition_timeout
000052  f7fffffe          BL       _api_fdfr_chk_timeout
000056  b920              CBNZ     r0,|L8.98|
000058  f7fffffe          BL       kdp_e2e_prop_get_inst
00005c  68c0              LDR      r0,[r0,#0xc]
00005e  2801              CMP      r0,#1
000060  d919              BLS      |L8.150|
                  |L8.98|
;;;2652       {
;;;2653           if(m_face_appear)
000062  7968              LDRB     r0,[r5,#5]  ; m_face_appear
000064  b140              CBZ      r0,|L8.120|
;;;2654           {
;;;2655               dbg_msg_console("[FACE_RECOGNITION] timeout");
000066  a10d              ADR      r1,|L8.156|
000068  2001              MOVS     r0,#1
00006a  f7fffffe          BL       kdp_level_printf
;;;2656               ctx->state = FDFR_STATUS_TIMEOUT;
00006e  20fe              MOVS     r0,#0xfe
;;;2657               //osDelay(KL520_FDFR_KEEP_MS);
;;;2658               _api_fdfr_set_event(FLAGS_API_FDFR_RECOGNITION_EVT, KL520_APP_FLAG_FDFR_TIMEOUT, TRUE);
000070  2201              MOVS     r2,#1
000072  7020              STRB     r0,[r4,#0]            ;2656
000074  2104              MOVS     r1,#4
000076  e007              B        |L8.136|
                  |L8.120|
;;;2659   
;;;2660           }
;;;2661           else
;;;2662           {
;;;2663               dbg_msg_console("[FACE_RECOGNITION] timeout(no face)");
000078  a110              ADR      r1,|L8.188|
00007a  2001              MOVS     r0,#1
00007c  f7fffffe          BL       kdp_level_printf
;;;2664               ctx->state = FDFR_STATUS_NOFACE_AND_TIMEOUT;
000080  20fd              MOVS     r0,#0xfd
;;;2665               _api_fdfr_set_event(FLAGS_API_FDFR_RECOGNITION_EVT, KL520_APP_FLAG_FDFR_ERR, TRUE);
000082  2201              MOVS     r2,#1
000084  7020              STRB     r0,[r4,#0]            ;2664
000086  2102              MOVS     r1,#2
                  |L8.136|
000088  4630              MOV      r0,r6
00008a  f7fffffe          BL       _api_fdfr_set_event
;;;2666   
;;;2667           }
;;;2668           kdp_e2e_nir_led_flag_off();
00008e  e8bd4070          POP      {r4-r6,lr}
000092  f7ffbffe          B.W      kdp_e2e_nir_led_flag_off
                  |L8.150|
;;;2669   
;;;2670   #if CFG_SNAPSHOT_ENABLE == 1 || CFG_SNAPSHOT_ENABLE == 2
;;;2671           kl520_api_snapshot_adv_shot_after_fdfr_element();
;;;2672   #endif
;;;2673           return;
;;;2674       }
;;;2675       else if ( fdr_result == KL520_FACE_DETECTED )
;;;2676       {
;;;2677   #if CFG_SNAPSHOT_ENABLE == 1 || CFG_SNAPSHOT_ENABLE == 2
;;;2678           kl520_api_snapshot_adv_shot_after_fdfr_element();
;;;2679   #endif
;;;2680       }
;;;2681       return;
;;;2682   }
000096  bd70              POP      {r4-r6,pc}
;;;2683   
                          ENDP

                  |L8.152|
                          DCD      ||.data||
                  |L8.156|
00009c  5b464143          DCB      "[FACE_RECOGNITION] timeout\r\n",0
0000a0  455f5245
0000a4  434f474e
0000a8  4954494f
0000ac  4e5d2074
0000b0  696d656f
0000b4  75740d0a
0000b8  00      
0000b9  00                DCB      0
0000ba  00                DCB      0
0000bb  00                DCB      0
                  |L8.188|
0000bc  5b464143          DCB      "[FACE_RECOGNITION] timeout(no face)\r\n",0
0000c0  455f5245
0000c4  434f474e
0000c8  4954494f
0000cc  4e5d2074
0000d0  696d656f
0000d4  7574286e
0000d8  6f206661
0000dc  6365290d
0000e0  0a00    
0000e2  00                DCB      0
0000e3  00                DCB      0

                          AREA ||i._api_fdfr_handle_fr_db_match||, CODE, READONLY, ALIGN=2

                  _api_fdfr_handle_fr_db_match PROC
;;;2683   
;;;2684   static void _api_fdfr_handle_fr_db_match(struct api_fdfr_context *ctx)
000000  e92d41ff          PUSH     {r0-r8,lr}
;;;2685   {
;;;2686       u32 e2e_ret;
;;;2687       u16 user_id;
;;;2688       int fdr_result = KL520_FACE_DB_FAIL;
;;;2689   
;;;2690   #if CFG_FMAP_AP_CTRL_TYPE == EX_FM_USB_AP_CTRL_ALL && CFG_FMAP_AP_CTRL_TYPE > EX_FM_DISABLE && CFG_FMAP_EXTRA_ENABLE == YES
;;;2691       if( KL520_api_ap_com_get_extra_fmap_status() == USB_CMD_FM_RECOGNIZE_e ){
;;;2692           e2e_ret = kdp_api_ap_com_wait_host_compare_result(&user_id);
;;;2693       }
;;;2694       else
;;;2695   #endif
;;;2696       {
;;;2697           kl520_measure_stamp(E_MEASURE_FACE_DB_COMP_STR);
;;;2698   
;;;2699   #if KL520_REC_EYEMODE == YES  
;;;2700           if( get_eye_mode_status() == 1 )
;;;2701           {// already in eye mode
;;;2702               e2e_ret = E2E_OK;
;;;2703           }
;;;2704           else
;;;2705   #endif
;;;2706           {
;;;2707               float thres_arr[3] = {KL520_DEFAULT_DB_THR_ENVIR_DIFF_0, KL520_DEFAULT_DB_THR_ENVIR_DIFF_1, KL520_DEFAULT_DB_THR_ENVIR_DIFF_2};
000004  4a23              LDR      r2,|L9.148|
000006  4606              MOV      r6,r0                 ;2685
000008  ca07              LDM      r2,{r0-r2}
00000a  e88d0007          STM      sp,{r0-r2}
;;;2708               e2e_ret = kdp_e2e_db_compare(&user_id, thres_arr);
00000e  4669              MOV      r1,sp
000010  a803              ADD      r0,sp,#0xc
000012  f7fffffe          BL       kdp_e2e_db_compare
;;;2709   #if ((CFG_AI_TYPE == AI_TYPE_N1R1) && (USE_FR_FACE_FLIP == YES) )
;;;2710               if (e2e_ret == E2E_STATUS_FR_MODEL_FLIP_0 || e2e_ret == E2E_STATUS_FR_MODEL_FLIP_1) {
;;;2711                   dbg_msg_algo ("retrying fr for face flip...");
;;;2712                   u32 fr_ret = kdp_e2e_face_n1r1_postproc(1);
;;;2713                   if (E2E_OK == fr_ret) {
;;;2714                       e2e_ret = kdp_e2e_db_compare_one_user(user_id);
;;;2715                   } else {
;;;2716                       if(e2e_ret == E2E_STATUS_FR_MODEL_FLIP_0) e2e_ret = E2E_OK;
;;;2717                   }
;;;2718               }
;;;2719   #endif
;;;2720           }
;;;2721           kl520_measure_stamp(E_MEASURE_FACE_DB_COMP_END);
;;;2722       }
;;;2723       if (E2E_OK == e2e_ret) {
;;;2724           kdp_e2e_face_variables *vars_cur = kdp_e2e_get_face_variables();
;;;2725           fdr_result = KL520_FACE_DB_OK;
;;;2726   #if KL520_REC_EYEMODE == YES                     
;;;2727           if( get_eye_mode_status() == 0 ) 
;;;2728   #endif                        
;;;2729           { // no eye mode, update id
;;;2730               m_curr_user_id = (u8)user_id;
000016  4c20              LDR      r4,|L9.152|
;;;2731           }
;;;2732   
;;;2733           fdfr_update_fr_entry();
;;;2734           
;;;2735           dbg_msg_console("[PASS] KL520_FACE_DB_OK (UseID = %#x, Admin = %d, UseName = %s, fdr_result = %#x)", m_curr_user_id, vars_cur->admin, vars_cur->user_name, fdr_result);
;;;2736   
;;;2737   #if KL520_REC_EYEMODE == YES
;;;2738           u8 face_mode = kl520_face_recognition_eye_mode(dp_draw_info.e2e_eye_type, dp_draw_info.e2e_ret);
;;;2739           if( get_eye_mode_status() == 1 )
;;;2740           {
;;;2741               dbg_msg_console("[Eye Mode] kl520_face_recognition_note" );                            
;;;2742               ctx->state = (enum kl520_fdfr_status_code_e)face_mode;
;;;2743               
;;;2744           }
;;;2745           else 
;;;2746           {
;;;2747               if( ctx->state == FDFR_STATUS_EYE_CLOSE_STATUS_OPEN_EYE ||
;;;2748                   ctx->state == FDFR_STATUS_EYE_CLOSED ||
;;;2749                   ctx->state == FDFR_STATUS_EYE_CLOSE_UNKNOW_STATUS
;;;2750               ) {
;;;2751                   // keep state;
;;;2752               }
;;;2753               else
;;;2754               {
;;;2755                   ctx->state = FDFR_STATUS_OK;
;;;2756               }
;;;2757   
;;;2758   #ifndef DB_DRAWING_CUSTOMER_COLOR
;;;2759               _kl520_fdfr_drawing_timer_create(KL520_FACE_DB_OK);
;;;2760   #endif   
;;;2761   #if CFG_SNAPSHOT_ENABLE == 1 || CFG_SNAPSHOT_ENABLE == 2
;;;2762               kl520_api_snapshot_adv_shot_after_fdfr_element();
;;;2763   #endif
;;;2764               kl520_measure_stamp(E_MEASURE_EVENT_SEND_OK);
;;;2765               _api_fdfr_set_event(FLAGS_API_FDFR_RECOGNITION_EVT, KL520_APP_FLAG_FDFR_OK, TRUE);
;;;2766               return;
;;;2767   
;;;2768           }
;;;2769   #else
;;;2770           ctx->state = FDFR_STATUS_OK;
;;;2771   #ifndef DB_DRAWING_CUSTOMER_COLOR
;;;2772           _kl520_fdfr_drawing_timer_create(KL520_FACE_DB_OK);
;;;2773   #endif
;;;2774   #if CFG_SNAPSHOT_ENABLE == 1 || CFG_SNAPSHOT_ENABLE == 2
;;;2775           kl520_api_snapshot_adv_shot_after_fdfr_element();
;;;2776   #endif
;;;2777           kl520_measure_stamp(E_MEASURE_EVENT_SEND_OK);
;;;2778           _api_fdfr_set_event(FLAGS_API_FDFR_RECOGNITION_EVT, KL520_APP_FLAG_FDFR_OK, TRUE);
000018  f44f6880          MOV      r8,#0x400
00001c  b170              CBZ      r0,|L9.60|
;;;2779   
;;;2780   #ifdef DEV_TEST_VERSION
;;;2781           _face_succ_count++;
;;;2782   #endif
;;;2783           return;
;;;2784   #endif
;;;2785       } else {
;;;2786           if(KAPP_DB_POSE_ERR == e2e_ret) {
00001e  f5a07100          SUB      r1,r0,#0x200
000022  390a              SUBS     r1,r1,#0xa
000024  d031              BEQ      |L9.138|
;;;2787               return;
;;;2788           } else {
;;;2789               ++m_db_comp_fail_cnt;
000026  69e2              LDR      r2,[r4,#0x1c]  ; m_db_comp_fail_cnt
;;;2790               dbg_msg_console("[FAIL] KL520_FACE_DB_FAIL (counter = %u, max = %u)", m_db_comp_fail_cnt, KL520_DB_COMP_FAIL_ALLOWED_MAX);
000028  2301              MOVS     r3,#1
00002a  1c52              ADDS     r2,r2,#1              ;2789
00002c  a11b              ADR      r1,|L9.156|
00002e  4618              MOV      r0,r3
000030  61e2              STR      r2,[r4,#0x1c]  ; m_db_comp_fail_cnt
000032  f7fffffe          BL       kdp_level_printf
;;;2791               if ((m_db_comp_fail_cnt >= KL520_DB_COMP_FAIL_ALLOWED_MAX) || (kdp_e2e_prop_get2(flow_mode) > FLOW_MODE_SIM_VIRTUAL)) {
000036  69e0              LDR      r0,[r4,#0x1c]  ; m_db_comp_fail_cnt
000038  b9f0              CBNZ     r0,|L9.120|
00003a  e018              B        |L9.110|
                  |L9.60|
00003c  f7fffffe          BL       kdp_e2e_get_face_variables
000040  4605              MOV      r5,r0                 ;2724
000042  f8bd000c          LDRH     r0,[sp,#0xc]          ;2730
000046  2701              MOVS     r7,#1                 ;2725
000048  7120              STRB     r0,[r4,#4]            ;2730
00004a  f7fffffe          BL       fdfr_update_fr_entry
00004e  f105004c          ADD      r0,r5,#0x4c           ;2735
000052  e9cd0700          STRD     r0,r7,[sp,#0]         ;2735
000056  f895306c          LDRB     r3,[r5,#0x6c]         ;2735
00005a  7922              LDRB     r2,[r4,#4]            ;2735  ; m_curr_user_id
00005c  491d              LDR      r1,|L9.212|
00005e  2001              MOVS     r0,#1                 ;2735
000060  f7fffffe          BL       kdp_level_printf
000064  2000              MOVS     r0,#0                 ;2770
000066  2201              MOVS     r2,#1                 ;2778
000068  7030              STRB     r0,[r6,#0]            ;2770
00006a  4611              MOV      r1,r2                 ;2778
00006c  e00a              B        |L9.132|
                  |L9.110|
00006e  f7fffffe          BL       kdp_e2e_prop_get_inst
000072  68c0              LDR      r0,[r0,#0xc]
000074  2801              CMP      r0,#1
000076  d90a              BLS      |L9.142|
                  |L9.120|
;;;2792                   m_curr_user_id = 0xFF;
000078  20ff              MOVS     r0,#0xff
00007a  7120              STRB     r0,[r4,#4]
;;;2793       #if CFG_SNAPSHOT_ENABLE == 1 || CFG_SNAPSHOT_ENABLE == 2
;;;2794                   kl520_api_snapshot_adv_shot_after_fdfr_element();
;;;2795       #endif
;;;2796       #ifndef DB_DRAWING_CUSTOMER_COLOR
;;;2797                   if ((kdp_e2e_prop_get2(flow_mode) < FLOW_MODE_SIM_VIRTUAL))
;;;2798                   {
;;;2799                       _kl520_fdfr_drawing_timer_create(KL520_FACE_DB_FAIL);
;;;2800                   }
;;;2801       #endif
;;;2802                   ctx->state = FDFR_STATUS_COMP_FAIL;
00007c  2003              MOVS     r0,#3
;;;2803                   _api_fdfr_set_event(FLAGS_API_FDFR_RECOGNITION_EVT, KL520_APP_FLAG_FDFR_ERR, TRUE);
00007e  2201              MOVS     r2,#1
000080  7030              STRB     r0,[r6,#0]            ;2802
000082  2102              MOVS     r1,#2
                  |L9.132|
000084  4640              MOV      r0,r8
000086  f7fffffe          BL       _api_fdfr_set_event
                  |L9.138|
;;;2804                   return;
;;;2805               }
;;;2806           }
;;;2807       }
;;;2808       m_face_appear = TRUE;
;;;2809   
;;;2810       return;
;;;2811   }
00008a  e8bd81ff          POP      {r0-r8,pc}
                  |L9.142|
00008e  2001              MOVS     r0,#1                 ;2808
000090  7160              STRB     r0,[r4,#5]            ;2808
000092  e7fa              B        |L9.138|
;;;2812   
                          ENDP

                  |L9.148|
                          DCD      ||area_number.123||+0x84
                  |L9.152|
                          DCD      ||.data||
                  |L9.156|
00009c  5b464149          DCB      "[FAIL] KL520_FACE_DB_FAIL (counter = %u, max = %u)\r\n",0
0000a0  4c5d204b
0000a4  4c353230
0000a8  5f464143
0000ac  455f4442
0000b0  5f464149
0000b4  4c202863
0000b8  6f756e74
0000bc  6572203d
0000c0  2025752c
0000c4  206d6178
0000c8  203d2025
0000cc  75290d0a
0000d0  00      
0000d1  00                DCB      0
0000d2  00                DCB      0
0000d3  00                DCB      0
                  |L9.212|
                          DCD      ||.conststring||+0x28c

                          AREA ||i._api_fdfr_measure_rec_str||, CODE, READONLY, ALIGN=1

                  _api_fdfr_measure_rec_str PROC
;;;1938   
;;;1939   void _api_fdfr_measure_rec_str(void)
000000  4770              BX       lr
;;;1940   {
;;;1941       #if (MEASURE_RECOGNITION == YES)
;;;1942       {
;;;1943           static BOOL api_thrd_fdfr_rec_flag = FALSE;
;;;1944           if (!api_thrd_fdfr_rec_flag) {
;;;1945           kl520_measure_stamp(E_MEASURE_THR_FDFR_REC_STR);
;;;1946           api_thrd_fdfr_rec_flag = TRUE;
;;;1947           }
;;;1948       }
;;;1949       #endif
;;;1950   }
;;;1951   
                          ENDP


                          AREA ||i._api_fdfr_rst_timeout||, CODE, READONLY, ALIGN=2

                  _api_fdfr_rst_timeout PROC
;;;1901   
;;;1902   void _api_fdfr_rst_timeout(void)
000000  b510              PUSH     {r4,lr}
;;;1903   {
;;;1904       kl520_api_timer_init(PWMTIMER3, PWMTMR_1000MSEC_PERIOD);
000002  4904              LDR      r1,|L11.20|
000004  2003              MOVS     r0,#3
000006  f7fffffe          BL       kl520_api_timer_init
;;;1905       m_fdfr_tick = kdp_current_t3_tick();
00000a  f7fffffe          BL       kdp_current_t3_tick
00000e  4902              LDR      r1,|L11.24|
000010  6188              STR      r0,[r1,#0x18]  ; m_fdfr_tick
;;;1906   }
000012  bd10              POP      {r4,pc}
;;;1907   
                          ENDP

                  |L11.20|
                          DCD      0x05f5e100
                  |L11.24|
                          DCD      ||.data||

                          AREA ||i._api_fdfr_thread_data_prepare||, CODE, READONLY, ALIGN=2

                  _api_fdfr_thread_data_prepare PROC
;;;1592   
;;;1593   static void _api_fdfr_thread_data_prepare(void)
000000  b510              PUSH     {r4,lr}
;;;1594   {
;;;1595   
;;;1596   #if CFG_SNAPSHOT_ENABLE == 1 || CFG_SNAPSHOT_ENABLE == 2
;;;1597       kl520_api_sim_set_fdfr();
;;;1598       //kl520_api_snapshot_fdfr_inf(0);
;;;1599   #endif
;;;1600   
;;;1601   #if (CFG_AI_TYPE == AI_TYPE_R1)
;;;1602       _api_fdfr_cam_prepare(CAMERA_DEVICE_RGB_IDX);
;;;1603   #elif (CFG_AI_TYPE == AI_TYPE_R1N1)
;;;1604       _api_fdfr_cam_prepare(CAMERA_DEVICE_RGB_IDX);
;;;1605       _api_fdfr_cam_prepare(CAMERA_DEVICE_NIR_IDX);
;;;1606   #elif (CFG_AI_TYPE == AI_TYPE_N1)
;;;1607       _api_fdfr_cam_prepare(CAMERA_DEVICE_NIR_IDX);
;;;1608   #elif (CFG_AI_TYPE == AI_TYPE_N1R1)
;;;1609       _api_fdfr_cam_prepare(CAMERA_DEVICE_NIR_IDX);
000002  4c04              LDR      r4,|L12.20|
000004  7860              LDRB     r0,[r4,#1]  ; nir_sensor_index
000006  f7fffffe          BL       _api_fdfr_cam_prepare
;;;1610       _api_fdfr_cam_prepare(CAMERA_DEVICE_RGB_IDX);
00000a  7820              LDRB     r0,[r4,#0]  ; rgb_sensor_index
00000c  e8bd4010          POP      {r4,lr}
000010  f7ffbffe          B.W      _api_fdfr_cam_prepare
;;;1611   
;;;1612   #endif
;;;1613   
;;;1614   }
;;;1615   
                          ENDP

                  |L12.20|
                          DCD      ||.data||

                          AREA ||i._api_fdfr_thread_rst_priority||, CODE, READONLY, ALIGN=2

                  _api_fdfr_thread_rst_priority PROC
;;;1642   
;;;1643   static void _api_fdfr_thread_rst_priority(void)
000000  b510              PUSH     {r4,lr}
;;;1644   {
;;;1645   #ifdef FDFR_THREAD_PRIORITY_DYNAMIC_ADJUSTMENT
;;;1646       if (m_old_thread_priority != osThreadGetPriority(m_api_fdfr_ctx.tid)) {
000002  4c07              LDR      r4,|L13.32|
000004  6860              LDR      r0,[r4,#4]  ; m_api_fdfr_ctx
000006  f7fffffe          BL       osThreadGetPriority
00000a  f1a40174          SUB      r1,r4,#0x74
00000e  6bc9              LDR      r1,[r1,#0x3c]  ; m_old_thread_priority
000010  4288              CMP      r0,r1
000012  d004              BEQ      |L13.30|
;;;1647           osThreadSetPriority(m_api_fdfr_ctx.tid, m_old_thread_priority);
000014  6860              LDR      r0,[r4,#4]  ; m_api_fdfr_ctx
000016  e8bd4010          POP      {r4,lr}
00001a  f7ffbffe          B.W      osThreadSetPriority
                  |L13.30|
;;;1648       }
;;;1649   #endif
;;;1650   }
00001e  bd10              POP      {r4,pc}
;;;1651   
                          ENDP

                  |L13.32|
                          DCD      ||.data||+0x74

                          AREA ||i._chk_fdfr_fps||, CODE, READONLY, ALIGN=2

                  _chk_fdfr_fps PROC
;;;1615   
;;;1616   void _chk_fdfr_fps(void)
000000  b510              PUSH     {r4,lr}
;;;1617   {
;;;1618       static float ftime = 0;
;;;1619       static float ffps = 0;
;;;1620       if(osKernelGetTickCount() - ftime > 3000.0f){
000002  f7fffffe          BL       osKernelGetTickCount
000006  ee000a10          VMOV     s0,r0
00000a  4c11              LDR      r4,|L14.80|
00000c  4911              LDR      r1,|L14.84|
00000e  eeb80a40          VCVT.F32.U32 s0,s0
000012  edd40a18          VLDR     s1,[r4,#0x60]
000016  ee300a60          VSUB.F32 s0,s0,s1
00001a  ee100a10          VMOV     r0,s0
00001e  4288              CMP      r0,r1
000020  dd0c              BLE      |L14.60|
;;;1621           float sfps = (ffps/3.0f);
;;;1622   
;;;1623           if(sfps != 0){
000022  ed9f0a0d          VLDR     s0,|L14.88|
;;;1624               dbg_msg_engineering("fdfr-fps:%5.2f",sfps );
;;;1625           }
;;;1626           ffps = 0;
000026  ed840a19          VSTR     s0,[r4,#0x64]
;;;1627           ftime = (float)osKernelGetTickCount();
00002a  f7fffffe          BL       osKernelGetTickCount
00002e  ee000a10          VMOV     s0,r0
000032  eeb80a40          VCVT.F32.U32 s0,s0
000036  ed840a18          VSTR     s0,[r4,#0x60]
;;;1628       }
;;;1629       else{
;;;1630           ffps++;
;;;1631       }
;;;1632   }
00003a  bd10              POP      {r4,pc}
                  |L14.60|
00003c  ed940a19          VLDR     s0,[r4,#0x64]         ;1630
000040  eef70a00          VMOV.F32 s1,#1.00000000        ;1630
000044  ee300a20          VADD.F32 s0,s0,s1              ;1630
000048  ed840a19          VSTR     s0,[r4,#0x64]         ;1630
00004c  bd10              POP      {r4,pc}
;;;1633   
                          ENDP

00004e  0000              DCW      0x0000
                  |L14.80|
                          DCD      ||.data||
                  |L14.84|
                          DCD      0x453b8000
                  |L14.88|
000058  00000000          DCFS     0x00000000 ; 0

                          AREA ||i._decide_age_group_enable||, CODE, READONLY, ALIGN=2

                  _decide_age_group_enable PROC
;;;956    
;;;957    BOOL _decide_age_group_enable(void)
000000  b510              PUSH     {r4,lr}
;;;958    {
;;;959        if ((kdp_e2e_prop_get2(flow_mode) > FLOW_MODE_SIM_VIRTUAL))
000002  f7fffffe          BL       kdp_e2e_prop_get_inst
000006  68c0              LDR      r0,[r0,#0xc]
000008  2801              CMP      r0,#1
00000a  d80f              BHI      |L15.44|
;;;960            return TRUE;
;;;961    
;;;962        if(FACE_MODE_ADD != m_face_mode) return FALSE;
00000c  4808              LDR      r0,|L15.48|
00000e  7a81              LDRB     r1,[r0,#0xa]  ; m_face_mode
000010  2901              CMP      r1,#1
000012  d109              BNE      |L15.40|
;;;963        
;;;964        if ((m_face_add_mode == FACE_ADD_MODE_5_FACES && m_api_fdfr_ctx.reg_idx == 0) ||
000014  7880              LDRB     r0,[r0,#2]  ; m_face_add_mode
000016  2802              CMP      r0,#2
000018  d002              BEQ      |L15.32|
;;;965            (m_face_add_mode == FACE_ADD_MODE_1_FACE))
00001a  2801              CMP      r0,#1
00001c  d006              BEQ      |L15.44|
00001e  e003              B        |L15.40|
                  |L15.32|
000020  4803              LDR      r0,|L15.48|
000022  3074              ADDS     r0,r0,#0x74           ;964
000024  7a00              LDRB     r0,[r0,#8]            ;964  ; m_api_fdfr_ctx
000026  b108              CBZ      r0,|L15.44|
                  |L15.40|
;;;966            return TRUE;
;;;967    
;;;968        return FALSE;
000028  2000              MOVS     r0,#0
;;;969    }
00002a  bd10              POP      {r4,pc}
                  |L15.44|
00002c  2001              MOVS     r0,#1                 ;966
00002e  bd10              POP      {r4,pc}
;;;970    
                          ENDP

                  |L15.48|
                          DCD      ||.data||

                          AREA ||i._decide_check_bad_pose_enable||, CODE, READONLY, ALIGN=2

                  _decide_check_bad_pose_enable PROC
;;;998    
;;;999    s32 _decide_check_bad_pose_enable(void)
000000  4811              LDR      r0,|L16.72|
;;;1000   {
000002  b510              PUSH     {r4,lr}
;;;1001       if ((m_face_mode == FACE_MODE_RECOGNITION) ||
000004  7a81              LDRB     r1,[r0,#0xa]  ; m_face_mode
000006  2902              CMP      r1,#2
000008  d008              BEQ      |L16.28|
;;;1002           (m_face_mode == FACE_MODE_LIVENESS)    ||
00000a  2903              CMP      r1,#3
00000c  d006              BEQ      |L16.28|
;;;1003           (m_face_mode == FACE_MODE_COMPARE_1VS1)    ||
00000e  2905              CMP      r1,#5
000010  d004              BEQ      |L16.28|
;;;1004           (m_face_mode == FACE_MODE_RECOGNITION_TEST))
000012  2904              CMP      r1,#4
000014  d002              BEQ      |L16.28|
;;;1005           return 1;
;;;1006   
;;;1007   
;;;1008       if (m_face_mode == FACE_MODE_ADD)
000016  2901              CMP      r1,#1
000018  d002              BEQ      |L16.32|
00001a  e006              B        |L16.42|
                  |L16.28|
00001c  2001              MOVS     r0,#1                 ;1005
;;;1009       {
;;;1010           if (m_face_add_mode == FACE_ADD_MODE_5_FACES) {
;;;1011               if( m_api_fdfr_ctx.reg_idx == 0 )  return 2; //face reg
;;;1012       #if ( KL520_FACE_ADD_BMP == YES )
;;;1013               else {
;;;1014                   s32 bp = 0x40 | face_add_bitmap;
;;;1015                   return bp;
;;;1016               }
;;;1017       #else
;;;1018               else return 3;
;;;1019       #endif
;;;1020           }
;;;1021           if (m_face_add_mode == FACE_ADD_MODE_1_FACE)
;;;1022               return 2;
;;;1023       }
;;;1024   
;;;1025       if ((kdp_e2e_prop_get2(flow_mode) > FLOW_MODE_SIM_VIRTUAL))
;;;1026           return 0;
;;;1027       
;;;1028       return 0;
;;;1029   }
00001e  bd10              POP      {r4,pc}
                  |L16.32|
000020  7881              LDRB     r1,[r0,#2]            ;1010  ; m_face_add_mode
000022  2902              CMP      r1,#2                 ;1010
000024  d006              BEQ      |L16.52|
000026  2901              CMP      r1,#1                 ;1021
000028  d00c              BEQ      |L16.68|
                  |L16.42|
00002a  f7fffffe          BL       kdp_e2e_prop_get_inst
00002e  68c0              LDR      r0,[r0,#0xc]          ;1025
000030  2000              MOVS     r0,#0                 ;1028
000032  bd10              POP      {r4,pc}
                  |L16.52|
000034  4904              LDR      r1,|L16.72|
000036  3174              ADDS     r1,r1,#0x74           ;1011
000038  7a09              LDRB     r1,[r1,#8]            ;1011  ; m_api_fdfr_ctx
00003a  b119              CBZ      r1,|L16.68|
00003c  7b00              LDRB     r0,[r0,#0xc]          ;1014  ; face_add_bitmap
00003e  f0400040          ORR      r0,r0,#0x40           ;1014
000042  bd10              POP      {r4,pc}
                  |L16.68|
000044  2002              MOVS     r0,#2                 ;1022
000046  bd10              POP      {r4,pc}
;;;1030   
                          ENDP

                  |L16.72|
                          DCD      ||.data||

                          AREA ||i._decide_face_check_move_enable||, CODE, READONLY, ALIGN=2

                  _decide_face_check_move_enable PROC
;;;1057   
;;;1058   BOOL _decide_face_check_move_enable(void)
000000  b510              PUSH     {r4,lr}
;;;1059   {
;;;1060       if ((kdp_e2e_prop_get2(flow_mode) > FLOW_MODE_SIM_VIRTUAL))
000002  f7fffffe          BL       kdp_e2e_prop_get_inst
000006  68c0              LDR      r0,[r0,#0xc]
000008  2801              CMP      r0,#1
00000a  d80d              BHI      |L17.40|
;;;1061           return FALSE;
;;;1062   
;;;1063       if (m_face_mode == FACE_MODE_ADD) 
00000c  4808              LDR      r0,|L17.48|
00000e  7a81              LDRB     r1,[r0,#0xa]  ; m_face_mode
000010  2901              CMP      r1,#1
000012  d109              BNE      |L17.40|
;;;1064       {
;;;1065           if ((m_face_add_mode == FACE_ADD_MODE_5_FACES && m_api_fdfr_ctx.reg_idx == 0)
000014  7880              LDRB     r0,[r0,#2]  ; m_face_add_mode
000016  2802              CMP      r0,#2
000018  d002              BEQ      |L17.32|
;;;1066               || (m_face_add_mode == FACE_ADD_MODE_1_FACE))
00001a  2801              CMP      r0,#1
00001c  d006              BEQ      |L17.44|
00001e  e003              B        |L17.40|
                  |L17.32|
000020  4803              LDR      r0,|L17.48|
000022  3074              ADDS     r0,r0,#0x74           ;1065
000024  7a00              LDRB     r0,[r0,#8]            ;1065  ; m_api_fdfr_ctx
000026  b108              CBZ      r0,|L17.44|
                  |L17.40|
;;;1067               return TRUE;
;;;1068       }
;;;1069   
;;;1070       return FALSE;
000028  2000              MOVS     r0,#0
;;;1071   }
00002a  bd10              POP      {r4,pc}
                  |L17.44|
00002c  2001              MOVS     r0,#1                 ;1067
00002e  bd10              POP      {r4,pc}
;;;1072   
                          ENDP

                  |L17.48|
                          DCD      ||.data||

                          AREA ||i._decide_face_check_position_enable||, CODE, READONLY, ALIGN=2

                  _decide_face_check_position_enable PROC
;;;1072   
;;;1073   BOOL _decide_face_check_position_enable(void)
000000  b510              PUSH     {r4,lr}
;;;1074   {
;;;1075       if ((kdp_e2e_prop_get2(flow_mode) > FLOW_MODE_SIM_VIRTUAL))
000002  f7fffffe          BL       kdp_e2e_prop_get_inst
000006  68c0              LDR      r0,[r0,#0xc]
000008  2801              CMP      r0,#1
00000a  d803              BHI      |L18.20|
;;;1076           return FALSE;
;;;1077   
;;;1078       if (m_face_mode == FACE_MODE_ADD)
00000c  4802              LDR      r0,|L18.24|
00000e  7a80              LDRB     r0,[r0,#0xa]  ; m_face_mode
000010  2801              CMP      r0,#1
000012  d000              BEQ      |L18.22|
                  |L18.20|
;;;1079           return TRUE;
;;;1080   
;;;1081       return FALSE;
000014  2000              MOVS     r0,#0
                  |L18.22|
;;;1082   }
000016  bd10              POP      {r4,pc}
;;;1083   
                          ENDP

                  |L18.24|
                          DCD      ||.data||

                          AREA ||i._decide_liveness_enable||, CODE, READONLY, ALIGN=2

                  _decide_liveness_enable PROC
;;;933    
;;;934    BOOL _decide_liveness_enable(void)
000000  b510              PUSH     {r4,lr}
;;;935    {
;;;936        if ((kdp_e2e_prop_get2(flow_mode) > FLOW_MODE_SIM_MODELS))
000002  f7fffffe          BL       kdp_e2e_prop_get_inst
000006  68c0              LDR      r0,[r0,#0xc]
000008  2802              CMP      r0,#2
00000a  d812              BHI      |L19.50|
;;;937            return FALSE;
;;;938        
;;;939        if (m_face_mode == FACE_MODE_BUSY) return TRUE; //in case of face close...
00000c  490d              LDR      r1,|L19.68|
00000e  7a88              LDRB     r0,[r1,#0xa]  ; m_face_mode
000010  2808              CMP      r0,#8
000012  d015              BEQ      |L19.64|
;;;940            
;;;941        if ((m_face_add_mode == FACE_ADD_MODE_5_FACES && m_api_fdfr_ctx.reg_idx == 0) ||
000014  7889              LDRB     r1,[r1,#2]  ; m_face_add_mode
000016  2902              CMP      r1,#2
000018  d00d              BEQ      |L19.54|
;;;942            (m_face_add_mode == FACE_ADD_MODE_1_FACE) ||
00001a  2901              CMP      r1,#1
00001c  d010              BEQ      |L19.64|
                  |L19.30|
;;;943    #if KL520_REC_EYEMODE == YES
;;;944            (m_face_mode == FACE_MODE_RECOGNITION && get_eye_mode_status() == 0 ) ||
;;;945    #else
;;;946            (m_face_mode == FACE_MODE_RECOGNITION) ||
00001e  2802              CMP      r0,#2
000020  d00e              BEQ      |L19.64|
;;;947    #endif
;;;948            (m_face_mode == FACE_MODE_LIVENESS)    ||
000022  2803              CMP      r0,#3
000024  d00c              BEQ      |L19.64|
;;;949            (m_face_mode == FACE_MODE_RECOGNITION_TEST) ||
000026  2804              CMP      r0,#4
000028  d00a              BEQ      |L19.64|
;;;950            (m_face_mode == FACE_MODE_COMPARE_1VS1)    ||
00002a  2805              CMP      r0,#5
00002c  d008              BEQ      |L19.64|
;;;951            (m_face_mode == FACE_MODE_ENG_CAL))
00002e  2806              CMP      r0,#6
000030  d006              BEQ      |L19.64|
                  |L19.50|
;;;952            return TRUE;
;;;953    
;;;954        return FALSE;
000032  2000              MOVS     r0,#0
;;;955    }
000034  bd10              POP      {r4,pc}
                  |L19.54|
000036  4903              LDR      r1,|L19.68|
000038  3174              ADDS     r1,r1,#0x74           ;941
00003a  7a09              LDRB     r1,[r1,#8]            ;941  ; m_api_fdfr_ctx
00003c  2900              CMP      r1,#0                 ;941
00003e  d1ee              BNE      |L19.30|
                  |L19.64|
000040  2001              MOVS     r0,#1                 ;952
000042  bd10              POP      {r4,pc}
;;;956    
                          ENDP

                  |L19.68|
                          DCD      ||.data||

                          AREA ||i._decide_motion_detect_enable||, CODE, READONLY, ALIGN=2

                  _decide_motion_detect_enable PROC
;;;970    
;;;971    BOOL _decide_motion_detect_enable(void)
000000  b510              PUSH     {r4,lr}
;;;972    {
;;;973        if ((kdp_e2e_prop_get2(flow_mode) > FLOW_MODE_SIM_VIRTUAL))
000002  f7fffffe          BL       kdp_e2e_prop_get_inst
000006  68c0              LDR      r0,[r0,#0xc]
000008  2801              CMP      r0,#1
00000a  d80c              BHI      |L20.38|
;;;974            return FALSE;
;;;975        if( (m_face_add_mode == FACE_ADD_MODE_1_FACE) ||
00000c  4808              LDR      r0,|L20.48|
00000e  7881              LDRB     r1,[r0,#2]  ; m_face_add_mode
000010  2901              CMP      r1,#1
000012  d00a              BEQ      |L20.42|
;;;976            (m_face_mode == FACE_MODE_RECOGNITION)    ||
000014  7a80              LDRB     r0,[r0,#0xa]  ; m_face_mode
000016  2802              CMP      r0,#2
000018  d007              BEQ      |L20.42|
;;;977            (m_face_mode == FACE_MODE_LIVENESS)       ||
00001a  2803              CMP      r0,#3
00001c  d005              BEQ      |L20.42|
;;;978            (m_face_mode == FACE_MODE_COMPARE_1VS1)    ||
00001e  2805              CMP      r0,#5
000020  d003              BEQ      |L20.42|
;;;979            (m_face_mode == FACE_MODE_RECOGNITION_TEST))
000022  2804              CMP      r0,#4
000024  d001              BEQ      |L20.42|
                  |L20.38|
;;;980            return TRUE;
;;;981    
;;;982        return FALSE;
000026  2000              MOVS     r0,#0
;;;983    }
000028  bd10              POP      {r4,pc}
                  |L20.42|
00002a  2001              MOVS     r0,#1                 ;980
00002c  bd10              POP      {r4,pc}
;;;984    
                          ENDP

00002e  0000              DCW      0x0000
                  |L20.48|
                          DCD      ||.data||

                          AREA ||i._decide_nir_aec_continuous_tune_enable||, CODE, READONLY, ALIGN=2

                  _decide_nir_aec_continuous_tune_enable PROC
;;;1030   
;;;1031   BOOL _decide_nir_aec_continuous_tune_enable(void)
000000  b510              PUSH     {r4,lr}
;;;1032   {
;;;1033       if ((kdp_e2e_prop_get2(flow_mode) > FLOW_MODE_SIM_VIRTUAL))
000002  f7fffffe          BL       kdp_e2e_prop_get_inst
000006  68c0              LDR      r0,[r0,#0xc]
000008  2801              CMP      r0,#1
00000a  d80e              BHI      |L21.42|
;;;1034           return FALSE;
;;;1035   
;;;1036       if ((m_face_add_mode == FACE_ADD_MODE_5_FACES) ||
00000c  4909              LDR      r1,|L21.52|
00000e  7888              LDRB     r0,[r1,#2]  ; m_face_add_mode
000010  2802              CMP      r0,#2
000012  d00c              BEQ      |L21.46|
;;;1037           (m_face_add_mode == FACE_ADD_MODE_1_FACE)  ||
000014  2801              CMP      r0,#1
000016  d00a              BEQ      |L21.46|
;;;1038           (m_face_mode == FACE_MODE_RECOGNITION)     ||
000018  7a88              LDRB     r0,[r1,#0xa]  ; m_face_mode
00001a  2802              CMP      r0,#2
00001c  d007              BEQ      |L21.46|
;;;1039           (m_face_mode == FACE_MODE_LIVENESS)        ||
00001e  2803              CMP      r0,#3
000020  d005              BEQ      |L21.46|
;;;1040           (m_face_mode == FACE_MODE_COMPARE_1VS1)    ||
000022  2805              CMP      r0,#5
000024  d003              BEQ      |L21.46|
;;;1041           (m_face_mode == FACE_MODE_RECOGNITION_TEST))
000026  2804              CMP      r0,#4
000028  d001              BEQ      |L21.46|
                  |L21.42|
;;;1042           return TRUE;
;;;1043   
;;;1044       return FALSE;
00002a  2000              MOVS     r0,#0
;;;1045   }
00002c  bd10              POP      {r4,pc}
                  |L21.46|
00002e  2001              MOVS     r0,#1                 ;1042
000030  bd10              POP      {r4,pc}
;;;1046   
                          ENDP

000032  0000              DCW      0x0000
                  |L21.52|
                          DCD      ||.data||

                          AREA ||i._decide_nose_lm_diff_detect_enable||, CODE, READONLY, ALIGN=2

                  _decide_nose_lm_diff_detect_enable PROC
;;;984    
;;;985    BOOL _decide_nose_lm_diff_detect_enable(void)
000000  b510              PUSH     {r4,lr}
;;;986    {
;;;987        if ((kdp_e2e_prop_get2(flow_mode) > FLOW_MODE_SIM_MODELS))
000002  f7fffffe          BL       kdp_e2e_prop_get_inst
000006  68c0              LDR      r0,[r0,#0xc]
000008  2802              CMP      r0,#2
00000a  d809              BHI      |L22.32|
;;;988            return FALSE;
;;;989    
;;;990        if ((m_face_mode == FACE_MODE_RECOGNITION) ||
00000c  4806              LDR      r0,|L22.40|
00000e  7a80              LDRB     r0,[r0,#0xa]  ; m_face_mode
000010  2802              CMP      r0,#2
000012  d007              BEQ      |L22.36|
;;;991            (m_face_mode == FACE_MODE_LIVENESS)    ||
000014  2803              CMP      r0,#3
000016  d005              BEQ      |L22.36|
;;;992            (m_face_mode == FACE_MODE_COMPARE_1VS1)    ||
000018  2805              CMP      r0,#5
00001a  d003              BEQ      |L22.36|
;;;993            (m_face_mode == FACE_MODE_RECOGNITION_TEST))
00001c  2804              CMP      r0,#4
00001e  d001              BEQ      |L22.36|
                  |L22.32|
;;;994            return TRUE;
;;;995    
;;;996        return FALSE;
000020  2000              MOVS     r0,#0
;;;997    }
000022  bd10              POP      {r4,pc}
                  |L22.36|
000024  2001              MOVS     r0,#1                 ;994
000026  bd10              POP      {r4,pc}
;;;998    
                          ENDP

                  |L22.40|
                          DCD      ||.data||

                          AREA ||i._decide_rgb_led_when_reg_enable||, CODE, READONLY, ALIGN=2

                  _decide_rgb_led_when_reg_enable PROC
;;;1046   
;;;1047   BOOL _decide_rgb_led_when_reg_enable(void)
000000  b510              PUSH     {r4,lr}
;;;1048   {
;;;1049       if ((kdp_e2e_prop_get2(flow_mode) > FLOW_MODE_SIM_VIRTUAL))
000002  f7fffffe          BL       kdp_e2e_prop_get_inst
000006  68c0              LDR      r0,[r0,#0xc]
000008  2801              CMP      r0,#1
00000a  d803              BHI      |L23.20|
;;;1050           return FALSE;
;;;1051   
;;;1052       if (m_face_mode == FACE_MODE_ADD)
00000c  4802              LDR      r0,|L23.24|
00000e  7a80              LDRB     r0,[r0,#0xa]  ; m_face_mode
000010  2801              CMP      r0,#1
000012  d000              BEQ      |L23.22|
                  |L23.20|
;;;1053           return TRUE;
;;;1054   
;;;1055       return FALSE;
000014  2000              MOVS     r0,#0
                  |L23.22|
;;;1056   }
000016  bd10              POP      {r4,pc}
;;;1057   
                          ENDP

                  |L23.24|
                          DCD      ||.data||

                          AREA ||i._fdfr_recognition_note_check||, CODE, READONLY, ALIGN=2

                  _fdfr_recognition_note_check PROC
;;;2064   
;;;2065   u8 _fdfr_recognition_note_check(void)
000000  b510              PUSH     {r4,lr}
;;;2066   {
;;;2067       static uint32_t nofaceTime = 0;
;;;2068     
;;;2069       if( ABS( (s32)(osKernelGetTickCount() - nofaceTime) ) < 100){ return FDFR_STATUS_NORMAL;}
000002  f7fffffe          BL       osKernelGetTickCount
000006  4c1a              LDR      r4,|L24.112|
000008  6ee1              LDR      r1,[r4,#0x6c]  ; nofaceTime
00000a  1a40              SUBS     r0,r0,r1
00000c  d404              BMI      |L24.24|
00000e  f7fffffe          BL       osKernelGetTickCount
000012  6ee1              LDR      r1,[r4,#0x6c]  ; nofaceTime
000014  1a40              SUBS     r0,r0,r1
000016  e003              B        |L24.32|
                  |L24.24|
000018  f7fffffe          BL       osKernelGetTickCount
00001c  6ee1              LDR      r1,[r4,#0x6c]  ; nofaceTime
00001e  1a08              SUBS     r0,r1,r0
                  |L24.32|
000020  2864              CMP      r0,#0x64
000022  db23              BLT      |L24.108|
;;;2070       else{ nofaceTime = osKernelGetTickCount();} 
000024  f7fffffe          BL       osKernelGetTickCount
;;;2071       
;;;2072       if((dp_draw_info.e2e_pos.x == 0 && dp_draw_info.e2e_pos.y == 0) ||
000028  4912              LDR      r1,|L24.116|
00002a  66e0              STR      r0,[r4,#0x6c]  ; nofaceTime
00002c  6f48              LDR      r0,[r1,#0x74]         ;2070  ; dp_draw_info
00002e  b908              CBNZ     r0,|L24.52|
000030  6f88              LDR      r0,[r1,#0x78]  ; dp_draw_info
000032  b1a8              CBZ      r0,|L24.96|
                  |L24.52|
;;;2073           ((dp_draw_info.e2e_ret & E2E_ERROR_FD_MODEL) == E2E_ERROR_FD_MODEL))
000034  4810              LDR      r0,|L24.120|
000036  6e8a              LDR      r2,[r1,#0x68]  ; dp_draw_info
000038  4390              BICS     r0,r0,r2
00003a  d011              BEQ      |L24.96|
;;;2074       {
;;;2075           return  FDFR_STATUS_NOFACE;
;;;2076       }
;;;2077       if( dp_draw_info.e2e_mask_type != FDFR_STATUS_NORMAL)
00003c  f891007d          LDRB     r0,[r1,#0x7d]  ; dp_draw_info
000040  281c              CMP      r0,#0x1c
000042  d10c              BNE      |L24.94|
;;;2078       {
;;;2079           return  dp_draw_info.e2e_mask_type;
;;;2080       }
;;;2081   #if (FACE_REG_CHECK_POSITION == YES)
;;;2082       if(dp_draw_info.e2e_pos_type != FDFR_STATUS_NORMAL )
000044  f8910070          LDRB     r0,[r1,#0x70]  ; dp_draw_info
000048  281c              CMP      r0,#0x1c
00004a  d108              BNE      |L24.94|
;;;2083       {   
;;;2084           return  dp_draw_info.e2e_pos_type;
;;;2085       }
;;;2086   #endif
;;;2087   #ifdef FACE_REG_CHECK_EYE
;;;2088       if(dp_draw_info.e2e_eye_type != FDFR_STATUS_NORMAL)
00004c  f891007c          LDRB     r0,[r1,#0x7c]  ; dp_draw_info
000050  281c              CMP      r0,#0x1c
000052  d104              BNE      |L24.94|
000054  f7fffffe          BL       kdp_e2e_util_get_person_to_camera_distance
000058  2878              CMP      r0,#0x78
00005a  d903              BLS      |L24.100|
00005c  200d              MOVS     r0,#0xd
                  |L24.94|
;;;2089       {
;;;2090           return  dp_draw_info.e2e_eye_type;
;;;2091       }
;;;2092   #endif
;;;2093   
;;;2094       u32 dist_type = _api_fdfr_check_dist();
;;;2095       if (dist_type != FDFR_STATUS_NORMAL ) {
;;;2096           return dist_type;
;;;2097       }
;;;2098       
;;;2099       return FDFR_STATUS_NORMAL;
;;;2100   }
00005e  bd10              POP      {r4,pc}
                  |L24.96|
000060  2005              MOVS     r0,#5                 ;2075
000062  bd10              POP      {r4,pc}
                  |L24.100|
000064  280a              CMP      r0,#0xa
000066  d201              BCS      |L24.108|
000068  200e              MOVS     r0,#0xe
00006a  bd10              POP      {r4,pc}
                  |L24.108|
00006c  201c              MOVS     r0,#0x1c              ;2099
00006e  bd10              POP      {r4,pc}
;;;2101   
                          ENDP

                  |L24.112|
                          DCD      ||.data||
                  |L24.116|
                          DCD      ||.bss||
                  |L24.120|
                          DCD      0x80001100

                          AREA ||i._kl520_api_face_preexecute||, CODE, READONLY, ALIGN=2

                  _kl520_api_face_preexecute PROC
;;;646    
;;;647    s32 _kl520_api_face_preexecute(short x, short y, short w, short h)
000000  b570              PUSH     {r4-r6,lr}
;;;648    {
000002  461d              MOV      r5,r3
000004  4616              MOV      r6,r2
;;;649        s32 ret = 0;
;;;650    
;;;651        if(kdp_e2e_prop_get2(flow_mode) < FLOW_MODE_SIM_VIRTUAL)
000006  f7fffffe          BL       kdp_e2e_prop_get_inst
00000a  68c0              LDR      r0,[r0,#0xc]
00000c  b918              CBNZ     r0,|L25.22|
;;;652            ret = kl520_api_face_preexecute_stage1();
00000e  f7fffffe          BL       kl520_api_face_preexecute_stage1
000012  0004              MOVS     r4,r0
000014  d119              BNE      |L25.74|
                  |L25.22|
;;;653    
;;;654        if (0 == ret)
;;;655        {
;;;656            if(kdp_e2e_prop_get2(flow_mode) < FLOW_MODE_SIM_VIRTUAL)
000016  f7fffffe          BL       kdp_e2e_prop_get_inst
00001a  68c0              LDR      r0,[r0,#0xc]
00001c  b918              CBNZ     r0,|L25.38|
;;;657                ret = kl520_api_face_preexecute_stage2();
00001e  f7fffffe          BL       kl520_api_face_preexecute_stage2
000022  0004              MOVS     r4,r0
000024  d111              BNE      |L25.74|
                  |L25.38|
;;;658    
;;;659            if (0 == ret)
;;;660            {
;;;661    //            ret = kl520_api_dp_open((u32)w, (u32)h);
;;;662                kl520_api_disp_resolution_set(w, h);
000026  4629              MOV      r1,r5
000028  4630              MOV      r0,r6
00002a  f7fffffe          BL       kl520_api_disp_resolution_set
;;;663    //            ret = kl520_api_disp_open_chk();
;;;664                ret = kl520_api_cam_disp_ctrl(API_CTRL_DISP_OPEN, NULL, PERMANENT_NULL);
00002e  2200              MOVS     r2,#0
000030  4611              MOV      r1,r2
000032  20c0              MOVS     r0,#0xc0
000034  f7fffffe          BL       kl520_api_cam_disp_ctrl
000038  0004              MOVS     r4,r0
;;;665    
;;;666                if(ret != 0)
00003a  d001              BEQ      |L25.64|
;;;667                {
;;;668                    return 0;
00003c  2000              MOVS     r0,#0
;;;669                }
;;;670    
;;;671                kl520_api_dp_layout_enable();
;;;672                kl520_api_ui_fsm_dp_layout_enable();
;;;673            }
;;;674        }
;;;675    #if CFG_ONE_SHOT_MODE == YES
;;;676        if(kdp_e2e_get_dual_cam_state() == DUAL_IDENTICAL_CAM_CLOSED)
;;;677            kdp_e2e_set_dual_cam_state(DUAL_IDENTICAL_CAM_INITED);
;;;678    #endif
;;;679        return ret;
;;;680    }
00003e  bd70              POP      {r4-r6,pc}
                  |L25.64|
000040  f7fffffe          BL       kl520_api_dp_layout_enable
000044  4905              LDR      r1,|L25.92|
000046  2001              MOVS     r0,#1                 ;671
000048  73c8              STRB     r0,[r1,#0xf]          ;671
                  |L25.74|
00004a  f7fffffe          BL       kdp_e2e_get_dual_cam_state
00004e  b910              CBNZ     r0,|L25.86|
000050  2001              MOVS     r0,#1                 ;677
000052  f7fffffe          BL       kdp_e2e_set_dual_cam_state
                  |L25.86|
000056  4620              MOV      r0,r4                 ;679
000058  bd70              POP      {r4-r6,pc}
;;;681    #if (KL520_QUICK_BOOT == NO)
                          ENDP

00005a  0000              DCW      0x0000
                  |L25.92|
                          DCD      ||.data||

                          AREA ||i._kl520_api_fdfr_add||, CODE, READONLY, ALIGN=2

                  _kl520_api_fdfr_add PROC
;;;1361   ///////////////////////////
;;;1362   static int _kl520_api_fdfr_add(u8 user_id, u8 fmap_idx)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1363   {
;;;1364       int ret = KL520_FACE_OK;
;;;1365   
;;;1366       #if CFG_FMAP_AP_CTRL_TYPE > EX_FM_DISABLE
;;;1367       int reserve_db_num = kl520_api_face_get_reserve_db_num();
000004  4d15              LDR      r5,|L26.92|
000006  4680              MOV      r8,r0                 ;1363
000008  460f              MOV      r7,r1                 ;1363
00000a  78e8              LDRB     r0,[r5,#3]  ; m_face_db_add_mode
00000c  2600              MOVS     r6,#0                 ;1364
00000e  b108              CBZ      r0,|L26.20|
000010  2401              MOVS     r4,#1
000012  e000              B        |L26.22|
                  |L26.20|
000014  2400              MOVS     r4,#0
                  |L26.22|
;;;1368       #else
;;;1369       int reserve_db_num = 0;
;;;1370       #endif
;;;1371   
;;;1372       int e2e_ret1 = kdp_e2e_db_register((u16)user_id, (u16)fmap_idx, reserve_db_num);
000016  4622              MOV      r2,r4
000018  4640              MOV      r0,r8
00001a  f7fffffe          BL       kdp_e2e_db_register
;;;1373   
;;;1374       if(e2e_ret1 != E2E_OK) {
00001e  b110              CBZ      r0,|L26.38|
;;;1375           dbg_msg_api("db register failed:%d.", e2e_ret1);
;;;1376           return KL520_FACE_FAIL;
000020  2002              MOVS     r0,#2
                  |L26.34|
;;;1377       }
;;;1378   
;;;1379   	BOOL db_wo_flash = FALSE;
;;;1380   	if( m_face_db_add_mode == FACE_ADD_MODE_NO_DB )	db_wo_flash = TRUE;
;;;1381   
;;;1382       if (FACE_ADD_MODE_1_FACE == m_face_add_mode) {
;;;1383   
;;;1384           int e2e_ret2 = kdp_e2e_db_add(user_id, db_wo_flash, reserve_db_num );
;;;1385   
;;;1386           dbg_msg_api("[face_add_mode:%u] user_id=%x e2e_ret1=%d e2e_ret=%d", m_face_add_mode, user_id, e2e_ret1, e2e_ret2);
;;;1387           if (E2E_OK == e2e_ret2) {
;;;1388               dbg_msg_algo("[registration] : -- OK!");
;;;1389               ret = KL520_FACE_OK;
;;;1390           }
;;;1391           else {
;;;1392               dbg_msg_api("[registration] : -- ERROR!, e2e_ret2=%x", e2e_ret2);
;;;1393               ret = KL520_FACE_FAIL;
;;;1394           }
;;;1395       }
;;;1396       else if (FACE_ADD_MODE_5_FACES == m_face_add_mode) {
;;;1397           if ( fmap_idx-1 == FACE_ADD_TYPE_DOWN )
;;;1398           {
;;;1399   
;;;1400               int e2e_ret2 = kdp_e2e_db_add(user_id, db_wo_flash, reserve_db_num );
;;;1401   
;;;1402               dbg_msg_algo("[face_add_mode:%u] user_id=%x e2e_ret1=%d e2e_ret2=%d", m_face_add_mode, user_id, e2e_ret1, e2e_ret2);
;;;1403               if (E2E_OK == e2e_ret2) {
;;;1404                   dbg_msg_algo("[registration] : -- OK!");
;;;1405                   ret = KL520_FACE_OK;
;;;1406               }
;;;1407               else {
;;;1408                   dbg_msg_api("[registration] : -- ERROR!, e2e_ret2=%x", e2e_ret2);
;;;1409                   ret = KL520_FACE_FAIL;
;;;1410               }
;;;1411           }
;;;1412       }
;;;1413       else{
;;;1414           dbg_msg_console("[registration] : -- ERROR!, ");
;;;1415       }
;;;1416   
;;;1417       return ret;
;;;1418   }
000022  e8bd81f0          POP      {r4-r8,pc}
                  |L26.38|
000026  78e8              LDRB     r0,[r5,#3]            ;1380  ; m_face_db_add_mode
000028  2100              MOVS     r1,#0                 ;1379
00002a  2801              CMP      r0,#1                 ;1380
00002c  d100              BNE      |L26.48|
00002e  2101              MOVS     r1,#1                 ;1380
                  |L26.48|
000030  78a8              LDRB     r0,[r5,#2]            ;1382  ; m_face_add_mode
000032  2801              CMP      r0,#1                 ;1382
000034  d009              BEQ      |L26.74|
000036  2802              CMP      r0,#2                 ;1396
000038  d005              BEQ      |L26.70|
00003a  a109              ADR      r1,|L26.96|
00003c  2001              MOVS     r0,#1                 ;1414
00003e  f7fffffe          BL       kdp_level_printf
                  |L26.66|
000042  4630              MOV      r0,r6                 ;1417
000044  e7ed              B        |L26.34|
                  |L26.70|
000046  2f05              CMP      r7,#5                 ;1397
000048  d1fb              BNE      |L26.66|
                  |L26.74|
00004a  4622              MOV      r2,r4                 ;1400
00004c  4640              MOV      r0,r8                 ;1400
00004e  f7fffffe          BL       kdp_e2e_db_add
000052  2800              CMP      r0,#0                 ;1403
000054  d0f5              BEQ      |L26.66|
000056  2602              MOVS     r6,#2                 ;1409
000058  e7f3              B        |L26.66|
;;;1419   
                          ENDP

00005a  0000              DCW      0x0000
                  |L26.92|
                          DCD      ||.data||
                  |L26.96|
000060  5b726567          DCB      "[registration] : -- ERROR!, \r\n",0
000064  69737472
000068  6174696f
00006c  6e5d203a
000070  202d2d20
000074  4552524f
000078  52212c20
00007c  0d0a00  
00007f  00                DCB      0

                          AREA ||i._kl520_api_fdfr_only||, CODE, READONLY, ALIGN=2

                  _kl520_api_fdfr_only PROC
;;;1083   
;;;1084   static int _kl520_api_fdfr_only(s32 *e2e_result)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1085   {
;;;1086       s32 ret = KL520_FACE_FAIL;
;;;1087       s32 e2e_ret = E2E_OK;
000002  2600              MOVS     r6,#0
000004  4605              MOV      r5,r0                 ;1085
000006  2402              MOVS     r4,#2                 ;1086
;;;1088       dbg_msg_algo ("\n\n\nstart fdfr only....\n");
;;;1089   
;;;1090       kdp_e2e_prop_set2(liveness_en, _decide_liveness_enable());
000008  9600              STR      r6,[sp,#0]
00000a  f7fffffe          BL       _decide_liveness_enable
00000e  4607              MOV      r7,r0
000010  f7fffffe          BL       kdp_e2e_prop_get_inst
000014  7007              STRB     r7,[r0,#0]
;;;1091       kdp_e2e_prop_set2(age_group_en, _decide_age_group_enable());
000016  f7fffffe          BL       _decide_age_group_enable
00001a  4607              MOV      r7,r0
00001c  f7fffffe          BL       kdp_e2e_prop_get_inst
000020  f8807180          STRB     r7,[r0,#0x180]
;;;1092       kdp_e2e_prop_set2(motion_detect_en, _decide_motion_detect_enable());
000024  f7fffffe          BL       _decide_motion_detect_enable
000028  4607              MOV      r7,r0
00002a  f7fffffe          BL       kdp_e2e_prop_get_inst
00002e  7047              STRB     r7,[r0,#1]
;;;1093       kdp_e2e_prop_set2(nose_lm_diff_en, _decide_nose_lm_diff_detect_enable());
000030  f7fffffe          BL       _decide_nose_lm_diff_detect_enable
000034  4607              MOV      r7,r0
000036  f7fffffe          BL       kdp_e2e_prop_get_inst
00003a  7087              STRB     r7,[r0,#2]
;;;1094       kdp_e2e_prop_set2(check_bad_pose, _decide_check_bad_pose_enable());
00003c  f7fffffe          BL       _decide_check_bad_pose_enable
000040  4607              MOV      r7,r0
000042  f7fffffe          BL       kdp_e2e_prop_get_inst
;;;1095       kdp_e2e_prop_set2(nir_aec_continuous_tune_en, _decide_nir_aec_continuous_tune_enable());
000046  6047              STR      r7,[r0,#4]
000048  f7fffffe          BL       _decide_nir_aec_continuous_tune_enable
00004c  4607              MOV      r7,r0
00004e  f7fffffe          BL       kdp_e2e_prop_get_inst
000052  7207              STRB     r7,[r0,#8]
;;;1096       kdp_e2e_prop_set2(rgb_led_when_reg_en, _decide_rgb_led_when_reg_enable());
000054  f7fffffe          BL       _decide_rgb_led_when_reg_enable
000058  4607              MOV      r7,r0
00005a  f7fffffe          BL       kdp_e2e_prop_get_inst
00005e  7247              STRB     r7,[r0,#9]
;;;1097       kdp_e2e_prop_set2(face_check_movement_en, _decide_face_check_move_enable());
000060  f7fffffe          BL       _decide_face_check_move_enable
000064  4607              MOV      r7,r0
000066  f7fffffe          BL       kdp_e2e_prop_get_inst
00006a  7287              STRB     r7,[r0,#0xa]
;;;1098       kdp_e2e_prop_set2(face_check_position, _decide_face_check_position_enable());
00006c  f7fffffe          BL       _decide_face_check_position_enable
000070  4607              MOV      r7,r0
000072  f7fffffe          BL       kdp_e2e_prop_get_inst
000076  72c7              STRB     r7,[r0,#0xb]
;;;1099   
;;;1100   #if CFG_AI_TYPE == AI_TYPE_N1 && CFG_E2E_STRUCT_LIGHT == YES
;;;1101       kdp_e2e_face_variables *vars = kdp_e2e_get_face_variables();
;;;1102       nir_led_mode led_status = (nir_led_mode)vars->nir_led_status;
;;;1103   #endif
;;;1104   
;;;1105   
;;;1106       if( kdp_e2e_prop_get2(flow_mode) == FLOW_MODE_SIM_PRE_ADD)
000078  f7fffffe          BL       kdp_e2e_prop_get_inst
00007c  68c0              LDR      r0,[r0,#0xc]
00007e  2804              CMP      r0,#4
000080  d00c              BEQ      |L27.156|
;;;1107       {
;;;1108   #if ( CFG_LW3D_TYPE == CFG_LW3D_NORMAL && CFG_AI_TYPE != AI_TYPE_N1 )
;;;1109           e2e_ret = kdp_e2e_face_r1_only();
;;;1110   #endif
;;;1111       }
;;;1112       else
;;;1113       {
;;;1114       
;;;1115   #if CFG_AI_TYPE == AI_TYPE_R1
;;;1116       e2e_ret = kdp_e2e_face_r1_only();
;;;1117   #elif CFG_AI_TYPE == AI_TYPE_R1N1
;;;1118       e2e_ret = kdp_e2e_face_r1n1();
;;;1119   #elif CFG_AI_TYPE == AI_TYPE_N1
;;;1120   
;;;1121       if(b_en_aec_only == true)
;;;1122       {
;;;1123           e2e_ret = kdp_e2e_ctrl_aec();
;;;1124       }
;;;1125       else
;;;1126       {
;;;1127           e2e_ret = kdp_e2e_face_n1_only();
;;;1128       }     
;;;1129   #elif CFG_AI_TYPE == AI_TYPE_N1R1
;;;1130   #if CFG_PALM_PRINT_MODE == 1
;;;1131       if(kdp_is_palm_mode())
;;;1132       {
;;;1133           kdp_e2e_aec_brightness_stats_set_block( BRIGHTNESS_STATS_X_BLOCK_SIZE, BRIGHTNESS_STATS_Y_BLOCK_SIZE, BRIGHTNESS_STATS_STEP );
;;;1134           e2e_ret = kdp_e2e_palm_r1();
;;;1135       }
;;;1136       else
;;;1137   #endif
;;;1138       {
;;;1139           e2e_ret = kdp_e2e_face_n1r1();
000082  f7fffffe          BL       kdp_e2e_face_n1r1
000086  9000              STR      r0,[sp,#0]
                  |L27.136|
;;;1140       }
;;;1141   #endif
;;;1142   
;;;1143       }
;;;1144   
;;;1145       //dbg_msg_console("e2e_ret=%x", e2e_ret);
;;;1146   
;;;1147       *e2e_result = e2e_ret;
;;;1148   
;;;1149   //#if (KL520_API_SHOW_BOUNDINGBOX == YES)
;;;1150       if (E2E_OK != e2e_ret)
000088  6028              STR      r0,[r5,#0]
;;;1151       {
;;;1152           if ((m_face_mode == FACE_MODE_RECOGNITION) || (m_face_mode == FACE_MODE_LIVENESS))
00008a  4d4e              LDR      r5,|L27.452|
00008c  9900              LDR      r1,[sp,#0]            ;1150
00008e  b1a9              CBZ      r1,|L27.188|
000090  7aa8              LDRB     r0,[r5,#0xa]  ; m_face_mode
000092  2802              CMP      r0,#2
000094  d004              BEQ      |L27.160|
000096  2803              CMP      r0,#3
000098  d002              BEQ      |L27.160|
00009a  e006              B        |L27.170|
                  |L27.156|
00009c  9800              LDR      r0,[sp,#0]            ;1139
00009e  e7f3              B        |L27.136|
                  |L27.160|
;;;1153               _kl520_api_util_collection(&dp_draw_info, e2e_ret);
0000a0  4849              LDR      r0,|L27.456|
0000a2  f7fffffe          BL       _kl520_api_util_collection
0000a6  9800              LDR      r0,[sp,#0]
0000a8  b140              CBZ      r0,|L27.188|
                  |L27.170|
;;;1154       }
;;;1155   //#endif
;;;1156       //dbg_msg_console("e2e_ret = 0x%x" , e2e_ret);
;;;1157   #if (USE_SCORE_JUDGEMENT == YES && CFG_AI_TYPE != AI_TYPE_R1 /*&& CFG_AI_TYPE != AI_TYPE_N1*/)
;;;1158       if (E2E_OK == e2e_ret) {
;;;1159           vote_score = 0;
;;;1160           ret = KL520_FACE_OK;
;;;1161       }
;;;1162       else if(E2E_ERROR_R1_FACE_MASK == e2e_ret || E2E_ERROR_N1_FACE_MASK == e2e_ret){
0000aa  4948              LDR      r1,|L27.460|
0000ac  9800              LDR      r0,[sp,#0]
0000ae  4288              CMP      r0,r1
0000b0  d002              BEQ      |L27.184|
0000b2  4947              LDR      r1,|L27.464|
0000b4  4288              CMP      r0,r1
0000b6  d104              BNE      |L27.194|
                  |L27.184|
;;;1163           dbg_msg_algo("KL520_FACE_MASK");
;;;1164           ret = KL520_FACE_MASK;
0000b8  2411              MOVS     r4,#0x11
0000ba  e077              B        |L27.428|
                  |L27.188|
0000bc  2400              MOVS     r4,#0                 ;1160
0000be  64ae              STR      r6,[r5,#0x48]         ;1160  ; vote_score
0000c0  e079              B        |L27.438|
                  |L27.194|
;;;1165       }
;;;1166       else if(E2E_ERROR_R1_EYE_CLOSED == e2e_ret || E2E_ERROR_N1_EYE_CLOSED == e2e_ret){
0000c2  4944              LDR      r1,|L27.468|
0000c4  4288              CMP      r0,r1
0000c6  d002              BEQ      |L27.206|
0000c8  4943              LDR      r1,|L27.472|
0000ca  4288              CMP      r0,r1
0000cc  d101              BNE      |L27.210|
                  |L27.206|
;;;1167           dbg_msg_algo("KL520_FACE_EYE_CLOSED");
;;;1168           ret = KL520_FACE_EYE_CLOSED;
0000ce  2413              MOVS     r4,#0x13
0000d0  e06c              B        |L27.428|
                  |L27.210|
;;;1169       }
;;;1170       else if(E2E_ERROR_R1_FACE_QUALTY == e2e_ret || E2E_ERROR_N1_FACE_QUALTY == e2e_ret || 
0000d2  4942              LDR      r1,|L27.476|
0000d4  4288              CMP      r0,r1
0000d6  d00a              BEQ      |L27.238|
0000d8  4941              LDR      r1,|L27.480|
0000da  4288              CMP      r0,r1
0000dc  d007              BEQ      |L27.238|
;;;1171               E2E_ERROR_R1_FACE_QUALTY_2 == e2e_ret || E2E_ERROR_N1_FACE_QUALTY_2 == e2e_ret ) {
0000de  493f              LDR      r1,|L27.476|
0000e0  1d09              ADDS     r1,r1,#4
0000e2  4288              CMP      r0,r1
0000e4  d003              BEQ      |L27.238|
0000e6  493e              LDR      r1,|L27.480|
0000e8  1d09              ADDS     r1,r1,#4
0000ea  4288              CMP      r0,r1
0000ec  d101              BNE      |L27.242|
                  |L27.238|
;;;1172           dbg_msg_algo("E2E_ERROR_R1_FACE_QUALTY");
;;;1173           ret = KL520_FACE_LOW_QUALITY;
0000ee  2419              MOVS     r4,#0x19
0000f0  e05c              B        |L27.428|
                  |L27.242|
;;;1174       }
;;;1175       else if(E2E_ERROR_N1_LM_MOTION_CHK == e2e_ret && _decide_face_check_move_enable()) {
0000f2  4939              LDR      r1,|L27.472|
0000f4  3970              SUBS     r1,r1,#0x70
0000f6  4288              CMP      r0,r1
0000f8  d104              BNE      |L27.260|
0000fa  f7fffffe          BL       _decide_face_check_move_enable
0000fe  b108              CBZ      r0,|L27.260|
;;;1176           dbg_msg_algo("E2E_ERROR_N1_LM_MOTION_CHK");
;;;1177           ret = KL520_FACE_WAIT_DONT_MOVE;
000100  240e              MOVS     r4,#0xe
000102  e051              B        |L27.424|
                  |L27.260|
;;;1178       }
;;;1179       else if(e2e_ret == E2E_FACE_TOO_FAR || e2e_ret == E2E_FACE_TOO_NEAR) {
000104  9800              LDR      r0,[sp,#0]
000106  2802              CMP      r0,#2
000108  d007              BEQ      |L27.282|
00010a  2801              CMP      r0,#1
00010c  d007              BEQ      |L27.286|
;;;1180           dbg_msg_algo("E2E_ERROR_FACE_DIST");
;;;1181           if(e2e_ret == E2E_FACE_TOO_FAR) ret = KL520_FACE_TOO_FAR;
;;;1182           else ret = KL520_FACE_TOO_NEAR;
;;;1183       }
;;;1184       else if(e2e_ret >= E2E_FACE_TOO_UP && e2e_ret <= E2E_FACE_TOO_RIGHT) {
00010e  1ec1              SUBS     r1,r0,#3
000110  2903              CMP      r1,#3
000112  d806              BHI      |L27.290|
000114  f1000412          ADD      r4,r0,#0x12
;;;1185           dbg_msg_algo("E2E_ERROR_FACE_POSITION");
;;;1186           ret = KL520_FACE_TOOUP + (e2e_ret - E2E_FACE_TOO_UP);
000118  e046              B        |L27.424|
                  |L27.282|
00011a  240c              MOVS     r4,#0xc               ;1181
00011c  e046              B        |L27.428|
                  |L27.286|
00011e  240d              MOVS     r4,#0xd               ;1182
000120  e044              B        |L27.428|
                  |L27.290|
;;;1187       }
;;;1188       else if(E2E_ERROR_R1_LM_BAD_POSE == e2e_ret && _decide_check_bad_pose_enable() > 1) {
000122  492c              LDR      r1,|L27.468|
000124  3960              SUBS     r1,r1,#0x60
000126  4288              CMP      r0,r1
000128  d105              BNE      |L27.310|
00012a  f7fffffe          BL       _decide_check_bad_pose_enable
00012e  2801              CMP      r0,#1
000130  dd01              BLE      |L27.310|
;;;1189           dbg_msg_algo("E2E_ERROR_R1_LM_BAD_POSE");
;;;1190           ret = KL520_FACE_BADPOSE;
000132  240a              MOVS     r4,#0xa
000134  e038              B        |L27.424|
                  |L27.310|
;;;1191       }
;;;1192       else {
;;;1193           if (m_face_mode == FACE_MODE_RECOGNITION || m_face_mode == FACE_MODE_ENG_CAL || m_face_mode == FACE_MODE_LIVENESS) {
000136  7aa8              LDRB     r0,[r5,#0xa]  ; m_face_mode
000138  2802              CMP      r0,#2
00013a  d006              BEQ      |L27.330|
00013c  2806              CMP      r0,#6
00013e  d004              BEQ      |L27.330|
000140  2803              CMP      r0,#3
000142  d002              BEQ      |L27.330|
;;;1194               
;;;1195   #if CFG_AI_TYPE == AI_TYPE_R1
;;;1196               s32 tmp_vote_score = kdp_e2e_face_r1n1_invalid_score(&e2e_ret);
;;;1197   #elif CFG_AI_TYPE == AI_TYPE_R1N1
;;;1198               s32 tmp_vote_score = kdp_e2e_face_r1n1_invalid_score(&e2e_ret);
;;;1199   #elif CFG_AI_TYPE == AI_TYPE_N1
;;;1200               s32 tmp_vote_score = kdp_e2e_face_n1_only_invalid_score(&e2e_ret); 
;;;1201   #elif CFG_AI_TYPE == AI_TYPE_N1R1
;;;1202               s32 tmp_vote_score = kdp_e2e_face_r1n1_invalid_score(&e2e_ret);
;;;1203   #endif
;;;1204               
;;;1205               dbg_msg_algo("tmp_vote_score=%d", tmp_vote_score);
;;;1206               if (tmp_vote_score   & E2E_INVALID) {
;;;1207                   ret = KL520_FACE_DETECTED;
;;;1208               }
;;;1209               else {
;;;1210                   vote_score += tmp_vote_score;
;;;1211                   dbg_msg_algo("vote_score=%d", vote_score);
;;;1212               }
;;;1213   
;;;1214               if (vote_score >= KL520_FACE_SCORE_MAX) {
;;;1215                   
;;;1216                   if(m_face_mode == FACE_MODE_ENG_CAL) { ret = KL520_FACE_CALLIB_FAIL;}
;;;1217                   else{ ret = KL520_FACE_INVALID;}
;;;1218               }
;;;1219           } else if (m_face_mode == FACE_MODE_ADD) {
000144  2801              CMP      r0,#1
000146  d014              BEQ      |L27.370|
000148  e02e              B        |L27.424|
                  |L27.330|
00014a  4668              MOV      r0,sp                 ;1202
00014c  f7fffffe          BL       kdp_e2e_face_r1n1_invalid_score
000150  0181              LSLS     r1,r0,#6              ;1206
000152  d502              BPL      |L27.346|
000154  2410              MOVS     r4,#0x10              ;1207
000156  6ca8              LDR      r0,[r5,#0x48]         ;1207  ; vote_score
000158  e002              B        |L27.352|
                  |L27.346|
00015a  6ca9              LDR      r1,[r5,#0x48]         ;1210  ; vote_score
00015c  4408              ADD      r0,r0,r1              ;1210
00015e  64a8              STR      r0,[r5,#0x48]         ;1210  ; vote_score
                  |L27.352|
000160  2850              CMP      r0,#0x50              ;1214
000162  db21              BLT      |L27.424|
000164  7aa8              LDRB     r0,[r5,#0xa]          ;1216  ; m_face_mode
000166  2806              CMP      r0,#6                 ;1216
000168  d001              BEQ      |L27.366|
00016a  240b              MOVS     r4,#0xb               ;1217
00016c  e01c              B        |L27.424|
                  |L27.366|
00016e  241b              MOVS     r4,#0x1b              ;1216
000170  e01a              B        |L27.424|
                  |L27.370|
;;;1220               if( (e2e_ret == E2E_ERROR_N1_LV_MODEL) || 
000172  491c              LDR      r1,|L27.484|
000174  9800              LDR      r0,[sp,#0]
000176  4288              CMP      r0,r1
000178  d00b              BEQ      |L27.402|
;;;1221                   (e2e_ret == E2E_ERROR_N1_HSN_LV_MODEL) || 
00017a  491b              LDR      r1,|L27.488|
00017c  4288              CMP      r0,r1
00017e  d008              BEQ      |L27.402|
;;;1222                   (e2e_ret == E2E_ERROR_N1_EYE_LV_MODEL) || 
000180  491a              LDR      r1,|L27.492|
000182  4288              CMP      r0,r1
000184  d005              BEQ      |L27.402|
;;;1223                   (e2e_ret == E2E_ERROR_FU_LV_MODEL) ||
000186  491a              LDR      r1,|L27.496|
000188  4288              CMP      r0,r1
00018a  d002              BEQ      |L27.402|
;;;1224                   (e2e_ret == E2E_ERROR_CV_LV_MODEL) ) {
00018c  4919              LDR      r1,|L27.500|
00018e  4288              CMP      r0,r1
000190  d101              BNE      |L27.406|
                  |L27.402|
;;;1225                   dbg_msg_algo("E2E_ERROR_FACE_ATTACK");
;;;1226                   ret = KL520_FACE_ATTACK;
000192  241e              MOVS     r4,#0x1e
000194  e008              B        |L27.424|
                  |L27.406|
;;;1227               }
;;;1228               else if ((e2e_ret == E2E_ERROR_R1_FD_MODEL)
000196  490d              LDR      r1,|L27.460|
000198  31c0              ADDS     r1,r1,#0xc0
00019a  4288              CMP      r0,r1
00019c  d003              BEQ      |L27.422|
;;;1229                       || (e2e_ret == E2E_ERROR_N1_FD_MODEL))
00019e  490c              LDR      r1,|L27.464|
0001a0  31c0              ADDS     r1,r1,#0xc0
0001a2  4288              CMP      r0,r1
0001a4  d100              BNE      |L27.424|
                  |L27.422|
;;;1230               {
;;;1231                   ret = KL520_FACE_NOFACE;
0001a6  2404              MOVS     r4,#4
                  |L27.424|
;;;1232               }
;;;1233               
;;;1234           }
;;;1235   #if (E2E_N1_ONLY_STRUCTURE_ENABLE == YES)
;;;1236           else if (m_face_mode == FACE_MODE_LIVENESS) {
;;;1237               if (e2e_ret == E2E_ERROR_N1_S_LV_MODEL) { ret = KL520_FACE_INVALID;}
;;;1238           }
;;;1239   #endif
;;;1240       }
;;;1241       if (E2E_OK != e2e_ret)
0001a8  9800              LDR      r0,[sp,#0]
0001aa  b120              CBZ      r0,|L27.438|
                  |L27.428|
;;;1242           dbg_msg_console("e2e_ret: 0x%08x", e2e_ret);
0001ac  4602              MOV      r2,r0
0001ae  a112              ADR      r1,|L27.504|
0001b0  2001              MOVS     r0,#1
0001b2  f7fffffe          BL       kdp_level_printf
                  |L27.438|
;;;1243       else
;;;1244           dbg_msg_algo("e2e_ret: 0x%08x", e2e_ret);
;;;1245       
;;;1246   #else
;;;1247       if (E2E_OK == e2e_ret) {
;;;1248           ret = KL520_FACE_OK;
;;;1249       }
;;;1250   #endif
;;;1251   
;;;1252       if(kl520_api_sim_is_running() == TRUE)
0001b6  f7fffffe          BL       kl520_api_sim_is_running
0001ba  2801              CMP      r0,#1
0001bc  d100              BNE      |L27.448|
;;;1253       {
;;;1254           ret = e2e_ret;
0001be  9c00              LDR      r4,[sp,#0]
                  |L27.448|
;;;1255       }
;;;1256   
;;;1257   #if CFG_AI_TYPE == AI_TYPE_N1 && CFG_E2E_STRUCT_LIGHT == YES
;;;1258       if( ( led_status == IR_LIGHT && E2E_ENVIR != e2e_ret && get_usb_catch_image_log() == 1 ) \
;;;1259        || ( led_status == STR_LIGHT && E2E_OK != e2e_ret && get_usb_catch_image_log() == 2 ) )
;;;1260           kl520_api_snapshot_adv_shot_after_fdfr_element(); // liveness failed or IR failed
;;;1261   #endif
;;;1262   
;;;1263   #if CFG_SNAPSHOT_ENABLE == 1 || CFG_SNAPSHOT_ENABLE == 2
;;;1264       dp_draw_info.e2e_ret = e2e_ret;
;;;1265       kl520_api_snapshot_adv_shot_cont(e2e_ret);
;;;1266   #endif
;;;1267   
;;;1268       return ret;
0001c0  4620              MOV      r0,r4
;;;1269   }
0001c2  bdf8              POP      {r3-r7,pc}
;;;1270   
                          ENDP

                  |L27.452|
                          DCD      ||.data||
                  |L27.456|
                          DCD      ||.bss||
                  |L27.460|
                          DCD      0x80101040
                  |L27.464|
                          DCD      0x80201040
                  |L27.468|
                          DCD      0x80102080
                  |L27.472|
                          DCD      0x80202080
                  |L27.476|
                          DCD      0x80100004
                  |L27.480|
                          DCD      0x80200004
                  |L27.484|
                          DCD      0x80020100
                  |L27.488|
                          DCD      0x80030100
                  |L27.492|
                          DCD      0x80050100
                  |L27.496|
                          DCD      0x80040100
                  |L27.500|
                          DCD      0x80008100
                  |L27.504|
0001f8  6532655f          DCB      "e2e_ret: 0x%08x\r\n",0
0001fc  7265743a
000200  20307825
000204  3038780d
000208  0a00    
00020a  00                DCB      0
00020b  00                DCB      0

                          AREA ||i._kl520_api_fdfr_try_create_thread||, CODE, READONLY, ALIGN=1

                  _kl520_api_fdfr_try_create_thread PROC
;;;691    
;;;692    static BOOL _kl520_api_fdfr_try_create_thread(void)
000000  b510              PUSH     {r4,lr}
000002  f7fffffe          BL       kdp_is_abort_flag
;;;693    {
;;;694        if(kl520_is_fdfr_abort() != 0) { //abort is ongoing
000006  b108              CBZ      r0,|L28.12|
;;;695            return false;
000008  2000              MOVS     r0,#0
;;;696        } else {
;;;697            kl520_api_fdfr_start();
;;;698            return true;
;;;699        }
;;;700    }
00000a  bd10              POP      {r4,pc}
                  |L28.12|
00000c  f7fffffe          BL       kl520_api_fdfr_start
000010  2001              MOVS     r0,#1                 ;698
000012  bd10              POP      {r4,pc}
;;;701    
                          ENDP


                          AREA ||i._kl520_api_util_collection||, CODE, READONLY, ALIGN=2

                  _kl520_api_util_collection PROC
;;;894    
;;;895    static void _kl520_api_util_collection(kl520_dp_draw_info *lp_draw_info, u32 e2e_ret)
000000  b57f              PUSH     {r0-r6,lr}
;;;896    {
000002  460e              MOV      r6,r1
000004  4604              MOV      r4,r0
;;;897        s32 x, y, w, h;
;;;898        kdp_e2e_prop *prop = kdp_e2e_prop_get_inst();
000006  f7fffffe          BL       kdp_e2e_prop_get_inst
00000a  4605              MOV      r5,r0
;;;899        memcpy(&lp_draw_info->r1_rc, &prop->r1_rc, sizeof(prop->r1_rc));
00000c  f8d00112          LDR      r0,[r0,#0x112]
000010  6020              STR      r0,[r4,#0]
000012  f8d50116          LDR      r0,[r5,#0x116]
000016  6060              STR      r0,[r4,#4]
;;;900        memcpy(&lp_draw_info->n1_rc, &prop->n1_rc, sizeof(prop->n1_rc));
000018  f8d5011a          LDR      r0,[r5,#0x11a]
00001c  60a0              STR      r0,[r4,#8]
00001e  f8d5011e          LDR      r0,[r5,#0x11e]
000022  60e0              STR      r0,[r4,#0xc]
;;;901        memcpy(&lp_draw_info->r1_pt_array, &prop->r1_pt_array, sizeof(prop->r1_pt_array));
000024  2228              MOVS     r2,#0x28
000026  f5057192          ADD      r1,r5,#0x124
00002a  f1040010          ADD      r0,r4,#0x10
00002e  f7fffffe          BL       __aeabi_memcpy4
;;;902        memcpy(&lp_draw_info->n1_pt_array, &prop->n1_pt_array, sizeof(prop->n1_pt_array));
000032  2228              MOVS     r2,#0x28
000034  f50571a6          ADD      r1,r5,#0x14c
000038  f1040038          ADD      r0,r4,#0x38
00003c  f7fffffe          BL       __aeabi_memcpy4
;;;903        lp_draw_info->e2e_ret = e2e_ret;
;;;904        
;;;905        lp_draw_info->r1_lm_score = kdp_e2e_get_r1_lm()->score;
000040  66a6              STR      r6,[r4,#0x68]
000042  f7fffffe          BL       kdp_e2e_get_r1_lm
000046  ed900a14          VLDR     s0,[r0,#0x50]
00004a  ed840a18          VSTR     s0,[r4,#0x60]
;;;906        lp_draw_info->n1_lm_score = kdp_e2e_get_n1_lm()->score;
00004e  f7fffffe          BL       kdp_e2e_get_n1_lm
000052  ed900a14          VLDR     s0,[r0,#0x50]
;;;907    
;;;908        if( kdp_e2e_util_get_person_position(&x, &y, &w, &h) == 1) {
000056  ab01              ADD      r3,sp,#4
000058  ed840a19          VSTR     s0,[r4,#0x64]         ;906
00005c  466a              MOV      r2,sp
00005e  a903              ADD      r1,sp,#0xc
000060  a802              ADD      r0,sp,#8
000062  f7fffffe          BL       kdp_e2e_util_get_person_position
;;;909            lp_draw_info->e2e_pos.x = (u32)x;
;;;910            lp_draw_info->e2e_pos.y = (u32)y;
;;;911    #if (FACE_REG_CHECK_POSITION == YES)
;;;912            lp_draw_info->e2e_pos_type = _api_fdfr_ckeck_position_xy(x, y, w, h);
;;;913    #endif
;;;914    #if (CFG_E2E_REC_NOTE == YES) || (KL520_REC_EYEMODE == YES)
;;;915            lp_draw_info->e2e_eye_type = _api_fdfr_check_eye();
;;;916    #endif
;;;917        }
;;;918        else {
;;;919            lp_draw_info->e2e_pos.x = 0;
;;;920            lp_draw_info->e2e_pos.y = 0;
;;;921            lp_draw_info->e2e_pos_type = FDFR_STATUS_NORMAL;
000066  251c              MOVS     r5,#0x1c
000068  2801              CMP      r0,#1                 ;908
00006a  d010              BEQ      |L29.142|
00006c  2000              MOVS     r0,#0                 ;919
00006e  6760              STR      r0,[r4,#0x74]         ;920
000070  67a0              STR      r0,[r4,#0x78]
000072  f8845070          STRB     r5,[r4,#0x70]
;;;922            lp_draw_info->e2e_eye_type = FDFR_STATUS_NORMAL;
000076  f884507c          STRB     r5,[r4,#0x7c]
                  |L29.122|
;;;923        }
;;;924    
;;;925        //mask
;;;926        if(E2E_ERROR_R1_FACE_MASK == e2e_ret || E2E_ERROR_N1_FACE_MASK == e2e_ret) {
00007a  480e              LDR      r0,|L29.180|
00007c  4286              CMP      r6,r0
00007e  d002              BEQ      |L29.134|
000080  480d              LDR      r0,|L29.184|
000082  4286              CMP      r6,r0
000084  d112              BNE      |L29.172|
                  |L29.134|
;;;927            lp_draw_info->e2e_mask_type = FDFR_STATUS_MASK;
000086  2011              MOVS     r0,#0x11
000088  f884007d          STRB     r0,[r4,#0x7d]
;;;928        }
;;;929        else {
;;;930            lp_draw_info->e2e_mask_type = FDFR_STATUS_NORMAL;
;;;931        }
;;;932    }
00008c  bd7f              POP      {r0-r6,pc}
                  |L29.142|
00008e  9802              LDR      r0,[sp,#8]            ;909
000090  6760              STR      r0,[r4,#0x74]         ;910
000092  9903              LDR      r1,[sp,#0xc]          ;910
000094  67a1              STR      r1,[r4,#0x78]         ;910
000096  e9dd2300          LDRD     r2,r3,[sp,#0]         ;910
00009a  f7fffffe          BL       _api_fdfr_ckeck_position_xy
00009e  f8840070          STRB     r0,[r4,#0x70]         ;912
0000a2  f7fffffe          BL       _api_fdfr_check_eye
0000a6  f884007c          STRB     r0,[r4,#0x7c]         ;915
0000aa  e7e6              B        |L29.122|
                  |L29.172|
0000ac  f884507d          STRB     r5,[r4,#0x7d]         ;930
0000b0  bd7f              POP      {r0-r6,pc}
;;;933    
                          ENDP

0000b2  0000              DCW      0x0000
                  |L29.180|
                          DCD      0x80101040
                  |L29.184|
                          DCD      0x80201040

                          AREA ||i._kl520_app_calc_db_uid||, CODE, READONLY, ALIGN=2

                  _kl520_app_calc_db_uid PROC
;;;335    
;;;336    u8 _kl520_app_calc_db_uid(u8 db_idx)
000000  4902              LDR      r1,|L30.12|
;;;337    {
;;;338    #ifdef CUSTOMIZE_DB_OFFSET
;;;339    #ifdef CUSTOMIZE_OFFSET_FUNC
;;;340        //call customer's specific map func
;;;341    #else
;;;342        return db_idx + user_db_offset;
000002  7c09              LDRB     r1,[r1,#0x10]  ; user_db_offset
000004  4408              ADD      r0,r0,r1
000006  b2c0              UXTB     r0,r0
;;;343    #endif
;;;344    #else
;;;345        return db_idx + KDP_DB_DEFAULT_OFFSET;
;;;346    #endif
;;;347    }
000008  4770              BX       lr
;;;348    
                          ENDP

00000a  0000              DCW      0x0000
                  |L30.12|
                          DCD      ||.data||

                          AREA ||i._kl520_fdfr_drawing_timer_cb||, CODE, READONLY, ALIGN=2

                  _kl520_fdfr_drawing_timer_cb PROC
;;;1857   
;;;1858   static void _kl520_fdfr_drawing_timer_cb(void *argument)
000000  4901              LDR      r1,|L31.8|
;;;1859   {
;;;1860       kl520_fdfr_drawing_timer_flag = KL520_FACE_FAIL;
000002  2002              MOVS     r0,#2
000004  6448              STR      r0,[r1,#0x44]  ; kl520_fdfr_drawing_timer_flag
;;;1861   }
000006  4770              BX       lr
;;;1862   
                          ENDP

                  |L31.8|
                          DCD      ||.data||

                          AREA ||i._kl520_fdfr_drawing_timer_create||, CODE, READONLY, ALIGN=2

                  _kl520_fdfr_drawing_timer_create PROC
;;;1862   
;;;1863   static void _kl520_fdfr_drawing_timer_create(int face_status)
000000  b570              PUSH     {r4-r6,lr}
;;;1864   {
;;;1865   #ifndef FDFR_KEEP_MS_WHEN_FACE_CLOSED
;;;1866       osDelay(KL520_FDFR_KEEP_MS);
;;;1867   #else
;;;1868   #ifdef USE_FDFR_DRAWING_TIMER
;;;1869       if(FACE_MODE_RECOGNITION_TEST == m_face_mode)
000002  4c0f              LDR      r4,|L32.64|
000004  4605              MOV      r5,r0                 ;1864
000006  7aa0              LDRB     r0,[r4,#0xa]  ; m_face_mode
000008  2804              CMP      r0,#4
00000a  d114              BNE      |L32.54|
;;;1870       {
;;;1871           if (0 == kl520_fdfr_drawing_timer)
00000c  6c20              LDR      r0,[r4,#0x40]  ; kl520_fdfr_drawing_timer
00000e  b938              CBNZ     r0,|L32.32|
;;;1872               kl520_fdfr_drawing_timer = osTimerNew(_kl520_fdfr_drawing_timer_cb, osTimerOnce, NULL, NULL);
000010  2300              MOVS     r3,#0
000012  461a              MOV      r2,r3
000014  4619              MOV      r1,r3
000016  480b              LDR      r0,|L32.68|
000018  f7fffffe          BL       osTimerNew
00001c  6420              STR      r0,[r4,#0x40]  ; kl520_fdfr_drawing_timer
00001e  b150              CBZ      r0,|L32.54|
                  |L32.32|
;;;1873           if (kl520_fdfr_drawing_timer)
;;;1874           {
;;;1875               if(osTimerIsRunning(kl520_fdfr_drawing_timer))
000020  f7fffffe          BL       osTimerIsRunning
000024  b110              CBZ      r0,|L32.44|
;;;1876               {
;;;1877                   osTimerStop(kl520_fdfr_drawing_timer);
000026  6c20              LDR      r0,[r4,#0x40]  ; kl520_fdfr_drawing_timer
000028  f7fffffe          BL       osTimerStop
                  |L32.44|
;;;1878               }
;;;1879               osTimerStart(kl520_fdfr_drawing_timer, KL520_FDFR_KEEP_MS);
00002c  f44f7196          MOV      r1,#0x12c
000030  6c20              LDR      r0,[r4,#0x40]  ; kl520_fdfr_drawing_timer
000032  f7fffffe          BL       osTimerStart
                  |L32.54|
;;;1880           }
;;;1881       }
;;;1882       if(KL520_FACE_FAIL != face_status)
000036  2d02              CMP      r5,#2
000038  d000              BEQ      |L32.60|
;;;1883       {
;;;1884           kl520_fdfr_drawing_timer_flag = face_status;
00003a  6465              STR      r5,[r4,#0x44]  ; kl520_fdfr_drawing_timer_flag
                  |L32.60|
;;;1885       }
;;;1886   #endif
;;;1887   #endif
;;;1888   }
00003c  bd70              POP      {r4-r6,pc}
;;;1889   
                          ENDP

00003e  0000              DCW      0x0000
                  |L32.64|
                          DCD      ||.data||
                  |L32.68|
                          DCD      _kl520_fdfr_drawing_timer_cb

                          AREA ||i._tasks_init_cameras_thread||, CODE, READONLY, ALIGN=2

                  _tasks_init_cameras_thread PROC
;;;3934   
;;;3935   void _tasks_init_cameras_thread(void *arg)
000000  f7fffffe          BL       kl520_api_face_preexecute_stage1
;;;3936   {
;;;3937       kl520_api_face_preexecute_stage1();
;;;3938       kl520_api_face_preexecute_stage2();
000004  f7fffffe          BL       kl520_api_face_preexecute_stage2
;;;3939       kl520_api_face_preexecute_stage3();
;;;3940   #if (CFG_AI_TYPE != AI_TYPE_N1R1)
;;;3941       #if (CFG_SENSOR_TYPE == SENSOR_TYPE_GC1054_GC1054)
;;;3942       //tid_tasks_preexecute_colse_models = osThreadNew(_tasks_preexecute_colse_thread, NULL, &attr);
;;;3943       #else
;;;3944       {
;;;3945           osThreadAttr_t attr = {
;;;3946               .stack_size = 512
;;;3947           };
;;;3948           tid_tasks_preexecute_colse_models = osThreadNew(_tasks_preexecute_colse_thread, NULL, &attr);
;;;3949       }
;;;3950       #endif
;;;3951   #endif
;;;3952       tid_tasks_init_cameras = NULL;
000008  4902              LDR      r1,|L33.20|
00000a  2000              MOVS     r0,#0
;;;3953   
;;;3954       osThreadExit();
00000c  6548              STR      r0,[r1,#0x54]  ; tid_tasks_init_cameras
00000e  f7fffffe          BL       osThreadExit
;;;3955   }
;;;3956   
                          ENDP

000012  0000              DCW      0x0000
                  |L33.20|
                          DCD      ||.data||

                          AREA ||i._tasks_init_db||, CODE, READONLY, ALIGN=1

                  _tasks_init_db PROC
;;;3961   }
;;;3962   void _tasks_init_db(void)
000000  f7ffbffe          B.W      kdp_e2e_db_init_flash_load
;;;3963   {
;;;3964       kdp_e2e_db_init_flash_load();    
;;;3965   }
;;;3966   
                          ENDP


                          AREA ||i._tasks_init_flash_load_thread_each||, CODE, READONLY, ALIGN=2

                  _tasks_init_flash_load_thread_each PROC
;;;4036   
;;;4037   void _tasks_init_flash_load_thread_each(void)
000000  b5f0              PUSH     {r4-r7,lr}
;;;4038   {
000002  b089              SUB      sp,sp,#0x24
;;;4039       int cnt = 0;
000004  2400              MOVS     r4,#0
;;;4040   
;;;4041   #if ( CFG_MODELS_LOAD_BY_ORDER == YES )
;;;4042       kdp_model_info_reload();
000006  f7fffffe          BL       kdp_model_info_reload
00000a  f7fffffe          BL       kdp_e2e_db_init_flash_load
;;;4043   #else    
;;;4044       kdp_model_load_model(-1);
;;;4045   #endif
;;;4046       
;;;4047       _tasks_init_db();
;;;4048       
;;;4049       while( (kdp_e2e_face_init_done() == FALSE) ||
00000e  e005              B        |L35.28|
                  |L35.16|
;;;4050              (kdp_model_get_model_count() == 0) ) {
;;;4051           osDelay(10);
000010  200a              MOVS     r0,#0xa
000012  f7fffffe          BL       osDelay
;;;4052           if( cnt > 100 ) return;
000016  2c64              CMP      r4,#0x64
000018  dc45              BGT      |L35.166|
00001a  1c64              ADDS     r4,r4,#1
                  |L35.28|
00001c  f7fffffe          BL       kdp_e2e_face_init_done
000020  2800              CMP      r0,#0                 ;4049
000022  d0f5              BEQ      |L35.16|
000024  f7fffffe          BL       kdp_model_get_model_count
000028  2800              CMP      r0,#0                 ;4050
00002a  d0f1              BEQ      |L35.16|
00002c  2220              MOVS     r2,#0x20              ;4050
00002e  491f              LDR      r1,|L35.172|
000030  4668              MOV      r0,sp                 ;4050
000032  f7fffffe          BL       __aeabi_memcpy4
000036  2608              MOVS     r6,#8                 ;4050
000038  466f              MOV      r7,sp                 ;4050
00003a  2500              MOVS     r5,#0                 ;4050
                  |L35.60|
00003c  2400              MOVS     r4,#0                 ;4050
00003e  e009              B        |L35.84|
                  |L35.64|
000040  4620              MOV      r0,r4                 ;4050
000042  f7fffffe          BL       kdp_model_get_model_info
000046  f8571025          LDR      r1,[r7,r5,LSL #2]     ;4050
00004a  6800              LDR      r0,[r0,#0]            ;4050
00004c  4281              CMP      r1,r0                 ;4050
00004e  d005              BEQ      |L35.92|
000050  1c64              ADDS     r4,r4,#1              ;4050
000052  b2e4              UXTB     r4,r4                 ;4050
                  |L35.84|
000054  f7fffffe          BL       kdp_model_get_model_count
000058  42a0              CMP      r0,r4                 ;4050
00005a  dcf1              BGT      |L35.64|
                  |L35.92|
00005c  f7fffffe          BL       kdp_model_get_model_count
000060  42a0              CMP      r0,r4                 ;4050
000062  dd02              BLE      |L35.106|
000064  b260              SXTB     r0,r4                 ;4050
000066  f7fffffe          BL       kdp_model_load_model
                  |L35.106|
00006a  1c6d              ADDS     r5,r5,#1              ;4050
00006c  b2ed              UXTB     r5,r5                 ;4050
00006e  42b5              CMP      r5,r6                 ;4050
000070  d3e4              BCC      |L35.60|
;;;4053   
;;;4054           cnt++;
;;;4055       }
;;;4056   
;;;4057   #if CFG_PALM_PRINT_MODE == 1
;;;4058       if(kdp_is_palm_mode()) {
;;;4059           _kdp_load_palmprint_models();
;;;4060       }
;;;4061       else 
;;;4062   #endif
;;;4063       {
;;;4064           _kdp_load_face_models();
;;;4065       }
;;;4066   
;;;4067       // if array: mode_name_pool was not include whole models, load last models
;;;4068       for( u8 idx_model=0; idx_model < kdp_model_get_model_count(); idx_model++ ) {
000072  2400              MOVS     r4,#0
000074  e00e              B        |L35.148|
                  |L35.118|
;;;4069           if( kdp_model_load_flag( idx_model ) != 1 ) {
000076  4620              MOV      r0,r4
000078  f7fffffe          BL       kdp_model_load_flag
00007c  2801              CMP      r0,#1
00007e  d007              BEQ      |L35.144|
;;;4070               kdp_model_load_model( idx_model );
000080  b260              SXTB     r0,r4
000082  f7fffffe          BL       kdp_model_load_model
;;;4071               //report it
;;;4072               dbg_msg_console(  "model :%d is not fast loaded.", idx_model );
000086  4622              MOV      r2,r4
000088  a109              ADR      r1,|L35.176|
00008a  2001              MOVS     r0,#1
00008c  f7fffffe          BL       kdp_level_printf
                  |L35.144|
000090  1c64              ADDS     r4,r4,#1
000092  b2e4              UXTB     r4,r4                 ;4068
                  |L35.148|
000094  f7fffffe          BL       kdp_model_get_model_count
000098  42a0              CMP      r0,r4                 ;4068
00009a  dcec              BGT      |L35.118|
00009c  b009              ADD      sp,sp,#0x24           ;4068
00009e  e8bd40f0          POP      {r4-r7,lr}            ;4068
0000a2  f7ffbffe          B.W      user_ui_init
                  |L35.166|
;;;4073           }
;;;4074       }
;;;4075   
;;;4076       // final load ui and db
;;;4077       _tasks_init_ui();
;;;4078   }
0000a6  b009              ADD      sp,sp,#0x24
0000a8  bdf0              POP      {r4-r7,pc}
;;;4079   
                          ENDP

0000aa  0000              DCW      0x0000
                  |L35.172|
                          DCD      ||area_number.123||+0xac
                  |L35.176|
0000b0  6d6f6465          DCB      "model :%d is not fast loaded.\r\n",0
0000b4  6c203a25
0000b8  64206973
0000bc  206e6f74
0000c0  20666173
0000c4  74206c6f
0000c8  61646564
0000cc  2e0d0a00

                          AREA ||i._tasks_init_models_thread||, CODE, READONLY, ALIGN=2

                  _tasks_init_models_thread PROC
;;;4079   
;;;4080   void _tasks_init_models_thread(void *arg)
000000  f7fffffe          BL       kl520_api_fdfr_model_init
;;;4081   {
;;;4082       kl520_api_fdfr_model_init();       // Load model
;;;4083       tid_tasks_init_models = NULL;
000004  4902              LDR      r1,|L36.16|
000006  2000              MOVS     r0,#0
;;;4084   
;;;4085       osThreadExit();
000008  6588              STR      r0,[r1,#0x58]  ; tid_tasks_init_models
00000a  f7fffffe          BL       osThreadExit
;;;4086   }
;;;4087   
                          ENDP

00000e  0000              DCW      0x0000
                  |L36.16|
                          DCD      ||.data||

                          AREA ||i._tasks_init_ui||, CODE, READONLY, ALIGN=1

                  _tasks_init_ui PROC
;;;3956   
;;;3957   void _tasks_init_ui(void)
000000  f7ffbffe          B.W      user_ui_init
;;;3958   {   
;;;3959   	extern void user_ui_init(void);
;;;3960       user_ui_init();    
;;;3961   }
;;;3962   void _tasks_init_db(void)
                          ENDP


                          AREA ||i.api_fdfr_face_add_normal_face||, CODE, READONLY, ALIGN=2

                  api_fdfr_face_add_normal_face PROC
;;;2163   
;;;2164   static void api_fdfr_face_add_normal_face(struct api_fdfr_context *ctx, u8 reg_idx, u8 user_idx)
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;2165   {
;;;2166       dbg_msg_algo("FACE_ADD_TYPE_NORMAL");
;;;2167   
;;;2168   #ifdef COMPARE_BEFORE_ADD_DISABLE
;;;2169       u16 user_id = 0;
000004  2600              MOVS     r6,#0
000006  4691              MOV      r9,r2                 ;2165
000008  468a              MOV      r10,r1                ;2165
00000a  4607              MOV      r7,r0                 ;2165
00000c  f8ad6000          STRH     r6,[sp,#0]
;;;2170       u32 ret = 0; 
;;;2171       
;;;2172       if (kdp_e2e_prop_get2(face_mode) != FACE_MODE_ENG_CAL) {
000010  f7fffffe          BL       kdp_e2e_prop_get_inst
000014  6900              LDR      r0,[r0,#0x10]
;;;2173           float thres_arr[3] = {KL520_DEFAULT_DB_THR_ENVIR_DIFF_0, KL520_DEFAULT_DB_THR_ENVIR_DIFF_1, KL520_DEFAULT_DB_THR_ENVIR_DIFF_2};
;;;2174           if(get_enroll_overwrite_flag() == 0) {
;;;2175               ret = kdp_e2e_db_compare(&user_id, thres_arr);
;;;2176           } else {
;;;2177               ret = KAPP_DB_NO_MATCH;
;;;2178           }
;;;2179           if(ret == KAPP_DB_FAIL_ABORT) return;
;;;2180       } else {
;;;2181           ret = E2E_INVALID_CAL;
;;;2182       }
;;;2183       
;;;2184       if ((E2E_OK == ret) || (ret == E2E_STATUS_FR_MODEL_FLIP_0)) { //flip0 means less than threshold
000016  4d2d              LDR      r5,|L38.204|
000018  4c2d              LDR      r4,|L38.208|
;;;2185           dbg_msg_api("matched user_id = %d", user_id);
;;;2186           _kl520_fdfr_drawing_timer_create(KL520_FACE_EXIST);
;;;2187           ctx->state = FDFR_STATUS_EXIST;
;;;2188   			 //zcy add for return user id
;;;2189   				m_curr_user_id = user_id;
;;;2190   			
;;;2191           _api_fdfr_set_event(FLAGS_API_FDFR_ADD_EVT, KL520_APP_FLAG_FDFR_ERR, TRUE);
00001a  f44f7b00          MOV      r11,#0x200
00001e  2806              CMP      r0,#6                 ;2172
000020  d020              BEQ      |L38.100|
000022  4a2c              LDR      r2,|L38.212|
000024  ab01              ADD      r3,sp,#4              ;2173
000026  f2402809          MOV      r8,#0x209             ;2179
00002a  ca07              LDM      r2,{r0-r2}            ;2173
00002c  e8830007          STM      r3,{r0-r2}            ;2173
000030  7a20              LDRB     r0,[r4,#8]            ;2174  ; _enroll_overwrite_flag
000032  b9b8              CBNZ     r0,|L38.100|
000034  a901              ADD      r1,sp,#4              ;2175
000036  4668              MOV      r0,sp                 ;2175
000038  f7fffffe          BL       kdp_e2e_db_compare
00003c  4540              CMP      r0,r8                 ;2179
00003e  d00f              BEQ      |L38.96|
000040  b108              CBZ      r0,|L38.70|
000042  42a8              CMP      r0,r5                 ;2184
000044  d10e              BNE      |L38.100|
                  |L38.70|
000046  2007              MOVS     r0,#7                 ;2186
000048  f7fffffe          BL       _kl520_fdfr_drawing_timer_create
00004c  2004              MOVS     r0,#4                 ;2187
00004e  7038              STRB     r0,[r7,#0]            ;2187
000050  f8bd0000          LDRH     r0,[sp,#0]            ;2189
000054  7120              STRB     r0,[r4,#4]            ;2189
000056  2201              MOVS     r2,#1
000058  2102              MOVS     r1,#2
00005a  4658              MOV      r0,r11
00005c  f7fffffe          BL       _api_fdfr_set_event
                  |L38.96|
;;;2192           return; //exit
;;;2193       }
;;;2194       else
;;;2195   #endif
;;;2196       {
;;;2197           u8 user_id;
;;;2198   #if CFG_FMAP_AP_CTRL_TYPE > EX_FM_DISABLE
;;;2199           if( m_face_db_add_mode == FACE_ADD_MODE_NO_DB )
;;;2200           {
;;;2201               user_id = _kl520_app_calc_db_uid(MAX_USER);
;;;2202           }
;;;2203           else
;;;2204   #endif
;;;2205           {
;;;2206               user_id = _kl520_app_calc_db_uid(user_idx);
;;;2207               if(is_enroll_customize_uid() == 1) {
;;;2208                   //set valid, id, fm0, fm1
;;;2209                   kdp_app_db_set_last_register_id_preprocess(user_idx, FALSE );
;;;2210               }
;;;2211           }
;;;2212   
;;;2213           if (KL520_FACE_OK == _kl520_api_fdfr_add(user_id, reg_idx + 1)) { // fmap start from 1
;;;2214               m_curr_user_id = user_id;
;;;2215               if(FACE_ADD_MODE_1_FACE == m_face_add_mode)
;;;2216                   _kl520_fdfr_drawing_timer_create(KL520_FACE_OK);
;;;2217               ctx->state = FDFR_STATUS_OK;
;;;2218               fmap_index++;
;;;2219               _api_fdfr_set_event(FLAGS_API_FDFR_ADD_EVT, KL520_APP_FLAG_FDFR_OK, TRUE);
;;;2220   
;;;2221               face_reg_sts |= 0x01 << FACE_ADD_TYPE_NORMAL;
;;;2222   
;;;2223   #if ( KL520_FACE_ADD_BMP == YES )
;;;2224               face_succ_index = FACE_ADD_TYPE_NORMAL;
;;;2225   #endif
;;;2226   
;;;2227   #if (KL520_API_FACE_NORMAL_RST_TIMEOUT == YES)
;;;2228               _api_fdfr_rst_timeout();
;;;2229   #endif
;;;2230               return;
;;;2231           }
;;;2232       }
;;;2233       return;
;;;2234   }
000060  e8bd9fff          POP      {r0-r12,pc}
                  |L38.100|
000064  78e0              LDRB     r0,[r4,#3]            ;2199  ; m_face_db_add_mode
000066  2801              CMP      r0,#1                 ;2199
000068  d008              BEQ      |L38.124|
00006a  7c21              LDRB     r1,[r4,#0x10]         ;2206  ; user_db_offset
00006c  eb090001          ADD      r0,r9,r1              ;2206
000070  b2c5              UXTB     r5,r0                 ;2206
000072  f7fffffe          BL       is_enroll_customize_uid
000076  2801              CMP      r0,#1                 ;2207
000078  d004              BEQ      |L38.132|
00007a  e007              B        |L38.140|
                  |L38.124|
00007c  7c20              LDRB     r0,[r4,#0x10]         ;2201  ; user_db_offset
00007e  3064              ADDS     r0,r0,#0x64           ;2201
000080  b2c5              UXTB     r5,r0                 ;2201
000082  e003              B        |L38.140|
                  |L38.132|
000084  2100              MOVS     r1,#0                 ;2209
000086  4648              MOV      r0,r9                 ;2209
000088  f7fffffe          BL       kdp_app_db_set_last_register_id_preprocess
                  |L38.140|
00008c  f10a0001          ADD      r0,r10,#1             ;2213
000090  b2c1              UXTB     r1,r0                 ;2213
000092  4628              MOV      r0,r5                 ;2213
000094  f7fffffe          BL       _kl520_api_fdfr_add
000098  2800              CMP      r0,#0                 ;2213
00009a  d1e1              BNE      |L38.96|
00009c  7125              STRB     r5,[r4,#4]            ;2214
00009e  78a0              LDRB     r0,[r4,#2]            ;2215  ; m_face_add_mode
0000a0  2801              CMP      r0,#1                 ;2215
0000a2  d102              BNE      |L38.170|
0000a4  2000              MOVS     r0,#0                 ;2216
0000a6  f7fffffe          BL       _kl520_fdfr_drawing_timer_create
                  |L38.170|
0000aa  703e              STRB     r6,[r7,#0]            ;2217
0000ac  7ce0              LDRB     r0,[r4,#0x13]         ;2218  ; fmap_index
0000ae  2201              MOVS     r2,#1                 ;2219
0000b0  1c40              ADDS     r0,r0,#1              ;2218
0000b2  74e0              STRB     r0,[r4,#0x13]         ;2218
0000b4  4611              MOV      r1,r2                 ;2219
0000b6  4658              MOV      r0,r11                ;2219
0000b8  f7fffffe          BL       _api_fdfr_set_event
0000bc  6f20              LDR      r0,[r4,#0x70]         ;2221  ; face_reg_sts
0000be  f0400001          ORR      r0,r0,#1              ;2221
0000c2  6720              STR      r0,[r4,#0x70]         ;2224  ; face_reg_sts
0000c4  7466              STRB     r6,[r4,#0x11]         ;2224
0000c6  f7fffffe          BL       _api_fdfr_rst_timeout
0000ca  e7c9              B        |L38.96|
;;;2235   
                          ENDP

                  |L38.204|
                          DCD      0x20004100
                  |L38.208|
                          DCD      ||.data||
                  |L38.212|
                          DCD      ||area_number.123||+0x54

                          AREA ||i.api_fdfr_face_add_other_face||, CODE, READONLY, ALIGN=2

                  api_fdfr_face_add_other_face PROC
;;;2235   
;;;2236   static void api_fdfr_face_add_other_face(struct api_fdfr_context *ctx, u8 reg_idx, u8 user_idx)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;2237   {
000004  4605              MOV      r5,r0
;;;2238       //other pose,
;;;2239       dbg_msg_api("other pose, cal distance with normal face");
;;;2240       u8 user_id;
;;;2241       
;;;2242       u8 five_face_all_done = (0x01 << FACE_ADD_TYPE_NORMAL) | (0x01 << FACE_ADD_TYPE_LEFT) | (0x01 << FACE_ADD_TYPE_UP) \
;;;2243                               | (0x01 << FACE_ADD_TYPE_RIGHT) | (0x01 << FACE_ADD_TYPE_DOWN);
;;;2244   
;;;2245   #if CFG_FMAP_AP_CTRL_TYPE > EX_FM_DISABLE
;;;2246       if( m_face_db_add_mode == FACE_ADD_MODE_NO_DB )
000006  4823              LDR      r0,|L39.148|
000008  460f              MOV      r7,r1                 ;2237
00000a  4601              MOV      r1,r0
00000c  78c3              LDRB     r3,[r0,#3]  ; m_face_db_add_mode
00000e  261f              MOVS     r6,#0x1f              ;2242
;;;2247       {
;;;2248           user_id = _kl520_app_calc_db_uid(MAX_USER);
000010  7c09              LDRB     r1,[r1,#0x10]
000012  2b01              CMP      r3,#1                 ;2246
000014  d00c              BEQ      |L39.48|
;;;2249       }
;;;2250       else
;;;2251   #endif
;;;2252       {
;;;2253           user_id = _kl520_app_calc_db_uid(user_idx);
000016  4411              ADD      r1,r1,r2
                  |L39.24|
000018  f00108ff          AND      r8,r1,#0xff
;;;2254       }
;;;2255   
;;;2256       if ( (fmap_index != 0) &&
00001c  7cc1              LDRB     r1,[r0,#0x13]  ; fmap_index
;;;2257           (E2E_OK == kdp_e2e_db_compare_self( user_id, reg_idx, kl520_api_face_get_reserve_db_num()) ) )
;;;2258       {
;;;2259           dbg_msg_algo ("face add, self compare ok");
;;;2260           // 0: Don't write db; 1: Write db; 2: Write db and release mutex
;;;2261   //        if (((FACE_ADD_MODE_5_FACES == m_face_add_mode) && ( fmap_index == FACE_ADD_TYPE_DOWN ))
;;;2262   //            || (FACE_ADD_MODE_1_FACE == m_face_add_mode))
;;;2263   //        { }
;;;2264           {
;;;2265               if (KL520_FACE_OK == _kl520_api_fdfr_add(user_id, fmap_index + 1))
;;;2266               { // fmap start from 1
;;;2267                   m_curr_user_id = user_id;
;;;2268   
;;;2269                   face_reg_sts |= 0x01 << reg_idx;
;;;2270   
;;;2271       #if ( KL520_FACE_ADD_BMP == YES )
;;;2272                   face_succ_index = reg_idx;
;;;2273       #endif
;;;2274                   
;;;2275                   //dbg_msg_algo("adding face:%d, %d, %x.", ret_idx, reg_idx, face_reg_sts);
;;;2276                   if( (face_reg_sts & five_face_all_done) == five_face_all_done )
;;;2277                   {
;;;2278                       //face_reg_sts = 0;
;;;2279                       //kl520_api_dp_five_face_disable();
;;;2280                       _kl520_fdfr_drawing_timer_create(KL520_FACE_OK);
;;;2281                       dbg_msg_api("Five Face Done");
;;;2282                   }
;;;2283   
;;;2284                   ctx->state = FDFR_STATUS_OK;
;;;2285                   fmap_index++;
;;;2286                   _api_fdfr_set_event(FLAGS_API_FDFR_ADD_EVT, KL520_APP_FLAG_FDFR_OK, TRUE);
00001e  f44f7a00          MOV      r10,#0x200
;;;2287                   //dbg_msg_algo("yg - registered other face reg idx:%d, fmap:%d.", reg_idx, fmap_index);
;;;2288                   return;
;;;2289               }
;;;2290               else
;;;2291               {
;;;2292                   ctx->state = FDFR_STATUS_ERROR;
000022  f04f39ff          MOV      r9,#0xffffffff
000026  b159              CBZ      r1,|L39.64|
000028  4604              MOV      r4,r0                 ;2257
00002a  b11b              CBZ      r3,|L39.52|
00002c  2201              MOVS     r2,#1                 ;2257
00002e  e002              B        |L39.54|
                  |L39.48|
000030  3164              ADDS     r1,r1,#0x64           ;2257
000032  e7f1              B        |L39.24|
                  |L39.52|
000034  2200              MOVS     r2,#0                 ;2257
                  |L39.54|
000036  4639              MOV      r1,r7                 ;2257
000038  4640              MOV      r0,r8                 ;2257
00003a  f7fffffe          BL       kdp_e2e_db_compare_self
00003e  b170              CBZ      r0,|L39.94|
                  |L39.64|
;;;2293                   _api_fdfr_set_event(FLAGS_API_FDFR_ADD_EVT, KL520_APP_FLAG_FDFR_OK, TRUE);
;;;2294                   return;
;;;2295               }
;;;2296           }
;;;2297       } else {
;;;2298           dbg_msg_algo ("face add, self compare failed");
;;;2299           if ( (kdp_e2e_prop_get2(flow_mode) > FLOW_MODE_SIM_VIRTUAL) )
000040  f7fffffe          BL       kdp_e2e_prop_get_inst
000044  68c0              LDR      r0,[r0,#0xc]
000046  2801              CMP      r0,#1
000048  d907              BLS      |L39.90|
;;;2300           {
;;;2301               ctx->state = FDFR_STATUS_ERROR;
00004a  bf00              NOP      
                  |L39.76|
00004c  f8859000          STRB     r9,[r5,#0]
                  |L39.80|
;;;2302               _api_fdfr_set_event(FLAGS_API_FDFR_ADD_EVT, KL520_APP_FLAG_FDFR_OK, TRUE);
000050  2201              MOVS     r2,#1
000052  4611              MOV      r1,r2
000054  4650              MOV      r0,r10
000056  f7fffffe          BL       _api_fdfr_set_event
                  |L39.90|
;;;2303               return;
;;;2304           }
;;;2305       }
;;;2306   }
00005a  e8bd87f0          POP      {r4-r10,pc}
                  |L39.94|
00005e  7ce0              LDRB     r0,[r4,#0x13]         ;2265  ; fmap_index
000060  1c40              ADDS     r0,r0,#1              ;2265
000062  b2c1              UXTB     r1,r0                 ;2265
000064  4640              MOV      r0,r8                 ;2265
000066  f7fffffe          BL       _kl520_api_fdfr_add
00006a  2800              CMP      r0,#0                 ;2265
00006c  d1ee              BNE      |L39.76|
00006e  f8848004          STRB     r8,[r4,#4]            ;2267
000072  2001              MOVS     r0,#1                 ;2269
000074  6f21              LDR      r1,[r4,#0x70]         ;2269  ; face_reg_sts
000076  40b8              LSLS     r0,r0,r7              ;2269
000078  4308              ORRS     r0,r0,r1              ;2269
00007a  6720              STR      r0,[r4,#0x70]         ;2272  ; face_reg_sts
00007c  7467              STRB     r7,[r4,#0x11]         ;2272
00007e  4386              BICS     r6,r6,r0              ;2276
000080  d102              BNE      |L39.136|
000082  2000              MOVS     r0,#0                 ;2280
000084  f7fffffe          BL       _kl520_fdfr_drawing_timer_create
                  |L39.136|
000088  2000              MOVS     r0,#0                 ;2284
00008a  7028              STRB     r0,[r5,#0]            ;2284
00008c  7ce0              LDRB     r0,[r4,#0x13]         ;2285  ; fmap_index
00008e  1c40              ADDS     r0,r0,#1              ;2285
000090  74e0              STRB     r0,[r4,#0x13]         ;2285
000092  e7dd              B        |L39.80|
;;;2307   
                          ENDP

                  |L39.148|
                          DCD      ||.data||

                          AREA ||i.api_fdfr_face_recognition_set_mandatory_event||, CODE, READONLY, ALIGN=2

                  api_fdfr_face_recognition_set_mandatory_event PROC
;;;2510   
;;;2511   void api_fdfr_face_recognition_set_mandatory_event(void)
000000  4901              LDR      r1,|L40.8|
;;;2512   {
;;;2513       g_bRecognitionMandatoryFlag = TRUE;
000002  2001              MOVS     r0,#1
000004  72c8              STRB     r0,[r1,#0xb]
;;;2514   }
000006  4770              BX       lr
;;;2515   
                          ENDP

                  |L40.8|
                          DCD      ||.data||

                          AREA ||i.api_fdfr_handle_face_add_error||, CODE, READONLY, ALIGN=2

                  api_fdfr_handle_face_add_error PROC
;;;2307   
;;;2308   static void api_fdfr_handle_face_add_error(struct api_fdfr_context *ctx, int fdr_result)
000000  b570              PUSH     {r4-r6,lr}
;;;2309   {
000002  460c              MOV      r4,r1
000004  4605              MOV      r5,r0
;;;2310       if ( (kdp_e2e_prop_get2(flow_mode) > FLOW_MODE_SIM_VIRTUAL) )
000006  f7fffffe          BL       kdp_e2e_prop_get_inst
00000a  68c0              LDR      r0,[r0,#0xc]
;;;2311       {
;;;2312           ctx->state = FDFR_STATUS_ERROR;
;;;2313           _api_fdfr_set_event(FLAGS_API_FDFR_ADD_EVT, KL520_APP_FLAG_FDFR_OK, TRUE);
00000c  f44f7300          MOV      r3,#0x200
000010  2801              CMP      r0,#1                 ;2310
000012  d901              BLS      |L41.24|
000014  20ff              MOVS     r0,#0xff              ;2312
;;;2314           return;
000016  e017              B        |L41.72|
                  |L41.24|
;;;2315       }
;;;2316   
;;;2317       if(KL520_FACE_MASK == fdr_result)
000018  2c11              CMP      r4,#0x11
00001a  d014              BEQ      |L41.70|
;;;2318       {
;;;2319           ctx->state = FDFR_STATUS_MASK;
;;;2320           _api_fdfr_set_event(FLAGS_API_FDFR_ADD_EVT, KL520_APP_FLAG_FDFR_OK, TRUE);
;;;2321           //osDelay(KL520_FDFR_KEEP_MS);
;;;2322           return;
;;;2323       }
;;;2324       else if(KL520_FACE_CALLIB_FAIL == fdr_result)
00001c  2c1b              CMP      r4,#0x1b
00001e  d015              BEQ      |L41.76|
;;;2325       {
;;;2326           ctx->state = FDFR_STATUS_CALLIB_FAIL;
;;;2327           _api_fdfr_set_event(FLAGS_API_FDFR_ADD_EVT, KL520_APP_FLAG_FDFR_OK, TRUE);
;;;2328        
;;;2329           osDelay(KL520_FDFR_KEEP_MS);
;;;2330           return;
;;;2331       }
;;;2332       else if(KL520_FACE_LOW_QUALITY  == fdr_result)
000020  2c19              CMP      r4,#0x19
000022  d020              BEQ      |L41.102|
;;;2333       {
;;;2334           ctx->state = FDFR_STATUS_LOW_QUALITY;               // Remind the user to come closer
;;;2335           _api_fdfr_set_event(FLAGS_API_FDFR_ADD_EVT, KL520_APP_FLAG_FDFR_ERR, TRUE);
;;;2336           return;
;;;2337       }
;;;2338       else if(KL520_FACE_WAIT_DONT_MOVE == fdr_result) 
000024  2c0e              CMP      r4,#0xe
000026  d023              BEQ      |L41.112|
000028  2200              MOVS     r2,#0
;;;2339       {
;;;2340           //dbg_msg_algo ("dont move....");
;;;2341           ctx->state = FDFR_STATUS_WAIT_DONT_MOVE;
;;;2342           _api_fdfr_set_event(FLAGS_API_FDFR_ADD_EVT, KL520_APP_FLAG_FDFR_OK, TRUE);
;;;2343       }
;;;2344       else if(KL520_FACE_BADPOSE == fdr_result) 
;;;2345       {
;;;2346           //dbg_msg_algo ("bad pose....:%d, %d", ctx->state, bad_pose_cnt);
;;;2347           //if (FACE_ADD_TYPE_NORMAL == m_api_fdfr_ctx.reg_idx)
;;;2348           //    face_non_move_cnt = 0;
;;;2349   
;;;2350           if(ctx->state == FDFR_STATUS_BAD_POSE) {
;;;2351               bad_pose_cnt++;
00002a  4826              LDR      r0,|L41.196|
00002c  2c0a              CMP      r4,#0xa               ;2344
00002e  d021              BEQ      |L41.116|
;;;2352           } else {
;;;2353               bad_pose_cnt = 0;
;;;2354               ctx->state = FDFR_STATUS_BAD_POSE;
;;;2355           }
;;;2356   #if (CFG_LED_CTRL_ENHANCE == 1)
;;;2357   #if (CFG_CAMERA_ROTATE != 1)
;;;2358           kdp_e2e_nir_led_flag_off();
;;;2359           for (int i = 0; i < 40; i++) {
;;;2360               if (kl520_is_fdfr_abort() != 0) break;
;;;2361               osDelay(5);
;;;2362           }
;;;2363   #else
;;;2364           // if(bad_pose_cnt % FACE_BAD_POSE_LED_CNT == 1) {
;;;2365           //     kdp_e2e_nir_led_flag_off();
;;;2366           //     for (int i = 0; i < 40; i++) {
;;;2367           //         if (kl520_is_fdfr_abort() != 0) break;
;;;2368           //         osDelay(5);
;;;2369           //     }
;;;2370           // }
;;;2371   #endif
;;;2372   #endif
;;;2373   
;;;2374   #ifdef SKIP_SOME_BAD_POSE_EVENT
;;;2375           if(bad_pose_cnt >= FACE_BAD_POSE_CNT)
;;;2376   #endif
;;;2377           {
;;;2378               bad_pose_cnt = 0;
;;;2379               _api_fdfr_set_event(FLAGS_API_FDFR_ADD_EVT, KL520_APP_FLAG_FDFR_OK, TRUE);
;;;2380               return; //exit here
;;;2381           }
;;;2382       }
;;;2383       else if(KL520_FACE_TOO_FAR == fdr_result || KL520_FACE_TOO_NEAR == fdr_result) 
000030  2c0c              CMP      r4,#0xc
000032  d035              BEQ      |L41.160|
000034  2c0d              CMP      r4,#0xd
000036  d031              BEQ      |L41.156|
;;;2384       {
;;;2385           //dbg_msg_algo("face dist too far or too near");
;;;2386           if(KL520_FACE_TOO_FAR == fdr_result) ctx->state = FDFR_STATUS_TOO_FAR;
;;;2387           else ctx->state = FDFR_STATUS_TOO_NEAR;
;;;2388           _api_fdfr_set_event(FLAGS_API_FDFR_ADD_EVT, KL520_APP_FLAG_FDFR_OK, TRUE);
;;;2389           return;
;;;2390       }
;;;2391       else if(fdr_result >= KL520_FACE_TOOUP && fdr_result <= KL520_FACE_TOORIGHT)
000038  f1a40115          SUB      r1,r4,#0x15
00003c  2903              CMP      r1,#3
00003e  d831              BHI      |L41.164|
000040  1c64              ADDS     r4,r4,#1
;;;2392       {
;;;2393           ctx->state = (enum kl520_fdfr_status_code_e)(FDFR_STATUS_TOOUP + (fdr_result - KL520_FACE_TOOUP));
000042  702c              STRB     r4,[r5,#0]
;;;2394           _api_fdfr_set_event(FLAGS_API_FDFR_ADD_EVT, KL520_APP_FLAG_FDFR_OK, TRUE);
;;;2395           return;
000044  e020              B        |L41.136|
                  |L41.70|
000046  2011              MOVS     r0,#0x11              ;2319
                  |L41.72|
000048  7028              STRB     r0,[r5,#0]            ;2312
00004a  e01d              B        |L41.136|
                  |L41.76|
00004c  201b              MOVS     r0,#0x1b              ;2326
00004e  7028              STRB     r0,[r5,#0]            ;2326
000050  2201              MOVS     r2,#1                 ;2327
000052  4611              MOV      r1,r2                 ;2327
000054  4618              MOV      r0,r3                 ;2327
000056  f7fffffe          BL       _api_fdfr_set_event
00005a  e8bd4070          POP      {r4-r6,lr}            ;2329
00005e  f44f7096          MOV      r0,#0x12c             ;2329
000062  f7ffbffe          B.W      osDelay
                  |L41.102|
000066  201a              MOVS     r0,#0x1a              ;2334
000068  2201              MOVS     r2,#1                 ;2335
00006a  7028              STRB     r0,[r5,#0]            ;2334
00006c  2102              MOVS     r1,#2                 ;2335
00006e  e00d              B        |L41.140|
                  |L41.112|
000070  200f              MOVS     r0,#0xf               ;2341
000072  e7e9              B        |L41.72|
                  |L41.116|
000074  7829              LDRB     r1,[r5,#0]            ;2350
000076  290c              CMP      r1,#0xc               ;2350
000078  d00c              BEQ      |L41.148|
00007a  7382              STRB     r2,[r0,#0xe]          ;2353
00007c  210c              MOVS     r1,#0xc               ;2354
00007e  7029              STRB     r1,[r5,#0]            ;2354
                  |L41.128|
000080  7b81              LDRB     r1,[r0,#0xe]          ;2375  ; bad_pose_cnt
000082  2902              CMP      r1,#2                 ;2375
000084  d305              BCC      |L41.146|
000086  7382              STRB     r2,[r0,#0xe]          ;2378
                  |L41.136|
000088  2201              MOVS     r2,#1                 ;2342
00008a  4611              MOV      r1,r2                 ;2342
                  |L41.140|
00008c  4618              MOV      r0,r3                 ;2342
00008e  f7fffffe          BL       _api_fdfr_set_event
                  |L41.146|
;;;2396       }
;;;2397       else if(KL520_FACE_NOFACE == fdr_result)
;;;2398       {
;;;2399           ctx->state = FDFR_STATUS_NOFACE;
;;;2400           _api_fdfr_set_event(FLAGS_API_FDFR_ADD_EVT, KL520_APP_FLAG_FDFR_OK, TRUE);
;;;2401           return;
;;;2402       }
;;;2403       else if(KL520_FACE_ATTACK == fdr_result) 
;;;2404       {
;;;2405           if(face_attack_cnt >= FACE_ATTACK_CNT)
;;;2406           {
;;;2407               dbg_msg_algo ("attack in face add");
;;;2408               face_attack_cnt = 0;
;;;2409               ctx->state = FDFR_STATUS_ATTACK;
;;;2410               _api_fdfr_set_event(FLAGS_API_FDFR_ADD_EVT, KL520_APP_FLAG_FDFR_OK, TRUE);
;;;2411               return; //exit here
;;;2412           } else {
;;;2413               face_attack_cnt++;
;;;2414           }
;;;2415       }
;;;2416   }
000092  bd70              POP      {r4-r6,pc}
                  |L41.148|
000094  7b81              LDRB     r1,[r0,#0xe]          ;2351  ; bad_pose_cnt
000096  1c49              ADDS     r1,r1,#1              ;2351
000098  7381              STRB     r1,[r0,#0xe]          ;2351
00009a  e7f1              B        |L41.128|
                  |L41.156|
00009c  200e              MOVS     r0,#0xe               ;2387
00009e  e7d3              B        |L41.72|
                  |L41.160|
0000a0  200d              MOVS     r0,#0xd               ;2386
0000a2  e7d1              B        |L41.72|
                  |L41.164|
0000a4  2c04              CMP      r4,#4                 ;2397
0000a6  d007              BEQ      |L41.184|
0000a8  2c1e              CMP      r4,#0x1e              ;2403
0000aa  d1f2              BNE      |L41.146|
0000ac  7b41              LDRB     r1,[r0,#0xd]          ;2405  ; face_attack_cnt
0000ae  290a              CMP      r1,#0xa               ;2405
0000b0  d304              BCC      |L41.188|
0000b2  7342              STRB     r2,[r0,#0xd]          ;2408
0000b4  201e              MOVS     r0,#0x1e              ;2409
0000b6  e7c7              B        |L41.72|
                  |L41.184|
0000b8  2005              MOVS     r0,#5                 ;2399
0000ba  e7c5              B        |L41.72|
                  |L41.188|
0000bc  1c49              ADDS     r1,r1,#1              ;2401
0000be  7341              STRB     r1,[r0,#0xd]          ;2413
0000c0  bd70              POP      {r4-r6,pc}
;;;2417   
                          ENDP

0000c2  0000              DCW      0x0000
                  |L41.196|
                          DCD      ||.data||

                          AREA ||i.api_fdfr_handle_face_add_event||, CODE, READONLY, ALIGN=2

                  api_fdfr_handle_face_add_event PROC
;;;2417   
;;;2418   static void api_fdfr_handle_face_add_event(struct api_fdfr_context *ctx)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;2419   {
000004  4607              MOV      r7,r0
;;;2420       int fdr_result;
;;;2421       u8 reg_idx = m_api_fdfr_ctx.reg_idx;
000006  482c              LDR      r0,|L42.184|
000008  7a06              LDRB     r6,[r0,#8]  ; m_api_fdfr_ctx
;;;2422       dbg_msg_algo("[%s]reg_idx: %d", __func__, reg_idx);
;;;2423       
;;;2424       kdp_e2e_face_variables *face_var = kdp_e2e_get_face_variables();
00000a  f7fffffe          BL       kdp_e2e_get_face_variables
;;;2425       face_var->_is_fm_import = 0;
;;;2426   
;;;2427   #if ( KL520_FACE_ADD_BMP == YES )
;;;2428       if(face_add_bitmap & 0x80) { //first time of calling face add
00000e  4c2a              LDR      r4,|L42.184|
000010  2100              MOVS     r1,#0                 ;2425
000012  3c74              SUBS     r4,r4,#0x74
000014  4605              MOV      r5,r0                 ;2424
000016  f88011a8          STRB     r1,[r0,#0x1a8]        ;2425
00001a  7b20              LDRB     r0,[r4,#0xc]  ; face_add_bitmap
00001c  0600              LSLS     r0,r0,#24
00001e  d505              BPL      |L42.44|
;;;2429           _api_fdfr_rst_timeout();
000020  f7fffffe          BL       _api_fdfr_rst_timeout
;;;2430           face_add_bitmap &= ~(u8)0x80;
000024  7b20              LDRB     r0,[r4,#0xc]  ; face_add_bitmap
000026  f0200080          BIC      r0,r0,#0x80
00002a  7320              STRB     r0,[r4,#0xc]
                  |L42.44|
;;;2431       }
;;;2432   #endif
;;;2433       
;;;2434       if (_api_fdfr_chk_timeout(m_face_add_timeout) == TRUE)
00002c  6ae0              LDR      r0,[r4,#0x2c]  ; m_face_add_timeout
00002e  f7fffffe          BL       _api_fdfr_chk_timeout
000032  b1a8              CBZ      r0,|L42.96|
;;;2435       {
;;;2436           if (kdp_e2e_prop_get2(face_mode) != FACE_MODE_ENG_CAL) {
000034  f7fffffe          BL       kdp_e2e_prop_get_inst
000038  6900              LDR      r0,[r0,#0x10]
00003a  2806              CMP      r0,#6
00003c  d001              BEQ      |L42.66|
;;;2437               dbg_msg_console("[FACE_ADD] timeout");
00003e  a11f              ADR      r1,|L42.188|
000040  e000              B        |L42.68|
                  |L42.66|
;;;2438           } else {
;;;2439               dbg_msg_console("Engineering calibration timeout");
000042  a124              ADR      r1,|L42.212|
                  |L42.68|
000044  2001              MOVS     r0,#1
000046  f7fffffe          BL       kdp_level_printf
;;;2440           }
;;;2441           
;;;2442           kdp_e2e_nir_led_flag_off();
00004a  f7fffffe          BL       kdp_e2e_nir_led_flag_off
;;;2443   
;;;2444   #if (CFG_GUI_ENABLE == YES)
;;;2445           kl520_pose_timer_delete();
;;;2446   #endif
;;;2447           ctx->state = FDFR_STATUS_TIMEOUT;
00004e  20fe              MOVS     r0,#0xfe
000050  7038              STRB     r0,[r7,#0]
;;;2448   
;;;2449           _api_fdfr_set_event(FLAGS_API_FDFR_ADD_EVT, KL520_APP_FLAG_FDFR_TIMEOUT, TRUE);
000052  2104              MOVS     r1,#4
000054  2201              MOVS     r2,#1
000056  01c8              LSLS     r0,r1,#7
000058  f7fffffe          BL       _api_fdfr_set_event
;;;2450           return;
;;;2451       }
;;;2452   
;;;2453   
;;;2454   #if (HOST_DEV_COM_PROTO_TYPE == 1)
;;;2455       if ( g_bImpFmDataReady )
;;;2456       {
;;;2457           //Bypass
;;;2458           fdr_result = KL520_FACE_OK;
;;;2459           g_bImpFmDataReady = FALSE;
;;;2460           kl520_api_ap_com_import_fm_r1_inject();
;;;2461       }
;;;2462   #elif ( HOST_DEV_COM_PROTO_TYPE == 2 )
;;;2463       if ( g_tImpExpMassDataPkgInfo.nReadyType == DATA_READY_TYPE_IMP_FM )
;;;2464   
;;;2465       {
;;;2466           //Bypass
;;;2467           fdr_result = KL520_FACE_OK;
;;;2468           face_var->_is_fm_import = 1;
;;;2469   
;;;2470           KDP_imp_fm_inejct_data();
;;;2471           kdp_e2e_prop_update_db_comp_params();//zcy note imp fm
;;;2472       }
;;;2473   #else
;;;2474       if(0) { }
;;;2475   #endif
;;;2476       else
;;;2477       {
;;;2478           fdr_result = kl520_api_fdfr_element();
;;;2479       }
;;;2480   
;;;2481       if (KL520_FACE_OK == fdr_result)
;;;2482       {   
;;;2483           u8 user_idx = 0xff;
;;;2484           if(is_enroll_customize_uid() == 0) {
;;;2485               user_idx = kl520_api_face_query_first_avail_user_idx();
;;;2486           } else {
;;;2487               user_idx = kdp_app_db_get_db_idx(get_enroll_customize_uid());
;;;2488           }
;;;2489           if(reg_idx == FACE_ADD_TYPE_NORMAL)
;;;2490           {
;;;2491   //            if(_oms_overwrite_db_uid != 0xff) {
;;;2492   //                //set valid, id, fm0, fm1
;;;2493   //                kdp_app_db_set_last_register_id_preprocess(user_idx, FALSE );
;;;2494   //            }
;;;2495               //for normal,
;;;2496               api_fdfr_face_add_normal_face(ctx, reg_idx, user_idx);
;;;2497           } else {
;;;2498               //for other
;;;2499               api_fdfr_face_add_other_face(ctx, face_hp_check_idx, user_idx);
;;;2500           }
;;;2501           _api_fdfr_thread_data_prepare();
;;;2502       }
;;;2503       else
;;;2504       {
;;;2505           api_fdfr_handle_face_add_error(ctx, fdr_result);
;;;2506       }
;;;2507       return;
;;;2508   }
00005c  e8bd81f0          POP      {r4-r8,pc}
                  |L42.96|
000060  4825              LDR      r0,|L42.248|
000062  7dc0              LDRB     r0,[r0,#0x17]         ;2463  ; g_tImpExpMassDataPkgInfo
000064  2820              CMP      r0,#0x20              ;2463
000066  d008              BEQ      |L42.122|
000068  f7fffffe          BL       kl520_api_fdfr_element
00006c  0001              MOVS     r1,r0                 ;2478
00006e  d00b              BEQ      |L42.136|
000070  4638              MOV      r0,r7                 ;2505
000072  e8bd41f0          POP      {r4-r8,lr}            ;2505
000076  f7ffbffe          B.W      api_fdfr_handle_face_add_error
                  |L42.122|
00007a  2001              MOVS     r0,#1                 ;2468
00007c  f88501a8          STRB     r0,[r5,#0x1a8]        ;2468
000080  f7fffffe          BL       KDP_imp_fm_inejct_data
000084  f7fffffe          BL       kdp_e2e_prop_update_db_comp_params
                  |L42.136|
000088  f7fffffe          BL       is_enroll_customize_uid
00008c  b160              CBZ      r0,|L42.168|
00008e  79e0              LDRB     r0,[r4,#7]            ;2484  ; _enroll_customize_uid
000090  f7fffffe          BL       kdp_app_db_get_db_idx
                  |L42.148|
000094  4602              MOV      r2,r0                 ;2487
000096  b156              CBZ      r6,|L42.174|
000098  7ca1              LDRB     r1,[r4,#0x12]         ;2499  ; face_hp_check_idx
00009a  4638              MOV      r0,r7                 ;2499
00009c  f7fffffe          BL       api_fdfr_face_add_other_face
                  |L42.160|
0000a0  e8bd41f0          POP      {r4-r8,lr}            ;2501
0000a4  f7ffbffe          B.W      _api_fdfr_thread_data_prepare
                  |L42.168|
0000a8  f7fffffe          BL       kl520_api_face_query_first_avail_user_idx
0000ac  e7f2              B        |L42.148|
                  |L42.174|
0000ae  4631              MOV      r1,r6                 ;2496
0000b0  4638              MOV      r0,r7                 ;2496
0000b2  f7fffffe          BL       api_fdfr_face_add_normal_face
0000b6  e7f3              B        |L42.160|
;;;2509   
                          ENDP

                  |L42.184|
                          DCD      ||.data||+0x74
                  |L42.188|
0000bc  5b464143          DCB      "[FACE_ADD] timeout\r\n",0
0000c0  455f4144
0000c4  445d2074
0000c8  696d656f
0000cc  75740d0a
0000d0  00      
0000d1  00                DCB      0
0000d2  00                DCB      0
0000d3  00                DCB      0
                  |L42.212|
0000d4  456e6769          DCB      "Engineering calibration timeout\r\n",0
0000d8  6e656572
0000dc  696e6720
0000e0  63616c69
0000e4  62726174
0000e8  696f6e20
0000ec  74696d65
0000f0  6f75740d
0000f4  0a00    
0000f6  00                DCB      0
0000f7  00                DCB      0
                  |L42.248|
                          DCD      g_tImpExpMassDataPkgInfo

                          AREA ||i.api_fdfr_handle_face_liveness_event||, CODE, READONLY, ALIGN=2

                  api_fdfr_handle_face_liveness_event PROC
;;;2876   
;;;2877   static void api_fdfr_handle_face_liveness_event(struct api_fdfr_context *ctx)
000000  b570              PUSH     {r4-r6,lr}
;;;2878   {
000002  4604              MOV      r4,r0
;;;2879       int fdr_result = kl520_api_fdfr_element();
000004  f7fffffe          BL       kl520_api_fdfr_element
;;;2880       if (KL520_FACE_OK == fdr_result)
;;;2881       {
;;;2882           _kl520_fdfr_drawing_timer_create(KL520_FACE_LIVENESS_OK);
;;;2883           ctx->state = FDFR_STATUS_OK;
;;;2884           _api_fdfr_set_event(FLAGS_API_FDFR_LIVENESS_EVT, KL520_APP_FLAG_FDFR_OK, TRUE);
000008  f44f5500          MOV      r5,#0x2000
00000c  b130              CBZ      r0,|L43.28|
;;;2885           _api_fdfr_thread_data_prepare();
;;;2886           return;
;;;2887       }
;;;2888       else if (KL520_FACE_INVALID == fdr_result)
00000e  280b              CMP      r0,#0xb
000010  d012              BEQ      |L43.56|
;;;2889       {
;;;2890           ctx->state = FDFR_STATUS_INVALID;
;;;2891           _api_fdfr_set_event(FLAGS_API_FDFR_LIVENESS_EVT, KL520_APP_FLAG_FDFR_ERR, TRUE);
;;;2892           dbg_msg_api("KL520_FACE_INVALID");
;;;2893       }
;;;2894       else if (KL520_FACE_MASK == fdr_result)
000012  2811              CMP      r0,#0x11
000014  d015              BEQ      |L43.66|
;;;2895       {
;;;2896           ctx->state = FDFR_STATUS_MASK;
;;;2897           _api_fdfr_set_event(FLAGS_API_FDFR_LIVENESS_EVT, KL520_APP_FLAG_FDFR_ERR, FALSE);
;;;2898   //                dbg_msg_api("KL520_FACE_MASK");
;;;2899       }
;;;2900       else if(KL520_FACE_LOW_QUALITY  == fdr_result)
000016  2819              CMP      r0,#0x19
000018  d012              BEQ      |L43.64|
00001a  e018              B        |L43.78|
                  |L43.28|
00001c  200f              MOVS     r0,#0xf               ;2882
00001e  f7fffffe          BL       _kl520_fdfr_drawing_timer_create
000022  2000              MOVS     r0,#0                 ;2883
000024  7020              STRB     r0,[r4,#0]            ;2883
000026  2201              MOVS     r2,#1                 ;2884
000028  4611              MOV      r1,r2                 ;2884
00002a  4628              MOV      r0,r5                 ;2884
00002c  f7fffffe          BL       _api_fdfr_set_event
000030  e8bd4070          POP      {r4-r6,lr}            ;2885
000034  f7ffbffe          B.W      _api_fdfr_thread_data_prepare
                  |L43.56|
000038  2010              MOVS     r0,#0x10              ;2890
00003a  7020              STRB     r0,[r4,#0]            ;2890
00003c  2201              MOVS     r2,#1                 ;2891
00003e  e002              B        |L43.70|
                  |L43.64|
;;;2901       {
;;;2902           ctx->state = FDFR_STATUS_LOW_QUALITY;
000040  201a              MOVS     r0,#0x1a
                  |L43.66|
000042  7020              STRB     r0,[r4,#0]
;;;2903           _api_fdfr_set_event(FLAGS_API_FDFR_LIVENESS_EVT, KL520_APP_FLAG_FDFR_ERR, FALSE);
000044  2200              MOVS     r2,#0
                  |L43.70|
000046  2102              MOVS     r1,#2
000048  4628              MOV      r0,r5
00004a  f7fffffe          BL       _api_fdfr_set_event
                  |L43.78|
;;;2904       }
;;;2905   
;;;2906       if (_api_fdfr_chk_timeout(m_face_liveness_timeout) == TRUE)
00004e  4809              LDR      r0,|L43.116|
000050  6b40              LDR      r0,[r0,#0x34]  ; m_face_liveness_timeout
000052  f7fffffe          BL       _api_fdfr_chk_timeout
000056  2800              CMP      r0,#0
000058  d00a              BEQ      |L43.112|
;;;2907       {
;;;2908           dbg_msg_console("[FACE_LIVENESS] timeout");
00005a  a107              ADR      r1,|L43.120|
00005c  2001              MOVS     r0,#1
00005e  f7fffffe          BL       kdp_level_printf
;;;2909           {
;;;2910               ctx->state = FDFR_STATUS_TIMEOUT;
000062  20fe              MOVS     r0,#0xfe
000064  7020              STRB     r0,[r4,#0]
;;;2911               _api_fdfr_set_event(FLAGS_API_FDFR_LIVENESS_EVT, KL520_APP_FLAG_FDFR_TIMEOUT, TRUE);
000066  2201              MOVS     r2,#1
000068  2104              MOVS     r1,#4
00006a  4628              MOV      r0,r5
00006c  f7fffffe          BL       _api_fdfr_set_event
                  |L43.112|
;;;2912           }
;;;2913           return;
;;;2914       }
;;;2915       return;
;;;2916   }
000070  bd70              POP      {r4-r6,pc}
;;;2917   
                          ENDP

000072  0000              DCW      0x0000
                  |L43.116|
                          DCD      ||.data||
                  |L43.120|
000078  5b464143          DCB      "[FACE_LIVENESS] timeout\r\n",0
00007c  455f4c49
000080  56454e45
000084  53535d20
000088  74696d65
00008c  6f75740d
000090  0a00    
000092  00                DCB      0
000093  00                DCB      0

                          AREA ||i.api_fdfr_handle_face_open_event||, CODE, READONLY, ALIGN=2

                  api_fdfr_handle_face_open_event PROC
;;;2104   
;;;2105   static void api_fdfr_handle_face_open_event(struct api_fdfr_context *ctx)
000000  b570              PUSH     {r4-r6,lr}
;;;2106   {
;;;2107       face_non_move_cnt = 0;
000002  4c26              LDR      r4,|L44.156|
000004  4605              MOV      r5,r0                 ;2106
000006  2000              MOVS     r0,#0
;;;2108       face_attack_cnt = 0;
000008  64e0              STR      r0,[r4,#0x4c]  ; face_non_move_cnt
00000a  7360              STRB     r0,[r4,#0xd]
;;;2109       fmap_index = 0;
00000c  74e0              STRB     r0,[r4,#0x13]
;;;2110       
;;;2111       face_reg_sts = 0;
;;;2112       ctx->state = FDFR_STATUS_OPENED;
00000e  6720              STR      r0,[r4,#0x70]  ; face_reg_sts
000010  2007              MOVS     r0,#7
000012  7028              STRB     r0,[r5,#0]
;;;2113   
;;;2114       kl520_fdfr_drawing_timer_flag = KL520_FACE_FAIL;
000014  2002              MOVS     r0,#2
;;;2115       m_curr_user_id = 0xFF;
000016  6460              STR      r0,[r4,#0x44]  ; kl520_fdfr_drawing_timer_flag
000018  20ff              MOVS     r0,#0xff
00001a  7120              STRB     r0,[r4,#4]
;;;2116       osDelay(KL520_FDFR_SKIP_MS);
00001c  2000              MOVS     r0,#0
00001e  f7fffffe          BL       osDelay
;;;2117       
;;;2118       _api_fdfr_rst_timeout();
000022  f7fffffe          BL       _api_fdfr_rst_timeout
;;;2119   
;;;2120   #if (CFG_E2E_REC_NOTE == YES && KL520_REC_EYEMODE == YES && CFG_E2E_STRUCT_LIGHT == YES ) 
;;;2121       kl520_face_recognition_eye_mode(FDFR_STATUS_IDLE, E2E_OK);
;;;2122   #endif			
;;;2123       osThreadFlagsClear(FLAGS_API_FDFR_OPEN_EVT);
000026  f44f7080          MOV      r0,#0x100
00002a  f7fffffe          BL       osThreadFlagsClear
;;;2124       
;;;2125       _fdr_opened = 1;
00002e  2001              MOVS     r0,#1
000030  62a0              STR      r0,[r4,#0x28]  ; _fdr_opened
000032  f7fffffe          BL       kdp_is_abort_flag
;;;2126       if(kl520_is_fdfr_abort() != 0) { //abort is ongoing
000036  b140              CBZ      r0,|L44.74|
;;;2127           osEventFlagsId_t evt = get_user_com_event_id();
000038  f7fffffe          BL       get_user_com_event_id
;;;2128           if(evt != NULL) osEventFlagsSet(evt, 2 /* USER_COM_EVENT_FDR_OPENED */);
00003c  2800              CMP      r0,#0
00003e  d02b              BEQ      |L44.152|
000040  e8bd4070          POP      {r4-r6,lr}
000044  2102              MOVS     r1,#2
000046  f7ffbffe          B.W      osEventFlagsSet
                  |L44.74|
;;;2129           return;
;;;2130       }
;;;2131   
;;;2132   #if (KL520_QUICK_BOOT == YES)
;;;2133       if (FACE_MODE_ADD == m_face_mode || m_face_mode == FACE_MODE_ENG_CAL)
00004a  7aa0              LDRB     r0,[r4,#0xa]  ; m_face_mode
00004c  2801              CMP      r0,#1
00004e  d010              BEQ      |L44.114|
000050  2806              CMP      r0,#6
000052  d00e              BEQ      |L44.114|
;;;2134           set_thread_event(ctx->tid, FLAGS_API_FDFR_ADD_EVT);
;;;2135       else if (FACE_MODE_RECOGNITION == m_face_mode)
000054  2802              CMP      r0,#2
000056  d010              BEQ      |L44.122|
;;;2136           set_thread_event(ctx->tid, FLAGS_API_FDFR_RECOGNITION_EVT);
;;;2137       else if (FACE_MODE_RECOGNITION_TEST == m_face_mode)
000058  2804              CMP      r0,#4
00005a  d012              BEQ      |L44.130|
;;;2138           set_thread_event(ctx->tid, FLAGS_API_FDFR_RECOGNITION_TEST_EVT);
;;;2139       else if (FACE_MODE_LIVENESS == m_face_mode)
00005c  2803              CMP      r0,#3
00005e  d014              BEQ      |L44.138|
;;;2140           set_thread_event(ctx->tid, FLAGS_API_FDFR_LIVENESS_EVT);
;;;2141       else if (FACE_MODE_SNAP_IMG == m_face_mode)
000060  2807              CMP      r0,#7
000062  6868              LDR      r0,[r5,#4]
000064  d015              BEQ      |L44.146|
;;;2142           set_thread_event(ctx->tid, FLAGS_API_FDFR_SNAPIMG_EVT);
;;;2143   //    else if (FACE_MODE_NONE == m_face_mode)
;;;2144   //    {
;;;2145   //        set_thread_event(ctx->tid, FLAGS_API_FDFR_CLOSE_EVT);
;;;2146   //        set_event(kl520_api_get_event(), KL520_APP_THREAD_ERR);
;;;2147   //    }
;;;2148   
;;;2149   #if CFG_COMPARE_1VS1 == YES
;;;2150       else if (FACE_MODE_COMPARE_1VS1 == m_face_mode)
;;;2151           set_thread_event(ctx->tid, FLAGS_API_FDFR_COMPARE_1VS1_EVT);
;;;2152   #endif
;;;2153       else
;;;2154       {
;;;2155           set_thread_event(ctx->tid, FLAGS_API_FDFR_CLOSE_EVT);
000066  f44f5180          MOV      r1,#0x1000
                  |L44.106|
00006a  e8bd4070          POP      {r4-r6,lr}
00006e  f7ffbffe          B.W      set_thread_event
                  |L44.114|
000072  f44f7100          MOV      r1,#0x200             ;2134
000076  6868              LDR      r0,[r5,#4]            ;2134
000078  e7f7              B        |L44.106|
                  |L44.122|
00007a  f44f6180          MOV      r1,#0x400             ;2136
00007e  6868              LDR      r0,[r5,#4]            ;2136
000080  e7f3              B        |L44.106|
                  |L44.130|
000082  f44f6100          MOV      r1,#0x800             ;2138
000086  6868              LDR      r0,[r5,#4]            ;2138
000088  e7ef              B        |L44.106|
                  |L44.138|
00008a  f44f5100          MOV      r1,#0x2000            ;2140
00008e  6868              LDR      r0,[r5,#4]            ;2140
000090  e7eb              B        |L44.106|
                  |L44.146|
000092  f44f4100          MOV      r1,#0x8000            ;2142
000096  e7e8              B        |L44.106|
                  |L44.152|
;;;2156       }
;;;2157       
;;;2158   #else
;;;2159       set_event(evt_face_op_ack_id, FLAGS_FDFR_ACK);
;;;2160   #endif
;;;2161       return;
;;;2162   }
000098  bd70              POP      {r4-r6,pc}
;;;2163   
                          ENDP

00009a  0000              DCW      0x0000
                  |L44.156|
                          DCD      ||.data||

                          AREA ||i.api_fdfr_handle_snap_image_event||, CODE, READONLY, ALIGN=2

                  api_fdfr_handle_snap_image_event PROC
;;;2917   
;;;2918   static void api_fdfr_handle_snap_image_event(struct api_fdfr_context *ctx)
000000  b570              PUSH     {r4-r6,lr}
;;;2919   {
000002  4604              MOV      r4,r0
;;;2920   #if ( CFG_COM_BUS_TYPE&COM_BUS_UART_MASK )
;;;2921   #if defined KID_SNAP_IMAGE || defined KID_KN_SNAP_IMAGE
;;;2922       int fdr_result = kl520_api_fdfr_element();
000004  f7fffffe          BL       kl520_api_fdfr_element
;;;2923       if (KL520_FACE_OK == fdr_result)
;;;2924       {
;;;2925           ctx->state = FDFR_STATUS_OK;
;;;2926           
;;;2927           //save to ddr
;;;2928           struct kdp_img_cfg *img_cfg = kdp_e2e_get_img_cfg(MIPI_CAM_RGB);
;;;2929           kl520_api_save_to_snap_ddr(MIPI_CAM_RGB, img_cfg->image_mem_addr, img_cfg->image_mem_len);
;;;2930           
;;;2931           img_cfg = kdp_e2e_get_img_cfg(MIPI_CAM_NIR);
;;;2932           kl520_api_save_to_snap_ddr(MIPI_CAM_NIR, img_cfg->image_mem_addr, img_cfg->image_mem_len);
;;;2933           
;;;2934           _api_fdfr_thread_data_prepare();
;;;2935           _api_fdfr_set_event(FLAGS_API_FDFR_SNAPIMG_EVT, KL520_APP_FLAG_FDFR_OK, TRUE);
000008  f44f4500          MOV      r5,#0x8000
00000c  b158              CBZ      r0,|L45.38|
;;;2936       } else {
;;;2937           dbg_msg_console("[FACE_SNAP_IMG] error");
00000e  a112              ADR      r1,|L45.88|
000010  2001              MOVS     r0,#1
000012  f7fffffe          BL       kdp_level_printf
;;;2938           ctx->state = FDFR_STATUS_ERROR;
000016  20ff              MOVS     r0,#0xff
;;;2939           _api_fdfr_set_event(FLAGS_API_FDFR_SNAPIMG_EVT, KL520_APP_FLAG_FDFR_ERR, TRUE);
000018  2201              MOVS     r2,#1
00001a  7020              STRB     r0,[r4,#0]            ;2938
00001c  2102              MOVS     r1,#2
                  |L45.30|
00001e  4628              MOV      r0,r5                 ;2935
000020  f7fffffe          BL       _api_fdfr_set_event
;;;2940       }
;;;2941   #endif
;;;2942   #endif
;;;2943       return;
;;;2944   }
000024  bd70              POP      {r4-r6,pc}
                  |L45.38|
000026  2000              MOVS     r0,#0                 ;2925
000028  7020              STRB     r0,[r4,#0]            ;2925
00002a  4c11              LDR      r4,|L45.112|
00002c  7820              LDRB     r0,[r4,#0]            ;2928  ; rgb_sensor_index
00002e  f7fffffe          BL       kdp_e2e_get_img_cfg
000032  e9d01200          LDRD     r1,r2,[r0,#0]         ;2928
000036  7820              LDRB     r0,[r4,#0]            ;2929  ; rgb_sensor_index
000038  f7fffffe          BL       kl520_api_save_to_snap_ddr
00003c  7860              LDRB     r0,[r4,#1]            ;2931  ; nir_sensor_index
00003e  f7fffffe          BL       kdp_e2e_get_img_cfg
000042  e9d01200          LDRD     r1,r2,[r0,#0]         ;2931
000046  7860              LDRB     r0,[r4,#1]            ;2932  ; nir_sensor_index
000048  f7fffffe          BL       kl520_api_save_to_snap_ddr
00004c  f7fffffe          BL       _api_fdfr_thread_data_prepare
000050  2201              MOVS     r2,#1                 ;2935
000052  4611              MOV      r1,r2                 ;2935
000054  e7e3              B        |L45.30|
;;;2945   
                          ENDP

000056  0000              DCW      0x0000
                  |L45.88|
000058  5b464143          DCB      "[FACE_SNAP_IMG] error\r\n",0
00005c  455f534e
000060  41505f49
000064  4d475d20
000068  6572726f
00006c  720d0a00
                  |L45.112|
                          DCD      ||.data||

                          AREA ||i.api_fdfr_thread||, CODE, READONLY, ALIGN=2

                  api_fdfr_thread PROC
;;;3069   
;;;3070   static void api_fdfr_thread(void *argument)
000000  4e4c              LDR      r6,|L46.308|
;;;3071   {
;;;3072       struct api_fdfr_context *ctx = (struct api_fdfr_context*)argument;
;;;3073       BOOL quit = FALSE;
;;;3074       fmap_index = 0; //start from normal face
000002  f04f0800          MOV      r8,#0
000006  4604              MOV      r4,r0                 ;3072
000008  f8868013          STRB     r8,[r6,#0x13]
;;;3075       _fdr_opened = 0;
;;;3076       kdp_e2e_set_dual_cam_state(DUAL_IDENTICAL_CAM_CLOSED);
00000c  4640              MOV      r0,r8
00000e  f8c68028          STR      r8,[r6,#0x28]  ; _fdr_opened
000012  f7fffffe          BL       kdp_e2e_set_dual_cam_state
;;;3077   #ifdef DEV_TEST_VERSION
;;;3078       _face_recog_count = 0;
;;;3079       _face_succ_count = 0;
;;;3080   #endif
;;;3081   
;;;3082       face_hp_check_idx = 0xff;
000016  20ff              MOVS     r0,#0xff
000018  74b0              STRB     r0,[r6,#0x12]
;;;3083       if (NULL == mutex_face_close) mutex_face_close = osMutexNew(NULL);
00001a  6a30              LDR      r0,[r6,#0x20]  ; mutex_face_close
00001c  b918              CBNZ     r0,|L46.38|
00001e  2000              MOVS     r0,#0
000020  f7fffffe          BL       osMutexNew
000024  6230              STR      r0,[r6,#0x20]  ; mutex_face_close
                  |L46.38|
;;;3084   
;;;3085       kl520_measure_stamp(E_MEASURE_THR_FDFR_INIT_RDY);
;;;3086       //kdp_e2e_db_init_thres();
;;;3087   
;;;3088       //dbg_msg_algo ("fdfr thread started....");
;;;3089       while (!quit) {
;;;3090           unsigned int flags = osThreadFlagsGet();
;;;3091           if (flags & FLAGS_API_FDFR_CLOSE_EVT) {
;;;3092               osThreadFlagsClear( FLAGS_API_FDFR_OPEN_EVT |
;;;3093                                   FLAGS_API_FDFR_ADD_EVT |
;;;3094                                   FLAGS_API_FDFR_RECOGNITION_EVT |
;;;3095                                   FLAGS_API_FDFR_LIVENESS_EVT |
;;;3096                                   FLAGS_API_FDFR_SNAPIMG_EVT |
;;;3097                                   FLAGS_API_FDFR_RECOGNITION_TEST_EVT |
;;;3098                                   FLAGS_API_FDFR_ABORT_EVT);
;;;3099               flags = FLAGS_API_FDFR_CLOSE_EVT;
;;;3100           }
;;;3101           switch (flags) {
000026  f44f6700          MOV      r7,#0x800
00002a  f44f5980          MOV      r9,#0x1000            ;3099
00002e  f44f7a80          MOV      r10,#0x100
000032  bf00              NOP                            ;3090
                  |L46.52|
000034  f7fffffe          BL       osThreadFlagsGet
000038  4605              MOV      r5,r0                 ;3090
00003a  04c0              LSLS     r0,r0,#19             ;3091
00003c  d504              BPL      |L46.72|
00003e  f44f406f          MOV      r0,#0xef00            ;3092
000042  f7fffffe          BL       osThreadFlagsClear
000046  464d              MOV      r5,r9                 ;3099
                  |L46.72|
000048  42bd              CMP      r5,r7
00004a  d048              BEQ      |L46.222|
00004c  dc08              BGT      |L46.96|
00004e  4555              CMP      r5,r10
000050  d01a              BEQ      |L46.136|
000052  f5b57f00          CMP      r5,#0x200
000056  d01b              BEQ      |L46.144|
000058  f5b56f80          CMP      r5,#0x400
00005c  d108              BNE      |L46.112|
00005e  e01b              B        |L46.152|
                  |L46.96|
000060  454d              CMP      r5,r9
000062  d053              BEQ      |L46.268|
000064  f5b55f00          CMP      r5,#0x2000
000068  d035              BEQ      |L46.214|
00006a  f5b54f00          CMP      r5,#0x8000
00006e  d049              BEQ      |L46.260|
                  |L46.112|
;;;3102           case FLAGS_API_FDFR_OPEN_EVT:
;;;3103               api_fdfr_handle_face_open_event(ctx);
;;;3104               break;
;;;3105   
;;;3106           case FLAGS_API_FDFR_ADD_EVT:
;;;3107               api_fdfr_handle_face_add_event(ctx);
;;;3108               break;
;;;3109   
;;;3110           case FLAGS_API_FDFR_RECOGNITION_EVT:
;;;3111               api_fdfr_handle_face_recognition_event(ctx);
;;;3112               break;
;;;3113   
;;;3114           case FLAGS_API_FDFR_LIVENESS_EVT:
;;;3115               api_fdfr_handle_face_liveness_event(ctx);
;;;3116               break;
;;;3117   
;;;3118           case FLAGS_API_FDFR_RECOGNITION_TEST_EVT:
;;;3119               api_fdfr_handle_face_recognition_test_event(ctx);
;;;3120               break;
;;;3121           
;;;3122           case FLAGS_API_FDFR_SNAPIMG_EVT:
;;;3123               api_fdfr_handle_snap_image_event(ctx);
;;;3124               break;
;;;3125   
;;;3126           case FLAGS_API_FDFR_CLOSE_EVT:
;;;3127               api_fdfr_handle_face_close_event(ctx);
;;;3128               _fdr_opened = 0;
;;;3129   
;;;3130               break;
;;;3131   
;;;3132   #if CFG_COMPARE_1VS1 == YES
;;;3133           case FLAGS_API_FDFR_COMPARE_1VS1_EVT:
;;;3134               api_fdfr_handle_face_compare_event(ctx);
;;;3135               break;
;;;3136   #endif // CFG_COMPARE_1VS1
;;;3137   
;;;3138           default:
;;;3139               osDelay(10);
000070  200a              MOVS     r0,#0xa
000072  f7fffffe          BL       osDelay
                  |L46.118|
;;;3140               break;
;;;3141           }
;;;3142   
;;;3143   #if (KL520_QUICK_BOOT == YES)
;;;3144           if (FLAGS_API_FDFR_OPEN_EVT != flags)
000076  4555              CMP      r5,r10
000078  d0dc              BEQ      |L46.52|
;;;3145   #endif
;;;3146           {
;;;3147               _api_fdfr_thread_rst_priority();
00007a  bf00              NOP      
                  |L46.124|
00007c  f7fffffe          BL       _api_fdfr_thread_rst_priority
;;;3148               osDelay(1);
000080  2001              MOVS     r0,#1
000082  f7fffffe          BL       osDelay
000086  e7d5              B        |L46.52|
                  |L46.136|
000088  4620              MOV      r0,r4                 ;3103
00008a  f7fffffe          BL       api_fdfr_handle_face_open_event
00008e  e7f2              B        |L46.118|
                  |L46.144|
000090  4620              MOV      r0,r4                 ;3107
000092  f7fffffe          BL       api_fdfr_handle_face_add_event
000096  e7ee              B        |L46.118|
                  |L46.152|
000098  f7fffffe          BL       kdp_e2e_settings_get_inst
00009c  f7fffffe          BL       kl520_api_fdfr_element
0000a0  ea5f0b00          MOVS     r11,r0                ;3108
0000a4  d011              BEQ      |L46.202|
0000a6  f7fffffe          BL       _fdfr_recognition_note_check
0000aa  281c              CMP      r0,#0x1c              ;3108
0000ac  d008              BEQ      |L46.192|
0000ae  2813              CMP      r0,#0x13              ;3108
0000b0  d006              BEQ      |L46.192|
0000b2  2814              CMP      r0,#0x14              ;3108
0000b4  d004              BEQ      |L46.192|
0000b6  2812              CMP      r0,#0x12              ;3108
0000b8  d002              BEQ      |L46.192|
0000ba  7020              STRB     r0,[r4,#0]            ;3108
0000bc  f7fffffe          BL       kl520_face_recognition_note
                  |L46.192|
0000c0  4659              MOV      r1,r11                ;3108
0000c2  4620              MOV      r0,r4                 ;3108
0000c4  f7fffffe          BL       _api_fdfr_handle_face_recog_error
0000c8  e7d5              B        |L46.118|
                  |L46.202|
0000ca  4620              MOV      r0,r4                 ;3108
0000cc  f7fffffe          BL       _api_fdfr_handle_fr_db_match
0000d0  f7fffffe          BL       _api_fdfr_thread_data_prepare
0000d4  e7cf              B        |L46.118|
                  |L46.214|
0000d6  4620              MOV      r0,r4                 ;3115
0000d8  f7fffffe          BL       api_fdfr_handle_face_liveness_event
0000dc  e7cb              B        |L46.118|
                  |L46.222|
0000de  f7fffffe          BL       kl520_api_fdfr_element
0000e2  b110              CBZ      r0,|L46.234|
0000e4  20ff              MOVS     r0,#0xff              ;3116
0000e6  7020              STRB     r0,[r4,#0]            ;3116
0000e8  e7c8              B        |L46.124|
                  |L46.234|
0000ea  200f              MOVS     r0,#0xf               ;3116
0000ec  f7fffffe          BL       _kl520_fdfr_drawing_timer_create
0000f0  f8848000          STRB     r8,[r4,#0]            ;3116
0000f4  2200              MOVS     r2,#0                 ;3116
0000f6  2101              MOVS     r1,#1                 ;3116
0000f8  4638              MOV      r0,r7                 ;3116
0000fa  f7fffffe          BL       _api_fdfr_set_event
0000fe  f7fffffe          BL       _api_fdfr_thread_data_prepare
000102  e7bb              B        |L46.124|
                  |L46.260|
000104  4620              MOV      r0,r4                 ;3123
000106  f7fffffe          BL       api_fdfr_handle_snap_image_event
00010a  e7b4              B        |L46.118|
                  |L46.268|
00010c  2003              MOVS     r0,#3                 ;3124
00010e  f7fffffe          BL       kl520_api_timer_close
000112  f7fffffe          BL       kl520_api_get_event
000116  2107              MOVS     r1,#7                 ;3124
000118  f7fffffe          BL       osEventFlagsClear
00011c  2001              MOVS     r0,#1                 ;3124
00011e  7020              STRB     r0,[r4,#0]            ;3124
000120  4648              MOV      r0,r9                 ;3124
000122  f7fffffe          BL       osThreadFlagsClear
000126  2101              MOVS     r1,#1                 ;3124
000128  6d30              LDR      r0,[r6,#0x50]         ;3124  ; _fdr_event_id
00012a  f7fffffe          BL       osEventFlagsSet
00012e  f8c68028          STR      r8,[r6,#0x28]         ;3130  ; _fdr_opened
000132  e7a0              B        |L46.118|
;;;3149           }
;;;3150       }
;;;3151       
;;;3152       dbg_msg_algo ("fdfr thread exited....");
;;;3153   
;;;3154       osThreadExit();
;;;3155   }
;;;3156   
                          ENDP

                  |L46.308|
                          DCD      ||.data||

                          AREA ||i.fdfr_update_fr_entry||, CODE, READONLY, ALIGN=2

                  fdfr_update_fr_entry PROC
;;;2607   
;;;2608   void fdfr_update_fr_entry(void)
000000  b510              PUSH     {r4,lr}
;;;2609   {
000002  b08a              SUB      sp,sp,#0x28
;;;2610       osThreadAttr_t attr = {
000004  2224              MOVS     r2,#0x24
000006  4909              LDR      r1,|L47.44|
000008  4668              MOV      r0,sp
00000a  f7fffffe          BL       __aeabi_memcpy4
;;;2611           .stack_size = 1280
;;;2612       };
;;;2613       
;;;2614       if((tid_fdfr_update_fr == NULL) && (FALSE == g_bPowerDown))
00000e  4c08              LDR      r4,|L47.48|
000010  4908              LDR      r1,|L47.52|
000012  6ba0              LDR      r0,[r4,#0x38]  ; tid_fdfr_update_fr
000014  7809              LDRB     r1,[r1,#0]  ; g_bPowerDown
000016  4308              ORRS     r0,r0,r1
000018  d105              BNE      |L47.38|
;;;2615           tid_fdfr_update_fr = osThreadNew(fdfr_update_fr_thread, NULL, &attr);
00001a  466a              MOV      r2,sp
00001c  2100              MOVS     r1,#0
00001e  4806              LDR      r0,|L47.56|
000020  f7fffffe          BL       osThreadNew
000024  63a0              STR      r0,[r4,#0x38]  ; tid_fdfr_update_fr
                  |L47.38|
;;;2616   
;;;2617   }
000026  b00a              ADD      sp,sp,#0x28
000028  bd10              POP      {r4,pc}
;;;2618   
                          ENDP

00002a  0000              DCW      0x0000
                  |L47.44|
                          DCD      ||area_number.123||+0x60
                  |L47.48|
                          DCD      ||.data||
                  |L47.52|
                          DCD      g_bPowerDown
                  |L47.56|
                          DCD      fdfr_update_fr_thread

                          AREA ||i.fdfr_update_fr_thr||, CODE, READONLY, ALIGN=2

                  fdfr_update_fr_thr PROC
;;;2517   extern float g_nFaceL2;
;;;2518   void fdfr_update_fr_thr(u8 user_id)
000000  b5fe              PUSH     {r1-r7,lr}
;;;2519   {
000002  4606              MOV      r6,r0
;;;2520       kdp_e2e_face_variables *vars_cur = kdp_e2e_get_face_variables();
000004  f7fffffe          BL       kdp_e2e_get_face_variables
000008  4604              MOV      r4,r0
;;;2521   
;;;2522   //    kdp_e2e_db_extra_data tmp;
;;;2523   //    kdp_e2e_db_extra_data *vars_db = &tmp;
;;;2524   //    kdp_e2e_db_extra_read(kdp_app_db_find_exist_id(user_id), vars_db, sizeof(*vars_db));
;;;2525       
;;;2526       u16 valid_fm0 = 0, valid_fm1 = 0, type = 0;
00000a  2000              MOVS     r0,#0
00000c  f8ad0000          STRH     r0,[sp,#0]
000010  f8ad0004          STRH     r0,[sp,#4]
000014  f8ad0008          STRH     r0,[sp,#8]
;;;2527       s32 r1 = kdp_e2e_db_get_user_info(user_id, &valid_fm0, &valid_fm1, &type);
000018  ab02              ADD      r3,sp,#8
00001a  aa01              ADD      r2,sp,#4
00001c  4669              MOV      r1,sp
00001e  4630              MOV      r0,r6
000020  f7fffffe          BL       kdp_e2e_db_get_user_info
;;;2528       if(r1 != E2E_OK) return;
000024  2800              CMP      r0,#0
000026  d119              BNE      |L48.92|
;;;2529       
;;;2530       u8 fmap = 0;
;;;2531   
;;;2532   #if (CFG_FLASH_DB_NIR_ONLY == NO)    
;;;2533       if( valid_fm0 == 1 && valid_fm1 == 1)   fmap = 1;
;;;2534       else if( valid_fm0 == 5 && valid_fm1 == 5)  fmap = 5;
;;;2535       else if( valid_fm0 == 1 )   fmap = 1;
;;;2536   #else
;;;2537       if(valid_fm0 == 1 || valid_fm0 == 5) fmap = valid_fm0;
000028  f8bd0000          LDRH     r0,[sp,#0]
00002c  2500              MOVS     r5,#0                 ;2530
00002e  2801              CMP      r0,#1
000030  d001              BEQ      |L48.54|
000032  2805              CMP      r0,#5
000034  d100              BNE      |L48.56|
                  |L48.54|
000036  b2c5              UXTB     r5,r0
                  |L48.56|
;;;2538   #endif
;;;2539       
;;;2540       if( vars_cur->pre_add == AI_TYPE_UPDATE_FMAP)
000038  7820              LDRB     r0,[r4,#0]
00003a  2805              CMP      r0,#5
00003c  d10e              BNE      |L48.92|
;;;2541       {
;;;2542           vars_cur->pre_add = CFG_AI_TYPE;
00003e  2003              MOVS     r0,#3
000040  7020              STRB     r0,[r4,#0]
;;;2543                   
;;;2544           u16 find_id_idx = kdp_app_db_find_exist_id(user_id);
000042  4630              MOV      r0,r6
000044  f7fffffe          BL       kdp_app_db_find_exist_id
;;;2545           kdp_app_db_set_last_register_id_preprocess(find_id_idx, FALSE );
000048  2100              MOVS     r1,#0
00004a  f7fffffe          BL       kdp_app_db_set_last_register_id_preprocess
00004e  4904              LDR      r1,|L48.96|
;;;2546           kl520_api_face_set_add_mode(FACE_ADD_MODE_1_FACE);
000050  2001              MOVS     r0,#1
000052  7088              STRB     r0,[r1,#2]
;;;2547   
;;;2548           if (KL520_FACE_OK == _kl520_api_fdfr_add(user_id, fmap))
000054  4629              MOV      r1,r5
000056  4630              MOV      r0,r6
000058  f7fffffe          BL       _kl520_api_fdfr_add
                  |L48.92|
;;;2549           {
;;;2550               dbg_msg_algo("[update rgb user db]user_id = 0x%x, fmap=%d",user_id, fmap);
;;;2551           }
;;;2552       }
;;;2553   #if (USE_RECOG_FR_UPDATE == YES)
;;;2554       else
;;;2555       {
;;;2556           if(fmap == 5)
;;;2557           {
;;;2558               u32 tick = osKernelGetTickCount();
;;;2559               if(tick % 10 != 3) return; //update once every ten times
;;;2560   
;;;2561               //dbg_msg_algo ("update db, nir mode:%d, fq:%.3f, min dist:%.3f.",\
;;;2562                   vars_cur->nir_mode, fq->face_score, g_nFaceL2);
;;;2563               if(vars_cur->nir_mode != IR_FEW) return; //only indoor mode
;;;2564   
;;;2565               if(g_nFaceL2 > 0.6f) return; //if distance is too big
;;;2566   
;;;2567   #if (USE_RGB_FR_IN_1054 == YES)
;;;2568               if(vars_cur->rgb_nir_fr_flag == 1) return; //if using rgb for fr.
;;;2569               if(vars_cur->face_pose_cur_val < 1.0f) return; //if pose not very good
;;;2570   #endif
;;;2571   
;;;2572               //check face quality
;;;2573   #if (CFG_REUSE_PREPROC == 1)
;;;2574               struct face_quality_result_s* fq = kdp_e2e_get_face_quality();
;;;2575               struct facedet_result_s *n1_fd = kdp_e2e_get_n1_fd();
;;;2576               struct landmark_result_s *n1_lm = kdp_e2e_get_n1_lm();
;;;2577               struct kdp_img_cfg *img_cfg = kdp_e2e_get_img_cfg(MIPI_CAM_NIR);
;;;2578               kl520_measure_stamp(E_MEASURE_NIR_QUALITY_STR);
;;;2579               int ret = kdp_model_face_quality(fq, img_cfg, n1_fd, n1_lm);
;;;2580               kl520_measure_stamp(E_MEASURE_NIR_QUALITY_END);
;;;2581               if(ret != KDP_MODEL_OK) return;
;;;2582   #else
;;;2583               struct face_quality_result_s* fq = kdp_e2e_get_face_quality();
;;;2584   #endif
;;;2585               if(fq->face_score < 0.5f) return; //if quality is not good
;;;2586   
;;;2587               u16 find_id_idx = kdp_app_db_find_exist_id(user_id);
;;;2588               if(find_id_idx >= MAX_USER) return; //if not a valid user.
;;;2589   
;;;2590               //dbg_msg_algo("update db for :%d.", find_id_idx);
;;;2591               if( KL520_FACE_OK == _kl520_api_fr_fmap_update_db(find_id_idx, fmap) ) { //update 5th
;;;2592                   dbg_msg_algo("db update ok user_id = 0x%x", user_id);
;;;2593               }
;;;2594           }
;;;2595       }
;;;2596   
;;;2597   #endif
;;;2598   }
00005c  bdfe              POP      {r1-r7,pc}
;;;2599   
                          ENDP

00005e  0000              DCW      0x0000
                  |L48.96|
                          DCD      ||.data||

                          AREA ||i.fdfr_update_fr_thread||, CODE, READONLY, ALIGN=2

                  fdfr_update_fr_thread PROC
;;;2599   
;;;2600   void fdfr_update_fr_thread(void *arg){
000000  4c03              LDR      r4,|L49.16|
;;;2601   
;;;2602       fdfr_update_fr_thr(m_curr_user_id);
000002  7920              LDRB     r0,[r4,#4]  ; m_curr_user_id
000004  f7fffffe          BL       fdfr_update_fr_thr
;;;2603       //dbg_msg_algo("db update ok, thread exit,  user_id = 0x%x",m_curr_user_id);
;;;2604       tid_fdfr_update_fr = NULL;
000008  2000              MOVS     r0,#0
;;;2605       osThreadExit();
00000a  63a0              STR      r0,[r4,#0x38]  ; tid_fdfr_update_fr
00000c  f7fffffe          BL       osThreadExit
;;;2606   }
;;;2607   
                          ENDP

                  |L49.16|
                          DCD      ||.data||

                          AREA ||i.get_enroll_customize_uid||, CODE, READONLY, ALIGN=2

                  get_enroll_customize_uid PROC
;;;234    
;;;235    u8 get_enroll_customize_uid(void)
000000  4801              LDR      r0,|L50.8|
;;;236    {
;;;237        return _enroll_customize_uid;
000002  79c0              LDRB     r0,[r0,#7]  ; _enroll_customize_uid
;;;238    }
000004  4770              BX       lr
;;;239    
                          ENDP

000006  0000              DCW      0x0000
                  |L50.8|
                          DCD      ||.data||

                          AREA ||i.get_enroll_overwrite_flag||, CODE, READONLY, ALIGN=2

                  get_enroll_overwrite_flag PROC
;;;244    
;;;245    u8 get_enroll_overwrite_flag(void)
000000  4801              LDR      r0,|L51.8|
;;;246    {
;;;247        return _enroll_overwrite_flag;
000002  7a00              LDRB     r0,[r0,#8]  ; _enroll_overwrite_flag
;;;248    }
000004  4770              BX       lr
;;;249    
                          ENDP

000006  0000              DCW      0x0000
                  |L51.8|
                          DCD      ||.data||

                          AREA ||i.get_user_com_event_id||, CODE, READONLY, ALIGN=1

                  get_user_com_event_id PROC
;;;195    static osEventFlagsId_t _fdr_event_id = NULL;
;;;196    __WEAK extern osEventFlagsId_t get_user_com_event_id(void) {return NULL;}
000000  2000              MOVS     r0,#0
000002  4770              BX       lr
;;;197    
                          ENDP


                          AREA ||i.get_user_db_offset||, CODE, READONLY, ALIGN=2

                  get_user_db_offset PROC
;;;252    
;;;253    u8 get_user_db_offset(void)
000000  4801              LDR      r0,|L53.8|
;;;254    {
;;;255        return user_db_offset;
000002  7c00              LDRB     r0,[r0,#0x10]  ; user_db_offset
;;;256    }
000004  4770              BX       lr
;;;257    
                          ENDP

000006  0000              DCW      0x0000
                  |L53.8|
                          DCD      ||.data||

                          AREA ||i.is_enroll_customize_uid||, CODE, READONLY, ALIGN=2

                  is_enroll_customize_uid PROC
;;;223    
;;;224    u8 is_enroll_customize_uid(void)
000000  4803              LDR      r0,|L54.16|
;;;225    {
;;;226        if(_enroll_customize_uid == 0xff) return 0;
000002  79c0              LDRB     r0,[r0,#7]  ; _enroll_customize_uid
000004  28ff              CMP      r0,#0xff
000006  d001              BEQ      |L54.12|
;;;227        else return 1;
000008  2001              MOVS     r0,#1
;;;228    }
00000a  4770              BX       lr
                  |L54.12|
00000c  2000              MOVS     r0,#0                 ;226
00000e  4770              BX       lr
;;;229    
                          ENDP

                  |L54.16|
                          DCD      ||.data||

                          AREA ||i.kdp_app_db_get_db_idx||, CODE, READONLY, ALIGN=2

                  kdp_app_db_get_db_idx PROC
;;;348    
;;;349    u8  kdp_app_db_get_db_idx(u8 user_id)
000000  4902              LDR      r1,|L55.12|
;;;350    {
;;;351    #ifdef CUSTOMIZE_DB_OFFSET
;;;352    #ifdef CUSTOMIZE_OFFSET_FUNC
;;;353        //call customer's specific map func
;;;354    #else
;;;355        return user_id - user_db_offset;
000002  7c09              LDRB     r1,[r1,#0x10]  ; user_db_offset
000004  1a40              SUBS     r0,r0,r1
000006  b2c0              UXTB     r0,r0
;;;356    #endif
;;;357    #else
;;;358        return user_id - KDP_DB_DEFAULT_OFFSET;
;;;359    #endif
;;;360    }
000008  4770              BX       lr
;;;361                
                          ENDP

00000a  0000              DCW      0x0000
                  |L55.12|
                          DCD      ||.data||

                          AREA ||i.kdp_third_party_aec||, CODE, READONLY, ALIGN=1

                  kdp_third_party_aec PROC
;;;4133   
;;;4134   s32 kdp_third_party_aec(uint8_t* p_img)
000000  2000              MOVS     r0,#0
;;;4135   {
;;;4136       return 0;
;;;4137   }
000002  4770              BX       lr
;;;4138   
                          ENDP


                          AREA ||i.kl520_api_add_wait_and_get||, CODE, READONLY, ALIGN=2

                  kl520_api_add_wait_and_get PROC
;;;3368   
;;;3369   int kl520_api_add_wait_and_get(void)
000000  b510              PUSH     {r4,lr}
;;;3370   {
000002  b0a0              SUB      sp,sp,#0x80
;;;3371       int ret = KL520_APP_FLAG_FDFR_ERR;
;;;3372       u8 face_id = 0;
000004  2000              MOVS     r0,#0
000006  f88d007c          STRB     r0,[sp,#0x7c]
;;;3373       u32 events = 0;
;;;3374       system_info t_sys_info = { 0 };
00000a  217c              MOVS     r1,#0x7c
00000c  4668              MOV      r0,sp
00000e  f7fffffe          BL       __aeabi_memclr4
;;;3375   #if (E2E_N1_ONLY_STRUCTURE_ENABLE == YES)
;;;3376       while( 1 )
;;;3377       {
;;;3378           events = osEventFlagsWait( kl520_api_get_event(), KL520_APP_FLAG_FDFR | KL520_DEVICE_FLAG_ERR, osFlagsWaitAny, 100); // 100ms
;;;3379           dbg_msg_console("[%s] event: %#X", __func__, events);
;;;3380           if( events == 0xfffffffe ) {
;;;3381               kl520_face_recognition_note();
;;;3382               continue;
;;;3383               
;;;3384           }
;;;3385           else
;;;3386           {
;;;3387               break;
;;;3388           }
;;;3389       }
;;;3390   #else
;;;3391       events = wait_event(kl520_api_get_event(), KL520_APP_FLAG_FDFR | KL520_DEVICE_FLAG_ERR | KL520_APP_THREAD_ERR);
000012  f7fffffe          BL       kl520_api_get_event
000016  f2411107          MOV      r1,#0x1107
00001a  f7fffffe          BL       wait_event
;;;3392   #endif
;;;3393       
;;;3394   
;;;3395       //dbg_msg_console("[%s] events=%x", __func__, events);
;;;3396       if(events == KL520_DEVICE_FLAG_ERR)
00001e  f5b07f80          CMP      r0,#0x100
000022  d02f              BEQ      |L57.132|
;;;3397       {
;;;3398           ret = kl520_api_get_device_info(&t_sys_info);
;;;3399           dbg_msg_err("[%s], DEVICE ERROR, ret=0x%x", __func__, ret);
;;;3400           kl520_api_free_device_info(&t_sys_info);
;;;3401           ret = KL520_FACE_FAIL; //device error terminate
;;;3402       }
;;;3403       else
;;;3404       {
;;;3405           ret = kl520_api_face_get_result(&face_id);
000024  a81f              ADD      r0,sp,#0x7c
000026  f7fffffe          BL       kl520_api_face_get_result
00002a  0004              MOVS     r4,r0
;;;3406           if (KL520_FACE_OK == ret)
;;;3407           {
;;;3408               m_curr_face_id = face_id;
00002c  483a              LDR      r0,|L57.280|
00002e  d037              BEQ      |L57.160|
;;;3409   //        #if CFG_SHOW_IMG_IN_CONSOLE == YES
;;;3410   //            preset_face_id = face_id;
;;;3411   //        #endif
;;;3412               dbg_msg_console("[%s], KL520_FACE_OK, face_id=0x%x", __func__, face_id);
;;;3413           }
;;;3414           else if(KL520_FACE_EXIST == ret)
000030  2c07              CMP      r4,#7
000032  d03b              BEQ      |L57.172|
;;;3415           {
;;;3416   		   //zcy add for return user id
;;;3417   		   m_curr_face_id = face_id;
;;;3418   		   dbg_msg_console("[%s], KL520_FACE_EXIST, face_id=0x%x", __func__, face_id);
;;;3419              
;;;3420           }
;;;3421           else if(KL520_FACE_FULL == ret)
000034  2c09              CMP      r4,#9
000036  d042              BEQ      |L57.190|
;;;3422           {
;;;3423               dbg_msg_console("[%s], user database is fulled!", __func__);
;;;3424           }
;;;3425           else if(KL520_FACE_TOO_FAR == ret)
000038  2c0c              CMP      r4,#0xc
00003a  d043              BEQ      |L57.196|
;;;3426           {
;;;3427               dbg_msg_console("[%s], Face too Far!", __func__);
;;;3428           }
;;;3429           else if(KL520_FACE_TOO_NEAR == ret)
00003c  2c0d              CMP      r4,#0xd
00003e  d044              BEQ      |L57.202|
;;;3430           {
;;;3431               dbg_msg_console("[%s], Face too NEAR!", __func__);
;;;3432           }
;;;3433           else if(KL520_FACE_WAIT_DONT_MOVE == ret)
000040  2c0e              CMP      r4,#0xe
000042  d045              BEQ      |L57.208|
;;;3434           {
;;;3435               dbg_msg_console("[%s], Face add stage, Wait! Don't move!", __func__);
;;;3436           }
;;;3437           else if(KL520_FACE_BADPOSE == ret)
000044  2c0a              CMP      r4,#0xa
000046  d046              BEQ      |L57.214|
;;;3438           {
;;;3439               dbg_msg_console("[%s], bad pose!", __func__);
;;;3440           }
;;;3441           else if(KL520_FACE_MASK == ret)
000048  2c11              CMP      r4,#0x11
00004a  d047              BEQ      |L57.220|
;;;3442           {
;;;3443               dbg_msg_console("[%s], Mask on face!", __func__);
;;;3444           }
;;;3445           else if(KL520_FACE_EYE_CLOSED == ret)
00004c  2c13              CMP      r4,#0x13
00004e  d048              BEQ      |L57.226|
;;;3446           {
;;;3447               dbg_msg_console("[%s], Eye closed!", __func__);
;;;3448           }
;;;3449           else if(KL520_FACE_TOOUP == ret)
000050  2c15              CMP      r4,#0x15
000052  d049              BEQ      |L57.232|
;;;3450           {
;;;3451               dbg_msg_console("[%s], Face too UP!", __func__);
;;;3452           }
;;;3453           else if(KL520_FACE_TOODOWN == ret)
000054  2c16              CMP      r4,#0x16
000056  d04a              BEQ      |L57.238|
;;;3454           {
;;;3455               dbg_msg_console("[%s], Face too DOWN!", __func__);
;;;3456           }
;;;3457           else if(KL520_FACE_TOOLEFT == ret)
000058  2c17              CMP      r4,#0x17
00005a  d04b              BEQ      |L57.244|
;;;3458           {
;;;3459               dbg_msg_console("[%s], Face too LEFT!", __func__);
;;;3460           }
;;;3461           else if(KL520_FACE_TOORIGHT == ret)
00005c  2c18              CMP      r4,#0x18
00005e  d04c              BEQ      |L57.250|
;;;3462           {
;;;3463               dbg_msg_console("[%s], Face too RIGHT!", __func__);
;;;3464           }
;;;3465           else if(KL520_FACE_LOW_QUALITY == ret)
000060  2c19              CMP      r4,#0x19
000062  d04d              BEQ      |L57.256|
;;;3466           {
;;;3467               dbg_msg_console("[%s], Please let the face more close to the sensor!", __func__);
;;;3468           }
;;;3469           else if(KL520_FACE_CALLIB_FAIL == ret)
000064  2c1b              CMP      r4,#0x1b
000066  d04e              BEQ      |L57.262|
;;;3470           {
;;;3471               dbg_msg_console("[%s], MP calllibration fail!", __func__);
;;;3472           }
;;;3473           else if(KL520_FACE_ATTACK == ret)
000068  2c1e              CMP      r4,#0x1e
00006a  d04f              BEQ      |L57.268|
;;;3474           {
;;;3475               dbg_msg_console("[%s], Face attack!", __func__);
;;;3476           }
;;;3477           else if(KL520_FACE_NOFACE == ret)
00006c  2c04              CMP      r4,#4
00006e  d050              BEQ      |L57.274|
;;;3478           {
;;;3479               dbg_msg_console("[%s], No face!", __func__);
;;;3480           }
;;;3481           else if(KL520_FACE_TIMEOUT == ret)
000070  2c06              CMP      r4,#6
000072  d04e              BEQ      |L57.274|
;;;3482           {
;;;3483               dbg_msg_console("[%s], No face!", __func__);
;;;3484           }
;;;3485           else
;;;3486           {
;;;3487               dbg_msg_console("ERROR, ret=0x%x", ret);
000074  4622              MOV      r2,r4
000076  a129              ADR      r1,|L57.284|
                  |L57.120|
000078  2001              MOVS     r0,#1                 ;3483
00007a  f7fffffe          BL       kdp_level_printf
                  |L57.126|
;;;3488           }
;;;3489       }
;;;3490       return ret;
;;;3491   }
00007e  b020              ADD      sp,sp,#0x80
000080  4620              MOV      r0,r4                 ;3490
000082  bd10              POP      {r4,pc}
                  |L57.132|
000084  4668              MOV      r0,sp                 ;3398
000086  f7fffffe          BL       kl520_api_get_device_info
00008a  4603              MOV      r3,r0                 ;3398
00008c  4a28              LDR      r2,|L57.304|
00008e  a129              ADR      r1,|L57.308|
000090  2002              MOVS     r0,#2                 ;3399
000092  f7fffffe          BL       kdp_level_printf
000096  4668              MOV      r0,sp                 ;3400
000098  f7fffffe          BL       kl520_api_free_device_info
00009c  2402              MOVS     r4,#2                 ;3401
00009e  e7ee              B        |L57.126|
                  |L57.160|
0000a0  f89d307c          LDRB     r3,[sp,#0x7c]         ;3408
0000a4  7183              STRB     r3,[r0,#6]            ;3408
0000a6  4a22              LDR      r2,|L57.304|
0000a8  a12a              ADR      r1,|L57.340|
0000aa  e004              B        |L57.182|
                  |L57.172|
0000ac  f89d307c          LDRB     r3,[sp,#0x7c]         ;3417
0000b0  4a1f              LDR      r2,|L57.304|
0000b2  7183              STRB     r3,[r0,#6]            ;3417
0000b4  a130              ADR      r1,|L57.376|
                  |L57.182|
0000b6  2001              MOVS     r0,#1                 ;3418
0000b8  f7fffffe          BL       kdp_level_printf
0000bc  e7df              B        |L57.126|
                  |L57.190|
0000be  4a1c              LDR      r2,|L57.304|
0000c0  a137              ADR      r1,|L57.416|
0000c2  e7d9              B        |L57.120|
                  |L57.196|
0000c4  4a1a              LDR      r2,|L57.304|
0000c6  a13f              ADR      r1,|L57.452|
0000c8  e7d6              B        |L57.120|
                  |L57.202|
0000ca  4a19              LDR      r2,|L57.304|
0000cc  a143              ADR      r1,|L57.476|
0000ce  e7d3              B        |L57.120|
                  |L57.208|
0000d0  4a17              LDR      r2,|L57.304|
0000d2  a148              ADR      r1,|L57.500|
0000d4  e7d0              B        |L57.120|
                  |L57.214|
0000d6  4a16              LDR      r2,|L57.304|
0000d8  a151              ADR      r1,|L57.544|
0000da  e7cd              B        |L57.120|
                  |L57.220|
0000dc  4a14              LDR      r2,|L57.304|
0000de  a155              ADR      r1,|L57.564|
0000e0  e7ca              B        |L57.120|
                  |L57.226|
0000e2  4a13              LDR      r2,|L57.304|
0000e4  a159              ADR      r1,|L57.588|
0000e6  e7c7              B        |L57.120|
                  |L57.232|
0000e8  4a11              LDR      r2,|L57.304|
0000ea  a15d              ADR      r1,|L57.608|
0000ec  e7c4              B        |L57.120|
                  |L57.238|
0000ee  4a10              LDR      r2,|L57.304|
0000f0  a161              ADR      r1,|L57.632|
0000f2  e7c1              B        |L57.120|
                  |L57.244|
0000f4  4a0e              LDR      r2,|L57.304|
0000f6  a166              ADR      r1,|L57.656|
0000f8  e7be              B        |L57.120|
                  |L57.250|
0000fa  4a0d              LDR      r2,|L57.304|
0000fc  a16a              ADR      r1,|L57.680|
0000fe  e7bb              B        |L57.120|
                  |L57.256|
000100  4a0b              LDR      r2,|L57.304|
000102  a16f              ADR      r1,|L57.704|
000104  e7b8              B        |L57.120|
                  |L57.262|
000106  4a0a              LDR      r2,|L57.304|
000108  a17b              ADR      r1,|L57.760|
00010a  e7b5              B        |L57.120|
                  |L57.268|
00010c  4a08              LDR      r2,|L57.304|
00010e  a182              ADR      r1,|L57.792|
000110  e7b2              B        |L57.120|
                  |L57.274|
000112  4a07              LDR      r2,|L57.304|
000114  a186              ADR      r1,|L57.816|
000116  e7af              B        |L57.120|
;;;3492   
                          ENDP

                  |L57.280|
                          DCD      ||.data||
                  |L57.284|
00011c  4552524f          DCB      "ERROR, ret=0x%x\r\n",0
000120  522c2072
000124  65743d30
000128  7825780d
00012c  0a00    
00012e  00                DCB      0
00012f  00                DCB      0
                  |L57.304|
                          DCD      ||area_number.123||+0x90
                  |L57.308|
000134  5b25735d          DCB      "[%s], DEVICE ERROR, ret=0x%x\r\n",0
000138  2c204445
00013c  56494345
000140  20455252
000144  4f522c20
000148  7265743d
00014c  30782578
000150  0d0a00  
000153  00                DCB      0
                  |L57.340|
000154  5b25735d          DCB      "[%s], KL520_FACE_OK, face_id=0x%x\r\n",0
000158  2c204b4c
00015c  3532305f
000160  46414345
000164  5f4f4b2c
000168  20666163
00016c  655f6964
000170  3d307825
000174  780d0a00
                  |L57.376|
000178  5b25735d          DCB      "[%s], KL520_FACE_EXIST, face_id=0x%x\r\n",0
00017c  2c204b4c
000180  3532305f
000184  46414345
000188  5f455849
00018c  53542c20
000190  66616365
000194  5f69643d
000198  30782578
00019c  0d0a00  
00019f  00                DCB      0
                  |L57.416|
0001a0  5b25735d          DCB      "[%s], user database is fulled!\r\n",0
0001a4  2c207573
0001a8  65722064
0001ac  61746162
0001b0  61736520
0001b4  69732066
0001b8  756c6c65
0001bc  64210d0a
0001c0  00      
0001c1  00                DCB      0
0001c2  00                DCB      0
0001c3  00                DCB      0
                  |L57.452|
0001c4  5b25735d          DCB      "[%s], Face too Far!\r\n",0
0001c8  2c204661
0001cc  63652074
0001d0  6f6f2046
0001d4  6172210d
0001d8  0a00    
0001da  00                DCB      0
0001db  00                DCB      0
                  |L57.476|
0001dc  5b25735d          DCB      "[%s], Face too NEAR!\r\n",0
0001e0  2c204661
0001e4  63652074
0001e8  6f6f204e
0001ec  45415221
0001f0  0d0a00  
0001f3  00                DCB      0
                  |L57.500|
0001f4  5b25735d          DCB      "[%s], Face add stage, Wait! Don't move!\r\n",0
0001f8  2c204661
0001fc  63652061
000200  64642073
000204  74616765
000208  2c205761
00020c  69742120
000210  446f6e27
000214  74206d6f
000218  7665210d
00021c  0a00    
00021e  00                DCB      0
00021f  00                DCB      0
                  |L57.544|
000220  5b25735d          DCB      "[%s], bad pose!\r\n",0
000224  2c206261
000228  6420706f
00022c  7365210d
000230  0a00    
000232  00                DCB      0
000233  00                DCB      0
                  |L57.564|
000234  5b25735d          DCB      "[%s], Mask on face!\r\n",0
000238  2c204d61
00023c  736b206f
000240  6e206661
000244  6365210d
000248  0a00    
00024a  00                DCB      0
00024b  00                DCB      0
                  |L57.588|
00024c  5b25735d          DCB      "[%s], Eye closed!\r\n",0
000250  2c204579
000254  6520636c
000258  6f736564
00025c  210d0a00
                  |L57.608|
000260  5b25735d          DCB      "[%s], Face too UP!\r\n",0
000264  2c204661
000268  63652074
00026c  6f6f2055
000270  50210d0a
000274  00      
000275  00                DCB      0
000276  00                DCB      0
000277  00                DCB      0
                  |L57.632|
000278  5b25735d          DCB      "[%s], Face too DOWN!\r\n",0
00027c  2c204661
000280  63652074
000284  6f6f2044
000288  4f574e21
00028c  0d0a00  
00028f  00                DCB      0
                  |L57.656|
000290  5b25735d          DCB      "[%s], Face too LEFT!\r\n",0
000294  2c204661
000298  63652074
00029c  6f6f204c
0002a0  45465421
0002a4  0d0a00  
0002a7  00                DCB      0
                  |L57.680|
0002a8  5b25735d          DCB      "[%s], Face too RIGHT!\r\n",0
0002ac  2c204661
0002b0  63652074
0002b4  6f6f2052
0002b8  49474854
0002bc  210d0a00
                  |L57.704|
0002c0  5b25735d          DCB      "[%s], Please let the face more close to the sensor!\r\n"
0002c4  2c20506c
0002c8  65617365
0002cc  206c6574
0002d0  20746865
0002d4  20666163
0002d8  65206d6f
0002dc  72652063
0002e0  6c6f7365
0002e4  20746f20
0002e8  74686520
0002ec  73656e73
0002f0  6f72210d
0002f4  0a      
0002f5  00                DCB      0
0002f6  00                DCB      0
0002f7  00                DCB      0
                  |L57.760|
0002f8  5b25735d          DCB      "[%s], MP calllibration fail!\r\n",0
0002fc  2c204d50
000300  2063616c
000304  6c6c6962
000308  72617469
00030c  6f6e2066
000310  61696c21
000314  0d0a00  
000317  00                DCB      0
                  |L57.792|
000318  5b25735d          DCB      "[%s], Face attack!\r\n",0
00031c  2c204661
000320  63652061
000324  74746163
000328  6b210d0a
00032c  00      
00032d  00                DCB      0
00032e  00                DCB      0
00032f  00                DCB      0
                  |L57.816|
000330  5b25735d          DCB      "[%s], No face!\r\n",0
000334  2c204e6f
000338  20666163
00033c  65210d0a
000340  00      
000341  00                DCB      0
000342  00                DCB      0
000343  00                DCB      0

                          AREA ||i.kl520_api_face_add||, CODE, READONLY, ALIGN=2

                  kl520_api_face_add PROC
;;;3602   
;;;3603   int kl520_api_face_add(short x, short y, short w, short h, kl520_face_add_type type)
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;3604   {
;;;3605       s32 ret = 0;
;;;3606   
;;;3607       if ((FACE_MODE_NONE != m_face_mode) && (FACE_MODE_ADD != m_face_mode) &&
000004  4c2e              LDR      r4,|L58.192|
000006  b09b              SUB      sp,sp,#0x6c           ;3604
000008  461e              MOV      r6,r3                 ;3604
00000a  7aa0              LDRB     r0,[r4,#0xa]  ; m_face_mode
00000c  f8dd90a0          LDR      r9,[sp,#0xa0]         ;3604
000010  4692              MOV      r10,r2                ;3604
000012  468b              MOV      r11,r1                ;3604
;;;3608           (FACE_MODE_ENG_CAL != m_face_mode)) {
;;;3609           dbg_msg_api("Err Add");
;;;3610           return -1;
000014  f04f38ff          MOV      r8,#0xffffffff
000018  b118              CBZ      r0,|L58.34|
00001a  2801              CMP      r0,#1                 ;3607
00001c  d001              BEQ      |L58.34|
00001e  2806              CMP      r0,#6                 ;3608
000020  d14c              BNE      |L58.188|
                  |L58.34|
;;;3611       }
;;;3612   
;;;3613       if( m_face_db_add_mode == FACE_ADD_MODE_IN_DB )
;;;3614       {
;;;3615           u8 total_id_num;
;;;3616           u8 face_status[MAX_USER];
;;;3617           u8 db_size = MAX_USER;
;;;3618   
;;;3619           kl520_api_face_query_all(&total_id_num, &face_status[0]);
;;;3620           dbg_msg_api("kl520_api_face_add total_id_num=%u", total_id_num);
;;;3621           if((total_id_num >= db_size) && (is_enroll_customize_uid() == 0))
;;;3622           {
;;;3623           #ifndef AUTO_DELETE_USER_ENABLE
;;;3624               m_api_fdfr_ctx.state = FDFR_STATUS_FULL;
000022  4d27              LDR      r5,|L58.192|
000024  78e0              LDRB     r0,[r4,#3]            ;3613  ; m_face_db_add_mode
000026  2706              MOVS     r7,#6                 ;3607
000028  3574              ADDS     r5,r5,#0x74
00002a  b950              CBNZ     r0,|L58.66|
00002c  4669              MOV      r1,sp                 ;3619
00002e  a819              ADD      r0,sp,#0x64           ;3619
000030  f7fffffe          BL       kl520_api_face_query_all
000034  f89d0064          LDRB     r0,[sp,#0x64]         ;3621
000038  2864              CMP      r0,#0x64              ;3621
00003a  d302              BCC      |L58.66|
00003c  f7fffffe          BL       is_enroll_customize_uid
000040  b198              CBZ      r0,|L58.106|
                  |L58.66|
;;;3625               set_event(kl520_api_get_event(), KL520_APP_FLAG_FDFR_ERR);
;;;3626               return 0;
;;;3627           #else
;;;3628               //delete all users
;;;3629               _kl520_api_fdfr_del_user(1, 0);
;;;3630           #endif
;;;3631           }
;;;3632       }
;;;3633   
;;;3634       kl520_api_fdfr_model_init();
000042  f7fffffe          BL       kl520_api_fdfr_model_init
;;;3635   //    if ((kdp_e2e_prop_get2(flow_mode) < FLOW_MODE_SIM_VIRTUAL))
;;;3636       {
;;;3637           ret = _kl520_api_face_preexecute(x, y, w, h);
000046  4633              MOV      r3,r6
000048  4652              MOV      r2,r10
00004a  4659              MOV      r1,r11
00004c  981b              LDR      r0,[sp,#0x6c]
00004e  f7fffffe          BL       _kl520_api_face_preexecute
000052  0006              MOVS     r6,r0
;;;3638           if(ret != 0)// device error
000054  d010              BEQ      |L58.120|
;;;3639           {
;;;3640               set_event(kl520_api_get_event(), KL520_DEVICE_FLAG_ERR);
000056  f7fffffe          BL       kl520_api_get_event
00005a  f44f7180          MOV      r1,#0x100
00005e  f7fffffe          BL       set_event
;;;3641               return ret;
000062  4630              MOV      r0,r6
                  |L58.100|
;;;3642           }
;;;3643       }
;;;3644   
;;;3645       if (kdp_e2e_prop_get2(face_mode) == FACE_MODE_ENG_CAL) {
;;;3646           m_face_mode = FACE_MODE_ENG_CAL;
;;;3647       } else {
;;;3648           m_face_mode = FACE_MODE_ADD;
;;;3649           kdp_e2e_prop_set2(face_mode, m_face_mode);
;;;3650       }
;;;3651   
;;;3652       if(FACE_ADD_MODE_5_FACES == m_face_add_mode)
;;;3653           kl520_api_dp_five_face_enable();
;;;3654   
;;;3655       m_api_fdfr_ctx.reg_idx = type;
;;;3656   
;;;3657       if(!_fdr_opened) {
;;;3658           if(!_kl520_api_fdfr_try_create_thread()) return -1;
;;;3659       } else {
;;;3660           set_thread_event(m_api_fdfr_ctx.tid, FLAGS_API_FDFR_ADD_EVT);
;;;3661       }
;;;3662   
;;;3663   #if (KL520_QUICK_BOOT == NO)
;;;3664       osDelay(1);
;;;3665   #endif
;;;3666       return 0;
;;;3667   }
000064  b01f              ADD      sp,sp,#0x7c
000066  e8bd8ff0          POP      {r4-r11,pc}
                  |L58.106|
00006a  702f              STRB     r7,[r5,#0]            ;3624
00006c  f7fffffe          BL       kl520_api_get_event
000070  2102              MOVS     r1,#2                 ;3625
000072  f7fffffe          BL       set_event
000076  e01b              B        |L58.176|
                  |L58.120|
000078  f7fffffe          BL       kdp_e2e_prop_get_inst
00007c  6900              LDR      r0,[r0,#0x10]         ;3645
00007e  2806              CMP      r0,#6                 ;3645
000080  d009              BEQ      |L58.150|
000082  2001              MOVS     r0,#1                 ;3648
000084  72a0              STRB     r0,[r4,#0xa]          ;3648
000086  f7fffffe          BL       kdp_e2e_prop_get_inst
00008a  7aa1              LDRB     r1,[r4,#0xa]          ;3649  ; m_face_mode
00008c  6101              STR      r1,[r0,#0x10]         ;3649
                  |L58.142|
00008e  78a0              LDRB     r0,[r4,#2]            ;3652  ; m_face_add_mode
000090  2802              CMP      r0,#2                 ;3652
000092  d002              BEQ      |L58.154|
000094  e003              B        |L58.158|
                  |L58.150|
000096  72a7              STRB     r7,[r4,#0xa]          ;3646
000098  e7f9              B        |L58.142|
                  |L58.154|
00009a  f7fffffe          BL       kl520_api_dp_five_face_enable
                  |L58.158|
00009e  f8859008          STRB     r9,[r5,#8]            ;3655
0000a2  6aa0              LDR      r0,[r4,#0x28]         ;3657  ; _fdr_opened
0000a4  b130              CBZ      r0,|L58.180|
0000a6  f44f7100          MOV      r1,#0x200             ;3660
0000aa  6868              LDR      r0,[r5,#4]            ;3660  ; m_api_fdfr_ctx
0000ac  f7fffffe          BL       set_thread_event
                  |L58.176|
0000b0  2000              MOVS     r0,#0                 ;3666
0000b2  e7d7              B        |L58.100|
                  |L58.180|
0000b4  f7fffffe          BL       _kl520_api_fdfr_try_create_thread
0000b8  2800              CMP      r0,#0                 ;3658
0000ba  d1f9              BNE      |L58.176|
                  |L58.188|
0000bc  4640              MOV      r0,r8                 ;3658
0000be  e7d1              B        |L58.100|
;;;3668   
                          ENDP

                  |L58.192|
                          DCD      ||.data||

                          AREA ||i.kl520_api_face_add_ex||, CODE, READONLY, ALIGN=2

                  kl520_api_face_add_ex PROC
;;;3577   #if ( KL520_FACE_ADD_BMP == YES )
;;;3578   int kl520_api_face_add_ex(short x, short y, short w, short h, u8 f_bmp)
000000  b5f8              PUSH     {r3-r7,lr}
;;;3579   {
;;;3580       if(f_bmp == 0) return -1;
000002  f04f36ff          MOV      r6,#0xffffffff
000006  9c06              LDR      r4,[sp,#0x18]         ;3579
000008  b1d4              CBZ      r4,|L59.64|
;;;3581       face_add_bitmap = f_bmp;
00000a  4d0e              LDR      r5,|L59.68|
;;;3582       face_succ_index = 0xff;
00000c  27ff              MOVS     r7,#0xff
00000e  732c              STRB     r4,[r5,#0xc]          ;3581
000010  746f              STRB     r7,[r5,#0x11]
;;;3583   
;;;3584       if(f_bmp & (0x01 << FACE_ADD_TYPE_NORMAL)) {
000012  07e5              LSLS     r5,r4,#31
000014  d001              BEQ      |L59.26|
;;;3585           return kl520_api_face_add(x, y, w, h, FACE_ADD_TYPE_NORMAL);
000016  2400              MOVS     r4,#0
000018  e00e              B        |L59.56|
                  |L59.26|
;;;3586       }
;;;3587       if(f_bmp & (0x01 << FACE_ADD_TYPE_LEFT)) {
00001a  07a5              LSLS     r5,r4,#30
00001c  d501              BPL      |L59.34|
;;;3588           return kl520_api_face_add(x, y, w, h, FACE_ADD_TYPE_LEFT);
00001e  2401              MOVS     r4,#1
000020  e00a              B        |L59.56|
                  |L59.34|
;;;3589       }
;;;3590       if(f_bmp & (0x01 << FACE_ADD_TYPE_RIGHT)) {
000022  0765              LSLS     r5,r4,#29
000024  d501              BPL      |L59.42|
;;;3591           return kl520_api_face_add(x, y, w, h, FACE_ADD_TYPE_RIGHT);
000026  2402              MOVS     r4,#2
000028  e006              B        |L59.56|
                  |L59.42|
;;;3592       }
;;;3593       if(f_bmp & (0x01 << FACE_ADD_TYPE_UP)) {
00002a  0725              LSLS     r5,r4,#28
00002c  d501              BPL      |L59.50|
;;;3594           return kl520_api_face_add(x, y, w, h, FACE_ADD_TYPE_UP);
00002e  2403              MOVS     r4,#3
000030  e002              B        |L59.56|
                  |L59.50|
;;;3595       }
;;;3596       if(f_bmp & (0x01 << FACE_ADD_TYPE_DOWN)) {
000032  06e4              LSLS     r4,r4,#27
000034  d504              BPL      |L59.64|
;;;3597           return kl520_api_face_add(x, y, w, h, FACE_ADD_TYPE_DOWN);
000036  2404              MOVS     r4,#4
                  |L59.56|
000038  9400              STR      r4,[sp,#0]
00003a  f7fffffe          BL       kl520_api_face_add
;;;3598       }
;;;3599       return -1;
;;;3600   }
00003e  bdf8              POP      {r3-r7,pc}
                  |L59.64|
000040  4630              MOV      r0,r6                 ;3599
000042  bdf8              POP      {r3-r7,pc}
;;;3601   #endif
                          ENDP

                  |L59.68|
                          DCD      ||.data||

                          AREA ||i.kl520_api_face_add_get_timeout||, CODE, READONLY, ALIGN=2

                  kl520_api_face_add_get_timeout PROC
;;;3329   
;;;3330   int kl520_api_face_add_get_timeout(void)
000000  4801              LDR      r0,|L60.8|
;;;3331   {
;;;3332       return m_face_add_timeout;
000002  6ac0              LDR      r0,[r0,#0x2c]  ; m_face_add_timeout
;;;3333   }
000004  4770              BX       lr
;;;3334   
                          ENDP

000006  0000              DCW      0x0000
                  |L60.8|
                          DCD      ||.data||

                          AREA ||i.kl520_api_face_add_internal||, CODE, READONLY, ALIGN=2

                  kl520_api_face_add_internal PROC
;;;3493   
;;;3494   int kl520_api_face_add_internal(short x, short y, short w, short h, kl520_face_add_type type)
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;3495   {
000004  461f              MOV      r7,r3
;;;3496       int ret = KL520_FACE_OK;
;;;3497   
;;;3498       for(int i = 0; i < 200; i++) {
000006  9e0a              LDR      r6,[sp,#0x28]
000008  4690              MOV      r8,r2                 ;3495
00000a  4689              MOV      r9,r1                 ;3495
00000c  4682              MOV      r10,r0                ;3495
00000e  2500              MOVS     r5,#0
                  |L61.16|
;;;3499           int face_ret = kl520_api_face_add(x, y, w, h, type);
000010  463b              MOV      r3,r7
000012  4642              MOV      r2,r8
000014  4649              MOV      r1,r9
000016  4650              MOV      r0,r10
000018  9600              STR      r6,[sp,#0]
00001a  f7fffffe          BL       kl520_api_face_add
00001e  1c40              ADDS     r0,r0,#1
;;;3500           if(face_ret == -1) {
000020  d00b              BEQ      |L61.58|
;;;3501               ret = KL520_FACE_FAIL;
;;;3502           } else {
;;;3503               ret = kl520_api_add_wait_and_get();
000022  f7fffffe          BL       kl520_api_add_wait_and_get
000026  4604              MOV      r4,r0
;;;3504           }
;;;3505   
;;;3506           if((ret < KL520_FACE_BADPOSE || ret >= KL520_FACE_ATTACK) && (ret != KL520_FACE_NOFACE))
000028  380a              SUBS     r0,r0,#0xa
00002a  2814              CMP      r0,#0x14
00002c  d30a              BCC      |L61.68|
00002e  2c04              CMP      r4,#4
000030  d00a              BEQ      |L61.72|
;;;3507           {
;;;3508   #if CFG_SNAPSHOT_ENABLE == 1 || CFG_SNAPSHOT_ENABLE == 2
;;;3509               kl520_api_snapshot_adv_shot_5face();
;;;3510   #endif
;;;3511               osDelay(1);
000032  2001              MOVS     r0,#1
000034  f7fffffe          BL       osDelay
;;;3512               break;
000038  e00c              B        |L61.84|
                  |L61.58|
00003a  2402              MOVS     r4,#2                 ;3501
00003c  2001              MOVS     r0,#1                 ;3511
00003e  f7fffffe          BL       osDelay
000042  e008              B        |L61.86|
                  |L61.68|
;;;3513   //            return ret;
;;;3514           }
;;;3515           else if(ret == KL520_FACE_CALLIB_FAIL)
000044  2c1b              CMP      r4,#0x1b
000046  d006              BEQ      |L61.86|
                  |L61.72|
;;;3516           {
;;;3517               break;
;;;3518   //            return ret;
;;;3519           }
;;;3520           //for bad pose, retry
;;;3521           //dbg_msg_console("get bad pose for registration, retrying:%d", i+1);
;;;3522           osDelay(1);
000048  2001              MOVS     r0,#1
00004a  f7fffffe          BL       osDelay
00004e  1c6d              ADDS     r5,r5,#1
000050  2dc8              CMP      r5,#0xc8              ;3498
000052  dbdd              BLT      |L61.16|
                  |L61.84|
;;;3523       }
;;;3524   
;;;3525   #if (CFG_LED_CTRL_ENHANCE == 1)
;;;3526       kdp_e2e_nir_led_flag_off();
;;;3527       osDelay(100);
;;;3528   #endif
;;;3529   
;;;3530       if(ret != KL520_FACE_OK && is_enroll_customize_uid()) {
000054  b134              CBZ      r4,|L61.100|
                  |L61.86|
000056  f7fffffe          BL       is_enroll_customize_uid
00005a  b118              CBZ      r0,|L61.100|
00005c  4803              LDR      r0,|L61.108|
00005e  79c0              LDRB     r0,[r0,#7]  ; _enroll_customize_uid
;;;3531           // if oms overwrite fails, need restore
;;;3532           //restore the FLASH to DDR DB.
;;;3533           kdp_app_db_flash_to_ddr(get_enroll_customize_uid());
000060  f7fffffe          BL       kdp_app_db_flash_to_ddr
                  |L61.100|
;;;3534       }
;;;3535       
;;;3536       return ret;
000064  4620              MOV      r0,r4
;;;3537   }
000066  e8bd8ff8          POP      {r3-r11,pc}
;;;3538   
                          ENDP

00006a  0000              DCW      0x0000
                  |L61.108|
                          DCD      ||.data||

                          AREA ||i.kl520_api_face_add_internal_ex||, CODE, READONLY, ALIGN=1

                  kl520_api_face_add_internal_ex PROC
;;;3539   #if ( KL520_FACE_ADD_BMP == YES )
;;;3540   int kl520_api_face_add_internal_ex(short x, short y, short w, short h, u8 f_bmp)
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;3541   {
000004  4682              MOV      r10,r0
;;;3542       int ret = KL520_FACE_OK;
;;;3543   
;;;3544       u8 flag = 1;
;;;3545       for(int i = 0; i < 200; i++) {
;;;3546           if(flag) {
;;;3547               kl520_api_face_add_ex(x, y, w, h, f_bmp | 0x80);
000006  9e0a              LDR      r6,[sp,#0x28]
000008  461f              MOV      r7,r3                 ;3541
00000a  f0460080          ORR      r0,r6,#0x80
00000e  4690              MOV      r8,r2                 ;3541
000010  4689              MOV      r9,r1                 ;3541
000012  2500              MOVS     r5,#0                 ;3545
000014  9000              STR      r0,[sp,#0]            ;3545
000016  e003              B        |L62.32|
                  |L62.24|
;;;3548               flag = 0;
;;;3549           } else {
;;;3550               kl520_api_face_add_ex(x, y, w, h, f_bmp);
000018  463b              MOV      r3,r7
00001a  4642              MOV      r2,r8
00001c  4649              MOV      r1,r9
00001e  9600              STR      r6,[sp,#0]
                  |L62.32|
000020  4650              MOV      r0,r10
000022  f7fffffe          BL       kl520_api_face_add_ex
;;;3551           }
;;;3552           ret = kl520_api_add_wait_and_get();
000026  f7fffffe          BL       kl520_api_add_wait_and_get
00002a  4604              MOV      r4,r0
;;;3553   
;;;3554           if(ret < KL520_FACE_BADPOSE)
00002c  280a              CMP      r0,#0xa
00002e  da03              BGE      |L62.56|
;;;3555           {
;;;3556   #if CFG_SNAPSHOT_ENABLE == 1 || CFG_SNAPSHOT_ENABLE == 2
;;;3557               kl520_api_snapshot_adv_shot_5face();
;;;3558   #endif
;;;3559               osDelay(1);
000030  2001              MOVS     r0,#1
000032  f7fffffe          BL       osDelay
;;;3560               break;
000036  e007              B        |L62.72|
                  |L62.56|
;;;3561   //            return ret;
;;;3562           }
;;;3563           else if(ret == KL520_FACE_CALLIB_FAIL)
000038  2c1b              CMP      r4,#0x1b
00003a  d005              BEQ      |L62.72|
;;;3564           {
;;;3565               break;
;;;3566   //            return ret;
;;;3567           }
;;;3568           //for bad pose, retry
;;;3569           //dbg_msg_console("get bad pose for registration, retrying:%d", i+1);
;;;3570           osDelay(1);
00003c  2001              MOVS     r0,#1
00003e  f7fffffe          BL       osDelay
000042  1c6d              ADDS     r5,r5,#1
000044  2dc8              CMP      r5,#0xc8              ;3545
000046  dbe7              BLT      |L62.24|
                  |L62.72|
;;;3571       }
;;;3572   
;;;3573       return ret;
000048  4620              MOV      r0,r4
;;;3574   }
00004a  e8bd8ff8          POP      {r3-r11,pc}
;;;3575   #endif
                          ENDP


                          AREA ||i.kl520_api_face_add_set_timeout||, CODE, READONLY, ALIGN=2

                  kl520_api_face_add_set_timeout PROC
;;;3322   
;;;3323   int kl520_api_face_add_set_timeout(int timeout)
000000  4901              LDR      r1,|L63.8|
;;;3324   {
;;;3325       m_face_add_timeout = timeout;
;;;3326       dbg_msg_api("kl520_api_face_add_set_timeout=%d", m_face_add_timeout);
;;;3327       return FDFR_STATUS_OK;
000002  62c8              STR      r0,[r1,#0x2c]  ; m_face_add_timeout
000004  2000              MOVS     r0,#0
;;;3328   }
000006  4770              BX       lr
;;;3329   
                          ENDP

                  |L63.8|
                          DCD      ||.data||

                          AREA ||i.kl520_api_face_close||, CODE, READONLY, ALIGN=2

                  kl520_api_face_close PROC
;;;3848   
;;;3849   void kl520_api_face_close(void)
000000  b570              PUSH     {r4-r6,lr}
;;;3850   {
;;;3851       if(mutex_face_close) osMutexAcquire(mutex_face_close, osWaitForever);
000002  4c2c              LDR      r4,|L64.180|
000004  f04f35ff          MOV      r5,#0xffffffff
000008  6a20              LDR      r0,[r4,#0x20]         ;3850  ; mutex_face_close
00000a  b110              CBZ      r0,|L64.18|
00000c  4629              MOV      r1,r5
00000e  f7fffffe          BL       osMutexAcquire
                  |L64.18|
;;;3852       
;;;3853   //    u32 old_face_mode = m_face_mode;
;;;3854   
;;;3855       if((FACE_MODE_NONE == m_face_mode)
000012  7aa0              LDRB     r0,[r4,#0xa]  ; m_face_mode
000014  b1d0              CBZ      r0,|L64.76|
;;;3856       || (FACE_MODE_BUSY == m_face_mode))
000016  2808              CMP      r0,#8
000018  d018              BEQ      |L64.76|
;;;3857       {
;;;3858           kl520_api_reset_hmi_external_interface();
;;;3859           dbg_msg_api("face_close repeatedly or fdfr busy");
;;;3860       }
;;;3861       else
;;;3862       {
;;;3863           face_non_move_cnt = -1;
;;;3864           m_db_comp_fail_cnt = 0;
00001a  64e5              STR      r5,[r4,#0x4c]  ; face_non_move_cnt
00001c  2500              MOVS     r5,#0
;;;3865           m_face_mode = FACE_MODE_BUSY;
00001e  2008              MOVS     r0,#8
000020  61e5              STR      r5,[r4,#0x1c]  ; m_db_comp_fail_cnt
000022  72a0              STRB     r0,[r4,#0xa]
;;;3866           kdp_e2e_prop_set2(face_mode, m_face_mode);
000024  f7fffffe          BL       kdp_e2e_prop_get_inst
000028  7aa1              LDRB     r1,[r4,#0xa]  ; m_face_mode
;;;3867           _api_fdfr_thread_rst_priority();
00002a  6101              STR      r1,[r0,#0x10]
00002c  f7fffffe          BL       _api_fdfr_thread_rst_priority
000030  f7fffffe          BL       kl520_api_fdfr_stop
;;;3868   
;;;3869   #ifdef FDFR_KEEP_MS_WHEN_FACE_CLOSED
;;;3870   //        if ((old_face_mode == FACE_MODE_RECOGNITION) ||
;;;3871   //            (old_face_mode == FACE_MODE_ADD) ||
;;;3872   //            (old_face_mode == FACE_MODE_LIVENESS))
;;;3873   //            osDelay(KL520_FDFR_KEEP_MS);
;;;3874   #endif
;;;3875   
;;;3876           kl520_api_fdfr_terminate_thread();
;;;3877           kdp_e2e_db_abort_reg();
000034  f7fffffe          BL       kdp_e2e_db_abort_reg
;;;3878   
;;;3879           kl520_api_face_recognition_variable_reset();
000038  f7fffffe          BL       kl520_api_face_recognition_variable_reset
;;;3880   
;;;3881           face_reg_sts = 0;
;;;3882           kl520_api_dp_five_face_disable();
00003c  6725              STR      r5,[r4,#0x70]  ; face_reg_sts
00003e  f7fffffe          BL       kl520_api_dp_five_face_disable
;;;3883   
;;;3884   #ifdef FDFR_KEEP_MS_WHEN_FACE_CLOSED
;;;3885           if ((kdp_e2e_prop_get2(flow_mode) < FLOW_MODE_SIM_VIRTUAL))
000042  f7fffffe          BL       kdp_e2e_prop_get_inst
000046  68c0              LDR      r0,[r0,#0xc]
000048  b118              CBZ      r0,|L64.82|
00004a  e009              B        |L64.96|
                  |L64.76|
00004c  f7fffffe          BL       kl520_api_reset_hmi_external_interface
000050  e027              B        |L64.162|
                  |L64.82|
000052  6c20              LDR      r0,[r4,#0x40]         ;3858  ; kl520_fdfr_drawing_timer
000054  b110              CBZ      r0,|L64.92|
000056  f7fffffe          BL       osTimerDelete
00005a  6425              STR      r5,[r4,#0x40]         ;3858  ; kl520_fdfr_drawing_timer
                  |L64.92|
00005c  2002              MOVS     r0,#2                 ;3858
00005e  6460              STR      r0,[r4,#0x44]         ;3858  ; kl520_fdfr_drawing_timer_flag
                  |L64.96|
;;;3886               _kl520_fdfr_drawing_timer_delete();
;;;3887   #endif
;;;3888   
;;;3889           osDelay(1);
000060  2001              MOVS     r0,#1
000062  f7fffffe          BL       osDelay
;;;3890   
;;;3891           kl520_api_reset_hmi_external_interface();
000066  f7fffffe          BL       kl520_api_reset_hmi_external_interface
;;;3892           kdp_e2e_set_dual_cam_state(DUAL_IDENTICAL_CAM_CLOSED);
00006a  2000              MOVS     r0,#0
00006c  f7fffffe          BL       kdp_e2e_set_dual_cam_state
;;;3893   
;;;3894           if ((kdp_e2e_prop_get2(flow_mode) < FLOW_MODE_SIM_VIRTUAL))
000070  f7fffffe          BL       kdp_e2e_prop_get_inst
000074  68c0              LDR      r0,[r0,#0xc]
000076  b958              CBNZ     r0,|L64.144|
;;;3895           {
;;;3896               kdp_fb_mgr_free_write_buf(CAMERA_DEVICE_NIR_IDX);
000078  7860              LDRB     r0,[r4,#1]  ; nir_sensor_index
00007a  f7fffffe          BL       kdp_fb_mgr_free_write_buf
;;;3897               kdp_fb_mgr_free_write_buf(CAMERA_DEVICE_RGB_IDX);
00007e  7820              LDRB     r0,[r4,#0]  ; rgb_sensor_index
000080  f7fffffe          BL       kdp_fb_mgr_free_write_buf
;;;3898   
;;;3899               kdp_fb_mgr_free_inf_buf(CAMERA_DEVICE_NIR_IDX);
000084  7860              LDRB     r0,[r4,#1]  ; nir_sensor_index
000086  f7fffffe          BL       kdp_fb_mgr_free_inf_buf
;;;3900               kdp_fb_mgr_free_inf_buf(CAMERA_DEVICE_RGB_IDX);
00008a  7820              LDRB     r0,[r4,#0]  ; rgb_sensor_index
00008c  f7fffffe          BL       kdp_fb_mgr_free_inf_buf
                  |L64.144|
;;;3901           }
;;;3902   
;;;3903           osDelay(1);
000090  2001              MOVS     r0,#1
000092  f7fffffe          BL       osDelay
;;;3904   
;;;3905           m_face_mode = FACE_MODE_NONE;
000096  72a5              STRB     r5,[r4,#0xa]
;;;3906           kdp_e2e_prop_set2(face_mode, m_face_mode);
000098  f7fffffe          BL       kdp_e2e_prop_get_inst
00009c  7aa1              LDRB     r1,[r4,#0xa]  ; m_face_mode
;;;3907           m_face_add_mode = FACE_ADD_MODE_DEFAULT;
00009e  6101              STR      r1,[r0,#0x10]
0000a0  70a5              STRB     r5,[r4,#2]
                  |L64.162|
;;;3908       }
;;;3909       
;;;3910       if(mutex_face_close) osMutexRelease(mutex_face_close);
0000a2  6a20              LDR      r0,[r4,#0x20]  ; mutex_face_close
0000a4  2800              CMP      r0,#0
0000a6  d003              BEQ      |L64.176|
0000a8  e8bd4070          POP      {r4-r6,lr}
0000ac  f7ffbffe          B.W      osMutexRelease
                  |L64.176|
;;;3911   }
0000b0  bd70              POP      {r4-r6,pc}
;;;3912   
                          ENDP

0000b2  0000              DCW      0x0000
                  |L64.180|
                          DCD      ||.data||

                          AREA ||i.kl520_api_face_del||, CODE, READONLY, ALIGN=1

                  kl520_api_face_del PROC
;;;3263   
;;;3264   int kl520_api_face_del(u8 del_ctrl, u8 user_id)
000000  b570              PUSH     {r4-r6,lr}
;;;3265   {
;;;3266       int ret = -1;
;;;3267   
;;;3268       ret = _kl520_api_fdfr_del_user(del_ctrl, user_id);
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
000006  2402              MOVS     r4,#2
000008  f7fffffe          BL       kl520_api_fdfr_model_init
00000c  4631              MOV      r1,r6
00000e  4628              MOV      r0,r5
000010  f7fffffe          BL       kdp_e2e_db_delete
000014  b900              CBNZ     r0,|L65.24|
000016  2400              MOVS     r4,#0
                  |L65.24|
000018  4620              MOV      r0,r4
;;;3269   
;;;3270       return ret;
;;;3271   }
00001a  bd70              POP      {r4-r6,pc}
;;;3272   
                          ENDP


                          AREA ||i.kl520_api_face_get_add_mode||, CODE, READONLY, ALIGN=2

                  kl520_api_face_get_add_mode PROC
;;;3161   
;;;3162   kl520_face_add_mode kl520_api_face_get_add_mode(void)
000000  4801              LDR      r0,|L66.8|
;;;3163   {
;;;3164       return m_face_add_mode;
000002  7880              LDRB     r0,[r0,#2]  ; m_face_add_mode
;;;3165   }
000004  4770              BX       lr
;;;3166   
                          ENDP

000006  0000              DCW      0x0000
                  |L66.8|
                          DCD      ||.data||

                          AREA ||i.kl520_api_face_get_curr_face_id||, CODE, READONLY, ALIGN=2

                  kl520_api_face_get_curr_face_id PROC
;;;3363   
;;;3364   u8 kl520_api_face_get_curr_face_id(void)
000000  4801              LDR      r0,|L67.8|
;;;3365   {
;;;3366       return m_curr_face_id;
000002  7980              LDRB     r0,[r0,#6]  ; m_curr_face_id
;;;3367   }
000004  4770              BX       lr
;;;3368   
                          ENDP

000006  0000              DCW      0x0000
                  |L67.8|
                          DCD      ||.data||

                          AREA ||i.kl520_api_face_get_result||, CODE, READONLY, ALIGN=2

                  kl520_api_face_get_result PROC
;;;3171   
;;;3172   int kl520_api_face_get_result(u8* face_id)
000000  4927              LDR      r1,|L68.160|
;;;3173   {
;;;3174       int ret;
;;;3175       *face_id = m_curr_user_id;
000002  7909              LDRB     r1,[r1,#4]  ; m_curr_user_id
000004  7001              STRB     r1,[r0,#0]
;;;3176       switch (m_api_fdfr_ctx.state) {
000006  4826              LDR      r0,|L68.160|
000008  3074              ADDS     r0,r0,#0x74
00000a  f9900000          LDRSB    r0,[r0,#0]  ; m_api_fdfr_ctx
00000e  1cc0              ADDS     r0,r0,#3
000010  2823              CMP      r0,#0x23
000012  d243              BCS      |L68.156|
000014  e8dff000          TBB      [pc,r0]
000018  1c144212          DCB      0x1c,0x14,0x42,0x12
00001c  42421618          DCB      0x42,0x42,0x16,0x18
000020  1a204242          DCB      0x1a,0x20,0x42,0x42
000024  4242421e          DCB      0x42,0x42,0x42,0x1e
000028  26242228          DCB      0x26,0x24,0x22,0x28
00002c  2a2c2e30          DCB      0x2a,0x2c,0x2e,0x30
000030  42323436          DCB      0x42,0x32,0x34,0x36
000034  383a3c42          DCB      0x38,0x3a,0x3c,0x42
000038  423e4000          DCB      0x42,0x3e,0x40,0x00
;;;3177       case FDFR_STATUS_OK:
;;;3178           ret = KL520_FACE_OK;
00003c  2000              MOVS     r0,#0
;;;3179           break;
;;;3180       case FDFR_STATUS_TIMEOUT:
;;;3181           ret = KL520_FACE_TIMEOUT;
;;;3182           break;
;;;3183       case FDFR_STATUS_COMP_FAIL:
;;;3184           ret = KL520_FACE_DB_FAIL;
;;;3185           break;
;;;3186       case FDFR_STATUS_EXIST:
;;;3187           ret = KL520_FACE_EXIST;
;;;3188           break;
;;;3189       case FDFR_STATUS_NOFACE:
;;;3190           ret = KL520_FACE_NOFACE;
;;;3191           break;
;;;3192       case FDFR_STATUS_NOFACE_AND_TIMEOUT:
;;;3193           ret = KL520_FACE_NOFACE_AND_TIMEOUT;
;;;3194           break;
;;;3195       case FDFR_STATUS_BAD_POSE:
;;;3196           ret = KL520_FACE_BADPOSE;
;;;3197           break;
;;;3198       case FDFR_STATUS_FULL:
;;;3199           ret = KL520_FACE_FULL;
;;;3200           break;
;;;3201       case FDFR_STATUS_WAIT_DONT_MOVE:
;;;3202           ret = KL520_FACE_WAIT_DONT_MOVE;
;;;3203           break;
;;;3204       case FDFR_STATUS_TOO_NEAR:
;;;3205           ret = KL520_FACE_TOO_NEAR;
;;;3206           break;
;;;3207       case FDFR_STATUS_TOO_FAR:
;;;3208           ret = KL520_FACE_TOO_FAR;
;;;3209           break;
;;;3210       case FDFR_STATUS_INVALID:
;;;3211           ret = KL520_FACE_INVALID;
;;;3212           dbg_msg_api("[%s]state:%d", __func__, m_api_fdfr_ctx.state);
;;;3213           break;
;;;3214       case FDFR_STATUS_MASK:
;;;3215           ret = KL520_FACE_MASK;
;;;3216           break;
;;;3217       case FDFR_STATUS_EYE_CLOSE_STATUS_OPEN_EYE:
;;;3218           ret = KL520_FACE_EYE_CLOSE_STATUS_OPEN_EYE;
;;;3219           break;
;;;3220       case FDFR_STATUS_EYE_CLOSED:
;;;3221           ret = KL520_FACE_EYE_CLOSED;
;;;3222           break;
;;;3223       case FDFR_STATUS_EYE_CLOSE_UNKNOW_STATUS:
;;;3224           ret = KL520_FACE_EYE_CLOSE_UNKNOW_STATUS;
;;;3225           break;
;;;3226       case FDFR_STATUS_TOOUP:
;;;3227           ret = KL520_FACE_TOOUP;
;;;3228           break;
;;;3229       case FDFR_STATUS_TOODOWN:
;;;3230           ret = KL520_FACE_TOODOWN;
;;;3231           break;
;;;3232       case FDFR_STATUS_TOOLEFT:
;;;3233           ret = KL520_FACE_TOOLEFT;
;;;3234           break;
;;;3235       case FDFR_STATUS_TOORIGHT:
;;;3236           ret = KL520_FACE_TOORIGHT;
;;;3237           break;
;;;3238       case FDFR_STATUS_LOW_QUALITY:
;;;3239           ret = KL520_FACE_LOW_QUALITY;
;;;3240           break;
;;;3241       case FDFR_STATUS_CALLIB_FAIL:
;;;3242           ret = KL520_FACE_CALLIB_FAIL;
;;;3243           break;
;;;3244       case FDFR_STATUS_ATTACK:
;;;3245           ret = KL520_FACE_ATTACK;
;;;3246           break;
;;;3247       case FDFR_STATUS_EMPTY:
;;;3248           ret = KL520_FACE_EMPTY;
;;;3249           break;
;;;3250   #if CFG_COMPARE_1VS1 == YES
;;;3251       case FDFR_STATUS_NEXT:
;;;3252           ret = KL520_FACE_SEND_NEXT_IMAGE;
;;;3253           break;
;;;3254   #endif
;;;3255       default:
;;;3256           dbg_msg_api("[%s]state:%d", __func__, m_api_fdfr_ctx.state);
;;;3257           ret = KL520_FACE_FAIL;
;;;3258           break;
;;;3259       }
;;;3260   
;;;3261       return ret;
;;;3262   }
00003e  4770              BX       lr
000040  2006              MOVS     r0,#6                 ;3181
000042  4770              BX       lr
000044  2003              MOVS     r0,#3                 ;3184
000046  4770              BX       lr
000048  2007              MOVS     r0,#7                 ;3187
00004a  4770              BX       lr
00004c  2004              MOVS     r0,#4                 ;3190
00004e  4770              BX       lr
000050  2005              MOVS     r0,#5                 ;3193
000052  4770              BX       lr
000054  200a              MOVS     r0,#0xa               ;3196
000056  4770              BX       lr
000058  2009              MOVS     r0,#9                 ;3199
00005a  4770              BX       lr
00005c  200e              MOVS     r0,#0xe               ;3202
00005e  4770              BX       lr
000060  200d              MOVS     r0,#0xd               ;3205
000062  4770              BX       lr
000064  200c              MOVS     r0,#0xc               ;3208
000066  4770              BX       lr
000068  200b              MOVS     r0,#0xb               ;3211
00006a  4770              BX       lr
00006c  2011              MOVS     r0,#0x11              ;3215
00006e  4770              BX       lr
000070  2012              MOVS     r0,#0x12              ;3218
000072  4770              BX       lr
000074  2013              MOVS     r0,#0x13              ;3221
000076  4770              BX       lr
000078  2014              MOVS     r0,#0x14              ;3224
00007a  4770              BX       lr
00007c  2015              MOVS     r0,#0x15              ;3227
00007e  4770              BX       lr
000080  2016              MOVS     r0,#0x16              ;3230
000082  4770              BX       lr
000084  2017              MOVS     r0,#0x17              ;3233
000086  4770              BX       lr
000088  2018              MOVS     r0,#0x18              ;3236
00008a  4770              BX       lr
00008c  2019              MOVS     r0,#0x19              ;3239
00008e  4770              BX       lr
000090  201b              MOVS     r0,#0x1b              ;3242
000092  4770              BX       lr
000094  201e              MOVS     r0,#0x1e              ;3245
000096  4770              BX       lr
000098  2008              MOVS     r0,#8                 ;3248
00009a  4770              BX       lr
                  |L68.156|
00009c  2002              MOVS     r0,#2                 ;3257
00009e  4770              BX       lr
;;;3263   
                          ENDP

                  |L68.160|
                          DCD      ||.data||

                          AREA ||i.kl520_api_face_liveness||, CODE, READONLY, ALIGN=2

                  kl520_api_face_liveness PROC
;;;3710   
;;;3711   int kl520_api_face_liveness(short x, short y, short w, short h)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;3712   {
;;;3713       s32 ret = 0;
;;;3714       if (FACE_MODE_NONE != m_face_mode) {
000004  4c14              LDR      r4,|L69.88|
000006  4681              MOV      r9,r0                 ;3712
000008  461e              MOV      r6,r3                 ;3712
00000a  7aa0              LDRB     r0,[r4,#0xa]  ; m_face_mode
00000c  4617              MOV      r7,r2                 ;3712
00000e  4688              MOV      r8,r1                 ;3712
;;;3715           dbg_msg_api("Err Rec");
;;;3716           return -1;
000010  f04f35ff          MOV      r5,#0xffffffff
000014  b9e8              CBNZ     r0,|L69.82|
;;;3717       }
;;;3718   
;;;3719       m_face_mode = FACE_MODE_LIVENESS;
000016  2003              MOVS     r0,#3
000018  72a0              STRB     r0,[r4,#0xa]
;;;3720       kdp_e2e_prop_set2(face_mode, m_face_mode);
00001a  f7fffffe          BL       kdp_e2e_prop_get_inst
00001e  7aa1              LDRB     r1,[r4,#0xa]  ; m_face_mode
;;;3721   
;;;3722       kl520_api_fdfr_model_init();
000020  6101              STR      r1,[r0,#0x10]
000022  f7fffffe          BL       kl520_api_fdfr_model_init
;;;3723   //    if ((kdp_e2e_prop_get2(flow_mode) < FLOW_MODE_SIM_VIRTUAL))
;;;3724       {
;;;3725           ret = _kl520_api_face_preexecute(x, y, w, h);
000026  4633              MOV      r3,r6
000028  463a              MOV      r2,r7
00002a  4641              MOV      r1,r8
00002c  4648              MOV      r0,r9
00002e  f7fffffe          BL       _kl520_api_face_preexecute
000032  0004              MOVS     r4,r0
;;;3726           if(ret != 0)// device error
000034  d008              BEQ      |L69.72|
;;;3727           {
;;;3728               set_event(kl520_api_get_event(), KL520_DEVICE_FLAG_ERR);
000036  f7fffffe          BL       kl520_api_get_event
00003a  f44f7180          MOV      r1,#0x100
00003e  f7fffffe          BL       set_event
;;;3729               return ret;
000042  4620              MOV      r0,r4
                  |L69.68|
;;;3730           }
;;;3731       }
;;;3732       if (_kl520_api_fdfr_try_create_thread()) {
;;;3733       #if (KL520_QUICK_BOOT == NO)
;;;3734           set_thread_event(m_api_fdfr_ctx.tid, FLAGS_API_FDFR_LIVENESS_EVT);
;;;3735       #endif
;;;3736       } else {
;;;3737           return -1;
;;;3738       }
;;;3739   #if (KL520_QUICK_BOOT == NO)
;;;3740       osDelay(1);
;;;3741   #endif
;;;3742       return 0;
;;;3743   }
000044  e8bd87f0          POP      {r4-r10,pc}
                  |L69.72|
000048  f7fffffe          BL       _kl520_api_fdfr_try_create_thread
00004c  b108              CBZ      r0,|L69.82|
00004e  2000              MOVS     r0,#0                 ;3742
000050  e7f8              B        |L69.68|
                  |L69.82|
000052  4628              MOV      r0,r5                 ;3737
000054  e7f6              B        |L69.68|
;;;3744   
                          ENDP

000056  0000              DCW      0x0000
                  |L69.88|
                          DCD      ||.data||

                          AREA ||i.kl520_api_face_liveness_get_timeout||, CODE, READONLY, ALIGN=2

                  kl520_api_face_liveness_get_timeout PROC
;;;3353   
;;;3354   int kl520_api_face_liveness_get_timeout(void)
000000  4801              LDR      r0,|L70.8|
;;;3355   {
;;;3356       return m_face_liveness_timeout;
000002  6b40              LDR      r0,[r0,#0x34]  ; m_face_liveness_timeout
;;;3357   }
000004  4770              BX       lr
;;;3358   
                          ENDP

000006  0000              DCW      0x0000
                  |L70.8|
                          DCD      ||.data||

                          AREA ||i.kl520_api_face_liveness_set_timeout||, CODE, READONLY, ALIGN=2

                  kl520_api_face_liveness_set_timeout PROC
;;;3346   
;;;3347   int kl520_api_face_liveness_set_timeout(int timeout)
000000  4901              LDR      r1,|L71.8|
;;;3348   {
;;;3349       m_face_liveness_timeout = timeout;
;;;3350       dbg_msg_api("m_face_liveness_timeout=%d", m_face_liveness_timeout);
;;;3351       return FDFR_STATUS_OK;
000002  6348              STR      r0,[r1,#0x34]  ; m_face_liveness_timeout
000004  2000              MOVS     r0,#0
;;;3352   }
000006  4770              BX       lr
;;;3353   
                          ENDP

                  |L71.8|
                          DCD      ||.data||

                          AREA ||i.kl520_api_face_preempt_init||, CODE, READONLY, ALIGN=1

                  kl520_api_face_preempt_init PROC
;;;619    
;;;620    s32 kl520_api_face_preempt_init(void)
000000  b510              PUSH     {r4,lr}
;;;621    {
;;;622    #define NUM_REPEAT_CAM_INIT (100)
;;;623        s32 ret = 0;
;;;624        u8 repeat = 0;
000002  2400              MOVS     r4,#0
                  |L72.4|
;;;625        while(1)
;;;626        {
;;;627            ret = kl520_api_face_preexecute_stage1();
000004  f7fffffe          BL       kl520_api_face_preexecute_stage1
;;;628    
;;;629            if (0 == ret)
000008  b918              CBNZ     r0,|L72.18|
;;;630            {
;;;631                ret = kl520_api_face_preexecute_stage2();
00000a  f7fffffe          BL       kl520_api_face_preexecute_stage2
00000e  2800              CMP      r0,#0
000010  d007              BEQ      |L72.34|
                  |L72.18|
;;;632            }
;;;633    
;;;634            if(ret == 0 || repeat > NUM_REPEAT_CAM_INIT){
000012  2c64              CMP      r4,#0x64
000014  d805              BHI      |L72.34|
000016  1c64              ADDS     r4,r4,#1
;;;635                dbg_msg_engineering("[%s], ret =%d, repeat =%d",__func__, ret, repeat);
;;;636                break;
;;;637            }
;;;638            else
;;;639                repeat++;
000018  b2e4              UXTB     r4,r4
;;;640    
;;;641            osDelay(2);
00001a  2002              MOVS     r0,#2
00001c  f7fffffe          BL       osDelay
000020  e7f0              B        |L72.4|
                  |L72.34|
;;;642        }
;;;643    
;;;644        return ret;
;;;645    }
000022  bd10              POP      {r4,pc}
;;;646    
                          ENDP


                          AREA ||i.kl520_api_face_preexecute_colse||, CODE, READONLY, ALIGN=1

                  kl520_api_face_preexecute_colse PROC
;;;582    
;;;583    s32 kl520_api_face_preexecute_colse(void)
000000  2000              MOVS     r0,#0
;;;584    {
;;;585        s32 ret = 0;
;;;586    
;;;587    #if (CFG_AI_TYPE == AI_TYPE_R1)
;;;588    
;;;589    #elif (CFG_AI_TYPE == AI_TYPE_R1N1)
;;;590    
;;;591    #elif (CFG_AI_TYPE == AI_TYPE_N1)
;;;592      if(m_face_mode == FACE_MODE_NONE){
;;;593            m_face_mode = FACE_MODE_RECOGNITION;    //temp 
;;;594            kl520_api_face_close();
;;;595      }
;;;596    #elif (CFG_AI_TYPE == AI_TYPE_N1R1)
;;;597    
;;;598    #endif
;;;599     
;;;600        return ret;
;;;601    }
000002  4770              BX       lr
;;;602    
                          ENDP


                          AREA ||i.kl520_api_face_preexecute_stage1||, CODE, READONLY, ALIGN=1

                  kl520_api_face_preexecute_stage1 PROC
;;;457     
;;;458    s32 kl520_api_face_preexecute_stage1(void)
000000  b510              PUSH     {r4,lr}
;;;459    {
;;;460        s32 ret = 0;
;;;461    
;;;462    #if (CFG_AI_TYPE == AI_TYPE_R1)
;;;463        kl520_measure_stamp(E_MEASURE_RGB_INIT);
;;;464        ret = kl520_api_cam_disp_ctrl(API_CTRL_CAM_OPEN, CAMERA_DEVICE_RGB_IDX, PERMANENT_NULL);
;;;465        kl520_measure_stamp(E_MEASURE_RGB_INIT_DONE);
;;;466        if(ret != 0) return ret;
;;;467    #elif (CFG_AI_TYPE == AI_TYPE_R1N1)
;;;468        kl520_measure_stamp(E_MEASURE_RGB_INIT);
;;;469        ret = kl520_api_cam_disp_ctrl(API_CTRL_CAM_OPEN, CAMERA_DEVICE_RGB_IDX, PERMANENT_NULL);
;;;470        kl520_measure_stamp(E_MEASURE_RGB_INIT_DONE);
;;;471        if(ret != 0) return ret;
;;;472        osDelay(1);
;;;473        kl520_measure_stamp(E_MEASURE_NIR_INIT);
;;;474        ret = kl520_api_cam_disp_ctrl(API_CTRL_CAM_OPEN, CAMERA_DEVICE_NIR_IDX, PERMANENT_NULL);
;;;475        kl520_measure_stamp(E_MEASURE_NIR_INIT_DONE);
;;;476        if(ret != 0) return ret;
;;;477    #elif (CFG_AI_TYPE == AI_TYPE_N1)
;;;478        kl520_measure_stamp(E_MEASURE_NIR_INIT);
;;;479        ret = kl520_api_cam_disp_ctrl(API_CTRL_CAM_OPEN, CAMERA_DEVICE_NIR_IDX, PERMANENT_NULL);
;;;480        kl520_measure_stamp(E_MEASURE_NIR_INIT_DONE);
;;;481        if(ret != 0) return ret;
;;;482    #elif (CFG_AI_TYPE == AI_TYPE_N1R1)
;;;483    
;;;484    #if (CFG_SENSOR_0_TYPE >= 0)
;;;485    #if (CFG_PALM_PRINT_MODE == 1)
;;;486        if ((!kdp_is_palm_mode() && (MIPI_CAM_NIR == 0)) || \
;;;487            (kdp_is_palm_mode() && (MIPI_CAM_RGB == 0)))
;;;488    #endif
;;;489        {
;;;490            kl520_measure_stamp((MIPI_CAM_NIR==0)?E_MEASURE_NIR_INIT:E_MEASURE_RGB_INIT);
;;;491            ret = kl520_api_cam_disp_ctrl(API_CTRL_CAM_OPEN, 0, PERMANENT_NULL);
000002  2200              MOVS     r2,#0
000004  4611              MOV      r1,r2
000006  2030              MOVS     r0,#0x30
000008  f7fffffe          BL       kl520_api_cam_disp_ctrl
;;;492            kl520_measure_stamp((MIPI_CAM_NIR==0)?E_MEASURE_NIR_INIT_DONE:E_MEASURE_RGB_INIT_DONE);
;;;493            if(ret != 0) return ret;
00000c  2800              CMP      r0,#0
00000e  d109              BNE      |L74.36|
;;;494        }
;;;495    
;;;496    #endif
;;;497          
;;;498    
;;;499        osDelay(5);
000010  2005              MOVS     r0,#5
000012  f7fffffe          BL       osDelay
;;;500    
;;;501    #if (CFG_SENSOR_1_TYPE >= 0)
;;;502    #if (CFG_PALM_PRINT_MODE == 1)
;;;503        if ((!kdp_is_palm_mode() && (MIPI_CAM_NIR == 1)) || \
;;;504            (kdp_is_palm_mode() && (MIPI_CAM_RGB == 1)))
;;;505    #endif
;;;506        {
;;;507            kl520_measure_stamp((MIPI_CAM_RGB==1)?E_MEASURE_RGB_INIT:E_MEASURE_NIR_INIT);
;;;508            ret = kl520_api_cam_disp_ctrl(API_CTRL_CAM_OPEN, 1, PERMANENT_NULL);
000016  2200              MOVS     r2,#0
000018  2101              MOVS     r1,#1
00001a  e8bd4010          POP      {r4,lr}
00001e  2030              MOVS     r0,#0x30
000020  f7ffbffe          B.W      kl520_api_cam_disp_ctrl
                  |L74.36|
;;;509            kl520_measure_stamp((MIPI_CAM_RGB==1)?E_MEASURE_RGB_INIT_DONE:E_MEASURE_NIR_INIT_DONE);
;;;510            if(ret != 0) return ret;
;;;511        }
;;;512    #endif
;;;513        
;;;514    #endif
;;;515    
;;;516        return ret;
;;;517    }
000024  bd10              POP      {r4,pc}
;;;518    
                          ENDP


                          AREA ||i.kl520_api_face_preexecute_stage2||, CODE, READONLY, ALIGN=1

                  kl520_api_face_preexecute_stage2 PROC
;;;518    
;;;519    s32 kl520_api_face_preexecute_stage2(void)
000000  b510              PUSH     {r4,lr}
;;;520    {
;;;521        s32 ret = 0;
;;;522    
;;;523    #if (CFG_AI_TYPE == AI_TYPE_R1)
;;;524        kl520_measure_stamp(E_MEASURE_RGB_STR);
;;;525        ret = kl520_api_cam_disp_ctrl(API_CTRL_CAM_STAR, CAMERA_DEVICE_RGB_IDX, PERMANENT_NULL);
;;;526        if(ret != 0) return ret;
;;;527        kl520_measure_stamp(E_MEASURE_RGB_END);
;;;528    #elif (CFG_AI_TYPE == AI_TYPE_R1N1)
;;;529        kl520_measure_stamp(E_MEASURE_RGB_STR);
;;;530        ret = kl520_api_cam_disp_ctrl(API_CTRL_CAM_STAR, CAMERA_DEVICE_RGB_IDX, PERMANENT_NULL);
;;;531        if(ret != 0) return ret;
;;;532        kl520_measure_stamp(E_MEASURE_RGB_END);
;;;533        kl520_measure_stamp(E_MEASURE_NIR_STR);
;;;534        ret = kl520_api_cam_disp_ctrl(API_CTRL_CAM_STAR, CAMERA_DEVICE_NIR_IDX, PERMANENT_NULL);
;;;535        if(ret != 0) return ret;
;;;536        kl520_measure_stamp(E_MEASURE_NIR_END);
;;;537    #elif (CFG_AI_TYPE == AI_TYPE_N1)
;;;538        kl520_measure_stamp(E_MEASURE_NIR_STR);
;;;539        ret = kl520_api_cam_disp_ctrl(API_CTRL_CAM_STAR, CAMERA_DEVICE_NIR_IDX, PERMANENT_NULL);
;;;540        if(ret != 0) return ret;
;;;541        kl520_measure_stamp(E_MEASURE_NIR_END);
;;;542    #elif (CFG_AI_TYPE == AI_TYPE_N1R1)
;;;543    
;;;544    #if (CFG_SENSOR_0_TYPE >= 0)
;;;545    #if (CFG_PALM_PRINT_MODE == 1)
;;;546        if ((!kdp_is_palm_mode() && (MIPI_CAM_NIR == 0)) || \
;;;547            (kdp_is_palm_mode() && (MIPI_CAM_RGB == 0)))
;;;548    #endif
;;;549        {
;;;550            kl520_measure_stamp((MIPI_CAM_NIR==0)?E_MEASURE_NIR_STR:E_MEASURE_RGB_INIT);
;;;551            ret = kl520_api_cam_disp_ctrl(API_CTRL_CAM_STAR, 0, PERMANENT_NULL);
000002  2200              MOVS     r2,#0
000004  4611              MOV      r1,r2
000006  200c              MOVS     r0,#0xc
000008  f7fffffe          BL       kl520_api_cam_disp_ctrl
;;;552            if(ret != 0) return ret;
00000c  2800              CMP      r0,#0
00000e  d106              BNE      |L75.30|
;;;553            kl520_measure_stamp((MIPI_CAM_NIR==0)?E_MEASURE_NIR_END:E_MEASURE_RGB_END);
;;;554        }
;;;555    #endif
;;;556    #if (CFG_SENSOR_1_TYPE >= 0)
;;;557    #if (CFG_PALM_PRINT_MODE == 1)
;;;558        if ((!kdp_is_palm_mode() && (MIPI_CAM_NIR == 1)) || \
;;;559            (kdp_is_palm_mode() && (MIPI_CAM_RGB == 1)))
;;;560    #endif
;;;561        {
;;;562            kl520_measure_stamp((MIPI_CAM_RGB==1)?E_MEASURE_RGB_STR:E_MEASURE_NIR_STR);
;;;563            ret = kl520_api_cam_disp_ctrl(API_CTRL_CAM_STAR, 1, PERMANENT_NULL);
000010  2200              MOVS     r2,#0
000012  2101              MOVS     r1,#1
000014  e8bd4010          POP      {r4,lr}
000018  200c              MOVS     r0,#0xc
00001a  f7ffbffe          B.W      kl520_api_cam_disp_ctrl
                  |L75.30|
;;;564            if(ret != 0) return ret;
;;;565            kl520_measure_stamp((MIPI_CAM_RGB==1)?E_MEASURE_RGB_END:E_MEASURE_NIR_END);
;;;566        }
;;;567    #endif
;;;568        
;;;569    #endif
;;;570    
;;;571        kl520_measure_stamp(E_MEASURE_FACE_PREEXEC_END);
;;;572    
;;;573        return ret;
;;;574    }
00001e  bd10              POP      {r4,pc}
;;;575    
                          ENDP


                          AREA ||i.kl520_api_face_preexecute_stage3||, CODE, READONLY, ALIGN=1

                  kl520_api_face_preexecute_stage3 PROC
;;;575    
;;;576    s32 kl520_api_face_preexecute_stage3(void)
000000  2000              MOVS     r0,#0
;;;577    {
;;;578        s32 ret = E2E_OK;
;;;579        
;;;580        return ret;
;;;581    }
000002  4770              BX       lr
;;;582    
                          ENDP


                          AREA ||i.kl520_api_face_query||, CODE, READONLY, ALIGN=1

                  kl520_api_face_query PROC
;;;3272   
;;;3273   int kl520_api_face_query(u8 face_id)
000000  b53e              PUSH     {r1-r5,lr}
;;;3274   {
;;;3275       int ret = -1;
;;;3276   
;;;3277       ret = _kl520_api_fdfr_query_user(face_id);
000002  4604              MOV      r4,r0
000004  2000              MOVS     r0,#0
000006  f8ad0000          STRH     r0,[sp,#0]
00000a  f8ad0008          STRH     r0,[sp,#8]
00000e  f8ad0004          STRH     r0,[sp,#4]
000012  f7fffffe          BL       kl520_api_fdfr_model_init
000016  ab01              ADD      r3,sp,#4
000018  aa02              ADD      r2,sp,#8
00001a  4669              MOV      r1,sp
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       kdp_e2e_db_get_user_info
000022  b938              CBNZ     r0,|L77.52|
000024  f8bd0000          LDRH     r0,[sp,#0]
000028  b120              CBZ      r0,|L77.52|
00002a  f8bd0004          LDRH     r0,[sp,#4]
00002e  b108              CBZ      r0,|L77.52|
000030  2007              MOVS     r0,#7
;;;3278   
;;;3279       return ret;
;;;3280   }
000032  bd3e              POP      {r1-r5,pc}
                  |L77.52|
000034  2008              MOVS     r0,#8
000036  bd3e              POP      {r1-r5,pc}
;;;3281   
                          ENDP


                          AREA ||i.kl520_api_face_query_all||, CODE, READONLY, ALIGN=1

                  kl520_api_face_query_all PROC
;;;3281   
;;;3282   int kl520_api_face_query_all(u8* total_id_num, u8* face_id)
000000  e92d43fe          PUSH     {r1-r9,lr}
;;;3283   {
000004  2600              MOVS     r6,#0
;;;3284       int ret = -1;
;;;3285   
;;;3286       ret = _kl520_api_fdfr_query_all(total_id_num, face_id);
000006  4607              MOV      r7,r0
000008  4688              MOV      r8,r1
00000a  4634              MOV      r4,r6
00000c  4635              MOV      r5,r6
00000e  f8ad6000          STRH     r6,[sp,#0]
000012  f8ad6008          STRH     r6,[sp,#8]
000016  f8ad6004          STRH     r6,[sp,#4]
00001a  f7fffffe          BL       kl520_api_fdfr_model_init
                  |L78.30|
00001e  b2a0              UXTH     r0,r4
000020  ab01              ADD      r3,sp,#4
000022  aa02              ADD      r2,sp,#8
000024  4669              MOV      r1,sp
000026  f7fffffe          BL       kdp_e2e_db_get_user_info_by_idx
00002a  b968              CBNZ     r0,|L78.72|
00002c  f8bd0000          LDRH     r0,[sp,#0]
000030  b150              CBZ      r0,|L78.72|
000032  f8bd0004          LDRH     r0,[sp,#4]
000036  2801              CMP      r0,#1
000038  d106              BNE      |L78.72|
00003a  4620              MOV      r0,r4
00003c  f7fffffe          BL       kdp_app_db_get_user_id
000040  f8080005          STRB     r0,[r8,r5]
000044  1c6d              ADDS     r5,r5,#1
000046  b2ed              UXTB     r5,r5
                  |L78.72|
000048  1c64              ADDS     r4,r4,#1
00004a  2c64              CMP      r4,#0x64
00004c  dbe7              BLT      |L78.30|
00004e  703d              STRB     r5,[r7,#0]
000050  4630              MOV      r0,r6
;;;3287   
;;;3288       return ret;
;;;3289   }
000052  e8bd83fe          POP      {r1-r9,pc}
;;;3290   
                          ENDP


                          AREA ||i.kl520_api_face_query_first_avail_user_idx||, CODE, READONLY, ALIGN=2

                  kl520_api_face_query_first_avail_user_idx PROC
;;;3290   
;;;3291   u8 kl520_api_face_query_first_avail_user_idx(void)
000000  b53e              PUSH     {r1-r5,lr}
;;;3292   {
;;;3293       #if CFG_FMAP_AP_CTRL_TYPE > EX_FM_DISABLE
;;;3294       if( m_face_db_add_mode == FACE_ADD_MODE_NO_DB )
000002  4814              LDR      r0,|L79.84|
000004  78c0              LDRB     r0,[r0,#3]  ; m_face_db_add_mode
000006  2801              CMP      r0,#1
000008  d012              BEQ      |L79.48|
;;;3295       {
;;;3296           return MAX_USER;
;;;3297       }
;;;3298       else
;;;3299       #endif
;;;3300       {
;;;3301           for (u16 i = 0; i < MAX_USER; ++i) {
00000a  2400              MOVS     r4,#0
00000c  ea4f0504          MOV.W    r5,r4
                  |L79.16|
000010  f8ad5000          STRH     r5,[sp,#0]
000014  f8ad5008          STRH     r5,[sp,#8]
000018  f8ad5004          STRH     r5,[sp,#4]
00001c  f7fffffe          BL       kl520_api_fdfr_model_init
000020  ab01              ADD      r3,sp,#4
000022  aa02              ADD      r2,sp,#8
000024  4669              MOV      r1,sp
000026  4620              MOV      r0,r4
000028  f7fffffe          BL       kdp_e2e_db_get_user_info_by_idx
00002c  b958              CBNZ     r0,|L79.70|
00002e  e001              B        |L79.52|
                  |L79.48|
000030  2064              MOVS     r0,#0x64              ;3296
;;;3302               if(KL520_FACE_EMPTY == _kl520_api_fdfr_query_user_is_added(i)) {
;;;3303                   return i;
;;;3304               }
;;;3305           }
;;;3306       }
;;;3307       return 0xff;
;;;3308   }
000032  bd3e              POP      {r1-r5,pc}
                  |L79.52|
000034  f8bd0000          LDRH     r0,[sp,#0]
000038  b118              CBZ      r0,|L79.66|
00003a  f8bd0004          LDRH     r0,[sp,#4]
00003e  2801              CMP      r0,#1
000040  d001              BEQ      |L79.70|
                  |L79.66|
000042  b2e0              UXTB     r0,r4                 ;3303
000044  bd3e              POP      {r1-r5,pc}
                  |L79.70|
000046  1c64              ADDS     r4,r4,#1
000048  b2a4              UXTH     r4,r4                 ;3301
00004a  2c64              CMP      r4,#0x64              ;3301
00004c  d3e0              BCC      |L79.16|
00004e  20ff              MOVS     r0,#0xff              ;3307
000050  bd3e              POP      {r1-r5,pc}
;;;3309   
                          ENDP

000052  0000              DCW      0x0000
                  |L79.84|
                          DCD      ||.data||

                          AREA ||i.kl520_api_face_query_user_idx||, CODE, READONLY, ALIGN=2

                  kl520_api_face_query_user_idx PROC
;;;3309   
;;;3310   u8 kl520_api_face_query_user_idx(u8 user_id)
000000  4902              LDR      r1,|L80.12|
;;;3311   {
;;;3312   //    unsigned int db_size = ARRAY_SIZE(m_sample_db);
;;;3313   //    {
;;;3314   //        for (int i = 0; i < db_size; i++) {
;;;3315   //            if(user_id == m_sample_db[i].db_user_id) {
;;;3316   //                return i;
;;;3317   //            }
;;;3318   //        }
;;;3319   //    }
;;;3320       return kdp_app_db_get_db_idx(user_id);
000002  7c09              LDRB     r1,[r1,#0x10]  ; user_db_offset
000004  1a40              SUBS     r0,r0,r1
000006  b2c0              UXTB     r0,r0
;;;3321   }
000008  4770              BX       lr
;;;3322   
                          ENDP

00000a  0000              DCW      0x0000
                  |L80.12|
                          DCD      ||.data||

                          AREA ||i.kl520_api_face_recognition||, CODE, READONLY, ALIGN=2

                  kl520_api_face_recognition PROC
;;;3668   
;;;3669   int kl520_api_face_recognition(short x, short y, short w, short h)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;3670   {
;;;3671       s32 ret = 0;
;;;3672       kl520_measure_stamp(E_MEASURE_API_FACE_REC_STR);
;;;3673   
;;;3674       if (FACE_MODE_NONE != m_face_mode) {
000004  4c15              LDR      r4,|L81.92|
000006  4681              MOV      r9,r0                 ;3670
000008  461d              MOV      r5,r3                 ;3670
00000a  7aa0              LDRB     r0,[r4,#0xa]  ; m_face_mode
00000c  4617              MOV      r7,r2                 ;3670
00000e  4688              MOV      r8,r1                 ;3670
;;;3675           dbg_msg_api("Err Rec");
;;;3676           return -1;
000010  f04f36ff          MOV      r6,#0xffffffff
000014  b9f8              CBNZ     r0,|L81.86|
;;;3677       }
;;;3678       
;;;3679   #ifdef DEV_TEST_VERSION
;;;3680       _face_recog_count++;
;;;3681   #endif
;;;3682   
;;;3683       kl520_api_fdfr_model_init();
000016  f7fffffe          BL       kl520_api_fdfr_model_init
;;;3684   //    if ((kdp_e2e_prop_get2(flow_mode) < FLOW_MODE_SIM_VIRTUAL))
;;;3685       {
;;;3686           ret = _kl520_api_face_preexecute(x, y, w, h);
00001a  462b              MOV      r3,r5
00001c  463a              MOV      r2,r7
00001e  4641              MOV      r1,r8
000020  4648              MOV      r0,r9
000022  f7fffffe          BL       _kl520_api_face_preexecute
000026  0005              MOVS     r5,r0
;;;3687           if(ret != 0)// device error
000028  d008              BEQ      |L81.60|
;;;3688           {
;;;3689               set_event(kl520_api_get_event(), KL520_DEVICE_FLAG_ERR);
00002a  f7fffffe          BL       kl520_api_get_event
00002e  f44f7180          MOV      r1,#0x100
000032  f7fffffe          BL       set_event
;;;3690               return ret;
000036  4628              MOV      r0,r5
                  |L81.56|
;;;3691           }
;;;3692       }
;;;3693   
;;;3694       m_face_appear = FALSE;
;;;3695       m_face_mode = FACE_MODE_RECOGNITION;
;;;3696       kdp_e2e_prop_set2(face_mode, m_face_mode);
;;;3697       
;;;3698       if (_kl520_api_fdfr_try_create_thread()) {
;;;3699       #if (KL520_QUICK_BOOT == NO)
;;;3700           set_thread_event(m_api_fdfr_ctx.tid, FLAGS_API_FDFR_RECOGNITION_EVT);
;;;3701       #endif
;;;3702       } else {
;;;3703           return -1;
;;;3704       }
;;;3705   #if (KL520_QUICK_BOOT == NO)
;;;3706       osDelay(1);
;;;3707   #endif
;;;3708       return 0;
;;;3709   }
000038  e8bd87f0          POP      {r4-r10,pc}
                  |L81.60|
00003c  2000              MOVS     r0,#0                 ;3694
00003e  7160              STRB     r0,[r4,#5]            ;3694
000040  2002              MOVS     r0,#2                 ;3695
000042  72a0              STRB     r0,[r4,#0xa]          ;3695
000044  f7fffffe          BL       kdp_e2e_prop_get_inst
000048  7aa1              LDRB     r1,[r4,#0xa]          ;3696  ; m_face_mode
00004a  6101              STR      r1,[r0,#0x10]         ;3698
00004c  f7fffffe          BL       _kl520_api_fdfr_try_create_thread
000050  b108              CBZ      r0,|L81.86|
000052  2000              MOVS     r0,#0                 ;3708
000054  e7f0              B        |L81.56|
                  |L81.86|
000056  4630              MOV      r0,r6                 ;3703
000058  e7ee              B        |L81.56|
;;;3710   
                          ENDP

00005a  0000              DCW      0x0000
                  |L81.92|
                          DCD      ||.data||

                          AREA ||i.kl520_api_face_recognition_get_timeout||, CODE, READONLY, ALIGN=2

                  kl520_api_face_recognition_get_timeout PROC
;;;3341   
;;;3342   int kl520_api_face_recognition_get_timeout(void)
000000  4801              LDR      r0,|L82.8|
;;;3343   {
;;;3344       return m_face_recognition_timeout;
000002  6b00              LDR      r0,[r0,#0x30]  ; m_face_recognition_timeout
;;;3345   }
000004  4770              BX       lr
;;;3346   
                          ENDP

000006  0000              DCW      0x0000
                  |L82.8|
                          DCD      ||.data||

                          AREA ||i.kl520_api_face_recognition_set_timeout||, CODE, READONLY, ALIGN=2

                  kl520_api_face_recognition_set_timeout PROC
;;;3334   
;;;3335   int kl520_api_face_recognition_set_timeout(int timeout)
000000  4901              LDR      r1,|L83.8|
;;;3336   {
;;;3337       m_face_recognition_timeout = timeout;
;;;3338       dbg_msg_api("m_face_recognition_timeout=%d", m_face_recognition_timeout);
;;;3339       return FDFR_STATUS_OK;
000002  6308              STR      r0,[r1,#0x30]  ; m_face_recognition_timeout
000004  2000              MOVS     r0,#0
;;;3340   }
000006  4770              BX       lr
;;;3341   
                          ENDP

                  |L83.8|
                          DCD      ||.data||

                          AREA ||i.kl520_api_face_recognition_test||, CODE, READONLY, ALIGN=2

                  kl520_api_face_recognition_test PROC
;;;3771   
;;;3772   int kl520_api_face_recognition_test(short x, short y, short w, short h)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;3773   {
;;;3774       s32 ret = 0;
;;;3775   
;;;3776       if (FACE_MODE_NONE != m_face_mode) {
000004  4c14              LDR      r4,|L84.88|
000006  4681              MOV      r9,r0                 ;3773
000008  461e              MOV      r6,r3                 ;3773
00000a  7aa0              LDRB     r0,[r4,#0xa]  ; m_face_mode
00000c  4617              MOV      r7,r2                 ;3773
00000e  4688              MOV      r8,r1                 ;3773
;;;3777           dbg_msg_api("Err Rec Test");
;;;3778           return -1;
000010  f04f35ff          MOV      r5,#0xffffffff
000014  b9e8              CBNZ     r0,|L84.82|
;;;3779       }
;;;3780       m_face_mode = FACE_MODE_RECOGNITION_TEST;
000016  2004              MOVS     r0,#4
000018  72a0              STRB     r0,[r4,#0xa]
;;;3781       kdp_e2e_prop_set2(face_mode, m_face_mode);
00001a  f7fffffe          BL       kdp_e2e_prop_get_inst
00001e  7aa1              LDRB     r1,[r4,#0xa]  ; m_face_mode
;;;3782   
;;;3783       kl520_api_fdfr_model_init();
000020  6101              STR      r1,[r0,#0x10]
000022  f7fffffe          BL       kl520_api_fdfr_model_init
;;;3784       ret = _kl520_api_face_preexecute(x, y, w, h);
000026  4633              MOV      r3,r6
000028  463a              MOV      r2,r7
00002a  4641              MOV      r1,r8
00002c  4648              MOV      r0,r9
00002e  f7fffffe          BL       _kl520_api_face_preexecute
000032  0004              MOVS     r4,r0
;;;3785       if(ret != 0)// device error
000034  d008              BEQ      |L84.72|
;;;3786       {
;;;3787           set_event(kl520_api_get_event(), KL520_DEVICE_FLAG_ERR);
000036  f7fffffe          BL       kl520_api_get_event
00003a  f44f7180          MOV      r1,#0x100
00003e  f7fffffe          BL       set_event
;;;3788           return ret;
000042  4620              MOV      r0,r4
                  |L84.68|
;;;3789       }
;;;3790       if (_kl520_api_fdfr_try_create_thread()) {
;;;3791       #if (KL520_QUICK_BOOT == NO)
;;;3792           set_thread_event(m_api_fdfr_ctx.tid, FLAGS_API_FDFR_RECOGNITION_TEST_EVT);
;;;3793       #endif
;;;3794       } else {
;;;3795           return -1;
;;;3796       }
;;;3797   #if (KL520_QUICK_BOOT == NO)
;;;3798       osDelay(1);
;;;3799   #endif
;;;3800       return 0;
;;;3801   }
000044  e8bd87f0          POP      {r4-r10,pc}
                  |L84.72|
000048  f7fffffe          BL       _kl520_api_fdfr_try_create_thread
00004c  b108              CBZ      r0,|L84.82|
00004e  2000              MOVS     r0,#0                 ;3800
000050  e7f8              B        |L84.68|
                  |L84.82|
000052  4628              MOV      r0,r5                 ;3795
000054  e7f6              B        |L84.68|
;;;3802   
                          ENDP

000056  0000              DCW      0x0000
                  |L84.88|
                          DCD      ||.data||

                          AREA ||i.kl520_api_face_recognition_variable_reset||, CODE, READONLY, ALIGN=2

                  kl520_api_face_recognition_variable_reset PROC
;;;367    extern osThreadId_t tid_rgb_led_gradually;
;;;368    static void kl520_api_face_recognition_variable_reset(void)
000000  b510              PUSH     {r4,lr}
;;;369    {
;;;370    #if (CFG_LED_CTRL_ENHANCE == 0)
;;;371        nir_led_close();
000002  f7fffffe          BL       nir_led_close
;;;372    #endif
;;;373    
;;;374    #if (CFG_AI_TYPE == AI_TYPE_R1N1 || CFG_AI_TYPE == AI_TYPE_R1)
;;;375        if(tid_rgb_led_gradually)
;;;376        {
;;;377            osThreadJoin(tid_rgb_led_gradually);
;;;378            tid_rgb_led_gradually = 0;
;;;379        }
;;;380    #endif
;;;381        
;;;382        rgb_led_close();
000006  f7fffffe          BL       rgb_led_close
;;;383    #if (CFG_LED_CTRL_ENHANCE == 1)
;;;384        kdp_e2e_nir_led_flag_off();
;;;385    #endif
;;;386        kdp_e2e_reset();
00000a  f7fffffe          BL       kdp_e2e_reset
;;;387        vote_score = 0;
00000e  4902              LDR      r1,|L85.24|
000010  2000              MOVS     r0,#0
000012  6488              STR      r0,[r1,#0x48]  ; vote_score
;;;388    }
000014  bd10              POP      {r4,pc}
;;;389    
                          ENDP

000016  0000              DCW      0x0000
                  |L85.24|
                          DCD      ||.data||

                          AREA ||i.kl520_api_face_set_add_mode||, CODE, READONLY, ALIGN=2

                  kl520_api_face_set_add_mode PROC
;;;3156   
;;;3157   void kl520_api_face_set_add_mode(kl520_face_add_mode mode)
000000  4901              LDR      r1,|L86.8|
;;;3158   {
;;;3159       m_face_add_mode = mode;
000002  7088              STRB     r0,[r1,#2]
;;;3160   }
000004  4770              BX       lr
;;;3161   
                          ENDP

000006  0000              DCW      0x0000
                  |L86.8|
                          DCD      ||.data||

                          AREA ||i.kl520_api_face_set_curr_face_id||, CODE, READONLY, ALIGN=2

                  kl520_api_face_set_curr_face_id PROC
;;;3358   
;;;3359   void kl520_api_face_set_curr_face_id(u8 curr_face_id)
000000  4901              LDR      r1,|L87.8|
;;;3360   {
;;;3361       m_curr_face_id = curr_face_id;
000002  7188              STRB     r0,[r1,#6]
;;;3362   }
000004  4770              BX       lr
;;;3363   
                          ENDP

000006  0000              DCW      0x0000
                  |L87.8|
                          DCD      ||.data||

                          AREA ||i.kl520_api_face_set_db_add_mode||, CODE, READONLY, ALIGN=2

                  kl520_api_face_set_db_add_mode PROC
;;;3166   
;;;3167   void kl520_api_face_set_db_add_mode(kl520_face_db_add_mode mode)
000000  4901              LDR      r1,|L88.8|
;;;3168   {
;;;3169       m_face_db_add_mode = mode;
000002  70c8              STRB     r0,[r1,#3]
;;;3170   }
000004  4770              BX       lr
;;;3171   
                          ENDP

000006  0000              DCW      0x0000
                  |L88.8|
                          DCD      ||.data||

                          AREA ||i.kl520_api_fdfr_element||, CODE, READONLY, ALIGN=2

                  kl520_api_fdfr_element PROC
;;;1752   
;;;1753   int kl520_api_fdfr_element(void)
000000  b5f8              PUSH     {r3-r7,lr}
000002  4f33              LDR      r7,|L89.208|
;;;1754   {
;;;1755       u16 _fdfr_element_cnt = 0;
000004  2400              MOVS     r4,#0
;;;1756       int ret = KL520_FACE_FAIL;
000006  2602              MOVS     r6,#2
000008  f1a70574          SUB      r5,r7,#0x74
                  |L89.12|
00000c  f7fffffe          BL       kdp_is_abort_flag
;;;1757       s32 e2e_result;
;;;1758   
;;;1759       while(1){
;;;1760   
;;;1761           if (kl520_is_fdfr_abort() != 0) return KL520_FACE_FAIL;
000010  b108              CBZ      r0,|L89.22|
000012  2002              MOVS     r0,#2
;;;1762   
;;;1763       #if CFG_ONE_SHOT_MODE == YES
;;;1764           if(kdp_e2e_get_dual_cam_state() == DUAL_IDENTICAL_CAM_SLEEP) {
;;;1765               kdp_e2e_set_dual_cam_state(DUAL_IDENTICAL_CAM_RUN);
;;;1766               camera_sensor_rst();
;;;1767               osDelay(1);
;;;1768               continue;
;;;1769           }
;;;1770       #endif  
;;;1771          
;;;1772           if(nir_sensor_delay_fdfr() == true || rgb_sensor_delay_fdfr() == true){
;;;1773       #if (CFG_CAMERA_SINGLE_1054 == NO)
;;;1774               if( kl520_api_cam_state_get(1) != KDP_DEVICE_CAMERA_RUNNING ) break;
;;;1775       #endif
;;;1776               osDelay(1);
;;;1777               continue;	
;;;1778           }
;;;1779   
;;;1780       #if (CALC_FDFR_MS_ONCE == YES)
;;;1781           u32 fdfr_srt, fdfr_end;
;;;1782           fdfr_srt = osKernelGetTickCount();
;;;1783       #endif
;;;1784           _api_fdfr_thread_inc_priority();
;;;1785   
;;;1786       // #if (MEASURE_RECOGNITION == YES)
;;;1787       //     _kl520_measure_stamp_capture();
;;;1788       // #endif
;;;1789   
;;;1790           if (FALSE == _api_fdfr_thread_data_capture()) {
;;;1791               _api_fdfr_thread_data_prepare();
;;;1792               return ret;
;;;1793           }
;;;1794   
;;;1795       #if CFG_ONE_SHOT_MODE == YES 
;;;1796           if(kdp_e2e_get_dual_cam_state() == DUAL_IDENTICAL_CAM_RUN) {
;;;1797               kdp_e2e_set_dual_cam_state(DUAL_IDENTICAL_CAM_SLEEP);
;;;1798           }
;;;1799       #endif
;;;1800   
;;;1801       #if (MEASURE_RECOGNITION == YES)
;;;1802           _kl520_measure_stamp_face_start();
;;;1803       #endif
;;;1804   
;;;1805           ret = _kl520_api_fdfr_only(&e2e_result);
;;;1806   
;;;1807       #if (MEASURE_RECOGNITION == YES)
;;;1808           _kl520_measure_stamp_face_end();
;;;1809       #endif
;;;1810   
;;;1811           #if (CFG_FMAP_EXTRA_ENABLE == YES)
;;;1812           // jim : call push
;;;1813           kl520_api_extra_fmap_adv_shot_save( ret );
;;;1814           #endif
;;;1815   
;;;1816           if(ret != KL520_FACE_OK) { //if ret is OK, free the buf after handling
;;;1817               _api_fdfr_thread_data_prepare();
;;;1818           }
;;;1819   
;;;1820       #if (CALC_FDFR_MS_ONCE == YES)
;;;1821           fdfr_end = osKernelGetTickCount();
;;;1822           dbg_msg_api("FDFR Time:%d",fdfr_end-fdfr_srt);
;;;1823       #endif
;;;1824   
;;;1825       #if (CALC_FDFR_FPS == YES)
;;;1826           _chk_fdfr_fps();
;;;1827       #endif
;;;1828   
;;;1829           if(_fdfr_element_cnt >= FDFR_BREAK_NUM || e2e_result != E2E_ENVIR) {
;;;1830               break;
;;;1831           }
;;;1832           else{
;;;1833               _fdfr_element_cnt++;
;;;1834               if(kl520_api_sim_is_running()) break; //do not loop in case of sim
;;;1835           }
;;;1836       }
;;;1837   
;;;1838       return ret;
;;;1839   }
000014  bdf8              POP      {r3-r7,pc}
                  |L89.22|
000016  f7fffffe          BL       kdp_e2e_get_dual_cam_state
00001a  2804              CMP      r0,#4                 ;1764
00001c  d003              BEQ      |L89.38|
00001e  f7fffffe          BL       nir_sensor_delay_fdfr
000022  b948              CBNZ     r0,|L89.56|
000024  e005              B        |L89.50|
                  |L89.38|
000026  2003              MOVS     r0,#3                 ;1765
000028  f7fffffe          BL       kdp_e2e_set_dual_cam_state
00002c  f7fffffe          BL       camera_sensor_rst
000030  e008              B        |L89.68|
                  |L89.50|
000032  f7fffffe          BL       rgb_sensor_delay_fdfr
000036  b148              CBZ      r0,|L89.76|
                  |L89.56|
000038  2001              MOVS     r0,#1                 ;1774
00003a  f7fffffe          BL       kl520_api_cam_state_get
00003e  f5b07f81          CMP      r0,#0x102             ;1774
000042  d143              BNE      |L89.204|
                  |L89.68|
000044  2001              MOVS     r0,#1                 ;1776
000046  f7fffffe          BL       osDelay
00004a  e7df              B        |L89.12|
                  |L89.76|
00004c  6878              LDR      r0,[r7,#4]            ;1777  ; m_api_fdfr_ctx
00004e  f7fffffe          BL       osThreadGetPriority
000052  6be9              LDR      r1,[r5,#0x3c]         ;1777  ; m_old_thread_priority
000054  1c8a              ADDS     r2,r1,#2              ;1777
000056  4290              CMP      r0,r2                 ;1777
000058  d003              BEQ      |L89.98|
00005a  1c89              ADDS     r1,r1,#2              ;1777
00005c  6878              LDR      r0,[r7,#4]            ;1777  ; m_api_fdfr_ctx
00005e  f7fffffe          BL       osThreadSetPriority
                  |L89.98|
000062  7868              LDRB     r0,[r5,#1]            ;1777  ; nir_sensor_index
000064  f7fffffe          BL       _api_fdfr_cam_capture
000068  b1b8              CBZ      r0,|L89.154|
00006a  f7fffffe          BL       kdp_e2e_get_face_variables
00006e  f890006d          LDRB     r0,[r0,#0x6d]         ;1777
000072  b120              CBZ      r0,|L89.126|
000074  f7fffffe          BL       kdp_e2e_get_face_variables
000078  f8900198          LDRB     r0,[r0,#0x198]        ;1777
00007c  b140              CBZ      r0,|L89.144|
                  |L89.126|
00007e  7828              LDRB     r0,[r5,#0]            ;1777  ; rgb_sensor_index
000080  f7fffffe          BL       _api_fdfr_cam_capture
000084  b148              CBZ      r0,|L89.154|
000086  f7fffffe          BL       kdp_e2e_get_face_variables
00008a  2102              MOVS     r1,#2                 ;1777
00008c  f8801198          STRB     r1,[r0,#0x198]        ;1777
                  |L89.144|
000090  f7fffffe          BL       kdp_e2e_get_dual_cam_state
000094  2803              CMP      r0,#3                 ;1796
000096  d003              BEQ      |L89.160|
000098  e005              B        |L89.166|
                  |L89.154|
00009a  f7fffffe          BL       _api_fdfr_thread_data_prepare
00009e  e015              B        |L89.204|
                  |L89.160|
0000a0  2004              MOVS     r0,#4                 ;1797
0000a2  f7fffffe          BL       kdp_e2e_set_dual_cam_state
                  |L89.166|
0000a6  4668              MOV      r0,sp                 ;1805
0000a8  f7fffffe          BL       _kl520_api_fdfr_only
0000ac  0006              MOVS     r6,r0                 ;1805
0000ae  d001              BEQ      |L89.180|
0000b0  f7fffffe          BL       _api_fdfr_thread_data_prepare
                  |L89.180|
0000b4  2c64              CMP      r4,#0x64              ;1829
0000b6  d209              BCS      |L89.204|
0000b8  9800              LDR      r0,[sp,#0]            ;1829
0000ba  f1b07f80          CMP      r0,#0x1000000         ;1829
0000be  d105              BNE      |L89.204|
0000c0  1c64              ADDS     r4,r4,#1              ;1829
0000c2  b2a4              UXTH     r4,r4                 ;1833
0000c4  f7fffffe          BL       kl520_api_sim_is_running
0000c8  2800              CMP      r0,#0                 ;1834
0000ca  d09f              BEQ      |L89.12|
                  |L89.204|
0000cc  4630              MOV      r0,r6                 ;1838
0000ce  bdf8              POP      {r3-r7,pc}
;;;1840   
                          ENDP

                  |L89.208|
                          DCD      ||.data||+0x74

                          AREA ||i.kl520_api_fdfr_exist_thread||, CODE, READONLY, ALIGN=2

                  kl520_api_fdfr_exist_thread PROC
;;;771    
;;;772    int kl520_api_fdfr_exist_thread(void)
000000  4804              LDR      r0,|L90.20|
;;;773    {
000002  6841              LDR      r1,[r0,#4]  ; m_api_fdfr_ctx
000004  b121              CBZ      r1,|L90.16|
;;;774        if(m_api_fdfr_ctx.tid != 0 && m_api_fdfr_ctx.state != FDFR_STATUS_IDLE)
000006  7800              LDRB     r0,[r0,#0]  ; m_api_fdfr_ctx
000008  2801              CMP      r0,#1
00000a  d001              BEQ      |L90.16|
;;;775        {
;;;776            return 1;
00000c  2001              MOVS     r0,#1
;;;777        }
;;;778    
;;;779        //dbg_msg_console("fdfr NO=%d",m_api_fdfr_ctx.tid);
;;;780        return 0;
;;;781    }
00000e  4770              BX       lr
                  |L90.16|
000010  2000              MOVS     r0,#0                 ;780
000012  4770              BX       lr
;;;782    
                          ENDP

                  |L90.20|
                          DCD      ||.data||+0x74

                          AREA ||i.kl520_api_fdfr_init_thrd||, CODE, READONLY, ALIGN=2

                  kl520_api_fdfr_init_thrd PROC
;;;706    
;;;707    void kl520_api_fdfr_init_thrd(void)
000000  b530              PUSH     {r4,r5,lr}
;;;708    {
;;;709        if(_mutex_fdfr) return; //already inited.
000002  4c13              LDR      r4,|L91.80|
000004  b089              SUB      sp,sp,#0x24           ;708
000006  6a60              LDR      r0,[r4,#0x24]         ;708  ; _mutex_fdfr
000008  2800              CMP      r0,#0                 ;708
00000a  d11e              BNE      |L91.74|
;;;710    
;;;711        _mutex_fdfr = osMutexNew(NULL);
00000c  f7fffffe          BL       osMutexNew
;;;712    
;;;713        if (NULL == m_api_fdfr_ctx.tid) {
000010  f1040574          ADD      r5,r4,#0x74
000014  6260              STR      r0,[r4,#0x24]  ; _mutex_fdfr
000016  6868              LDR      r0,[r5,#4]  ; m_api_fdfr_ctx
000018  2800              CMP      r0,#0
00001a  d116              BNE      |L91.74|
;;;714            osThreadAttr_t attr = {
00001c  2224              MOVS     r2,#0x24
00001e  490d              LDR      r1,|L91.84|
000020  4668              MOV      r0,sp
000022  f7fffffe          BL       __aeabi_memcpy4
;;;715                .stack_size = 2560,
;;;716                .attr_bits = osThreadJoinable
;;;717            };
;;;718    
;;;719        #ifdef FDFR_THREAD_PRIORITY_DYNAMIC_ADJUSTMENT
;;;720            attr.priority = osPriorityNormal;
000026  2018              MOVS     r0,#0x18
;;;721        #else
;;;722            attr.priority = osPriorityNormal2;
;;;723        #endif
;;;724    
;;;725            osEventFlagsClear(kl520_api_get_event(), KL520_APP_FLAG_FDFR);
000028  9006              STR      r0,[sp,#0x18]
00002a  f7fffffe          BL       kl520_api_get_event
00002e  2107              MOVS     r1,#7
000030  f7fffffe          BL       osEventFlagsClear
;;;726    
;;;727            m_api_fdfr_ctx.tid = osThreadNew(api_fdfr_thread, (void*)&m_api_fdfr_ctx, &attr);
000034  466a              MOV      r2,sp
000036  4629              MOV      r1,r5
000038  4807              LDR      r0,|L91.88|
00003a  f7fffffe          BL       osThreadNew
;;;728            if (m_api_fdfr_ctx.tid) {
00003e  6068              STR      r0,[r5,#4]  ; m_api_fdfr_ctx
000040  2800              CMP      r0,#0
000042  d002              BEQ      |L91.74|
;;;729                m_old_thread_priority = osThreadGetPriority(m_api_fdfr_ctx.tid);
000044  f7fffffe          BL       osThreadGetPriority
000048  63e0              STR      r0,[r4,#0x3c]  ; m_old_thread_priority
                  |L91.74|
;;;730            }
;;;731        }
;;;732    }
00004a  b009              ADD      sp,sp,#0x24
00004c  bd30              POP      {r4,r5,pc}
;;;733    
                          ENDP

00004e  0000              DCW      0x0000
                  |L91.80|
                          DCD      ||.data||
                  |L91.84|
                          DCD      ||area_number.123||+0x30
                  |L91.88|
                          DCD      api_fdfr_thread

                          AREA ||i.kl520_api_fdfr_model_init||, CODE, READONLY, ALIGN=2

                  kl520_api_fdfr_model_init PROC
;;;397    
;;;398    void kl520_api_fdfr_model_init(void)
000000  b5f8              PUSH     {r3-r7,lr}
;;;399    {
;;;400        if (!m_fdr_model_inited) {
000002  4d33              LDR      r5,|L92.208|
000004  7a68              LDRB     r0,[r5,#9]  ; m_fdr_model_inited
000006  2800              CMP      r0,#0                 ;399
000008  d160              BNE      |L92.204|
;;;401            
;;;402            kl520_customer_info_init();
00000a  f7fffffe          BL       kl520_customer_info_init
;;;403            
;;;404            kdp_model_init_addr(    MODEL_MGR_FLASH_ADDR_HEAD,
00000e  4a31              LDR      r2,|L92.212|
000010  f44f10a2          MOV      r0,#0x144000
000014  3ae0              SUBS     r2,r2,#0xe0
000016  9000              STR      r0,[sp,#0]
000018  1f10              SUBS     r0,r2,#4
00001a  4b2e              LDR      r3,|L92.212|
00001c  4601              MOV      r1,r0
00001e  f7fffffe          BL       kdp_model_init_addr
;;;405                                    MODEL_MGR_FLASH_ADDR_MODEL_COUNT,
;;;406                                    MODEL_MGR_FLASH_ADDR_MODEL_INFO,
;;;407                                    MODEL_MGR_FLASH_ADDR_MODEL_DDR_END_ADDR,
;;;408                                    MODEL_MGR_FLASH_ADDR_MODEL_POOL);
;;;409    
;;;410            kl520_measure_stamp(E_MEASURE_LOAD_MODEL);
;;;411            kl520_api_face_recognition_variable_reset();
000022  f7fffffe          BL       kl520_api_face_recognition_variable_reset
;;;412            kl520_measure_stamp(E_MEASURE_LOAD_MODEL_VAR_RESET);
;;;413            kdp_e2e_face_init();
000026  f7fffffe          BL       kdp_e2e_face_init
;;;414            kl520_measure_stamp(E_MEASURE_LOAD_MODEL_FACE_INIT);
;;;415            kdp_e2e_prop_init();
00002a  f7fffffe          BL       kdp_e2e_prop_init
;;;416            kl520_measure_stamp(E_MEASURE_LOAD_MODEL_PROP_INIT);
;;;417            kdp_e2e_prop_set2(dst_win_width, DISPLAY_RGB_WIDTH);
00002e  f7fffffe          BL       kdp_e2e_prop_get_inst
000032  f44f66a0          MOV      r6,#0x500
;;;418            kdp_e2e_prop_set2(dst_win_height, DISPLAY_RGB_HEIGHT);
000036  f8c060e0          STR      r6,[r0,#0xe0]
00003a  f7fffffe          BL       kdp_e2e_prop_get_inst
00003e  f44f7734          MOV      r7,#0x2d0
;;;419            kdp_e2e_prop_set2(r1_offset_x, DISPLAY_RGB_X_OFFSET);
000042  f8c070e4          STR      r7,[r0,#0xe4]
000046  f7fffffe          BL       kdp_e2e_prop_get_inst
00004a  2400              MOVS     r4,#0
;;;420            kdp_e2e_prop_set2(r1_offset_y, DISPLAY_RGB_Y_OFFSET);
00004c  f8c040e8          STR      r4,[r0,#0xe8]
000050  f7fffffe          BL       kdp_e2e_prop_get_inst
;;;421            kdp_e2e_prop_set2(bbox_tolerance_lines, LCD_FDR_OVERLINE);
000054  f8c040ec          STR      r4,[r0,#0xec]
000058  f7fffffe          BL       kdp_e2e_prop_get_inst
00005c  211e              MOVS     r1,#0x1e
;;;422            kdp_e2e_prop_set2(n1_offset_x, DISPLAY_NIR_X_OFFSET);
00005e  f8c01100          STR      r1,[r0,#0x100]
000062  f7fffffe          BL       kdp_e2e_prop_get_inst
;;;423            kdp_e2e_prop_set2(n1_offset_y, DISPLAY_NIR_Y_OFFSET);
000066  f8c040f8          STR      r4,[r0,#0xf8]
00006a  f7fffffe          BL       kdp_e2e_prop_get_inst
;;;424            kdp_e2e_prop_set2(n1_dst_win_width, DISPLAY_NIR_WIDTH);
00006e  f8c040fc          STR      r4,[r0,#0xfc]
000072  f7fffffe          BL       kdp_e2e_prop_get_inst
;;;425            kdp_e2e_prop_set2(n1_dst_win_height, DISPLAY_NIR_HEIGHT);
000076  f8c060f0          STR      r6,[r0,#0xf0]
00007a  f7fffffe          BL       kdp_e2e_prop_get_inst
;;;426            kdp_e2e_prop_set2(invalid_score_min, KL520_FACE_SCORE_MIN);
00007e  f8c070f4          STR      r7,[r0,#0xf4]
000082  f7fffffe          BL       kdp_e2e_prop_get_inst
000086  1e61              SUBS     r1,r4,#1
;;;427            kdp_e2e_prop_set2(invalid_score_max, KL520_FACE_SCORE_MAX);
000088  f8c01104          STR      r1,[r0,#0x104]
00008c  f7fffffe          BL       kdp_e2e_prop_get_inst
000090  2450              MOVS     r4,#0x50
;;;428            kdp_e2e_prop_set2(rgb_led_enhance_cnt, CFG_E2E_RGB_LED_STRONG_ENHANCE_COUNT);
000092  f8c04108          STR      r4,[r0,#0x108]
000096  f7fffffe          BL       kdp_e2e_prop_get_inst
00009a  f44f717a          MOV      r1,#0x3e8
00009e  f8a0110c          STRH     r1,[r0,#0x10c]
;;;429            kdp_e2e_prop_set2(rgb_led_enhance_step, CFG_E2E_RGB_LED_STRONG_ENHANCE_STRONG_STEP);
0000a2  f7fffffe          BL       kdp_e2e_prop_get_inst
0000a6  2103              MOVS     r1,#3
0000a8  f880110e          STRB     r1,[r0,#0x10e]
;;;430            kdp_e2e_prop_set2(rgb_led_enhance_min, CFG_E2E_RGB_LED_STRONG_ENHANCE_STRONG_MIN);
0000ac  f7fffffe          BL       kdp_e2e_prop_get_inst
0000b0  2114              MOVS     r1,#0x14
0000b2  f880110f          STRB     r1,[r0,#0x10f]
;;;431            kdp_e2e_prop_set2(rgb_led_enhance_max, CFG_E2E_RGB_LED_STRONG_ENHANCE_STRONG_MAX);
0000b6  f7fffffe          BL       kdp_e2e_prop_get_inst
0000ba  f8804110          STRB     r4,[r0,#0x110]
;;;432            
;;;433            kdp_e2e_settings_init();
0000be  f7fffffe          BL       kdp_e2e_settings_init
;;;434            kl520_measure_stamp(E_MEASURE_LOAD_MODEL_SETTING_INIT);
;;;435         
;;;436            #if CFG_FMAP_AP_CTRL_TYPE > EX_FM_DISABLE
;;;437            kdp_e2e_db_init( 1 );
0000c2  2001              MOVS     r0,#1
0000c4  f7fffffe          BL       kdp_e2e_db_init
;;;438            #else
;;;439            kdp_e2e_db_init( 0 );
;;;440            #endif
;;;441    
;;;442    //        for (int i = 0; i < ARRAY_SIZE(m_sample_db); ++i) {
;;;443    //            m_sample_db[i].db_user_id = kl520_api_get_start_user_id() + i;
;;;444    //        }
;;;445            kl520_measure_stamp(E_MEASURE_LOAD_MODEL_DB_INIT);
;;;446    
;;;447            m_fdr_model_inited = TRUE;
0000c8  2001              MOVS     r0,#1
0000ca  7268              STRB     r0,[r5,#9]
                  |L92.204|
;;;448            kl520_measure_stamp(E_MEASURE_LOAD_MODEL_END);
;;;449    
;;;450            /*user setting*/
;;;451            //kdp_e2e_prop *prop = kdp_e2e_prop_get_inst();
;;;452            //kdp_e2e_prop_set_manual_value(prop, nir_lv_threshold, 1.0);
;;;453            //*FD,DB
;;;454    
;;;455        }
;;;456    }
0000cc  bdf8              POP      {r3-r7,pc}
;;;457     
                          ENDP

0000ce  0000              DCW      0x0000
                  |L92.208|
                          DCD      ||.data||
                  |L92.212|
                          DCD      0x001430e4

                          AREA ||i.kl520_api_fdfr_set_flow_mode||, CODE, READONLY, ALIGN=1

                  kl520_api_fdfr_set_flow_mode PROC
;;;389    
;;;390    void kl520_api_fdfr_set_flow_mode(BOOL sim_enabled)
000000  b510              PUSH     {r4,lr}
;;;391    {
000002  b118              CBZ      r0,|L93.12|
;;;392        if (sim_enabled)
;;;393            kdp_e2e_prop_set2(flow_mode, FLOW_MODE_SIM_MODELS);
000004  f7fffffe          BL       kdp_e2e_prop_get_inst
000008  2102              MOVS     r1,#2
00000a  e002              B        |L93.18|
                  |L93.12|
;;;394        else
;;;395            kdp_e2e_prop_set2(flow_mode, FLOW_MODE_NORMAL);
00000c  f7fffffe          BL       kdp_e2e_prop_get_inst
000010  2100              MOVS     r1,#0
                  |L93.18|
000012  60c1              STR      r1,[r0,#0xc]          ;393
;;;396    }
000014  bd10              POP      {r4,pc}
;;;397    
                          ENDP


                          AREA ||i.kl520_api_fdfr_start||, CODE, READONLY, ALIGN=2

                  kl520_api_fdfr_start PROC
;;;733    
;;;734    void kl520_api_fdfr_start(void)
000000  b510              PUSH     {r4,lr}
;;;735    {
;;;736        if(osMutexAcquire(_mutex_fdfr, 5000) != osOK) return;
000002  4c0f              LDR      r4,|L94.64|
000004  f2413188          MOV      r1,#0x1388
000008  6a60              LDR      r0,[r4,#0x24]  ; _mutex_fdfr
00000a  f7fffffe          BL       osMutexAcquire
00000e  2800              CMP      r0,#0
000010  d114              BNE      |L94.60|
;;;737    
;;;738        osEventFlagsClear(kl520_api_get_event(), KL520_APP_FLAG_FDFR);
000012  f7fffffe          BL       kl520_api_get_event
000016  2107              MOVS     r1,#7
000018  f7fffffe          BL       osEventFlagsClear
;;;739    
;;;740        if (m_api_fdfr_ctx.tid) {
00001c  f1040074          ADD      r0,r4,#0x74
000020  6840              LDR      r0,[r0,#4]  ; m_api_fdfr_ctx
000022  b130              CBZ      r0,|L94.50|
;;;741            kl520_measure_stamp(E_MEASURE_THR_FDFR_OPEN_RDY);
;;;742            set_thread_event(m_api_fdfr_ctx.tid, FLAGS_API_FDFR_OPEN_EVT);
000024  f44f7180          MOV      r1,#0x100
000028  f7fffffe          BL       set_thread_event
;;;743            osDelay(1);
00002c  2001              MOVS     r0,#1
00002e  f7fffffe          BL       osDelay
                  |L94.50|
;;;744        }
;;;745        
;;;746        osMutexRelease(_mutex_fdfr);
000032  6a60              LDR      r0,[r4,#0x24]  ; _mutex_fdfr
000034  e8bd4010          POP      {r4,lr}
000038  f7ffbffe          B.W      osMutexRelease
                  |L94.60|
;;;747    }
00003c  bd10              POP      {r4,pc}
;;;748    
                          ENDP

00003e  0000              DCW      0x0000
                  |L94.64|
                          DCD      ||.data||

                          AREA ||i.kl520_api_fdfr_stop||, CODE, READONLY, ALIGN=2

                  kl520_api_fdfr_stop PROC
;;;748    
;;;749    void kl520_api_fdfr_stop(void)
000000  b570              PUSH     {r4-r6,lr}
;;;750    {
;;;751        if(m_api_fdfr_ctx.state == FDFR_STATUS_IDLE) return; //already closed.
000002  4d17              LDR      r5,|L95.96|
000004  7828              LDRB     r0,[r5,#0]  ; m_api_fdfr_ctx
000006  2801              CMP      r0,#1
000008  d029              BEQ      |L95.94|
;;;752        
;;;753        if (NULL == _fdr_event_id) {
00000a  f1a50474          SUB      r4,r5,#0x74
00000e  6d20              LDR      r0,[r4,#0x50]  ; _fdr_event_id
000010  b918              CBNZ     r0,|L95.26|
;;;754            _fdr_event_id = osEventFlagsNew(NULL);
000012  2000              MOVS     r0,#0
000014  f7fffffe          BL       osEventFlagsNew
000018  6520              STR      r0,[r4,#0x50]  ; _fdr_event_id
                  |L95.26|
;;;755        }
;;;756    
;;;757        if(osMutexAcquire(_mutex_fdfr, 5000) != osOK) return;
00001a  f2413688          MOV      r6,#0x1388
00001e  4631              MOV      r1,r6
000020  6a60              LDR      r0,[r4,#0x24]  ; _mutex_fdfr
000022  f7fffffe          BL       osMutexAcquire
000026  2800              CMP      r0,#0
000028  d119              BNE      |L95.94|
;;;758    
;;;759        if (m_api_fdfr_ctx.tid) {
00002a  6868              LDR      r0,[r5,#4]  ; m_api_fdfr_ctx
00002c  b190              CBZ      r0,|L95.84|
;;;760            osEventFlagsClear(_fdr_event_id, FDFR_COM_EVENT_CLOSED);
00002e  2101              MOVS     r1,#1
000030  6d20              LDR      r0,[r4,#0x50]  ; _fdr_event_id
000032  f7fffffe          BL       osEventFlagsClear
;;;761    
;;;762            set_thread_event(m_api_fdfr_ctx.tid, FLAGS_API_FDFR_CLOSE_EVT);
000036  f44f5180          MOV      r1,#0x1000
00003a  6868              LDR      r0,[r5,#4]  ; m_api_fdfr_ctx
00003c  f7fffffe          BL       set_thread_event
;;;763            
;;;764            osEventFlagsWait(_fdr_event_id, FDFR_COM_EVENT_CLOSED, osFlagsWaitAny, 5000);
000040  4633              MOV      r3,r6
000042  2200              MOVS     r2,#0
000044  2101              MOVS     r1,#1
000046  6d20              LDR      r0,[r4,#0x50]  ; _fdr_event_id
000048  f7fffffe          BL       osEventFlagsWait
;;;765            
;;;766            m_api_fdfr_ctx.state = FDFR_STATUS_IDLE;
00004c  2001              MOVS     r0,#1
00004e  7028              STRB     r0,[r5,#0]
;;;767            m_api_fdfr_ctx.reg_idx = 0xff;
000050  20ff              MOVS     r0,#0xff
000052  7228              STRB     r0,[r5,#8]
                  |L95.84|
;;;768        }
;;;769        osMutexRelease(_mutex_fdfr);
000054  6a60              LDR      r0,[r4,#0x24]  ; _mutex_fdfr
000056  e8bd4070          POP      {r4-r6,lr}
00005a  f7ffbffe          B.W      osMutexRelease
                  |L95.94|
;;;770    }
00005e  bd70              POP      {r4-r6,pc}
;;;771    
                          ENDP

                  |L95.96|
                          DCD      ||.data||+0x74

                          AREA ||i.kl520_api_fdfr_terminate_thread||, CODE, READONLY, ALIGN=1

                  kl520_api_fdfr_terminate_thread PROC
;;;701    
;;;702    void kl520_api_fdfr_terminate_thread(void)
000000  f7ffbffe          B.W      kl520_api_fdfr_stop
;;;703    {
;;;704        kl520_api_fdfr_stop();
;;;705    }
;;;706    
                          ENDP


                          AREA ||i.kl520_api_get_start_user_id||, CODE, READONLY, ALIGN=2

                  kl520_api_get_start_user_id PROC
;;;4128   
;;;4129   u8 kl520_api_get_start_user_id(void)
000000  4801              LDR      r0,|L97.8|
;;;4130   {
;;;4131       return _kl520_app_calc_db_uid(0);
000002  7c00              LDRB     r0,[r0,#0x10]  ; user_db_offset
;;;4132   }
000004  4770              BX       lr
;;;4133   
                          ENDP

000006  0000              DCW      0x0000
                  |L97.8|
                          DCD      ||.data||

                          AREA ||i.kl520_api_reset_hmi_external_interface||, CODE, READONLY, ALIGN=2

                  kl520_api_reset_hmi_external_interface PROC
;;;3834   
;;;3835   void kl520_api_reset_hmi_external_interface(void)
000000  b510              PUSH     {r4,lr}
;;;3836   {
;;;3837       osDelay(1);
000002  2001              MOVS     r0,#1
000004  f7fffffe          BL       osDelay
;;;3838       kl520_api_hmi_ctrl_state_set(CTRL_COMM);
000008  2000              MOVS     r0,#0
00000a  f7fffffe          BL       kl520_api_hmi_ctrl_state_set
;;;3839       if ((kdp_e2e_prop_get2(flow_mode) < FLOW_MODE_SIM_VIRTUAL))
00000e  f7fffffe          BL       kdp_e2e_prop_get_inst
000012  68c0              LDR      r0,[r0,#0xc]
000014  b908              CBNZ     r0,|L98.26|
;;;3840       {
;;;3841           kl520_api_cam_disp_close_perm_state_chk();
000016  f7fffffe          BL       kl520_api_cam_disp_close_perm_state_chk
                  |L98.26|
00001a  4905              LDR      r1,|L98.48|
00001c  2000              MOVS     r0,#0
00001e  73c8              STRB     r0,[r1,#0xf]
;;;3842       }
;;;3843   
;;;3844       kl520_api_ui_fsm_dp_layout_disable();
;;;3845       kl520_api_cam_disp_state_rst();
000020  f7fffffe          BL       kl520_api_cam_disp_state_rst
;;;3846       osDelay(1);
000024  e8bd4010          POP      {r4,lr}
000028  2001              MOVS     r0,#1
00002a  f7ffbffe          B.W      osDelay
;;;3847   }
;;;3848   
                          ENDP

00002e  0000              DCW      0x0000
                  |L98.48|
                          DCD      ||.data||

                          AREA ||i.kl520_api_snap_image||, CODE, READONLY, ALIGN=2

                  kl520_api_snap_image PROC
;;;3744   
;;;3745   int kl520_api_snap_image(short x, short y, short w, short h)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;3746   {
;;;3747       s32 ret = 0;
;;;3748       if (FACE_MODE_NONE != m_face_mode) {
000004  4c0f              LDR      r4,|L99.68|
000006  4681              MOV      r9,r0                 ;3746
000008  461e              MOV      r6,r3                 ;3746
00000a  7aa0              LDRB     r0,[r4,#0xa]  ; m_face_mode
00000c  4617              MOV      r7,r2                 ;3746
00000e  4688              MOV      r8,r1                 ;3746
;;;3749           //dbg_msg_console("Err mode for snap image");
;;;3750           return -1;
000010  f04f35ff          MOV      r5,#0xffffffff
000014  b9a0              CBNZ     r0,|L99.64|
;;;3751       }
;;;3752   
;;;3753       m_face_mode = FACE_MODE_SNAP_IMG;
000016  2007              MOVS     r0,#7
000018  72a0              STRB     r0,[r4,#0xa]
;;;3754       kdp_e2e_prop_set2(face_mode, m_face_mode);
00001a  f7fffffe          BL       kdp_e2e_prop_get_inst
00001e  7aa1              LDRB     r1,[r4,#0xa]  ; m_face_mode
;;;3755   
;;;3756       kl520_api_fdfr_model_init();
000020  6101              STR      r1,[r0,#0x10]
000022  f7fffffe          BL       kl520_api_fdfr_model_init
;;;3757   
;;;3758       ret = _kl520_api_face_preexecute(x, y, w, h);
000026  4633              MOV      r3,r6
000028  463a              MOV      r2,r7
00002a  4641              MOV      r1,r8
00002c  4648              MOV      r0,r9
00002e  f7fffffe          BL       _kl520_api_face_preexecute
;;;3759       if(ret != 0) { // device error
000032  b928              CBNZ     r0,|L99.64|
;;;3760           //dbg_msg_console("start camera failed for snap image");
;;;3761           return -1;
;;;3762       }
;;;3763   
;;;3764       if (_kl520_api_fdfr_try_create_thread() == false) {
000034  f7fffffe          BL       _kl520_api_fdfr_try_create_thread
000038  b110              CBZ      r0,|L99.64|
;;;3765           //dbg_msg_console("fdfr thread failed for snap image");
;;;3766           return -1;
;;;3767       }
;;;3768   
;;;3769       return 0;
00003a  2000              MOVS     r0,#0
                  |L99.60|
;;;3770   }
00003c  e8bd87f0          POP      {r4-r10,pc}
                  |L99.64|
000040  4628              MOV      r0,r5                 ;3766
000042  e7fb              B        |L99.60|
;;;3771   
                          ENDP

                  |L99.68|
                          DCD      ||.data||

                          AREA ||i.kl520_api_tasks_init||, CODE, READONLY, ALIGN=2

                  kl520_api_tasks_init PROC
;;;4087   
;;;4088   void kl520_api_tasks_init(void)
000000  b510              PUSH     {r4,lr}
;;;4089   {
000002  b092              SUB      sp,sp,#0x48
;;;4090       kl520_measure_stamp(E_MEASURE_THR_TASKS_INIT);
;;;4091   
;;;4092       osThreadAttr_t attr = {
000004  2224              MOVS     r2,#0x24
000006  490f              LDR      r1,|L100.68|
000008  4668              MOV      r0,sp
00000a  f7fffffe          BL       __aeabi_memcpy4
;;;4093           .stack_size = 1280,
;;;4094           .priority = osPriorityRealtime,
;;;4095           //.attr_bits = osThreadJoinable
;;;4096       };
;;;4097   
;;;4098       tid_tasks_init_cameras = osThreadNew(_tasks_init_cameras_thread, NULL, &attr);
00000e  466a              MOV      r2,sp
000010  2100              MOVS     r1,#0
000012  480d              LDR      r0,|L100.72|
000014  f7fffffe          BL       osThreadNew
000018  4c0c              LDR      r4,|L100.76|
;;;4099       tid_tasks_init_models = osThreadNew(_tasks_init_models_thread, NULL, &attr);
00001a  466a              MOV      r2,sp
00001c  2100              MOVS     r1,#0
00001e  6560              STR      r0,[r4,#0x54]  ; tid_tasks_init_cameras
000020  480b              LDR      r0,|L100.80|
000022  f7fffffe          BL       osThreadNew
;;;4100   #if ( CFG_MODELS_LOAD_BY_ORDER == YES )
;;;4101       osThreadAttr_t attr2 = {
000026  4907              LDR      r1,|L100.68|
000028  65a0              STR      r0,[r4,#0x58]  ; tid_tasks_init_models
00002a  2224              MOVS     r2,#0x24
00002c  3124              ADDS     r1,r1,#0x24
00002e  a809              ADD      r0,sp,#0x24
000030  f7fffffe          BL       __aeabi_memcpy4
;;;4102           .stack_size = 1280,
;;;4103           .priority = osPriorityNormal
;;;4104       };
;;;4105       tid_tasks_init_models_each = osThreadNew( (osThreadFunc_t)_tasks_init_flash_load_thread_each, NULL, &attr2); 
000034  aa09              ADD      r2,sp,#0x24
000036  2100              MOVS     r1,#0
000038  4806              LDR      r0,|L100.84|
00003a  f7fffffe          BL       osThreadNew
00003e  65e0              STR      r0,[r4,#0x5c]  ; tid_tasks_init_models_each
;;;4106   #endif
;;;4107   }
000040  b012              ADD      sp,sp,#0x48
000042  bd10              POP      {r4,pc}
;;;4108   
                          ENDP

                  |L100.68|
                          DCD      ||area_number.123||+0xcc
                  |L100.72|
                          DCD      _tasks_init_cameras_thread
                  |L100.76|
                          DCD      ||.data||
                  |L100.80|
                          DCD      _tasks_init_models_thread
                  |L100.84|
                          DCD      _tasks_init_flash_load_thread_each

                          AREA ||i.kl520_api_tasks_init_wait_ready||, CODE, READONLY, ALIGN=2

                  kl520_api_tasks_init_wait_ready PROC
;;;4108   
;;;4109   void kl520_api_tasks_init_wait_ready(void)
000000  b570              PUSH     {r4-r6,lr}
;;;4110   {
;;;4111   //    osThreadJoin(tid_tasks_init_cameras);
;;;4112   //    osThreadJoin(tid_tasks_init_models);
;;;4113       
;;;4114       for (int i = 0; i < 100; i++) {
;;;4115           if(tid_tasks_init_cameras == NULL && tid_tasks_init_models == NULL) break;
000002  4d07              LDR      r5,|L101.32|
000004  2400              MOVS     r4,#0                 ;4114
000006  bf00              NOP      
                  |L101.8|
000008  e9d50115          LDRD     r0,r1,[r5,#0x54]
00000c  4308              ORRS     r0,r0,r1
00000e  d005              BEQ      |L101.28|
;;;4116           osDelay(50);
000010  2032              MOVS     r0,#0x32
000012  f7fffffe          BL       osDelay
000016  1c64              ADDS     r4,r4,#1
000018  2c64              CMP      r4,#0x64              ;4114
00001a  dbf5              BLT      |L101.8|
                  |L101.28|
;;;4117       }
;;;4118   
;;;4119       kl520_measure_stamp(E_MEASURE_THR_TASKS_INIT_RDY);
;;;4120   }
00001c  bd70              POP      {r4-r6,pc}
;;;4121   #else
                          ENDP

00001e  0000              DCW      0x0000
                  |L101.32|
                          DCD      ||.data||

                          AREA ||i.kl520_api_ui_fsm_dp_layout_disable||, CODE, READONLY, ALIGN=2

                  kl520_api_ui_fsm_dp_layout_disable PROC
;;;203    
;;;204    void kl520_api_ui_fsm_dp_layout_disable(void)
000000  4901              LDR      r1,|L102.8|
;;;205    {
;;;206        ui_fsm_dp_layout_en = FALSE;
000002  2000              MOVS     r0,#0
000004  73c8              STRB     r0,[r1,#0xf]
;;;207    }
000006  4770              BX       lr
;;;208    
                          ENDP

                  |L102.8|
                          DCD      ||.data||

                          AREA ||i.kl520_api_ui_fsm_dp_layout_enable||, CODE, READONLY, ALIGN=2

                  kl520_api_ui_fsm_dp_layout_enable PROC
;;;198    BOOL ui_fsm_dp_layout_en = FALSE;
;;;199    void kl520_api_ui_fsm_dp_layout_enable(void)
000000  4901              LDR      r1,|L103.8|
;;;200    {
;;;201        ui_fsm_dp_layout_en = TRUE;
000002  2001              MOVS     r0,#1
000004  73c8              STRB     r0,[r1,#0xf]
;;;202    }
000006  4770              BX       lr
;;;203    
                          ENDP

                  |L103.8|
                          DCD      ||.data||

                          AREA ||i.kl520_api_ui_fsm_dp_layout_get||, CODE, READONLY, ALIGN=2

                  kl520_api_ui_fsm_dp_layout_get PROC
;;;361                
;;;362    BOOL kl520_api_ui_fsm_dp_layout_get(void)
000000  4801              LDR      r0,|L104.8|
;;;363    {
;;;364        return ui_fsm_dp_layout_en;
000002  7bc0              LDRB     r0,[r0,#0xf]  ; ui_fsm_dp_layout_en
;;;365    }
000004  4770              BX       lr
;;;366    
                          ENDP

000006  0000              DCW      0x0000
                  |L104.8|
                          DCD      ||.data||

                          AREA ||i.kl520_customer_info_init||, CODE, READONLY, ALIGN=2

                  kl520_customer_info_init PROC
;;;294    
;;;295    void kl520_customer_info_init(void)
000000  b500              PUSH     {lr}
;;;296    {
000002  b08d              SUB      sp,sp,#0x34
;;;297        kl520_customer_info Cusinfo;
;;;298        kl520_api_customer_get(&Cusinfo);
000004  4668              MOV      r0,sp
000006  f7fffffe          BL       kl520_api_customer_get
;;;299        
;;;300    #ifdef CUSTOMIZE_DB_OFFSET
;;;301        user_db_offset = Cusinfo.user_db_offset;
00000a  481c              LDR      r0,|L105.124|
00000c  f89d1029          LDRB     r1,[sp,#0x29]
000010  7401              STRB     r1,[r0,#0x10]
;;;302    #if (DB_OFFSET_CMD == YES)
;;;303    #else
;;;304        if (0x80 == Cusinfo.user_db_offset)
000012  2980              CMP      r1,#0x80
000014  d000              BEQ      |L105.24|
;;;305            user_db_offset = 0x80;
;;;306        else
;;;307            user_db_offset = CUSTOMIZE_DB_OFFSET;
000016  2101              MOVS     r1,#1
                  |L105.24|
000018  7401              STRB     r1,[r0,#0x10]
;;;308    #endif
;;;309        dbg_msg_console("[%s] user_db_offset:%x", __func__, user_db_offset);
00001a  b2cb              UXTB     r3,r1
00001c  4a18              LDR      r2,|L105.128|
00001e  a119              ADR      r1,|L105.132|
000020  2001              MOVS     r0,#1
000022  f7fffffe          BL       kdp_level_printf
;;;310    #endif
;;;311        
;;;312        // verify_threshold
;;;313        if (Cusinfo.verify_threshold > 4)
000026  f89d0021          LDRB     r0,[sp,#0x21]
00002a  2804              CMP      r0,#4
00002c  d905              BLS      |L105.58|
;;;314        {
;;;315            if (Cusinfo.verify_threshold > 4)
;;;316                Cusinfo.verify_threshold = DB_DEFAULT_FR_THRESHOLD_LEVEL;
00002e  2004              MOVS     r0,#4
000030  f88d0021          STRB     r0,[sp,#0x21]
;;;317    
;;;318            kl520_api_customer_write(&Cusinfo);
000034  4668              MOV      r0,sp
000036  f7fffffe          BL       kl520_api_customer_write
                  |L105.58|
;;;319        }
;;;320        kdp_e2e_set_fr_threshold_level(Cusinfo.verify_threshold);
00003a  f89d0021          LDRB     r0,[sp,#0x21]
00003e  f7fffffe          BL       kdp_e2e_set_fr_threshold_level
;;;321        dbg_msg_console("Fr th: %d", Cusinfo.verify_threshold);
000042  f89d2021          LDRB     r2,[sp,#0x21]
000046  a116              ADR      r1,|L105.160|
000048  2001              MOVS     r0,#1
00004a  f7fffffe          BL       kdp_level_printf
;;;322    
;;;323        
;;;324        // live_threshold
;;;325        if ((Cusinfo.live_threshold < 50) || (Cusinfo.live_threshold > 95))
00004e  f89d0022          LDRB     r0,[sp,#0x22]
000052  3832              SUBS     r0,r0,#0x32
000054  282e              CMP      r0,#0x2e
000056  d305              BCC      |L105.100|
;;;326        {
;;;327            Cusinfo.live_threshold = DB_DEFAULT_RGB_TO_NIR_RATIO;
000058  2055              MOVS     r0,#0x55
00005a  f88d0022          STRB     r0,[sp,#0x22]
;;;328    
;;;329            kl520_api_customer_write(&Cusinfo);
00005e  4668              MOV      r0,sp
000060  f7fffffe          BL       kl520_api_customer_write
                  |L105.100|
;;;330        }
;;;331        kdp_set_rgb_to_nir_ratio(Cusinfo.live_threshold);
000064  f89d0022          LDRB     r0,[sp,#0x22]
000068  f7fffffe          BL       kdp_set_rgb_to_nir_ratio
;;;332        dbg_msg_console("lv th: %d", Cusinfo.live_threshold);
00006c  f89d2022          LDRB     r2,[sp,#0x22]
000070  a10e              ADR      r1,|L105.172|
000072  2001              MOVS     r0,#1
000074  f7fffffe          BL       kdp_level_printf
;;;333        
;;;334    }
000078  b00d              ADD      sp,sp,#0x34
00007a  bd00              POP      {pc}
;;;335    
                          ENDP

                  |L105.124|
                          DCD      ||.data||
                  |L105.128|
                          DCD      ||area_number.123||+0x14
                  |L105.132|
000084  5b25735d          DCB      "[%s] user_db_offset:%x\r\n",0
000088  20757365
00008c  725f6462
000090  5f6f6666
000094  7365743a
000098  25780d0a
00009c  00      
00009d  00                DCB      0
00009e  00                DCB      0
00009f  00                DCB      0
                  |L105.160|
0000a0  46722074          DCB      "Fr th: %d\r\n",0
0000a4  683a2025
0000a8  640d0a00
                  |L105.172|
0000ac  6c762074          DCB      "lv th: %d\r\n",0
0000b0  683a2025
0000b4  640d0a00

                          AREA ||i.kl520_fdfr_opened||, CODE, READONLY, ALIGN=2

                  kl520_fdfr_opened PROC
;;;218    
;;;219    u8 kl520_fdfr_opened(void) 
000000  4801              LDR      r0,|L106.8|
;;;220    {
;;;221        return _fdr_opened;
000002  f8900028          LDRB     r0,[r0,#0x28]  ; _fdr_opened
;;;222    }
000006  4770              BX       lr
;;;223    
                          ENDP

                  |L106.8|
                          DCD      ||.data||

                          AREA ||i.kl520_is_fdfr_abort||, CODE, READONLY, ALIGN=1

                  kl520_is_fdfr_abort PROC
;;;208    
;;;209    u8 kl520_is_fdfr_abort(void)
000000  f7ffbffe          B.W      kdp_is_abort_flag
;;;210    {
;;;211        return kdp_is_abort_flag();
;;;212    }
;;;213    
                          ENDP


                          AREA ||i.kl520_set_fdfr_abort||, CODE, READONLY, ALIGN=1

                  kl520_set_fdfr_abort PROC
;;;213    
;;;214    void kl520_set_fdfr_abort(u8 flag)
000000  f7ffbffe          B.W      kdp_set_abort_flag
;;;215    {
;;;216        kdp_set_abort_flag(flag);
;;;217    }
;;;218    
                          ENDP


                          AREA ||i.load_user_db_offset||, CODE, READONLY, ALIGN=2

                  load_user_db_offset PROC
;;;257    
;;;258    void load_user_db_offset(void)
000000  b500              PUSH     {lr}
;;;259    {
000002  b08d              SUB      sp,sp,#0x34
;;;260        kl520_customer_info Cusinfo;
;;;261        kl520_api_customer_get(&Cusinfo);
000004  4668              MOV      r0,sp
000006  f7fffffe          BL       kl520_api_customer_get
;;;262        
;;;263        user_db_offset = Cusinfo.user_db_offset;
00000a  4808              LDR      r0,|L109.44|
00000c  f89d1029          LDRB     r1,[sp,#0x29]
000010  7401              STRB     r1,[r0,#0x10]
;;;264    #if (DB_OFFSET_CMD == YES)
;;;265    #else
;;;266        if (0x80 == Cusinfo.user_db_offset)
000012  2980              CMP      r1,#0x80
000014  d000              BEQ      |L109.24|
;;;267            user_db_offset = 0x80;
;;;268        else
;;;269            user_db_offset = CUSTOMIZE_DB_OFFSET;
000016  2101              MOVS     r1,#1
                  |L109.24|
000018  7401              STRB     r1,[r0,#0x10]
;;;270    #endif
;;;271        
;;;272        dbg_msg_console("[%s] user_db_offset:%x", __func__, user_db_offset);
00001a  b2cb              UXTB     r3,r1
00001c  4a04              LDR      r2,|L109.48|
00001e  a105              ADR      r1,|L109.52|
000020  2001              MOVS     r0,#1
000022  f7fffffe          BL       kdp_level_printf
;;;273    }
000026  b00d              ADD      sp,sp,#0x34
000028  bd00              POP      {pc}
;;;274    
                          ENDP

00002a  0000              DCW      0x0000
                  |L109.44|
                          DCD      ||.data||
                  |L109.48|
                          DCD      ||area_number.123||
                  |L109.52|
000034  5b25735d          DCB      "[%s] user_db_offset:%x\r\n",0
000038  20757365
00003c  725f6462
000040  5f6f6666
000044  7365743a
000048  25780d0a
00004c  00      
00004d  00                DCB      0
00004e  00                DCB      0
00004f  00                DCB      0

                          AREA ||i.reset_user_db_offset||, CODE, READONLY, ALIGN=1

                  reset_user_db_offset PROC
;;;288    
;;;289    void reset_user_db_offset(void)
000000  2001              MOVS     r0,#1
;;;290    {
;;;291        update_user_db_offset(CUSTOMIZE_DB_OFFSET);
000002  f7ffbffe          B.W      update_user_db_offset
;;;292    }
;;;293    #endif
                          ENDP


                          AREA ||i.set_enroll_customize_uid||, CODE, READONLY, ALIGN=2

                  set_enroll_customize_uid PROC
;;;229    
;;;230    void set_enroll_customize_uid(u8 uid)
000000  4901              LDR      r1,|L111.8|
;;;231    {
;;;232        _enroll_customize_uid = uid;
000002  71c8              STRB     r0,[r1,#7]
;;;233    }
000004  4770              BX       lr
;;;234    
                          ENDP

000006  0000              DCW      0x0000
                  |L111.8|
                          DCD      ||.data||

                          AREA ||i.set_enroll_overwrite_flag||, CODE, READONLY, ALIGN=2

                  set_enroll_overwrite_flag PROC
;;;239    
;;;240    void set_enroll_overwrite_flag(u8 flag)
000000  4901              LDR      r1,|L112.8|
;;;241    {
;;;242        _enroll_overwrite_flag = flag;
000002  7208              STRB     r0,[r1,#8]
;;;243    }
000004  4770              BX       lr
;;;244    
                          ENDP

000006  0000              DCW      0x0000
                  |L112.8|
                          DCD      ||.data||

                          AREA ||i.update_user_db_offset||, CODE, READONLY, ALIGN=2

                  update_user_db_offset PROC
;;;274    
;;;275    void update_user_db_offset(u8 offset)
000000  b530              PUSH     {r4,r5,lr}
;;;276    {
000002  b08d              SUB      sp,sp,#0x34
000004  4604              MOV      r4,r0
;;;277        kl520_customer_info Cusinfo;
;;;278        kl520_api_customer_get(&Cusinfo);
000006  4668              MOV      r0,sp
000008  f7fffffe          BL       kl520_api_customer_get
;;;279        
;;;280        if (offset != Cusinfo.user_db_offset)
00000c  f89d0029          LDRB     r0,[sp,#0x29]
;;;281        {
;;;282            user_db_offset = offset;
000010  4d07              LDR      r5,|L113.48|
000012  42a0              CMP      r0,r4                 ;280
000014  d005              BEQ      |L113.34|
000016  742c              STRB     r4,[r5,#0x10]
;;;283            Cusinfo.user_db_offset = user_db_offset;
000018  f88d4029          STRB     r4,[sp,#0x29]
;;;284            kl520_api_customer_write(&Cusinfo);
00001c  4668              MOV      r0,sp
00001e  f7fffffe          BL       kl520_api_customer_write
                  |L113.34|
;;;285        }
;;;286        dbg_msg_console("Update user_db_offset to 0x%02x", user_db_offset);
000022  7c2a              LDRB     r2,[r5,#0x10]  ; user_db_offset
000024  a103              ADR      r1,|L113.52|
000026  2001              MOVS     r0,#1
000028  f7fffffe          BL       kdp_level_printf
;;;287    }
00002c  b00d              ADD      sp,sp,#0x34
00002e  bd30              POP      {r4,r5,pc}
;;;288    
                          ENDP

                  |L113.48|
                          DCD      ||.data||
                  |L113.52|
000034  55706461          DCB      "Update user_db_offset to 0x%02x\r\n",0
000038  74652075
00003c  7365725f
000040  64625f6f
000044  66667365
000048  7420746f
00004c  20307825
000050  3032780d
000054  0a00    
000056  00                DCB      0
000057  00                DCB      0

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  dp_draw_info
                          %        128

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  reg_normal_score0
000000  3f7ae148          DCFS     0x3f7ae148 ; 0.98000001907348633

                          AREA ||area_number.118||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.118||, ||.constdata||
                  reg_normal_score1
000000  3f59999a          DCFS     0x3f59999a ; 0.85000002384185791

                          AREA ||area_number.119||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.119||, ||.constdata||
                  reg_normal_pitch0
000000  0f                DCB      0x0f

                          AREA ||area_number.120||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.120||, ||.constdata||
                  reg_normal_pitch1
000000  f1                DCB      0xf1

                          AREA ||area_number.121||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.121||, ||.constdata||
                  reg_normal_yaw
000000  08                DCB      0x08

                          AREA ||area_number.122||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.122||, ||.constdata||
                  reg_normal_roll
000000  0c                DCB      0x0c

                          AREA ||area_number.123||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.123||, ||.constdata||
                  __func__
000000  6c6f6164          DCB      0x6c,0x6f,0x61,0x64
000004  5f757365          DCB      0x5f,0x75,0x73,0x65
000008  725f6462          DCB      0x72,0x5f,0x64,0x62
00000c  5f6f6666          DCB      0x5f,0x6f,0x66,0x66
000010  73657400          DCB      0x73,0x65,0x74,0x00
                  |symbol_number.345|
000014  6b6c3532          DCB      0x6b,0x6c,0x35,0x32
000018  305f6375          DCB      0x30,0x5f,0x63,0x75
00001c  73746f6d          DCB      0x73,0x74,0x6f,0x6d
000020  65725f69          DCB      0x65,0x72,0x5f,0x69
000024  6e666f5f          DCB      0x6e,0x66,0x6f,0x5f
000028  696e6974          DCB      0x69,0x6e,0x69,0x74
00002c  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000001
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000a00
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
000054  3f451eb8          DCFS     0x3f451eb8 ; 0.76999998092651367
000058  3f451eb8          DCFS     0x3f451eb8 ; 0.76999998092651367
00005c  3f451eb8          DCFS     0x3f451eb8 ; 0.76999998092651367
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000500
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
000084  3f451eb8          DCFS     0x3f451eb8 ; 0.76999998092651367
000088  3f451eb8          DCFS     0x3f451eb8 ; 0.76999998092651367
00008c  3f451eb8          DCFS     0x3f451eb8 ; 0.76999998092651367
                  |symbol_number.346|
000090  6b6c3532          DCB      0x6b,0x6c,0x35,0x32
000094  305f6170          DCB      0x30,0x5f,0x61,0x70
000098  695f6164          DCB      0x69,0x5f,0x61,0x64
00009c  645f7761          DCB      0x64,0x5f,0x77,0x61
0000a0  69745f61          DCB      0x69,0x74,0x5f,0x61
0000a4  6e645f67          DCB      0x6e,0x64,0x5f,0x67
0000a8  65740000          DCB      0x65,0x74,0x00,0x00
                          DCD      0x0000006a
                          DCD      0x0000005d
                          DCD      0x00000047
                          DCD      0x00000028
                          DCD      0x0000006f
                          DCD      0x00000067
                          DCD      0x00000077
                          DCD      0x00000027
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000500
                          DCD      0x00000030
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000500
                          DCD      0x00000018
                          DCD      0x00000000
                          DCD      0x00000000

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  4d525f53          DCB      "MR_SUCCESS",0
000004  55434345
000008  535300  
00000b  00                DCB      0
00000c  4d525f52          DCB      "MR_REJECTED",0
000010  454a4543
000014  54454400
000018  4d525f41          DCB      "MR_ABORTED",0
00001c  424f5254
000020  454400  
000023  00                DCB      0
000024  4d525f46          DCB      "MR_FAILED_DEV_OPEN_FAIL",0
000028  41494c45
00002c  445f4445
000030  565f4f50
000034  454e5f46
000038  41494c00
00003c  4d525f46          DCB      "MR_FAILED_UNKNOWN_REASON",0
000040  41494c45
000044  445f554e
000048  4b4e4f57
00004c  4e5f5245
000050  41534f4e
000054  00      
000055  00                DCB      0
000056  00                DCB      0
000057  00                DCB      0
000058  4d525f46          DCB      "MR_FAILED_INVALID_PARAM",0
00005c  41494c45
000060  445f494e
000064  56414c49
000068  445f5041
00006c  52414d00
000070  4d525f46          DCB      "MR_FAILED_OOM",0
000074  41494c45
000078  445f4f4f
00007c  4d00    
00007e  00                DCB      0
00007f  00                DCB      0
000080  4d525f46          DCB      "MR_FAILED_UNKNOWN_USER",0
000084  41494c45
000088  445f554e
00008c  4b4e4f57
000090  4e5f5553
000094  455200  
000097  00                DCB      0
000098  4d525f46          DCB      "MR_FAILED_MAX_USER",0
00009c  41494c45
0000a0  445f4d41
0000a4  585f5553
0000a8  455200  
0000ab  00                DCB      0
0000ac  4d525f46          DCB      "MR_FAILED_FACE_ENROLLED",0
0000b0  41494c45
0000b4  445f4641
0000b8  43455f45
0000bc  4e524f4c
0000c0  4c454400
0000c4  4d525f46          DCB      "MR_FAILED_LIVENESS_CHECK",0
0000c8  41494c45
0000cc  445f4c49
0000d0  56454e45
0000d4  53535f43
0000d8  4845434b
0000dc  00      
0000dd  00                DCB      0
0000de  00                DCB      0
0000df  00                DCB      0
0000e0  4d525f46          DCB      "MR_FAILED_TIME_OUT",0
0000e4  41494c45
0000e8  445f5449
0000ec  4d455f4f
0000f0  555400  
0000f3  00                DCB      0
0000f4  4d525f46          DCB      "MR_FAILED_AUTHORIZATION",0
0000f8  41494c45
0000fc  445f4155
000100  54484f52
000104  495a4154
000108  494f4e00
00010c  4d525f46          DCB      "MR_FAILED_READ_FILE",0
000110  41494c45
000114  445f5245
000118  41445f46
00011c  494c4500
000120  4d525f46          DCB      "MR_FAILED_WRITE_FILE",0
000124  41494c45
000128  445f5752
00012c  4954455f
000130  46494c45
000134  00      
000135  00                DCB      0
000136  00                DCB      0
000137  00                DCB      0
000138  4d525f46          DCB      "MR_FAILED_NO_ENCRYPT",0
00013c  41494c45
000140  445f4e4f
000144  5f454e43
000148  52595054
00014c  00      
00014d  00                DCB      0
00014e  00                DCB      0
00014f  00                DCB      0
000150  4d525f46          DCB      "MR_FAILED_STORE_ERR",0
000154  41494c45
000158  445f5354
00015c  4f52455f
000160  45525200
000164  4d525f46          DCB      "MR_FAILED_NO_IMG",0
000168  41494c45
00016c  445f4e4f
000170  5f494d47
000174  00      
000175  00                DCB      0
000176  00                DCB      0
000177  00                DCB      0
000178  4d525f46          DCB      "MR_FAILED_NO_IDX",0
00017c  41494c45
000180  445f4e4f
000184  5f494458
000188  00      
000189  00                DCB      0
00018a  00                DCB      0
00018b  00                DCB      0
00018c  4d525f46          DCB      "MR_FAILED_BUF_OVERFLOW",0
000190  41494c45
000194  445f4255
000198  465f4f56
00019c  4552464c
0001a0  4f5700  
0001a3  00                DCB      0
0001a4  4d525f46          DCB      "MR_FAILED_MASS_DATA_HEAD_EMPTY",0
0001a8  41494c45
0001ac  445f4d41
0001b0  53535f44
0001b4  4154415f
0001b8  48454144
0001bc  5f454d50
0001c0  545900  
0001c3  00                DCB      0
0001c4  4d525f46          DCB      "MR_FAILED_MASS_DATA_DB_ABNORMAL",0
0001c8  41494c45
0001cc  445f4d41
0001d0  53535f44
0001d4  4154415f
0001d8  44425f41
0001dc  424e4f52
0001e0  4d414c00
0001e4  4d525f46          DCB      "MR_FAILED_MASS_DATA_FM_ABNORMAL",0
0001e8  41494c45
0001ec  445f4d41
0001f0  53535f44
0001f4  4154415f
0001f8  464d5f41
0001fc  424e4f52
000200  4d414c00
000204  4d525f46          DCB      "MR_FAILED_NOT_READY",0
000208  41494c45
00020c  445f4e4f
000210  545f5245
000214  41445900
000218  4d525f46          DCB      "MR_FAILED_EXISTED_USER",0
00021c  41494c45
000220  445f4558
000224  49535445
000228  445f5553
00022c  455200  
00022f  00                DCB      0
000230  4d525f46          DCB      "MR_FAILED_IDX_OVERFLOW",0
000234  41494c45
000238  445f4944
00023c  585f4f56
000240  4552464c
000244  4f5700  
000247  00                DCB      0
000248  4d525f43          DCB      "MR_CONTIUNOUS",0
00024c  4f4e5449
000250  554e4f55
000254  5300    
000256  00                DCB      0
000257  00                DCB      0
000258  4d525f53          DCB      "MR_SUCCESS_BUT_DEL_USER",0
00025c  55434345
000260  53535f42
000264  55545f44
000268  454c5f55
00026c  53455200
000270  4d525f46          DCB      "MR_FAILED_INVALID_CMD",0
000274  41494c45
000278  445f494e
00027c  56414c49
000280  445f434d
000284  4400    
000286  00                DCB      0
000287  00                DCB      0
000288  00                DCB      0
000289  00                DCB      0
00028a  00                DCB      0
00028b  00                DCB      0
00028c  5b504153          DCB      "[PASS] KL520_FACE_DB_OK (UseID = %#x, Admin = %d, UseNa"
000290  535d204b
000294  4c353230
000298  5f464143
00029c  455f4442
0002a0  5f4f4b20
0002a4  28557365
0002a8  4944203d
0002ac  20252378
0002b0  2c204164
0002b4  6d696e20
0002b8  3d202564
0002bc  2c205573
0002c0  654e61  
0002c3  6d65203d          DCB      "me = %s, fdr_result = %#x)\r\n",0
0002c7  2025732c
0002cb  20666472
0002cf  5f726573
0002d3  756c7420
0002d7  3d202523
0002db  78290d0a
0002df  00      

                          AREA ||.data||, DATA, ALIGN=2

                  rgb_sensor_index
000000  00                DCB      0x00
                  nir_sensor_index
000001  01                DCB      0x01
                  m_face_add_mode
000002  00                DCB      0x00
                  m_face_db_add_mode
000003  00                DCB      0x00
                  m_curr_user_id
000004  ff                DCB      0xff
                  m_face_appear
000005  00                DCB      0x00
                  m_curr_face_id
000006  ff                DCB      0xff
                  _enroll_customize_uid
000007  ff                DCB      0xff
                  _enroll_overwrite_flag
000008  00                DCB      0x00
                  m_fdr_model_inited
000009  00                DCB      0x00
                  m_face_mode
00000a  00                DCB      0x00
                  g_bRecognitionMandatoryFlag
00000b  00                DCB      0x00
                  face_add_bitmap
00000c  1e                DCB      0x1e
                  face_attack_cnt
00000d  00                DCB      0x00
                  bad_pose_cnt
00000e  00                DCB      0x00
                  ui_fsm_dp_layout_en
00000f  00                DCB      0x00
                  user_db_offset
000010  01                DCB      0x01
                  face_succ_index
000011  00                DCB      0x00
                  face_hp_check_idx
000012  00                DCB      0x00
                  fmap_index
000013  00                DCB      0x00
                  prev_x
000014  0000              DCW      0x0000
                  prev_y
000016  0000              DCW      0x0000
                  m_fdfr_tick
                          DCD      0x00000000
                  m_db_comp_fail_cnt
                          DCD      0x00000000
                  mutex_face_close
                          DCD      0x00000000
                  _mutex_fdfr
                          DCD      0x00000000
                  _fdr_opened
                          DCD      0x00000000
                  m_face_add_timeout
                          DCD      0x0000001e
                  m_face_recognition_timeout
                          DCD      0x0000001e
                  m_face_liveness_timeout
                          DCD      0x0000001e
                  tid_fdfr_update_fr
                          DCD      0x00000000
                  m_old_thread_priority
                          DCD      0x00000018
                  kl520_fdfr_drawing_timer
                          DCD      0x00000000
                  kl520_fdfr_drawing_timer_flag
                          DCD      0x00000002
                  vote_score
                          DCD      0x00000000
                  face_non_move_cnt
                          DCD      0xffffffff
                  _fdr_event_id
                          DCD      0x00000000
                  tid_tasks_init_cameras
                          DCD      0x00000000
                  tid_tasks_init_models
                          DCD      0x00000000
                  tid_tasks_init_models_each
                          DCD      0x00000000
                  ftime
000060  00000000          DCFS     0x00000000 ; 0
                  ffps
000064  00000000          DCFS     0x00000000 ; 0
                  _nShowimerPre
                          DCD      0xffffffff
                  nofaceTime
                          DCD      0x00000000
                  face_reg_sts
                          DCD      0x00000000
                  m_api_fdfr_ctx
000074  01000000          DCB      0x01,0x00,0x00,0x00
                          DCD      0x00000000
00007c  ff000000          DCB      0xff,0x00,0x00,0x00

                          AREA ||area_number.126||, DATA, ALIGN=0

                          EXPORTAS ||area_number.126||, ||.data||
                  sensor_0_mirror
000000  00                DCB      0x00

                          AREA ||area_number.127||, DATA, ALIGN=0

                          EXPORTAS ||area_number.127||, ||.data||
                  sensor_0_flip
000000  01                DCB      0x01

                          AREA ||area_number.128||, DATA, ALIGN=0

                          EXPORTAS ||area_number.128||, ||.data||
                  sensor_1_mirror
000000  00                DCB      0x00

                          AREA ||area_number.129||, DATA, ALIGN=0

                          EXPORTAS ||area_number.129||, ||.data||
                  sensor_1_flip
000000  01                DCB      0x01

                          AREA ||area_number.130||, DATA, ALIGN=2

                          EXPORTAS ||area_number.130||, ||.data||
                  nir_normal_addr
                          DCD      0x00000000

                          AREA ||area_number.131||, DATA, ALIGN=0

                          EXPORTAS ||area_number.131||, ||.data||
                  m_flow_mode
000000  00                DCB      0x00

                          AREA ||area_number.132||, DATA, ALIGN=0

                          EXPORTAS ||area_number.132||, ||.data||
                  b_en_aec_only
000000  00                DCB      0x00

                          AREA ||area_number.133||, DATA, ALIGN=0

                          EXPORTAS ||area_number.133||, ||.data||
                  face_pose_val
                          DCDU     0x00000000
000004  00                DCB      0x00

                          AREA ||i._str_uart_reply||, COMGROUP=_str_uart_reply, CODE, READONLY, ALIGN=2

                  _str_uart_reply PROC
;;;201    #pragma diag_suppress 111
;;;202    inline char *_str_uart_reply(enum uart_reply_result result)
000000  2814              CMP      r0,#0x14
;;;203    {
;;;204        switch (result)
000002  d04e              BEQ      |L666.162|
000004  dc0d              BGT      |L666.34|
000006  2814              CMP      r0,#0x14
000008  d22d              BCS      |L666.102|
00000a  e8dff000          TBB      [pc,r0]
00000e  2e30              DCB      0x2e,0x30
000010  322c3436          DCB      0x32,0x2c,0x34,0x36
000014  383a3c3e          DCB      0x38,0x3a,0x3c,0x3e
000018  402c4244          DCB      0x40,0x2c,0x42,0x44
00001c  462c2c2c          DCB      0x46,0x2c,0x2c,0x2c
000020  2c48              DCB      0x2c,0x48
                  |L666.34|
000022  2832              CMP      r0,#0x32
000024  d04d              BEQ      |L666.194|
000026  dc10              BGT      |L666.74|
000028  2818              CMP      r0,#0x18
00002a  d042              BEQ      |L666.178|
00002c  dc06              BGT      |L666.60|
00002e  2815              CMP      r0,#0x15
000030  d039              BEQ      |L666.166|
000032  2816              CMP      r0,#0x16
000034  d039              BEQ      |L666.170|
000036  2817              CMP      r0,#0x17
000038  d115              BNE      |L666.102|
00003a  e038              B        |L666.174|
                  |L666.60|
00003c  2819              CMP      r0,#0x19
00003e  d03a              BEQ      |L666.182|
000040  2830              CMP      r0,#0x30
000042  d03a              BEQ      |L666.186|
000044  2831              CMP      r0,#0x31
000046  d10e              BNE      |L666.102|
000048  e039              B        |L666.190|
                  |L666.74|
00004a  2836              CMP      r0,#0x36
00004c  d041              BEQ      |L666.210|
00004e  dc06              BGT      |L666.94|
000050  2833              CMP      r0,#0x33
000052  d038              BEQ      |L666.198|
000054  2834              CMP      r0,#0x34
000056  d038              BEQ      |L666.202|
000058  2835              CMP      r0,#0x35
00005a  d104              BNE      |L666.102|
00005c  e037              B        |L666.206|
                  |L666.94|
00005e  2840              CMP      r0,#0x40
000060  d039              BEQ      |L666.214|
000062  28ff              CMP      r0,#0xff
000064  d039              BEQ      |L666.218|
                  |L666.102|
;;;205        {
;;;206            CMD_REPLY_RESULT_MACRO(TO_STR)
;;;207        default:
;;;208            break;
;;;209        }
;;;210        
;;;211        return "";
000066  481e              LDR      r0,|L666.224|
;;;212    }
000068  4770              BX       lr
00006a  481e              LDR      r0,|L666.228|
00006c  4770              BX       lr
00006e  481e              LDR      r0,|L666.232|
000070  4770              BX       lr
000072  481e              LDR      r0,|L666.236|
000074  4770              BX       lr
000076  481e              LDR      r0,|L666.240|
000078  4770              BX       lr
00007a  481e              LDR      r0,|L666.244|
00007c  4770              BX       lr
00007e  481e              LDR      r0,|L666.248|
000080  4770              BX       lr
000082  481e              LDR      r0,|L666.252|
000084  4770              BX       lr
000086  481e              LDR      r0,|L666.256|
000088  4770              BX       lr
00008a  481e              LDR      r0,|L666.260|
00008c  4770              BX       lr
00008e  481e              LDR      r0,|L666.264|
000090  4770              BX       lr
000092  481e              LDR      r0,|L666.268|
000094  4770              BX       lr
000096  481e              LDR      r0,|L666.272|
000098  4770              BX       lr
00009a  481e              LDR      r0,|L666.276|
00009c  4770              BX       lr
00009e  481e              LDR      r0,|L666.280|
0000a0  4770              BX       lr
                  |L666.162|
0000a2  481e              LDR      r0,|L666.284|
0000a4  4770              BX       lr
                  |L666.166|
0000a6  481e              LDR      r0,|L666.288|
0000a8  4770              BX       lr
                  |L666.170|
0000aa  481e              LDR      r0,|L666.292|
0000ac  4770              BX       lr
                  |L666.174|
0000ae  481e              LDR      r0,|L666.296|
0000b0  4770              BX       lr
                  |L666.178|
0000b2  481e              LDR      r0,|L666.300|
0000b4  4770              BX       lr
                  |L666.182|
0000b6  481e              LDR      r0,|L666.304|
0000b8  4770              BX       lr
                  |L666.186|
0000ba  481e              LDR      r0,|L666.308|
0000bc  4770              BX       lr
                  |L666.190|
0000be  481e              LDR      r0,|L666.312|
0000c0  4770              BX       lr
                  |L666.194|
0000c2  481e              LDR      r0,|L666.316|
0000c4  4770              BX       lr
                  |L666.198|
0000c6  481e              LDR      r0,|L666.320|
0000c8  4770              BX       lr
                  |L666.202|
0000ca  481e              LDR      r0,|L666.324|
0000cc  4770              BX       lr
                  |L666.206|
0000ce  481e              LDR      r0,|L666.328|
0000d0  4770              BX       lr
                  |L666.210|
0000d2  481e              LDR      r0,|L666.332|
0000d4  4770              BX       lr
                  |L666.214|
0000d6  481e              LDR      r0,|L666.336|
0000d8  4770              BX       lr
                  |L666.218|
0000da  481e              LDR      r0,|L666.340|
0000dc  4770              BX       lr
;;;213    #pragma diag_warning 111
                          ENDP

0000de  0000              DCW      0x0000
                  |L666.224|
                          DCD      ||.conststring||+0x288
                  |L666.228|
                          DCD      ||.conststring||
                  |L666.232|
                          DCD      ||.conststring||+0xc
                  |L666.236|
                          DCD      ||.conststring||+0x18
                  |L666.240|
                          DCD      ||.conststring||+0x24
                  |L666.244|
                          DCD      ||.conststring||+0x3c
                  |L666.248|
                          DCD      ||.conststring||+0x58
                  |L666.252|
                          DCD      ||.conststring||+0x70
                  |L666.256|
                          DCD      ||.conststring||+0x80
                  |L666.260|
                          DCD      ||.conststring||+0x98
                  |L666.264|
                          DCD      ||.conststring||+0xac
                  |L666.268|
                          DCD      ||.conststring||+0xc4
                  |L666.272|
                          DCD      ||.conststring||+0xe0
                  |L666.276|
                          DCD      ||.conststring||+0xf4
                  |L666.280|
                          DCD      ||.conststring||+0x10c
                  |L666.284|
                          DCD      ||.conststring||+0x120
                  |L666.288|
                          DCD      ||.conststring||+0x138
                  |L666.292|
                          DCD      ||.conststring||+0x150
                  |L666.296|
                          DCD      ||.conststring||+0x164
                  |L666.300|
                          DCD      ||.conststring||+0x178
                  |L666.304|
                          DCD      ||.conststring||+0x18c
                  |L666.308|
                          DCD      ||.conststring||+0x1a4
                  |L666.312|
                          DCD      ||.conststring||+0x1c4
                  |L666.316|
                          DCD      ||.conststring||+0x1e4
                  |L666.320|
                          DCD      ||.conststring||+0x204
                  |L666.324|
                          DCD      ||.conststring||+0x218
                  |L666.328|
                          DCD      ||.conststring||+0x230
                  |L666.332|
                          DCD      ||.conststring||+0x248
                  |L666.336|
                          DCD      ||.conststring||+0x258
                  |L666.340|
                          DCD      ||.conststring||+0x270

                          AREA ||i._api_fdfr_set_event||, COMGROUP=_api_fdfr_set_event, CODE, READONLY, ALIGN=1

                  _api_fdfr_set_event PROC
;;;2017   
;;;2018   void _api_fdfr_set_event(u32 flags_api_fdfr_state, u32 kl520_app_flag_state, bool CLR)
000000  b570              PUSH     {r4-r6,lr}
;;;2019   {
000002  4614              MOV      r4,r2
000004  460e              MOV      r6,r1
000006  4605              MOV      r5,r0
;;;2020       if(osThreadFlagsGet() == flags_api_fdfr_state){
000008  f7fffffe          BL       osThreadFlagsGet
00000c  42a8              CMP      r0,r5
00000e  d104              BNE      |L673.26|
;;;2021           set_event(kl520_api_get_event(), kl520_app_flag_state);
000010  f7fffffe          BL       kl520_api_get_event
000014  4631              MOV      r1,r6
000016  f7fffffe          BL       set_event
                  |L673.26|
;;;2022       }
;;;2023   
;;;2024       if(CLR == TRUE){
00001a  2c00              CMP      r4,#0
00001c  d004              BEQ      |L673.40|
;;;2025           osThreadFlagsClear(flags_api_fdfr_state);
00001e  4628              MOV      r0,r5
000020  e8bd4070          POP      {r4-r6,lr}
000024  f7ffbffe          B.W      osThreadFlagsClear
                  |L673.40|
;;;2026       }
;;;2027   }
000028  bd70              POP      {r4-r6,pc}
;;;2028   
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\scpu\\share\\kl520_api_fdfr.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___16_kl520_api_fdfr_c_93e9c590____REV16|
#line 208 "F:\\Users\\fu\\AppData\\Local\\Arm\\Packs\\ARM\\CMSIS\\5.9.0\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___16_kl520_api_fdfr_c_93e9c590____REV16| PROC
#line 209

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___16_kl520_api_fdfr_c_93e9c590____REVSH|
#line 223
|__asm___16_kl520_api_fdfr_c_93e9c590____REVSH| PROC
#line 224

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___16_kl520_api_fdfr_c_93e9c590____RRX|
#line 410
|__asm___16_kl520_api_fdfr_c_93e9c590____RRX| PROC
#line 411

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
