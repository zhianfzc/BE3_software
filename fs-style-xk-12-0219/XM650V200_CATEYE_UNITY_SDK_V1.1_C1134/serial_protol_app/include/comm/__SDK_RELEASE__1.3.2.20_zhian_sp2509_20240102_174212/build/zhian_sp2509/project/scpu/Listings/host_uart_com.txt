; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\objects\host_uart_com.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\host_uart_com.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O3 --diag_suppress=9931 -I..\..\config -I..\..\..\..\board -I..\..\..\..\common\include -I..\..\..\..\scpu\device\include\CMSIS -I..\..\..\..\scpu\device\include\Kneron -I..\..\..\..\scpu\framework\include -I..\..\..\..\scpu\framework\include\framework -I..\..\..\..\scpu\drivers\include -I..\..\..\..\scpu\drivers\include\media\touch -I..\..\..\..\scpu\drivers\include\media\flash -I..\..\..\..\scpu\lib\kdp_system\inc -I..\..\..\..\scpu\lib\kdp_application\include\ -I..\..\..\..\scpu\lib\kdp_application\base\ -I..\..\..\..\scpu\lib\kdp_application\misc -I..\..\..\..\scpu\lib\kdp_e2e_r1n1\include -I..\..\..\..\scpu\include -I..\..\..\..\scpu\middleware\ota -I..\..\..\..\scpu\middleware\comm -I..\..\..\..\scpu\middleware\kdp_comm -I..\..\..\..\scpu\share -I..\..\..\..\scpu\share\gui_lib -I..\..\user -I.\RTE\CMSIS -I.\RTE\_Target-scpu -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\RTOS2\Include -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\RTOS2\RTX\Include -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\Device\ARM\ARMCM4\Include -D__RTX -D__MICROLIB -D__UVISION_VERSION=538 -D_RTE_ -DARMCM4_FP -D_RTE_ -DARM_MATH_CM4 -DTARGET_SCPU -DLOG_ENABLE -DKL520 -DHEAD_POSE_CHECK_PERCENT --omf_browse=.\objects\host_uart_com.crf ..\..\..\..\scpu\middleware\comm\host_uart_com.c]
                          THUMB

                          AREA ||i.UART0_callback||, CODE, READONLY, ALIGN=2

                  UART0_callback PROC
;;;65     
;;;66     void UART0_callback(uint32_t event)
000000  4904              LDR      r1,|L1.20|
;;;67     {
;;;68         if (event & ARM_USART_EVENT_RECEIVE_COMPLETE)
000002  0783              LSLS     r3,r0,#30
;;;69         {
;;;70             UART0_Rx = true;
000004  f04f0201          MOV      r2,#1
000008  d500              BPL      |L1.12|
00000a  700a              STRB     r2,[r1,#0]
                  |L1.12|
;;;71         }
;;;72     
;;;73         if (event & ARM_USART_EVENT_SEND_COMPLETE)
00000c  07c0              LSLS     r0,r0,#31
00000e  d000              BEQ      |L1.18|
;;;74         {
;;;75             UART0_Tx = true;
000010  704a              STRB     r2,[r1,#1]
                  |L1.18|
;;;76         }
;;;77     }
000012  4770              BX       lr
;;;78     
                          ENDP

                  |L1.20|
                          DCD      ||.data||

                          AREA ||i.UART1_callback||, CODE, READONLY, ALIGN=2

                  UART1_callback PROC
;;;79     
;;;80     void UART1_callback(uint32_t event)
000000  4904              LDR      r1,|L2.20|
;;;81     {
;;;82         if (event & ARM_USART_EVENT_RECEIVE_COMPLETE)
000002  0783              LSLS     r3,r0,#30
;;;83         {
;;;84             UART1_Rx = true;
000004  f04f0201          MOV      r2,#1
000008  d500              BPL      |L2.12|
00000a  708a              STRB     r2,[r1,#2]
                  |L2.12|
;;;85         }
;;;86     
;;;87         if (event & ARM_USART_EVENT_SEND_COMPLETE)
00000c  07c0              LSLS     r0,r0,#31
00000e  d000              BEQ      |L2.18|
;;;88         {
;;;89             UART1_Tx = true;
000010  70ca              STRB     r2,[r1,#3]
                  |L2.18|
;;;90         }
;;;91     }
000012  4770              BX       lr
;;;92     
                          ENDP

                  |L2.20|
                          DCD      ||.data||

                          AREA ||i.UART2_callback||, CODE, READONLY, ALIGN=2

                  UART2_callback PROC
;;;92     
;;;93     void UART2_callback(uint32_t event)
000000  4904              LDR      r1,|L3.20|
;;;94     {
;;;95         if (event & ARM_USART_EVENT_RECEIVE_COMPLETE)
000002  0783              LSLS     r3,r0,#30
;;;96         {
;;;97             UART2_Rx = true;
000004  f04f0201          MOV      r2,#1
000008  d500              BPL      |L3.12|
00000a  710a              STRB     r2,[r1,#4]
                  |L3.12|
;;;98         }
;;;99     
;;;100        if (event & ARM_USART_EVENT_SEND_COMPLETE)
00000c  07c0              LSLS     r0,r0,#31
00000e  d000              BEQ      |L3.18|
;;;101        {
;;;102            UART2_Tx = true;
000010  714a              STRB     r2,[r1,#5]
                  |L3.18|
;;;103        }
;;;104    }
000012  4770              BX       lr
;;;105    
                          ENDP

                  |L3.20|
                          DCD      ||.data||

                          AREA ||i.UART3_callback||, CODE, READONLY, ALIGN=2

                  UART3_callback PROC
;;;105    
;;;106    void UART3_callback(uint32_t event)
000000  4904              LDR      r1,|L4.20|
;;;107    {
;;;108        if (event & ARM_USART_EVENT_RECEIVE_COMPLETE)
000002  0783              LSLS     r3,r0,#30
;;;109        {
;;;110            UART3_Rx = true;
000004  f04f0201          MOV      r2,#1
000008  d500              BPL      |L4.12|
00000a  718a              STRB     r2,[r1,#6]
                  |L4.12|
;;;111        }
;;;112    
;;;113        if (event & ARM_USART_EVENT_SEND_COMPLETE)
00000c  07c0              LSLS     r0,r0,#31
00000e  d000              BEQ      |L4.18|
;;;114        {
;;;115            UART3_Tx = true;
000010  71ca              STRB     r2,[r1,#7]
                  |L4.18|
;;;116        }
;;;117    }
000012  4770              BX       lr
;;;118    
                          ENDP

                  |L4.20|
                          DCD      ||.data||

                          AREA ||i.UART4_callback||, CODE, READONLY, ALIGN=2

                  UART4_callback PROC
;;;118    
;;;119    void UART4_callback(uint32_t event)
000000  4906              LDR      r1,|L5.28|
;;;120    {
;;;121        if (event & ARM_USART_EVENT_RECEIVE_COMPLETE)
000002  0783              LSLS     r3,r0,#30
;;;122        {
;;;123            UART4_Rx = true;
000004  f04f0201          MOV      r2,#1
000008  d500              BPL      |L5.12|
00000a  720a              STRB     r2,[r1,#8]
                  |L5.12|
;;;124        }
;;;125    
;;;126        if (event & ARM_USART_EVENT_SEND_COMPLETE)
00000c  07c3              LSLS     r3,r0,#31
00000e  d000              BEQ      |L5.18|
;;;127        {
;;;128            UART4_Tx = true;
000010  724a              STRB     r2,[r1,#9]
                  |L5.18|
;;;129        }
;;;130    
;;;131        if (event & ARM_USART_EVENT_RX_TIMEOUT)
000012  0640              LSLS     r0,r0,#25
000014  d500              BPL      |L5.24|
;;;132        {
;;;133            UART4_Rx = true;
000016  720a              STRB     r2,[r1,#8]
                  |L5.24|
;;;134        }
;;;135    }
000018  4770              BX       lr
;;;136    
                          ENDP

00001a  0000              DCW      0x0000
                  |L5.28|
                          DCD      ||.data||

                          AREA ||i.kdp_uart_app_com||, CODE, READONLY, ALIGN=2

                  kdp_uart_app_com PROC
;;;136    
;;;137    void kdp_uart_app_com(u8 port, u32 baudrate, u8* buffer, u32 size)
000000  e92d43fe          PUSH     {r1-r9,lr}
;;;138    {
;;;139        int32_t ret;
;;;140        UINT32	data;
;;;141        kdp_uart_hdl_t handle;
;;;142        
;;;143        if (4 == port) {
;;;144            kdp_uart_close(UART4_DEV);
;;;145            //pad mux
;;;146            data = inw( SCU_EXTREG_PA_BASE + 0x18C );
000004  4f34              LDR      r7,|L6.216|
;;;147            data &= 0xFFFFFFF8;		//clear low 3bit
;;;148            data &= 0xFFFFFFE7;		//clear bit 3 and bit4
;;;149            
;;;150            outw( SCU_EXTREG_PA_BASE + 0x18C, data | 0x6 | 1<<4 );
;;;151            data = inw( SCU_EXTREG_PA_BASE + 0x190 );
;;;152            data &= 0xFFFFFFF8;		//clear low 3bit
;;;153            data &= 0xFFFFFFE7;		//clear bit 3 and bit4
;;;154            
;;;155            outw( SCU_EXTREG_PA_BASE + 0x190, data | 0x6 | 1<<4 );
;;;156            
;;;157            handle = handle4;
000006  4d35              LDR      r5,|L6.220|
000008  4698              MOV      r8,r3                 ;138
00000a  4691              MOV      r9,r2                 ;138
00000c  460c              MOV      r4,r1                 ;138
00000e  4606              MOV      r6,r0                 ;138
000010  2804              CMP      r0,#4                 ;143
000012  d046              BEQ      |L6.162|
;;;158            handle = kdp_uart_open(UART4_DEV, UART_MODE_ASYN_RX | UART_MODE_SYNC_TX, UART4_callback);
;;;159        }
;;;160        else if (2 == port) {
000014  2e02              CMP      r6,#2
000016  d142              BNE      |L6.158|
;;;161            kdp_uart_close(UART2_DEV);
000018  f7fffffe          BL       kdp_uart_close
;;;162            //pad mux		//20200118 Jeff add
;;;163            kdp_uart_close(UART2_DEV);
00001c  2002              MOVS     r0,#2
00001e  f7fffffe          BL       kdp_uart_close
;;;164            data = inw(SCU_EXTREG_PA_BASE + 0x154);
000022  f8d70154          LDR      r0,[r7,#0x154]
;;;165            data &= 0xFFFFFFF8;		//clear low 3bit
;;;166            data &= 0xFFFFFFE7;		//clear bit 3 and bit4
000026  f020001f          BIC      r0,r0,#0x1f
;;;167            
;;;168            outw(SCU_EXTREG_PA_BASE + 0x154, data | 0x1 | 1<<4 );
00002a  f0400011          ORR      r0,r0,#0x11
00002e  f8c70154          STR      r0,[r7,#0x154]
;;;169    
;;;170            data = inw(SCU_EXTREG_PA_BASE + 0x158);
000032  f8d70158          LDR      r0,[r7,#0x158]
;;;171            data &= 0xFFFFFFF8;		//clear low 3bit
;;;172            data &= 0xFFFFFFE7;		//clear bit 3 and bit4
000036  f020001f          BIC      r0,r0,#0x1f
;;;173            
;;;174            outw(SCU_EXTREG_PA_BASE + 0x158, data | 0x1 | 1<<4 );
00003a  f0400011          ORR      r0,r0,#0x11
00003e  f8c70158          STR      r0,[r7,#0x158]
;;;175    
;;;176            handle = handle2;
;;;177            handle = kdp_uart_open(UART2_DEV, UART_MODE_ASYN_RX | UART_MODE_SYNC_TX, UART2_callback);        
000042  4a27              LDR      r2,|L6.224|
000044  2109              MOVS     r1,#9
000046  2002              MOVS     r0,#2
                  |L6.72|
000048  f7fffffe          BL       kdp_uart_open
00004c  4607              MOV      r7,r0
;;;178        }
;;;179        else
;;;180        {
;;;181          return;
;;;182        }
;;;183    
;;;184        
;;;185        if (handle == UART_FAIL)
00004e  1c40              ADDS     r0,r0,#1
000050  d025              BEQ      |L6.158|
;;;186            return;
;;;187    
;;;188        ret = kdp_uart_power_control(handle, ARM_POWER_FULL);
000052  2102              MOVS     r1,#2
000054  4638              MOV      r0,r7
000056  f7fffffe          BL       kdp_uart_power_control
;;;189        if (ret != UART_API_RETURN_SUCCESS)
00005a  2800              CMP      r0,#0
00005c  d11f              BNE      |L6.158|
;;;190            return;
;;;191    
;;;192        KDP_UART_CONFIG_t cfg;
;;;193        cfg.baudrate = baudrate;
;;;194        cfg.data_bits = 8;
00005e  2008              MOVS     r0,#8
000060  9400              STR      r4,[sp,#0]
000062  f88d0004          STRB     r0,[sp,#4]
;;;195        cfg.frame_length = 0;
000066  2400              MOVS     r4,#0
;;;196        cfg.stop_bits = 1;
000068  2001              MOVS     r0,#1
00006a  f88d4005          STRB     r4,[sp,#5]            ;195
00006e  f88d0006          STRB     r0,[sp,#6]
;;;197        cfg.parity_mode = PARITY_NONE;
;;;198        cfg.fifo_en = TRUE;
000072  f88d0008          STRB     r0,[sp,#8]
000076  f88d4007          STRB     r4,[sp,#7]            ;197
;;;199    
;;;200        ret = kdp_uart_control(handle, UART_CTRL_CONFIG, (void *)&cfg);
00007a  466a              MOV      r2,sp
00007c  4621              MOV      r1,r4
00007e  4638              MOV      r0,r7
000080  f7fffffe          BL       kdp_uart_control
;;;201        if (ret != UART_API_RETURN_SUCCESS)
000084  2800              CMP      r0,#0
000086  d10a              BNE      |L6.158|
;;;202            return;
;;;203    
;;;204        kdp_uart_read( handle, buffer, size );                  //for read case
000088  4642              MOV      r2,r8
00008a  4649              MOV      r1,r9
00008c  4638              MOV      r0,r7
00008e  f7fffffe          BL       kdp_uart_read
;;;205        
;;;206        if (4 == port) {
000092  2e04              CMP      r6,#4
000094  d01c              BEQ      |L6.208|
;;;207            UART4_Rx = FALSE;
;;;208            UART4_Tx = FALSE;
;;;209        }
;;;210        else if (2 == port) {
000096  2e02              CMP      r6,#2
000098  d101              BNE      |L6.158|
;;;211            UART2_Rx = FALSE;
00009a  712c              STRB     r4,[r5,#4]
;;;212            UART2_Tx = FALSE;        
00009c  716c              STRB     r4,[r5,#5]
                  |L6.158|
;;;213        }
;;;214    
;;;215    }
00009e  e8bd83fe          POP      {r1-r9,pc}
                  |L6.162|
0000a2  2004              MOVS     r0,#4                 ;144
0000a4  f7fffffe          BL       kdp_uart_close
0000a8  f8d7018c          LDR      r0,[r7,#0x18c]        ;146
0000ac  f020001f          BIC      r0,r0,#0x1f           ;148
0000b0  f0400016          ORR      r0,r0,#0x16           ;150
0000b4  f8c7018c          STR      r0,[r7,#0x18c]        ;150
0000b8  f8d70190          LDR      r0,[r7,#0x190]        ;151
0000bc  f020001f          BIC      r0,r0,#0x1f           ;153
0000c0  f0400016          ORR      r0,r0,#0x16           ;155
0000c4  f8c70190          STR      r0,[r7,#0x190]        ;155
0000c8  2109              MOVS     r1,#9                 ;158
0000ca  4a06              LDR      r2,|L6.228|
0000cc  2004              MOVS     r0,#4                 ;158
0000ce  e7bb              B        |L6.72|
                  |L6.208|
0000d0  722c              STRB     r4,[r5,#8]            ;207
0000d2  726c              STRB     r4,[r5,#9]            ;208
0000d4  e7e3              B        |L6.158|
;;;216    
                          ENDP

0000d6  0000              DCW      0x0000
                  |L6.216|
                          DCD      0xc2380000
                  |L6.220|
                          DCD      ||.data||
                  |L6.224|
                          DCD      UART2_callback
                  |L6.228|
                          DCD      UART4_callback

                          AREA ||.data||, DATA, ALIGN=2

                  UART0_Rx
000000  00                DCB      0x00
                  UART0_Tx
000001  00                DCB      0x00
                  UART1_Rx
000002  00                DCB      0x00
                  UART1_Tx
000003  00                DCB      0x00
                  UART2_Rx
000004  00                DCB      0x00
                  UART2_Tx
000005  00                DCB      0x00
                  UART3_Rx
000006  00                DCB      0x00
                  UART3_Tx
000007  00                DCB      0x00
                  UART4_Rx
000008  00                DCB      0x00
                  UART4_Tx
000009  000000            DCB      0x00,0x00,0x00
                  handle2
                          DCD      0x00000000
                  handle4
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\scpu\\middleware\\comm\\host_uart_com.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_host_uart_com_c_UART0_Rx____REV16|
#line 208 "F:\\Users\\fu\\AppData\\Local\\Arm\\Packs\\ARM\\CMSIS\\5.9.0\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___15_host_uart_com_c_UART0_Rx____REV16| PROC
#line 209

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_host_uart_com_c_UART0_Rx____REVSH|
#line 223
|__asm___15_host_uart_com_c_UART0_Rx____REVSH| PROC
#line 224

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___15_host_uart_com_c_UART0_Rx____RRX|
#line 410
|__asm___15_host_uart_com_c_UART0_Rx____RRX| PROC
#line 411

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
