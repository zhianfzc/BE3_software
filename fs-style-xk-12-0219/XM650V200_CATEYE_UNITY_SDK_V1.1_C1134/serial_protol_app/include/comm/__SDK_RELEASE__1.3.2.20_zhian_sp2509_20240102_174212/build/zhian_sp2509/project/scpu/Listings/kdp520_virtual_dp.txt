; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\objects\kdp520_virtual_dp.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\kdp520_virtual_dp.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O3 --diag_suppress=9931 -I..\..\config -I..\..\..\..\board -I..\..\..\..\common\include -I..\..\..\..\scpu\device\include\CMSIS -I..\..\..\..\scpu\device\include\Kneron -I..\..\..\..\scpu\framework\include -I..\..\..\..\scpu\framework\include\framework -I..\..\..\..\scpu\drivers\include -I..\..\..\..\scpu\drivers\include\media\touch -I..\..\..\..\scpu\drivers\include\media\flash -I..\..\..\..\scpu\lib\kdp_system\inc -I..\..\..\..\scpu\lib\kdp_application\include\ -I..\..\..\..\scpu\lib\kdp_application\base\ -I..\..\..\..\scpu\lib\kdp_application\misc -I..\..\..\..\scpu\lib\kdp_e2e_r1n1\include -I..\..\..\..\scpu\include -I..\..\..\..\scpu\middleware\ota -I..\..\..\..\scpu\middleware\comm -I..\..\..\..\scpu\middleware\kdp_comm -I..\..\..\..\scpu\share -I..\..\..\..\scpu\share\gui_lib -I..\..\user -I.\RTE\CMSIS -I.\RTE\_Target-scpu -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\RTOS2\Include -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\RTOS2\RTX\Include -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\Device\ARM\ARMCM4\Include -D__RTX -D__MICROLIB -D__UVISION_VERSION=538 -D_RTE_ -DARMCM4_FP -D_RTE_ -DARM_MATH_CM4 -DTARGET_SCPU -DLOG_ENABLE -DKL520 -DHEAD_POSE_CHECK_PERCENT --omf_browse=.\objects\kdp520_virtual_dp.crf ..\..\..\..\scpu\drivers\media\platform\kdp520_virtual_dp.c]
                          THUMB

                          AREA ||i.kdp520_virtual_dp_attach_panel||, CODE, READONLY, ALIGN=1

                  kdp520_virtual_dp_attach_panel PROC
;;;77     
;;;78     static int kdp520_virtual_dp_attach_panel(struct core_device** core_d, struct panel_driver *panel)
000000  6741              STR      r1,[r0,#0x74]
;;;79     {
;;;80         struct display_driver *display_drv = container_of(core_d, struct display_driver, core_dev);
;;;81     
;;;82         display_drv->panel = panel;
;;;83     
;;;84         return 0;
000002  2000              MOVS     r0,#0
;;;85     }
000004  4770              BX       lr
;;;86     
                          ENDP


                          AREA ||i.kdp520_virtual_dp_draw_bitmap||, CODE, READONLY, ALIGN=2

                  kdp520_virtual_dp_draw_bitmap PROC
;;;336    
;;;337    static int kdp520_virtual_dp_draw_bitmap(struct core_device** core_d,
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;338            u32 org_x, u32 org_y, u32 width, u32 height, void* pBuf)
;;;339    {
;;;340        int ret = -KDP_FRAMEWORK_ERRNO_INVALA;
;;;341        struct display_driver *display_drv = container_of(core_d, struct display_driver, core_dev);
;;;342        
;;;343        {
;;;344            u16 y_pos, x_pos, tmp;
;;;345    
;;;346            u32 frame_width = display_drv->vi_params.dp_out_w;
;;;347            u32 frame_height =  display_drv->vi_params.dp_out_h;
;;;348            u32 _addr = _glcdc_cur_addr;
000004  4e16              LDR      r6,|L2.96|
000006  f8305f56          LDRH     r5,[r0,#0x56]!        ;346
00000a  e9dd7407          LDRD     r7,r4,[sp,#0x1c]      ;339
00000e  8840              LDRH     r0,[r0,#2]            ;347
;;;349            
;;;350            u8 *p = pBuf;
;;;351            u16 * lcd_buffer = (u16 *)_addr;
;;;352    
;;;353            if((org_x >= frame_width)
000010  f8d6c000          LDR      r12,[r6,#0]  ; _glcdc_cur_addr
000014  f06f0907          MVN      r9,#7                 ;340
000018  42a9              CMP      r1,r5
00001a  d21e              BCS      |L2.90|
;;;354            || (org_y >= frame_height)
00001c  4282              CMP      r2,r0
00001e  d21c              BCS      |L2.90|
;;;355            || ((org_x + width) > frame_width)
000020  18ce              ADDS     r6,r1,r3
000022  42ae              CMP      r6,r5
000024  d819              BHI      |L2.90|
;;;356            || ((org_y + height) > frame_height))
000026  4417              ADD      r7,r7,r2
000028  4287              CMP      r7,r0
00002a  d816              BHI      |L2.90|
                  |L2.44|
;;;357            {
;;;358                return ret;
;;;359            }
;;;360    
;;;361            for(y_pos=org_y; y_pos<(org_y+height); y_pos++)
00002c  b292              UXTH     r2,r2
00002e  4297              CMP      r7,r2
000030  d913              BLS      |L2.90|
;;;362            {
;;;363                for (x_pos = org_x; x_pos < (org_x+width); x_pos++)
000032  b288              UXTH     r0,r1
000034  e00d              B        |L2.82|
;;;364                {
;;;365                    tmp = (*p++);
000036  bf00              NOP      
                  |L2.56|
000038  f8143b01          LDRB     r3,[r4],#1
;;;366                    tmp |= (*p++)<< 8;
00003c  f8148b01          LDRB     r8,[r4],#1
000040  ea532308          ORRS     r3,r3,r8,LSL #8
;;;367                    if (tmp == 0)
000044  d003              BEQ      |L2.78|
;;;368                        continue;
;;;369    
;;;370                    *(lcd_buffer + (y_pos * frame_width + x_pos)) = tmp;
000046  fb020805          MLA      r8,r2,r5,r0
00004a  f82c3018          STRH     r3,[r12,r8,LSL #1]
                  |L2.78|
00004e  1c40              ADDS     r0,r0,#1
000050  b280              UXTH     r0,r0                 ;363
                  |L2.82|
000052  4286              CMP      r6,r0                 ;363
000054  d8f0              BHI      |L2.56|
000056  1c52              ADDS     r2,r2,#1              ;363
000058  e7e8              B        |L2.44|
                  |L2.90|
;;;371                }
;;;372            }
;;;373        } 
;;;374        
;;;375        return ret;
00005a  4648              MOV      r0,r9
;;;376    }
00005c  e8bd83f0          POP      {r4-r9,pc}
;;;377    
                          ENDP

                  |L2.96|
                          DCD      ||.data||

                          AREA ||i.kdp520_virtual_dp_draw_line||, CODE, READONLY, ALIGN=2

                  kdp520_virtual_dp_draw_line PROC
;;;208    }
;;;209    static int kdp520_virtual_dp_draw_line(struct core_device** core_d,
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;210            u32 xs, u32 ys, u32 xe, u32 ye)
;;;211    {
000004  4606              MOV      r6,r0
;;;212        int ret = -KDP_FRAMEWORK_ERRNO_INVALA;
;;;213        struct kdp520_virtual_dp_context *ctx = &virtual_dp_ctx_s;
000006  f8dfc138          LDR      r12,|L3.320|
;;;214        struct display_driver *display_drv = container_of(core_d, struct display_driver, core_dev);
;;;215    
;;;216    //    if (core_d)
;;;217        {
;;;218            u32 x_pos, y_pos;
;;;219            u32 x_unit = 1;
;;;220            u32 y_unit = 1;
;;;221            u32 _addr = _glcdc_cur_addr;
;;;222            u32 frame_width = display_drv->vi_params.dp_out_w;
00000a  f8365f56          LDRH     r5,[r6,#0x56]!
00000e  4c4d              LDR      r4,|L3.324|
;;;223            u32 frame_height =  display_drv->vi_params.dp_out_h;
000010  f8b6a002          LDRH     r10,[r6,#2]
;;;224            u16 color = ctx->pen_info.color;
000014  f8bc6000          LDRH     r6,[r12,#0]
;;;225            u16 pen_width = ctx->pen_info.width;
000018  f8bcc004          LDRH     r12,[r12,#4]
00001c  f04f0901          MOV      r9,#1                 ;219
000020  9f08              LDR      r7,[sp,#0x20]         ;221
000022  6824              LDR      r4,[r4,#0]            ;221  ; _glcdc_cur_addr
000024  f06f0007          MVN      r0,#7                 ;212
000028  46c8              MOV      r8,r9                 ;220
00002a  fa1ffc8c          UXTH     r12,r12
;;;226            
;;;227            if(xs == xe)
00002e  4299              CMP      r1,r3
000030  d119              BNE      |L3.102|
;;;228            {
;;;229                if(ys > ye)
000032  42ba              CMP      r2,r7
000034  d902              BLS      |L3.60|
;;;230                {
;;;231                    ys ^= ye;
000036  407a              EORS     r2,r2,r7
;;;232                    ye ^= ys;
000038  4057              EORS     r7,r7,r2
;;;233                    ys ^= ye;
00003a  407a              EORS     r2,r2,r7
                  |L3.60|
;;;234                }
;;;235                            
;;;236                for(y_pos = ys; y_pos <= ye; y_pos += y_unit)
;;;237                {
;;;238                    for(x_pos = xs; (x_pos < xs+pen_width) && (x_pos < frame_width); x_pos += x_unit)
00003c  eb01030c          ADD      r3,r1,r12
000040  e00c              B        |L3.92|
                  |L3.66|
000042  4608              MOV      r0,r1
000044  e005              B        |L3.82|
000046  bf00              NOP      
                  |L3.72|
000048  fb020c05          MLA      r12,r2,r5,r0
00004c  4448              ADD      r0,r0,r9
00004e  f824601c          STRH     r6,[r4,r12,LSL #1]
                  |L3.82|
000052  4283              CMP      r3,r0
000054  d901              BLS      |L3.90|
000056  42a8              CMP      r0,r5
000058  d3f6              BCC      |L3.72|
                  |L3.90|
00005a  4442              ADD      r2,r2,r8              ;236
                  |L3.92|
00005c  42ba              CMP      r2,r7                 ;236
00005e  d9f0              BLS      |L3.66|
                  |L3.96|
;;;239                    {
;;;240                        _kdp520_virtual_dp_draw_pixel(_addr, x_pos, y_pos, frame_width, color);
;;;241                    }
;;;242                }
;;;243                ret = 0;
000060  2000              MOVS     r0,#0
                  |L3.98|
;;;244            }
;;;245            else if(ys == ye)
;;;246            {
;;;247                if(xs > xe)
;;;248                {
;;;249                    xs ^= xe;
;;;250                    xe ^= xs;
;;;251                    xs ^= xe;
;;;252                }
;;;253    
;;;254                for(x_pos = xs; x_pos <= xe; x_pos += x_unit)
;;;255                {
;;;256                    for(y_pos = ys; (y_pos < ys+pen_width) && (y_pos < frame_height); y_pos += y_unit)
;;;257                    {
;;;258                        _kdp520_virtual_dp_draw_pixel(_addr, x_pos, y_pos, frame_width, color);
;;;259                    }
;;;260                }
;;;261                ret = 0;
;;;262            }
;;;263            else
;;;264            {
;;;265                //s16 y_min = MIN(ys,ye);	
;;;266                //s16 y_max = MAX(ys,ye);
;;;267                s16 x_min = MIN(xs,xe);	
;;;268                s16 x_max = MAX(xs,xe);
;;;269                s16 y_step = ((s16)ye-(s16)ys)/(x_max-x_min);			
;;;270                s16 x = 0,y = 0,pen=0;
;;;271                u16* buffer = (u16*)_addr;
;;;272    
;;;273                //dbg_msg_display("[xxxxxx]%d-%d-%d-%d,%d-%d-%d-%d,%d",xs,ys,xe,ye,x_min,x_max,y_min,y_max,y_step );
;;;274                if (xs < xe)
;;;275                {
;;;276                    for(x = xs,y = ys; x <= xe; x++, y+=y_step) {
;;;277                        *(buffer + y * frame_width + x) = color;	
;;;278                        for (pen = 1; pen <= pen_width; pen++)
;;;279                            *(buffer + (y+pen) * frame_width + x) = color;
;;;280                        }
;;;281                }
;;;282                else
;;;283                {
;;;284                    for(x = xs,	  y = ys; x >= xe; x--, y+=y_step) {
;;;285                        *(buffer + y * frame_width + x) = color;			 
;;;286                        for (pen = 1; pen <= pen_width; pen++)
;;;287                            *(buffer + (y+pen) * frame_width + x) = color;			
;;;288                        }
;;;289                }
;;;290            }
;;;291        } 
;;;292        
;;;293        return ret;
;;;294    }
000062  e8bd87f0          POP      {r4-r10,pc}
                  |L3.102|
000066  42ba              CMP      r2,r7                 ;245
000068  d117              BNE      |L3.154|
00006a  4299              CMP      r1,r3                 ;247
00006c  d902              BLS      |L3.116|
00006e  4059              EORS     r1,r1,r3              ;249
000070  404b              EORS     r3,r3,r1              ;250
000072  4059              EORS     r1,r1,r3              ;251
                  |L3.116|
000074  eb02070c          ADD      r7,r2,r12             ;256
000078  e00c              B        |L3.148|
                  |L3.122|
00007a  4610              MOV      r0,r2                 ;256
00007c  e005              B        |L3.138|
00007e  bf00              NOP                            ;256
                  |L3.128|
000080  fb001c05          MLA      r12,r0,r5,r1          ;256
000084  4440              ADD      r0,r0,r8              ;256
000086  f824601c          STRH     r6,[r4,r12,LSL #1]    ;256
                  |L3.138|
00008a  4287              CMP      r7,r0                 ;256
00008c  d901              BLS      |L3.146|
00008e  4550              CMP      r0,r10                ;256
000090  d3f6              BCC      |L3.128|
                  |L3.146|
000092  4449              ADD      r1,r1,r9              ;254
                  |L3.148|
000094  4299              CMP      r1,r3                 ;254
000096  d9f0              BLS      |L3.122|
000098  e7e2              B        |L3.96|
                  |L3.154|
00009a  fa0ff981          SXTH     r9,r1                 ;276
00009e  b212              SXTH     r2,r2                 ;269
0000a0  4299              CMP      r1,r3                 ;267
0000a2  d901              BLS      |L3.168|
0000a4  4698              MOV      r8,r3                 ;267
0000a6  e000              B        |L3.170|
                  |L3.168|
0000a8  4688              MOV      r8,r1                 ;267
                  |L3.170|
0000aa  fa0ff888          SXTH     r8,r8                 ;267
0000ae  d200              BCS      |L3.178|
0000b0  4619              MOV      r1,r3                 ;268
                  |L3.178|
0000b2  b209              SXTH     r1,r1                 ;268
0000b4  b23f              SXTH     r7,r7                 ;269
0000b6  eba70702          SUB      r7,r7,r2              ;269
0000ba  eba10108          SUB      r1,r1,r8              ;269
0000be  fb97f1f1          SDIV     r1,r7,r1              ;269
0000c2  fa0ffa81          SXTH     r10,r1                ;269
0000c6  4649              MOV      r1,r9                 ;269
0000c8  d31b              BCC      |L3.258|
0000ca  e035              B        |L3.312|
                  |L3.204|
0000cc  fb02f705          MUL      r7,r2,r5              ;277
0000d0  eb040747          ADD      r7,r4,r7,LSL #1       ;277
0000d4  f8276011          STRH     r6,[r7,r1,LSL #1]     ;277
0000d8  f04f0701          MOV      r7,#1                 ;278
0000dc  e00b              B        |L3.246|
0000de  bf00              NOP                            ;279
                  |L3.224|
0000e0  eb020807          ADD      r8,r2,r7              ;279
0000e4  fb08f805          MUL      r8,r8,r5              ;279
0000e8  eb040848          ADD      r8,r4,r8,LSL #1       ;279
0000ec  f1070701          ADD      r7,r7,#1              ;279
0000f0  f8286011          STRH     r6,[r8,r1,LSL #1]     ;279
0000f4  b23f              SXTH     r7,r7                 ;278
                  |L3.246|
0000f6  4567              CMP      r7,r12                ;278
0000f8  ddf2              BLE      |L3.224|
0000fa  1c49              ADDS     r1,r1,#1              ;278
0000fc  4452              ADD      r2,r2,r10             ;276
0000fe  b209              SXTH     r1,r1                 ;276
000100  b212              SXTH     r2,r2                 ;276
                  |L3.258|
000102  4299              CMP      r1,r3                 ;276
000104  d9e2              BLS      |L3.204|
000106  e7ac              B        |L3.98|
                  |L3.264|
000108  fb02f705          MUL      r7,r2,r5              ;285
00010c  eb040747          ADD      r7,r4,r7,LSL #1       ;285
000110  f8276011          STRH     r6,[r7,r1,LSL #1]     ;285
000114  2701              MOVS     r7,#1                 ;286
000116  e009              B        |L3.300|
                  |L3.280|
000118  eb020807          ADD      r8,r2,r7              ;287
00011c  fb08f805          MUL      r8,r8,r5              ;287
000120  eb040848          ADD      r8,r4,r8,LSL #1       ;287
000124  1c7f              ADDS     r7,r7,#1              ;287
000126  f8286011          STRH     r6,[r8,r1,LSL #1]     ;287
00012a  b23f              SXTH     r7,r7                 ;286
                  |L3.300|
00012c  4567              CMP      r7,r12                ;286
00012e  ddf3              BLE      |L3.280|
000130  1e49              SUBS     r1,r1,#1              ;286
000132  4452              ADD      r2,r2,r10             ;284
000134  b209              SXTH     r1,r1                 ;284
000136  b212              SXTH     r2,r2                 ;284
                  |L3.312|
000138  4299              CMP      r1,r3                 ;284
00013a  d2e5              BCS      |L3.264|
00013c  e791              B        |L3.98|
;;;295    
                          ENDP

00013e  0000              DCW      0x0000
                  |L3.320|
                          DCD      ||.bss||
                  |L3.324|
                          DCD      ||.data||

                          AREA ||i.kdp520_virtual_dp_draw_rect||, CODE, READONLY, ALIGN=2

                  kdp520_virtual_dp_draw_rect PROC
;;;153    
;;;154    static int kdp520_virtual_dp_draw_rect(struct core_device** core_d, int org_x, int org_y, u32 width, u32 height)
000000  e92d4ffe          PUSH     {r1-r11,lr}
;;;155    {
;;;156        int ret = -KDP_FRAMEWORK_ERRNO_INVALA;
;;;157        struct kdp520_virtual_dp_context *ctx = &virtual_dp_ctx_s;
;;;158        struct display_driver *display_drv = container_of(core_d, struct display_driver, core_dev);
;;;159    
;;;160        {
;;;161            int x_pos, y_pos;
;;;162            int x_unit = 1;
000004  f04f0901          MOV      r9,#1
;;;163            int y_unit = 1;
000008  9d0c              LDR      r5,[sp,#0x30]
;;;164            int top = org_y;
;;;165            int left = org_x;
;;;166            int right = org_x + width;
00000a  18cc              ADDS     r4,r1,r3
;;;167            int bottom = top + height;
;;;168            
;;;169            u32 frame_width = display_drv->vi_params.dp_out_w;
00000c  f8cd9008          STR      r9,[sp,#8]
000010  f8303f56          LDRH     r3,[r0,#0x56]!
000014  f8dfc0bc          LDR      r12,|L4.212|
;;;170            u32 frame_height =  display_drv->vi_params.dp_out_h;
000018  f8b0b002          LDRH     r11,[r0,#2]
;;;171            u32 _addr = _glcdc_cur_addr;
00001c  482e              LDR      r0,|L4.216|
00001e  1956              ADDS     r6,r2,r5              ;167
000020  468a              MOV      r10,r1                ;165
;;;172            
;;;173            u32 border_size = ctx->pen_info.width;
000022  6805              LDR      r5,[r0,#0]  ; _glcdc_cur_addr
;;;174            int left_border = left + border_size;
000024  f8dc0004          LDR      r0,[r12,#4]
000028  180f              ADDS     r7,r1,r0
;;;175            int right_border = right - border_size;
00002a  1a21              SUBS     r1,r4,r0
;;;176            int top_lower = top + border_size;
00002c  9100              STR      r1,[sp,#0]
00002e  1811              ADDS     r1,r2,r0
;;;177            int bottom_upper = bottom - border_size;  
;;;178            u16 color = ctx->pen_info.color;
000030  9101              STR      r1,[sp,#4]
000032  f8bc1000          LDRH     r1,[r12,#0]
000036  eba60e00          SUB      lr,r6,r0              ;177
;;;179            
;;;180            
;;;181            for (y_pos=(top>=0)?top:0; (y_pos < bottom) && (y_pos >= 0) && (y_pos < frame_height); y_pos += y_unit)
00003a  2a00              CMP      r2,#0
00003c  db01              BLT      |L4.66|
00003e  4610              MOV      r0,r2
000040  e03e              B        |L4.192|
                  |L4.66|
000042  2000              MOVS     r0,#0
000044  e03c              B        |L4.192|
                  |L4.70|
;;;182            {
;;;183                if ((y_pos >= top && y_pos < top_lower) || (y_pos >= bottom_upper))
000046  4290              CMP      r0,r2
000048  db03              BLT      |L4.82|
00004a  f8ddc004          LDR      r12,[sp,#4]
00004e  4560              CMP      r0,r12
000050  db01              BLT      |L4.86|
                  |L4.82|
000052  4570              CMP      r0,lr
000054  db10              BLT      |L4.120|
                  |L4.86|
;;;184                {
;;;185                    for (x_pos=(left>=0)?left:0; (x_pos < right) && (x_pos < frame_width); x_pos += x_unit)
000056  f1ba0c00          SUBS     r12,r10,#0
00005a  da08              BGE      |L4.110|
00005c  f04f0c00          MOV      r12,#0
000060  e005              B        |L4.110|
000062  bf00              NOP      
                  |L4.100|
000064  fb00c803          MLA      r8,r0,r3,r12
000068  44cc              ADD      r12,r12,r9
00006a  f8251018          STRH     r1,[r5,r8,LSL #1]
                  |L4.110|
00006e  45a4              CMP      r12,r4
000070  da23              BGE      |L4.186|
000072  459c              CMP      r12,r3
000074  d3f6              BCC      |L4.100|
000076  e020              B        |L4.186|
                  |L4.120|
;;;186                    {
;;;187                        _kdp520_virtual_dp_draw_pixel(_addr, x_pos, y_pos, frame_width, color);
;;;188                    }
;;;189                }
;;;190                else
;;;191                {
;;;192                    for (x_pos=(left>=0)?left:0; (x_pos < left_border) && (x_pos < frame_width); x_pos += x_unit)
000078  f1ba0c00          SUBS     r12,r10,#0
00007c  da07              BGE      |L4.142|
00007e  f04f0c00          MOV      r12,#0
000082  e004              B        |L4.142|
                  |L4.132|
000084  fb00c803          MLA      r8,r0,r3,r12
000088  44cc              ADD      r12,r12,r9
00008a  f8251018          STRH     r1,[r5,r8,LSL #1]
                  |L4.142|
00008e  45bc              CMP      r12,r7
000090  da01              BGE      |L4.150|
000092  459c              CMP      r12,r3
000094  d3f6              BCC      |L4.132|
                  |L4.150|
;;;193                    {
;;;194                        _kdp520_virtual_dp_draw_pixel(_addr, x_pos, y_pos, frame_width, color);
;;;195                    }
;;;196           
;;;197                    for (x_pos=(right_border>=0)?right_border:0; (x_pos < right) && (x_pos < frame_width); x_pos += x_unit)
000096  f8ddc000          LDR      r12,[sp,#0]
00009a  f1bc0f00          CMP      r12,#0
00009e  da08              BGE      |L4.178|
0000a0  f04f0c00          MOV      r12,#0
0000a4  e005              B        |L4.178|
0000a6  bf00              NOP      
                  |L4.168|
0000a8  fb00c803          MLA      r8,r0,r3,r12
0000ac  44cc              ADD      r12,r12,r9
0000ae  f8251018          STRH     r1,[r5,r8,LSL #1]
                  |L4.178|
0000b2  45a4              CMP      r12,r4
0000b4  da01              BGE      |L4.186|
0000b6  459c              CMP      r12,r3
0000b8  d3f6              BCC      |L4.168|
                  |L4.186|
0000ba  f8ddc008          LDR      r12,[sp,#8]           ;181
0000be  4460              ADD      r0,r0,r12             ;181
                  |L4.192|
0000c0  42b0              CMP      r0,r6                 ;181
0000c2  da03              BGE      |L4.204|
0000c4  2800              CMP      r0,#0                 ;181
0000c6  db01              BLT      |L4.204|
0000c8  4558              CMP      r0,r11                ;181
0000ca  d3bc              BCC      |L4.70|
                  |L4.204|
;;;198                    {
;;;199                        _kdp520_virtual_dp_draw_pixel(_addr, x_pos, y_pos, frame_width, color);
;;;200                    }
;;;201                }
;;;202            }
;;;203    
;;;204            ret = 0;
0000cc  2000              MOVS     r0,#0
;;;205        } 
;;;206        
;;;207        return ret;
;;;208    }
0000ce  e8bd8ffe          POP      {r1-r11,pc}
;;;209    static int kdp520_virtual_dp_draw_line(struct core_device** core_d,
                          ENDP

0000d2  0000              DCW      0x0000
                  |L4.212|
                          DCD      ||.bss||
                  |L4.216|
                          DCD      ||.data||

                          AREA ||i.kdp520_virtual_dp_fill_rect||, CODE, READONLY, ALIGN=2

                  kdp520_virtual_dp_fill_rect PROC
;;;295    
;;;296    static int kdp520_virtual_dp_fill_rect(struct core_device** core_d,
000000  b5f0              PUSH     {r4-r7,lr}
;;;297            u32 org_x, u32 org_y, u32 width, u32 height)
;;;298    {
;;;299        int ret = -KDP_FRAMEWORK_ERRNO_INVALA;
;;;300        struct kdp520_virtual_dp_context *ctx = &virtual_dp_ctx_s;
000002  4d16              LDR      r5,|L5.92|
000004  4606              MOV      r6,r0                 ;298
;;;301        struct display_driver *display_drv = container_of(core_d, struct display_driver, core_dev);
;;;302    
;;;303    //    if (core_d)
;;;304        {
;;;305            u32 x_pos, y_pos;
;;;306            u16 color = ctx->pen_info.color;
;;;307    
;;;308            u32 frame_width = display_drv->vi_params.dp_out_w;
;;;309            u32 frame_height =  display_drv->vi_params.dp_out_h;
;;;310            u32 _addr = _glcdc_cur_addr;
000006  9c05              LDR      r4,[sp,#0x14]
000008  882f              LDRH     r7,[r5,#0]            ;306
00000a  f8b65056          LDRH     r5,[r6,#0x56]         ;308
00000e  f8b6c058          LDRH     r12,[r6,#0x58]        ;309
000012  4e13              LDR      r6,|L5.96|
000014  f06f0007          MVN      r0,#7                 ;299
;;;311    
;;;312            if((org_x >= frame_width)
000018  42a9              CMP      r1,r5
00001a  6836              LDR      r6,[r6,#0]            ;310  ; _glcdc_cur_addr
00001c  d21c              BCS      |L5.88|
;;;313            || (org_y >= frame_height))
00001e  4562              CMP      r2,r12
000020  d21a              BCS      |L5.88|
;;;314    //        || ((org_x + width) > frame_width)
;;;315    //        || ((org_y + height) > frame_height))
;;;316            {
;;;317                return ret;
;;;318            }
;;;319            
;;;320            if (org_x + width > frame_width)
000022  eb010e03          ADD      lr,r1,r3
000026  45ae              CMP      lr,r5
000028  d900              BLS      |L5.44|
;;;321                width = frame_width - org_x;
00002a  1a6b              SUBS     r3,r5,r1
                  |L5.44|
;;;322            if (org_y + height > frame_height)
00002c  eb020e04          ADD      lr,r2,r4
000030  45e6              CMP      lr,r12
000032  d901              BLS      |L5.56|
;;;323                height = frame_height - org_y;
000034  ebac0402          SUB      r4,r12,r2
                  |L5.56|
000038  440b              ADD      r3,r3,r1              ;320
00003a  eb020c04          ADD      r12,r2,r4             ;322
;;;324    
;;;325            for(y_pos=org_y; y_pos<(org_y+height); y_pos++)
00003e  e009              B        |L5.84|
                  |L5.64|
;;;326            {
;;;327                for(x_pos=org_x; x_pos<(org_x+width); x_pos++)
000040  460c              MOV      r4,r1
000042  e004              B        |L5.78|
                  |L5.68|
000044  fb024e05          MLA      lr,r2,r5,r4
000048  1c64              ADDS     r4,r4,#1
00004a  f826701e          STRH     r7,[r6,lr,LSL #1]
                  |L5.78|
00004e  42a3              CMP      r3,r4
000050  d8f8              BHI      |L5.68|
000052  1c52              ADDS     r2,r2,#1
                  |L5.84|
000054  4594              CMP      r12,r2                ;325
000056  d8f3              BHI      |L5.64|
                  |L5.88|
;;;328                {
;;;329                    _kdp520_virtual_dp_draw_pixel(_addr, x_pos, y_pos, frame_width, color);
;;;330                }
;;;331            }
;;;332        } 
;;;333        
;;;334        return ret;
;;;335    }
000058  bdf0              POP      {r4-r7,pc}
;;;336    
                          ENDP

00005a  0000              DCW      0x0000
                  |L5.92|
                          DCD      ||.bss||
                  |L5.96|
                          DCD      ||.data||

                          AREA ||i.kdp520_virtual_dp_fresh||, CODE, READONLY, ALIGN=1

                  kdp520_virtual_dp_fresh PROC
;;;377    
;;;378    int kdp520_virtual_dp_fresh(struct core_device** core_d)
000000  f06f0107          MVN      r1,#7
;;;379    {
;;;380        int ret = -KDP_FRAMEWORK_ERRNO_INVALA;   
000004  2808              CMP      r0,#8
000006  d001              BEQ      |L6.12|
;;;381        struct display_driver *display_drv = container_of(core_d, struct display_driver, core_dev);
;;;382        if (NULL == display_drv)
;;;383        {
;;;384            dbg_msg_display("Not load display_driver yet.");
;;;385            return -1;
;;;386        }
;;;387        
;;;388        return ret;   
000008  4608              MOV      r0,r1
;;;389    }
00000a  4770              BX       lr
                  |L6.12|
00000c  f04f30ff          MOV      r0,#0xffffffff        ;385
000010  4770              BX       lr
;;;390    
                          ENDP


                          AREA ||i.kdp520_virtual_dp_get_buffer_addr||, CODE, READONLY, ALIGN=2

                  kdp520_virtual_dp_get_buffer_addr PROC
;;;413    
;;;414    u32 kdp520_virtual_dp_get_buffer_addr(struct core_device**core_d)
000000  2100              MOVS     r1,#0
;;;415    {
;;;416        int ret = 0;
000002  2808              CMP      r0,#8
000004  d002              BEQ      |L7.12|
;;;417        struct display_driver *display_drv = container_of(core_d, struct display_driver, core_dev);
;;;418        if (NULL == display_drv)
;;;419        {
;;;420            dbg_msg_display("Not load display_driver yet.");
;;;421            return ret;
;;;422        }
;;;423    
;;;424        return _glcdc_cur_addr;
000006  4802              LDR      r0,|L7.16|
000008  6800              LDR      r0,[r0,#0]  ; _glcdc_cur_addr
;;;425    }
00000a  4770              BX       lr
                  |L7.12|
00000c  4608              MOV      r0,r1                 ;421
00000e  4770              BX       lr
;;;426    
                          ENDP

                  |L7.16|
                          DCD      ||.data||

                          AREA ||i.kdp520_virtual_dp_get_params||, CODE, READONLY, ALIGN=1

                  kdp520_virtual_dp_get_params PROC
;;;97     
;;;98     static int kdp520_virtual_dp_get_params(struct core_device** core_d, struct video_input_params *params)
000000  460b              MOV      r3,r1
;;;99     {
000002  b510              PUSH     {r4,lr}
000004  f1000140          ADD      r1,r0,#0x40
;;;100        struct display_driver *display_drv = container_of(core_d, struct display_driver, core_dev);
;;;101        struct video_input_params *p = &display_drv->vi_params;
;;;102        memcpy(params, p, sizeof(*params));    
000008  2224              MOVS     r2,#0x24
00000a  4618              MOV      r0,r3
00000c  f7fffffe          BL       __aeabi_memcpy4
;;;103        
;;;104        return 0;
000010  2000              MOVS     r0,#0
;;;105    }
000012  bd10              POP      {r4,pc}
;;;106        
                          ENDP


                          AREA ||i.kdp520_virtual_dp_init||, CODE, READONLY, ALIGN=1

                  kdp520_virtual_dp_init PROC
;;;114    
;;;115    static int kdp520_virtual_dp_init(struct core_device** core_d)
000000  b570              PUSH     {r4-r6,lr}
;;;116    {
000002  4605              MOV      r5,r0
;;;117        struct display_driver *display_drv = container_of(core_d, struct display_driver, core_dev);
000004  f1a00408          SUB      r4,r0,#8
;;;118    
;;;119        if (display_drv->panel) {
000008  6f40              LDR      r0,[r0,#0x74]
00000a  b140              CBZ      r0,|L9.30|
;;;120            display_drv->display_id = display_drv->panel->read_did(core_d);
00000c  6881              LDR      r1,[r0,#8]
00000e  4628              MOV      r0,r5
000010  4788              BLX      r1
000012  f8a40078          STRH     r0,[r4,#0x78]
;;;121            dbg_msg_display(" display_id=%x", display_drv->display_id);
;;;122            display_drv->panel->init(core_d);
000016  6fe0              LDR      r0,[r4,#0x7c]
000018  6801              LDR      r1,[r0,#0]
00001a  4628              MOV      r0,r5
00001c  4788              BLX      r1
                  |L9.30|
;;;123        }
;;;124        
;;;125        return 0;
00001e  2000              MOVS     r0,#0
;;;126    }
000020  bd70              POP      {r4-r6,pc}
;;;127    
                          ENDP


                          AREA ||i.kdp520_virtual_dp_set_camera||, CODE, READONLY, ALIGN=2

                  kdp520_virtual_dp_set_camera PROC
;;;106        
;;;107    static int kdp520_virtual_dp_set_camera(struct core_device** core_d)
000000  b570              PUSH     {r4-r6,lr}
000002  4d07              LDR      r5,|L10.32|
;;;108    {
;;;109        struct kdp520_virtual_dp_context *ctx = &virtual_dp_ctx_s;
000004  4c05              LDR      r4,|L10.28|
000006  6828              LDR      r0,[r5,#0]            ;108  ; _glcdc_cur_addr
000008  b920              CBNZ     r0,|L10.20|
00000a  f44f3016          MOV      r0,#0x25800           ;108
00000e  f7fffffe          BL       kdp_ddr_reserve
000012  6028              STR      r0,[r5,#0]            ;108  ; _glcdc_cur_addr
                  |L10.20|
;;;110        _kdp520_virtual_dp_alloc_framebuffer(ctx);
;;;111    
;;;112        return 0;    
000014  60a0              STR      r0,[r4,#8]
000016  2000              MOVS     r0,#0
;;;113    }
000018  bd70              POP      {r4-r6,pc}
;;;114    
                          ENDP

00001a  0000              DCW      0x0000
                  |L10.28|
                          DCD      ||.bss||
                  |L10.32|
                          DCD      ||.data||

                          AREA ||i.kdp520_virtual_dp_set_params||, CODE, READONLY, ALIGN=1

                  kdp520_virtual_dp_set_params PROC
;;;86     
;;;87     static int kdp520_virtual_dp_set_params(struct core_device** core_d, struct video_input_params *params)
000000  b570              PUSH     {r4-r6,lr}
;;;88     {
;;;89         struct display_driver *display_drv = container_of(core_d, struct display_driver, core_dev);
000002  f1a00508          SUB      r5,r0,#8
;;;90         struct video_input_params *p = &display_drv->vi_params;
000006  f1000440          ADD      r4,r0,#0x40
;;;91         
;;;92         memcpy(p, params, sizeof(*params));
00000a  2224              MOVS     r2,#0x24
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       __aeabi_memcpy4
;;;93         display_drv->fb_size = calc_framesize(p->src_width, p->src_height, p->src_fmt);    
000012  89a1              LDRH     r1,[r4,#0xc]
000014  8960              LDRH     r0,[r4,#0xa]
000016  6822              LDR      r2,[r4,#0]
000018  f7fffffe          BL       calc_framesize
;;;94         dbg_msg_display("display_drv->fb_size=%d", display_drv->fb_size);  
;;;95         return 0;
00001c  66e8              STR      r0,[r5,#0x6c]
00001e  2000              MOVS     r0,#0
;;;96     }
000020  bd70              POP      {r4-r6,pc}
;;;97     
                          ENDP


                          AREA ||i.kdp520_virtual_dp_set_pen||, CODE, READONLY, ALIGN=2

                  kdp520_virtual_dp_set_pen PROC
;;;143    
;;;144    static int kdp520_virtual_dp_set_pen(struct core_device** core_d, u16 color, unsigned int width)
000000  4802              LDR      r0,|L12.12|
;;;145    {
;;;146        struct kdp520_virtual_dp_context *ctx = &virtual_dp_ctx_s;
;;;147    
;;;148        ctx->pen_info.color = color;
000002  8001              STRH     r1,[r0,#0]
;;;149        ctx->pen_info.width = width;
;;;150       
;;;151        return 0;//ret;
000004  6042              STR      r2,[r0,#4]
000006  2000              MOVS     r0,#0
;;;152    }
000008  4770              BX       lr
;;;153    
                          ENDP

00000a  0000              DCW      0x0000
                  |L12.12|
                          DCD      ||.bss||

                          AREA ||i.kdp520_virtual_dp_set_source||, CODE, READONLY, ALIGN=2

                  kdp520_virtual_dp_set_source PROC
;;;390    
;;;391    int kdp520_virtual_dp_set_source(struct core_device** core_d, u32 src_addr, int src_dev_idx)
000000  b570              PUSH     {r4-r6,lr}
;;;392    {
;;;393        struct display_driver *display_drv = container_of(core_d, struct display_driver, core_dev);
000002  f1b00208          SUBS     r2,r0,#8
000006  d00a              BEQ      |L13.30|
;;;394        if (NULL == display_drv) {
;;;395            dbg_msg_display("Not load display_driver yet.");
;;;396            return -1;
;;;397        }
;;;398    
;;;399        struct panel_driver *panel = display_drv->panel;
;;;400    
;;;401        u32 src_cam_idx = display_drv->vi_params.src_cam_idx;
000008  f8b24050          LDRH     r4,[r2,#0x50]
;;;402    
;;;403        if(src_cam_idx == MIPI_CAM_RGB) {
00000c  6fd3              LDR      r3,[r2,#0x7c]
00000e  4a09              LDR      r2,|L13.52|
000010  7815              LDRB     r5,[r2,#0]  ; rgb_sensor_index
;;;404            panel->preproc_rgb(core_d, src_addr, _glcdc_cur_addr);
000012  4a09              LDR      r2,|L13.56|
000014  42ac              CMP      r4,r5                 ;403
000016  6812              LDR      r2,[r2,#0]
000018  d104              BNE      |L13.36|
00001a  695b              LDR      r3,[r3,#0x14]
00001c  e007              B        |L13.46|
                  |L13.30|
00001e  f04f30ff          MOV      r0,#0xffffffff        ;396
;;;405        }
;;;406        else if (src_cam_idx == MIPI_CAM_NIR) {
;;;407            panel->preproc_nir(core_d, src_addr, _glcdc_cur_addr);//pressing to display addr
;;;408        }
;;;409    
;;;410    
;;;411        return 0;
;;;412    }
000022  bd70              POP      {r4-r6,pc}
                  |L13.36|
000024  4d05              LDR      r5,|L13.60|
000026  782d              LDRB     r5,[r5,#0]            ;406  ; nir_sensor_index
000028  42ac              CMP      r4,r5                 ;406
00002a  d101              BNE      |L13.48|
00002c  69db              LDR      r3,[r3,#0x1c]         ;407
                  |L13.46|
00002e  4798              BLX      r3                    ;407
                  |L13.48|
000030  2000              MOVS     r0,#0                 ;411
000032  bd70              POP      {r4-r6,pc}
;;;413    
                          ENDP

                  |L13.52|
                          DCD      rgb_sensor_index
                  |L13.56|
                          DCD      ||.data||
                  |L13.60|
                          DCD      nir_sensor_index

                          AREA ||i.kdp520_virtual_dp_start||, CODE, READONLY, ALIGN=1

                  kdp520_virtual_dp_start PROC
;;;127    
;;;128    static int kdp520_virtual_dp_start(struct core_device** core_d)
000000  f06f0007          MVN      r0,#7
;;;129    {
;;;130        int ret = -KDP_FRAMEWORK_ERRNO_INVALA;
;;;131        
;;;132        dbg_msg_display("%s", __func__);
;;;133        
;;;134        return ret;
;;;135    }
000004  4770              BX       lr
;;;136    
                          ENDP


                          AREA ||i.kdp520_virtual_dp_stop||, CODE, READONLY, ALIGN=1

                  kdp520_virtual_dp_stop PROC
;;;136    
;;;137    static int kdp520_virtual_dp_stop(struct core_device** core_d)
000000  2000              MOVS     r0,#0
;;;138    {
;;;139        dbg_msg_display("%s", __func__);
;;;140    
;;;141        return 0;//ret;
;;;142    }
000002  4770              BX       lr
;;;143    
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  virtual_dp_ctx_s
                          %        16

                          AREA ||.data||, DATA, ALIGN=2

                  _glcdc_cur_addr
                          DCD      0x00000000

                          AREA ||area_number.20||, DATA, ALIGN=2

                          EXPORTAS ||area_number.20||, ||.data||
                  kdp520_virtual_dp_driver
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
00000c  00000000          DCB      0x00,0x00,0x00,0x00
                          %        16
                          DCD      0x00000000
                          DCD      0x00000000
                          %        8
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
000050  00000000          DCW      0x0000,0x0000
000054  00000000          DCW      0x0000,0x0000
000058  00000000          DCW      0x0000,0x0000
00005c  00000000          DCW      0x0000,0x0000
000060  00000000          DCW      0x0000,0x0000
000064  00000000          DCW      0x0000,0x0000
000068  0000              DCW      0x0000
00006a  0000              DCB      0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
000078  0000              DCW      0x0000
00007a  0000              DCB      0x00,0x00
                          DCD      0x00000000
                          DCD      kdp520_virtual_dp_attach_panel
                          DCD      kdp520_virtual_dp_set_params
                          DCD      kdp520_virtual_dp_get_params
                          DCD      kdp520_virtual_dp_set_camera
                          DCD      kdp520_virtual_dp_get_buffer_addr
                          DCD      kdp520_virtual_dp_init
                          DCD      kdp520_virtual_dp_start
                          DCD      kdp520_virtual_dp_stop
                          DCD      kdp520_virtual_dp_set_source
                          DCD      kdp520_virtual_dp_set_pen
                          DCD      kdp520_virtual_dp_draw_rect
                          DCD      kdp520_virtual_dp_draw_line
                          DCD      kdp520_virtual_dp_fill_rect
                          DCD      kdp520_virtual_dp_draw_bitmap
                          DCD      kdp520_virtual_dp_fresh

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\scpu\\drivers\\media\\platform\\kdp520_virtual_dp.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___19_kdp520_virtual_dp_c_3722e9bf____REV16|
#line 208 "F:\\Users\\fu\\AppData\\Local\\Arm\\Packs\\ARM\\CMSIS\\5.9.0\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___19_kdp520_virtual_dp_c_3722e9bf____REV16| PROC
#line 209

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___19_kdp520_virtual_dp_c_3722e9bf____REVSH|
#line 223
|__asm___19_kdp520_virtual_dp_c_3722e9bf____REVSH| PROC
#line 224

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___19_kdp520_virtual_dp_c_3722e9bf____RRX|
#line 410
|__asm___19_kdp520_virtual_dp_c_3722e9bf____RRX| PROC
#line 411

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
