; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\objects\kdp_comm.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\kdp_comm.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O3 --diag_suppress=9931 -I..\..\config -I..\..\..\..\board -I..\..\..\..\common\include -I..\..\..\..\scpu\device\include\CMSIS -I..\..\..\..\scpu\device\include\Kneron -I..\..\..\..\scpu\framework\include -I..\..\..\..\scpu\framework\include\framework -I..\..\..\..\scpu\drivers\include -I..\..\..\..\scpu\drivers\include\media\touch -I..\..\..\..\scpu\drivers\include\media\flash -I..\..\..\..\scpu\lib\kdp_system\inc -I..\..\..\..\scpu\lib\kdp_application\include\ -I..\..\..\..\scpu\lib\kdp_application\base\ -I..\..\..\..\scpu\lib\kdp_application\misc -I..\..\..\..\scpu\lib\kdp_e2e_r1n1\include -I..\..\..\..\scpu\include -I..\..\..\..\scpu\middleware\ota -I..\..\..\..\scpu\middleware\comm -I..\..\..\..\scpu\middleware\kdp_comm -I..\..\..\..\scpu\share -I..\..\..\..\scpu\share\gui_lib -I..\..\user -I.\RTE\CMSIS -I.\RTE\_Target-scpu -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\RTOS2\Include -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\RTOS2\RTX\Include -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\Device\ARM\ARMCM4\Include -D__RTX -D__MICROLIB -D__UVISION_VERSION=538 -D_RTE_ -DARMCM4_FP -D_RTE_ -DARM_MATH_CM4 -DTARGET_SCPU -DLOG_ENABLE -DKL520 -DHEAD_POSE_CHECK_PERCENT --omf_browse=.\objects\kdp_comm.crf ..\..\..\..\scpu\middleware\kdp_comm\kdp_comm.c]
                          THUMB

                          AREA ||i.kdp_comm_check_header||, CODE, READONLY, ALIGN=2

                  kdp_comm_check_header PROC
;;;890    
;;;891    s32 kdp_comm_check_header(s32 start_idx)
000000  4a0a              LDR      r2,|L1.44|
;;;892    {
;;;893        if ((start_idx + 1) < stCom_type.parser_cnt)
000002  1c43              ADDS     r3,r0,#1
000004  6991              LDR      r1,[r2,#0x18]  ; stCom_type
000006  4299              CMP      r1,r3
000008  d90c              BLS      |L1.36|
;;;894        {
;;;895            u8 *parser_data = stCom_type.parser_buffer;
00000a  6952              LDR      r2,[r2,#0x14]  ; stCom_type
00000c  1e49              SUBS     r1,r1,#1
;;;896    
;;;897            for(s32 i = start_idx; i < ( stCom_type.parser_cnt-1 ); i++ )
00000e  e007              B        |L1.32|
                  |L1.16|
;;;898            {
;;;899                if(  (parser_data[i] == COM_BUS_HEAD_RX_1) && (parser_data[i+1] == COM_BUS_HEAD_RX_2 )  )
000010  5c13              LDRB     r3,[r2,r0]
000012  2bef              CMP      r3,#0xef
000014  d103              BNE      |L1.30|
000016  1813              ADDS     r3,r2,r0
000018  785b              LDRB     r3,[r3,#1]
00001a  2baa              CMP      r3,#0xaa
00001c  d004              BEQ      |L1.40|
                  |L1.30|
00001e  1c40              ADDS     r0,r0,#1
                  |L1.32|
000020  4281              CMP      r1,r0                 ;897
000022  d8f5              BHI      |L1.16|
                  |L1.36|
;;;900                {
;;;901                    return i;
;;;902                }
;;;903            }
;;;904        }
;;;905    
;;;906        return -1;
000024  f04f30ff          MOV      r0,#0xffffffff
                  |L1.40|
;;;907    }
000028  4770              BX       lr
;;;908    
                          ENDP

00002a  0000              DCW      0x0000
                  |L1.44|
                          DCD      ||.bss||

                          AREA ||i.kdp_comm_post_process||, CODE, READONLY, ALIGN=2

                  kdp_comm_post_process PROC
;;;908    
;;;909    void kdp_comm_post_process(u16 result)
000000  b570              PUSH     {r4-r6,lr}
;;;910    {
;;;911        s32 head_idx = kdp_comm_check_header((COM_BUS_PACKET_OK == result)?stCom_type.parser_end:0);
000002  4c0f              LDR      r4,|L2.64|
000004  2866              CMP      r0,#0x66
000006  d015              BEQ      |L2.52|
000008  f05f0000          MOVS.W   r0,#0
                  |L2.12|
00000c  f7fffffe          BL       kdp_comm_check_header
;;;912        if (head_idx >= 0)
000010  2800              CMP      r0,#0
000012  db00              BLT      |L2.22|
;;;913        {
;;;914            stCom_type.parser_end = (u32)head_idx;
000014  61e0              STR      r0,[r4,#0x1c]  ; stCom_type
                  |L2.22|
;;;915        }
;;;916    
;;;917        // dbg_msg_console("parser_cnt:%d, parser_end:%d", stCom_type.parser_cnt, stCom_type.parser_end);
;;;918        if(stCom_type.parser_cnt > stCom_type.parser_end)
000016  69a0              LDR      r0,[r4,#0x18]  ; stCom_type
000018  69e1              LDR      r1,[r4,#0x1c]  ; stCom_type
00001a  2500              MOVS     r5,#0
00001c  4288              CMP      r0,r1
00001e  d90b              BLS      |L2.56|
;;;919        {
;;;920            memcpy(stCom_type.parser_buffer, &stCom_type.parser_buffer[stCom_type.parser_end], stCom_type.parser_cnt - stCom_type.parser_end);
000020  1a42              SUBS     r2,r0,r1
000022  6960              LDR      r0,[r4,#0x14]  ; stCom_type
000024  4401              ADD      r1,r1,r0
000026  f7fffffe          BL       __aeabi_memcpy
;;;921            stCom_type.parser_cnt = stCom_type.parser_cnt - stCom_type.parser_end;
00002a  69a0              LDR      r0,[r4,#0x18]  ; stCom_type
00002c  69e1              LDR      r1,[r4,#0x1c]  ; stCom_type
00002e  1a40              SUBS     r0,r0,r1
000030  61a0              STR      r0,[r4,#0x18]  ; stCom_type
000032  e002              B        |L2.58|
                  |L2.52|
000034  69e0              LDR      r0,[r4,#0x1c]         ;911  ; stCom_type
000036  e7e9              B        |L2.12|
                  |L2.56|
;;;922        }
;;;923        else
;;;924        {
;;;925            stCom_type.parser_cnt = 0;
000038  61a5              STR      r5,[r4,#0x18]  ; stCom_type
                  |L2.58|
;;;926        }
;;;927        stCom_type.parser_end = 0;
00003a  61e5              STR      r5,[r4,#0x1c]  ; stCom_type
;;;928    }
00003c  bd70              POP      {r4-r6,pc}
;;;929    
                          ENDP

00003e  0000              DCW      0x0000
                  |L2.64|
                          DCD      ||.bss||

                          AREA ||i.kdp_comm_receive_data||, CODE, READONLY, ALIGN=2

                  kdp_comm_receive_data PROC
;;;406    
;;;407    void kdp_comm_receive_data(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;408    {
;;;409        u32 write_idx = kdp_uart_GetWriteIndex(stCom_type.dev_id);
000004  4c1c              LDR      r4,|L3.120|
000006  78a0              LDRB     r0,[r4,#2]  ; stCom_type
000008  f7fffffe          BL       kdp_uart_GetWriteIndex
00000c  4605              MOV      r5,r0
;;;410        u32 read_idx = kdp_uart_GetReadIndex(stCom_type.dev_id);
00000e  78a0              LDRB     r0,[r4,#2]  ; stCom_type
000010  f7fffffe          BL       kdp_uart_GetReadIndex
000014  4606              MOV      r6,r0
;;;411        
;;;412        if (write_idx != read_idx)
000016  42b5              CMP      r5,r6
000018  d02c              BEQ      |L3.116|
;;;413        {
;;;414            // dbg_msg_console("write_idx:%d, read_idx:%d", write_idx, read_idx);
;;;415    
;;;416            u32 buf_size = kdp_uart_GetRxBufSize(stCom_type.dev_id);
00001a  78a0              LDRB     r0,[r4,#2]  ; stCom_type
00001c  f7fffffe          BL       kdp_uart_GetRxBufSize
;;;417            u32 len;
;;;418            if(write_idx > read_idx)
000020  42b5              CMP      r5,r6
000022  d90b              BLS      |L3.60|
;;;419            {
;;;420                len = write_idx-read_idx;
;;;421                memcpy(&stCom_type.parser_buffer[stCom_type.parser_cnt], &stCom_type.rx_buffer[read_idx], len);
000024  6960              LDR      r0,[r4,#0x14]  ; stCom_type
000026  69a1              LDR      r1,[r4,#0x18]  ; stCom_type
000028  1baf              SUBS     r7,r5,r6              ;420
00002a  4408              ADD      r0,r0,r1
00002c  68e1              LDR      r1,[r4,#0xc]  ; stCom_type
00002e  463a              MOV      r2,r7
000030  4431              ADD      r1,r1,r6
000032  f7fffffe          BL       __aeabi_memcpy
;;;422                stCom_type.parser_cnt += len;
000036  69a0              LDR      r0,[r4,#0x18]  ; stCom_type
000038  4438              ADD      r0,r0,r7
00003a  e014              B        |L3.102|
                  |L3.60|
;;;423            }
;;;424            else
;;;425            {
;;;426                len = buf_size-read_idx;
00003c  1b87              SUBS     r7,r0,r6
;;;427                memcpy(&stCom_type.parser_buffer[stCom_type.parser_cnt], &stCom_type.rx_buffer[read_idx], len);
00003e  6960              LDR      r0,[r4,#0x14]  ; stCom_type
000040  69a1              LDR      r1,[r4,#0x18]  ; stCom_type
000042  463a              MOV      r2,r7
000044  4408              ADD      r0,r0,r1
000046  68e1              LDR      r1,[r4,#0xc]  ; stCom_type
000048  4431              ADD      r1,r1,r6
00004a  f7fffffe          BL       __aeabi_memcpy
;;;428                stCom_type.parser_cnt += len;
00004e  69a0              LDR      r0,[r4,#0x18]  ; stCom_type
000050  4438              ADD      r0,r0,r7
000052  61a0              STR      r0,[r4,#0x18]  ; stCom_type
;;;429                if(write_idx > 0)
000054  b145              CBZ      r5,|L3.104|
;;;430                {
;;;431                    memcpy(&stCom_type.parser_buffer[stCom_type.parser_cnt], &stCom_type.rx_buffer[0], write_idx);
000056  6961              LDR      r1,[r4,#0x14]  ; stCom_type
000058  462a              MOV      r2,r5
00005a  4408              ADD      r0,r0,r1
00005c  68e1              LDR      r1,[r4,#0xc]  ; stCom_type
00005e  f7fffffe          BL       __aeabi_memcpy
;;;432                    stCom_type.parser_cnt += write_idx;
000062  69a0              LDR      r0,[r4,#0x18]  ; stCom_type
000064  4428              ADD      r0,r0,r5
                  |L3.102|
000066  61a0              STR      r0,[r4,#0x18]  ; stCom_type
                  |L3.104|
;;;433                }
;;;434            }
;;;435            kdp_uart_SetReadIndex(stCom_type.dev_id, write_idx);
000068  78a0              LDRB     r0,[r4,#2]  ; stCom_type
00006a  4629              MOV      r1,r5
00006c  e8bd41f0          POP      {r4-r8,lr}
000070  f7ffbffe          B.W      kdp_uart_SetReadIndex
                  |L3.116|
;;;436    #ifdef DEV_PKT_LOG_DETAIL
;;;437            dbg_msg_nocrlf("kdp_comm_receive_data: ");
;;;438            for(u32 i=0; i< stCom_type.parser_cnt; i++) {
;;;439                dbg_msg_nocrlf("%02x ", stCom_type.parser_buffer[i]);
;;;440            }
;;;441            dbg_msg_nocrlf("\r\n");
;;;442    #endif
;;;443        }
;;;444    }
000074  e8bd81f0          POP      {r4-r8,pc}
;;;445    
                          ENDP

                  |L3.120|
                          DCD      ||.bss||

                          AREA ||i.kl520_com_buf_addr_init||, CODE, READONLY, ALIGN=2

                  kl520_com_buf_addr_init PROC
;;;57     //===============================================
;;;58     void kl520_com_buf_addr_init(void)
000000  4908              LDR      r1,|L4.36|
;;;59     {
;;;60         stCom_type.tx_buffer = pgcom_tx_buf;
000002  4809              LDR      r0,|L4.40|
000004  684a              LDR      r2,[r1,#4]  ; pgcom_tx_buf
000006  6042              STR      r2,[r0,#4]  ; stCom_type
;;;61         stCom_type.rx_buffer = pgcom_rx_buf;
000008  688a              LDR      r2,[r1,#8]  ; pgcom_rx_buf
00000a  60c2              STR      r2,[r0,#0xc]  ; stCom_type
;;;62         stCom_type.parser_buffer = pgcom_rx1_buf;
00000c  68c9              LDR      r1,[r1,#0xc]  ; pgcom_rx1_buf
00000e  6141              STR      r1,[r0,#0x14]  ; stCom_type
;;;63         stCom_type.parser_cnt = 0;
000010  2100              MOVS     r1,#0
000012  6181              STR      r1,[r0,#0x18]  ; stCom_type
;;;64         stCom_type.parser_end = 0;
000014  61c1              STR      r1,[r0,#0x1c]  ; stCom_type
;;;65         stCom_type.tx_buffer_index = &gcom_tx_index;
000016  4903              LDR      r1,|L4.36|
000018  3110              ADDS     r1,r1,#0x10
00001a  6081              STR      r1,[r0,#8]  ; stCom_type
;;;66         stCom_type.rx_buffer_index = &gcom_rx_index;
00001c  1d09              ADDS     r1,r1,#4
00001e  6101              STR      r1,[r0,#0x10]  ; stCom_type
;;;67     }
000020  4770              BX       lr
;;;68     
                          ENDP

000022  0000              DCW      0x0000
                  |L4.36|
                          DCD      ||.data||
                  |L4.40|
                          DCD      ||.bss||

                          AREA ||i.kl520_com_bus_init||, CODE, READONLY, ALIGN=1

                  kl520_com_bus_init PROC
;;;1049   extern void Drv_OTA_Thread( void );
;;;1050   void kl520_com_bus_init(void)
000000  f7ffbffe          B.W      Drv_OTA_Thread
;;;1051   {
;;;1052       Drv_OTA_Thread();
;;;1053   }
;;;1054   
                          ENDP


                          AREA ||i.kl520_com_init||, CODE, READONLY, ALIGN=2

                  kl520_com_init PROC
;;;92     
;;;93     void kl520_com_init(kl520_com_flags flags)
000000  b570              PUSH     {r4-r6,lr}
;;;94     {
;;;95         stCom_type.flags = flags;
000002  4c13              LDR      r4,|L6.80|
;;;96         stCom_type.com_type = DEV_NULL;
;;;97         stCom_type.uart_port = 0xFF;
;;;98     
;;;99         stCom_type.tx_buffer = pgcom_tx_buf;
000004  4d13              LDR      r5,|L6.84|
;;;100        stCom_type.rx_buffer = pgcom_rx_buf;
;;;101        stCom_type.parser_buffer = pgcom_rx1_buf;
;;;102        stCom_type.parser_cnt = 0;
000006  2600              MOVS     r6,#0
000008  70e0              STRB     r0,[r4,#3]            ;95
00000a  20ff              MOVS     r0,#0xff              ;96
00000c  7020              STRB     r0,[r4,#0]            ;96
00000e  7060              STRB     r0,[r4,#1]            ;97
000010  6868              LDR      r0,[r5,#4]            ;99  ; pgcom_tx_buf
000012  6060              STR      r0,[r4,#4]            ;99  ; stCom_type
000014  68a8              LDR      r0,[r5,#8]            ;100  ; pgcom_rx_buf
000016  60e0              STR      r0,[r4,#0xc]          ;100  ; stCom_type
000018  68e8              LDR      r0,[r5,#0xc]          ;101  ; pgcom_rx1_buf
00001a  6160              STR      r0,[r4,#0x14]         ;101  ; stCom_type
00001c  61a6              STR      r6,[r4,#0x18]  ; stCom_type
;;;103        stCom_type.parser_end = 0;
00001e  61e6              STR      r6,[r4,#0x1c]  ; stCom_type
;;;104        stCom_type.tx_buffer_index = &gcom_tx_index;
000020  f1050010          ADD      r0,r5,#0x10
000024  60a0              STR      r0,[r4,#8]  ; stCom_type
;;;105        stCom_type.rx_buffer_index = &gcom_rx_index;
000026  1d00              ADDS     r0,r0,#4
000028  6120              STR      r0,[r4,#0x10]  ; stCom_type
00002a  69e8              LDR      r0,[r5,#0x1c]         ;94  ; msg_dec
00002c  b920              CBNZ     r0,|L6.56|
;;;106    
;;;107    #if ( ENCRYPTION_MODE&AES_ENCRYPTION ) || ( ENCRYPTION_MODE&XOR_ENCRYPTION )
;;;108        if ( msg_dec == NULL )
;;;109        {
;;;110            msg_dec = (uint8_t*)kdp_ddr_reserve(MSG_MAX_SIZE);
00002e  f44f5080          MOV      r0,#0x1000
000032  f7fffffe          BL       kdp_ddr_reserve
000036  61e8              STR      r0,[r5,#0x1c]  ; msg_dec
                  |L6.56|
;;;111        }
;;;112    #endif
;;;113    
;;;114    #if ( !(CFG_COM_BUS_TYPE&COM_BUS_SPI_MS_EN) ) && ( ( CFG_COM_BUS_TYPE&COM_BUS_SPI_MASK )&( ~COM_BUS_SPI_MS_EN ) )
;;;115    #ifdef COM_BUS_RESPONSE_REQUEST_PIN
;;;116        kdp_slave_request_init();
;;;117        kdp_slave_request_inactive();
;;;118    #endif
;;;119    #endif
;;;120    
;;;121    
;;;122    #if ( !(CFG_COM_BUS_TYPE&COM_BUS_SPI_MS_EN) ) && ( ( CFG_COM_BUS_TYPE&COM_BUS_SPI_MASK )&( ~COM_BUS_SPI_MS_EN ) )
;;;123        stCom_type.com_type = DEV_SPI;
;;;124        driver_ssp_ctx.Tx_buffer_index = stCom_type.tx_buffer_index;
;;;125        driver_ssp_ctx.Rx_buffer_index = stCom_type.rx_buffer_index;
;;;126        kdp_ssp_statemachine( &driver_ssp_ctx, e_spi_init_slave );
;;;127        kdp_ssp_clear_rxhw( driver_ssp_ctx.reg_base_address );
;;;128        kdp_ssp_clear_txhw( driver_ssp_ctx.reg_base_address );
;;;129        kdp_ssp_clear_rx_buf_index( &driver_ssp_ctx );
;;;130        kdp_ssp_clear_tx_buf_index( &driver_ssp_ctx );
;;;131        kdp_ssp_clear_tx_current_buf_index(&driver_ssp_ctx);
;;;132        kdp_ssp_clear_tx_done_flag(&driver_ssp_ctx);
;;;133        kdp_ssp_statemachine( &driver_ssp_ctx, e_spi_disable );
;;;134        kdp_ssp_statemachine( &driver_ssp_ctx, e_spi_enable );
;;;135    
;;;136    #elif ( CFG_COM_BUS_TYPE&COM_BUS_UART_MASK )
;;;137        stCom_type.com_type = DEV_UART;
;;;138    
;;;139    #if ( ( CFG_COM_BUS_TYPE&COM_BUS_UART0 ) == COM_BUS_UART0 )
;;;140        stCom_type.uart_port = 0;
;;;141        stCom_type.dev_id = UART0_DEV;
;;;142    #elif ( ( CFG_COM_BUS_TYPE&COM_BUS_UART1 ) == COM_BUS_UART1 )
;;;143        stCom_type.uart_port = 1;
;;;144        stCom_type.dev_id = UART1_DEV;
;;;145    #elif ( ( CFG_COM_BUS_TYPE&COM_BUS_UART2 ) == COM_BUS_UART2 )
;;;146        stCom_type.uart_port = 2;
000038  2002              MOVS     r0,#2
00003a  7026              STRB     r6,[r4,#0]            ;137
00003c  7060              STRB     r0,[r4,#1]
;;;147        stCom_type.dev_id = UART2_DEV;
00003e  70a0              STRB     r0,[r4,#2]
;;;148    #elif ( ( CFG_COM_BUS_TYPE&COM_BUS_UART3 ) == COM_BUS_UART3 )
;;;149        stCom_type.uart_port = 3;
;;;150        stCom_type.dev_id = UART3_DEV;
;;;151    #elif ( ( CFG_COM_BUS_TYPE&COM_BUS_UART4 ) == COM_BUS_UART4 )
;;;152        stCom_type.uart_port = 4;
;;;153        stCom_type.dev_id = UART4_DEV;
;;;154    #endif
;;;155    
;;;156        kdp_uart_app_com( stCom_type.uart_port , BAUD_115200, (UINT8 *)stCom_type.rx_buffer, KDP_DDR_DRV_COM_BUS_RESERVED);
000040  68e2              LDR      r2,[r4,#0xc]  ; stCom_type
000042  e8bd4070          POP      {r4-r6,lr}
000046  f44f53a0          MOV      r3,#0x1400
00004a  2110              MOVS     r1,#0x10
00004c  f7ffbffe          B.W      kdp_uart_app_com
;;;157    #endif
;;;158    }
;;;159    
                          ENDP

                  |L6.80|
                          DCD      ||.bss||
                  |L6.84|
                          DCD      ||.data||

                          AREA ||i.kl520_com_initial||, CODE, READONLY, ALIGN=1

                  kl520_com_initial PROC
;;;159    
;;;160    void kl520_com_initial( kl520_com_flags flags )
000000  f7ffbffe          B.W      kl520_com_init
;;;161    {
;;;162        kl520_com_init( flags );
;;;163    }
;;;164    
                          ENDP


                          AREA ||i.kl520_com_reconfig_baud_rate||, CODE, READONLY, ALIGN=2

                  kl520_com_reconfig_baud_rate PROC
;;;69     #if ( CFG_COM_BUS_TYPE&COM_BUS_UART_MASK )
;;;70     void kl520_com_reconfig_baud_rate(int rate)
000000  b510              PUSH     {r4,lr}
;;;71     {
000002  b1b0              CBZ      r0,|L8.50|
;;;72         u32 baudrate;
;;;73     
;;;74         if(rate == 0)     {baudrate = BAUD_115200;}
;;;75         else if(rate == 1){baudrate = BAUD_921600;}
000004  2801              CMP      r0,#1
000006  d005              BEQ      |L8.20|
;;;76         else if(rate == 2){baudrate = BAUD_460800;}
000008  2802              CMP      r0,#2
00000a  d014              BEQ      |L8.54|
;;;77         else if(rate == 3){baudrate = BAUD_230400;}
00000c  2803              CMP      r0,#3
00000e  d014              BEQ      |L8.58|
;;;78         else if(rate == 4){baudrate = BAUD_1500000;}
000010  2804              CMP      r0,#4
000012  d014              BEQ      |L8.62|
                  |L8.20|
;;;79         else{baudrate = BAUD_921600;}
000014  2402              MOVS     r4,#2
                  |L8.22|
;;;80     
;;;81     #ifdef COM_BUS_RESPONSE_REQUEST_PIN
;;;82         stCom_type.flags = KL520_COM_HAS_ADDITIONAL_IO;
;;;83     #else
;;;84         stCom_type.flags = KL520_COM_NORMAL;
000016  4b0b              LDR      r3,|L8.68|
000018  2000              MOVS     r0,#0
00001a  70d8              STRB     r0,[r3,#3]
;;;85     #endif
;;;86     
;;;87         kl520_com_buf_addr_init();
00001c  f7fffffe          BL       kl520_com_buf_addr_init
;;;88     
;;;89         kdp_uart_app_com( stCom_type.uart_port, baudrate, (UINT8 *)stCom_type.rx_buffer, KDP_DDR_DRV_COM_BUS_RESERVED);
000020  68da              LDR      r2,[r3,#0xc]  ; stCom_type
000022  7858              LDRB     r0,[r3,#1]  ; stCom_type
000024  4621              MOV      r1,r4
000026  e8bd4010          POP      {r4,lr}
00002a  f44f53a0          MOV      r3,#0x1400
00002e  f7ffbffe          B.W      kdp_uart_app_com
                  |L8.50|
000032  2410              MOVS     r4,#0x10              ;74
000034  e7ef              B        |L8.22|
                  |L8.54|
000036  2404              MOVS     r4,#4                 ;76
000038  e7ed              B        |L8.22|
                  |L8.58|
00003a  2408              MOVS     r4,#8                 ;77
00003c  e7eb              B        |L8.22|
                  |L8.62|
00003e  2401              MOVS     r4,#1                 ;78
000040  e7e9              B        |L8.22|
;;;90     }
;;;91     #endif
                          ENDP

000042  0000              DCW      0x0000
                  |L8.68|
                          DCD      ||.bss||

                          AREA ||i.kl520_com_reg_user_ops||, CODE, READONLY, ALIGN=2

                  kl520_com_reg_user_ops PROC
;;;885    
;;;886    void kl520_com_reg_user_ops(kl520_com_user_ops *ops)
000000  4901              LDR      r1,|L9.8|
;;;887    {
;;;888        _user_com_ops = ops;
000002  6188              STR      r0,[r1,#0x18]  ; _user_com_ops
;;;889    }
000004  4770              BX       lr
;;;890    
                          ENDP

000006  0000              DCW      0x0000
                  |L9.8|
                          DCD      ||.data||

                          AREA ||i.kl520_com_response||, CODE, READONLY, ALIGN=1

                  kl520_com_response PROC
;;;218    
;;;219    UINT8 kl520_com_response( struct st_com_type *st_com )
000000  b510              PUSH     {r4,lr}
;;;220    {
;;;221        if( *st_com->tx_buffer_index > 0 )
000002  6880              LDR      r0,[r0,#8]
000004  6800              LDR      r0,[r0,#0]
000006  2800              CMP      r0,#0                 ;220
000008  d002              BEQ      |L10.16|
;;;222        {
;;;223            //dbg_msg_console("kl520_com_response in");
;;;224            //do response or not !!!
;;;225    //      CurTime = osKernelGetTickCount();
;;;226    //      InterTime = CurTime-LastTime;
;;;227    //      if( InterTime < MSG_INTERNAL_TIME )
;;;228    //      {
;;;229    //          dbg_msg_console("$$$$$$$$$$ internal time < 100,time:%d $$$$$$$$$",InterTime);
;;;230    //          //return 0;
;;;231    //          osDelay( (MSG_INTERNAL_TIME-InterTime) );
;;;232    //      }
;;;233            kl520_com_response_start();
00000a  f7fffffe          BL       kl520_com_response_start
;;;234    //      LastTime = osKernelGetTickCount();
;;;235    //        return 0;//( kl520_com_response_Done_check() );
;;;236            return 0;//( kl520_com_response_Done_check() );
00000e  2000              MOVS     r0,#0
                  |L10.16|
;;;237        }
;;;238    
;;;239        return 0;
;;;240    }
000010  bd10              POP      {r4,pc}
;;;241    
                          ENDP


                          AREA ||i.kl520_com_response_Done_check||, CODE, READONLY, ALIGN=2

                  kl520_com_response_Done_check PROC
;;;246    
;;;247    UINT8 kl520_com_response_Done_check(void)
000000  b508              PUSH     {r3,lr}
;;;248    {
;;;249        volatile UINT16 current_count = 0, pre_count = 0;
000002  2000              MOVS     r0,#0
000004  f8ad0000          STRH     r0,[sp,#0]
000008  f8ad0000          STRH     r0,[sp,#0]
;;;250    #if ( !(CFG_COM_BUS_TYPE&COM_BUS_SPI_MS_EN) ) && ( ( CFG_COM_BUS_TYPE&COM_BUS_SPI_MASK )&( ~COM_BUS_SPI_MS_EN ) )
;;;251        UINT8 response_TO = 0 , response_TO_target = 100;
;;;252    
;;;253    #ifdef COM_BUS_RESPONSE_REQUEST_PIN
;;;254        if (stCom_type.flags == KL520_COM_HAS_ADDITIONAL_IO)
;;;255        {
;;;256            kdp_slave_request_active();
;;;257        }
;;;258    #endif
;;;259    
;;;260    #if( COM_DEBUG_LOG_EN == YES)
;;;261        dbg_msg("[com_bus] Response SPI Tx wait ing !!!");
;;;262    #endif
;;;263        kdp_ssp_clear_tx_done_flag( &driver_ssp_ctx ) ;
;;;264        while( kdp_ssp_get_tx_done_flag( &driver_ssp_ctx ) == 0 )
;;;265        {
;;;266            osDelay(50);
;;;267            response_TO ++;
;;;268            if(response_TO > response_TO_target)
;;;269            {
;;;270    #if( COM_DEBUG_LOG_EN == YES)
;;;271                dbg_msg("[com_bus] Response SPI Tx wait Timeout !!!");
;;;272    #endif
;;;273                *stCom_type.tx_buffer_index = 0;
;;;274                *stCom_type.rx_buffer_index = 0;
;;;275                kl520_api_ssp_spi1_clear_tx_current_buff_size();
;;;276                kdp_ssp_clear_rxhw( driver_ssp_ctx.reg_base_address );
;;;277                kdp_ssp_clear_txhw( driver_ssp_ctx.reg_base_address );
;;;278                return 0;
;;;279            }
;;;280        }
;;;281    
;;;282    #if( COM_DEBUG_LOG_EN == YES)
;;;283        dbg_msg("[com_bus] Response SPI Tx wait done!!!");
;;;284    #endif
;;;285        while( kdp_ssp_statemachine( &driver_ssp_ctx, e_spi_rx ) == e_spi_ret_rxbusy )
;;;286        {
;;;287            delay_us(30);
;;;288        }
;;;289    
;;;290    #if( COM_DEBUG_LOG_EN == YES)
;;;291        dbg_msg("[com_bus] Response SPI Tx busy done!!!");
;;;292    #endif
;;;293    
;;;294    #ifdef COM_BUS_RESPONSE_REQUEST_PIN
;;;295        if (stCom_type.flags == KL520_COM_HAS_ADDITIONAL_IO)
;;;296        {
;;;297            kdp_slave_request_inactive();
;;;298        }
;;;299    #endif
;;;300    
;;;301    #if( COM_DEBUG_LOG_EN == YES)
;;;302        dbg_msg("[com_bus] Response SPI Tx Done");
;;;303    #endif
;;;304        kdp_ssp_statemachine( &driver_ssp_ctx, e_spi_disable );
;;;305        kdp_ssp_clear_rxhw( driver_ssp_ctx.reg_base_address );
;;;306        kdp_ssp_clear_txhw( driver_ssp_ctx.reg_base_address );
;;;307        kdp_ssp_statemachine( &driver_ssp_ctx, e_spi_enable );
;;;308    
;;;309    #elif ( CFG_COM_BUS_TYPE&COM_BUS_UART_MASK )
;;;310    
;;;311        // int remain_len = *stCom_type.rx_buffer_index - stCom_type.rx_count;
;;;312        // if(remain_len > 0)
;;;313        // {
;;;314        //     memcpy(stCom_type.rx_buffer, stCom_type.rx_buffer + stCom_type.rx_count, remain_len);
;;;315        //     *stCom_type.rx_buffer_index = remain_len;
;;;316        // }
;;;317        // else
;;;318        // {
;;;319        //     *stCom_type.rx_buffer_index = 0;
;;;320        // }
;;;321        // stCom_type.rx_count = 0;
;;;322    
;;;323        // kdp_uart_read( stCom_type.uart_port, stCom_type.rx_buffer + (*stCom_type.rx_buffer_index), KDP_DDR_DRV_COM_BUS_RESERVED );
;;;324    #if( COM_DEBUG_LOG_EN == YES)
;;;325        dbg_msg("[com_bus] Response Uart Tx Done");
;;;326    #endif
;;;327    #endif
;;;328    
;;;329        //clear all sw buffers
;;;330        *stCom_type.tx_buffer_index = 0;
00000c  4902              LDR      r1,|L11.24|
00000e  6889              LDR      r1,[r1,#8]  ; stCom_type
;;;331        // *stCom_type.rx_buffer_index = 0;
;;;332        return 1;
000010  6008              STR      r0,[r1,#0]
000012  2001              MOVS     r0,#1
;;;333    
;;;334    }
000014  bd08              POP      {r3,pc}
;;;335    
                          ENDP

000016  0000              DCW      0x0000
                  |L11.24|
                          DCD      ||.bss||

                          AREA ||i.kl520_com_response_start||, CODE, READONLY, ALIGN=2

                  kl520_com_response_start PROC
;;;167    //===============================================
;;;168    void kl520_com_response_start(void)
000000  4809              LDR      r0,|L12.40|
;;;169    {
000002  b510              PUSH     {r4,lr}
;;;170          //dbg_msg_console("kl520_com_response_start func coming in");
;;;171    #if ( !(CFG_COM_BUS_TYPE&COM_BUS_SPI_MS_EN) ) && ( ( CFG_COM_BUS_TYPE&COM_BUS_SPI_MASK )&( ~COM_BUS_SPI_MS_EN ) )
;;;172        UINT32  nchecksum =0;
;;;173        UINT16  noffest = 0;
;;;174        *(stCom_type.tx_buffer+ noffest++) = ( *stCom_type.tx_buffer_index>>24 &0xFF );
;;;175        *(stCom_type.tx_buffer+ noffest++) = ( *stCom_type.tx_buffer_index>>16 &0xFF );
;;;176        *(stCom_type.tx_buffer+ noffest++) = ( *stCom_type.tx_buffer_index>>8 &0xFF );
;;;177        *(stCom_type.tx_buffer+ noffest++) = ( *stCom_type.tx_buffer_index>>0 &0xFF );
;;;178    
;;;179        nchecksum = ( *stCom_type.tx_buffer_index>>24 &0xFF ) +( *stCom_type.tx_buffer_index>>16 &0xFF )
;;;180                                +( *stCom_type.tx_buffer_index>>8 &0xFF )+( *stCom_type.tx_buffer_index>>0 &0xFF );
;;;181    
;;;182        *(stCom_type.tx_buffer+ noffest++) =  ( nchecksum>>24 &0xFF );
;;;183        *(stCom_type.tx_buffer+ noffest++) =  ( nchecksum>>16 &0xFF );
;;;184        *(stCom_type.tx_buffer+ noffest++) = ( nchecksum>>8 &0xFF );
;;;185        *(stCom_type.tx_buffer+ noffest++) = ( nchecksum>>0 &0xFF );
;;;186    
;;;187        if( stCom_type.no_head_tail_en == 0 )
;;;188        {
;;;189            //tail
;;;190            *(stCom_type.tx_buffer+ noffest++) = ( COM_BUS_TAIL_2 );
;;;191            *(stCom_type.tx_buffer+ noffest++) = ( COM_BUS_TAIL_1 );
;;;192        }
;;;193    
;;;194        *stCom_type.tx_buffer_index += noffest;
;;;195    
;;;196    //  kdp_ssp_statemachine( &driver_ssp_ctx, e_spi_disable );
;;;197        kl520_api_ssp_spi1_clear_tx_current_buff_size();
;;;198        kdp_ssp_clear_rxhw( driver_ssp_ctx.reg_base_address );
;;;199        kdp_ssp_clear_txhw( driver_ssp_ctx.reg_base_address );
;;;200    //  kdp_ssp_statemachine( &driver_ssp_ctx, e_spi_enable );
;;;201    
;;;202      //Need set a GPIO
;;;203        kdp_ssp_pre_write_to_fifo( &driver_ssp_ctx, 5 );
;;;204    
;;;205    #elif ( CFG_COM_BUS_TYPE&COM_BUS_UART_MASK )
;;;206        //dbg_msg_console("lmm-edit [com_bus] Response Uart Tx starting ");
;;;207        if( kdp_uart_write( stCom_type.uart_port, stCom_type.tx_buffer, *stCom_type.tx_buffer_index ) == UART_API_ERROR )
000004  6881              LDR      r1,[r0,#8]  ; stCom_type
000006  680a              LDR      r2,[r1,#0]
000008  6841              LDR      r1,[r0,#4]  ; stCom_type
00000a  7840              LDRB     r0,[r0,#1]  ; stCom_type
00000c  f7fffffe          BL       kdp_uart_write
000010  2810              CMP      r0,#0x10
000012  d103              BNE      |L12.28|
;;;208        {
;;;209            dbg_msg_console("[com_bus] Response Uart Tx fail ");
000014  a105              ADR      r1,|L12.44|
000016  2001              MOVS     r0,#1
000018  f7fffffe          BL       kdp_level_printf
                  |L12.28|
;;;210            #if( COM_DEBUG_LOG_EN == YES)
;;;211            dbg_msg_console("[com_bus] Response Uart Tx fail ");
;;;212            #endif
;;;213        }
;;;214        dbg_msg_console("[com_bus] Response Uart Tx end ");
00001c  e8bd4010          POP      {r4,lr}
000020  a10b              ADR      r1,|L12.80|
000022  2001              MOVS     r0,#1
000024  f7ffbffe          B.W      kdp_level_printf
;;;215    
;;;216    #endif
;;;217    }
;;;218    
                          ENDP

                  |L12.40|
                          DCD      ||.bss||
                  |L12.44|
00002c  5b636f6d          DCB      "[com_bus] Response Uart Tx fail \r\n",0
000030  5f627573
000034  5d205265
000038  73706f6e
00003c  73652055
000040  61727420
000044  54782066
000048  61696c20
00004c  0d0a00  
00004f  00                DCB      0
                  |L12.80|
000050  5b636f6d          DCB      "[com_bus] Response Uart Tx end \r\n",0
000054  5f627573
000058  5d205265
00005c  73706f6e
000060  73652055
000064  61727420
000068  54782065
00006c  6e64200d
000070  0a00    
000072  00                DCB      0
000073  00                DCB      0

                          AREA ||i.kl520_com_rx_size||, CODE, READONLY, ALIGN=2

                  kl520_com_rx_size PROC
;;;241    
;;;242    UINT16 kl520_com_rx_size(void)
000000  4802              LDR      r0,|L13.12|
;;;243    {
;;;244        return *stCom_type.rx_buffer_index;
000002  6900              LDR      r0,[r0,#0x10]  ; stCom_type
000004  8800              LDRH     r0,[r0,#0]
000006  b280              UXTH     r0,r0
;;;245    }
000008  4770              BX       lr
;;;246    
                          ENDP

00000a  0000              DCW      0x0000
                  |L13.12|
                          DCD      ||.bss||

                          AREA ||i.kl520_com_thread||, CODE, READONLY, ALIGN=2

                  kl520_com_thread PROC
;;;933    extern osMutexId_t mutex_rsp_msg;
;;;934    void kl520_com_thread(void)
000000  f7fffffe          BL       send_system_ready_note_msg
;;;935    {
;;;936        UINT16	npacket_result = 0;
;;;937        #if( COM_DEBUG_LOG_EN == YES)
;;;938        //dbg_msg_console("[com_bus] communication start~lmm-edit");//lmm-edit
;;;939        #endif
;;;940    
;;;941        kl520_measure_stamp(E_MEASURE_SYS_READY);
;;;942        send_system_ready_note_msg();//zcy first send ready
;;;943    	  dbg_msg_console_zhian("send_system_ready_note_msg");
000004  a12f              ADR      r1,|L14.196|
000006  2001              MOVS     r0,#1
000008  f7fffffe          BL       kdp_level_printf
;;;944    
;;;945        init_user_com_thread();
00000c  f7fffffe          BL       init_user_com_thread
;;;946        kl520_api_fdfr_init_thrd();
000010  f7fffffe          BL       kl520_api_fdfr_init_thrd
;;;947    
;;;948        if(mutex_rsp_msg == NULL) mutex_rsp_msg = osMutexNew(NULL);
000014  4c33              LDR      r4,|L14.228|
000016  6820              LDR      r0,[r4,#0]  ; mutex_rsp_msg
000018  b918              CBNZ     r0,|L14.34|
00001a  2000              MOVS     r0,#0
00001c  f7fffffe          BL       osMutexNew
000020  6020              STR      r0,[r4,#0]  ; mutex_rsp_msg
                  |L14.34|
;;;949        
;;;950        kl520_api_tasks_init_wait_ready();
000022  f7fffffe          BL       kl520_api_tasks_init_wait_ready
000026  4e30              LDR      r6,|L14.232|
;;;951    
;;;952        u32 disable_count = 0;
;;;953    
;;;954        while(1)
;;;955        {
;;;956            osDelay(8);//30
;;;957            //step1: wait and receive data
;;;958            if(kl520_com_wait_receive())
;;;959            {
;;;960                g_bAutoPowerOff = FALSE;
;;;961                g_nAutoPowerOffCnt = 0;
;;;962                disable_count = 0;
;;;963    
;;;964                //data analyze!   => user_com.c and user_com.h, need to check host_com or customer_com
;;;965                if( (npacket_result = kl520_com_analyze() ) == COM_BUS_PACKET_OK )
;;;966                {
;;;967                    //dbg_msg_console("[com_bus] communication analyze OK ");
;;;968                    //parser and trigger customer API
;;;969                    osThreadSetPriority(com_bus_tid,osPriorityAboveNormal5);
000028  4d30              LDR      r5,|L14.236|
00002a  4f31              LDR      r7,|L14.240|
                  |L14.44|
00002c  2008              MOVS     r0,#8                 ;956
00002e  f7fffffe          BL       osDelay
000032  f7fffffe          BL       kl520_com_wait_receive
000036  b3c0              CBZ      r0,|L14.170|
000038  492e              LDR      r1,|L14.244|
00003a  2000              MOVS     r0,#0                 ;960
00003c  7038              STRB     r0,[r7,#0]            ;960
00003e  6008              STR      r0,[r1,#0]            ;960  ; g_nAutoPowerOffCnt
000040  69b0              LDR      r0,[r6,#0x18]         ;960  ; _user_com_ops
000042  b120              CBZ      r0,|L14.78|
000044  6801              LDR      r1,[r0,#0]            ;960
000046  b111              CBZ      r1,|L14.78|
000048  482b              LDR      r0,|L14.248|
00004a  4788              BLX      r1                    ;960
00004c  e002              B        |L14.84|
                  |L14.78|
00004e  482a              LDR      r0,|L14.248|
000050  f7fffffe          BL       kneron_lwcom_packet_analyze
                  |L14.84|
000054  4604              MOV      r4,r0                 ;960
000056  2866              CMP      r0,#0x66              ;965
;;;970                    //parser and trigger customer API
;;;971                    kl520_com_parser();//de shi man uart com-lmm-edit
;;;972                    osThreadSetPriority(com_bus_tid,osPriorityNormal);
;;;973                }
;;;974                else
;;;975                {
;;;976                    osThreadSetPriority(com_bus_tid,osPriorityAboveNormal5);
000058  6828              LDR      r0,[r5,#0]  ; com_bus_tid
00005a  f04f0125          MOV      r1,#0x25
00005e  d019              BEQ      |L14.148|
000060  f7fffffe          BL       osThreadSetPriority
;;;977    #if ( ENCRYPTION_MODE != NO_ENCRYPTION )
;;;978                    if ( npacket_result == COM_BUS_ENCRYPTION_ERROR )
000064  f5a4406e          SUB      r0,r4,#0xee00
000068  38e5              SUBS     r0,r0,#0xe5
00006a  d011              BEQ      |L14.144|
;;;979                    {
;;;980                        send_data_error_reply_msg(MR_FAILED_NO_ENCRYPT);
;;;981    					dbg_msg_algo("npacket_result: %#x", npacket_result);
;;;982                        // send_communication_abnormal_reply_msg(MR_FAILED_NO_ENCRYPT, npacket_result);
;;;983                    }
;;;984                    else
;;;985    #endif
;;;986                    {
;;;987                        if (npacket_result != COM_BUS_PACKAGE_SIZE_ERROR)
00006c  f5a4406e          SUB      r0,r4,#0xee00
000070  38e2              SUBS     r0,r0,#0xe2
000072  d003              BEQ      |L14.124|
;;;988                        {
;;;989                            send_data_error_reply_msg(MR_REJECTED);
000074  f05f0001          MOVS.W   r0,#1
                  |L14.120|
000078  f7fffffe          BL       send_data_error_reply_msg
                  |L14.124|
;;;990                        }
;;;991    					dbg_msg_algo("npacket_result: %#x", npacket_result);
;;;992                        // send_communication_abnormal_reply_msg(MR_REJECTED, npacket_result);
;;;993                    }
;;;994                    osThreadSetPriority(com_bus_tid,osPriorityNormal);
00007c  2118              MOVS     r1,#0x18
00007e  6828              LDR      r0,[r5,#0]  ; com_bus_tid
000080  f7fffffe          BL       osThreadSetPriority
;;;995                    #if( COM_DEBUG_LOG_EN == YES)
;;;996                   // dbg_msg("[com_bus] communication analyze fail ");
;;;997    							  dbg_msg_console("[com_bus] communication analyze fail ");
;;;998                    #endif
;;;999                    //nee tp modify this!!!
;;;1000                   //kneron_lwcom_packet_response_w_tx_buffer( &stCom_type, (UINT8 *)&npacket_result, sizeof(npacket_result) );
;;;1001                   //kl520_com_response( &stCom_type );
;;;1002                   kl520_com_response_Done_check();
000084  f7fffffe          BL       kl520_com_response_Done_check
                  |L14.136|
;;;1003               }
;;;1004               kdp_comm_post_process(npacket_result);
000088  4620              MOV      r0,r4
00008a  f7fffffe          BL       kdp_comm_post_process
00008e  e7cd              B        |L14.44|
                  |L14.144|
000090  2015              MOVS     r0,#0x15              ;980
000092  e7f1              B        |L14.120|
                  |L14.148|
000094  f7fffffe          BL       osThreadSetPriority
000098  f7fffffe          BL       kl520_com_response_Done_check
00009c  69b0              LDR      r0,[r6,#0x18]         ;969  ; _user_com_ops
00009e  b128              CBZ      r0,|L14.172|
0000a0  6841              LDR      r1,[r0,#4]            ;969
0000a2  b119              CBZ      r1,|L14.172|
0000a4  4814              LDR      r0,|L14.248|
0000a6  4788              BLX      r1                    ;969
0000a8  e003              B        |L14.178|
                  |L14.170|
0000aa  e007              B        |L14.188|
                  |L14.172|
0000ac  4812              LDR      r0,|L14.248|
0000ae  f7fffffe          BL       kneron_com_parser
                  |L14.178|
0000b2  2118              MOVS     r1,#0x18              ;972
0000b4  6828              LDR      r0,[r5,#0]            ;972  ; com_bus_tid
0000b6  f7fffffe          BL       osThreadSetPriority
0000ba  e7e5              B        |L14.136|
                  |L14.188|
;;;1005           #if( COM_DEBUG_LOG_EN == YES)
;;;1006           //dbg_msg("===========");
;;;1007           #endif
;;;1008           }
;;;1009           else
;;;1010           {
;;;1011               g_bAutoPowerOff = TRUE;
0000bc  2001              MOVS     r0,#1
0000be  7038              STRB     r0,[r7,#0]
;;;1012               disable_count++;
0000c0  e7b4              B        |L14.44|
;;;1013   
;;;1014   #if ( ENABLE_AUTO_POWER_OFF_MODE == YES )
;;;1015               g_nAutoPowerOffCnt = osKernelGetTickCount();
;;;1016               if ( ( ( g_bAutoPowerOff == TRUE ) 
;;;1017   #if (ENCRYPTION_MODE > 0)
;;;1018                   && (g_bKID_SetKey == FALSE) 
;;;1019   #endif
;;;1020                   && ( g_nAutoPowerOffCnt > ( AUTO_POWER_OFF_TIME_CNT ) ) 
;;;1021                   && ( user_com_thread_event_get() != USER_COM_THREAD_EVENT_NON_OVERWRITABLE ) )
;;;1022                   || (disable_count > 5000) ) // 2.5min
;;;1023               {
;;;1024                   dbg_msg_console("[%d]AUTO POWER OFF", osKernelGetTickCount());
;;;1025                   user_com_event_power_off();
;;;1026               }
;;;1027   
;;;1028   //            if(user_app_GetOtaStatus() < YES && user_app_GetSetUSBStatus(2) == 0 && !flag_task_busy && flag_auto_powerOff == 1 && time_cnt > (CNT_USER_AUTO_POWEROFF+power_off_delay_time)) //5000ms/8=625  real time is 7.87S
;;;1029   //            {
;;;1030   //            }
;;;1031   #endif
;;;1032           }
;;;1033   
;;;1034   #if (CFG_KL520_VERSION == KL520A)
;;;1035           u32 cur_tick = osKernelGetTickCount();
;;;1036           int diff = cur_tick - last_hb_tick;
;;;1037           if((cur_tick < last_hb_tick) || diff > 2500) { //if loop again or 2.5s passed.
;;;1038               //last_hb_tick = cur_tick;
;;;1039               //send hb.
;;;1040   //            dbg_msg_console("YG --- sending HB msg to MCU. %d.", diff);
;;;1041               send_heartbeat_msg();
;;;1042           }
;;;1043   #endif
;;;1044       }
;;;1045   
;;;1046   }
;;;1047   #endif
                          ENDP

0000c2  0000              DCW      0x0000
                  |L14.196|
0000c4  73656e64          DCB      "send_system_ready_note_msg\r\n",0
0000c8  5f737973
0000cc  74656d5f
0000d0  72656164
0000d4  795f6e6f
0000d8  74655f6d
0000dc  73670d0a
0000e0  00      
0000e1  00                DCB      0
0000e2  00                DCB      0
0000e3  00                DCB      0
                  |L14.228|
                          DCD      mutex_rsp_msg
                  |L14.232|
                          DCD      ||.data||
                  |L14.236|
                          DCD      com_bus_tid
                  |L14.240|
                          DCD      g_bAutoPowerOff
                  |L14.244|
                          DCD      g_nAutoPowerOffCnt
                  |L14.248|
                          DCD      ||.bss||

                          AREA ||i.kl520_com_wait_receive||, CODE, READONLY, ALIGN=2

                  kl520_com_wait_receive PROC
;;;447    //this is a shared function
;;;448    BOOL kl520_com_wait_receive(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;449    {
;;;450        BOOL ret = FALSE;
;;;451        //check Rx busy
;;;452    #if ( !(CFG_COM_BUS_TYPE&COM_BUS_SPI_MS_EN) ) && ( ( CFG_COM_BUS_TYPE&COM_BUS_SPI_MASK )&( ~COM_BUS_SPI_MS_EN ) )
;;;453        UINT8   timeout_cnt = 0, time_out_th = 10;
;;;454        UINT16  ncount = 0xFFFF;
;;;455        //spi busy check
;;;456        if ( stCom_type.com_type == DEV_SPI )
;;;457        {
;;;458            while(1)
;;;459            {
;;;460                ncount = *stCom_type.rx_buffer_index;
;;;461                if( ncount == 0 )
;;;462                {
;;;463                    timeout_cnt++;
;;;464                    delay_ms(1);
;;;465                    if( timeout_cnt > time_out_th )
;;;466                    {
;;;467                    #if( COM_DEBUG_LOG_EN == YES)
;;;468                        dbg_msg("[com_bus] spi timeout ");
;;;469                    #endif
;;;470                        break;
;;;471                    }
;;;472                }
;;;473                else
;;;474                {
;;;475                    timeout_cnt = 0;
;;;476                    while( kl520_api_ssp_spi1_receive(&driver_ssp_ctx) == 0 );
;;;477                #if( COM_DEBUG_LOG_EN == YES)
;;;478                    dbg_msg("[com_bus] spi data get size: %d ", *stCom_type.rx_buffer_index );
;;;479                #endif
;;;480                    ret = TRUE;
;;;481                    break;
;;;482                }
;;;483                osDelay(20);
;;;484            }
;;;485        }
;;;486    #elif ( CFG_COM_BUS_TYPE&COM_BUS_UART_MASK )
;;;487    #if 0 //UART_PACKET_SIZE_CHECK_EN == YES
;;;488        UINT16  expection_data_lens = 0;
;;;489        UINT8   wait_expection_part_count = 0;
;;;490    #endif   
;;;491    
;;;492        //Uart Busy check
;;;493        //go to Uart interface, check bus is busy or idle
;;;494        if (stCom_type.com_type == DEV_UART)
000004  4d24              LDR      r5,|L15.152|
000006  f04f0800          MOV      r8,#0                 ;450
00000a  7828              LDRB     r0,[r5,#0]  ; stCom_type
00000c  bb80              CBNZ     r0,|L15.112|
;;;495        {
;;;496    #if 1
;;;497            static s16 expected_length = 0;
;;;498            static s16 last_expected_length = 0;
;;;499            static u32 last_parset_cnt = 0;
;;;500            static u32 last_tick = 0;
;;;501            if (last_parset_cnt != stCom_type.parser_cnt)
00000e  4c23              LDR      r4,|L15.156|
000010  69a8              LDR      r0,[r5,#0x18]  ; stCom_type
000012  2600              MOVS     r6,#0
000014  6a21              LDR      r1,[r4,#0x20]  ; last_parset_cnt
000016  4288              CMP      r0,r1
000018  d001              BEQ      |L15.30|
;;;502            {
;;;503                last_parset_cnt = 0;
;;;504                last_expected_length = 0;
00001a  6226              STR      r6,[r4,#0x20]  ; last_parset_cnt
00001c  8066              STRH     r6,[r4,#2]
                  |L15.30|
;;;505            }
;;;506            kdp_comm_receive_data();
00001e  f7fffffe          BL       kdp_comm_receive_data
;;;507    
;;;508            u32 tick = osKernelGetTickCount();
000022  f7fffffe          BL       osKernelGetTickCount
000026  4607              MOV      r7,r0
;;;509            if (stCom_type.parser_cnt > 0)
000028  69a8              LDR      r0,[r5,#0x18]  ; stCom_type
00002a  b300              CBZ      r0,|L15.110|
;;;510            {
;;;511                if ((last_parset_cnt != stCom_type.parser_cnt) || (last_expected_length != expected_length))
00002c  6a21              LDR      r1,[r4,#0x20]  ; last_parset_cnt
00002e  4288              CMP      r0,r1
000030  d105              BNE      |L15.62|
000032  f9b41002          LDRSH    r1,[r4,#2]  ; last_expected_length
000036  f9b42000          LDRSH    r2,[r4,#0]  ; expected_length
00003a  4291              CMP      r1,r2
00003c  d019              BEQ      |L15.114|
                  |L15.62|
;;;512                {
;;;513                    if (stCom_type.parser_cnt >= MSG_ALL_SIZE)
00003e  2806              CMP      r0,#6
000040  d312              BCC      |L15.104|
;;;514                    {
;;;515                        if (0 == expected_length)
000042  8820              LDRH     r0,[r4,#0]  ; expected_length
000044  b920              CBNZ     r0,|L15.80|
;;;516                        {
;;;517                            expected_length = kneron_lwcom_packet_size(&stCom_type, 0);
000046  2100              MOVS     r1,#0
000048  4813              LDR      r0,|L15.152|
00004a  f7fffffe          BL       kneron_lwcom_packet_size
00004e  8020              STRH     r0,[r4,#0]
                  |L15.80|
;;;518                        }
;;;519    
;;;520                        if (expected_length > 0)
000050  f9b40000          LDRSH    r0,[r4,#0]  ; expected_length
000054  2800              CMP      r0,#0
000056  dd06              BLE      |L15.102|
;;;521                        {
;;;522                            if (stCom_type.parser_cnt >= expected_length)
000058  69a9              LDR      r1,[r5,#0x18]  ; stCom_type
00005a  4281              CMP      r1,r0
00005c  d304              BCC      |L15.104|
;;;523                            {
;;;524                                expected_length = 0;
00005e  8026              STRH     r6,[r4,#0]
;;;525                                ret = TRUE;
000060  f04f0801          MOV      r8,#1
000064  e000              B        |L15.104|
                  |L15.102|
;;;526                            }
;;;527                        }
;;;528                        else
;;;529                        {
;;;530                            expected_length = 0;
000066  8026              STRH     r6,[r4,#0]
                  |L15.104|
;;;531                        }
;;;532                    }
;;;533                    last_tick = tick;
;;;534                    last_expected_length = expected_length;
000068  6267              STR      r7,[r4,#0x24]  ; last_tick
00006a  8820              LDRH     r0,[r4,#0]  ; expected_length
00006c  8060              STRH     r0,[r4,#2]
                  |L15.110|
00006e  e00e              B        |L15.142|
                  |L15.112|
000070  e00f              B        |L15.146|
                  |L15.114|
;;;535                }
;;;536                else
;;;537                {
;;;538                    if((tick - last_tick) > 20)
000072  6a60              LDR      r0,[r4,#0x24]  ; last_tick
000074  1a38              SUBS     r0,r7,r0
000076  2814              CMP      r0,#0x14
000078  d909              BLS      |L15.142|
;;;539                    {
;;;540                        expected_length = kneron_lwcom_packet_size(&stCom_type, 1);
00007a  2101              MOVS     r1,#1
00007c  4806              LDR      r0,|L15.152|
00007e  f7fffffe          BL       kneron_lwcom_packet_size
000082  8020              STRH     r0,[r4,#0]
;;;541                        if (expected_length <= 0)
000084  2800              CMP      r0,#0
000086  dc02              BGT      |L15.142|
;;;542                        {
;;;543                            stCom_type.parser_cnt = 0;
000088  61ae              STR      r6,[r5,#0x18]  ; stCom_type
;;;544                            expected_length = 0;
00008a  8026              STRH     r6,[r4,#0]
;;;545                            last_expected_length = 0;
00008c  8066              STRH     r6,[r4,#2]
                  |L15.142|
;;;546                        }
;;;547                    }
;;;548                }
;;;549            }
;;;550            last_parset_cnt = stCom_type.parser_cnt;
00008e  69a8              LDR      r0,[r5,#0x18]  ; stCom_type
000090  6220              STR      r0,[r4,#0x20]  ; last_parset_cnt
                  |L15.146|
;;;551            
;;;552    #else
;;;553            //protect and receive all data
;;;554            u32 last_rx_index = *stCom_type.rx_buffer_index;
;;;555            while( ncount != *stCom_type.rx_buffer_index ){
;;;556                ncount = *stCom_type.rx_buffer_index;
;;;557                osDelay(20);
;;;558                *stCom_type.rx_buffer_index = last_rx_index + kdp_uart_GetRxCount( stCom_type.dev_id );
;;;559    #if UART_PACKET_SIZE_CHECK_EN == YES
;;;560                if(  *stCom_type.rx_buffer_index >= (MSG_HEAD_BIG_SIZE+MSG_LEN_SIZE) && expection_data_lens == 0 )
;;;561                {
;;;562                    s16 check_size = kneron_lwcom_packet_size( &stCom_type, 0 );
;;;563    
;;;564                    if( check_size > 0 )
;;;565                    {
;;;566                        expection_data_lens = check_size;
;;;567                    }
;;;568                    dbg_msg_com("expec : %d, ncount: %d, %d", expection_data_lens, *stCom_type.rx_buffer_index, ncount ); 
;;;569                } 
;;;570                if( ncount == *stCom_type.rx_buffer_index ) wait_expection_part_count++; 
;;;571                else wait_expection_part_count = 0;
;;;572    #endif
;;;573    
;;;574                if( get_mass_data_status() == NO )
;;;575                {
;;;576                    if(*stCom_type.rx_buffer_index > MAX_BUF_SIZE)
;;;577                        *stCom_type.rx_buffer_index = 0;
;;;578                }
;;;579                else
;;;580                {
;;;581                    if(*stCom_type.rx_buffer_index > MAX_BUF_SIZE_OTA_MAX)
;;;582                        *stCom_type.rx_buffer_index = 0;
;;;583                }
;;;584            }
;;;585            if( *stCom_type.rx_buffer_index > 0 ){
;;;586                #if( COM_DEBUG_LOG_EN == YES)
;;;587                dbg_msg("[com_bus] uart rx receive done ");
;;;588                #endif
;;;589                ret = TRUE; //data at least 1 Byte
;;;590            }
;;;591    #endif
;;;592        }
;;;593    
;;;594    #elif ( CFG_COM_BUS_TYPE&COM_BUS_USB_MASK )
;;;595        //USB Busy check
;;;596        //go to USB interface, check bus is busy or idle
;;;597        if ( stCom_type.com_type == DEV_USB )
;;;598        {
;;;599    
;;;600        }
;;;601    #elif ( CFG_COM_BUS_TYPE&COM_BUS_I2C_MASK )
;;;602        //I2C Busy check
;;;603        //go to I2C interface, check bus is busy or idle
;;;604        if (stCom_type.com_type == DEV_I2C )
;;;605        {
;;;606    
;;;607        }
;;;608    #endif
;;;609    
;;;610        return ret; //no data receive
000092  4640              MOV      r0,r8
;;;611    }
000094  e8bd81f0          POP      {r4-r8,pc}
;;;612    
                          ENDP

                  |L15.152|
                          DCD      ||.bss||
                  |L15.156|
                          DCD      ||.data||

                          AREA ||i.kneron_com_parser||, CODE, READONLY, ALIGN=1

                  kneron_com_parser PROC
;;;46     
;;;47     __WEAK void kneron_com_parser( struct st_com_type *st_com ){}
000000  4770              BX       lr
;;;48     
                          ENDP


                          AREA ||i.kneron_lwcom_packet_analyze||, CODE, READONLY, ALIGN=2

                  kneron_lwcom_packet_analyze PROC
;;;632    
;;;633    UINT16 kneron_lwcom_packet_analyze( struct st_com_type *st_com )  //uart analyze  --lmm-edit
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;634    {
000004  4604              MOV      r4,r0
;;;635        uint32_t  i = 0;
000006  2000              MOVS     r0,#0
;;;636        uint8_t   *ptr = st_com->parser_buffer;
;;;637        uint32_t  ptr_indedx = st_com->parser_cnt;//last id
000008  69a6              LDR      r6,[r4,#0x18]
00000a  6967              LDR      r7,[r4,#0x14]         ;636
;;;638        uint32_t  nhead_index = 0xFFFFFFFF;
;;;639        uint32_t  ncheck_sum = 0;
;;;640        BOOL    bHeadChkFlag = FALSE;
;;;641        
;;;642    #ifdef DEV_PKT_LOG_DETAIL
;;;643        dbg_msg_nocrlf("%d -- Rx: ", osKernelGetTickCount());
;;;644        for(u8 i=0; i< ptr_indedx; i++) {
;;;645            dbg_msg_nocrlf("%02x ", ptr[i]);
;;;646        }
;;;647        dbg_msg_nocrlf("\r\n");
;;;648    #endif
;;;649    
;;;650        if( ( ptr_indedx < 4 ) || ( ptr == NULL ) ) //may be edit
00000c  2e04              CMP      r6,#4
00000e  d302              BCC      |L17.22|
000010  b10f              CBZ      r7,|L17.22|
;;;651        {
;;;652            st_com->parser_end = ptr_indedx;
;;;653            return COM_BUS_PACKAGE_SIZE_ERROR;
;;;654        }
;;;655    
;;;656        for( i = 0; i < ( ptr_indedx-2 ); i++ )
000012  1eb1              SUBS     r1,r6,#2
000014  e00c              B        |L17.48|
                  |L17.22|
000016  61e6              STR      r6,[r4,#0x1c]         ;652
000018  f64e60e2          MOV      r0,#0xeee2            ;653
                  |L17.28|
;;;657        {
;;;658            if(  (*(ptr + i + 0 ) == COM_BUS_HEAD_RX_1) && (*(ptr +i +  1 ) == COM_BUS_HEAD_RX_2 )  )
;;;659            {
;;;660                bHeadChkFlag = TRUE;
;;;661    
;;;662                nhead_index = i;
;;;663                *(ptr + i + 0 ) = 0;
;;;664                *(ptr + i +  1 ) = 0;
;;;665                break;
;;;666            }
;;;667        }
;;;668    
;;;669        if ( !bHeadChkFlag )
;;;670        {
;;;671            st_com->parser_end = ptr_indedx;
;;;672            return COM_BUS_HEAD_CHECK_ERROR;
;;;673        }
;;;674    
;;;675        if ( g_nEncryptionMode == NO_ENCRYPTION )
;;;676        {
;;;677            st_com->cmd         = (*( ptr+nhead_index+MSG_HEAD_SIZE ));//1 byte cmd
;;;678            st_com->data_len    = StreamsToBigEndU16(ptr+nhead_index+MSG_HEAD_BIG_SIZE);//2 byte size
;;;679            st_com->data_start_index = nhead_index+MSG_HEAD_BIG_SIZE+MSG_LEN_SIZE;
;;;680            st_com->checksum    = (*( ptr+nhead_index+5+ st_com->data_len ));
;;;681    
;;;682            //Check data length
;;;683            if ( ptr_indedx-MSG_HEAD_BIG_SIZE-MSG_LEN_SIZE-MSG_CHK_SIZE < st_com->data_len )
;;;684            {
;;;685                st_com->parser_end = ptr_indedx;
;;;686                return COM_BUS_DATA_SIZE_ERROR;
;;;687            }
;;;688    
;;;689            ncheck_sum = checksum_cal(ptr+nhead_index+MSG_HEAD_SIZE, 0, st_com->data_len+MSG_CMD_BIG_SIZE);
;;;690            dbg_msg_com("cmd:0x%02x,size:0x%04x,data_idx:0x%02x,checksum:0x%02x,self-checksum:0x%02x",st_com->cmd,st_com->data_len,st_com->data_start_index,st_com->checksum,ncheck_sum);
;;;691    
;;;692            if( st_com->checksum != ncheck_sum  )
;;;693            {
;;;694                g_nCheckSum_Error++;
;;;695                if(g_nCheckSum_Error >= 5)
;;;696                {
;;;697                    g_bKID_SetKey = FALSE;
;;;698                }
;;;699                dbg_msg_console("checksum error");
;;;700                st_com->parser_end = ptr_indedx;
;;;701                return COM_BUS_CHECK_SUM_ERROR;
;;;702            }
;;;703            else
;;;704            {
;;;705                g_nCheckSum_Error = 0;
;;;706            }
;;;707    
;;;708            if ((KID_INIT_ENCRYPTION == st_com->cmd)
;;;709                || (KID_SET_RELEASE_ENC_KEY == st_com->cmd)
;;;710                || (KID_SET_DEBUG_ENC_KEY == st_com->cmd))
;;;711            {
;;;712                g_bKID_SetKey = TRUE;
;;;713            }
;;;714    
;;;715            st_com->parser_end = nhead_index + MSG_ALL_SIZE + st_com->data_len;
;;;716    
;;;717        }
;;;718    #if ( ENCRYPTION_MODE != NO_ENCRYPTION )
;;;719        else
;;;720        {
;;;721    
;;;722            if ( ( *(ptr+nhead_index+2) == KID_INIT_ENCRYPTION ) ||
;;;723                ( *(ptr+nhead_index+2) == KID_SET_RELEASE_ENC_KEY ) ||
;;;724                ( *(ptr+nhead_index+2) == KID_SET_DEBUG_ENC_KEY ) ||
;;;725                get_ota_data_status() > NO )//wait add ota cmd.
;;;726            {
;;;727                st_com->cmd         = (*( ptr+nhead_index+MSG_HEAD_SIZE ));//1 byte cmd
;;;728                st_com->data_len    = StreamsToBigEndU16(ptr+nhead_index+MSG_HEAD_BIG_SIZE);//2 byte size
;;;729                st_com->data_start_index = nhead_index + MSG_HEAD_BIG_SIZE+MSG_LEN_SIZE;
;;;730                st_com->checksum    = (*( ptr+nhead_index+5+ st_com->data_len ));
;;;731    
;;;732                //Check data length
;;;733                if ( ptr_indedx-MSG_HEAD_BIG_SIZE-MSG_LEN_SIZE-MSG_CHK_SIZE < st_com->data_len )
;;;734                {
;;;735                    st_com->parser_end = ptr_indedx;
;;;736                    return COM_BUS_DATA_SIZE_ERROR;
;;;737                }
;;;738    
;;;739                ncheck_sum = checksum_cal(ptr+nhead_index+MSG_HEAD_SIZE, 0, st_com->data_len+MSG_CMD_BIG_SIZE);
;;;740                dbg_msg_com("cmd:0x%02x,size:0x%04x,data:0x%02x,checksum:0x%02x,self-checksum:0x%02x",st_com->cmd,st_com->data_len,st_com->data_start_index,st_com->checksum,ncheck_sum);
;;;741    
;;;742                if( st_com->checksum != ncheck_sum  )
;;;743                {
;;;744                    g_nCheckSum_Error++;
;;;745                    if(g_nCheckSum_Error >= 5)
;;;746                    {
;;;747                        g_bKID_SetKey = FALSE;
;;;748                    }
;;;749                    dbg_msg_console("checksum error");
;;;750                    st_com->parser_end = ptr_indedx;
;;;751                    return COM_BUS_CHECK_SUM_ERROR;
;;;752                }
;;;753                g_nCheckSum_Error = 0;
;;;754                g_bKID_SetKey = TRUE;
;;;755                
;;;756                st_com->parser_end = nhead_index + MSG_ALL_SIZE + st_com->data_len;
;;;757            }
;;;758    #ifdef KID_SOFT_RESET
;;;759            else if ( *(ptr+nhead_index+2) == KID_SOFT_RESET )
;;;760            {
;;;761                st_com->cmd = KID_SOFT_RESET;   //1 byte cmd
;;;762                st_com->data_len    = StreamsToBigEndU16(ptr+nhead_index+3);//2 byte size
;;;763                st_com->data_start_index = nhead_index + sizeof(st_com->head) + sizeof( st_com->cmd ) + sizeof(st_com->data_len);
;;;764                st_com->checksum    = (*( ptr+nhead_index+5+ st_com->data_len ));
;;;765                ncheck_sum = checksum_cal(ptr+nhead_index+2, 0, st_com->data_len + 3);
;;;766                if( st_com->checksum != ncheck_sum  )
;;;767                {
;;;768                    g_nCheckSum_Error++;
;;;769                    if(g_nCheckSum_Error >= 5)
;;;770                    {
;;;771                        g_bKID_SetKey = FALSE;
;;;772                    }
;;;773                    dbg_msg_console("checksum error");
;;;774                    st_com->parser_end = ptr_indedx;
;;;775                    return COM_BUS_HEAD_CHECK_ERROR;
;;;776                }
;;;777                st_com->parser_end = nhead_index + MSG_ALL_SIZE + st_com->data_len;
;;;778            }
;;;779    #endif
;;;780            else
;;;781            {
;;;782                //dbg_msg_console("dec analisize coming in ");
;;;783                Msg_AesEncryptData data;
;;;784                data.body_size = StreamsToBigEndU16(ptr+nhead_index+MSG_AES_HEAD_SIZE);
;;;785                
;;;786                if( data.body_size < 3 )
;;;787                {
;;;788                    dbg_msg_com("Data size error");
;;;789                    st_com->parser_end = ptr_indedx;
;;;790                    return COM_BUS_DATA_SIZE_ERROR;
;;;791                }
;;;792                
;;;793                //Check data length
;;;794                if ( ptr_indedx-MSG_AES_HEAD_TAIL_SIZE < data.body_size )
;;;795                {
;;;796                    st_com->parser_end = ptr_indedx;
;;;797                    return COM_BUS_DATA_SIZE_ERROR;
;;;798                }
;;;799    
;;;800                data.checknum =  *(ptr+nhead_index+data.body_size+MSG_AES_HEAD_BIG_SIZE);
;;;801    
;;;802                st_com->checksum   = data.checknum;
;;;803        //        dbg_msg_console("body data:");
;;;804    
;;;805                ncheck_sum = checksum_cal(ptr+nhead_index+MSG_AES_HEAD_BIG_SIZE, 0, data.body_size);
;;;806    
;;;807                //dbg_msg_console("data.body_size:0x%04x, data.checknum:0x%02x, self-checksum:0x%02x",data.body_size, data.checknum, ncheck_sum);
;;;808                if( st_com->checksum != ncheck_sum  )
;;;809                {
;;;810                    g_nCheckSum_Error++;
;;;811                    if(g_nCheckSum_Error >= 5)
;;;812                    {
;;;813                        g_bKID_SetKey = FALSE;
;;;814                    }
;;;815                    dbg_msg_console("checksum error");
;;;816                    st_com->parser_end = ptr_indedx;
;;;817                    return COM_BUS_CHECK_SUM_ERROR;
;;;818                }
;;;819                g_nCheckSum_Error = 0;
;;;820    
;;;821        //        kdp_printf("[-----Cipher text-----]\n");
;;;822        //        print_hex_long_data(ptr, 0, MSG_HEAD_SIZE+MSG_LEN_SIZE+data.body_size+MSG_CHK_SIZE, 48);
;;;823    
;;;824                memset(msg_dec, 0, data.body_size);
;;;825    
;;;826        //        uint32_t StartTime = osKernelGetTickCount();
;;;827    
;;;828                // if ( g_nEncryptionMode != NO_ENCRYPTION )
;;;829                {
;;;830                    PkgDecrypt(ptr+nhead_index+MSG_AES_HEAD_BIG_SIZE, data.body_size, debug_key, KEY_SIZE, msg_dec);
;;;831                }
;;;832        //        uint32_t StopTime = osKernelGetTickCount() - StartTime;
;;;833        //        dbg_msg_console("aesDecrypt %d bytes cost time:%dms", data.body_size, StopTime);
;;;834    
;;;835                st_com->cmd         = *msg_dec;//1 byte cmd
;;;836                st_com->data_len    = StreamsToBigEndU16(msg_dec+MSG_CMD_SIZE);//2 byte size
;;;837                st_com->data_start_index = MSG_CMD_BIG_SIZE;
;;;838    
;;;839                memset(ptr, 0, data.body_size+MSG_AES_HEAD_TAIL_SIZE);
;;;840                memcpy(ptr, msg_dec, MSG_CMD_BIG_SIZE+st_com->data_len);
;;;841    
;;;842                st_com->parser_end = nhead_index+data.body_size + MSG_AES_HEAD_TAIL_SIZE;
;;;843    
;;;844    #ifdef DEV_PKT_LOG_DETAIL
;;;845            kdp_printf("[-----Plain Text-----]\n");
;;;846            print_hex_long_data(ptr, 0, MSG_CMD_SIZE+MSG_LEN_SIZE+st_com->data_len, 48);
;;;847    #endif
;;;848    
;;;849                dbg_msg_com("st_com->cmd:0x%02x,st_com->data_len:0x%04x",st_com->cmd,st_com->data_len);
;;;850            }
;;;851        }
;;;852    #endif
;;;853        return COM_BUS_PACKET_OK;   //exist good data
;;;854    }
00001c  e8bd8ff8          POP      {r3-r11,pc}
                  |L17.32|
000020  5c3a              LDRB     r2,[r7,r0]            ;658
000022  2aef              CMP      r2,#0xef              ;658
000024  d103              BNE      |L17.46|
000026  183a              ADDS     r2,r7,r0              ;658
000028  7852              LDRB     r2,[r2,#1]            ;658
00002a  2aaa              CMP      r2,#0xaa              ;658
00002c  d006              BEQ      |L17.60|
                  |L17.46|
00002e  1c40              ADDS     r0,r0,#1              ;658
                  |L17.48|
000030  4288              CMP      r0,r1                 ;656
000032  d3f5              BCC      |L17.32|
                  |L17.52|
000034  61e6              STR      r6,[r4,#0x1c]         ;671
000036  f64e60e0          MOV      r0,#0xeee0            ;672
00003a  e7ef              B        |L17.28|
                  |L17.60|
00003c  4680              MOV      r8,r0                 ;662
00003e  f04f0900          MOV      r9,#0                 ;663
000042  f8079000          STRB     r9,[r7,r0]            ;663
000046  eb070508          ADD      r5,r7,r8              ;664
00004a  487b              LDR      r0,|L17.568|
00004c  f8859001          STRB     r9,[r5,#1]            ;664
000050  f8dfa1e8          LDR      r10,|L17.572|
000054  7800              LDRB     r0,[r0,#0]            ;675  ; g_nEncryptionMode
000056  f04f0b01          MOV      r11,#1                ;660
00005a  2800              CMP      r0,#0                 ;675
00005c  78a8              LDRB     r0,[r5,#2]            ;722
00005e  d027              BEQ      |L17.176|
000060  2850              CMP      r0,#0x50              ;722
000062  d006              BEQ      |L17.114|
000064  2852              CMP      r0,#0x52              ;723
000066  d004              BEQ      |L17.114|
000068  2853              CMP      r0,#0x53              ;724
00006a  d002              BEQ      |L17.114|
00006c  f7fffffe          BL       get_ota_data_status
000070  b3f0              CBZ      r0,|L17.240|
                  |L17.114|
000072  78a8              LDRB     r0,[r5,#2]            ;727
000074  f8840022          STRB     r0,[r4,#0x22]         ;727
000078  1ce8              ADDS     r0,r5,#3              ;728
00007a  3425              ADDS     r4,r4,#0x25           ;728
00007c  f7fffffe          BL       StreamsToBigEndU16
000080  f8240b02          STRH     r0,[r4],#2            ;728
000084  f1080105          ADD      r1,r8,#5              ;729
000088  19c2              ADDS     r2,r0,r7              ;730
00008a  f8241b02          STRH     r1,[r4],#2            ;729
00008e  5c51              LDRB     r1,[r2,r1]            ;730
000090  f8441929          STR      r1,[r4],#-0x29        ;730
000094  1fb1              SUBS     r1,r6,#6              ;733
000096  4288              CMP      r0,r1                 ;733
000098  d859              BHI      |L17.334|
00009a  1cc0              ADDS     r0,r0,#3              ;733
00009c  b282              UXTH     r2,r0                 ;739
00009e  1ca8              ADDS     r0,r5,#2              ;739
0000a0  2100              MOVS     r1,#0                 ;739
0000a2  f7fffffe          BL       checksum_cal
0000a6  f8d41029          LDR      r1,[r4,#0x29]         ;742
0000aa  4281              CMP      r1,r0                 ;742
0000ac  d11d              BNE      |L17.234|
0000ae  e03f              B        |L17.304|
                  |L17.176|
0000b0  f8840022          STRB     r0,[r4,#0x22]         ;677
0000b4  1ce8              ADDS     r0,r5,#3              ;678
0000b6  3425              ADDS     r4,r4,#0x25           ;678
0000b8  f7fffffe          BL       StreamsToBigEndU16
0000bc  f8240b02          STRH     r0,[r4],#2            ;678
0000c0  f1080105          ADD      r1,r8,#5              ;679
0000c4  19c2              ADDS     r2,r0,r7              ;680
0000c6  f8241b02          STRH     r1,[r4],#2            ;679
0000ca  5c51              LDRB     r1,[r2,r1]            ;680
0000cc  f8441929          STR      r1,[r4],#-0x29        ;680
0000d0  1fb1              SUBS     r1,r6,#6              ;683
0000d2  4288              CMP      r0,r1                 ;683
0000d4  d83b              BHI      |L17.334|
0000d6  1cc0              ADDS     r0,r0,#3              ;683
0000d8  b282              UXTH     r2,r0                 ;689
0000da  1ca8              ADDS     r0,r5,#2              ;689
0000dc  2100              MOVS     r1,#0                 ;689
0000de  f7fffffe          BL       checksum_cal
0000e2  f8d41029          LDR      r1,[r4,#0x29]         ;692
0000e6  4281              CMP      r1,r0                 ;692
0000e8  d014              BEQ      |L17.276|
                  |L17.234|
0000ea  f89a1000          LDRB     r1,[r10,#0]           ;694  ; g_nCheckSum_Error
0000ee  e000              B        |L17.242|
                  |L17.240|
0000f0  e021              B        |L17.310|
                  |L17.242|
0000f2  1c49              ADDS     r1,r1,#1              ;694
0000f4  b2c9              UXTB     r1,r1                 ;694
0000f6  f88a1000          STRB     r1,[r10,#0]           ;694
0000fa  2905              CMP      r1,#5                 ;695
0000fc  d302              BCC      |L17.260|
0000fe  4950              LDR      r1,|L17.576|
000100  f8819000          STRB     r9,[r1,#0]            ;697
                  |L17.260|
000104  a14f              ADR      r1,|L17.580|
000106  2001              MOVS     r0,#1                 ;815
000108  f7fffffe          BL       kdp_level_printf
00010c  61e6              STR      r6,[r4,#0x1c]         ;816
00010e  f64e60e3          MOV      r0,#0xeee3            ;817
000112  e783              B        |L17.28|
                  |L17.276|
000114  f88a9000          STRB     r9,[r10,#0]           ;705
000118  f8940022          LDRB     r0,[r4,#0x22]         ;708
00011c  2850              CMP      r0,#0x50              ;708
00011e  d003              BEQ      |L17.296|
000120  2852              CMP      r0,#0x52              ;709
000122  d001              BEQ      |L17.296|
000124  2853              CMP      r0,#0x53              ;710
000126  d13f              BNE      |L17.424|
                  |L17.296|
000128  4945              LDR      r1,|L17.576|
00012a  f881b000          STRB     r11,[r1,#0]           ;712
00012e  e03b              B        |L17.424|
                  |L17.304|
000130  f88a9000          STRB     r9,[r10,#0]           ;753
000134  e7f8              B        |L17.296|
                  |L17.310|
000136  78a8              LDRB     r0,[r5,#2]            ;759
000138  28ca              CMP      r0,#0xca              ;759
00013a  d00c              BEQ      |L17.342|
00013c  1ca8              ADDS     r0,r5,#2              ;784
00013e  f7fffffe          BL       StreamsToBigEndU16
000142  4683              MOV      r11,r0                ;784
000144  2803              CMP      r0,#3                 ;786
000146  d302              BCC      |L17.334|
000148  1f71              SUBS     r1,r6,#5              ;794
00014a  458b              CMP      r11,r1                ;794
00014c  d933              BLS      |L17.438|
                  |L17.334|
00014e  61e6              STR      r6,[r4,#0x1c]         ;796
000150  f64e60e4          MOV      r0,#0xeee4            ;797
000154  e762              B        |L17.28|
                  |L17.342|
000156  20ca              MOVS     r0,#0xca              ;761
000158  f8840022          STRB     r0,[r4,#0x22]         ;761
00015c  1ce8              ADDS     r0,r5,#3              ;762
00015e  3425              ADDS     r4,r4,#0x25           ;762
000160  f7fffffe          BL       StreamsToBigEndU16
000164  4601              MOV      r1,r0                 ;762
000166  8020              STRH     r0,[r4,#0]            ;762
000168  f1080005          ADD      r0,r8,#5              ;763
00016c  19ca              ADDS     r2,r1,r7              ;764
00016e  8060              STRH     r0,[r4,#2]            ;763
000170  5c10              LDRB     r0,[r2,r0]            ;764
000172  1cc9              ADDS     r1,r1,#3              ;764
000174  6060              STR      r0,[r4,#4]            ;764
000176  b28a              UXTH     r2,r1                 ;765
000178  1ca8              ADDS     r0,r5,#2              ;765
00017a  2100              MOVS     r1,#0                 ;765
00017c  f7fffffe          BL       checksum_cal
000180  6861              LDR      r1,[r4,#4]            ;766
000182  3c25              SUBS     r4,r4,#0x25           ;766
000184  4281              CMP      r1,r0                 ;766
000186  d00f              BEQ      |L17.424|
000188  f89a1000          LDRB     r1,[r10,#0]           ;768  ; g_nCheckSum_Error
00018c  1c49              ADDS     r1,r1,#1              ;768
00018e  b2c9              UXTB     r1,r1                 ;768
000190  f88a1000          STRB     r1,[r10,#0]           ;768
000194  2905              CMP      r1,#5                 ;769
000196  d302              BCC      |L17.414|
000198  4929              LDR      r1,|L17.576|
00019a  f8819000          STRB     r9,[r1,#0]            ;771
                  |L17.414|
00019e  a129              ADR      r1,|L17.580|
0001a0  2001              MOVS     r0,#1                 ;773
0001a2  f7fffffe          BL       kdp_level_printf
0001a6  e745              B        |L17.52|
                  |L17.424|
0001a8  f8b41025          LDRH     r1,[r4,#0x25]         ;777
0001ac  f1080006          ADD      r0,r8,#6              ;777
0001b0  4408              ADD      r0,r0,r1              ;777
0001b2  61e0              STR      r0,[r4,#0x1c]         ;777
0001b4  e03e              B        |L17.564|
                  |L17.438|
0001b6  eb0b0107          ADD      r1,r11,r7             ;800
0001ba  f1080004          ADD      r0,r8,#4              ;800
0001be  465a              MOV      r2,r11                ;805
0001c0  5c08              LDRB     r0,[r1,r0]            ;800
0001c2  f8c40029          STR      r0,[r4,#0x29]         ;802
0001c6  1d28              ADDS     r0,r5,#4              ;805
0001c8  2100              MOVS     r1,#0                 ;805
0001ca  f7fffffe          BL       checksum_cal
0001ce  f8d41029          LDR      r1,[r4,#0x29]         ;808
0001d2  4281              CMP      r1,r0                 ;808
0001d4  d189              BNE      |L17.234|
0001d6  f88a9000          STRB     r9,[r10,#0]           ;819
0001da  f8df907c          LDR      r9,|L17.600|
0001de  465e              MOV      r6,r11                ;819
0001e0  4631              MOV      r1,r6                 ;819
0001e2  f8d9001c          LDR      r0,[r9,#0x1c]         ;824  ; msg_dec
0001e6  f7fffffe          BL       __aeabi_memclr
0001ea  f8d9001c          LDR      r0,[r9,#0x1c]         ;830  ; msg_dec
0001ee  9000              STR      r0,[sp,#0]            ;830
0001f0  1d28              ADDS     r0,r5,#4              ;830
0001f2  2310              MOVS     r3,#0x10              ;830
0001f4  4a19              LDR      r2,|L17.604|
0001f6  4631              MOV      r1,r6                 ;830
0001f8  f7fffffe          BL       PkgDecrypt
0001fc  f8d9001c          LDR      r0,[r9,#0x1c]         ;835  ; msg_dec
000200  f8101b01          LDRB     r1,[r0],#1            ;835
000204  f8841022          STRB     r1,[r4,#0x22]         ;835
000208  341d              ADDS     r4,r4,#0x1d           ;835
00020a  f7fffffe          BL       StreamsToBigEndU16
00020e  8120              STRH     r0,[r4,#8]            ;836
000210  2003              MOVS     r0,#3                 ;837
000212  8160              STRH     r0,[r4,#0xa]          ;837
000214  1d71              ADDS     r1,r6,#5              ;839
000216  4638              MOV      r0,r7                 ;839
000218  f7fffffe          BL       __aeabi_memclr
00021c  8922              LDRH     r2,[r4,#8]            ;840
00021e  4638              MOV      r0,r7                 ;840
000220  1cd2              ADDS     r2,r2,#3              ;840
000222  f8d9101c          LDR      r1,[r9,#0x1c]         ;840  ; msg_dec
000226  f7fffffe          BL       __aeabi_memcpy
00022a  f1080005          ADD      r0,r8,#5              ;842
00022e  4430              ADD      r0,r0,r6              ;842
000230  f8440c01          STR      r0,[r4,#-1]           ;842
                  |L17.564|
000234  2066              MOVS     r0,#0x66              ;853
000236  e6f1              B        |L17.28|
;;;855    
                          ENDP

                  |L17.568|
                          DCD      g_nEncryptionMode
                  |L17.572|
                          DCD      g_nCheckSum_Error
                  |L17.576|
                          DCD      g_bKID_SetKey
                  |L17.580|
000244  63686563          DCB      "checksum error\r\n",0
000248  6b73756d
00024c  20657272
000250  6f720d0a
000254  00      
000255  00                DCB      0
000256  00                DCB      0
000257  00                DCB      0
                  |L17.600|
                          DCD      ||.data||
                  |L17.604|
                          DCD      debug_key

                          AREA ||i.kneron_lwcom_packet_size||, CODE, READONLY, ALIGN=2

                  kneron_lwcom_packet_size PROC
;;;341    #define PACKET_RECEIVE_TIMEOUT_CNT_NUM 3
;;;342    s16 kneron_lwcom_packet_size( struct st_com_type *st_com, u16 header_index)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;343    {    
000004  468a              MOV      r10,r1
;;;344        uint32_t  i = 0;
000006  2100              MOVS     r1,#0
;;;345        uint8_t   *ptr = st_com->parser_buffer;
000008  6942              LDR      r2,[r0,#0x14]
;;;346        uint32_t  ptr_indedx = st_com->parser_cnt;//last id
00000a  6983              LDR      r3,[r0,#0x18]
;;;347        uint32_t  nhead_index = 0xFFFFFFFF;
00000c  1e48              SUBS     r0,r1,#1
;;;348        BOOL    bHeadChkFlag = FALSE;
;;;349        BOOL    bAllZeroByte = TRUE;
00000e  2601              MOVS     r6,#1
000010  4604              MOV      r4,r0                 ;347
000012  460f              MOV      r7,r1                 ;348
;;;350        s16     rx_count_size;
;;;351    
;;;352        if ( ptr_indedx < MSG_HEAD_SIZE ) return -3;
000014  2b02              CMP      r3,#2
000016  d202              BCS      |L18.30|
000018  1e80              SUBS     r0,r0,#2
                  |L18.26|
;;;353    
;;;354        u16 header_cnt = 0;
;;;355        for( i = 0; i < ( ptr_indedx-2 ); i++ )
;;;356        {
;;;357            if( *(ptr+i) != 0x00 )
;;;358            {
;;;359                bAllZeroByte = FALSE;
;;;360            }
;;;361            if(	 (*(ptr + i + 0 ) == COM_BUS_HEAD_RX_1) && (*(ptr +i +  1 ) == COM_BUS_HEAD_RX_2 )  )
;;;362            {
;;;363                header_cnt++;
;;;364                if(header_cnt > header_index)
;;;365                {
;;;366                    bHeadChkFlag = TRUE;
;;;367                    nhead_index = i;
;;;368                    break;
;;;369                }
;;;370                else
;;;371                {
;;;372                    ptr[i] = 0;
;;;373                }
;;;374            }
;;;375        }    
;;;376    
;;;377        if ( bAllZeroByte ) return -2; 
;;;378        if ( !bHeadChkFlag ) return -1;
;;;379        if( nhead_index + (MSG_HEAD_BIG_SIZE+MSG_LEN_SIZE) > ptr_indedx ) return 0;
;;;380    
;;;381        if (g_nEncryptionMode == NO_ENCRYPTION)
;;;382        {
;;;383            rx_count_size = StreamsToBigEndU16(ptr + nhead_index + MSG_HEAD_BIG_SIZE);
;;;384            rx_count_size += (MSG_HEAD_BIG_SIZE + MSG_LEN_SIZE + MSG_CHK_SIZE);
;;;385        }
;;;386        else
;;;387        {
;;;388            if ((*(ptr + nhead_index + 2) == KID_INIT_ENCRYPTION) ||
;;;389                (*(ptr + nhead_index + 2) == KID_SET_RELEASE_ENC_KEY) ||
;;;390                (*(ptr + nhead_index + 2) == KID_SET_DEBUG_ENC_KEY) ||
;;;391                get_ota_data_status() > NO) //wait add ota cmd.
;;;392    
;;;393            {
;;;394                rx_count_size = StreamsToBigEndU16(ptr + nhead_index + MSG_HEAD_BIG_SIZE);
;;;395                rx_count_size += (MSG_HEAD_BIG_SIZE + MSG_LEN_SIZE + MSG_CHK_SIZE);
;;;396            }
;;;397            else
;;;398            {
;;;399                rx_count_size = StreamsToBigEndU16(ptr + nhead_index + MSG_AES_HEAD_SIZE);
;;;400                rx_count_size += MSG_AES_HEAD_TAIL_SIZE;
;;;401            }
;;;402        }
;;;403        return rx_count_size+nhead_index;
;;;404    }
00001a  e8bd87f0          POP      {r4-r10,pc}
                  |L18.30|
00001e  f04f0800          MOV      r8,#0                 ;354
000022  46c1              MOV      r9,r8                 ;354
000024  1e9d              SUBS     r5,r3,#2              ;355
000026  e01b              B        |L18.96|
                  |L18.40|
000028  f812c001          LDRB     r12,[r2,r1]           ;357
00002c  f1bc0f00          CMP      r12,#0                ;357
000030  d015              BEQ      |L18.94|
000032  2600              MOVS     r6,#0                 ;359
000034  f1bc0fef          CMP      r12,#0xef             ;361
000038  d111              BNE      |L18.94|
00003a  eb020c01          ADD      r12,r2,r1             ;361
00003e  f89cc001          LDRB     r12,[r12,#1]          ;361
000042  f1bc0faa          CMP      r12,#0xaa             ;361
000046  d10a              BNE      |L18.94|
000048  f1080801          ADD      r8,r8,#1              ;361
00004c  fa1ff888          UXTH     r8,r8                 ;363
000050  45d0              CMP      r8,r10                ;364
000052  d902              BLS      |L18.90|
000054  460c              MOV      r4,r1                 ;367
000056  b936              CBNZ     r6,|L18.102|
000058  e00a              B        |L18.112|
                  |L18.90|
00005a  f8029001          STRB     r9,[r2,r1]            ;372
                  |L18.94|
00005e  1c49              ADDS     r1,r1,#1              ;372
                  |L18.96|
000060  42a9              CMP      r1,r5                 ;355
000062  d3e1              BCC      |L18.40|
000064  b116              CBZ      r6,|L18.108|
                  |L18.102|
000066  f06f0001          MVN      r0,#1                 ;377
00006a  e7d6              B        |L18.26|
                  |L18.108|
00006c  2f00              CMP      r7,#0                 ;378
00006e  d0d4              BEQ      |L18.26|
                  |L18.112|
000070  1d60              ADDS     r0,r4,#5              ;379
000072  4298              CMP      r0,r3                 ;379
000074  d901              BLS      |L18.122|
000076  2000              MOVS     r0,#0                 ;379
000078  e7cf              B        |L18.26|
                  |L18.122|
00007a  480f              LDR      r0,|L18.184|
00007c  7800              LDRB     r0,[r0,#0]            ;381  ; g_nEncryptionMode
00007e  b178              CBZ      r0,|L18.160|
000080  1915              ADDS     r5,r2,r4              ;388
000082  78a8              LDRB     r0,[r5,#2]            ;388
000084  2850              CMP      r0,#0x50              ;388
000086  d006              BEQ      |L18.150|
000088  2852              CMP      r0,#0x52              ;389
00008a  d004              BEQ      |L18.150|
00008c  2853              CMP      r0,#0x53              ;390
00008e  d002              BEQ      |L18.150|
000090  f7fffffe          BL       get_ota_data_status
000094  b138              CBZ      r0,|L18.166|
                  |L18.150|
000096  1ce8              ADDS     r0,r5,#3              ;394
                  |L18.152|
000098  f7fffffe          BL       StreamsToBigEndU16
00009c  1d80              ADDS     r0,r0,#6              ;383
00009e  e006              B        |L18.174|
                  |L18.160|
0000a0  1910              ADDS     r0,r2,r4              ;383
0000a2  1cc0              ADDS     r0,r0,#3              ;383
0000a4  e7f8              B        |L18.152|
                  |L18.166|
0000a6  1ca8              ADDS     r0,r5,#2              ;399
0000a8  f7fffffe          BL       StreamsToBigEndU16
0000ac  1d40              ADDS     r0,r0,#5              ;399
                  |L18.174|
0000ae  b200              SXTH     r0,r0                 ;395
0000b0  4420              ADD      r0,r0,r4              ;403
0000b2  b200              SXTH     r0,r0                 ;403
0000b4  e7b1              B        |L18.26|
;;;405    #endif
                          ENDP

0000b6  0000              DCW      0x0000
                  |L18.184|
                          DCD      g_nEncryptionMode

                          AREA ||i.print_hex_long_data||, CODE, READONLY, ALIGN=2

                  print_hex_long_data PROC
;;;612    
;;;613    void print_hex_long_data(u8* ptr, u16 nIdxS, u16 nIndE, u16 nMaxPrt)
000000  b570              PUSH     {r4-r6,lr}
;;;614    {
000002  4606              MOV      r6,r0
;;;615        int i;
;;;616    
;;;617        if ( nIndE-nIdxS < nMaxPrt )
000004  1a50              SUBS     r0,r2,r1
000006  4615              MOV      r5,r2                 ;614
000008  4298              CMP      r0,r3
00000a  db01              BLT      |L19.16|
;;;618        {
;;;619            //Bypass
;;;620        }
;;;621        else
;;;622        {
;;;623            nIndE = nIdxS+nMaxPrt;
00000c  18c8              ADDS     r0,r1,r3
00000e  b285              UXTH     r5,r0
                  |L19.16|
;;;624        }
;;;625    
;;;626        for (i = nIdxS; i < nIndE; i++)
000010  460c              MOV      r4,r1
000012  e004              B        |L19.30|
                  |L19.20|
;;;627        {
;;;628            kdp_printf("0x%02X ", *( ptr+i ));
000014  5d31              LDRB     r1,[r6,r4]
000016  a005              ADR      r0,|L19.44|
000018  f7fffffe          BL       kdp_printf
00001c  1c64              ADDS     r4,r4,#1
                  |L19.30|
00001e  42ac              CMP      r4,r5                 ;626
000020  dbf8              BLT      |L19.20|
;;;629        }
;;;630        kdp_printf("\n");
000022  e8bd4070          POP      {r4-r6,lr}
000026  a003              ADR      r0,|L19.52|
000028  f7ffbffe          B.W      kdp_printf
;;;631    }
;;;632    
                          ENDP

                  |L19.44|
00002c  30782530          DCB      "0x%02X ",0
000030  32582000
                  |L19.52|
000034  0a00              DCB      "\n",0
000036  00                DCB      0
000037  00                DCB      0

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  stCom_type
                          %        45

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  4d525f53          DCB      "MR_SUCCESS",0
000004  55434345
000008  535300  
00000b  00                DCB      0
00000c  4d525f52          DCB      "MR_REJECTED",0
000010  454a4543
000014  54454400
000018  4d525f41          DCB      "MR_ABORTED",0
00001c  424f5254
000020  454400  
000023  00                DCB      0
000024  4d525f46          DCB      "MR_FAILED_DEV_OPEN_FAIL",0
000028  41494c45
00002c  445f4445
000030  565f4f50
000034  454e5f46
000038  41494c00
00003c  4d525f46          DCB      "MR_FAILED_UNKNOWN_REASON",0
000040  41494c45
000044  445f554e
000048  4b4e4f57
00004c  4e5f5245
000050  41534f4e
000054  00      
000055  00                DCB      0
000056  00                DCB      0
000057  00                DCB      0
000058  4d525f46          DCB      "MR_FAILED_INVALID_PARAM",0
00005c  41494c45
000060  445f494e
000064  56414c49
000068  445f5041
00006c  52414d00
000070  4d525f46          DCB      "MR_FAILED_OOM",0
000074  41494c45
000078  445f4f4f
00007c  4d00    
00007e  00                DCB      0
00007f  00                DCB      0
000080  4d525f46          DCB      "MR_FAILED_UNKNOWN_USER",0
000084  41494c45
000088  445f554e
00008c  4b4e4f57
000090  4e5f5553
000094  455200  
000097  00                DCB      0
000098  4d525f46          DCB      "MR_FAILED_MAX_USER",0
00009c  41494c45
0000a0  445f4d41
0000a4  585f5553
0000a8  455200  
0000ab  00                DCB      0
0000ac  4d525f46          DCB      "MR_FAILED_FACE_ENROLLED",0
0000b0  41494c45
0000b4  445f4641
0000b8  43455f45
0000bc  4e524f4c
0000c0  4c454400
0000c4  4d525f46          DCB      "MR_FAILED_LIVENESS_CHECK",0
0000c8  41494c45
0000cc  445f4c49
0000d0  56454e45
0000d4  53535f43
0000d8  4845434b
0000dc  00      
0000dd  00                DCB      0
0000de  00                DCB      0
0000df  00                DCB      0
0000e0  4d525f46          DCB      "MR_FAILED_TIME_OUT",0
0000e4  41494c45
0000e8  445f5449
0000ec  4d455f4f
0000f0  555400  
0000f3  00                DCB      0
0000f4  4d525f46          DCB      "MR_FAILED_AUTHORIZATION",0
0000f8  41494c45
0000fc  445f4155
000100  54484f52
000104  495a4154
000108  494f4e00
00010c  4d525f46          DCB      "MR_FAILED_READ_FILE",0
000110  41494c45
000114  445f5245
000118  41445f46
00011c  494c4500
000120  4d525f46          DCB      "MR_FAILED_WRITE_FILE",0
000124  41494c45
000128  445f5752
00012c  4954455f
000130  46494c45
000134  00      
000135  00                DCB      0
000136  00                DCB      0
000137  00                DCB      0
000138  4d525f46          DCB      "MR_FAILED_NO_ENCRYPT",0
00013c  41494c45
000140  445f4e4f
000144  5f454e43
000148  52595054
00014c  00      
00014d  00                DCB      0
00014e  00                DCB      0
00014f  00                DCB      0
000150  4d525f46          DCB      "MR_FAILED_STORE_ERR",0
000154  41494c45
000158  445f5354
00015c  4f52455f
000160  45525200
000164  4d525f46          DCB      "MR_FAILED_NO_IMG",0
000168  41494c45
00016c  445f4e4f
000170  5f494d47
000174  00      
000175  00                DCB      0
000176  00                DCB      0
000177  00                DCB      0
000178  4d525f46          DCB      "MR_FAILED_NO_IDX",0
00017c  41494c45
000180  445f4e4f
000184  5f494458
000188  00      
000189  00                DCB      0
00018a  00                DCB      0
00018b  00                DCB      0
00018c  4d525f46          DCB      "MR_FAILED_BUF_OVERFLOW",0
000190  41494c45
000194  445f4255
000198  465f4f56
00019c  4552464c
0001a0  4f5700  
0001a3  00                DCB      0
0001a4  4d525f46          DCB      "MR_FAILED_MASS_DATA_HEAD_EMPTY",0
0001a8  41494c45
0001ac  445f4d41
0001b0  53535f44
0001b4  4154415f
0001b8  48454144
0001bc  5f454d50
0001c0  545900  
0001c3  00                DCB      0
0001c4  4d525f46          DCB      "MR_FAILED_MASS_DATA_DB_ABNORMAL",0
0001c8  41494c45
0001cc  445f4d41
0001d0  53535f44
0001d4  4154415f
0001d8  44425f41
0001dc  424e4f52
0001e0  4d414c00
0001e4  4d525f46          DCB      "MR_FAILED_MASS_DATA_FM_ABNORMAL",0
0001e8  41494c45
0001ec  445f4d41
0001f0  53535f44
0001f4  4154415f
0001f8  464d5f41
0001fc  424e4f52
000200  4d414c00
000204  4d525f46          DCB      "MR_FAILED_NOT_READY",0
000208  41494c45
00020c  445f4e4f
000210  545f5245
000214  41445900
000218  4d525f46          DCB      "MR_FAILED_EXISTED_USER",0
00021c  41494c45
000220  445f4558
000224  49535445
000228  445f5553
00022c  455200  
00022f  00                DCB      0
000230  4d525f46          DCB      "MR_FAILED_IDX_OVERFLOW",0
000234  41494c45
000238  445f4944
00023c  585f4f56
000240  4552464c
000244  4f5700  
000247  00                DCB      0
000248  4d525f43          DCB      "MR_CONTIUNOUS",0
00024c  4f4e5449
000250  554e4f55
000254  5300    
000256  00                DCB      0
000257  00                DCB      0
000258  4d525f53          DCB      "MR_SUCCESS_BUT_DEL_USER",0
00025c  55434345
000260  53535f42
000264  55545f44
000268  454c5f55
00026c  53455200
000270  4d525f46          DCB      "MR_FAILED_INVALID_CMD",0
000274  41494c45
000278  445f494e
00027c  56414c49
000280  445f434d
000284  4400    
000286  00                DCB      0
000287  00                DCB      0
000288  00                DCB      0

                          AREA ||.data||, DATA, ALIGN=2

                  expected_length
000000  0000              DCW      0x0000
                  last_expected_length
000002  0000              DCW      0x0000
                  pgcom_tx_buf
                          DCD      0x61f80e00
                  pgcom_rx_buf
                          DCD      0x61f82200
                  pgcom_rx1_buf
                          DCD      0x61f83600
                  gcom_tx_index
                          DCD      0x00000000
                  gcom_rx_index
                          DCD      0x00000000
                  _user_com_ops
                          DCD      0x00000000
                  msg_dec
                          DCD      0x00000000
                  last_parset_cnt
                          DCD      0x00000000
                  last_tick
                          DCD      0x00000000

                          AREA ||area_number.25||, DATA, ALIGN=2

                          EXPORTAS ||area_number.25||, ||.data||
                  last_hb_tick
                          DCD      0x00000000

                          AREA ||i._str_uart_reply||, COMGROUP=_str_uart_reply, CODE, READONLY, ALIGN=2

                  _str_uart_reply PROC
;;;201    #pragma diag_suppress 111
;;;202    inline char *_str_uart_reply(enum uart_reply_result result)
000000  2814              CMP      r0,#0x14
;;;203    {
;;;204        switch (result)
000002  d04e              BEQ      |L126.162|
000004  dc0d              BGT      |L126.34|
000006  2814              CMP      r0,#0x14
000008  d22d              BCS      |L126.102|
00000a  e8dff000          TBB      [pc,r0]
00000e  2e30              DCB      0x2e,0x30
000010  322c3436          DCB      0x32,0x2c,0x34,0x36
000014  383a3c3e          DCB      0x38,0x3a,0x3c,0x3e
000018  402c4244          DCB      0x40,0x2c,0x42,0x44
00001c  462c2c2c          DCB      0x46,0x2c,0x2c,0x2c
000020  2c48              DCB      0x2c,0x48
                  |L126.34|
000022  2832              CMP      r0,#0x32
000024  d04d              BEQ      |L126.194|
000026  dc10              BGT      |L126.74|
000028  2818              CMP      r0,#0x18
00002a  d042              BEQ      |L126.178|
00002c  dc06              BGT      |L126.60|
00002e  2815              CMP      r0,#0x15
000030  d039              BEQ      |L126.166|
000032  2816              CMP      r0,#0x16
000034  d039              BEQ      |L126.170|
000036  2817              CMP      r0,#0x17
000038  d115              BNE      |L126.102|
00003a  e038              B        |L126.174|
                  |L126.60|
00003c  2819              CMP      r0,#0x19
00003e  d03a              BEQ      |L126.182|
000040  2830              CMP      r0,#0x30
000042  d03a              BEQ      |L126.186|
000044  2831              CMP      r0,#0x31
000046  d10e              BNE      |L126.102|
000048  e039              B        |L126.190|
                  |L126.74|
00004a  2836              CMP      r0,#0x36
00004c  d041              BEQ      |L126.210|
00004e  dc06              BGT      |L126.94|
000050  2833              CMP      r0,#0x33
000052  d038              BEQ      |L126.198|
000054  2834              CMP      r0,#0x34
000056  d038              BEQ      |L126.202|
000058  2835              CMP      r0,#0x35
00005a  d104              BNE      |L126.102|
00005c  e037              B        |L126.206|
                  |L126.94|
00005e  2840              CMP      r0,#0x40
000060  d039              BEQ      |L126.214|
000062  28ff              CMP      r0,#0xff
000064  d039              BEQ      |L126.218|
                  |L126.102|
;;;205        {
;;;206            CMD_REPLY_RESULT_MACRO(TO_STR)
;;;207        default:
;;;208            break;
;;;209        }
;;;210        
;;;211        return "";
000066  481e              LDR      r0,|L126.224|
;;;212    }
000068  4770              BX       lr
00006a  481e              LDR      r0,|L126.228|
00006c  4770              BX       lr
00006e  481e              LDR      r0,|L126.232|
000070  4770              BX       lr
000072  481e              LDR      r0,|L126.236|
000074  4770              BX       lr
000076  481e              LDR      r0,|L126.240|
000078  4770              BX       lr
00007a  481e              LDR      r0,|L126.244|
00007c  4770              BX       lr
00007e  481e              LDR      r0,|L126.248|
000080  4770              BX       lr
000082  481e              LDR      r0,|L126.252|
000084  4770              BX       lr
000086  481e              LDR      r0,|L126.256|
000088  4770              BX       lr
00008a  481e              LDR      r0,|L126.260|
00008c  4770              BX       lr
00008e  481e              LDR      r0,|L126.264|
000090  4770              BX       lr
000092  481e              LDR      r0,|L126.268|
000094  4770              BX       lr
000096  481e              LDR      r0,|L126.272|
000098  4770              BX       lr
00009a  481e              LDR      r0,|L126.276|
00009c  4770              BX       lr
00009e  481e              LDR      r0,|L126.280|
0000a0  4770              BX       lr
                  |L126.162|
0000a2  481e              LDR      r0,|L126.284|
0000a4  4770              BX       lr
                  |L126.166|
0000a6  481e              LDR      r0,|L126.288|
0000a8  4770              BX       lr
                  |L126.170|
0000aa  481e              LDR      r0,|L126.292|
0000ac  4770              BX       lr
                  |L126.174|
0000ae  481e              LDR      r0,|L126.296|
0000b0  4770              BX       lr
                  |L126.178|
0000b2  481e              LDR      r0,|L126.300|
0000b4  4770              BX       lr
                  |L126.182|
0000b6  481e              LDR      r0,|L126.304|
0000b8  4770              BX       lr
                  |L126.186|
0000ba  481e              LDR      r0,|L126.308|
0000bc  4770              BX       lr
                  |L126.190|
0000be  481e              LDR      r0,|L126.312|
0000c0  4770              BX       lr
                  |L126.194|
0000c2  481e              LDR      r0,|L126.316|
0000c4  4770              BX       lr
                  |L126.198|
0000c6  481e              LDR      r0,|L126.320|
0000c8  4770              BX       lr
                  |L126.202|
0000ca  481e              LDR      r0,|L126.324|
0000cc  4770              BX       lr
                  |L126.206|
0000ce  481e              LDR      r0,|L126.328|
0000d0  4770              BX       lr
                  |L126.210|
0000d2  481e              LDR      r0,|L126.332|
0000d4  4770              BX       lr
                  |L126.214|
0000d6  481e              LDR      r0,|L126.336|
0000d8  4770              BX       lr
                  |L126.218|
0000da  481e              LDR      r0,|L126.340|
0000dc  4770              BX       lr
;;;213    #pragma diag_warning 111
                          ENDP

0000de  0000              DCW      0x0000
                  |L126.224|
                          DCD      ||.conststring||+0x288
                  |L126.228|
                          DCD      ||.conststring||
                  |L126.232|
                          DCD      ||.conststring||+0xc
                  |L126.236|
                          DCD      ||.conststring||+0x18
                  |L126.240|
                          DCD      ||.conststring||+0x24
                  |L126.244|
                          DCD      ||.conststring||+0x3c
                  |L126.248|
                          DCD      ||.conststring||+0x58
                  |L126.252|
                          DCD      ||.conststring||+0x70
                  |L126.256|
                          DCD      ||.conststring||+0x80
                  |L126.260|
                          DCD      ||.conststring||+0x98
                  |L126.264|
                          DCD      ||.conststring||+0xac
                  |L126.268|
                          DCD      ||.conststring||+0xc4
                  |L126.272|
                          DCD      ||.conststring||+0xe0
                  |L126.276|
                          DCD      ||.conststring||+0xf4
                  |L126.280|
                          DCD      ||.conststring||+0x10c
                  |L126.284|
                          DCD      ||.conststring||+0x120
                  |L126.288|
                          DCD      ||.conststring||+0x138
                  |L126.292|
                          DCD      ||.conststring||+0x150
                  |L126.296|
                          DCD      ||.conststring||+0x164
                  |L126.300|
                          DCD      ||.conststring||+0x178
                  |L126.304|
                          DCD      ||.conststring||+0x18c
                  |L126.308|
                          DCD      ||.conststring||+0x1a4
                  |L126.312|
                          DCD      ||.conststring||+0x1c4
                  |L126.316|
                          DCD      ||.conststring||+0x1e4
                  |L126.320|
                          DCD      ||.conststring||+0x204
                  |L126.324|
                          DCD      ||.conststring||+0x218
                  |L126.328|
                          DCD      ||.conststring||+0x230
                  |L126.332|
                          DCD      ||.conststring||+0x248
                  |L126.336|
                          DCD      ||.conststring||+0x258
                  |L126.340|
                          DCD      ||.conststring||+0x270

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\scpu\\middleware\\kdp_comm\\kdp_comm.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_kdp_comm_c_76bcb4af____REV16|
#line 208 "F:\\Users\\fu\\AppData\\Local\\Arm\\Packs\\ARM\\CMSIS\\5.9.0\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___10_kdp_comm_c_76bcb4af____REV16| PROC
#line 209

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_kdp_comm_c_76bcb4af____REVSH|
#line 223
|__asm___10_kdp_comm_c_76bcb4af____REVSH| PROC
#line 224

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___10_kdp_comm_c_76bcb4af____RRX|
#line 410
|__asm___10_kdp_comm_c_76bcb4af____RRX| PROC
#line 411

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
