; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\objects\virtual_dp.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\virtual_dp.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O3 --diag_suppress=9931 -I..\..\config -I..\..\..\..\board -I..\..\..\..\common\include -I..\..\..\..\scpu\device\include\CMSIS -I..\..\..\..\scpu\device\include\Kneron -I..\..\..\..\scpu\framework\include -I..\..\..\..\scpu\framework\include\framework -I..\..\..\..\scpu\drivers\include -I..\..\..\..\scpu\drivers\include\media\touch -I..\..\..\..\scpu\drivers\include\media\flash -I..\..\..\..\scpu\lib\kdp_system\inc -I..\..\..\..\scpu\lib\kdp_application\include\ -I..\..\..\..\scpu\lib\kdp_application\base\ -I..\..\..\..\scpu\lib\kdp_application\misc -I..\..\..\..\scpu\lib\kdp_e2e_r1n1\include -I..\..\..\..\scpu\include -I..\..\..\..\scpu\middleware\ota -I..\..\..\..\scpu\middleware\comm -I..\..\..\..\scpu\middleware\kdp_comm -I..\..\..\..\scpu\share -I..\..\..\..\scpu\share\gui_lib -I..\..\user -I.\RTE\CMSIS -I.\RTE\_Target-scpu -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\RTOS2\Include -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\RTOS2\RTX\Include -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\Device\ARM\ARMCM4\Include -D__RTX -D__MICROLIB -D__UVISION_VERSION=538 -D_RTE_ -DARMCM4_FP -D_RTE_ -DARM_MATH_CM4 -DTARGET_SCPU -DLOG_ENABLE -DKL520 -DHEAD_POSE_CHECK_PERCENT --omf_browse=.\objects\virtual_dp.crf ..\..\..\..\scpu\drivers\media\panel\virtual_dp.c]
                          THUMB

                          AREA ||i.virtual_dp_clear||, CODE, READONLY, ALIGN=1

                  virtual_dp_clear PROC
;;;27     
;;;28     int virtual_dp_clear(struct core_device** core_d, u32 color)
000000  2000              MOVS     r0,#0
;;;29     {
;;;30         int ret = 0;
;;;31     
;;;32         return ret;
;;;33     }
000002  4770              BX       lr
;;;34     
                          ENDP


                          AREA ||i.virtual_dp_init||, CODE, READONLY, ALIGN=1

                  virtual_dp_init PROC
;;;16     
;;;17     int virtual_dp_init(struct core_device** core_d)
000000  2000              MOVS     r0,#0
;;;18     {
;;;19         int ret = 0;
;;;20         struct display_driver *display_drv = container_of(core_d, struct display_driver, core_dev);
;;;21     
;;;22         dbg_msg_display("[%s] hor_no_in=%u ver_no_in=%u hor_no_out=%u ver_no_out=%u", \
;;;23                         __func__, display_drv->vi_params.panel_in_w, display_drv->vi_params.panel_in_h, display_drv->vi_params.panel_out_w, display_drv->vi_params.panel_out_h);
;;;24     
;;;25         return ret;
;;;26     }
000002  4770              BX       lr
;;;27     
                          ENDP


                          AREA ||i.virtual_dp_preproc_nir||, CODE, READONLY, ALIGN=2

                  virtual_dp_preproc_nir PROC
;;;70     
;;;71     void virtual_dp_preproc_nir(struct core_device** core_d, u32 src_addr, u32 dest_addr)
000000  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;72     {
;;;73         struct display_driver *display_drv = container_of(core_d, struct display_driver, core_dev);
;;;74         
;;;75         u16 src_width = display_drv->vi_params.src_width;
000004  f8b0b04a          LDRH     r11,[r0,#0x4a]
;;;76     
;;;77         u16 dp_img_w = display_drv->vi_params.dp_area_w;
000008  f8309f52          LDRH     r9,[r0,#0x52]!
;;;78         u16 dp_img_h = display_drv->vi_params.dp_area_h;
;;;79         
;;;80         u16 dp_h = display_drv->vi_params.dp_out_h;
;;;81         u16 dp_w = display_drv->vi_params.dp_out_w;
;;;82         
;;;83         u16 data_buf;
;;;84         u32 readAddr;
;;;85         u32 writeAddr;    
;;;86         
;;;87         u32 bytes_per_pixel = 1;    // raw8
00000c  2601              MOVS     r6,#1
00000e  f8b0a002          LDRH     r10,[r0,#2]           ;78
000012  88c5              LDRH     r5,[r0,#6]            ;80
000014  8883              LDRH     r3,[r0,#4]            ;81
000016  468e              MOV      lr,r1                 ;72
;;;88         
;;;89         {
;;;90             for(u32 index =0; index<dp_h; index++)
000018  2000              MOVS     r0,#0
00001a  e025              B        |L3.104|
                  |L3.28|
;;;91             {
;;;92                 readAddr = ((((index * dp_img_h) / dp_h + DISPLAY_NIR_Y_OFFSET) * src_width + DISPLAY_NIR_X_OFFSET) * bytes_per_pixel) + src_addr;
00001c  fb00f10a          MUL      r1,r0,r10
000020  fbb1f1f5          UDIV     r1,r1,r5
000024  fb01f10b          MUL      r1,r1,r11
000028  fb01e706          MLA      r7,r1,r6,lr
;;;93                 writeAddr = (index * dp_w * 2) + dest_addr;
00002c  9a02              LDR      r2,[sp,#8]
00002e  fb00f103          MUL      r1,r0,r3
000032  eb020441          ADD      r4,r2,r1,LSL #1
;;;94                 
;;;95                 for (u32 col = 0; col < dp_w; col++)
000036  2100              MOVS     r1,#0
000038  e013              B        |L3.98|
;;;96                 {
;;;97                     data_buf = (u16)inb(readAddr + ((col * dp_img_w) / dp_w * bytes_per_pixel));
00003a  bf00              NOP      
                  |L3.60|
00003c  fb01f209          MUL      r2,r1,r9
000040  fbb2f2f3          UDIV     r2,r2,r3
000044  4372              MULS     r2,r6,r2
000046  5cba              LDRB     r2,[r7,r2]
;;;98                     data_buf = (u16)((data_buf>>3)<<11) | ((data_buf>>2)<<5) | ((data_buf>>3)<<0);
000048  ea4f0cd2          LSR      r12,r2,#3
00004c  ea4f2ccc          LSL      r12,r12,#11
000050  ea4f0892          LSR      r8,r2,#2
000054  ea4c1c48          ORR      r12,r12,r8,LSL #5
000058  ea4c02d2          ORR      r2,r12,r2,LSR #3
;;;99                     outhw(writeAddr,data_buf);
00005c  f8442b02          STR      r2,[r4],#2
000060  1c49              ADDS     r1,r1,#1
                  |L3.98|
000062  4299              CMP      r1,r3                 ;95
000064  d3ea              BCC      |L3.60|
000066  1c40              ADDS     r0,r0,#1              ;95
                  |L3.104|
000068  42a8              CMP      r0,r5                 ;90
00006a  d3d7              BCC      |L3.28|
;;;100    
;;;101                    writeAddr += 2;
;;;102                }
;;;103            }
;;;104        }
;;;105    }
00006c  e8bd8ffe          POP      {r1-r11,pc}
;;;106    
                          ENDP


                          AREA ||i.virtual_dp_preproc_rgb||, CODE, READONLY, ALIGN=1

                  virtual_dp_preproc_rgb PROC
;;;39     
;;;40     void virtual_dp_preproc_rgb(struct core_device** core_d, u32 src_addr, u32 dest_addr)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;41     {
;;;42         struct display_driver *display_drv = container_of(core_d, struct display_driver, core_dev);
;;;43     
;;;44         u32 readAddr = src_addr;
;;;45         u32 writeAddr = dest_addr;
;;;46         u32 bytes_per_pixel = 2;
;;;47     
;;;48         u16 src_width = display_drv->vi_params.src_width;
000004  f8b0904a          LDRH     r9,[r0,#0x4a]
;;;49     
;;;50         u16 dp_img_w = display_drv->vi_params.dp_area_w;
000008  f8305f52          LDRH     r5,[r0,#0x52]!
00000c  4693              MOV      r11,r2                ;41
00000e  468a              MOV      r10,r1                ;41
000010  2202              MOVS     r2,#2                 ;46
;;;51         u16 dp_img_h = display_drv->vi_params.dp_area_h;
000012  8846              LDRH     r6,[r0,#2]
;;;52         
;;;53         u16 dp_h = display_drv->vi_params.dp_out_h;
000014  88c7              LDRH     r7,[r0,#6]
;;;54         u16 dp_w = display_drv->vi_params.dp_out_w;
000016  8883              LDRH     r3,[r0,#4]
;;;55     
;;;56         {
;;;57             for(u32 index =0; index<dp_h; index++)
000018  2100              MOVS     r1,#0
00001a  e01c              B        |L4.86|
                  |L4.28|
;;;58             {
;;;59                 readAddr = (((index * dp_img_h / dp_h + DISPLAY_RGB_Y_OFFSET) * src_width + DISPLAY_RGB_X_OFFSET) * bytes_per_pixel) + src_addr;
00001c  fb01f006          MUL      r0,r1,r6
000020  fbb0f0f7          UDIV     r0,r0,r7
000024  fb00f009          MUL      r0,r0,r9
000028  fb00ac02          MLA      r12,r0,r2,r10
;;;60                 writeAddr = index * dp_w * bytes_per_pixel + dest_addr;
00002c  fb01f003          MUL      r0,r1,r3
000030  fb00b402          MLA      r4,r0,r2,r11
;;;61     
;;;62                 for (u32 col = 0; col < dp_w; col++)
000034  2000              MOVS     r0,#0
000036  e00b              B        |L4.80|
                  |L4.56|
;;;63                 {
;;;64                     *((u16 *)writeAddr) = *((u16 *)(readAddr + ((col * dp_img_w) / dp_w * bytes_per_pixel)));
000038  fb00f805          MUL      r8,r0,r5
00003c  fbb8f8f3          UDIV     r8,r8,r3
000040  fb08f802          MUL      r8,r8,r2
000044  f83c8008          LDRH     r8,[r12,r8]
000048  f8a48000          STRH     r8,[r4,#0]
;;;65                     writeAddr += bytes_per_pixel;
00004c  4414              ADD      r4,r4,r2
00004e  1c40              ADDS     r0,r0,#1
                  |L4.80|
000050  4298              CMP      r0,r3                 ;62
000052  d3f1              BCC      |L4.56|
000054  1c49              ADDS     r1,r1,#1              ;62
                  |L4.86|
000056  42b9              CMP      r1,r7                 ;57
000058  d3e0              BCC      |L4.28|
;;;66                 }
;;;67             }
;;;68         }
;;;69     }
00005a  e8bd8ff0          POP      {r4-r11,pc}
;;;70     
                          ENDP


                          AREA ||i.virtual_dp_read_display_id||, CODE, READONLY, ALIGN=1

                  virtual_dp_read_display_id PROC
;;;34     
;;;35     u16 virtual_dp_read_display_id(struct core_device** core_d)
000000  f2455066          MOV      r0,#0x5566
;;;36     {
;;;37         return 0x5566;
;;;38     }
000004  4770              BX       lr
;;;39     
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  virtual_dp_driver
                          DCD      virtual_dp_init
                          DCD      virtual_dp_clear
                          DCD      virtual_dp_read_display_id
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      virtual_dp_preproc_rgb
                          DCD      0x00000000
                          DCD      virtual_dp_preproc_nir
                          DCD      0x00000000
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\scpu\\drivers\\media\\panel\\virtual_dp.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___12_virtual_dp_c_82b30af4____REV16|
#line 208 "F:\\Users\\fu\\AppData\\Local\\Arm\\Packs\\ARM\\CMSIS\\5.9.0\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___12_virtual_dp_c_82b30af4____REV16| PROC
#line 209

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___12_virtual_dp_c_82b30af4____REVSH|
#line 223
|__asm___12_virtual_dp_c_82b30af4____REVSH| PROC
#line 224

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___12_virtual_dp_c_82b30af4____RRX|
#line 410
|__asm___12_virtual_dp_c_82b30af4____RRX| PROC
#line 411

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
