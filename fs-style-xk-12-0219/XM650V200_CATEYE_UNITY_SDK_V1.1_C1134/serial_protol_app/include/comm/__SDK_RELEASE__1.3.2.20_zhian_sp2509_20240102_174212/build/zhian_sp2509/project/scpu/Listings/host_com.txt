; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\objects\host_com.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\host_com.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O3 --diag_suppress=9931 -I..\..\config -I..\..\..\..\board -I..\..\..\..\common\include -I..\..\..\..\scpu\device\include\CMSIS -I..\..\..\..\scpu\device\include\Kneron -I..\..\..\..\scpu\framework\include -I..\..\..\..\scpu\framework\include\framework -I..\..\..\..\scpu\drivers\include -I..\..\..\..\scpu\drivers\include\media\touch -I..\..\..\..\scpu\drivers\include\media\flash -I..\..\..\..\scpu\lib\kdp_system\inc -I..\..\..\..\scpu\lib\kdp_application\include\ -I..\..\..\..\scpu\lib\kdp_application\base\ -I..\..\..\..\scpu\lib\kdp_application\misc -I..\..\..\..\scpu\lib\kdp_e2e_r1n1\include -I..\..\..\..\scpu\include -I..\..\..\..\scpu\middleware\ota -I..\..\..\..\scpu\middleware\comm -I..\..\..\..\scpu\middleware\kdp_comm -I..\..\..\..\scpu\share -I..\..\..\..\scpu\share\gui_lib -I..\..\user -I.\RTE\CMSIS -I.\RTE\_Target-scpu -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\RTOS2\Include -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\RTOS2\RTX\Include -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\Device\ARM\ARMCM4\Include -D__RTX -D__MICROLIB -D__UVISION_VERSION=538 -D_RTE_ -DARMCM4_FP -D_RTE_ -DARM_MATH_CM4 -DTARGET_SCPU -DLOG_ENABLE -DKL520 -DHEAD_POSE_CHECK_PERCENT --omf_browse=.\objects\host_com.crf ..\..\..\..\scpu\middleware\comm\host_com.c]
                          THUMB

                          AREA ||i.check_msg||, CODE, READONLY, ALIGN=2

                  check_msg PROC
;;;1123    */
;;;1124   static int check_msg(u8 *buf, int size)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;1125   {
000004  4607              MOV      r7,r0
;;;1126       MsgHdr *hdr = (MsgHdr*)msg_rbuf;
000006  4822              LDR      r0,|L1.144|
000008  4688              MOV      r8,r1                 ;1125
;;;1127   
;;;1128       if (hdr->preamble != MSG_HDR_CMD) {
;;;1129           err_msg("BAD Preamble %d\r\n", size);
;;;1130           return -1;
00000a  f04f34ff          MOV      r4,#0xffffffff
00000e  6806              LDR      r6,[r0,#0]            ;1128  ; msg_rbuf
000010  8830              LDRH     r0,[r6,#0]            ;1128
000012  f5a04125          SUB      r1,r0,#0xa500         ;1128
000016  3983              SUBS     r1,r1,#0x83           ;1128
000018  d005              BEQ      |L1.38|
00001a  4642              MOV      r2,r8                 ;1129
00001c  a11d              ADR      r1,|L1.148|
00001e  2002              MOVS     r0,#2                 ;1129
000020  f7fffffe          BL       kdp_level_printf
000024  e02a              B        |L1.124|
                  |L1.38|
;;;1131       }
;;;1132   
;;;1133       if (hdr->ctrl & PKT_CRC_FLAG) {
000026  8870              LDRH     r0,[r6,#2]
000028  0441              LSLS     r1,r0,#17
00002a  d52a              BPL      |L1.130|
;;;1134           int length = hdr->ctrl & 0x01FFF;
00002c  f3c0050c          UBFX     r5,r0,#0,#13
;;;1135           u32 crc16 = gen_crc16(buf, length);
000030  4629              MOV      r1,r5
000032  4638              MOV      r0,r7
000034  f7fffffe          BL       gen_crc16
000038  4603              MOV      r3,r0
;;;1136   
;;;1137           if (crc16 != (buf[length+0]+(buf[length+1]<<8))) {
00003a  1978              ADDS     r0,r7,r5
00003c  5d79              LDRB     r1,[r7,r5]
00003e  7842              LDRB     r2,[r0,#1]
000040  eb012102          ADD      r1,r1,r2,LSL #8
000044  4299              CMP      r1,r3
000046  d01c              BEQ      |L1.130|
;;;1138               // send CRC ERROR packet
;;;1139               err_msg("BAD CRC [%d] crc16=%x : %x\r\n", length, crc16, buf[length+3]+(buf[length+3]<<8));
000048  78c0              LDRB     r0,[r0,#3]
00004a  462a              MOV      r2,r5
00004c  eb002000          ADD      r0,r0,r0,LSL #8
000050  9000              STR      r0,[sp,#0]
000052  a115              ADR      r1,|L1.168|
000054  2002              MOVS     r0,#2
000056  f7fffffe          BL       kdp_level_printf
;;;1140   
;;;1141               u16 rsp_cmd = hdr->cmd | 0x8000;
00005a  88b0              LDRH     r0,[r6,#4]
;;;1142               hdr = (MsgHdr*) msg_tbuf;
00005c  4b1a              LDR      r3,|L1.200|
00005e  f4404100          ORR      r1,r0,#0x8000         ;1141
;;;1143               hdr->cmd = rsp_cmd;
000062  6818              LDR      r0,[r3,#0]  ; msg_tbuf
000064  8081              STRH     r1,[r0,#4]
;;;1144               hdr->msg_len = 8;
000066  2108              MOVS     r1,#8
000068  80c1              STRH     r1,[r0,#6]
;;;1145   
;;;1146               RspPram *rsp = (RspPram*) (msg_tbuf + sizeof(MsgHdr));
;;;1147               rsp->error = CMD_CRC_ERR;
00006a  2107              MOVS     r1,#7
00006c  6081              STR      r1,[r0,#8]
;;;1148               rsp->param2 = 0;
00006e  2100              MOVS     r1,#0
000070  60c1              STR      r1,[r0,#0xc]
;;;1149   
;;;1150               kcomm_write_msg(msg_tbuf, sizeof(MsgHdr)+sizeof(RspPram), 0);  // send crc error packet, without crc
000072  460a              MOV      r2,r1
000074  2110              MOVS     r1,#0x10
000076  6818              LDR      r0,[r3,#0]  ; msg_tbuf
000078  f7fffffe          BL       kcomm_write_msg
                  |L1.124|
;;;1151   
;;;1152               return -1;
00007c  4620              MOV      r0,r4
                  |L1.126|
;;;1153           }
;;;1154       }
;;;1155       cmd_parser(buf, size);  // if there are more than one command, we only process the first one
;;;1156       return size;
;;;1157   }
00007e  e8bd83f8          POP      {r3-r9,pc}
                  |L1.130|
000082  4641              MOV      r1,r8                 ;1155
000084  4638              MOV      r0,r7                 ;1155
000086  f7fffffe          BL       cmd_parser
00008a  4640              MOV      r0,r8                 ;1156
00008c  e7f7              B        |L1.126|
;;;1158   
                          ENDP

00008e  0000              DCW      0x0000
                  |L1.144|
                          DCD      msg_rbuf
                  |L1.148|
000094  42414420          DCB      "BAD Preamble %d\r\n",0
000098  50726561
00009c  6d626c65
0000a0  2025640d
0000a4  0a00    
0000a6  00                DCB      0
0000a7  00                DCB      0
                  |L1.168|
0000a8  42414420          DCB      "BAD CRC [%d] crc16=%x : %x\r\n",0
0000ac  43524320
0000b0  5b25645d
0000b4  20637263
0000b8  31363d25
0000bc  78203a20
0000c0  25780d0a
0000c4  00      
0000c5  00                DCB      0
0000c6  00                DCB      0
0000c7  00                DCB      0
                  |L1.200|
                          DCD      msg_tbuf

                          AREA ||i.cmd_parser||, CODE, READONLY, ALIGN=1

                  cmd_parser PROC
;;;892    
;;;893    static int cmd_parser(u8 *buf, int len)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;894    {
;;;895        MsgHdr *msghdr;
;;;896        CmdPram *msgcmd_arg;
;;;897        RspPram *msgrsp_arg;
;;;898        OpPram *opcmdpram;
;;;899        u8 rstatus = 0;
;;;900    
;;;901        msghdr = (MsgHdr*)buf;
;;;902        msgcmd_arg = (CmdPram*)(buf + sizeof(MsgHdr));
;;;903        msgrsp_arg = (RspPram*)(buf + sizeof(MsgHdr));  // use the same rcv buffer to format responses
;;;904        opcmdpram = (OpPram*)msgcmd_arg;  // used to parse operational commands
;;;905    
;;;906        dbg_msg("[Host_com] cmd_parser[%d]: cmd %d [addr, len]=[0x%x, %d]\n", len, msghdr->cmd, msgcmd_arg->param1, msgcmd_arg->param2);
;;;907    
;;;908        if ((msghdr->cmd < 0x100) || (CMD_FLASH_READ == msghdr->cmd))  // build-in commands
000004  8881              LDRH     r1,[r0,#4]
000006  f04f0800          MOV      r8,#0                 ;899
00000a  4602              MOV      r2,r0                 ;901
00000c  f1000408          ADD      r4,r0,#8              ;902
000010  4646              MOV      r6,r8
000012  f64f73ff          MOV      r3,#0xffff
000016  29ff              CMP      r1,#0xff
000018  d927              BLS      |L2.106|
00001a  f5a15580          SUB      r5,r1,#0x1000
00001e  3d03              SUBS     r5,#3
000020  d023              BEQ      |L2.106|
;;;909        {
;;;910            handle_host_com_general(buf, len);
;;;911        }
;;;912        else if( CMD_CAPTRUE_SENSOR == msghdr->cmd )
000022  f2461701          MOV      r7,#0x6101
000026  42b9              CMP      r1,r7
000028  d123              BNE      |L2.114|
;;;913        {
;;;914            u32 srt = osKernelGetTickCount();
00002a  f7fffffe          BL       osKernelGetTickCount
;;;915            int cam_idx = opcmdpram->op_parm1;
00002e  6825              LDR      r5,[r4,#0]
;;;916            if((0 != cam_idx) && (1 != cam_idx))
000030  b115              CBZ      r5,|L2.56|
000032  2d01              CMP      r5,#1
000034  d000              BEQ      |L2.56|
;;;917                cam_idx = 0;
000036  2500              MOVS     r5,#0
                  |L2.56|
;;;918            
;;;919            if ( kl520_api_cam_state_get(cam_idx) != KDP_DEVICE_CAMERA_RUNNING )
000038  4628              MOV      r0,r5
00003a  f7fffffe          BL       kl520_api_cam_state_get
00003e  f5b07f81          CMP      r0,#0x102
000042  d005              BEQ      |L2.80|
;;;920            {
;;;921                msgrsp_arg->error = PARAM_ERR;
000044  2101              MOVS     r1,#1
000046  6021              STR      r1,[r4,#0]
;;;922            
;;;923                kcomm_send_rsp(CMD_CAPTRUE_SENSOR, (u8*)msgrsp_arg->error, 0);
000048  2200              MOVS     r2,#0
00004a  4638              MOV      r0,r7
00004c  f7fffffe          BL       kcomm_send_rsp
                  |L2.80|
;;;924            }
;;;925    
;;;926            int buf_idx;
;;;927            u32 buf_addr = kdp_fb_mgr_next_read(cam_idx, &buf_idx);
000050  4669              MOV      r1,sp
000052  4628              MOV      r0,r5
000054  f7fffffe          BL       kdp_fb_mgr_next_read
;;;928    
;;;929            msgrsp_arg->error = NO_ERROR;
000058  6026              STR      r6,[r4,#0]
;;;930    
;;;931            kcomm_write((u8 *) buf_addr, msgcmd_arg->param2, WMODE_DEF);
00005a  6861              LDR      r1,[r4,#4]
00005c  2200              MOVS     r2,#0
00005e  f7fffffe          BL       kcomm_write
;;;932            kdp_fb_mgr_free_read_buf(cam_idx);
000062  4628              MOV      r0,r5
000064  f7fffffe          BL       kdp_fb_mgr_free_read_buf
;;;933            dbg_msg_com("[snapshot]usb time:%05d (ms)",osKernelGetTickCount() - srt);
;;;934        }
000068  e017              B        |L2.154|
                  |L2.106|
00006a  6023              STR      r3,[r4,#0]
00006c  6066              STR      r6,[r4,#4]
00006e  8880              LDRH     r0,[r0,#4]
000070  e00f              B        |L2.146|
                  |L2.114|
;;;935        else if( CMD_FDFR_THREAD_CLOSE == msghdr->cmd )
000072  f44f45c0          MOV      r5,#0x6000
000076  42a9              CMP      r1,r5
000078  d108              BNE      |L2.140|
;;;936        {
;;;937            if( kl520_api_fdfr_exist_thread() )
00007a  f7fffffe          BL       kl520_api_fdfr_exist_thread
00007e  b108              CBZ      r0,|L2.132|
;;;938            {
;;;939                sample_face_close();
000080  f7fffffe          BL       sample_face_close
                  |L2.132|
;;;940            }
;;;941            kcomm_send_rsp(CMD_FDFR_THREAD_CLOSE, NULL, 0);
000084  2200              MOVS     r2,#0
000086  4611              MOV      r1,r2
000088  4628              MOV      r0,r5
00008a  e004              B        |L2.150|
                  |L2.140|
;;;942        }
;;;943    #if ( CFG_GUI_ENABLE == YES )
;;;944        else if( CMD_GUI_CTRL_SERIES == ((msghdr->cmd)&CMD_GUI_CTRL_SERIES) )
;;;945        //else if( CMD_GUI_CTRL_SERIES <= msghdr->cmd )
;;;946        {
;;;947            int data = opcmdpram->op_parm1;
;;;948            switch ( msghdr->cmd )
;;;949            {
;;;950                case CMD_GUI_REGISTER:
;;;951                    user_com_set_data(GUI_IMG_BTN_REGISTER, data, GUI_FSM_SRC_USER_COM);
;;;952                    set_event(kl520_api_get_event(), KL520_APP_FLAG_COMM);
;;;953                    wait_event(kl520_api_get_event(), KL520_APP_FLAG_COMM_DONE);
;;;954                    break;
;;;955                case CMD_GUI_RECOGNIZE:
;;;956                    user_com_set_data(GUI_IMG_BTN_RECOGNIZE, data, GUI_FSM_SRC_USER_COM);
;;;957                    set_event(kl520_api_get_event(), KL520_APP_FLAG_COMM);
;;;958                    wait_event(kl520_api_get_event(), KL520_APP_FLAG_COMM_DONE);
;;;959                    break;
;;;960                case CMD_GUI_DELETE_ALL:
;;;961                    user_com_set_data(GUI_IMG_BTN_DELETE, 0, GUI_FSM_SRC_USER_COM);
;;;962                    set_event(kl520_api_get_event(), KL520_APP_FLAG_COMM);
;;;963                    break;
;;;964                default:
;;;965                    return 0;
;;;966            }
;;;967    
;;;968        }
;;;969    #endif
;;;970    #if (CFG_USB_CLOUD_DB_UPDATE == YES && CFG_FMAP_AP_CTRL_TYPE > EX_FM_DISABLE && CFG_FMAP_AP_CTRL_TYPE < EX_FM_UART_AP_CTRL_MAIN_DB )
;;;971        else if( CMD_CLOUD_UPDATE_DB == (msghdr->cmd&CMD_CLOUD_UPDATE_DB)  )
;;;972        //else if( CMD_GUI_CTRL_SERIES <= msghdr->cmd )
;;;973        {
;;;974            u32 user_idx = msgcmd_arg->param2;
;;;975            u16 ret = 1;
;;;976    
;;;977            if     ( msgcmd_arg->param1 == 0x00000001 ) // add
;;;978            {
;;;979                kdp_api_ap_control_set_each_db( (u16)user_idx );
;;;980                ret = 0;
;;;981            }
;;;982            else if( msgcmd_arg->param1 == 0x00000002 ) // delete
;;;983            {
;;;984                kdp_api_ap_control_del_each_db( (u16)user_idx );
;;;985                ret = 0;
;;;986            }
;;;987            else if( msgcmd_arg->param1 == 0x00000003 ) // modify
;;;988            {
;;;989                kdp_api_ap_control_del_each_db( (u16)user_idx );
;;;990                kdp_api_ap_control_set_each_db( (u16)user_idx );
;;;991                ret = 0;
;;;992            }
;;;993            else if( msgcmd_arg->param1 == 0x00000004 ) // search
;;;994            {
;;;995                const u8 table_size = 2 + ( (MAX_USER + 7) >> 3);
;;;996                u8 bin_table[table_size] = { 0 };
;;;997                u16 db_valid_cnt = kl520_api_ap_com_db_query_db_all_mode( &bin_table[2] );
;;;998                bin_table[0] = (u8)(db_valid_cnt&0x00FF);
;;;999                bin_table[1] = (u8)((db_valid_cnt>>8) & 0x00FF);
;;;1000               kcomm_write( bin_table , sizeof(bin_table), WMODE_DEF);
;;;1001   
;;;1002           }
;;;1003           else if( msgcmd_arg->param1 == 0x00000005 ) // search
;;;1004           {
;;;1005               u16 user_id = (u16)msgcmd_arg->param2;
;;;1006               ret = kl520_api_ap_com_db_query_db_one_mode( user_id );
;;;1007           }
;;;1008           else
;;;1009           {
;;;1010               // do-nothing
;;;1011           }
;;;1012   
;;;1013           if( msgcmd_arg->param1 == 0x00000004 )
;;;1014           {
;;;1015   
;;;1016           }
;;;1017           else
;;;1018           {
;;;1019               msgrsp_arg->error = ret;
;;;1020               kcomm_send_rsp(CMD_CLOUD_UPDATE_DB, NULL, 0);
;;;1021           }
;;;1022   
;;;1023       }
;;;1024   #endif
;;;1025   
;;;1026   
;;;1027   #if CFG_USB_EXPORT_STREAM_IMG == YES
;;;1028       else if( CMD_EXPORT_STREAM_IMG == msghdr->cmd )
;;;1029       {
;;;1030           u32 srt = osKernelGetTickCount();
;;;1031           dbg_msg("[Host_com] get stream cmd!");
;;;1032   
;;;1033           u32 iamge_addr = 0;
;;;1034           s8 cam_idx = MIPI_CAM_RGB;
;;;1035   
;;;1036           eSTREAM_IMAGE_EXPORT_SRC export_mode = STRAM_IMAGE_BOTH_CAMERA_e;
;;;1037   
;;;1038           dbg_msg("[Host_com] stream start!!!!");
;;;1039   
;;;1040   #if CFG_USB_EXPORT_LIVENESS_RET == YES
;;;1041   
;;;1042           if( (msgcmd_arg->param1 & 0x00FF) == 0x0055 )
;;;1043           {
;;;1044               if(msgcmd_arg->param1 == 0x0055 )
;;;1045               {
;;;1046                   msgrsp_arg->error = NO_ERROR;
;;;1047                   kcomm_write((u8 *) kl520_api_export_stream_get_fd_box(), msgcmd_arg->param2, WMODE_DEF);
;;;1048               }
;;;1049           }
;;;1050           else
;;;1051   #endif
;;;1052           if( (msgcmd_arg->param1 & 0xFFFF) == 0xFFFF )
;;;1053           {
;;;1054               msgrsp_arg->error = NO_ERROR;
;;;1055           
;;;1056               msgrsp_arg->param1 = ((( (uint32_t)2 & 0x3 ) << 30) | (( DISPLAY_WIDTH & 0x7FFF ) << 15) | (( DISPLAY_HEIGHT & 0x7FFF ) << 0 ) );
;;;1057           
;;;1058               kcomm_send_rsp(CMD_EXPORT_STREAM_IMG, (u8*)msgrsp_arg->error, 0);
;;;1059           }
;;;1060           else
;;;1061           {
;;;1062               kl520_api_export_stream_get_info( msgrsp_arg->param1, &cam_idx, &export_mode);
;;;1063               //dbg_msg("[Host_com] stream get idx: %d with 0x%08x!!!!", cam_idx, (msgcmd_arg->param1 & 0x00AA) );
;;;1064   
;;;1065               kl520_api_export_stream_set_image_crtl( cam_idx, export_mode );
;;;1066   
;;;1067               while(kl520_api_export_stream_image_catch()==0) {osDelay(10);}
;;;1068   
;;;1069               while( (iamge_addr = kl520_api_export_stream_image_addr( export_mode ))==0) {osDelay(10);}
;;;1070   
;;;1071               pwdata=(void*)iamge_addr;
;;;1072   
;;;1073               // msg byte read size is unchanged
;;;1074               msgrsp_arg->error = NO_ERROR;
;;;1075   
;;;1076               kcomm_write((u8 *) pwdata, msgcmd_arg->param2, WMODE_DEF);
;;;1077   
;;;1078           }
;;;1079   
;;;1080           dbg_msg("[snapshot]usb time:%05d (ms)",osKernelGetTickCount() - srt);
;;;1081       }
;;;1082   
;;;1083   #endif // CFG_USB_EXPORT_STREAM_IMG == YES
;;;1084   
;;;1085       else
;;;1086       {
;;;1087           msgrsp_arg->error = RSP_UKNOWN_CMD;
00008c  6023              STR      r3,[r4,#0]
;;;1088           msgrsp_arg->param2 = 0;
00008e  6066              STR      r6,[r4,#4]
;;;1089           kcomm_send_rsp(msghdr->cmd, NULL, 0);
000090  8890              LDRH     r0,[r2,#4]
                  |L2.146|
000092  2200              MOVS     r2,#0
000094  4611              MOV      r1,r2
                  |L2.150|
000096  f7fffffe          BL       kcomm_send_rsp
                  |L2.154|
;;;1090       }
;;;1091       return rstatus;
00009a  4640              MOV      r0,r8
;;;1092   }
00009c  e8bd83f8          POP      {r3-r9,pc}
;;;1093   
                          ENDP


                          AREA ||i.host_com_init||, CODE, READONLY, ALIGN=2

                  host_com_init PROC
;;;1180   
;;;1181   void host_com_init(void)
000000  b530              PUSH     {r4,r5,lr}
;;;1182   {
;;;1183       if(msg_rbuf == NULL)
000002  4c10              LDR      r4,|L3.68|
000004  b089              SUB      sp,sp,#0x24           ;1182
;;;1184       {
;;;1185           msg_rbuf = (u8*)kdp_ddr_reserve(MSG_DATA_BUF_MAX + sizeof(MsgHdr)+ sizeof(RspPram) + 4 + 4);//4096+72 bytes
000006  f2424518          MOV      r5,#0x2418
00000a  6820              LDR      r0,[r4,#0]            ;1182  ; msg_rbuf
00000c  b918              CBNZ     r0,|L3.22|
00000e  4628              MOV      r0,r5
000010  f7fffffe          BL       kdp_ddr_reserve
000014  6020              STR      r0,[r4,#0]  ; msg_rbuf
                  |L3.22|
;;;1186       }
;;;1187       if(msg_tbuf == NULL)
000016  4c0c              LDR      r4,|L3.72|
000018  6820              LDR      r0,[r4,#0]  ; msg_tbuf
00001a  b918              CBNZ     r0,|L3.36|
;;;1188       {
;;;1189           msg_tbuf = (u8*)kdp_ddr_reserve(MSG_DATA_BUF_MAX + sizeof(MsgHdr)+ sizeof(RspPram) + 4 + 4);//4096+72 bytes
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       kdp_ddr_reserve
000022  6020              STR      r0,[r4,#0]  ; msg_tbuf
                  |L3.36|
;;;1190       }
;;;1191   
;;;1192       osThreadAttr_t attr = {
000024  2224              MOVS     r2,#0x24
000026  4909              LDR      r1,|L3.76|
000028  4668              MOV      r0,sp
00002a  f7fffffe          BL       __aeabi_memcpy4
;;;1193           .stack_size = 1536
;;;1194       };
;;;1195   
;;;1196       tid_host_comm = osThreadNew(host_comm_thread, NULL, &attr);
00002e  466a              MOV      r2,sp
000030  2100              MOVS     r1,#0
000032  4807              LDR      r0,|L3.80|
000034  f7fffffe          BL       osThreadNew
000038  4906              LDR      r1,|L3.84|
;;;1197       kcomm_msg_init(tid_host_comm);
00003a  6008              STR      r0,[r1,#0]  ; tid_host_comm
00003c  f7fffffe          BL       kcomm_msg_init
;;;1198   }
000040  b009              ADD      sp,sp,#0x24
000042  bd30              POP      {r4,r5,pc}
;;;1199   
                          ENDP

                  |L3.68|
                          DCD      msg_rbuf
                  |L3.72|
                          DCD      msg_tbuf
                  |L3.76|
                          DCD      ||.constdata||
                  |L3.80|
                          DCD      host_comm_thread
                  |L3.84|
                          DCD      ||.data||

                          AREA ||i.host_comm_thread||, CODE, READONLY, ALIGN=2

                  host_comm_thread PROC
;;;1158   
;;;1159   static void host_comm_thread(void *argument)
000000  4c0c              LDR      r4,|L4.52|
;;;1160   {
;;;1161   #ifndef CUSTOMER_SETTING_REMOVE_CMD
;;;1162       power_manager_register(PM_DEVICE_HOST_COM, &pm_host_com_device);
;;;1163   #endif
;;;1164       for (;;) {
;;;1165           uint32_t flags = osThreadFlagsWait(FLAG_COMM_USB_DONE | FLAG_COMM_UART_DONE | FLAG_COMM_TIMER, osFlagsWaitAny, osWaitForever);
;;;1166           //osThreadFlagsClear(flags);
;;;1167   
;;;1168   #if ( USB_HOST == YES )
;;;1169           if (flags & FLAG_COMM_USB_DONE)
;;;1170   #else
;;;1171           if (flags & FLAG_COMM_UART_DONE)
;;;1172   #endif
;;;1173           {
;;;1174               osThreadSetPriority(tid_host_comm, osPriorityAboveNormal2);
;;;1175               check_msg(msg_rbuf, msg_rbuf[2]+4);  // process command
000002  4d0d              LDR      r5,|L4.56|
000004  f04f36ff          MOV      r6,#0xffffffff        ;1165
                  |L4.8|
000008  4632              MOV      r2,r6                 ;1165
00000a  2100              MOVS     r1,#0                 ;1165
00000c  2034              MOVS     r0,#0x34              ;1165
00000e  f7fffffe          BL       osThreadFlagsWait
000012  06c0              LSLS     r0,r0,#27             ;1169
000014  d5f8              BPL      |L4.8|
000016  2122              MOVS     r1,#0x22              ;1174
000018  6820              LDR      r0,[r4,#0]            ;1174  ; tid_host_comm
00001a  f7fffffe          BL       osThreadSetPriority
00001e  6828              LDR      r0,[r5,#0]  ; msg_rbuf
000020  7881              LDRB     r1,[r0,#2]
000022  1d09              ADDS     r1,r1,#4
000024  f7fffffe          BL       check_msg
;;;1176               osThreadSetPriority(tid_host_comm, osPriorityNormal);
000028  2118              MOVS     r1,#0x18
00002a  6820              LDR      r0,[r4,#0]  ; tid_host_comm
00002c  f7fffffe          BL       osThreadSetPriority
000030  e7ea              B        |L4.8|
;;;1177           }
;;;1178       }
;;;1179   }
;;;1180   
                          ENDP

000032  0000              DCW      0x0000
                  |L4.52|
                          DCD      ||.data||
                  |L4.56|
                          DCD      msg_rbuf

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000600
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  4d525f53          DCB      "MR_SUCCESS",0
000004  55434345
000008  535300  
00000b  00                DCB      0
00000c  4d525f52          DCB      "MR_REJECTED",0
000010  454a4543
000014  54454400
000018  4d525f41          DCB      "MR_ABORTED",0
00001c  424f5254
000020  454400  
000023  00                DCB      0
000024  4d525f46          DCB      "MR_FAILED_DEV_OPEN_FAIL",0
000028  41494c45
00002c  445f4445
000030  565f4f50
000034  454e5f46
000038  41494c00
00003c  4d525f46          DCB      "MR_FAILED_UNKNOWN_REASON",0
000040  41494c45
000044  445f554e
000048  4b4e4f57
00004c  4e5f5245
000050  41534f4e
000054  00      
000055  00                DCB      0
000056  00                DCB      0
000057  00                DCB      0
000058  4d525f46          DCB      "MR_FAILED_INVALID_PARAM",0
00005c  41494c45
000060  445f494e
000064  56414c49
000068  445f5041
00006c  52414d00
000070  4d525f46          DCB      "MR_FAILED_OOM",0
000074  41494c45
000078  445f4f4f
00007c  4d00    
00007e  00                DCB      0
00007f  00                DCB      0
000080  4d525f46          DCB      "MR_FAILED_UNKNOWN_USER",0
000084  41494c45
000088  445f554e
00008c  4b4e4f57
000090  4e5f5553
000094  455200  
000097  00                DCB      0
000098  4d525f46          DCB      "MR_FAILED_MAX_USER",0
00009c  41494c45
0000a0  445f4d41
0000a4  585f5553
0000a8  455200  
0000ab  00                DCB      0
0000ac  4d525f46          DCB      "MR_FAILED_FACE_ENROLLED",0
0000b0  41494c45
0000b4  445f4641
0000b8  43455f45
0000bc  4e524f4c
0000c0  4c454400
0000c4  4d525f46          DCB      "MR_FAILED_LIVENESS_CHECK",0
0000c8  41494c45
0000cc  445f4c49
0000d0  56454e45
0000d4  53535f43
0000d8  4845434b
0000dc  00      
0000dd  00                DCB      0
0000de  00                DCB      0
0000df  00                DCB      0
0000e0  4d525f46          DCB      "MR_FAILED_TIME_OUT",0
0000e4  41494c45
0000e8  445f5449
0000ec  4d455f4f
0000f0  555400  
0000f3  00                DCB      0
0000f4  4d525f46          DCB      "MR_FAILED_AUTHORIZATION",0
0000f8  41494c45
0000fc  445f4155
000100  54484f52
000104  495a4154
000108  494f4e00
00010c  4d525f46          DCB      "MR_FAILED_READ_FILE",0
000110  41494c45
000114  445f5245
000118  41445f46
00011c  494c4500
000120  4d525f46          DCB      "MR_FAILED_WRITE_FILE",0
000124  41494c45
000128  445f5752
00012c  4954455f
000130  46494c45
000134  00      
000135  00                DCB      0
000136  00                DCB      0
000137  00                DCB      0
000138  4d525f46          DCB      "MR_FAILED_NO_ENCRYPT",0
00013c  41494c45
000140  445f4e4f
000144  5f454e43
000148  52595054
00014c  00      
00014d  00                DCB      0
00014e  00                DCB      0
00014f  00                DCB      0
000150  4d525f46          DCB      "MR_FAILED_STORE_ERR",0
000154  41494c45
000158  445f5354
00015c  4f52455f
000160  45525200
000164  4d525f46          DCB      "MR_FAILED_NO_IMG",0
000168  41494c45
00016c  445f4e4f
000170  5f494d47
000174  00      
000175  00                DCB      0
000176  00                DCB      0
000177  00                DCB      0
000178  4d525f46          DCB      "MR_FAILED_NO_IDX",0
00017c  41494c45
000180  445f4e4f
000184  5f494458
000188  00      
000189  00                DCB      0
00018a  00                DCB      0
00018b  00                DCB      0
00018c  4d525f46          DCB      "MR_FAILED_BUF_OVERFLOW",0
000190  41494c45
000194  445f4255
000198  465f4f56
00019c  4552464c
0001a0  4f5700  
0001a3  00                DCB      0
0001a4  4d525f46          DCB      "MR_FAILED_MASS_DATA_HEAD_EMPTY",0
0001a8  41494c45
0001ac  445f4d41
0001b0  53535f44
0001b4  4154415f
0001b8  48454144
0001bc  5f454d50
0001c0  545900  
0001c3  00                DCB      0
0001c4  4d525f46          DCB      "MR_FAILED_MASS_DATA_DB_ABNORMAL",0
0001c8  41494c45
0001cc  445f4d41
0001d0  53535f44
0001d4  4154415f
0001d8  44425f41
0001dc  424e4f52
0001e0  4d414c00
0001e4  4d525f46          DCB      "MR_FAILED_MASS_DATA_FM_ABNORMAL",0
0001e8  41494c45
0001ec  445f4d41
0001f0  53535f44
0001f4  4154415f
0001f8  464d5f41
0001fc  424e4f52
000200  4d414c00
000204  4d525f46          DCB      "MR_FAILED_NOT_READY",0
000208  41494c45
00020c  445f4e4f
000210  545f5245
000214  41445900
000218  4d525f46          DCB      "MR_FAILED_EXISTED_USER",0
00021c  41494c45
000220  445f4558
000224  49535445
000228  445f5553
00022c  455200  
00022f  00                DCB      0
000230  4d525f46          DCB      "MR_FAILED_IDX_OVERFLOW",0
000234  41494c45
000238  445f4944
00023c  585f4f56
000240  4552464c
000244  4f5700  
000247  00                DCB      0
000248  4d525f43          DCB      "MR_CONTIUNOUS",0
00024c  4f4e5449
000250  554e4f55
000254  5300    
000256  00                DCB      0
000257  00                DCB      0
000258  4d525f53          DCB      "MR_SUCCESS_BUT_DEL_USER",0
00025c  55434345
000260  53535f42
000264  55545f44
000268  454c5f55
00026c  53455200
000270  4d525f46          DCB      "MR_FAILED_INVALID_CMD",0
000274  41494c45
000278  445f494e
00027c  56414c49
000280  445f434d
000284  4400    
000286  00                DCB      0
000287  00                DCB      0
000288  00                DCB      0

                          AREA ||.data||, DATA, ALIGN=2

                  tid_host_comm
                          DCD      0x00000000

                          AREA ||i._str_uart_reply||, COMGROUP=_str_uart_reply, CODE, READONLY, ALIGN=2

                  _str_uart_reply PROC
;;;201    #pragma diag_suppress 111
;;;202    inline char *_str_uart_reply(enum uart_reply_result result)
000000  2814              CMP      r0,#0x14
;;;203    {
;;;204        switch (result)
000002  d04e              BEQ      |L33.162|
000004  dc0d              BGT      |L33.34|
000006  2814              CMP      r0,#0x14
000008  d22d              BCS      |L33.102|
00000a  e8dff000          TBB      [pc,r0]
00000e  2e30              DCB      0x2e,0x30
000010  322c3436          DCB      0x32,0x2c,0x34,0x36
000014  383a3c3e          DCB      0x38,0x3a,0x3c,0x3e
000018  402c4244          DCB      0x40,0x2c,0x42,0x44
00001c  462c2c2c          DCB      0x46,0x2c,0x2c,0x2c
000020  2c48              DCB      0x2c,0x48
                  |L33.34|
000022  2832              CMP      r0,#0x32
000024  d04d              BEQ      |L33.194|
000026  dc10              BGT      |L33.74|
000028  2818              CMP      r0,#0x18
00002a  d042              BEQ      |L33.178|
00002c  dc06              BGT      |L33.60|
00002e  2815              CMP      r0,#0x15
000030  d039              BEQ      |L33.166|
000032  2816              CMP      r0,#0x16
000034  d039              BEQ      |L33.170|
000036  2817              CMP      r0,#0x17
000038  d115              BNE      |L33.102|
00003a  e038              B        |L33.174|
                  |L33.60|
00003c  2819              CMP      r0,#0x19
00003e  d03a              BEQ      |L33.182|
000040  2830              CMP      r0,#0x30
000042  d03a              BEQ      |L33.186|
000044  2831              CMP      r0,#0x31
000046  d10e              BNE      |L33.102|
000048  e039              B        |L33.190|
                  |L33.74|
00004a  2836              CMP      r0,#0x36
00004c  d041              BEQ      |L33.210|
00004e  dc06              BGT      |L33.94|
000050  2833              CMP      r0,#0x33
000052  d038              BEQ      |L33.198|
000054  2834              CMP      r0,#0x34
000056  d038              BEQ      |L33.202|
000058  2835              CMP      r0,#0x35
00005a  d104              BNE      |L33.102|
00005c  e037              B        |L33.206|
                  |L33.94|
00005e  2840              CMP      r0,#0x40
000060  d039              BEQ      |L33.214|
000062  28ff              CMP      r0,#0xff
000064  d039              BEQ      |L33.218|
                  |L33.102|
;;;205        {
;;;206            CMD_REPLY_RESULT_MACRO(TO_STR)
;;;207        default:
;;;208            break;
;;;209        }
;;;210        
;;;211        return "";
000066  481e              LDR      r0,|L33.224|
;;;212    }
000068  4770              BX       lr
00006a  481e              LDR      r0,|L33.228|
00006c  4770              BX       lr
00006e  481e              LDR      r0,|L33.232|
000070  4770              BX       lr
000072  481e              LDR      r0,|L33.236|
000074  4770              BX       lr
000076  481e              LDR      r0,|L33.240|
000078  4770              BX       lr
00007a  481e              LDR      r0,|L33.244|
00007c  4770              BX       lr
00007e  481e              LDR      r0,|L33.248|
000080  4770              BX       lr
000082  481e              LDR      r0,|L33.252|
000084  4770              BX       lr
000086  481e              LDR      r0,|L33.256|
000088  4770              BX       lr
00008a  481e              LDR      r0,|L33.260|
00008c  4770              BX       lr
00008e  481e              LDR      r0,|L33.264|
000090  4770              BX       lr
000092  481e              LDR      r0,|L33.268|
000094  4770              BX       lr
000096  481e              LDR      r0,|L33.272|
000098  4770              BX       lr
00009a  481e              LDR      r0,|L33.276|
00009c  4770              BX       lr
00009e  481e              LDR      r0,|L33.280|
0000a0  4770              BX       lr
                  |L33.162|
0000a2  481e              LDR      r0,|L33.284|
0000a4  4770              BX       lr
                  |L33.166|
0000a6  481e              LDR      r0,|L33.288|
0000a8  4770              BX       lr
                  |L33.170|
0000aa  481e              LDR      r0,|L33.292|
0000ac  4770              BX       lr
                  |L33.174|
0000ae  481e              LDR      r0,|L33.296|
0000b0  4770              BX       lr
                  |L33.178|
0000b2  481e              LDR      r0,|L33.300|
0000b4  4770              BX       lr
                  |L33.182|
0000b6  481e              LDR      r0,|L33.304|
0000b8  4770              BX       lr
                  |L33.186|
0000ba  481e              LDR      r0,|L33.308|
0000bc  4770              BX       lr
                  |L33.190|
0000be  481e              LDR      r0,|L33.312|
0000c0  4770              BX       lr
                  |L33.194|
0000c2  481e              LDR      r0,|L33.316|
0000c4  4770              BX       lr
                  |L33.198|
0000c6  481e              LDR      r0,|L33.320|
0000c8  4770              BX       lr
                  |L33.202|
0000ca  481e              LDR      r0,|L33.324|
0000cc  4770              BX       lr
                  |L33.206|
0000ce  481e              LDR      r0,|L33.328|
0000d0  4770              BX       lr
                  |L33.210|
0000d2  481e              LDR      r0,|L33.332|
0000d4  4770              BX       lr
                  |L33.214|
0000d6  481e              LDR      r0,|L33.336|
0000d8  4770              BX       lr
                  |L33.218|
0000da  481e              LDR      r0,|L33.340|
0000dc  4770              BX       lr
;;;213    #pragma diag_warning 111
                          ENDP

0000de  0000              DCW      0x0000
                  |L33.224|
                          DCD      ||.conststring||+0x288
                  |L33.228|
                          DCD      ||.conststring||
                  |L33.232|
                          DCD      ||.conststring||+0xc
                  |L33.236|
                          DCD      ||.conststring||+0x18
                  |L33.240|
                          DCD      ||.conststring||+0x24
                  |L33.244|
                          DCD      ||.conststring||+0x3c
                  |L33.248|
                          DCD      ||.conststring||+0x58
                  |L33.252|
                          DCD      ||.conststring||+0x70
                  |L33.256|
                          DCD      ||.conststring||+0x80
                  |L33.260|
                          DCD      ||.conststring||+0x98
                  |L33.264|
                          DCD      ||.conststring||+0xac
                  |L33.268|
                          DCD      ||.conststring||+0xc4
                  |L33.272|
                          DCD      ||.conststring||+0xe0
                  |L33.276|
                          DCD      ||.conststring||+0xf4
                  |L33.280|
                          DCD      ||.conststring||+0x10c
                  |L33.284|
                          DCD      ||.conststring||+0x120
                  |L33.288|
                          DCD      ||.conststring||+0x138
                  |L33.292|
                          DCD      ||.conststring||+0x150
                  |L33.296|
                          DCD      ||.conststring||+0x164
                  |L33.300|
                          DCD      ||.conststring||+0x178
                  |L33.304|
                          DCD      ||.conststring||+0x18c
                  |L33.308|
                          DCD      ||.conststring||+0x1a4
                  |L33.312|
                          DCD      ||.conststring||+0x1c4
                  |L33.316|
                          DCD      ||.conststring||+0x1e4
                  |L33.320|
                          DCD      ||.conststring||+0x204
                  |L33.324|
                          DCD      ||.conststring||+0x218
                  |L33.328|
                          DCD      ||.conststring||+0x230
                  |L33.332|
                          DCD      ||.conststring||+0x248
                  |L33.336|
                          DCD      ||.conststring||+0x258
                  |L33.340|
                          DCD      ||.conststring||+0x270

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\scpu\\middleware\\comm\\host_com.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_host_com_c_fe48c7dd____REV16|
#line 208 "F:\\Users\\fu\\AppData\\Local\\Arm\\Packs\\ARM\\CMSIS\\5.9.0\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___10_host_com_c_fe48c7dd____REV16| PROC
#line 209

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_host_com_c_fe48c7dd____REVSH|
#line 223
|__asm___10_host_com_c_fe48c7dd____REVSH| PROC
#line 224

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___10_host_com_c_fe48c7dd____RRX|
#line 410
|__asm___10_host_com_c_fe48c7dd____RRX| PROC
#line 411

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
