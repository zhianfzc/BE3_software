; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\objects\kdp520_spi.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\kdp520_spi.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O3 --diag_suppress=9931 -I..\..\config -I..\..\..\..\board -I..\..\..\..\common\include -I..\..\..\..\scpu\device\include\CMSIS -I..\..\..\..\scpu\device\include\Kneron -I..\..\..\..\scpu\framework\include -I..\..\..\..\scpu\framework\include\framework -I..\..\..\..\scpu\drivers\include -I..\..\..\..\scpu\drivers\include\media\touch -I..\..\..\..\scpu\drivers\include\media\flash -I..\..\..\..\scpu\lib\kdp_system\inc -I..\..\..\..\scpu\lib\kdp_application\include\ -I..\..\..\..\scpu\lib\kdp_application\base\ -I..\..\..\..\scpu\lib\kdp_application\misc -I..\..\..\..\scpu\lib\kdp_e2e_r1n1\include -I..\..\..\..\scpu\include -I..\..\..\..\scpu\middleware\ota -I..\..\..\..\scpu\middleware\comm -I..\..\..\..\scpu\middleware\kdp_comm -I..\..\..\..\scpu\share -I..\..\..\..\scpu\share\gui_lib -I..\..\user -I.\RTE\CMSIS -I.\RTE\_Target-scpu -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\RTOS2\Include -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\RTOS2\RTX\Include -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\Device\ARM\ARMCM4\Include -D__RTX -D__MICROLIB -D__UVISION_VERSION=538 -D_RTE_ -DARMCM4_FP -D_RTE_ -DARM_MATH_CM4 -DTARGET_SCPU -DLOG_ENABLE -DKL520 -DHEAD_POSE_CHECK_PERCENT --omf_browse=.\objects\kdp520_spi.crf ..\..\..\..\scpu\drivers\src\kdp520_spi.c]
                          THUMB

                          AREA ||i.kdp520_spi_initialize||, CODE, READONLY, ALIGN=2

                  kdp520_spi_initialize PROC
;;;111    
;;;112    kdp_status_t kdp520_spi_initialize(void)
000000  4913              LDR      r1,|L1.80|
;;;113    {
000002  b510              PUSH     {r4,lr}
;;;114        UINT32  reg;
;;;115        UINT32  ntemp;
;;;116        ntemp = ( 1<<8 |( 2<<6 )  );
000004  f44f70c0          MOV      r0,#0x180
;;;117    
;;;118        outw( SCU_EXTREG_PA_BASE  + 0x100 ,ntemp );
000008  f8c10100          STR      r0,[r1,#0x100]
;;;119        outw( SCU_EXTREG_PA_BASE  + 0x104 ,ntemp  );
00000c  f8c10104          STR      r0,[r1,#0x104]
;;;120        outw( SCU_EXTREG_PA_BASE  + 0x108 ,ntemp  );
000010  f8c10108          STR      r0,[r1,#0x108]
;;;121        outw( SCU_EXTREG_PA_BASE  + 0x10C ,ntemp  );
000014  f8c1010c          STR      r0,[r1,#0x10c]
;;;122    
;;;123        #if( FLASH_QUAD_EN == YES )
;;;124        outw( SCU_EXTREG_PA_BASE  + 0x110 ,ntemp  );
000018  f8c10110          STR      r0,[r1,#0x110]
;;;125        outw( SCU_EXTREG_PA_BASE  + 0x114 ,ntemp  );
00001c  f8c10114          STR      r0,[r1,#0x114]
;;;126        #endif
;;;127    
;;;128        delay_us(800);
000020  f44f7048          MOV      r0,#0x320
000024  f7fffffe          BL       delay_us
;;;129    
;;;130        //Reset SPI IP
;;;131        outw(SPI020REG_CONTROL, SPI020_ABORT);
000028  f04f4020          MOV      r0,#0xa0000000
00002c  f44f7180          MOV      r1,#0x100
000030  6101              STR      r1,[r0,#0x10]
                  |L1.50|
;;;132        /* Wait reset completion */
;;;133        do {
;;;134            if((inl(SPI020REG_CONTROL)&SPI020_ABORT)==0x00)
000032  6901              LDR      r1,[r0,#0x10]
000034  05c9              LSLS     r1,r1,#23
000036  d4fc              BMI      |L1.50|
;;;135            break;
;;;136        } while(1);
;;;137    
;;;138        /* Set control register */
;;;139        reg = inl(SPI020REG_CONTROL);
000038  6901              LDR      r1,[r0,#0x10]
;;;140        reg &= ~(SPI020_CLK_MODE | SPI020_CLK_DIVIDER);
00003a  f0210113          BIC      r1,r1,#0x13
;;;141        
;;;142        #if SPI_BUS_SPEED == SPI_BUS_SPEED_100MHZ
;;;143            reg |= SPI_CLK_MODE0 | SPI_CLK_DIVIDER_2;
;;;144        #elif SPI_BUS_SPEED == SPI_BUS_SPEED_50MHZ
;;;145            reg |= SPI_CLK_MODE0 | SPI_CLK_DIVIDER_4;
;;;146        #elif SPI_BUS_SPEED == SPI_BUS_SPEED_25MHZ
;;;147            reg |= SPI_CLK_MODE0 | SPI_CLK_DIVIDER_8;
;;;148        #endif
;;;149        outw( SPI020REG_CONTROL, reg );
00003e  6101              STR      r1,[r0,#0x10]
;;;150        
;;;151        kdp520_spi_pre_log();
000040  f7fffffe          BL       kdp520_spi_pre_log
;;;152    
;;;153    #if (FLASH_WORKING_EN == 0)
;;;154        #if( FLASH_QUAD_EN == YES )
;;;155        kdp520_flash_quad_enable(1);
;;;156        #endif
;;;157    #else
;;;158        #if( FLASH_QUAD_EN == YES )
;;;159        nor_flash_quad_mode_en(1);
000044  2001              MOVS     r0,#1
000046  f7fffffe          BL       nor_flash_quad_mode_en
;;;160        #endif
;;;161    #endif
;;;162        return KDP_STATUS_OK;
00004a  2001              MOVS     r0,#1
;;;163    }
00004c  bd10              POP      {r4,pc}
;;;164    
                          ENDP

00004e  0000              DCW      0x0000
                  |L1.80|
                          DCD      0xc2380000

                          AREA ||i.kdp520_spi_pre_log||, CODE, READONLY, ALIGN=2

                  kdp520_spi_pre_log PROC
;;;179    UINT32  gflash_clock_log;
;;;180    void kdp520_spi_pre_log( void )
000000  f04f4020          MOV      r0,#0xa0000000
;;;181    {
;;;182        gflash_clock_log = inw( SPI020REG_CONTROL );
000004  6900              LDR      r0,[r0,#0x10]
000006  4901              LDR      r1,|L2.12|
000008  6008              STR      r0,[r1,#0]  ; gflash_clock_log
;;;183    }
00000a  4770              BX       lr
;;;184    
                          ENDP

                  |L2.12|
                          DCD      ||.data||

                          AREA ||i.kdp520_spi_read_Rx_FIFO||, CODE, READONLY, ALIGN=1

                  kdp520_spi_read_Rx_FIFO PROC
;;;95     
;;;96     void kdp520_spi_read_Rx_FIFO( UINT32 *buf_word, UINT32 *buf_word_index, UINT32 target_byte )
000000  b530              PUSH     {r4,r5,lr}
;;;97     {
;;;98         UINT32 temp = target_byte;
;;;99         while( 1 )
;;;100        {
;;;101            while ( (inl((INT8U * )SPI020REG_STATUS) & SPI020_RXFIFO_READY) == 0 );
000002  f04f4420          MOV      r4,#0xa0000000
                  |L3.6|
000006  69a3              LDR      r3,[r4,#0x18]
000008  079b              LSLS     r3,r3,#30
00000a  d5fc              BPL      |L3.6|
;;;102            *( buf_word + *buf_word_index )= inl( ( UINT8 * )SPI020REG_DATAPORT );
00000c  f8d43100          LDR      r3,[r4,#0x100]
000010  680d              LDR      r5,[r1,#0]
000012  f8403025          STR      r3,[r0,r5,LSL #2]
;;;103            *buf_word_index = (*buf_word_index) + 1;
000016  680b              LDR      r3,[r1,#0]
000018  1c5b              ADDS     r3,r3,#1
;;;104            if( ( (*buf_word_index)*4 ) >= temp )
00001a  600b              STR      r3,[r1,#0]
00001c  ebb20f83          CMP      r2,r3,LSL #2
000020  d8f1              BHI      |L3.6|
;;;105            {
;;;106                return;
;;;107            }
;;;108        }
;;;109    }
000022  bd30              POP      {r4,r5,pc}
;;;110    
                          ENDP


                          AREA ||i.kdp520_spi_rxfifo_depth||, CODE, READONLY, ALIGN=1

                  kdp520_spi_rxfifo_depth PROC
;;;34     /* Get the rx fifo depth, unit in byte */
;;;35     UINT32 kdp520_spi_rxfifo_depth(void)
000000  f04f4020          MOV      r0,#0xa0000000
;;;36     {
;;;37         return ((inl((INT8U * )SPI020REG_FEATURE) & SPI020_RX_DEPTH) >> (8-2));
000004  6d40              LDR      r0,[r0,#0x54]
000006  f44f717f          MOV      r1,#0x3fc
00000a  ea011090          AND      r0,r1,r0,LSR #6
;;;38     }
00000e  4770              BX       lr
;;;39     
                          ENDP


                          AREA ||i.kdp520_spi_set_commands||, CODE, READONLY, ALIGN=1

                  kdp520_spi_set_commands PROC
;;;74     
;;;75     void kdp520_spi_set_commands(UINT32 cmd0, UINT32 cmd1, UINT32 cmd2, UINT32 cmd3)
000000  b510              PUSH     {r4,lr}
;;;76     {
;;;77         outw((INT8U * )SPI020REG_CMD0, cmd0);
000002  f04f4420          MOV      r4,#0xa0000000
000006  6020              STR      r0,[r4,#0]
;;;78         outw((INT8U * )SPI020REG_CMD1, cmd1);
000008  6061              STR      r1,[r4,#4]
;;;79         outw((INT8U * )SPI020REG_CMD2, cmd2);
00000a  60a2              STR      r2,[r4,#8]
;;;80         outw((INT8U * )SPI020REG_CMD3, cmd3);
00000c  60e3              STR      r3,[r4,#0xc]
;;;81     }
00000e  bd10              POP      {r4,pc}
;;;82     void kdp520_spi_write_Tx_FIFO( UINT8 *buf, UINT32 length )
                          ENDP


                          AREA ||i.kdp520_spi_switch_fail||, CODE, READONLY, ALIGN=1

                  kdp520_spi_switch_fail PROC
;;;184    
;;;185    void kdp520_spi_switch_fail( void )
000000  f04f4020          MOV      r0,#0xa0000000
;;;186    {
;;;187        UINT32  reg ;
;;;188        //  //Reset SPI IP
;;;189        outw(SPI020REG_CONTROL, SPI020_ABORT);
000004  f44f7180          MOV      r1,#0x100
000008  6101              STR      r1,[r0,#0x10]
                  |L6.10|
;;;190        /* Wait reset completion */
;;;191        do {
;;;192            if((inl(SPI020REG_CONTROL)&SPI020_ABORT)==0x00)
00000a  6901              LDR      r1,[r0,#0x10]
00000c  05c9              LSLS     r1,r1,#23
00000e  d4fc              BMI      |L6.10|
;;;193                break;
;;;194        } while(1);
;;;195        /* Set control register */
;;;196        reg = inl(SPI020REG_CONTROL);
000010  6901              LDR      r1,[r0,#0x10]
;;;197        reg &= ~(SPI020_CLK_MODE | SPI020_CLK_DIVIDER);
000012  f0210113          BIC      r1,r1,#0x13
;;;198        reg |= SPI_CLK_MODE0 | SPI_CLK_DIVIDER_4;
000016  f0410101          ORR      r1,r1,#1
;;;199        outw( SPI020REG_CONTROL, reg );
00001a  6101              STR      r1,[r0,#0x10]
;;;200    }
00001c  4770              BX       lr
;;;201    
                          ENDP


                          AREA ||i.kdp520_spi_switch_org||, CODE, READONLY, ALIGN=2

                  kdp520_spi_switch_org PROC
;;;201    
;;;202    void kdp520_spi_switch_org( void )
000000  f04f4020          MOV      r0,#0xa0000000
;;;203    {
;;;204        //  Reset SPI IP
;;;205        outw(SPI020REG_CONTROL, SPI020_ABORT);
000004  f44f7180          MOV      r1,#0x100
000008  6101              STR      r1,[r0,#0x10]
                  |L7.10|
;;;206        /* Wait reset completion */
;;;207        do {
;;;208            if( (inl(SPI020REG_CONTROL)&SPI020_ABORT) == 0x00 )
00000a  6901              LDR      r1,[r0,#0x10]
00000c  05c9              LSLS     r1,r1,#23
00000e  d4fc              BMI      |L7.10|
;;;209                break;
;;;210        } while(1);
;;;211        outw( SPI020REG_CONTROL, gflash_clock_log );
000010  4901              LDR      r1,|L7.24|
000012  6809              LDR      r1,[r1,#0]  ; gflash_clock_log
000014  6101              STR      r1,[r0,#0x10]
;;;212    }
000016  4770              BX       lr
;;;213    
                          ENDP

                  |L7.24|
                          DCD      ||.data||

                          AREA ||i.kdp520_spi_txfifo_depth||, CODE, READONLY, ALIGN=1

                  kdp520_spi_txfifo_depth PROC
;;;40     /* Get the tx fifo depth, unit in byte */
;;;41     UINT32 kdp520_spi_txfifo_depth(void)
000000  f04f4020          MOV      r0,#0xa0000000
;;;42     {
;;;43         return ((inl((INT8U * )SPI020REG_FEATURE) & SPI020_TX_DEPTH) << 2);
000004  6d40              LDR      r0,[r0,#0x54]
000006  0600              LSLS     r0,r0,#24
000008  0d80              LSRS     r0,r0,#22
;;;44     }
00000a  4770              BX       lr
;;;45     
                          ENDP


                          AREA ||i.kdp520_spi_wait_command_complete||, CODE, READONLY, ALIGN=1

                  kdp520_spi_wait_command_complete PROC
;;;165    /* Wait until command complete */
;;;166    void kdp520_spi_wait_command_complete(void)
000000  f04f4020          MOV      r0,#0xa0000000
                  |L9.4|
;;;167    {
;;;168        UINT32  reg;
;;;169    
;;;170        do {
;;;171            reg = inl((INT8U * )SPI020REG_INTR_ST);
000004  6a41              LDR      r1,[r0,#0x24]
;;;172        } while ((reg & SPI020_CMD_CMPLT)==0x0);
000006  07c9              LSLS     r1,r1,#31
000008  d0fc              BEQ      |L9.4|
;;;173        outw((INT8U * )SPI020REG_INTR_ST, SPI020_CMD_CMPLT);/* clear command complete status */
00000a  2101              MOVS     r1,#1
00000c  6241              STR      r1,[r0,#0x24]
;;;174    }
00000e  4770              BX       lr
;;;175    
                          ENDP


                          AREA ||i.kdp520_spi_wait_rx_full||, CODE, READONLY, ALIGN=1

                  kdp520_spi_wait_rx_full PROC
;;;46     /* Wait until the rx fifo ready */
;;;47     void kdp520_spi_wait_rx_full(void)
000000  f04f4020          MOV      r0,#0xa0000000
                  |L10.4|
;;;48     {
;;;49         while(!(inl((INT8U * )SPI020REG_STATUS) & SPI020_RXFIFO_READY));
000004  6981              LDR      r1,[r0,#0x18]
000006  0789              LSLS     r1,r1,#30
000008  d5fc              BPL      |L10.4|
;;;50     }
00000a  4770              BX       lr
;;;51     
                          ENDP


                          AREA ||i.kdp520_spi_wait_tx_empty||, CODE, READONLY, ALIGN=1

                  kdp520_spi_wait_tx_empty PROC
;;;69     /* Wait until the tx fifo ready */
;;;70     void kdp520_spi_wait_tx_empty(void)
000000  f04f4020          MOV      r0,#0xa0000000
                  |L11.4|
;;;71     {
;;;72         while(!(inl((INT8U * )SPI020REG_STATUS) & SPI020_TXFIFO_READY));
000004  6981              LDR      r1,[r0,#0x18]
000006  07c9              LSLS     r1,r1,#31
000008  d0fc              BEQ      |L11.4|
;;;73     }
00000a  4770              BX       lr
;;;74     
                          ENDP


                          AREA ||i.kdp520_spi_write_Tx_FIFO||, CODE, READONLY, ALIGN=2

                  kdp520_spi_write_Tx_FIFO PROC
;;;81     }
;;;82     void kdp520_spi_write_Tx_FIFO( UINT8 *buf, UINT32 length )
000000  b530              PUSH     {r4,r5,lr}
;;;83     {
000002  460c              MOV      r4,r1
000004  4603              MOV      r3,r0
;;;84         INT32  access_byte = 0;
000006  2200              MOVS     r2,#0
;;;85         /* This function assume length is multiple of 4 */
;;;86         while( access_byte < length )
;;;87         {
;;;88             kdp520_spi_wait_tx_empty();
;;;89             outw((INT8U * )SPI020REG_DATAPORT, *((UINT32 *)buf));
000008  f04f4520          MOV      r5,#0xa0000000
00000c  e006              B        |L12.28|
00000e  bf00              NOP                            ;88
                  |L12.16|
000010  f7fffffe          BL       kdp520_spi_wait_tx_empty
000014  cb01              LDM      r3!,{r0}
000016  f8c50100          STR      r0,[r5,#0x100]
00001a  1d12              ADDS     r2,r2,#4
                  |L12.28|
00001c  42a2              CMP      r2,r4                 ;86
00001e  d3f7              BCC      |L12.16|
;;;90             buf+= 4;
;;;91             access_byte +=4;
;;;92         }
;;;93     }
000020  bd30              POP      {r4,r5,pc}
;;;94     
                          ENDP


                          AREA ||i.kdp520_spi_write_data||, CODE, READONLY, ALIGN=1

                  kdp520_spi_write_data PROC
;;;51     
;;;52     void kdp520_spi_write_data(UINT8 *buf, UINT32 length)
000000  b510              PUSH     {r4,lr}
;;;53     {
000002  460a              MOV      r2,r1
000004  4603              MOV      r3,r0
;;;54         INT32  access_byte;
;;;55     
;;;56         /* This function assume length is multiple of 4 */
;;;57         while(length > 0) {
;;;58             kdp520_spi_wait_tx_empty();
;;;59             access_byte = GET_MIN(length, kdp520_spi_txfifo_depth());
;;;60             length -= access_byte;
;;;61             while(access_byte > 0) {
;;;62                 outw((INT8U * )SPI020REG_DATAPORT, *((UINT32 *)buf));
000006  f04f4420          MOV      r4,#0xa0000000
00000a  e00e              B        |L13.42|
                  |L13.12|
00000c  f7fffffe          BL       kdp520_spi_wait_tx_empty
000010  f7fffffe          BL       kdp520_spi_txfifo_depth
000014  4282              CMP      r2,r0                 ;59
000016  d200              BCS      |L13.26|
000018  4610              MOV      r0,r2                 ;59
                  |L13.26|
00001a  1a12              SUBS     r2,r2,r0              ;60
00001c  e003              B        |L13.38|
                  |L13.30|
00001e  cb02              LDM      r3!,{r1}
000020  f8c41100          STR      r1,[r4,#0x100]
000024  1f00              SUBS     r0,r0,#4
                  |L13.38|
000026  2800              CMP      r0,#0                 ;61
000028  dcf9              BGT      |L13.30|
                  |L13.42|
00002a  2a00              CMP      r2,#0                 ;57
00002c  d1ee              BNE      |L13.12|
;;;63                 buf += 4;
;;;64                 access_byte -= 4;
;;;65             }
;;;66         }
;;;67     }
00002e  bd10              POP      {r4,pc}
;;;68     
                          ENDP


                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  4d525f53          DCB      "MR_SUCCESS",0
000004  55434345
000008  535300  
00000b  00                DCB      0
00000c  4d525f52          DCB      "MR_REJECTED",0
000010  454a4543
000014  54454400
000018  4d525f41          DCB      "MR_ABORTED",0
00001c  424f5254
000020  454400  
000023  00                DCB      0
000024  4d525f46          DCB      "MR_FAILED_DEV_OPEN_FAIL",0
000028  41494c45
00002c  445f4445
000030  565f4f50
000034  454e5f46
000038  41494c00
00003c  4d525f46          DCB      "MR_FAILED_UNKNOWN_REASON",0
000040  41494c45
000044  445f554e
000048  4b4e4f57
00004c  4e5f5245
000050  41534f4e
000054  00      
000055  00                DCB      0
000056  00                DCB      0
000057  00                DCB      0
000058  4d525f46          DCB      "MR_FAILED_INVALID_PARAM",0
00005c  41494c45
000060  445f494e
000064  56414c49
000068  445f5041
00006c  52414d00
000070  4d525f46          DCB      "MR_FAILED_OOM",0
000074  41494c45
000078  445f4f4f
00007c  4d00    
00007e  00                DCB      0
00007f  00                DCB      0
000080  4d525f46          DCB      "MR_FAILED_UNKNOWN_USER",0
000084  41494c45
000088  445f554e
00008c  4b4e4f57
000090  4e5f5553
000094  455200  
000097  00                DCB      0
000098  4d525f46          DCB      "MR_FAILED_MAX_USER",0
00009c  41494c45
0000a0  445f4d41
0000a4  585f5553
0000a8  455200  
0000ab  00                DCB      0
0000ac  4d525f46          DCB      "MR_FAILED_FACE_ENROLLED",0
0000b0  41494c45
0000b4  445f4641
0000b8  43455f45
0000bc  4e524f4c
0000c0  4c454400
0000c4  4d525f46          DCB      "MR_FAILED_LIVENESS_CHECK",0
0000c8  41494c45
0000cc  445f4c49
0000d0  56454e45
0000d4  53535f43
0000d8  4845434b
0000dc  00      
0000dd  00                DCB      0
0000de  00                DCB      0
0000df  00                DCB      0
0000e0  4d525f46          DCB      "MR_FAILED_TIME_OUT",0
0000e4  41494c45
0000e8  445f5449
0000ec  4d455f4f
0000f0  555400  
0000f3  00                DCB      0
0000f4  4d525f46          DCB      "MR_FAILED_AUTHORIZATION",0
0000f8  41494c45
0000fc  445f4155
000100  54484f52
000104  495a4154
000108  494f4e00
00010c  4d525f46          DCB      "MR_FAILED_READ_FILE",0
000110  41494c45
000114  445f5245
000118  41445f46
00011c  494c4500
000120  4d525f46          DCB      "MR_FAILED_WRITE_FILE",0
000124  41494c45
000128  445f5752
00012c  4954455f
000130  46494c45
000134  00      
000135  00                DCB      0
000136  00                DCB      0
000137  00                DCB      0
000138  4d525f46          DCB      "MR_FAILED_NO_ENCRYPT",0
00013c  41494c45
000140  445f4e4f
000144  5f454e43
000148  52595054
00014c  00      
00014d  00                DCB      0
00014e  00                DCB      0
00014f  00                DCB      0
000150  4d525f46          DCB      "MR_FAILED_STORE_ERR",0
000154  41494c45
000158  445f5354
00015c  4f52455f
000160  45525200
000164  4d525f46          DCB      "MR_FAILED_NO_IMG",0
000168  41494c45
00016c  445f4e4f
000170  5f494d47
000174  00      
000175  00                DCB      0
000176  00                DCB      0
000177  00                DCB      0
000178  4d525f46          DCB      "MR_FAILED_NO_IDX",0
00017c  41494c45
000180  445f4e4f
000184  5f494458
000188  00      
000189  00                DCB      0
00018a  00                DCB      0
00018b  00                DCB      0
00018c  4d525f46          DCB      "MR_FAILED_BUF_OVERFLOW",0
000190  41494c45
000194  445f4255
000198  465f4f56
00019c  4552464c
0001a0  4f5700  
0001a3  00                DCB      0
0001a4  4d525f46          DCB      "MR_FAILED_MASS_DATA_HEAD_EMPTY",0
0001a8  41494c45
0001ac  445f4d41
0001b0  53535f44
0001b4  4154415f
0001b8  48454144
0001bc  5f454d50
0001c0  545900  
0001c3  00                DCB      0
0001c4  4d525f46          DCB      "MR_FAILED_MASS_DATA_DB_ABNORMAL",0
0001c8  41494c45
0001cc  445f4d41
0001d0  53535f44
0001d4  4154415f
0001d8  44425f41
0001dc  424e4f52
0001e0  4d414c00
0001e4  4d525f46          DCB      "MR_FAILED_MASS_DATA_FM_ABNORMAL",0
0001e8  41494c45
0001ec  445f4d41
0001f0  53535f44
0001f4  4154415f
0001f8  464d5f41
0001fc  424e4f52
000200  4d414c00
000204  4d525f46          DCB      "MR_FAILED_NOT_READY",0
000208  41494c45
00020c  445f4e4f
000210  545f5245
000214  41445900
000218  4d525f46          DCB      "MR_FAILED_EXISTED_USER",0
00021c  41494c45
000220  445f4558
000224  49535445
000228  445f5553
00022c  455200  
00022f  00                DCB      0
000230  4d525f46          DCB      "MR_FAILED_IDX_OVERFLOW",0
000234  41494c45
000238  445f4944
00023c  585f4f56
000240  4552464c
000244  4f5700  
000247  00                DCB      0
000248  4d525f43          DCB      "MR_CONTIUNOUS",0
00024c  4f4e5449
000250  554e4f55
000254  5300    
000256  00                DCB      0
000257  00                DCB      0
000258  4d525f53          DCB      "MR_SUCCESS_BUT_DEL_USER",0
00025c  55434345
000260  53535f42
000264  55545f44
000268  454c5f55
00026c  53455200
000270  4d525f46          DCB      "MR_FAILED_INVALID_CMD",0
000274  41494c45
000278  445f494e
00027c  56414c49
000280  445f434d
000284  4400    
000286  00                DCB      0
000287  00                DCB      0
000288  00                DCB      0

                          AREA ||.data||, DATA, ALIGN=2

                  gflash_clock_log
                          DCD      0x00000000

                          AREA ||i._str_uart_reply||, COMGROUP=_str_uart_reply, CODE, READONLY, ALIGN=2

                  _str_uart_reply PROC
;;;201    #pragma diag_suppress 111
;;;202    inline char *_str_uart_reply(enum uart_reply_result result)
000000  2814              CMP      r0,#0x14
;;;203    {
;;;204        switch (result)
000002  d04e              BEQ      |L86.162|
000004  dc0d              BGT      |L86.34|
000006  2814              CMP      r0,#0x14
000008  d22d              BCS      |L86.102|
00000a  e8dff000          TBB      [pc,r0]
00000e  2e30              DCB      0x2e,0x30
000010  322c3436          DCB      0x32,0x2c,0x34,0x36
000014  383a3c3e          DCB      0x38,0x3a,0x3c,0x3e
000018  402c4244          DCB      0x40,0x2c,0x42,0x44
00001c  462c2c2c          DCB      0x46,0x2c,0x2c,0x2c
000020  2c48              DCB      0x2c,0x48
                  |L86.34|
000022  2832              CMP      r0,#0x32
000024  d04d              BEQ      |L86.194|
000026  dc10              BGT      |L86.74|
000028  2818              CMP      r0,#0x18
00002a  d042              BEQ      |L86.178|
00002c  dc06              BGT      |L86.60|
00002e  2815              CMP      r0,#0x15
000030  d039              BEQ      |L86.166|
000032  2816              CMP      r0,#0x16
000034  d039              BEQ      |L86.170|
000036  2817              CMP      r0,#0x17
000038  d115              BNE      |L86.102|
00003a  e038              B        |L86.174|
                  |L86.60|
00003c  2819              CMP      r0,#0x19
00003e  d03a              BEQ      |L86.182|
000040  2830              CMP      r0,#0x30
000042  d03a              BEQ      |L86.186|
000044  2831              CMP      r0,#0x31
000046  d10e              BNE      |L86.102|
000048  e039              B        |L86.190|
                  |L86.74|
00004a  2836              CMP      r0,#0x36
00004c  d041              BEQ      |L86.210|
00004e  dc06              BGT      |L86.94|
000050  2833              CMP      r0,#0x33
000052  d038              BEQ      |L86.198|
000054  2834              CMP      r0,#0x34
000056  d038              BEQ      |L86.202|
000058  2835              CMP      r0,#0x35
00005a  d104              BNE      |L86.102|
00005c  e037              B        |L86.206|
                  |L86.94|
00005e  2840              CMP      r0,#0x40
000060  d039              BEQ      |L86.214|
000062  28ff              CMP      r0,#0xff
000064  d039              BEQ      |L86.218|
                  |L86.102|
;;;205        {
;;;206            CMD_REPLY_RESULT_MACRO(TO_STR)
;;;207        default:
;;;208            break;
;;;209        }
;;;210        
;;;211        return "";
000066  481e              LDR      r0,|L86.224|
;;;212    }
000068  4770              BX       lr
00006a  481e              LDR      r0,|L86.228|
00006c  4770              BX       lr
00006e  481e              LDR      r0,|L86.232|
000070  4770              BX       lr
000072  481e              LDR      r0,|L86.236|
000074  4770              BX       lr
000076  481e              LDR      r0,|L86.240|
000078  4770              BX       lr
00007a  481e              LDR      r0,|L86.244|
00007c  4770              BX       lr
00007e  481e              LDR      r0,|L86.248|
000080  4770              BX       lr
000082  481e              LDR      r0,|L86.252|
000084  4770              BX       lr
000086  481e              LDR      r0,|L86.256|
000088  4770              BX       lr
00008a  481e              LDR      r0,|L86.260|
00008c  4770              BX       lr
00008e  481e              LDR      r0,|L86.264|
000090  4770              BX       lr
000092  481e              LDR      r0,|L86.268|
000094  4770              BX       lr
000096  481e              LDR      r0,|L86.272|
000098  4770              BX       lr
00009a  481e              LDR      r0,|L86.276|
00009c  4770              BX       lr
00009e  481e              LDR      r0,|L86.280|
0000a0  4770              BX       lr
                  |L86.162|
0000a2  481e              LDR      r0,|L86.284|
0000a4  4770              BX       lr
                  |L86.166|
0000a6  481e              LDR      r0,|L86.288|
0000a8  4770              BX       lr
                  |L86.170|
0000aa  481e              LDR      r0,|L86.292|
0000ac  4770              BX       lr
                  |L86.174|
0000ae  481e              LDR      r0,|L86.296|
0000b0  4770              BX       lr
                  |L86.178|
0000b2  481e              LDR      r0,|L86.300|
0000b4  4770              BX       lr
                  |L86.182|
0000b6  481e              LDR      r0,|L86.304|
0000b8  4770              BX       lr
                  |L86.186|
0000ba  481e              LDR      r0,|L86.308|
0000bc  4770              BX       lr
                  |L86.190|
0000be  481e              LDR      r0,|L86.312|
0000c0  4770              BX       lr
                  |L86.194|
0000c2  481e              LDR      r0,|L86.316|
0000c4  4770              BX       lr
                  |L86.198|
0000c6  481e              LDR      r0,|L86.320|
0000c8  4770              BX       lr
                  |L86.202|
0000ca  481e              LDR      r0,|L86.324|
0000cc  4770              BX       lr
                  |L86.206|
0000ce  481e              LDR      r0,|L86.328|
0000d0  4770              BX       lr
                  |L86.210|
0000d2  481e              LDR      r0,|L86.332|
0000d4  4770              BX       lr
                  |L86.214|
0000d6  481e              LDR      r0,|L86.336|
0000d8  4770              BX       lr
                  |L86.218|
0000da  481e              LDR      r0,|L86.340|
0000dc  4770              BX       lr
;;;213    #pragma diag_warning 111
                          ENDP

0000de  0000              DCW      0x0000
                  |L86.224|
                          DCD      ||.conststring||+0x288
                  |L86.228|
                          DCD      ||.conststring||
                  |L86.232|
                          DCD      ||.conststring||+0xc
                  |L86.236|
                          DCD      ||.conststring||+0x18
                  |L86.240|
                          DCD      ||.conststring||+0x24
                  |L86.244|
                          DCD      ||.conststring||+0x3c
                  |L86.248|
                          DCD      ||.conststring||+0x58
                  |L86.252|
                          DCD      ||.conststring||+0x70
                  |L86.256|
                          DCD      ||.conststring||+0x80
                  |L86.260|
                          DCD      ||.conststring||+0x98
                  |L86.264|
                          DCD      ||.conststring||+0xac
                  |L86.268|
                          DCD      ||.conststring||+0xc4
                  |L86.272|
                          DCD      ||.conststring||+0xe0
                  |L86.276|
                          DCD      ||.conststring||+0xf4
                  |L86.280|
                          DCD      ||.conststring||+0x10c
                  |L86.284|
                          DCD      ||.conststring||+0x120
                  |L86.288|
                          DCD      ||.conststring||+0x138
                  |L86.292|
                          DCD      ||.conststring||+0x150
                  |L86.296|
                          DCD      ||.conststring||+0x164
                  |L86.300|
                          DCD      ||.conststring||+0x178
                  |L86.304|
                          DCD      ||.conststring||+0x18c
                  |L86.308|
                          DCD      ||.conststring||+0x1a4
                  |L86.312|
                          DCD      ||.conststring||+0x1c4
                  |L86.316|
                          DCD      ||.conststring||+0x1e4
                  |L86.320|
                          DCD      ||.conststring||+0x204
                  |L86.324|
                          DCD      ||.conststring||+0x218
                  |L86.328|
                          DCD      ||.conststring||+0x230
                  |L86.332|
                          DCD      ||.conststring||+0x248
                  |L86.336|
                          DCD      ||.conststring||+0x258
                  |L86.340|
                          DCD      ||.conststring||+0x270

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\scpu\\drivers\\src\\kdp520_spi.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___12_kdp520_spi_c_acd53c85____REV16|
#line 208 "F:\\Users\\fu\\AppData\\Local\\Arm\\Packs\\ARM\\CMSIS\\5.9.0\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___12_kdp520_spi_c_acd53c85____REV16| PROC
#line 209

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___12_kdp520_spi_c_acd53c85____REVSH|
#line 223
|__asm___12_kdp520_spi_c_acd53c85____REVSH| PROC
#line 224

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___12_kdp520_spi_c_acd53c85____RRX|
#line 410
|__asm___12_kdp520_spi_c_acd53c85____RRX| PROC
#line 411

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
