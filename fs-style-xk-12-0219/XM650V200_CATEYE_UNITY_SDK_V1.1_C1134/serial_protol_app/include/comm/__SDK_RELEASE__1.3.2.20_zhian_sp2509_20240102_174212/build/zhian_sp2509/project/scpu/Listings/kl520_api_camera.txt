; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\objects\kl520_api_camera.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\kl520_api_camera.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O3 --diag_suppress=9931 -I..\..\config -I..\..\..\..\board -I..\..\..\..\common\include -I..\..\..\..\scpu\device\include\CMSIS -I..\..\..\..\scpu\device\include\Kneron -I..\..\..\..\scpu\framework\include -I..\..\..\..\scpu\framework\include\framework -I..\..\..\..\scpu\drivers\include -I..\..\..\..\scpu\drivers\include\media\touch -I..\..\..\..\scpu\drivers\include\media\flash -I..\..\..\..\scpu\lib\kdp_system\inc -I..\..\..\..\scpu\lib\kdp_application\include\ -I..\..\..\..\scpu\lib\kdp_application\base\ -I..\..\..\..\scpu\lib\kdp_application\misc -I..\..\..\..\scpu\lib\kdp_e2e_r1n1\include -I..\..\..\..\scpu\include -I..\..\..\..\scpu\middleware\ota -I..\..\..\..\scpu\middleware\comm -I..\..\..\..\scpu\middleware\kdp_comm -I..\..\..\..\scpu\share -I..\..\..\..\scpu\share\gui_lib -I..\..\user -I.\RTE\CMSIS -I.\RTE\_Target-scpu -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\RTOS2\Include -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\RTOS2\RTX\Include -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\Device\ARM\ARMCM4\Include -D__RTX -D__MICROLIB -D__UVISION_VERSION=538 -D_RTE_ -DARMCM4_FP -D_RTE_ -DARM_MATH_CM4 -DTARGET_SCPU -DLOG_ENABLE -DKL520 -DHEAD_POSE_CHECK_PERCENT --omf_browse=.\objects\kl520_api_camera.crf ..\..\..\..\scpu\share\kl520_api_camera.c]
                          THUMB

                          AREA ||i._api_camera_open||, CODE, READONLY, ALIGN=2

                  _api_camera_open PROC
;;;563    
;;;564    static int _api_camera_open(u8 nIdx)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;565    {
000004  0005              MOVS     r5,r0
;;;566        int ret = 0;
;;;567        unsigned int width;
;;;568        unsigned int height;
;;;569        unsigned int pixelformat;
;;;570        struct cam_capability cap;
;;;571        struct cam_format fmt;
;;;572    
;;;573        char fmtstr[8];
;;;574    
;;;575        if ( nIdx == 0 )
;;;576        {
;;;577            if ( m_cb_camera0_power_on )
;;;578            {
;;;579                m_cb_camera0_power_on();
;;;580            }
;;;581    
;;;582            kdp_api_camera_on_0();
;;;583    
;;;584    #if IMGSRC_0_RES == RES_640_480
;;;585            width = VGA_LANDSCAPE_WIDTH;
;;;586            height = VGA_LANDSCAPE_HEIGHT;
;;;587    #elif IMGSRC_0_RES == RES_480_640
;;;588            width = VGA_PORTRAIT_WIDTH;
;;;589            height = VGA_PORTRAIT_HEIGHT;
;;;590    #elif IMGSRC_0_RES == RES_480_272
;;;591            width = TFT43_WIDTH;
;;;592            height = TFT43_HEIGHT;
;;;593    #elif IMGSRC_0_RES == RES_864_491
;;;594            width = HMX_RICA_WIDTH;
;;;595            height = HMX_RICA_HEIGHT;
;;;596    #elif IMGSRC_0_RES == RES_1600_1200
;;;597            width = UGA_WIDTH;
;;;598            height = UGA_HEIGHT;
;;;599    #elif IMGSRC_0_RES == RES_1080_1280
;;;600            width = SC132_FULL_RES_WIDTH;
;;;601            height = SC132_FULL_RES_HEIGHT;
;;;602    #else
;;;603            width = CFG_SENSOR_0_WIDTH;
;;;604            height = CFG_SENSOR_0_HEIGHT;
;;;605    #endif
;;;606    
;;;607    #if IMGSRC_0_FORMAT == IMAGE_FORMAT_RGB565
;;;608            pixelformat = V2K_PIX_FMT_RGB565;
;;;609    #elif IMGSRC_0_FORMAT == IMAGE_FORMAT_RAW10
;;;610            pixelformat = V2K_PIX_FMT_RAW10;
;;;611    #elif IMGSRC_0_FORMAT == IMAGE_FORMAT_RAW8
;;;612            pixelformat = V2K_PIX_FMT_RAW8;
000006  f8dfb0fc          LDR      r11,|L1.260|
00000a  483f              LDR      r0,|L1.264|
00000c  b093              SUB      sp,sp,#0x4c           ;565
00000e  f04f0400          MOV      r4,#0                 ;566
000012  f44f7948          MOV      r9,#0x320             ;603
000016  f44f7a16          MOV      r10,#0x258            ;604
00001a  d002              BEQ      |L1.34|
;;;613    #endif
;;;614        }
;;;615        else if ( nIdx == 1 )
00001c  2d01              CMP      r5,#1
00001e  d006              BEQ      |L1.46|
000020  e00d              B        |L1.62|
                  |L1.34|
000022  6800              LDR      r0,[r0,#0]            ;577  ; m_cb_camera0_power_on
000024  b100              CBZ      r0,|L1.40|
000026  4780              BLX      r0                    ;579
                  |L1.40|
000028  f7fffffe          BL       kdp_api_camera_on_0
00002c  e004              B        |L1.56|
                  |L1.46|
;;;616        {
;;;617            if (m_cb_camera1_power_on)
00002e  6880              LDR      r0,[r0,#8]  ; m_cb_camera1_power_on
000030  b100              CBZ      r0,|L1.52|
;;;618            {
;;;619                m_cb_camera1_power_on();
000032  4780              BLX      r0
                  |L1.52|
;;;620            }
;;;621    
;;;622            kdp_api_camera_on_1();
000034  f7fffffe          BL       kdp_api_camera_on_1
                  |L1.56|
;;;623    
;;;624    #if IMGSRC_1_RES == RES_640_480
;;;625            width = VGA_LANDSCAPE_WIDTH;
;;;626            height = VGA_LANDSCAPE_HEIGHT;
;;;627    #elif IMGSRC_1_RES == RES_480_640
;;;628            width = VGA_PORTRAIT_WIDTH;
;;;629            height = VGA_PORTRAIT_HEIGHT;
;;;630    #elif IMGSRC_1_RES == RES_480_272
;;;631            width = TFT43_WIDTH;
;;;632            height = TFT43_HEIGHT;
;;;633    #elif IMGSRC_1_RES == RES_864_491
;;;634            width = HMX_RICA_WIDTH;
;;;635            height = HMX_RICA_HEIGHT;
;;;636    #elif IMGSRC_1_RES == RES_1600_1200
;;;637            width = UGA_WIDTH;
;;;638            height = UGA_HEIGHT;
;;;639    #elif IMGSRC_1_RES == RES_1080_1280
;;;640            width = SC132_FULL_RES_WIDTH;
;;;641            height = SC132_FULL_RES_HEIGHT;
;;;642    #else
;;;643            width = CFG_SENSOR_1_WIDTH;
000038  46c8              MOV      r8,r9
;;;644            height = CFG_SENSOR_1_HEIGHT;
00003a  4657              MOV      r7,r10
;;;645    #endif
;;;646    
;;;647    #if IMGSRC_1_FORMAT == IMAGE_FORMAT_RGB565
;;;648            pixelformat = V2K_PIX_FMT_RGB565;
;;;649    #elif IMGSRC_1_FORMAT == IMAGE_FORMAT_RAW10
;;;650            pixelformat = V2K_PIX_FMT_RAW10;
;;;651    #elif IMGSRC_1_FORMAT == IMAGE_FORMAT_RAW8
;;;652            pixelformat = V2K_PIX_FMT_RAW8;
00003c  465e              MOV      r6,r11
                  |L1.62|
;;;653    #endif
;;;654        }
;;;655    
;;;656        if ( kdp_camera_open(nIdx) != 0 )
00003e  4628              MOV      r0,r5
000040  f7fffffe          BL       kdp_camera_open
000044  b100              CBZ      r0,|L1.72|
;;;657            ret = (ret|BIT1);//return -1;
000046  2402              MOVS     r4,#2
                  |L1.72|
;;;658    
;;;659        memset(&cap, 0, sizeof(cap));
000048  2128              MOVS     r1,#0x28
00004a  a808              ADD      r0,sp,#0x20
00004c  f7fffffe          BL       __aeabi_memclr4
;;;660        if ( kdp_camera_get_device_info(nIdx, &cap) != 0 )
000050  a908              ADD      r1,sp,#0x20
000052  4628              MOV      r0,r5
000054  f7fffffe          BL       kdp_camera_get_device_info
000058  b108              CBZ      r0,|L1.94|
;;;661            ret = (ret|BIT2);//return -1;
00005a  f0440404          ORR      r4,r4,#4
                  |L1.94|
;;;662    
;;;663        dbg_msg_api("===== Capability Informations =====");
;;;664        dbg_msg_api("   driver: %s", cap.driver);
;;;665        dbg_msg_api("   desc: %s", cap.desc);
;;;666        dbg_msg_api("   version: %08X", cap.version);
;;;667    
;;;668        memset(&fmt, 0, sizeof(fmt));
00005e  211c              MOVS     r1,#0x1c
000060  a801              ADD      r0,sp,#4
000062  f7fffffe          BL       __aeabi_memclr4
;;;669        fmt.width = width;
;;;670        fmt.height = height;
;;;671        fmt.pixelformat = pixelformat;
;;;672    
;;;673        if ( kdp_camera_set_frame_format(nIdx, (struct cam_format *)&fmt) )
000066  e9cd7602          STRD     r7,r6,[sp,#8]
00006a  a901              ADD      r1,sp,#4
00006c  4628              MOV      r0,r5
00006e  f8cd8004          STR      r8,[sp,#4]
000072  f7fffffe          BL       kdp_camera_set_frame_format
000076  b108              CBZ      r0,|L1.124|
;;;674            ret = (ret|BIT3);//return -1;
000078  f0440408          ORR      r4,r4,#8
                  |L1.124|
;;;675    
;;;676    
;;;677    #if (CFG_CAMERA_DUAL_1054 != 1)
;;;678        if ( nIdx == CAMERA_DEVICE_NIR_IDX )
;;;679    #endif
;;;680        {
;;;681            kdp_e2e_face_variables *vars = kdp_e2e_get_face_variables();
00007c  f7fffffe          BL       kdp_e2e_get_face_variables
;;;682    
;;;683            u8 gain_h, gain_l;
;;;684            u16 level = (u16)(vars->nir_gain);
000080  ed900a29          VLDR     s0,[r0,#0xa4]
000084  4606              MOV      r6,r0                 ;681
000086  eebc0ac0          VCVT.U32.F32 s0,s0
00008a  ee100a10          VMOV     r0,s0
00008e  b282              UXTH     r2,r0
;;;685            vars->nir_gain = (float)level;
000090  ee002a10          VMOV     s0,r2
;;;686            gain_h = (level >> 8) & 0x0F;
000094  f3c22103          UBFX     r1,r2,#8,#4
;;;687            gain_l = level & 0xFF;
000098  b2d2              UXTB     r2,r2
00009a  eeb80a40          VCVT.F32.U32 s0,s0                 ;685
;;;688            
;;;689            kdp_camera_set_gain(nIdx, gain_h, gain_l);
00009e  4628              MOV      r0,r5
0000a0  ed860a29          VSTR     s0,[r6,#0xa4]         ;685
0000a4  f7fffffe          BL       kdp_camera_set_gain
;;;690    
;;;691            kdp_camera_set_exp_time(nIdx, (vars->nir_cur_exp_time&0x0000FF00)>>8, vars->nir_cur_exp_time&0xFF);
0000a8  f8b6008c          LDRH     r0,[r6,#0x8c]
0000ac  b2c2              UXTB     r2,r0
0000ae  f3c02107          UBFX     r1,r0,#8,#8
0000b2  4628              MOV      r0,r5
0000b4  f7fffffe          BL       kdp_camera_set_exp_time
;;;692            
;;;693            kdp_camera_set_fps(nIdx, vars->nir_fps);
0000b8  f8961130          LDRB     r1,[r6,#0x130]
0000bc  4628              MOV      r0,r5
0000be  f7fffffe          BL       kdp_camera_set_fps
;;;694        }
;;;695    #if (CFG_SENSOR_0_TYPE == SENSOR_TYPE_GC02M1_R) || \
;;;696        (CFG_SENSOR_0_TYPE == SENSOR_TYPE_GC02M1_L) || \
;;;697        (CFG_SENSOR_1_TYPE == SENSOR_TYPE_GC02M1_R) || \
;;;698        (CFG_SENSOR_1_TYPE == SENSOR_TYPE_GC02M1_L)
;;;699        if ( nIdx == CAMERA_DEVICE_RGB_IDX )
;;;700        {
;;;701            kdp_e2e_face_variables *vars = kdp_e2e_get_face_variables();
;;;702    
;;;703            u8 gain_h, gain_l;
;;;704            u16 level = 600;
;;;705            gain_h = (level >> 8) & 0x0F;
;;;706            gain_l = level & 0xFF;
;;;707    
;;;708            u8 exp_time_h, exp_time_l;
;;;709            u16 exp_time = 623;
;;;710            exp_time_h = (exp_time >> 8) & 0x0F;
;;;711            exp_time_l = exp_time & 0xFF;
;;;712            
;;;713            kdp_camera_set_exp_time(nIdx, exp_time_h, exp_time_l);
;;;714            kdp_camera_set_gain(nIdx, gain_h, gain_l);
;;;715    
;;;716        }
;;;717    #else
;;;718    #if ( CFG_PALM_PRINT_MODE == YES )
;;;719        if ( kdp_is_palm_mode() && nIdx == CAMERA_DEVICE_RGB_IDX )
;;;720        {
;;;721            kdp_e2e_face_variables *vars = kdp_e2e_get_face_variables();
;;;722            u8 gain_h, gain_l;
;;;723            u16 level = PALM_DEFAULT_GAIN;
;;;724            
;;;725            vars->nir_cur_exp_time = PALM_DEFAULT_EXP_TIME;
;;;726            vars->nir_gain = (float)level;
;;;727            gain_h = (level >> 8) & 0x0F;
;;;728            gain_l = level & 0xFF;
;;;729            
;;;730            kdp_e2e_bg_init_done( FALSE );
;;;731            kdp_camera_set_gain(nIdx, gain_h, gain_l);
;;;732            kdp_camera_set_exp_time(nIdx, (vars->nir_cur_exp_time&0x0000FF00)>>8, vars->nir_cur_exp_time&0xFF);
;;;733            kdp_camera_set_fps(nIdx, vars->nir_fps);
;;;734            kdp_e2e_bg_init_done( FALSE );
;;;735        }
;;;736    #endif
;;;737    #endif
;;;738    
;;;739        if ( kdp_camera_get_frame_format(nIdx, &fmt) != 0 )
0000c2  a901              ADD      r1,sp,#4
0000c4  4628              MOV      r0,r5
0000c6  f7fffffe          BL       kdp_camera_get_frame_format
0000ca  b108              CBZ      r0,|L1.208|
;;;740            ret = (ret|BIT4);//return -1;
0000cc  f0440410          ORR      r4,r4,#0x10
                  |L1.208|
;;;741    
;;;742        dbg_msg_api("===== Stream Format Informations =====");
;;;743        dbg_msg_api("   width: %d", fmt.width);
;;;744        dbg_msg_api("   height: %d", fmt.height);
;;;745    
;;;746        memset(fmtstr, 0, 8);
;;;747        memcpy(fmtstr, &fmt.pixelformat, 4);
;;;748        dbg_msg_api("   pixelformat: %s", fmtstr);
;;;749        dbg_msg_api("   field: %d", fmt.field);
;;;750        dbg_msg_api("   bytesperline: %d", fmt.bytesperline);
;;;751        dbg_msg_api("   sizeimage: %d", fmt.sizeimage);
;;;752        dbg_msg_api("   colorspace: %d", fmt.colorspace);
;;;753    
;;;754        if ( kdp_camera_buffer_init(nIdx) != 0 )
0000d0  4628              MOV      r0,r5
0000d2  f7fffffe          BL       kdp_camera_buffer_init
0000d6  b108              CBZ      r0,|L1.220|
;;;755            ret = (ret|BIT5);//return -1;
0000d8  f0440420          ORR      r4,r4,#0x20
                  |L1.220|
;;;756    
;;;757    #if KDP_CAM_DISPLAY == 1
;;;758        if ( m_cam_to_dp_evt_ack == 0 )
;;;759        {
;;;760            m_cam_to_dp_evt_ack = create_event();
;;;761        }
;;;762    
;;;763        if ( m_cam_to_dp_tid == 0 )
;;;764        {
;;;765            osThreadAttr_t attr = {
;;;766                .stack_size = 512,
;;;767                .attr_bits = osThreadJoinable
;;;768            };
;;;769    
;;;770    #if (CFG_PANEL_TYPE == PANEL_NULL)
;;;771    #if (CFG_CAMERA_ROTATE == 1)
;;;772            attr.priority = (osPriority_t)(osPriorityNormal - 1);
;;;773    #endif
;;;774    #endif
;;;775    
;;;776            m_cam_to_dp_tid = osThreadNew(camera_to_display_thread, (void*)&m_camera_ctx[nIdx], &attr);
;;;777        }
;;;778    #endif
;;;779    
;;;780        if ( ret == 0 )
0000dc  b154              CBZ      r4,|L1.244|
;;;781        {
;;;782            m_camera_ctx[nIdx].state = KDP_DEVICE_CAMERA_IDLE;
;;;783        }
;;;784        else
;;;785        {
;;;786            dbg_msg_err("[%s] error, cam_idx = %d, ret = %d", __func__, nIdx, ret);
0000de  462b              MOV      r3,r5
0000e0  4a0a              LDR      r2,|L1.268|
0000e2  a10b              ADR      r1,|L1.272|
0000e4  2002              MOVS     r0,#2
0000e6  9400              STR      r4,[sp,#0]
0000e8  f7fffffe          BL       kdp_level_printf
                  |L1.236|
;;;787        }
;;;788    
;;;789        return ret;
;;;790    }
0000ec  b013              ADD      sp,sp,#0x4c
0000ee  4620              MOV      r0,r4                 ;789
0000f0  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.244|
0000f4  4904              LDR      r1,|L1.264|
0000f6  f2401001          MOV      r0,#0x101             ;782
0000fa  3114              ADDS     r1,r1,#0x14           ;782
0000fc  f8210015          STRH     r0,[r1,r5,LSL #1]     ;782
000100  e7f4              B        |L1.236|
;;;791    
                          ENDP

000102  0000              DCW      0x0000
                  |L1.260|
                          DCD      0x38574152
                  |L1.264|
                          DCD      ||.data||
                  |L1.268|
                          DCD      ||.constdata||
                  |L1.272|
000110  5b25735d          DCB      "[%s] error, cam_idx = %d, ret = %d\r\n",0
000114  20657272
000118  6f722c20
00011c  63616d5f
000120  69647820
000124  3d202564
000128  2c207265
00012c  74203d20
000130  25640d0a
000134  00      
000135  00                DCB      0
000136  00                DCB      0
000137  00                DCB      0

                          AREA ||i.kdp_api_camera_on_0||, CODE, READONLY, ALIGN=2

                  kdp_api_camera_on_0 PROC
;;;107    
;;;108    int kdp_api_camera_on_0(void)
000000  480c              LDR      r0,|L2.52|
;;;109    {
;;;110       SCU_EXTREG_CLK_EN1_SET_csirx0_TxEscClk(1);
000002  f8501f18          LDR      r1,[r0,#0x18]!
000006  f0410140          ORR      r1,r1,#0x40
00000a  6001              STR      r1,[r0,#0]
;;;111       SCU_EXTREG_CLK_EN1_SET_csirx0_vc0(1);
00000c  6801              LDR      r1,[r0,#0]
00000e  f0410110          ORR      r1,r1,#0x10
000012  6001              STR      r1,[r0,#0]
;;;112       SCU_EXTREG_CLK_EN1_SET_csirx0_csi(1);
000014  6801              LDR      r1,[r0,#0]
000016  f0410120          ORR      r1,r1,#0x20
00001a  f8401b78          STR      r1,[r0],#0x78
;;;113    
;;;114       masked_outw( SCU_EXTREG_CSIRX_CTRL0,
00001e  6801              LDR      r1,[r0,#0]
000020  4a05              LDR      r2,|L2.56|
000022  4311              ORRS     r1,r1,r2
000024  f8401b0c          STR      r1,[r0],#0xc
;;;115                   ((SCU_EXTREG_CSIRX_CTRL0_ClkLnEn | SCU_EXTREG_CSIRX_CTRL0_Enable) |
;;;116                    (SCU_EXTREG_CSIRX_CTRL0_apb_rst_n | SCU_EXTREG_CSIRX_CTRL0_pwr_rst_n |
;;;117                     SCU_EXTREG_CSIRX_CTRL0_sys_rst_n)),
;;;118                   ((SCU_EXTREG_CSIRX_CTRL0_ClkLnEn | SCU_EXTREG_CSIRX_CTRL0_Enable) |
;;;119                    (SCU_EXTREG_CSIRX_CTRL0_apb_rst_n | SCU_EXTREG_CSIRX_CTRL0_pwr_rst_n |
;;;120                     SCU_EXTREG_CSIRX_CTRL0_sys_rst_n)));
;;;121    
;;;122       masked_outw( SCU_EXTREG_DPI2AHB_CTRL,
000028  6801              LDR      r1,[r0,#0]
00002a  f041010d          ORR      r1,r1,#0xd
00002e  6001              STR      r1,[r0,#0]
;;;123                   (SCU_EXTREG_DPI2AHB_CTRL_rst_n | SCU_EXTREG_DPI2AHB_CTRL_apb_rst_n |
;;;124                    SCU_EXTREG_DPI2AHB_CTRL_apb_rst_n | SCU_EXTREG_DPI2AHB_CTRL_pwr_rst_n),
;;;125                   (SCU_EXTREG_DPI2AHB_CTRL_rst_n | SCU_EXTREG_DPI2AHB_CTRL_apb_rst_n |
;;;126                    SCU_EXTREG_DPI2AHB_CTRL_apb_rst_n | SCU_EXTREG_DPI2AHB_CTRL_pwr_rst_n));
;;;127    
;;;128        return 0;
000030  2000              MOVS     r0,#0
;;;129    }
000032  4770              BX       lr
;;;130    
                          ENDP

                  |L2.52|
                          DCD      0xc2380000
                  |L2.56|
                          DCD      0x13000003

                          AREA ||i.kdp_api_camera_on_1||, CODE, READONLY, ALIGN=2

                  kdp_api_camera_on_1 PROC
;;;130    
;;;131    int kdp_api_camera_on_1(void)
000000  480c              LDR      r0,|L3.52|
;;;132    {
;;;133       SCU_EXTREG_CLK_EN1_SET_csirx1_TxEscClk(1);
000002  f8501f18          LDR      r1,[r0,#0x18]!
000006  f4416180          ORR      r1,r1,#0x400
00000a  6001              STR      r1,[r0,#0]
;;;134       SCU_EXTREG_CLK_EN1_SET_csirx1_vc0(1);
00000c  6801              LDR      r1,[r0,#0]
00000e  f4417180          ORR      r1,r1,#0x100
000012  6001              STR      r1,[r0,#0]
;;;135       SCU_EXTREG_CLK_EN1_SET_csirx1_csi(1);
000014  6801              LDR      r1,[r0,#0]
000016  f4417100          ORR      r1,r1,#0x200
00001a  f8401b7c          STR      r1,[r0],#0x7c
;;;136    
;;;137       masked_outw( SCU_EXTREG_CSIRX_CTRL1,
00001e  6801              LDR      r1,[r0,#0]
000020  4a05              LDR      r2,|L3.56|
000022  4311              ORRS     r1,r1,r2
000024  f8401b08          STR      r1,[r0],#8
;;;138                   ((SCU_EXTREG_CSIRX_CTRL1_ClkLnEn | SCU_EXTREG_CSIRX_CTRL1_Enable) |
;;;139                    (SCU_EXTREG_CSIRX_CTRL1_apb_rst_n | SCU_EXTREG_CSIRX_CTRL1_pwr_rst_n |
;;;140                     SCU_EXTREG_CSIRX_CTRL1_sys_rst_n)),
;;;141                   ((SCU_EXTREG_CSIRX_CTRL1_ClkLnEn | SCU_EXTREG_CSIRX_CTRL1_Enable) |
;;;142                    (SCU_EXTREG_CSIRX_CTRL1_apb_rst_n | SCU_EXTREG_CSIRX_CTRL1_pwr_rst_n |
;;;143                     SCU_EXTREG_CSIRX_CTRL1_sys_rst_n)));
;;;144    
;;;145       masked_outw( SCU_EXTREG_DPI2AHB_CTRL,
000028  6801              LDR      r1,[r0,#0]
00002a  f04101f0          ORR      r1,r1,#0xf0
00002e  6001              STR      r1,[r0,#0]
;;;146                   (SCU_EXTREG_DPI2AHB_CTRL_rst_n_1 | SCU_EXTREG_DPI2AHB_CTRL_apb_rst_n_1 |
;;;147                    SCU_EXTREG_DPI2AHB_CTRL_sys_rst_n_1 | SCU_EXTREG_DPI2AHB_CTRL_pwr_rst_n_1),
;;;148                   (SCU_EXTREG_DPI2AHB_CTRL_rst_n_1 | SCU_EXTREG_DPI2AHB_CTRL_apb_rst_n_1 |
;;;149                    SCU_EXTREG_DPI2AHB_CTRL_sys_rst_n_1 | SCU_EXTREG_DPI2AHB_CTRL_pwr_rst_n_1));
;;;150    
;;;151        return 0;
000030  2000              MOVS     r0,#0
;;;152    }
000032  4770              BX       lr
;;;153    
                          ENDP

                  |L3.52|
                          DCD      0xc2380000
                  |L3.56|
                          DCD      0x13000003

                          AREA ||i.kl520_api_cam_disp_close_perm_state_chk||, CODE, READONLY, ALIGN=2

                  kl520_api_cam_disp_close_perm_state_chk PROC
;;;1120   
;;;1121   s32 kl520_api_cam_disp_close_perm_state_chk(void)
000000  b570              PUSH     {r4-r6,lr}
;;;1122   {
;;;1123       s32 ret = 0;
;;;1124   
;;;1125       if ( g_aPermanentState[CAMERA_DEVICE_RGB_IDX] )
000002  480e              LDR      r0,|L4.60|
000004  4d0c              LDR      r5,|L4.56|
;;;1126       {
;;;1127           ret |= kl520_api_cam_disp_ctrl(API_CTRL_CAM_STOP, CAMERA_DEVICE_RGB_IDX, PERMANENT_NULL);
;;;1128       }
;;;1129       else
;;;1130       {
;;;1131           ret |= kl520_api_cam_disp_ctrl(API_CTRL_CAM_DIS, CAMERA_DEVICE_RGB_IDX, PERMANENT_NULL);
000006  f04f0200          MOV      r2,#0
00000a  7801              LDRB     r1,[r0,#0]            ;1125  ; rgb_sensor_index
00000c  5c68              LDRB     r0,[r5,r1]            ;1125
00000e  b108              CBZ      r0,|L4.20|
000010  2008              MOVS     r0,#8                 ;1127
000012  e000              B        |L4.22|
                  |L4.20|
000014  2028              MOVS     r0,#0x28
                  |L4.22|
000016  f7fffffe          BL       kl520_api_cam_disp_ctrl
00001a  4604              MOV      r4,r0
;;;1132       }
;;;1133   
;;;1134       if ( g_aPermanentState[CAMERA_DEVICE_NIR_IDX] )
00001c  4808              LDR      r0,|L4.64|
;;;1135       {
;;;1136           ret |= kl520_api_cam_disp_ctrl(API_CTRL_CAM_STOP, CAMERA_DEVICE_NIR_IDX, PERMANENT_NULL);
;;;1137       }
;;;1138       else
;;;1139       {
;;;1140           ret |= kl520_api_cam_disp_ctrl(API_CTRL_CAM_DIS, CAMERA_DEVICE_NIR_IDX, PERMANENT_NULL);
00001e  f04f0200          MOV      r2,#0
000022  7801              LDRB     r1,[r0,#0]            ;1134  ; nir_sensor_index
000024  5c68              LDRB     r0,[r5,r1]            ;1134
000026  b108              CBZ      r0,|L4.44|
000028  2008              MOVS     r0,#8                 ;1136
00002a  e000              B        |L4.46|
                  |L4.44|
00002c  2028              MOVS     r0,#0x28
                  |L4.46|
00002e  f7fffffe          BL       kl520_api_cam_disp_ctrl
000032  4320              ORRS     r0,r0,r4              ;1136
;;;1141       }
;;;1142   
;;;1143   #if KDP_CAM_DISPLAY == 1
;;;1144       if ( g_aPermanentState[DISP_IDX] )
;;;1145       {
;;;1146           ret |= kl520_api_cam_disp_ctrl(API_CTRL_DISP_OPEN, NULL, PERMANENT_NULL);
;;;1147       }
;;;1148       else
;;;1149       {
;;;1150           ret |= kl520_api_cam_disp_ctrl(API_CTRL_DISP_CLOS, NULL, PERMANENT_NULL);
;;;1151   
;;;1152       }
;;;1153   #endif
;;;1154   
;;;1155       return ret;
;;;1156   }
000034  bd70              POP      {r4-r6,pc}
;;;1157   
                          ENDP

000036  0000              DCW      0x0000
                  |L4.56|
                          DCD      ||.data||+0x10
                  |L4.60|
                          DCD      rgb_sensor_index
                  |L4.64|
                          DCD      nir_sensor_index

                          AREA ||i.kl520_api_cam_disp_ctrl||, CODE, READONLY, ALIGN=2

                  kl520_api_cam_disp_ctrl PROC
;;;932    
;;;933    s32 kl520_api_cam_disp_ctrl(u8 nCt, unsigned int nCamIdx, enum PERM_STATE ePermSt)
000000  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;934    {
000004  460c              MOV      r4,r1
;;;935    #if KDP_CAM_DISPLAY == 1
;;;936        BOOL bPanDisplayCt = (nCt&0x80)>>7; //[7]Control Bit6
;;;937        BOOL bPanDisplaySw = (nCt&0x40)>>6; //[6]Display on/off
;;;938        enum PERM_STATE eBackupPermSt = ePermSt;    
;;;939    #endif
;;;940    
;;;941        bool cam_open = false;
000006  2100              MOVS     r1,#0
;;;942        bool cam_start = false;
000008  460e              MOV      r6,r1
;;;943        bool cam_close = false;
00000a  4689              MOV      r9,r1
;;;944        bool cam_stop = false;
00000c  460f              MOV      r7,r1
;;;945        
;;;946        switch(nCt) {
00000e  2828              CMP      r0,#0x28
000010  d02e              BEQ      |L5.112|
000012  dc06              BGT      |L5.34|
000014  2808              CMP      r0,#8
000016  d010              BEQ      |L5.58|
000018  280c              CMP      r0,#0xc
00001a  d00c              BEQ      |L5.54|
00001c  2820              CMP      r0,#0x20
00001e  d10d              BNE      |L5.60|
000020  e006              B        |L5.48|
                  |L5.34|
000022  2830              CMP      r0,#0x30
000024  d002              BEQ      |L5.44|
000026  283c              CMP      r0,#0x3c
000028  d108              BNE      |L5.60|
00002a  e01f              B        |L5.108|
                  |L5.44|
;;;947        case API_CTRL_CAM_OPEN:
;;;948            cam_open = true;
00002c  2101              MOVS     r1,#1
;;;949            break;
00002e  e005              B        |L5.60|
                  |L5.48|
;;;950        case API_CTRL_CAM_CLOS:
;;;951            cam_close = true;
000030  f04f0901          MOV      r9,#1
;;;952            break;
000034  e002              B        |L5.60|
                  |L5.54|
;;;953        case API_CTRL_CAM_STAR:
;;;954            cam_start = true;
000036  2601              MOVS     r6,#1
;;;955            break;
000038  e000              B        |L5.60|
                  |L5.58|
;;;956        case API_CTRL_CAM_STOP:
;;;957            cam_stop = true;
00003a  2701              MOVS     r7,#1
                  |L5.60|
;;;958            break;
;;;959        case API_CTRL_CAM_EN:
;;;960            cam_open = true;
;;;961            cam_start = true;
;;;962            break;
;;;963        case API_CTRL_CAM_DIS:
;;;964            cam_stop = true;
;;;965            cam_close = true;
;;;966        default:
;;;967            break;
;;;968        }
;;;969    
;;;970        s32 ret = 0;
00003c  2500              MOVS     r5,#0
;;;971        if ( nCamIdx >= IMGSRC_NUM ) {
00003e  2c02              CMP      r4,#2
000040  d224              BCS      |L5.140|
;;;972            dbg_msg_api("camera index invalid");
;;;973            return -1;
;;;974        }
;;;975    
;;;976        if ( cam_open && ( m_camera_ctx[nCamIdx].state <= KDP_DEVICE_CAMERA_NULL ) ) {
000042  f8dfa0e8          LDR      r10,|L5.300|
000046  f44f7b80          MOV      r11,#0x100
00004a  b199              CBZ      r1,|L5.116|
00004c  f93a0014          LDRSH    r0,[r10,r4,LSL #1]
000050  4558              CMP      r0,r11
000052  dc0f              BGT      |L5.116|
;;;977            tile_avg_valid_x = TILE_AVG_VALID_X;
000054  4936              LDR      r1,|L5.304|
000056  2006              MOVS     r0,#6
000058  7008              STRB     r0,[r1,#0]
;;;978            tile_avg_valid_y = TILE_AVG_VALID_Y;
00005a  4936              LDR      r1,|L5.308|
00005c  2004              MOVS     r0,#4
00005e  7008              STRB     r0,[r1,#0]
;;;979            ret = (s32)_api_camera_open(nCamIdx);
000060  b2e0              UXTB     r0,r4
000062  f7fffffe          BL       _api_camera_open
000066  0005              MOVS     r5,r0
;;;980            if(ret != 0) return -1;
000068  d110              BNE      |L5.140|
00006a  e003              B        |L5.116|
                  |L5.108|
00006c  2101              MOVS     r1,#1                 ;960
00006e  e7e2              B        |L5.54|
                  |L5.112|
000070  2701              MOVS     r7,#1                 ;964
000072  e7dd              B        |L5.48|
                  |L5.116|
;;;981        }
;;;982    
;;;983        if ( cam_start || cam_stop ) {
000074  ea560007          ORRS     r0,r6,r7
;;;984    //        if ( ePermSt == PERMANENT_CAM_DISP )
;;;985    //        {
;;;986    //            ePermSt = PERMANENT_CAM;
;;;987    //        }
;;;988            if ( cam_start ) {
;;;989                if ( m_camera_ctx[nCamIdx].state <= KDP_DEVICE_CAMERA_NULL ) {
;;;990                    dbg_msg_api("camera[%d] is not inited!", nCamIdx);
;;;991                    return -1;
;;;992                } else {
;;;993    #if KDP_CAM_DISPLAY == 1
;;;994                    g_bShowCamImgToDp = TRUE;
;;;995    #endif
;;;996    
;;;997    #if ( CFG_GUI_ENABLE == YES )
;;;998                    if ( nCamIdx == kdp_video_renderer_get_idx() )
;;;999                    {
;;;1000                       if ( g_eCtrlFrom != CTRL_GUI )
;;;1001                       {
;;;1002                           gui_app_stop();
;;;1003                       }
;;;1004                   }
;;;1005                   else
;;;1006                   {
;;;1007   //                    if ( g_eCtrlFrom == CTRL_CMD )
;;;1008   //                    {
;;;1009   //                        g_bShowCamImgToDp = FALSE;
;;;1010   //                    }
;;;1011                   }
;;;1012   #endif
;;;1013   
;;;1014                   if ( ( m_camera_ctx[nCamIdx].state == KDP_DEVICE_CAMERA_IDLE )
000078  f2401701          MOV      r7,#0x101
00007c  d03a              BEQ      |L5.244|
00007e  f44f7881          MOV      r8,#0x102             ;983
000082  b1e6              CBZ      r6,|L5.190|
000084  f93a0014          LDRSH    r0,[r10,r4,LSL #1]    ;989
000088  4558              CMP      r0,r11                ;989
00008a  dc03              BGT      |L5.148|
                  |L5.140|
00008c  f04f30ff          MOV      r0,#0xffffffff        ;991
                  |L5.144|
;;;1015                       || ( m_camera_ctx[nCamIdx].state == KDP_DEVICE_CAMERA_IDLE_PERM ) ) {
;;;1016                       ret = (s32)_api_camera_start(nCamIdx);
;;;1017                   }
;;;1018   #if KDP_CAM_DISPLAY == 1
;;;1019                   else if ( g_eCamThreadState != CAM_THREAD_STATE_START )
;;;1020                   {
;;;1021                       set_thread_event(m_cam_to_dp_tid, FLAGS_APP_CAMERA_START_EVT);  //For console control
;;;1022                   }
;;;1023   #endif
;;;1024                   permanent_state_set(nCamIdx, PERMANENT_CAM, ePermSt);
;;;1025               }
;;;1026           } else {
;;;1027               if ( m_camera_ctx[nCamIdx].state == KDP_DEVICE_CAMERA_RUNNING )
;;;1028               {
;;;1029                   permanent_state_set(nCamIdx, PERMANENT_CAM, ePermSt);
;;;1030                   ret |= (s32)_api_camera_stop(nCamIdx);
;;;1031   
;;;1032                   if ( g_aPermanentState[nCamIdx] )
;;;1033                   {
;;;1034                       m_camera_ctx[nCamIdx].state = KDP_DEVICE_CAMERA_IDLE_PERM;
;;;1035                   }
;;;1036               }
;;;1037   #if ( CFG_GUI_ENABLE == YES )
;;;1038               if ( m_camera_ctx[nCamIdx].state != KDP_DEVICE_CAMERA_RUNNING )
;;;1039               {
;;;1040                   if ( ( !g_aPermanentState[nCamIdx] ) &&
;;;1041                        ( gui_app_get_status() == 0 ) &&
;;;1042                        ( nCamIdx == kdp_video_renderer_get_idx() ) )
;;;1043                   {
;;;1044                       osDelay(10);
;;;1045                       kl520_api_dp_layout_disable();
;;;1046                       gui_app_proceed();
;;;1047   
;;;1048                       if ( ( g_ePreCtrlFrom == CTRL_COMM ) || ( g_eCtrlFrom == CTRL_CMD ) )
;;;1049                       {
;;;1050                           user_gui_update_renderer();
;;;1051                       }
;;;1052                   }
;;;1053               }
;;;1054   #endif
;;;1055           }
;;;1056   
;;;1057           //ePermSt = eBackupPermSt;
;;;1058       }
;;;1059   
;;;1060       if (cam_close) {
;;;1061           if ( m_camera_ctx[nCamIdx].state == KDP_DEVICE_CAMERA_IDLE ) {
;;;1062               ret |= (s32)_api_camera_close(nCamIdx);
;;;1063           }
;;;1064       }
;;;1065   
;;;1066   #if KDP_CAM_DISPLAY == 1
;;;1067       if ( bPanDisplayCt )
;;;1068       {
;;;1069           kl520_api_dp_layout_disable();
;;;1070   
;;;1071           if ( ( ePermSt == PERMANENT_GUI ) || ( ePermSt == PERMANENT_CAM_DISP ) )
;;;1072           {
;;;1073               permanent_state_set(GUI_IDX, PERMANENT_GUI, ePermSt);
;;;1074   
;;;1075               ePermSt = PERMANENT_DISP;
;;;1076           }
;;;1077   
;;;1078           if ( ( bPanDisplaySw ) && ( g_eSofDispState == DEV_STATE_NULL ) )
;;;1079           {
;;;1080               permanent_state_set(DISP_IDX, PERMANENT_DISP, ePermSt);
;;;1081   
;;;1082               if (kl520_api_dp_open(g_nDpResX, g_nDpResY))
;;;1083               {
;;;1084                   return ret;
;;;1085               }
;;;1086   
;;;1087   #if ( CFG_GUI_ENABLE == YES )
;;;1088               if ( !(g_aPermanentState[CAMERA_DEVICE_RGB_IDX]|g_aPermanentState[CAMERA_DEVICE_NIR_IDX]) )
;;;1089               {
;;;1090                   gui_app_proceed();
;;;1091                   user_gui_update_renderer();
;;;1092               }
;;;1093               else
;;;1094   #endif
;;;1095               if ( ( g_eCamThreadState == CAM_THREAD_STATE_START ) || ( kdp_e2e_prop_get2(flow_mode) < FLOW_MODE_SIM_VIRTUAL ) )
;;;1096               {
;;;1097                   g_bShowCamImgToDp = TRUE;
;;;1098               }
;;;1099   
;;;1100               g_eSofDispState = DEV_STATE_RUN;
;;;1101           }
;;;1102           else if ( ( !bPanDisplaySw ) && ( g_eSofDispState == DEV_STATE_RUN ) )
;;;1103           {
;;;1104               g_bShowCamImgToDp = FALSE;
;;;1105   
;;;1106               permanent_state_set(DISP_IDX, PERMANENT_DISP, ePermSt);
;;;1107   
;;;1108   #if ( CFG_GUI_ENABLE == YES )
;;;1109               gui_app_stop();
;;;1110   #endif
;;;1111               kl520_api_dp_close();
;;;1112   
;;;1113               g_eSofDispState = DEV_STATE_NULL;
;;;1114           }
;;;1115       }
;;;1116   #endif
;;;1117   
;;;1118       return ret;
;;;1119   }
000090  e8bd8ffe          POP      {r1-r11,pc}
                  |L5.148|
000094  4656              MOV      r6,r10                ;1014
000096  42b8              CMP      r0,r7                 ;1014
000098  d003              BEQ      |L5.162|
00009a  f5a07180          SUB      r1,r0,#0x100          ;1015
00009e  3903              SUBS     r1,#3                 ;1015
0000a0  d107              BNE      |L5.178|
                  |L5.162|
0000a2  b2e5              UXTB     r5,r4                 ;1016
0000a4  4628              MOV      r0,r5                 ;1016
0000a6  f7fffffe          BL       kdp_camera_start
0000aa  b908              CBNZ     r0,|L5.176|
0000ac  f8268015          STRH     r8,[r6,r5,LSL #1]     ;1016
                  |L5.176|
0000b0  4605              MOV      r5,r0                 ;1016
                  |L5.178|
0000b2  b2e0              UXTB     r0,r4                 ;1024
0000b4  2101              MOVS     r1,#1                 ;1024
0000b6  9a02              LDR      r2,[sp,#8]            ;1024
0000b8  f7fffffe          BL       permanent_state_set
0000bc  e01a              B        |L5.244|
                  |L5.190|
0000be  f93a0014          LDRSH    r0,[r10,r4,LSL #1]    ;1027
0000c2  4656              MOV      r6,r10                ;1027
0000c4  4540              CMP      r0,r8                 ;1027
0000c6  d115              BNE      |L5.244|
0000c8  b2e0              UXTB     r0,r4                 ;1029
0000ca  2101              MOVS     r1,#1                 ;1029
0000cc  9a02              LDR      r2,[sp,#8]            ;1029
0000ce  f7fffffe          BL       permanent_state_set
0000d2  f00408ff          AND      r8,r4,#0xff           ;1030
0000d6  4640              MOV      r0,r8                 ;1030
0000d8  f7fffffe          BL       kdp_camera_stop
0000dc  b908              CBNZ     r0,|L5.226|
0000de  f8267018          STRH     r7,[r6,r8,LSL #1]     ;1030
                  |L5.226|
0000e2  4605              MOV      r5,r0                 ;1030
0000e4  4811              LDR      r0,|L5.300|
0000e6  1f00              SUBS     r0,r0,#4              ;1032
0000e8  5d00              LDRB     r0,[r0,r4]            ;1032
0000ea  b118              CBZ      r0,|L5.244|
0000ec  f2401003          MOV      r0,#0x103             ;1034
0000f0  f8260014          STRH     r0,[r6,r4,LSL #1]     ;1034
                  |L5.244|
0000f4  f1b90f00          CMP      r9,#0                 ;1060
0000f8  d015              BEQ      |L5.294|
0000fa  f93a0014          LDRSH    r0,[r10,r4,LSL #1]    ;1061
0000fe  4656              MOV      r6,r10                ;1061
000100  42b8              CMP      r0,r7                 ;1061
000102  d110              BNE      |L5.294|
000104  b2e4              UXTB     r4,r4                 ;1062
000106  4620              MOV      r0,r4                 ;1062
000108  f7fffffe          BL       kdp_camera_close
00010c  4807              LDR      r0,|L5.300|
00010e  3814              SUBS     r0,r0,#0x14           ;1062
000110  b114              CBZ      r4,|L5.280|
000112  2c01              CMP      r4,#1                 ;1062
000114  d002              BEQ      |L5.284|
000116  e004              B        |L5.290|
                  |L5.280|
000118  6840              LDR      r0,[r0,#4]            ;1062  ; m_cb_camera0_power_off
00011a  e000              B        |L5.286|
                  |L5.284|
00011c  68c0              LDR      r0,[r0,#0xc]          ;1062  ; m_cb_camera1_power_off
                  |L5.286|
00011e  b100              CBZ      r0,|L5.290|
000120  4780              BLX      r0                    ;1062
                  |L5.290|
000122  f826b014          STRH     r11,[r6,r4,LSL #1]    ;1062
                  |L5.294|
000126  4628              MOV      r0,r5                 ;1118
000128  e7b2              B        |L5.144|
;;;1120   
                          ENDP

00012a  0000              DCW      0x0000
                  |L5.300|
                          DCD      ||.data||+0x14
                  |L5.304|
                          DCD      tile_avg_valid_x
                  |L5.308|
                          DCD      tile_avg_valid_y

                          AREA ||i.kl520_api_cam_disp_state_rst||, CODE, READONLY, ALIGN=2

                  kl520_api_cam_disp_state_rst PROC
;;;1157   
;;;1158   s32 kl520_api_cam_disp_state_rst(void)
000000  b570              PUSH     {r4-r6,lr}
;;;1159   {
;;;1160       s32 ret = 0;
;;;1161   
;;;1162   #if ( CFG_GUI_ENABLE == YES )
;;;1163       if ( ( !(g_aPermanentState[CAMERA_DEVICE_RGB_IDX]|g_aPermanentState[CAMERA_DEVICE_NIR_IDX]) ) && ( g_bDpResChg ) )
;;;1164       {
;;;1165           kl520_api_disp_resolution_set(DISPLAY_WIDTH, DISPLAY_HEIGHT);
;;;1166           g_bDpResChg = FALSE;
;;;1167   
;;;1168           user_gui_update_renderer();
;;;1169       }
;;;1170   #endif
;;;1171   
;;;1172       if ( g_aPermanentState[CAMERA_DEVICE_RGB_IDX] )
000002  480c              LDR      r0,|L6.52|
000004  4d0a              LDR      r5,|L6.48|
000006  2400              MOVS     r4,#0                 ;1160
000008  7801              LDRB     r1,[r0,#0]  ; rgb_sensor_index
00000a  5c68              LDRB     r0,[r5,r1]
00000c  b120              CBZ      r0,|L6.24|
;;;1173       {
;;;1174           ret |= kl520_api_cam_disp_ctrl(API_CTRL_CAM_EN, CAMERA_DEVICE_RGB_IDX, PERMANENT_NULL);
00000e  2200              MOVS     r2,#0
000010  203c              MOVS     r0,#0x3c
000012  f7fffffe          BL       kl520_api_cam_disp_ctrl
000016  4604              MOV      r4,r0
                  |L6.24|
;;;1175       }
;;;1176   
;;;1177       if ( g_aPermanentState[CAMERA_DEVICE_NIR_IDX] )
000018  4807              LDR      r0,|L6.56|
00001a  7801              LDRB     r1,[r0,#0]  ; nir_sensor_index
00001c  5c68              LDRB     r0,[r5,r1]
00001e  b120              CBZ      r0,|L6.42|
;;;1178       {
;;;1179           ret |= kl520_api_cam_disp_ctrl(API_CTRL_CAM_EN, CAMERA_DEVICE_NIR_IDX, PERMANENT_NULL);
000020  2200              MOVS     r2,#0
000022  203c              MOVS     r0,#0x3c
000024  f7fffffe          BL       kl520_api_cam_disp_ctrl
000028  4304              ORRS     r4,r4,r0
                  |L6.42|
;;;1180       }
;;;1181   
;;;1182   #if ( CFG_GUI_ENABLE == YES )
;;;1183       if ( g_aPermanentState[GUI_IDX] )
;;;1184       {
;;;1185           permanent_state_set(DISP_IDX, PERMANENT_DISP, PERMANENT_DISP);
;;;1186   
;;;1187       }
;;;1188   #endif
;;;1189   
;;;1190   #if KDP_CAM_DISPLAY == 1
;;;1191       if ( g_aPermanentState[DISP_IDX] )
;;;1192       {
;;;1193           ret |= kl520_api_cam_disp_ctrl(API_CTRL_DISP_OPEN, NULL, PERMANENT_NULL);
;;;1194       }
;;;1195       else
;;;1196       {
;;;1197           ret |= kl520_api_cam_disp_ctrl(API_CTRL_DISP_CLOS, NULL, PERMANENT_NULL);
;;;1198       }
;;;1199   #endif
;;;1200   
;;;1201       return ret;
00002a  4620              MOV      r0,r4
;;;1202   }
00002c  bd70              POP      {r4-r6,pc}
;;;1203   
                          ENDP

00002e  0000              DCW      0x0000
                  |L6.48|
                          DCD      ||.data||+0x10
                  |L6.52|
                          DCD      rgb_sensor_index
                  |L6.56|
                          DCD      nir_sensor_index

                          AREA ||i.kl520_api_cam_state_get||, CODE, READONLY, ALIGN=2

                  kl520_api_cam_state_get PROC
;;;528    
;;;529    enum kdp_device_status_code_e kl520_api_cam_state_get(unsigned int nCamIdx)
000000  2802              CMP      r0,#2
;;;530    {
000002  d302              BCC      |L7.10|
;;;531        if ( nCamIdx >= IMGSRC_NUM )
;;;532        {
;;;533            dbg_msg_api("camera index invalid");
;;;534            return KDP_DEVICE_STATUS_ERROR;
000004  f04f30ff          MOV      r0,#0xffffffff
;;;535        }
;;;536    
;;;537        return m_camera_ctx[nCamIdx].state;
;;;538    }
000008  4770              BX       lr
                  |L7.10|
00000a  4902              LDR      r1,|L7.20|
00000c  f9310010          LDRSH    r0,[r1,r0,LSL #1]     ;537
000010  4770              BX       lr
;;;539    
                          ENDP

000012  0000              DCW      0x0000
                  |L7.20|
                          DCD      ||.data||+0x14

                          AREA ||i.kl520_api_camera_close||, CODE, READONLY, ALIGN=1

                  kl520_api_camera_close PROC
;;;925    
;;;926    int kl520_api_camera_close(unsigned int cam_idx)
000000  2200              MOVS     r2,#0
;;;927    {
;;;928        int ret = 0;
;;;929        ret = kl520_api_cam_disp_ctrl(API_CTRL_CAM_CLOS, cam_idx, PERMANENT_NULL);
000002  4601              MOV      r1,r0
000004  2020              MOVS     r0,#0x20
000006  f7ffbffe          B.W      kl520_api_cam_disp_ctrl
;;;930        return ret;
;;;931    }
;;;932    
                          ENDP


                          AREA ||i.kl520_api_camera_get_id||, CODE, READONLY, ALIGN=1

                  kl520_api_camera_get_id PROC
;;;191    
;;;192    int kl520_api_camera_get_id(unsigned int cam_idx)
000000  b570              PUSH     {r4-r6,lr}
;;;193    {
000002  4605              MOV      r5,r0
;;;194        int ret = 0;
;;;195    
;;;196        ret = kdp_camera_get_device_id(cam_idx);
000004  f7fffffe          BL       kdp_camera_get_device_id
000008  4604              MOV      r4,r0
;;;197        if(ret == DEVICE_NOT_INIT)
00000a  f5a0407f          SUB      r0,r0,#0xff00
00000e  38ff              SUBS     r0,r0,#0xff
000010  d10d              BNE      |L9.46|
;;;198        {
;;;199            kl520_api_cam_disp_ctrl(API_CTRL_CAM_OPEN, cam_idx, PERMANENT_NULL);
000012  2200              MOVS     r2,#0
000014  4629              MOV      r1,r5
000016  2030              MOVS     r0,#0x30
000018  f7fffffe          BL       kl520_api_cam_disp_ctrl
;;;200            ret = kdp_camera_get_device_id(cam_idx);
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       kdp_camera_get_device_id
000022  4604              MOV      r4,r0
;;;201            kl520_api_cam_disp_ctrl(API_CTRL_CAM_CLOS, cam_idx, PERMANENT_NULL);
000024  2200              MOVS     r2,#0
000026  4629              MOV      r1,r5
000028  2020              MOVS     r0,#0x20
00002a  f7fffffe          BL       kl520_api_cam_disp_ctrl
                  |L9.46|
;;;202        }
;;;203    
;;;204        return ret;
00002e  4620              MOV      r0,r4
;;;205    }
000030  bd70              POP      {r4-r6,pc}
;;;206    
                          ENDP


                          AREA ||i.kl520_api_camera_open||, CODE, READONLY, ALIGN=1

                  kl520_api_camera_open PROC
;;;904    
;;;905    u16 kl520_api_camera_open(unsigned int cam_idx)
000000  b510              PUSH     {r4,lr}
;;;906    {
;;;907        int ret = 0;
;;;908        ret = kl520_api_cam_disp_ctrl(API_CTRL_CAM_OPEN, cam_idx, PERMANENT_NULL);
000002  4601              MOV      r1,r0
000004  2200              MOVS     r2,#0
000006  2030              MOVS     r0,#0x30
000008  f7fffffe          BL       kl520_api_cam_disp_ctrl
;;;909        return ret;//return 0;
00000c  b280              UXTH     r0,r0
;;;910    }
00000e  bd10              POP      {r4,pc}
;;;911    
                          ENDP


                          AREA ||i.kl520_api_camera_register_hook||, CODE, READONLY, ALIGN=2

                  kl520_api_camera_register_hook PROC
;;;170    
;;;171    void kl520_api_camera_register_hook(u32 cam_idx, fn_power_hook fn_power_on, fn_power_hook fn_power_off)
000000  4b06              LDR      r3,|L11.28|
;;;172    {
000002  b130              CBZ      r0,|L11.18|
;;;173        if (0 == cam_idx) {
;;;174            m_cb_camera0_power_on = fn_power_on;
;;;175            m_cb_camera0_power_off = fn_power_off;
;;;176        #if (KL520_QUICK_BOOT == YES)
;;;177            if (m_cb_camera0_power_on)
;;;178                m_cb_camera0_power_on();
;;;179        #endif
;;;180        }
;;;181        else if (1 == cam_idx) {
000004  2801              CMP      r0,#1
000006  d108              BNE      |L11.26|
000008  e9c31202          STRD     r1,r2,[r3,#8]
;;;182            m_cb_camera1_power_on = fn_power_on;
;;;183            m_cb_camera1_power_off = fn_power_off;
;;;184        #if (KL520_QUICK_BOOT == YES)
;;;185            if (m_cb_camera1_power_on)
00000c  2900              CMP      r1,#0
00000e  d004              BEQ      |L11.26|
                  |L11.16|
;;;186                m_cb_camera1_power_on();
000010  4708              BX       r1
                  |L11.18|
000012  e9c31200          STRD     r1,r2,[r3,#0]
000016  2900              CMP      r1,#0                 ;177
000018  d1fa              BNE      |L11.16|
                  |L11.26|
;;;187        #endif
;;;188        }
;;;189    }
00001a  4770              BX       lr
;;;190    
                          ENDP

                  |L11.28|
                          DCD      ||.data||

                          AREA ||i.kl520_api_camera_start||, CODE, READONLY, ALIGN=1

                  kl520_api_camera_start PROC
;;;911    
;;;912    int kl520_api_camera_start(unsigned int cam_idx)
000000  2201              MOVS     r2,#1
;;;913    {
;;;914    	int ret = 0;
;;;915        ret = kl520_api_cam_disp_ctrl(API_CTRL_CAM_STAR, cam_idx, PERMANENT_CAM);
000002  4601              MOV      r1,r0
000004  200c              MOVS     r0,#0xc
000006  f7ffbffe          B.W      kl520_api_cam_disp_ctrl
;;;916        return ret;
;;;917    }
;;;918    
                          ENDP


                          AREA ||i.kl520_api_camera_stop||, CODE, READONLY, ALIGN=1

                  kl520_api_camera_stop PROC
;;;918    
;;;919    int kl520_api_camera_stop(unsigned int cam_idx)
000000  2205              MOVS     r2,#5
;;;920    {
;;;921    	int ret = 0;
;;;922        ret = kl520_api_cam_disp_ctrl(API_CTRL_CAM_STOP, cam_idx, PERMANENT_DISABLE);
000002  4601              MOV      r1,r0
000004  2008              MOVS     r0,#8
000006  f7ffbffe          B.W      kl520_api_cam_disp_ctrl
;;;923        return ret;
;;;924    }
;;;925    
                          ENDP


                          AREA ||i.kl520_api_disp_open_chk||, CODE, READONLY, ALIGN=1

                  kl520_api_disp_open_chk PROC
;;;1203   
;;;1204   s32 kl520_api_disp_open_chk(void)
000000  2000              MOVS     r0,#0
;;;1205   {
;;;1206       s32 ret = 0;
;;;1207   #if KDP_CAM_DISPLAY == 1
;;;1208   
;;;1209       if ( g_eSofDispState == DEV_STATE_RUN )
;;;1210       {
;;;1211   
;;;1212       }
;;;1213       else
;;;1214       {
;;;1215           ret = kl520_api_cam_disp_ctrl(API_CTRL_DISP_OPEN, NULL, PERMANENT_NULL);
;;;1216       }
;;;1217   #endif
;;;1218       return ret;
;;;1219   }
000002  4770              BX       lr
;;;1220   
                          ENDP


                          AREA ||i.kl520_api_disp_resolution_set||, CODE, READONLY, ALIGN=1

                  kl520_api_disp_resolution_set PROC
;;;1235   
;;;1236   void kl520_api_disp_resolution_set(u32 nW, u32 nH)
000000  4770              BX       lr
;;;1237   {
;;;1238   #if KDP_CAM_DISPLAY == 1
;;;1239       if ( ( nW != g_nDpResX ) || ( nH != g_nDpResY ) )
;;;1240       {
;;;1241           struct video_input_params params = kdp_video_renderer_setting(kdp_video_renderer_get_idx());
;;;1242   
;;;1243           params.dp_out_w = nW;
;;;1244           params.dp_out_h = nH;
;;;1245           kdp_video_renderer_set_dp_res(&params);
;;;1246   
;;;1247           g_bDpResChg = TRUE;
;;;1248       }
;;;1249   
;;;1250   
;;;1251       g_nDpResX = nW;
;;;1252       g_nDpResY = nH;
;;;1253   #endif
;;;1254   }
;;;1255   
                          ENDP


                          AREA ||i.kl520_api_hmi_ctrl_state_reset||, CODE, READONLY, ALIGN=1

                  kl520_api_hmi_ctrl_state_reset PROC
;;;547    
;;;548    void kl520_api_hmi_ctrl_state_reset(enum CTRL_STATE ePermSt)  //Human Machine Interface
000000  4770              BX       lr
;;;549    {
;;;550    #if ( CFG_GUI_ENABLE == YES )
;;;551        g_ePreCtrlFrom = ePermSt;
;;;552        g_eCtrlFrom = ePermSt;
;;;553    #endif
;;;554    }
;;;555    
                          ENDP


                          AREA ||i.kl520_api_hmi_ctrl_state_set||, CODE, READONLY, ALIGN=1

                  kl520_api_hmi_ctrl_state_set PROC
;;;555    
;;;556    void kl520_api_hmi_ctrl_state_set(enum CTRL_STATE ePermSt)  //Human Machine Interface
000000  4770              BX       lr
;;;557    {
;;;558    #if ( CFG_GUI_ENABLE == YES )
;;;559        g_ePreCtrlFrom = g_eCtrlFrom;
;;;560        g_eCtrlFrom = ePermSt;
;;;561    #endif
;;;562    }
;;;563    
                          ENDP


                          AREA ||i.kl520_api_led_register_hook||, CODE, READONLY, ALIGN=1

                  kl520_api_led_register_hook PROC
;;;159    #else
;;;160    void kl520_api_led_register_hook(u32 cam_idx, fn_led_open fn_open, fn_led_close fn_close)
000000  f7ffbffe          B.W      kdp_e2e_ctrl_led_register
;;;161    {
;;;162        kdp_e2e_ctrl_led_register(cam_idx, fn_open, fn_close);
;;;163    }
;;;164    #endif
                          ENDP


                          AREA ||i.kl520_api_light_sensor_register_hook||, CODE, READONLY, ALIGN=1

                  kl520_api_light_sensor_register_hook PROC
;;;165    
;;;166    void kl520_api_light_sensor_register_hook(fn_strength_get fn_get)
000000  f7ffbffe          B.W      kdp_e2e_ctrl_light_sensor_register
;;;167    {
;;;168        kdp_e2e_ctrl_light_sensor_register(fn_get);
;;;169    }
;;;170    
                          ENDP


                          AREA ||i.kl520_api_set_exposure_only||, CODE, READONLY, ALIGN=2

                  kl520_api_set_exposure_only PROC
;;;1262   
;;;1263   u16 kl520_api_set_exposure_only( u8 nCamIdx, u32 nExpTime )
000000  b570              PUSH     {r4-r6,lr}
;;;1264   {
000002  4604              MOV      r4,r0
;;;1265       u16 ret = 0;
;;;1266       
;;;1267       if (nExpTime < MIN_DEFAULT_NIR_EXP_TIME)
000004  2902              CMP      r1,#2
000006  d201              BCS      |L20.12|
;;;1268           nExpTime = MIN_DEFAULT_NIR_EXP_TIME;
000008  2102              MOVS     r1,#2
00000a  e004              B        |L20.22|
                  |L20.12|
;;;1269       else if (nExpTime > MAX_DEFAULT_NIR_EXP_TIME)
00000c  f44f70d7          MOV      r0,#0x1ae
000010  4281              CMP      r1,r0
000012  d900              BLS      |L20.22|
;;;1270           nExpTime = MAX_DEFAULT_NIR_EXP_TIME;
000014  4601              MOV      r1,r0
                  |L20.22|
;;;1271       
;;;1272       ret = kdp_camera_set_exp_time( nCamIdx, (nExpTime&0x0000FF00)>>8, nExpTime&0xFF );
000016  b2ca              UXTB     r2,r1
000018  f3c12107          UBFX     r1,r1,#8,#8
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       kdp_camera_set_exp_time
000022  b285              UXTH     r5,r0
;;;1273       if (nCamIdx == MIPI_CAM_RGB)
000024  4806              LDR      r0,|L20.64|
000026  7800              LDRB     r0,[r0,#0]  ; rgb_sensor_index
000028  4284              CMP      r4,r0
;;;1274           rgb_sensor_rst((u8)RGB_LED_WAIT_FRAME);
;;;1275       else
;;;1276           nir_sensor_rst((u8)NIR_LED_WAIT_FRAME);
00002a  f04f0003          MOV      r0,#3
00002e  d102              BNE      |L20.54|
000030  f7fffffe          BL       rgb_sensor_rst
000034  e001              B        |L20.58|
                  |L20.54|
000036  f7fffffe          BL       nir_sensor_rst
                  |L20.58|
;;;1277       
;;;1278       return ret;
00003a  4628              MOV      r0,r5
;;;1279   }
00003c  bd70              POP      {r4-r6,pc}
;;;1280   
                          ENDP

00003e  0000              DCW      0x0000
                  |L20.64|
                          DCD      rgb_sensor_index

                          AREA ||i.permanent_state_set||, CODE, READONLY, ALIGN=2

                  permanent_state_set PROC
;;;885    
;;;886    static void permanent_state_set(u8 nIdx, enum PERM_STATE ePermCtrl, enum PERM_STATE ePermSt)
000000  4b04              LDR      r3,|L21.20|
;;;887    {
;;;888        if ( ePermSt == ePermCtrl )
000002  428a              CMP      r2,r1
000004  d101              BNE      |L21.10|
;;;889        {
;;;890            g_aPermanentState[nIdx] = TRUE;
000006  2101              MOVS     r1,#1
000008  e002              B        |L21.16|
                  |L21.10|
;;;891        }
;;;892        else if ( ePermSt == PERMANENT_DISABLE )
00000a  2a05              CMP      r2,#5
00000c  d101              BNE      |L21.18|
;;;893        {
;;;894            g_aPermanentState[nIdx] = FALSE;
00000e  2100              MOVS     r1,#0
                  |L21.16|
000010  5419              STRB     r1,[r3,r0]            ;890
                  |L21.18|
;;;895        }
;;;896    
;;;897    #if ( CFG_GUI_ENABLE == YES )
;;;898        if ( ePermSt ==  PERMANENT_GUI )
;;;899        {
;;;900            g_bShowCamImgToDp = FALSE;
;;;901        }
;;;902    #endif
;;;903    }
000012  4770              BX       lr
;;;904    
                          ENDP

                  |L21.20|
                          DCD      ||.data||+0x10

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  __func__
000000  5f617069          DCB      0x5f,0x61,0x70,0x69
000004  5f63616d          DCB      0x5f,0x63,0x61,0x6d
000008  6572615f          DCB      0x65,0x72,0x61,0x5f
00000c  6f70656e          DCB      0x6f,0x70,0x65,0x6e
000010  00                DCB      0x00

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  4d525f53          DCB      "MR_SUCCESS",0
000004  55434345
000008  535300  
00000b  00                DCB      0
00000c  4d525f52          DCB      "MR_REJECTED",0
000010  454a4543
000014  54454400
000018  4d525f41          DCB      "MR_ABORTED",0
00001c  424f5254
000020  454400  
000023  00                DCB      0
000024  4d525f46          DCB      "MR_FAILED_DEV_OPEN_FAIL",0
000028  41494c45
00002c  445f4445
000030  565f4f50
000034  454e5f46
000038  41494c00
00003c  4d525f46          DCB      "MR_FAILED_UNKNOWN_REASON",0
000040  41494c45
000044  445f554e
000048  4b4e4f57
00004c  4e5f5245
000050  41534f4e
000054  00      
000055  00                DCB      0
000056  00                DCB      0
000057  00                DCB      0
000058  4d525f46          DCB      "MR_FAILED_INVALID_PARAM",0
00005c  41494c45
000060  445f494e
000064  56414c49
000068  445f5041
00006c  52414d00
000070  4d525f46          DCB      "MR_FAILED_OOM",0
000074  41494c45
000078  445f4f4f
00007c  4d00    
00007e  00                DCB      0
00007f  00                DCB      0
000080  4d525f46          DCB      "MR_FAILED_UNKNOWN_USER",0
000084  41494c45
000088  445f554e
00008c  4b4e4f57
000090  4e5f5553
000094  455200  
000097  00                DCB      0
000098  4d525f46          DCB      "MR_FAILED_MAX_USER",0
00009c  41494c45
0000a0  445f4d41
0000a4  585f5553
0000a8  455200  
0000ab  00                DCB      0
0000ac  4d525f46          DCB      "MR_FAILED_FACE_ENROLLED",0
0000b0  41494c45
0000b4  445f4641
0000b8  43455f45
0000bc  4e524f4c
0000c0  4c454400
0000c4  4d525f46          DCB      "MR_FAILED_LIVENESS_CHECK",0
0000c8  41494c45
0000cc  445f4c49
0000d0  56454e45
0000d4  53535f43
0000d8  4845434b
0000dc  00      
0000dd  00                DCB      0
0000de  00                DCB      0
0000df  00                DCB      0
0000e0  4d525f46          DCB      "MR_FAILED_TIME_OUT",0
0000e4  41494c45
0000e8  445f5449
0000ec  4d455f4f
0000f0  555400  
0000f3  00                DCB      0
0000f4  4d525f46          DCB      "MR_FAILED_AUTHORIZATION",0
0000f8  41494c45
0000fc  445f4155
000100  54484f52
000104  495a4154
000108  494f4e00
00010c  4d525f46          DCB      "MR_FAILED_READ_FILE",0
000110  41494c45
000114  445f5245
000118  41445f46
00011c  494c4500
000120  4d525f46          DCB      "MR_FAILED_WRITE_FILE",0
000124  41494c45
000128  445f5752
00012c  4954455f
000130  46494c45
000134  00      
000135  00                DCB      0
000136  00                DCB      0
000137  00                DCB      0
000138  4d525f46          DCB      "MR_FAILED_NO_ENCRYPT",0
00013c  41494c45
000140  445f4e4f
000144  5f454e43
000148  52595054
00014c  00      
00014d  00                DCB      0
00014e  00                DCB      0
00014f  00                DCB      0
000150  4d525f46          DCB      "MR_FAILED_STORE_ERR",0
000154  41494c45
000158  445f5354
00015c  4f52455f
000160  45525200
000164  4d525f46          DCB      "MR_FAILED_NO_IMG",0
000168  41494c45
00016c  445f4e4f
000170  5f494d47
000174  00      
000175  00                DCB      0
000176  00                DCB      0
000177  00                DCB      0
000178  4d525f46          DCB      "MR_FAILED_NO_IDX",0
00017c  41494c45
000180  445f4e4f
000184  5f494458
000188  00      
000189  00                DCB      0
00018a  00                DCB      0
00018b  00                DCB      0
00018c  4d525f46          DCB      "MR_FAILED_BUF_OVERFLOW",0
000190  41494c45
000194  445f4255
000198  465f4f56
00019c  4552464c
0001a0  4f5700  
0001a3  00                DCB      0
0001a4  4d525f46          DCB      "MR_FAILED_MASS_DATA_HEAD_EMPTY",0
0001a8  41494c45
0001ac  445f4d41
0001b0  53535f44
0001b4  4154415f
0001b8  48454144
0001bc  5f454d50
0001c0  545900  
0001c3  00                DCB      0
0001c4  4d525f46          DCB      "MR_FAILED_MASS_DATA_DB_ABNORMAL",0
0001c8  41494c45
0001cc  445f4d41
0001d0  53535f44
0001d4  4154415f
0001d8  44425f41
0001dc  424e4f52
0001e0  4d414c00
0001e4  4d525f46          DCB      "MR_FAILED_MASS_DATA_FM_ABNORMAL",0
0001e8  41494c45
0001ec  445f4d41
0001f0  53535f44
0001f4  4154415f
0001f8  464d5f41
0001fc  424e4f52
000200  4d414c00
000204  4d525f46          DCB      "MR_FAILED_NOT_READY",0
000208  41494c45
00020c  445f4e4f
000210  545f5245
000214  41445900
000218  4d525f46          DCB      "MR_FAILED_EXISTED_USER",0
00021c  41494c45
000220  445f4558
000224  49535445
000228  445f5553
00022c  455200  
00022f  00                DCB      0
000230  4d525f46          DCB      "MR_FAILED_IDX_OVERFLOW",0
000234  41494c45
000238  445f4944
00023c  585f4f56
000240  4552464c
000244  4f5700  
000247  00                DCB      0
000248  4d525f43          DCB      "MR_CONTIUNOUS",0
00024c  4f4e5449
000250  554e4f55
000254  5300    
000256  00                DCB      0
000257  00                DCB      0
000258  4d525f53          DCB      "MR_SUCCESS_BUT_DEL_USER",0
00025c  55434345
000260  53535f42
000264  55545f44
000268  454c5f55
00026c  53455200
000270  4d525f46          DCB      "MR_FAILED_INVALID_CMD",0
000274  41494c45
000278  445f494e
00027c  56414c49
000280  445f434d
000284  4400    
000286  00                DCB      0
000287  00                DCB      0
000288  00                DCB      0

                          AREA ||.data||, DATA, ALIGN=2

                  m_cb_camera0_power_on
                          DCD      0x00000000
                  m_cb_camera0_power_off
                          DCD      0x00000000
                  m_cb_camera1_power_on
                          DCD      0x00000000
                  m_cb_camera1_power_off
                          DCD      0x00000000
                  g_aPermanentState
000010  00000000          DCB      0x00,0x00,0x00,0x00
                  m_camera_ctx
                          DCD      0x00000000

                          AREA ||i._str_uart_reply||, COMGROUP=_str_uart_reply, CODE, READONLY, ALIGN=2

                  _str_uart_reply PROC
;;;201    #pragma diag_suppress 111
;;;202    inline char *_str_uart_reply(enum uart_reply_result result)
000000  2814              CMP      r0,#0x14
;;;203    {
;;;204        switch (result)
000002  d04e              BEQ      |L135.162|
000004  dc0d              BGT      |L135.34|
000006  2814              CMP      r0,#0x14
000008  d22d              BCS      |L135.102|
00000a  e8dff000          TBB      [pc,r0]
00000e  2e30              DCB      0x2e,0x30
000010  322c3436          DCB      0x32,0x2c,0x34,0x36
000014  383a3c3e          DCB      0x38,0x3a,0x3c,0x3e
000018  402c4244          DCB      0x40,0x2c,0x42,0x44
00001c  462c2c2c          DCB      0x46,0x2c,0x2c,0x2c
000020  2c48              DCB      0x2c,0x48
                  |L135.34|
000022  2832              CMP      r0,#0x32
000024  d04d              BEQ      |L135.194|
000026  dc10              BGT      |L135.74|
000028  2818              CMP      r0,#0x18
00002a  d042              BEQ      |L135.178|
00002c  dc06              BGT      |L135.60|
00002e  2815              CMP      r0,#0x15
000030  d039              BEQ      |L135.166|
000032  2816              CMP      r0,#0x16
000034  d039              BEQ      |L135.170|
000036  2817              CMP      r0,#0x17
000038  d115              BNE      |L135.102|
00003a  e038              B        |L135.174|
                  |L135.60|
00003c  2819              CMP      r0,#0x19
00003e  d03a              BEQ      |L135.182|
000040  2830              CMP      r0,#0x30
000042  d03a              BEQ      |L135.186|
000044  2831              CMP      r0,#0x31
000046  d10e              BNE      |L135.102|
000048  e039              B        |L135.190|
                  |L135.74|
00004a  2836              CMP      r0,#0x36
00004c  d041              BEQ      |L135.210|
00004e  dc06              BGT      |L135.94|
000050  2833              CMP      r0,#0x33
000052  d038              BEQ      |L135.198|
000054  2834              CMP      r0,#0x34
000056  d038              BEQ      |L135.202|
000058  2835              CMP      r0,#0x35
00005a  d104              BNE      |L135.102|
00005c  e037              B        |L135.206|
                  |L135.94|
00005e  2840              CMP      r0,#0x40
000060  d039              BEQ      |L135.214|
000062  28ff              CMP      r0,#0xff
000064  d039              BEQ      |L135.218|
                  |L135.102|
;;;205        {
;;;206            CMD_REPLY_RESULT_MACRO(TO_STR)
;;;207        default:
;;;208            break;
;;;209        }
;;;210        
;;;211        return "";
000066  481e              LDR      r0,|L135.224|
;;;212    }
000068  4770              BX       lr
00006a  481e              LDR      r0,|L135.228|
00006c  4770              BX       lr
00006e  481e              LDR      r0,|L135.232|
000070  4770              BX       lr
000072  481e              LDR      r0,|L135.236|
000074  4770              BX       lr
000076  481e              LDR      r0,|L135.240|
000078  4770              BX       lr
00007a  481e              LDR      r0,|L135.244|
00007c  4770              BX       lr
00007e  481e              LDR      r0,|L135.248|
000080  4770              BX       lr
000082  481e              LDR      r0,|L135.252|
000084  4770              BX       lr
000086  481e              LDR      r0,|L135.256|
000088  4770              BX       lr
00008a  481e              LDR      r0,|L135.260|
00008c  4770              BX       lr
00008e  481e              LDR      r0,|L135.264|
000090  4770              BX       lr
000092  481e              LDR      r0,|L135.268|
000094  4770              BX       lr
000096  481e              LDR      r0,|L135.272|
000098  4770              BX       lr
00009a  481e              LDR      r0,|L135.276|
00009c  4770              BX       lr
00009e  481e              LDR      r0,|L135.280|
0000a0  4770              BX       lr
                  |L135.162|
0000a2  481e              LDR      r0,|L135.284|
0000a4  4770              BX       lr
                  |L135.166|
0000a6  481e              LDR      r0,|L135.288|
0000a8  4770              BX       lr
                  |L135.170|
0000aa  481e              LDR      r0,|L135.292|
0000ac  4770              BX       lr
                  |L135.174|
0000ae  481e              LDR      r0,|L135.296|
0000b0  4770              BX       lr
                  |L135.178|
0000b2  481e              LDR      r0,|L135.300|
0000b4  4770              BX       lr
                  |L135.182|
0000b6  481e              LDR      r0,|L135.304|
0000b8  4770              BX       lr
                  |L135.186|
0000ba  481e              LDR      r0,|L135.308|
0000bc  4770              BX       lr
                  |L135.190|
0000be  481e              LDR      r0,|L135.312|
0000c0  4770              BX       lr
                  |L135.194|
0000c2  481e              LDR      r0,|L135.316|
0000c4  4770              BX       lr
                  |L135.198|
0000c6  481e              LDR      r0,|L135.320|
0000c8  4770              BX       lr
                  |L135.202|
0000ca  481e              LDR      r0,|L135.324|
0000cc  4770              BX       lr
                  |L135.206|
0000ce  481e              LDR      r0,|L135.328|
0000d0  4770              BX       lr
                  |L135.210|
0000d2  481e              LDR      r0,|L135.332|
0000d4  4770              BX       lr
                  |L135.214|
0000d6  481e              LDR      r0,|L135.336|
0000d8  4770              BX       lr
                  |L135.218|
0000da  481e              LDR      r0,|L135.340|
0000dc  4770              BX       lr
;;;213    #pragma diag_warning 111
                          ENDP

0000de  0000              DCW      0x0000
                  |L135.224|
                          DCD      ||.conststring||+0x288
                  |L135.228|
                          DCD      ||.conststring||
                  |L135.232|
                          DCD      ||.conststring||+0xc
                  |L135.236|
                          DCD      ||.conststring||+0x18
                  |L135.240|
                          DCD      ||.conststring||+0x24
                  |L135.244|
                          DCD      ||.conststring||+0x3c
                  |L135.248|
                          DCD      ||.conststring||+0x58
                  |L135.252|
                          DCD      ||.conststring||+0x70
                  |L135.256|
                          DCD      ||.conststring||+0x80
                  |L135.260|
                          DCD      ||.conststring||+0x98
                  |L135.264|
                          DCD      ||.conststring||+0xac
                  |L135.268|
                          DCD      ||.conststring||+0xc4
                  |L135.272|
                          DCD      ||.conststring||+0xe0
                  |L135.276|
                          DCD      ||.conststring||+0xf4
                  |L135.280|
                          DCD      ||.conststring||+0x10c
                  |L135.284|
                          DCD      ||.conststring||+0x120
                  |L135.288|
                          DCD      ||.conststring||+0x138
                  |L135.292|
                          DCD      ||.conststring||+0x150
                  |L135.296|
                          DCD      ||.conststring||+0x164
                  |L135.300|
                          DCD      ||.conststring||+0x178
                  |L135.304|
                          DCD      ||.conststring||+0x18c
                  |L135.308|
                          DCD      ||.conststring||+0x1a4
                  |L135.312|
                          DCD      ||.conststring||+0x1c4
                  |L135.316|
                          DCD      ||.conststring||+0x1e4
                  |L135.320|
                          DCD      ||.conststring||+0x204
                  |L135.324|
                          DCD      ||.conststring||+0x218
                  |L135.328|
                          DCD      ||.conststring||+0x230
                  |L135.332|
                          DCD      ||.conststring||+0x248
                  |L135.336|
                          DCD      ||.conststring||+0x258
                  |L135.340|
                          DCD      ||.conststring||+0x270

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\scpu\\share\\kl520_api_camera.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___18_kl520_api_camera_c_f9eaec75____REV16|
#line 208 "F:\\Users\\fu\\AppData\\Local\\Arm\\Packs\\ARM\\CMSIS\\5.9.0\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___18_kl520_api_camera_c_f9eaec75____REV16| PROC
#line 209

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___18_kl520_api_camera_c_f9eaec75____REVSH|
#line 223
|__asm___18_kl520_api_camera_c_f9eaec75____REVSH| PROC
#line 224

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___18_kl520_api_camera_c_f9eaec75____RRX|
#line 410
|__asm___18_kl520_api_camera_c_f9eaec75____RRX| PROC
#line 411

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
