; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\objects\system.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\system.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O3 --diag_suppress=9931 -I..\..\config -I..\..\..\..\board -I..\..\..\..\common\include -I..\..\..\..\scpu\device\include\CMSIS -I..\..\..\..\scpu\device\include\Kneron -I..\..\..\..\scpu\framework\include -I..\..\..\..\scpu\framework\include\framework -I..\..\..\..\scpu\drivers\include -I..\..\..\..\scpu\drivers\include\media\touch -I..\..\..\..\scpu\drivers\include\media\flash -I..\..\..\..\scpu\lib\kdp_system\inc -I..\..\..\..\scpu\lib\kdp_application\include\ -I..\..\..\..\scpu\lib\kdp_application\base\ -I..\..\..\..\scpu\lib\kdp_application\misc -I..\..\..\..\scpu\lib\kdp_e2e_r1n1\include -I..\..\..\..\scpu\include -I..\..\..\..\scpu\middleware\ota -I..\..\..\..\scpu\middleware\comm -I..\..\..\..\scpu\middleware\kdp_comm -I..\..\..\..\scpu\share -I..\..\..\..\scpu\share\gui_lib -I..\..\user -I.\RTE\CMSIS -I.\RTE\_Target-scpu -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\RTOS2\Include -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\RTOS2\RTX\Include -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\Device\ARM\ARMCM4\Include -D__RTX -D__MICROLIB -D__UVISION_VERSION=538 -D_RTE_ -DARMCM4_FP -D_RTE_ -DARM_MATH_CM4 -DTARGET_SCPU -DLOG_ENABLE -DKL520 -DHEAD_POSE_CHECK_PERCENT --omf_browse=.\objects\system.crf ..\..\..\..\scpu\drivers\system\system.c]
                          THUMB

                          AREA ||i.__NVIC_ClearPendingIRQ||, CODE, READONLY, ALIGN=1

                  __NVIC_ClearPendingIRQ PROC
;;;1774    */
;;;1775   __STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
000000  2800              CMP      r0,#0
;;;1776   {
000002  db09              BLT      |L1.24|
;;;1777     if ((int32_t)(IRQn) >= 0)
;;;1778     {
;;;1779       NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
000004  f000021f          AND      r2,r0,#0x1f
000008  2101              MOVS     r1,#1
00000a  4091              LSLS     r1,r1,r2
00000c  0940              LSRS     r0,r0,#5
00000e  0080              LSLS     r0,r0,#2
000010  f10020e0          ADD      r0,r0,#0xe000e000
000014  f8c01280          STR      r1,[r0,#0x280]
                  |L1.24|
;;;1780     }
;;;1781   }
000018  4770              BX       lr
;;;1782   
                          ENDP


                          AREA ||i.__NVIC_EnableIRQ||, CODE, READONLY, ALIGN=1

                  __NVIC_EnableIRQ PROC
;;;1683    */
;;;1684   __STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
000000  2800              CMP      r0,#0
;;;1685   {
000002  db09              BLT      |L2.24|
;;;1686     if ((int32_t)(IRQn) >= 0)
;;;1687     {
;;;1688       __COMPILER_BARRIER();
;;;1689       NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
000004  f000021f          AND      r2,r0,#0x1f
000008  2101              MOVS     r1,#1
00000a  4091              LSLS     r1,r1,r2
00000c  0940              LSRS     r0,r0,#5
00000e  0080              LSLS     r0,r0,#2
000010  f10020e0          ADD      r0,r0,#0xe000e000
000014  f8c01100          STR      r1,[r0,#0x100]
                  |L2.24|
;;;1690       __COMPILER_BARRIER();
;;;1691     }
;;;1692   }
000018  4770              BX       lr
;;;1693   
                          ENDP


                          AREA ||i.load_ncpu_fw||, CODE, READONLY, ALIGN=2

                  load_ncpu_fw PROC
;;;379    */
;;;380    void load_ncpu_fw(int reset_flag)
000000  b570              PUSH     {r4-r6,lr}
;;;381    {
;;;382        
;;;383        SCU_EXTREG_CM4_NCPU_CTRL_SET_wakeup(0);  // stop ncpu first
000002  4c0c              LDR      r4,|L3.52|
000004  1e05              SUBS     r5,r0,#0              ;381
000006  6ea0              LDR      r0,[r4,#0x68]
000008  f4205080          BIC      r0,r0,#0x1000
00000c  66a0              STR      r0,[r4,#0x68]
;;;384        if (reset_flag) {
00000e  d00c              BEQ      |L3.42|
;;;385            if (reset_flag > 0)
000010  dd01              BLE      |L3.22|
;;;386                mpu_niram_enable();
000012  f7fffffe          BL       mpu_niram_enable
                  |L3.22|
;;;387            kdp_memxfer_init(MEMXFER_OPS_DMA, MEMXFER_OPS_DMA);
000016  2102              MOVS     r1,#2
000018  4608              MOV      r0,r1
00001a  f7fffffe          BL       kdp_memxfer_init
;;;388            kdp_memxfer_flash_to_niram();
00001e  f7fffffe          BL       kdp_memxfer_flash_to_niram
;;;389            if (reset_flag > 0)
000022  2d00              CMP      r5,#0
000024  dd01              BLE      |L3.42|
;;;390                mpu_niram_disable();
000026  f7fffffe          BL       mpu_niram_disable
                  |L3.42|
;;;391        }
;;;392        SCU_EXTREG_CM4_NCPU_CTRL_SET_wakeup(1);  // restart ncpu
00002a  6ea0              LDR      r0,[r4,#0x68]
00002c  f4405080          ORR      r0,r0,#0x1000
000030  66a0              STR      r0,[r4,#0x68]
;;;393    }
000032  bd70              POP      {r4-r6,pc}
                          ENDP

                  |L3.52|
                          DCD      0xc2380000

                          AREA ||i.reset_handler||, CODE, READONLY, ALIGN=2

                  reset_handler PROC
;;;106    //void Reset_Handler(void) 
;;;107    void reset_handler(void)
000000  b570              PUSH     {r4-r6,lr}
;;;108    {
;;;109        bootup_status = inw(SCU_REG_BTUP_STS);
000002  4c0e              LDR      r4,|L4.60|
000004  6820              LDR      r0,[r4,#0]
000006  4e0e              LDR      r6,|L4.64|
;;;110        outw(SCU_REG_BTUP_STS, 0xffffffff);  // clear boot-up status
000008  17a5              ASRS     r5,r4,#30
00000a  6030              STR      r0,[r6,#0]  ; bootup_status
00000c  6025              STR      r5,[r4,#0]
;;;111        outw(SCU_REG_BTUP_CTRL, SCU_REG_BTUP_CTRL_RTC_BU_EN | // RTC wakeup allowed
00000e  f04f1003          MOV      r0,#0x30003
000012  6060              STR      r0,[r4,#4]
;;;112                                SCU_REG_BTUP_CTRL_PWRBTN_EN | // send power button output signal
;;;113                                SCU_REG_BTUP_CTRL_GPO_1_OUT |
;;;114                                SCU_REG_BTUP_CTRL_GPO_OUT);
;;;115    
;;;116        NVIC_ClearPendingIRQ((IRQn_Type)SYS_SYSTEM_IRQ);
000014  2028              MOVS     r0,#0x28
000016  f7fffffe          BL       __NVIC_ClearPendingIRQ
;;;117        NVIC_EnableIRQ((IRQn_Type)SYS_SYSTEM_IRQ);
00001a  2028              MOVS     r0,#0x28
00001c  f7fffffe          BL       __NVIC_EnableIRQ
;;;118    
;;;119        outw(SCU_REG_INT_STS, 0xffffffff); // clear all interrupt status
000020  6265              STR      r5,[r4,#0x24]
;;;120        outw(SCU_REG_INT_EN, 0xffffffff); // enable all interrupts during boot
000022  62a5              STR      r5,[r4,#0x28]
;;;121    
;;;122        //can't directly write to the PLL control pins, it needs to use the 
;;;123        //FCS or PLL_UPDATE command that contained the power-mode register
;;;124        clock_mgr_set_scuclkin(scuclkin_pll0div3, TRUE);
000024  2101              MOVS     r1,#1
000026  2002              MOVS     r0,#2
000028  f7fffffe          BL       clock_mgr_set_scuclkin
;;;125        
;;;126        power_mgr_ops(POWER_MGR_OPS_FCS);
00002c  2000              MOVS     r0,#0
00002e  f7fffffe          BL       power_mgr_ops
;;;127        __WFI();
000032  bf30              WFI      
;;;128        do{
;;;129        }while((__sys_int_flag)!= 0x1);
000034  68b0              LDR      r0,[r6,#8]  ; __sys_int_flag
                  |L4.54|
000036  2801              CMP      r0,#1
000038  d1fd              BNE      |L4.54|
;;;130    }
00003a  bd70              POP      {r4-r6,pc}
;;;131    
                          ENDP

                  |L4.60|
                          DCD      0xc2300000
                  |L4.64|
                          DCD      ||.data||

                          AREA ||i.sys_reset||, CODE, READONLY, ALIGN=2

                  sys_reset PROC
;;;31     //reserved function
;;;32     static void sys_reset(int subsystem)
000000  490f              LDR      r1,|L5.64|
;;;33     {
;;;34         switch (subsystem) {
000002  2801              CMP      r0,#1
000004  d00e              BEQ      |L5.36|
000006  2802              CMP      r0,#2
000008  d010              BEQ      |L5.44|
00000a  2803              CMP      r0,#3
00000c  d012              BEQ      |L5.52|
00000e  2804              CMP      r0,#4
000010  d107              BNE      |L5.34|
;;;35             case SUBSYS_NPU:
;;;36                 SCU_EXTREG_SWRST_SET_NPU_resetn(1);
;;;37                 break;
;;;38             case SUBSYS_PD_NPU:
;;;39                 SCU_EXTREG_SWRST_SET_PD_NPU_resetn(1);
;;;40                 break;
;;;41             case SUBSYS_LCDC:
;;;42                 SCU_EXTREG_SWRST_SET_LCDC_resetn(1);
;;;43                 break;
;;;44             case SUBSYS_NCPU:
;;;45                 SCU_EXTREG_CM4_NCPU_CTRL_SET_wakeup(0);
000012  6e88              LDR      r0,[r1,#0x68]
000014  f4205080          BIC      r0,r0,#0x1000
000018  6688              STR      r0,[r1,#0x68]
;;;46                 SCU_EXTREG_CM4_NCPU_CTRL_SET_wakeup(1);    
00001a  6e88              LDR      r0,[r1,#0x68]
00001c  f4405080          ORR      r0,r0,#0x1000
000020  6688              STR      r0,[r1,#0x68]
                  |L5.34|
;;;47         }
;;;48     }
000022  4770              BX       lr
                  |L5.36|
000024  6cc8              LDR      r0,[r1,#0x4c]         ;36
000026  f0400004          ORR      r0,r0,#4              ;36
00002a  e006              B        |L5.58|
                  |L5.44|
00002c  6cc8              LDR      r0,[r1,#0x4c]         ;39
00002e  f0400002          ORR      r0,r0,#2              ;39
000032  e002              B        |L5.58|
                  |L5.52|
000034  6cc8              LDR      r0,[r1,#0x4c]         ;42
000036  f0400001          ORR      r0,r0,#1              ;42
                  |L5.58|
00003a  64c8              STR      r0,[r1,#0x4c]         ;42
00003c  4770              BX       lr
;;;49     
                          ENDP

00003e  0000              DCW      0x0000
                  |L5.64|
                          DCD      0xc2380000

                          AREA ||i.system_init||, CODE, READONLY, ALIGN=2

                  system_init PROC
;;;131    
;;;132    void system_init(void)
000000  b570              PUSH     {r4-r6,lr}
;;;133    {
;;;134        delay_ms_enable();
000002  f7fffffe          BL       delay_ms_enable
000006  485e              LDR      r0,|L6.384|
;;;135        
;;;136        NVIC_SetVector((IRQn_Type)SYS_SYSTEM_IRQ, (u32)system_isr);
000008  495c              LDR      r1,|L6.380|
00000a  6800              LDR      r0,[r0,#0]
;;;137        
;;;138        reset_handler();
00000c  f8c010e0          STR      r1,[r0,#0xe0]
000010  f7fffffe          BL       reset_handler
;;;139        
;;;140        if ((bootup_status & BOOTUP_STATUS_WARM) == BOOTUP_STATUS_WARM)
000014  4e5b              LDR      r6,|L6.388|
000016  f44f6088          MOV      r0,#0x440
00001a  6831              LDR      r1,[r6,#0]  ; bootup_status
00001c  4388              BICS     r0,r0,r1
00001e  d07d              BEQ      |L6.284|
;;;141            warm_boot = 1;
;;;142        else
;;;143            warm_boot = 0;
000020  2000              MOVS     r0,#0
                  |L6.34|
;;;144    
;;;145        clock_mgr_init();
000022  6070              STR      r0,[r6,#4]  ; warm_boot
000024  f7fffffe          BL       clock_mgr_init
;;;146    
;;;147        /* Default power domain is already on */
;;;148        {
;;;149    //OLD_VER
;;;150            power_mgr_set_mode(POWER_MGR_MODE_ALWAYSON);
000028  2001              MOVS     r0,#1
00002a  f7fffffe          BL       power_mgr_set_mode
;;;151            delay_us(10);
00002e  200a              MOVS     r0,#0xa
000030  f7fffffe          BL       delay_us
;;;152            SCU_EXTREG_CLK_EN0_SET_pll4_fref_pll0(1);
000034  4c54              LDR      r4,|L6.392|
000036  6960              LDR      r0,[r4,#0x14]
000038  f4405080          ORR      r0,r0,#0x1000
00003c  6160              STR      r0,[r4,#0x14]
;;;153            delay_us(30);
00003e  201e              MOVS     r0,#0x1e
000040  f7fffffe          BL       delay_us
;;;154            SCU_EXTREG_PLL4_SETTING_SET_en(1);
000044  6920              LDR      r0,[r4,#0x10]
000046  f0400001          ORR      r0,r0,#1
00004a  6120              STR      r0,[r4,#0x10]
;;;155            delay_us(30);
00004c  201e              MOVS     r0,#0x1e
00004e  f7fffffe          BL       delay_us
;;;156            SCU_EXTREG_CLK_EN0_SET_pll4_out1(1);
000052  6960              LDR      r0,[r4,#0x14]
000054  f0400040          ORR      r0,r0,#0x40
000058  6160              STR      r0,[r4,#0x14]
;;;157    //NEW
;;;158    /*        //power_mgr_set_mode(POWER_MGR_MODE_ALWAYSON);
;;;159            //clock_mgr_open_pll4(); // npu
;;;160            delay_us(10);
;;;161            clk_enable(CLK_PLL4_FREF_PLL0);
;;;162            delay_us(30);
;;;163            clk_enable(CLK_PLL4);
;;;164            delay_us(30);
;;;165            clk_enable(CLK_PLL4_OUT); 
;;;166    */
;;;167        }	
;;;168    
;;;169        
;;;170    //OLD_VER
;;;171    
;;;172    //NEW
;;;173    //    /* Turn on NPU power domain */
;;;174    //    power_mgr_set_domain(POWER_DOMAIN_NPU, 1);
;;;175    //    if (warm_boot) {
;;;176    //        /* TODO: reload ncpu fw to NiRAM */
;;;177    //    }
;;;178    
;;;179    
;;;180        {
;;;181            //OLD VER
;;;182            power_mgr_set_mode(POWER_MGR_MODE_FULL);
00005a  2002              MOVS     r0,#2
00005c  f7fffffe          BL       power_mgr_set_mode
;;;183            {   // PLL1
;;;184                SCU_EXTREG_PLL1_SETTING_SET_en(1);
000060  6860              LDR      r0,[r4,#4]
000062  f0400001          ORR      r0,r0,#1
000066  6060              STR      r0,[r4,#4]
;;;185                delay_us(10);
000068  200a              MOVS     r0,#0xa
00006a  f7fffffe          BL       delay_us
;;;186                SCU_EXTREG_CLK_EN0_SET_pll1_out(1);
00006e  6960              LDR      r0,[r4,#0x14]
000070  f0400002          ORR      r0,r0,#2
000074  6160              STR      r0,[r4,#0x14]
;;;187                delay_us(30);
000076  201e              MOVS     r0,#0x1e
000078  f7fffffe          BL       delay_us
;;;188            }
;;;189            {   // PLL2
;;;190                SCU_EXTREG_PLL2_SETTING_SET_en(1);
00007c  68a0              LDR      r0,[r4,#8]
00007e  f0400001          ORR      r0,r0,#1
000082  60a0              STR      r0,[r4,#8]
;;;191                delay_us(10);
000084  200a              MOVS     r0,#0xa
000086  f7fffffe          BL       delay_us
;;;192                SCU_EXTREG_CLK_EN0_SET_pll2_out(1);
00008a  6960              LDR      r0,[r4,#0x14]
00008c  f0400004          ORR      r0,r0,#4
000090  6160              STR      r0,[r4,#0x14]
;;;193            }
;;;194    
;;;195            //NEW
;;;196    //        /* Turn on DDR power domain for cold boot */
;;;197    //        power_mgr_set_domain(POWER_DOMAIN_DDRCK, 1);
;;;198    //
;;;199    //        {   // PLL1
;;;200    //            clk_enable(CLK_PLL1);
;;;201    //            delay_us(10);
;;;202    //            clk_enable(CLK_PLL1_OUT);
;;;203    //            delay_us(30);
;;;204    //        }
;;;205    //
;;;206    //        {   // PLL2
;;;207    //            clk_enable(CLK_PLL2);
;;;208    //            delay_us(10);
;;;209    //            clk_enable(CLK_PLL2_OUT);
;;;210    //        }
;;;211    
;;;212            //OLD
;;;213    /*        {   // PLL3
;;;214                SCU_EXTREG_PLL3_SETTING_SET_en(1);
;;;215                     //set m, n, p value
;;;216    
;;;217                #if (V2K_ENABLE_TYPE == V2K_ENABLE_HMX2056) || \
;;;218                    (V2K_ENABLE_TYPE == V2K_ENABLE_OV9286) || \
;;;219                    (V2K_ENABLE_TYPE == V2K_ENABLE_HMX2056_OV9286)
;;;220                    clock_mgr_change_pll3_clock(2, 268, 2, 5, 27, 13, 5, 15, 4);
;;;221                #elif (V2K_ENABLE_TYPE == V2K_ENABLE_HMXRICA)
;;;222                    clock_mgr_change_pll3_clock(1, 210, 3, 5, 15, 3, 2, 31, 7);
;;;223                #elif (V2K_ENABLE_TYPE == V2K_ENABLE_GC2145)
;;;224                    clock_mgr_change_pll3_clock(2, 242, 2, 4, 11, 5, 4, 7, 1);
;;;225                #elif (V2K_ENABLE_TYPE == V2K_ENABLE_SC132GS)
;;;226                    clock_mgr_change_pll3_clock(2, 242, 2, 4, 7, 1, 4, 11, 5);
;;;227                #elif (V2K_ENABLE_TYPE == V2K_ENABLE_GC2145_SC132GS)
;;;228                    clock_mgr_change_pll3_clock(2, 242, 2, 4, 11, 5, 4, 7, 1);
;;;229                #elif (V2K_ENABLE_TYPE == V2K_ENABLE_SC132GS_GC2145)
;;;230                    clock_mgr_change_pll3_clock(2, 242, 2, 4, 7, 1, 4, 11, 5);
;;;231                #endif
;;;232    
;;;233                delay_us(10);
;;;234                SCU_EXTREG_CLK_EN0_SET_pll3_out1(1);
;;;235                SCU_EXTREG_CLK_EN0_SET_pll3_out2(1);
;;;236            }*/
;;;237    
;;;238            //NEW
;;;239            {   // PLL3     
;;;240                clk_enable(CLK_PLL3);
000092  2005              MOVS     r0,#5
000094  f7fffffe          BL       clk_enable
;;;241                //set m, n, p value
;;;242    
;;;243                clock_mgr_change_pll3_clock((u16*)&pll3_setting[0]);
000098  483c              LDR      r0,|L6.396|
00009a  f7fffffe          BL       clock_mgr_change_pll3_clock
;;;244           
;;;245            
;;;246                delay_us(10);
00009e  200a              MOVS     r0,#0xa
0000a0  f7fffffe          BL       delay_us
;;;247                clk_enable(CLK_PLL3_OUT1);
0000a4  2006              MOVS     r0,#6
0000a6  f7fffffe          BL       clk_enable
;;;248                clk_enable(CLK_PLL3_OUT2);
0000aa  2007              MOVS     r0,#7
0000ac  f7fffffe          BL       clk_enable
;;;249            }
;;;250    
;;;251            //OLD
;;;252            {   // PLL5
;;;253                    SCU_EXTREG_PLL5_SETTING_SET_en(1);
0000b0  6be0              LDR      r0,[r4,#0x3c]
0000b2  f0400001          ORR      r0,r0,#1
0000b6  63e0              STR      r0,[r4,#0x3c]
;;;254    
;;;255                clock_mgr_change_pll5_clock(1, 0x63, 2);
0000b8  2202              MOVS     r2,#2
0000ba  2163              MOVS     r1,#0x63
0000bc  2001              MOVS     r0,#1
0000be  f7fffffe          BL       clock_mgr_change_pll5_clock
;;;256                //clock_mgr_change_pll5_clock(1, 0x54, 5);
;;;257    
;;;258                delay_us(10);
0000c2  200a              MOVS     r0,#0xa
0000c4  f7fffffe          BL       delay_us
;;;259                SCU_EXTREG_CLK_EN0_SET_pll5_out1(1);
0000c8  6960              LDR      r0,[r4,#0x14]
0000ca  f4407080          ORR      r0,r0,#0x100
0000ce  6160              STR      r0,[r4,#0x14]
;;;260                SCU_EXTREG_CLK_EN0_SET_pll5_out2(1);
0000d0  6960              LDR      r0,[r4,#0x14]
0000d2  f4407000          ORR      r0,r0,#0x200
0000d6  6160              STR      r0,[r4,#0x14]
;;;261            }
;;;262    
;;;263            //NEW
;;;264     /*       {   // PLL5
;;;265                clk_enable(CLK_PLL5);
;;;266    
;;;267                clock_mgr_change_pll5_clock(1, 0x63, 2);
;;;268                //clock_mgr_change_pll5_clock(1, 0x54, 5);
;;;269    
;;;270                delay_us(10);
;;;271                clk_enable(CLK_PLL5_OUT1);
;;;272                clk_enable(CLK_PLL5_OUT2);
;;;273            }  */
;;;274        }
;;;275    
;;;276    //OLD_VER
;;;277        {   // fcs
;;;278            delay_us(10);
0000d8  200a              MOVS     r0,#0xa
0000da  f7fffffe          BL       delay_us
;;;279            SCU_EXTREG_CLK_EN0_SET_pll4_out1(0);
0000de  6960              LDR      r0,[r4,#0x14]
0000e0  f0200040          BIC      r0,r0,#0x40
0000e4  6160              STR      r0,[r4,#0x14]
;;;280            delay_us(30);
0000e6  201e              MOVS     r0,#0x1e
0000e8  f7fffffe          BL       delay_us
;;;281            SCU_EXTREG_PLL4_SETTING_SET_en(0);
0000ec  6920              LDR      r0,[r4,#0x10]
0000ee  f0200001          BIC      r0,r0,#1
0000f2  6120              STR      r0,[r4,#0x10]
;;;282            delay_us(30);
0000f4  201e              MOVS     r0,#0x1e
0000f6  f7fffffe          BL       delay_us
;;;283            SCU_EXTREG_CLK_EN0_SET_pll4_fref_pll0(0);
0000fa  6960              LDR      r0,[r4,#0x14]
0000fc  f4205080          BIC      r0,r0,#0x1000
000100  6160              STR      r0,[r4,#0x14]
;;;284    
;;;285            NVIC_ClearPendingIRQ((IRQn_Type)SYS_SYSTEM_IRQ);
000102  2028              MOVS     r0,#0x28
000104  f7fffffe          BL       __NVIC_ClearPendingIRQ
;;;286            NVIC_EnableIRQ((IRQn_Type)SYS_SYSTEM_IRQ);
000108  2028              MOVS     r0,#0x28
00010a  f7fffffe          BL       __NVIC_EnableIRQ
;;;287    
;;;288            outw(SCU_REG_INT_STS, 0xffffffff); // clear all interrupt status
00010e  4d20              LDR      r5,|L6.400|
000110  17a0              ASRS     r0,r4,#30
000112  6268              STR      r0,[r5,#0x24]
;;;289    
;;;290            SCU_REG_PLL2_CTRL_SET_PLL2EN(1);
000114  6c28              LDR      r0,[r5,#0x40]
000116  f0400001          ORR      r0,r0,#1
00011a  e000              B        |L6.286|
                  |L6.284|
00011c  e02b              B        |L6.374|
                  |L6.286|
00011e  6428              STR      r0,[r5,#0x40]
;;;291            SCU_REG_DLL_CTRL_SET_DLLEN(1);
000120  6c68              LDR      r0,[r5,#0x44]
000122  f0400001          ORR      r0,r0,#1
000126  6468              STR      r0,[r5,#0x44]
;;;292            clock_mgr_set_scuclkin(scuclkin_pll0div3, FALSE);
000128  2100              MOVS     r1,#0
00012a  2002              MOVS     r0,#2
00012c  f7fffffe          BL       clock_mgr_set_scuclkin
;;;293            power_mgr_ops(POWER_MGR_OPS_FCS);
000130  2000              MOVS     r0,#0
000132  f7fffffe          BL       power_mgr_ops
;;;294    
;;;295            __WFI();
000136  bf30              WFI      
;;;296            do{
;;;297            }while((__sys_int_flag)!= 0x1);
000138  68b0              LDR      r0,[r6,#8]  ; __sys_int_flag
                  |L6.314|
00013a  2801              CMP      r0,#1
00013c  d1fd              BNE      |L6.314|
;;;298    
;;;299            delay_us(10);
00013e  200a              MOVS     r0,#0xa
000140  f7fffffe          BL       delay_us
;;;300            SCU_EXTREG_CLK_EN0_SET_pll4_fref_pll0(1);
000144  6960              LDR      r0,[r4,#0x14]
000146  f4405080          ORR      r0,r0,#0x1000
00014a  6160              STR      r0,[r4,#0x14]
;;;301            delay_us(30);
00014c  201e              MOVS     r0,#0x1e
00014e  f7fffffe          BL       delay_us
;;;302            SCU_EXTREG_PLL4_SETTING_SET_en(1);
000152  6920              LDR      r0,[r4,#0x10]
000154  f0400001          ORR      r0,r0,#1
000158  6120              STR      r0,[r4,#0x10]
;;;303            delay_us(30);
00015a  201e              MOVS     r0,#0x1e
00015c  f7fffffe          BL       delay_us
;;;304            SCU_EXTREG_CLK_EN0_SET_pll4_out1(1);
000160  6960              LDR      r0,[r4,#0x14]
000162  f0400040          ORR      r0,r0,#0x40
000166  6160              STR      r0,[r4,#0x14]
;;;305        }
;;;306    //NEW VER
;;;307        /*
;;;308        {   // fcs
;;;309            delay_us(10);
;;;310            clk_enable(CLK_PLL4_FREF_PLL0);
;;;311            delay_us(30);
;;;312            clk_enable(CLK_PLL4);
;;;313            delay_us(30);
;;;314            clk_enable(CLK_PLL4_OUT);
;;;315    
;;;316            NVIC_ClearPendingIRQ((IRQn_Type)SYS_SYSTEM_IRQ);
;;;317            NVIC_EnableIRQ((IRQn_Type)SYS_SYSTEM_IRQ);
;;;318            
;;;319            outw(SCU_REG_INT_STS, 0xffffffff); // clear all interrupt status
;;;320    
;;;321            clk_enable(CLK_FCS_PLL2);
;;;322            clk_enable(CLK_FCS_DLL);
;;;323            clock_mgr_set_scuclkin(scuclkin_pll0div3, FALSE);
;;;324            power_mgr_ops(POWER_MGR_OPS_FCS);
;;;325                
;;;326            __WFI();
;;;327            do{
;;;328            }while((__sys_int_flag)!= 0x1);
;;;329        }
;;;330    */
;;;331    
;;;332        delay_ms_disable();
000168  f7fffffe          BL       delay_ms_disable
;;;333        masked_outw(SCU_REG_APBCLKG, 0, SCU_REG_APBCLKG_PCLK_EN_I2C0_PCLK);
00016c  6e28              LDR      r0,[r5,#0x60]
00016e  f0200004          BIC      r0,r0,#4
000172  6628              STR      r0,[r5,#0x60]
;;;334    }
000174  bd70              POP      {r4-r6,pc}
                  |L6.374|
000176  2001              MOVS     r0,#1                 ;141
000178  e753              B        |L6.34|
;;;335    
                          ENDP

00017a  0000              DCW      0x0000
                  |L6.380|
                          DCD      system_isr
                  |L6.384|
                          DCD      0xe000ed08
                  |L6.388|
                          DCD      ||.data||
                  |L6.392|
                          DCD      0xc2380000
                  |L6.396|
                          DCD      ||.constdata||
                  |L6.400|
                          DCD      0xc2300000

                          AREA ||i.system_init_ncpu||, CODE, READONLY, ALIGN=1

                  system_init_ncpu PROC
;;;362    
;;;363    void system_init_ncpu(void)
000000  b510              PUSH     {r4,lr}
;;;364    {
;;;365        clk_enable(CLK_SCPU_TRACE);
000002  2033              MOVS     r0,#0x33
000004  f7fffffe          BL       clk_enable
;;;366        clk_enable(CLK_NCPU);
000008  203c              MOVS     r0,#0x3c
00000a  f7fffffe          BL       clk_enable
;;;367        clk_enable(CLK_NPU);
00000e  203e              MOVS     r0,#0x3e
000010  f7fffffe          BL       clk_enable
;;;368        delay_us(100);
000014  2064              MOVS     r0,#0x64
000016  f7fffffe          BL       delay_us
;;;369        
;;;370        sys_reset(SUBSYS_PD_NPU);
00001a  2002              MOVS     r0,#2
00001c  f7fffffe          BL       sys_reset
;;;371        memset((void *)NiRAM_MEM_BASE, 0x0, 0x10000);
000020  f44f3180          MOV      r1,#0x10000
000024  f04f5020          MOV      r0,#0x28000000
000028  f7fffffe          BL       __aeabi_memclr4
;;;372        sys_reset(SUBSYS_NPU);
00002c  e8bd4010          POP      {r4,lr}
000030  2001              MOVS     r0,#1
000032  f7ffbffe          B.W      sys_reset
;;;373    }
;;;374    
                          ENDP


                          AREA ||i.system_isr||, CODE, READONLY, ALIGN=2

                  system_isr PROC
;;;49     
;;;50     static void system_isr(void)
000000  4806              LDR      r0,|L8.28|
;;;51     {
;;;52         u32 status;
;;;53         
;;;54         bootup_status = inw(SCU_REG_BTUP_STS);
000002  6801              LDR      r1,[r0,#0]
000004  4a06              LDR      r2,|L8.32|
;;;55         outw(SCU_REG_BTUP_STS, 0xffffffff);  // clear boot-up status
000006  1783              ASRS     r3,r0,#30
000008  6011              STR      r1,[r2,#0]  ; bootup_status
00000a  6003              STR      r3,[r0,#0]
;;;56     
;;;57         status = inw(SCU_REG_INT_STS);    
00000c  6a41              LDR      r1,[r0,#0x24]
;;;58         outw(SCU_REG_INT_STS, 0xffffffff); //clear sleep wakeup interrupt   
00000e  6243              STR      r3,[r0,#0x24]
;;;59     
;;;60         __sys_int_flag = 0x1;
000010  2301              MOVS     r3,#1
;;;61     
;;;62         dbg_msg("bootup_status=%x", bootup_status);
;;;63         if (bootup_status & SCU_REG_BTUP_STS_RTC_BTUPTS) {
;;;64             dbg_msg("bootup: SCU_REG_BTUP_STS_RTC_BTUPTS");
;;;65         }    
;;;66         if (bootup_status & SCU_REG_BTUP_STS_PWRBTN_STS) {
;;;67             dbg_msg("bootup: SCU_REG_BTUP_STS_PWRBTN_STS");
;;;68         }
;;;69         
;;;70         if (status & SCU_REG_INT_STS_PWRSTATE_CHG) {
;;;71             dbg_msg("SCU_REG_INT_STS_PWRSTATE_CHG");
;;;72         }
;;;73         if (status & SCU_REG_INT_STS_RTC_SEC) {
;;;74             dbg_msg("SCU_REG_INT_STS_RTC_SEC");
;;;75         }
;;;76         if (status & SCU_REG_INT_STS_RTC_PER) {
;;;77             dbg_msg("SCU_REG_INT_STS_RTC_PER");
;;;78         }
;;;79         if (status & SCU_REG_INT_STS_RTC_ALARM) {
;;;80             dbg_msg("SCU_REG_INT_STS_RTC_ALARM");
;;;81         }
;;;82         if (status & SCU_REG_INT_STS_PLL_UPDATE) {
;;;83             dbg_msg("SCU_REG_INT_STS_PLL_UPDATE");
;;;84         }
;;;85         if (status & SCU_REG_INT_STS_FCS) {
;;;86             dbg_msg("SCU_REG_INT_STS_FCS");
;;;87         }
;;;88         if (status & SCU_REG_INT_STS_BUSSPEED) {
;;;89             dbg_msg("SCU_REG_INT_STS_BUSSPEED");
;;;90         }
;;;91         if (status & SCU_REG_INT_STS_WAKEUP) {
;;;92             dbg_msg("SCU_REG_INT_STS_WAKEUP");
;;;93         }
;;;94         if (status & SCU_REG_INT_STS_PWRBTN_RISE) {
;;;95             dbg_msg("SCU_REG_INT_STS_PWRBTN_RISE");
;;;96         }
;;;97         if (status & SCU_REG_INT_STS_PWRBTN_FALL) {
;;;98             dbg_msg("SCU_REG_INT_STS_PWRBTN_FALL");
;;;99         }
;;;100    
;;;101        //outw(SCU_REG_BTUP_STS, bootup_status);
;;;102        outw(SCU_REG_INT_STS, status);
000012  6093              STR      r3,[r2,#8]  ; __sys_int_flag
000014  6241              STR      r1,[r0,#0x24]
;;;103        NVIC_ClearPendingIRQ(SYS_SYSTEM_IRQ);
000016  2028              MOVS     r0,#0x28
000018  f7ffbffe          B.W      __NVIC_ClearPendingIRQ
;;;104    }
;;;105    
                          ENDP

                  |L8.28|
                          DCD      0xc2300000
                  |L8.32|
                          DCD      ||.data||

                          AREA ||i.system_wakeup_ncpu||, CODE, READONLY, ALIGN=2

                  system_wakeup_ncpu PROC
;;;335    
;;;336    void system_wakeup_ncpu(unsigned char wakeup_all)
000000  b510              PUSH     {r4,lr}
;;;337    {
;;;338        if (1 == wakeup_all) {
;;;339    //OLD VER
;;;340            SCU_EXTREG_CLK_EN0_SET_scpu_traceclk(1);
000002  4c13              LDR      r4,|L9.80|
000004  2801              CMP      r0,#1                 ;338
000006  d11e              BNE      |L9.70|
000008  6960              LDR      r0,[r4,#0x14]
00000a  f4400000          ORR      r0,r0,#0x800000
00000e  6160              STR      r0,[r4,#0x14]
;;;341            SCU_EXTREG_CLK_EN0_SET_ncpu_fclk_src(1);
000010  6960              LDR      r0,[r4,#0x14]
000012  f4400080          ORR      r0,r0,#0x400000
000016  6160              STR      r0,[r4,#0x14]
;;;342            SCU_EXTREG_CLK_EN1_SET_npu(1);
000018  69a0              LDR      r0,[r4,#0x18]
00001a  f4400000          ORR      r0,r0,#0x800000
00001e  61a0              STR      r0,[r4,#0x18]
;;;343            /* reset adc, usb, ddr3, lcdc, lcm, dpi, csirx0, csirx1, csitx, dsitx,
;;;344                     mipi_rx0_phy, mipi_rx1_phy */
;;;345            SCU_EXTREG_SWRST_SET_PD_NPU_resetn(0);
000020  6ce0              LDR      r0,[r4,#0x4c]
000022  f0200002          BIC      r0,r0,#2
000026  64e0              STR      r0,[r4,#0x4c]
;;;346            SCU_EXTREG_SWRST_SET_NPU_resetn(0);
000028  6ce0              LDR      r0,[r4,#0x4c]
00002a  f0200004          BIC      r0,r0,#4
00002e  64e0              STR      r0,[r4,#0x4c]
;;;347            delay_us(100);
000030  2064              MOVS     r0,#0x64
000032  f7fffffe          BL       delay_us
;;;348            SCU_EXTREG_SWRST_SET_PD_NPU_resetn(1);
000036  6ce0              LDR      r0,[r4,#0x4c]
000038  f0400002          ORR      r0,r0,#2
00003c  64e0              STR      r0,[r4,#0x4c]
;;;349            SCU_EXTREG_SWRST_SET_NPU_resetn(1);
00003e  6ce0              LDR      r0,[r4,#0x4c]
000040  f0400004          ORR      r0,r0,#4
000044  64e0              STR      r0,[r4,#0x4c]
                  |L9.70|
;;;350    //NEW VER
;;;351            /*
;;;352            clk_enable(CLK_SCPU_TRACE);
;;;353            clk_enable(CLK_NCPU);
;;;354            clk_enable(CLK_NPU);
;;;355            sys_reset(SUBSYS_PD_NPU);
;;;356            sys_reset(SUBSYS_NPU);
;;;357            */
;;;358        }
;;;359        
;;;360        SCU_EXTREG_CM4_NCPU_CTRL_SET_wakeup(1);
000046  6ea0              LDR      r0,[r4,#0x68]
000048  f4405080          ORR      r0,r0,#0x1000
00004c  66a0              STR      r0,[r4,#0x68]
;;;361    }
00004e  bd10              POP      {r4,pc}
;;;362    
                          ENDP

                  |L9.80|
                          DCD      0xc2380000

                          AREA ||.constdata||, DATA, READONLY, ALIGN=1

                  pll3_setting
000000  00020190          DCW      0x0002,0x0190
000004  00020003          DCW      0x0002,0x0003
000008  001a0007          DCW      0x001a,0x0007
00000c  0003001a          DCW      0x0003,0x001a
000010  0007              DCW      0x0007

                          AREA ||.data||, DATA, ALIGN=2

                  bootup_status
                          DCD      0x00000000
                  warm_boot
                          DCD      0x00000000
                  __sys_int_flag
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\scpu\\drivers\\system\\system.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___8_system_c_1a91d693____REV16|
#line 208 "F:\\Users\\fu\\AppData\\Local\\Arm\\Packs\\ARM\\CMSIS\\5.9.0\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___8_system_c_1a91d693____REV16| PROC
#line 209

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___8_system_c_1a91d693____REVSH|
#line 223
|__asm___8_system_c_1a91d693____REVSH| PROC
#line 224

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___8_system_c_1a91d693____RRX|
#line 410
|__asm___8_system_c_1a91d693____RRX| PROC
#line 411

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
