; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\objects\kdp_memxfer.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\kdp_memxfer.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O3 --diag_suppress=9931 -I..\..\config -I..\..\..\..\board -I..\..\..\..\common\include -I..\..\..\..\scpu\device\include\CMSIS -I..\..\..\..\scpu\device\include\Kneron -I..\..\..\..\scpu\framework\include -I..\..\..\..\scpu\framework\include\framework -I..\..\..\..\scpu\drivers\include -I..\..\..\..\scpu\drivers\include\media\touch -I..\..\..\..\scpu\drivers\include\media\flash -I..\..\..\..\scpu\lib\kdp_system\inc -I..\..\..\..\scpu\lib\kdp_application\include\ -I..\..\..\..\scpu\lib\kdp_application\base\ -I..\..\..\..\scpu\lib\kdp_application\misc -I..\..\..\..\scpu\lib\kdp_e2e_r1n1\include -I..\..\..\..\scpu\include -I..\..\..\..\scpu\middleware\ota -I..\..\..\..\scpu\middleware\comm -I..\..\..\..\scpu\middleware\kdp_comm -I..\..\..\..\scpu\share -I..\..\..\..\scpu\share\gui_lib -I..\..\user -I.\RTE\CMSIS -I.\RTE\_Target-scpu -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\RTOS2\Include -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\RTOS2\RTX\Include -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\Device\ARM\ARMCM4\Include -D__RTX -D__MICROLIB -D__UVISION_VERSION=538 -D_RTE_ -DARMCM4_FP -D_RTE_ -DARM_MATH_CM4 -DTARGET_SCPU -DLOG_ENABLE -DKL520 -DHEAD_POSE_CHECK_PERCENT --omf_browse=.\objects\kdp_memxfer.crf ..\..\..\..\scpu\drivers\src\kdp_memxfer.c]
                          THUMB

                          AREA ||i.kdp520_memxfer_get_flash_device_id||, CODE, READONLY, ALIGN=2

                  kdp520_memxfer_get_flash_device_id PROC
;;;16     static u16 flash_device_id = 0;
;;;17     extern u16 kdp520_memxfer_get_flash_device_id(void)
000000  4801              LDR      r0,|L1.8|
;;;18     {
;;;19         return flash_device_id;
000002  8800              LDRH     r0,[r0,#0]  ; flash_device_id
;;;20     }
000004  4770              BX       lr
;;;21     
                          ENDP

000006  0000              DCW      0x0000
                  |L1.8|
                          DCD      ||.data||

                          AREA ||i.kdp_memxfer_ddr_to_flash||, CODE, READONLY, ALIGN=2

                  kdp_memxfer_ddr_to_flash PROC
;;;58     extern void kdp_ddr_to_flash_dma_copy(UINT32 src_addr, UINT32 dst_addr, UINT32 size);
;;;59     int kdp_memxfer_ddr_to_flash(u32 dst, u32 src, size_t bytes)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;60     {
;;;61         int ret = 0;
;;;62         osMutexAcquire(flash_memx_lock, osWaitForever);
000004  4d0d              LDR      r5,|L2.60|
000006  460f              MOV      r7,r1                 ;60
000008  4680              MOV      r8,r0                 ;60
00000a  2400              MOVS     r4,#0                 ;61
00000c  4616              MOV      r6,r2                 ;60
00000e  1e61              SUBS     r1,r4,#1
000010  6868              LDR      r0,[r5,#4]  ; flash_memx_lock
000012  f7fffffe          BL       osMutexAcquire
;;;63         kdp_flash_erase_multi_sectors( dst, dst+bytes );
000016  4640              MOV      r0,r8
000018  eb080106          ADD      r1,r8,r6
00001c  f7fffffe          BL       kdp_flash_erase_multi_sectors
;;;64         if( src != 0 )
000020  b12f              CBZ      r7,|L2.46|
;;;65         {
;;;66             ret = (int)kdp_flash_program_data( dst, (UINT8*)src , bytes );
000022  4632              MOV      r2,r6
000024  4639              MOV      r1,r7
000026  4640              MOV      r0,r8
000028  f7fffffe          BL       kdp_flash_program_data
00002c  4604              MOV      r4,r0
                  |L2.46|
;;;67             //kdp_ddr_to_flash_dma_copy(src, dst, bytes);
;;;68         }
;;;69         osMutexRelease(flash_memx_lock);
00002e  6868              LDR      r0,[r5,#4]  ; flash_memx_lock
000030  f7fffffe          BL       osMutexRelease
;;;70         return ret ;
000034  4620              MOV      r0,r4
;;;71     }
000036  e8bd81f0          POP      {r4-r8,pc}
;;;72     
                          ENDP

00003a  0000              DCW      0x0000
                  |L2.60|
                          DCD      ||.data||

                          AREA ||i.kdp_memxfer_ddr_to_flash_sector||, CODE, READONLY, ALIGN=2

                  kdp_memxfer_ddr_to_flash_sector PROC
;;;73     #define FLASH_SECTOR_SIZE 4096
;;;74     int kdp_memxfer_ddr_to_flash_sector(u32 dst, u32 src, size_t bytes)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;75     {
;;;76         int ret = 0;
;;;77         if(bytes > FLASH_SECTOR_SIZE) return KDP_STATUS_ERROR;
000004  f44f5680          MOV      r6,#0x1000
000008  460d              MOV      r5,r1                 ;75
00000a  f04f0800          MOV      r8,#0                 ;76
00000e  42b2              CMP      r2,r6
000010  d902              BLS      |L3.24|
000012  2000              MOVS     r0,#0
                  |L3.20|
;;;78     
;;;79         u32 start_dst = ( dst / FLASH_SECTOR_SIZE ) * FLASH_SECTOR_SIZE;
;;;80         u32 start_src = src - (dst - start_dst);
;;;81         //dbg_msg_algo ("flashing %x,%x by %x,%x.", dst, src, start_dst, start_src);
;;;82         
;;;83         osMutexAcquire(flash_memx_lock, osWaitForever);
;;;84         kdp_flash_erase_4k( start_dst );
;;;85         if( src != 0 )
;;;86         {
;;;87             ret = (int)kdp_flash_program_data( start_dst, (UINT8*)start_src , FLASH_SECTOR_SIZE );
;;;88         }
;;;89         osMutexRelease(flash_memx_lock);
;;;90         return ret ;
;;;91     }
000014  e8bd87f0          POP      {r4-r10,pc}
                  |L3.24|
000018  0b04              LSRS     r4,r0,#12             ;79
00001a  0324              LSLS     r4,r4,#12             ;79
00001c  4f0b              LDR      r7,|L3.76|
00001e  1b00              SUBS     r0,r0,r4              ;80
000020  eba50900          SUB      r9,r5,r0              ;80
000024  f04f31ff          MOV      r1,#0xffffffff        ;83
000028  6878              LDR      r0,[r7,#4]            ;83  ; flash_memx_lock
00002a  f7fffffe          BL       osMutexAcquire
00002e  4620              MOV      r0,r4                 ;84
000030  f7fffffe          BL       kdp_flash_erase_4k
000034  b12d              CBZ      r5,|L3.66|
000036  4632              MOV      r2,r6                 ;87
000038  4649              MOV      r1,r9                 ;87
00003a  4620              MOV      r0,r4                 ;87
00003c  f7fffffe          BL       kdp_flash_program_data
000040  4680              MOV      r8,r0                 ;87
                  |L3.66|
000042  6878              LDR      r0,[r7,#4]            ;89  ; flash_memx_lock
000044  f7fffffe          BL       osMutexRelease
000048  4640              MOV      r0,r8                 ;90
00004a  e7e3              B        |L3.20|
;;;92     
                          ENDP

                  |L3.76|
                          DCD      ||.data||

                          AREA ||i.kdp_memxfer_ddr_to_flash_wo_erase||, CODE, READONLY, ALIGN=2

                  kdp_memxfer_ddr_to_flash_wo_erase PROC
;;;92     
;;;93     int kdp_memxfer_ddr_to_flash_wo_erase(u32 dst, u32 src, size_t bytes)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;94     {
;;;95         int ret = 0;
;;;96         osMutexAcquire(flash_memx_lock, osWaitForever);
000004  4d0a              LDR      r5,|L4.48|
000006  460e              MOV      r6,r1                 ;94
000008  4680              MOV      r8,r0                 ;94
00000a  2400              MOVS     r4,#0                 ;95
00000c  4617              MOV      r7,r2                 ;94
00000e  1e61              SUBS     r1,r4,#1
000010  6868              LDR      r0,[r5,#4]  ; flash_memx_lock
000012  f7fffffe          BL       osMutexAcquire
;;;97         if( src != 0 )
000016  b12e              CBZ      r6,|L4.36|
;;;98         {
;;;99             ret = (int)kdp_flash_program_data( dst, (UINT8*)src , bytes );
000018  463a              MOV      r2,r7
00001a  4631              MOV      r1,r6
00001c  4640              MOV      r0,r8
00001e  f7fffffe          BL       kdp_flash_program_data
000022  4604              MOV      r4,r0
                  |L4.36|
;;;100        }
;;;101        osMutexRelease(flash_memx_lock);
000024  6868              LDR      r0,[r5,#4]  ; flash_memx_lock
000026  f7fffffe          BL       osMutexRelease
;;;102        return ret ;
00002a  4620              MOV      r0,r4
;;;103    }
00002c  e8bd81f0          POP      {r4-r8,pc}
;;;104    
                          ENDP

                  |L4.48|
                          DCD      ||.data||

                          AREA ||i.kdp_memxfer_flash_sector_erase4k||, CODE, READONLY, ALIGN=2

                  kdp_memxfer_flash_sector_erase4k PROC
;;;107     */
;;;108    int kdp_memxfer_flash_sector_erase4k(u32 addr)
000000  b570              PUSH     {r4-r6,lr}
;;;109    {
;;;110        osMutexAcquire(flash_memx_lock, osWaitForever);
000002  4c07              LDR      r4,|L5.32|
000004  4605              MOV      r5,r0                 ;109
000006  f04f31ff          MOV      r1,#0xffffffff
00000a  6860              LDR      r0,[r4,#4]  ; flash_memx_lock
00000c  f7fffffe          BL       osMutexAcquire
;;;111    
;;;112        kdp_flash_erase_4k(addr);
000010  4628              MOV      r0,r5
000012  f7fffffe          BL       kdp_flash_erase_4k
;;;113    
;;;114        osMutexRelease(flash_memx_lock);
000016  6860              LDR      r0,[r4,#4]  ; flash_memx_lock
000018  f7fffffe          BL       osMutexRelease
;;;115    
;;;116        return 0;
00001c  2000              MOVS     r0,#0
;;;117    }
00001e  bd70              POP      {r4-r6,pc}
;;;118    
                          ENDP

                  |L5.32|
                          DCD      ||.data||

                          AREA ||i.kdp_memxfer_flash_sector_erase64k||, CODE, READONLY, ALIGN=2

                  kdp_memxfer_flash_sector_erase64k PROC
;;;121     */
;;;122    int kdp_memxfer_flash_sector_erase64k(u32 addr)
000000  b570              PUSH     {r4-r6,lr}
;;;123    {
;;;124        osMutexAcquire(flash_memx_lock, osWaitForever);
000002  4c07              LDR      r4,|L6.32|
000004  4605              MOV      r5,r0                 ;123
000006  f04f31ff          MOV      r1,#0xffffffff
00000a  6860              LDR      r0,[r4,#4]  ; flash_memx_lock
00000c  f7fffffe          BL       osMutexAcquire
;;;125    
;;;126        kdp_flash_erase_64k(addr);
000010  4628              MOV      r0,r5
000012  f7fffffe          BL       kdp_flash_erase_64k
;;;127    
;;;128        osMutexRelease(flash_memx_lock);
000016  6860              LDR      r0,[r4,#4]  ; flash_memx_lock
000018  f7fffffe          BL       osMutexRelease
;;;129    
;;;130        return 0;
00001c  2000              MOVS     r0,#0
;;;131    }
00001e  bd70              POP      {r4-r6,pc}
;;;132    
                          ENDP

                  |L6.32|
                          DCD      ||.data||

                          AREA ||i.kdp_memxfer_flash_sector_multi_erase||, CODE, READONLY, ALIGN=2

                  kdp_memxfer_flash_sector_multi_erase PROC
;;;132    
;;;133    int kdp_memxfer_flash_sector_multi_erase( u32 start_add, u32 end_add )
000000  b570              PUSH     {r4-r6,lr}
;;;134    {
;;;135        osMutexAcquire(flash_memx_lock, osWaitForever);
000002  4c08              LDR      r4,|L7.36|
000004  460d              MOV      r5,r1                 ;134
000006  4606              MOV      r6,r0                 ;134
000008  f04f31ff          MOV      r1,#0xffffffff
00000c  6860              LDR      r0,[r4,#4]  ; flash_memx_lock
00000e  f7fffffe          BL       osMutexAcquire
;;;136        kdp_flash_erase_multi_sectors( start_add, end_add );
000012  4629              MOV      r1,r5
000014  4630              MOV      r0,r6
000016  f7fffffe          BL       kdp_flash_erase_multi_sectors
;;;137        osMutexRelease(flash_memx_lock);
00001a  6860              LDR      r0,[r4,#4]  ; flash_memx_lock
00001c  f7fffffe          BL       osMutexRelease
;;;138        return 0;
000020  2000              MOVS     r0,#0
;;;139    }
000022  bd70              POP      {r4-r6,pc}
;;;140    
                          ENDP

                  |L7.36|
                          DCD      ||.data||

                          AREA ||i.kdp_memxfer_flash_to_ddr||, CODE, READONLY, ALIGN=2

                  kdp_memxfer_flash_to_ddr PROC
;;;37     
;;;38     int kdp_memxfer_flash_to_ddr(u32 dst, u32 src, size_t bytes)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;39     {
;;;40     
;;;41     #if 0 || FLASH_READ_ARRANGE_EN == 1 //FLASH_CODE_OPT == YES
;;;42         osMutexAcquire(flash_memx_lock, osWaitForever);
000004  4c0d              LDR      r4,|L8.60|
000006  4688              MOV      r8,r1                 ;39
000008  4605              MOV      r5,r0                 ;39
00000a  f04f36ff          MOV      r6,#0xffffffff
00000e  4617              MOV      r7,r2                 ;39
000010  4631              MOV      r1,r6
000012  6860              LDR      r0,[r4,#4]  ; flash_memx_lock
000014  f7fffffe          BL       osMutexAcquire
;;;43         if( kdp_flash_read_data( src,  (UINT32 *)dst ,bytes ) == KDP_STATUS_OK )
000018  463a              MOV      r2,r7
00001a  4629              MOV      r1,r5
00001c  4640              MOV      r0,r8
00001e  f7fffffe          BL       kdp_flash_read_data
000022  2801              CMP      r0,#1
000024  6860              LDR      r0,[r4,#4]  ; flash_memx_lock
000026  d004              BEQ      |L8.50|
;;;44         {
;;;45             osMutexRelease(flash_memx_lock);
;;;46             return 0;
;;;47         }
;;;48         else
;;;49         {
;;;50             osMutexRelease(flash_memx_lock);
000028  f7fffffe          BL       osMutexRelease
;;;51             return -1;
00002c  4630              MOV      r0,r6
                  |L8.46|
;;;52         }
;;;53     #else
;;;54     #endif
;;;55     
;;;56     }
00002e  e8bd81f0          POP      {r4-r8,pc}
                  |L8.50|
000032  f7fffffe          BL       osMutexRelease
000036  2000              MOVS     r0,#0                 ;46
000038  e7f9              B        |L8.46|
;;;57     
                          ENDP

00003a  0000              DCW      0x0000
                  |L8.60|
                          DCD      ||.data||

                          AREA ||i.kdp_memxfer_flash_to_niram||, CODE, READONLY, ALIGN=1

                  kdp_memxfer_flash_to_niram PROC
;;;143     */
;;;144    int kdp_memxfer_flash_to_niram(void)
000000  b510              PUSH     {r4,lr}
;;;145    {
;;;146        int ota_active_sts;
;;;147    
;;;148        ota_active_sts = ota_get_active_ncpu_partition();
000002  f7fffffe          BL       ota_get_active_ncpu_partition
;;;149        /* stop ncpu, then load code from flash to NiRAM */
;;;150        
;;;151        if (ota_active_sts == 0) {
;;;152            kdp_memxfer_flash_to_ddr((u32)NCPU_START_ADDRESS, 
000006  f44f3280          MOV      r2,#0x10000
00000a  f04f5320          MOV      r3,#0x28000000
00000e  b130              CBZ      r0,|L9.30|
;;;153                    NCPU_PARTITION0_START_IN_FLASH, NCPU_IMAGE_SIZE);
;;;154        } else {
;;;155            kdp_memxfer_flash_to_ddr((u32)NCPU_START_ADDRESS, 
000010  f44f21d2          MOV      r1,#0x69000
                  |L9.20|
000014  4618              MOV      r0,r3
000016  f7fffffe          BL       kdp_memxfer_flash_to_ddr
;;;156                    NCPU_PARTITION1_START_IN_FLASH, NCPU_IMAGE_SIZE);
;;;157        }
;;;158    
;;;159    
;;;160        return 0;
00001a  2000              MOVS     r0,#0
;;;161    }
00001c  bd10              POP      {r4,pc}
                  |L9.30|
00001e  f44f3128          MOV      r1,#0x2a000           ;152
000022  e7f7              B        |L9.20|
;;;162    
                          ENDP


                          AREA ||i.kdp_memxfer_init||, CODE, READONLY, ALIGN=2

                  kdp_memxfer_init PROC
;;;21     
;;;22     int kdp_memxfer_init(u8 flash_mode, u8 mem_mode)
000000  b570              PUSH     {r4-r6,lr}
;;;23     {
;;;24         kdp_status_t    ret ;
;;;25         if(flash_memx_lock == NULL)
000002  4c0c              LDR      r4,|L10.52|
000004  6860              LDR      r0,[r4,#4]            ;23  ; flash_memx_lock
000006  b918              CBNZ     r0,|L10.16|
;;;26             flash_memx_lock = osMutexNew(NULL);
000008  2000              MOVS     r0,#0
00000a  f7fffffe          BL       osMutexNew
00000e  6060              STR      r0,[r4,#4]  ; flash_memx_lock
                  |L10.16|
;;;27     
;;;28         osMutexAcquire(flash_memx_lock, osWaitForever);
000010  f04f31ff          MOV      r1,#0xffffffff
000014  f7fffffe          BL       osMutexAcquire
;;;29     
;;;30         kdp_flash_initialize();
000018  f7fffffe          BL       kdp_flash_initialize
;;;31         ret = kdp_flash_get_info();
00001c  f7fffffe          BL       kdp_flash_get_info
000020  4605              MOV      r5,r0
;;;32     
;;;33         flash_device_id = kdp_flash_get_id();
000022  f7fffffe          BL       kdp_flash_get_id
000026  8020              STRH     r0,[r4,#0]
;;;34         osMutexRelease(flash_memx_lock);
000028  6860              LDR      r0,[r4,#4]  ; flash_memx_lock
00002a  f7fffffe          BL       osMutexRelease
;;;35         return ret;
00002e  4628              MOV      r0,r5
;;;36     }
000030  bd70              POP      {r4-r6,pc}
;;;37     
                          ENDP

000032  0000              DCW      0x0000
                  |L10.52|
                          DCD      ||.data||

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  4d525f53          DCB      "MR_SUCCESS",0
000004  55434345
000008  535300  
00000b  00                DCB      0
00000c  4d525f52          DCB      "MR_REJECTED",0
000010  454a4543
000014  54454400
000018  4d525f41          DCB      "MR_ABORTED",0
00001c  424f5254
000020  454400  
000023  00                DCB      0
000024  4d525f46          DCB      "MR_FAILED_DEV_OPEN_FAIL",0
000028  41494c45
00002c  445f4445
000030  565f4f50
000034  454e5f46
000038  41494c00
00003c  4d525f46          DCB      "MR_FAILED_UNKNOWN_REASON",0
000040  41494c45
000044  445f554e
000048  4b4e4f57
00004c  4e5f5245
000050  41534f4e
000054  00      
000055  00                DCB      0
000056  00                DCB      0
000057  00                DCB      0
000058  4d525f46          DCB      "MR_FAILED_INVALID_PARAM",0
00005c  41494c45
000060  445f494e
000064  56414c49
000068  445f5041
00006c  52414d00
000070  4d525f46          DCB      "MR_FAILED_OOM",0
000074  41494c45
000078  445f4f4f
00007c  4d00    
00007e  00                DCB      0
00007f  00                DCB      0
000080  4d525f46          DCB      "MR_FAILED_UNKNOWN_USER",0
000084  41494c45
000088  445f554e
00008c  4b4e4f57
000090  4e5f5553
000094  455200  
000097  00                DCB      0
000098  4d525f46          DCB      "MR_FAILED_MAX_USER",0
00009c  41494c45
0000a0  445f4d41
0000a4  585f5553
0000a8  455200  
0000ab  00                DCB      0
0000ac  4d525f46          DCB      "MR_FAILED_FACE_ENROLLED",0
0000b0  41494c45
0000b4  445f4641
0000b8  43455f45
0000bc  4e524f4c
0000c0  4c454400
0000c4  4d525f46          DCB      "MR_FAILED_LIVENESS_CHECK",0
0000c8  41494c45
0000cc  445f4c49
0000d0  56454e45
0000d4  53535f43
0000d8  4845434b
0000dc  00      
0000dd  00                DCB      0
0000de  00                DCB      0
0000df  00                DCB      0
0000e0  4d525f46          DCB      "MR_FAILED_TIME_OUT",0
0000e4  41494c45
0000e8  445f5449
0000ec  4d455f4f
0000f0  555400  
0000f3  00                DCB      0
0000f4  4d525f46          DCB      "MR_FAILED_AUTHORIZATION",0
0000f8  41494c45
0000fc  445f4155
000100  54484f52
000104  495a4154
000108  494f4e00
00010c  4d525f46          DCB      "MR_FAILED_READ_FILE",0
000110  41494c45
000114  445f5245
000118  41445f46
00011c  494c4500
000120  4d525f46          DCB      "MR_FAILED_WRITE_FILE",0
000124  41494c45
000128  445f5752
00012c  4954455f
000130  46494c45
000134  00      
000135  00                DCB      0
000136  00                DCB      0
000137  00                DCB      0
000138  4d525f46          DCB      "MR_FAILED_NO_ENCRYPT",0
00013c  41494c45
000140  445f4e4f
000144  5f454e43
000148  52595054
00014c  00      
00014d  00                DCB      0
00014e  00                DCB      0
00014f  00                DCB      0
000150  4d525f46          DCB      "MR_FAILED_STORE_ERR",0
000154  41494c45
000158  445f5354
00015c  4f52455f
000160  45525200
000164  4d525f46          DCB      "MR_FAILED_NO_IMG",0
000168  41494c45
00016c  445f4e4f
000170  5f494d47
000174  00      
000175  00                DCB      0
000176  00                DCB      0
000177  00                DCB      0
000178  4d525f46          DCB      "MR_FAILED_NO_IDX",0
00017c  41494c45
000180  445f4e4f
000184  5f494458
000188  00      
000189  00                DCB      0
00018a  00                DCB      0
00018b  00                DCB      0
00018c  4d525f46          DCB      "MR_FAILED_BUF_OVERFLOW",0
000190  41494c45
000194  445f4255
000198  465f4f56
00019c  4552464c
0001a0  4f5700  
0001a3  00                DCB      0
0001a4  4d525f46          DCB      "MR_FAILED_MASS_DATA_HEAD_EMPTY",0
0001a8  41494c45
0001ac  445f4d41
0001b0  53535f44
0001b4  4154415f
0001b8  48454144
0001bc  5f454d50
0001c0  545900  
0001c3  00                DCB      0
0001c4  4d525f46          DCB      "MR_FAILED_MASS_DATA_DB_ABNORMAL",0
0001c8  41494c45
0001cc  445f4d41
0001d0  53535f44
0001d4  4154415f
0001d8  44425f41
0001dc  424e4f52
0001e0  4d414c00
0001e4  4d525f46          DCB      "MR_FAILED_MASS_DATA_FM_ABNORMAL",0
0001e8  41494c45
0001ec  445f4d41
0001f0  53535f44
0001f4  4154415f
0001f8  464d5f41
0001fc  424e4f52
000200  4d414c00
000204  4d525f46          DCB      "MR_FAILED_NOT_READY",0
000208  41494c45
00020c  445f4e4f
000210  545f5245
000214  41445900
000218  4d525f46          DCB      "MR_FAILED_EXISTED_USER",0
00021c  41494c45
000220  445f4558
000224  49535445
000228  445f5553
00022c  455200  
00022f  00                DCB      0
000230  4d525f46          DCB      "MR_FAILED_IDX_OVERFLOW",0
000234  41494c45
000238  445f4944
00023c  585f4f56
000240  4552464c
000244  4f5700  
000247  00                DCB      0
000248  4d525f43          DCB      "MR_CONTIUNOUS",0
00024c  4f4e5449
000250  554e4f55
000254  5300    
000256  00                DCB      0
000257  00                DCB      0
000258  4d525f53          DCB      "MR_SUCCESS_BUT_DEL_USER",0
00025c  55434345
000260  53535f42
000264  55545f44
000268  454c5f55
00026c  53455200
000270  4d525f46          DCB      "MR_FAILED_INVALID_CMD",0
000274  41494c45
000278  445f494e
00027c  56414c49
000280  445f434d
000284  4400    
000286  00                DCB      0
000287  00                DCB      0
000288  00                DCB      0

                          AREA ||.data||, DATA, ALIGN=2

                  flash_device_id
000000  0000              DCW      0x0000
000002  0000              DCB      0x00,0x00
                  flash_memx_lock
                          DCD      0x00000000

                          AREA ||i._str_uart_reply||, COMGROUP=_str_uart_reply, CODE, READONLY, ALIGN=2

                  _str_uart_reply PROC
;;;201    #pragma diag_suppress 111
;;;202    inline char *_str_uart_reply(enum uart_reply_result result)
000000  2814              CMP      r0,#0x14
;;;203    {
;;;204        switch (result)
000002  d04e              BEQ      |L71.162|
000004  dc0d              BGT      |L71.34|
000006  2814              CMP      r0,#0x14
000008  d22d              BCS      |L71.102|
00000a  e8dff000          TBB      [pc,r0]
00000e  2e30              DCB      0x2e,0x30
000010  322c3436          DCB      0x32,0x2c,0x34,0x36
000014  383a3c3e          DCB      0x38,0x3a,0x3c,0x3e
000018  402c4244          DCB      0x40,0x2c,0x42,0x44
00001c  462c2c2c          DCB      0x46,0x2c,0x2c,0x2c
000020  2c48              DCB      0x2c,0x48
                  |L71.34|
000022  2832              CMP      r0,#0x32
000024  d04d              BEQ      |L71.194|
000026  dc10              BGT      |L71.74|
000028  2818              CMP      r0,#0x18
00002a  d042              BEQ      |L71.178|
00002c  dc06              BGT      |L71.60|
00002e  2815              CMP      r0,#0x15
000030  d039              BEQ      |L71.166|
000032  2816              CMP      r0,#0x16
000034  d039              BEQ      |L71.170|
000036  2817              CMP      r0,#0x17
000038  d115              BNE      |L71.102|
00003a  e038              B        |L71.174|
                  |L71.60|
00003c  2819              CMP      r0,#0x19
00003e  d03a              BEQ      |L71.182|
000040  2830              CMP      r0,#0x30
000042  d03a              BEQ      |L71.186|
000044  2831              CMP      r0,#0x31
000046  d10e              BNE      |L71.102|
000048  e039              B        |L71.190|
                  |L71.74|
00004a  2836              CMP      r0,#0x36
00004c  d041              BEQ      |L71.210|
00004e  dc06              BGT      |L71.94|
000050  2833              CMP      r0,#0x33
000052  d038              BEQ      |L71.198|
000054  2834              CMP      r0,#0x34
000056  d038              BEQ      |L71.202|
000058  2835              CMP      r0,#0x35
00005a  d104              BNE      |L71.102|
00005c  e037              B        |L71.206|
                  |L71.94|
00005e  2840              CMP      r0,#0x40
000060  d039              BEQ      |L71.214|
000062  28ff              CMP      r0,#0xff
000064  d039              BEQ      |L71.218|
                  |L71.102|
;;;205        {
;;;206            CMD_REPLY_RESULT_MACRO(TO_STR)
;;;207        default:
;;;208            break;
;;;209        }
;;;210        
;;;211        return "";
000066  481e              LDR      r0,|L71.224|
;;;212    }
000068  4770              BX       lr
00006a  481e              LDR      r0,|L71.228|
00006c  4770              BX       lr
00006e  481e              LDR      r0,|L71.232|
000070  4770              BX       lr
000072  481e              LDR      r0,|L71.236|
000074  4770              BX       lr
000076  481e              LDR      r0,|L71.240|
000078  4770              BX       lr
00007a  481e              LDR      r0,|L71.244|
00007c  4770              BX       lr
00007e  481e              LDR      r0,|L71.248|
000080  4770              BX       lr
000082  481e              LDR      r0,|L71.252|
000084  4770              BX       lr
000086  481e              LDR      r0,|L71.256|
000088  4770              BX       lr
00008a  481e              LDR      r0,|L71.260|
00008c  4770              BX       lr
00008e  481e              LDR      r0,|L71.264|
000090  4770              BX       lr
000092  481e              LDR      r0,|L71.268|
000094  4770              BX       lr
000096  481e              LDR      r0,|L71.272|
000098  4770              BX       lr
00009a  481e              LDR      r0,|L71.276|
00009c  4770              BX       lr
00009e  481e              LDR      r0,|L71.280|
0000a0  4770              BX       lr
                  |L71.162|
0000a2  481e              LDR      r0,|L71.284|
0000a4  4770              BX       lr
                  |L71.166|
0000a6  481e              LDR      r0,|L71.288|
0000a8  4770              BX       lr
                  |L71.170|
0000aa  481e              LDR      r0,|L71.292|
0000ac  4770              BX       lr
                  |L71.174|
0000ae  481e              LDR      r0,|L71.296|
0000b0  4770              BX       lr
                  |L71.178|
0000b2  481e              LDR      r0,|L71.300|
0000b4  4770              BX       lr
                  |L71.182|
0000b6  481e              LDR      r0,|L71.304|
0000b8  4770              BX       lr
                  |L71.186|
0000ba  481e              LDR      r0,|L71.308|
0000bc  4770              BX       lr
                  |L71.190|
0000be  481e              LDR      r0,|L71.312|
0000c0  4770              BX       lr
                  |L71.194|
0000c2  481e              LDR      r0,|L71.316|
0000c4  4770              BX       lr
                  |L71.198|
0000c6  481e              LDR      r0,|L71.320|
0000c8  4770              BX       lr
                  |L71.202|
0000ca  481e              LDR      r0,|L71.324|
0000cc  4770              BX       lr
                  |L71.206|
0000ce  481e              LDR      r0,|L71.328|
0000d0  4770              BX       lr
                  |L71.210|
0000d2  481e              LDR      r0,|L71.332|
0000d4  4770              BX       lr
                  |L71.214|
0000d6  481e              LDR      r0,|L71.336|
0000d8  4770              BX       lr
                  |L71.218|
0000da  481e              LDR      r0,|L71.340|
0000dc  4770              BX       lr
;;;213    #pragma diag_warning 111
                          ENDP

0000de  0000              DCW      0x0000
                  |L71.224|
                          DCD      ||.conststring||+0x288
                  |L71.228|
                          DCD      ||.conststring||
                  |L71.232|
                          DCD      ||.conststring||+0xc
                  |L71.236|
                          DCD      ||.conststring||+0x18
                  |L71.240|
                          DCD      ||.conststring||+0x24
                  |L71.244|
                          DCD      ||.conststring||+0x3c
                  |L71.248|
                          DCD      ||.conststring||+0x58
                  |L71.252|
                          DCD      ||.conststring||+0x70
                  |L71.256|
                          DCD      ||.conststring||+0x80
                  |L71.260|
                          DCD      ||.conststring||+0x98
                  |L71.264|
                          DCD      ||.conststring||+0xac
                  |L71.268|
                          DCD      ||.conststring||+0xc4
                  |L71.272|
                          DCD      ||.conststring||+0xe0
                  |L71.276|
                          DCD      ||.conststring||+0xf4
                  |L71.280|
                          DCD      ||.conststring||+0x10c
                  |L71.284|
                          DCD      ||.conststring||+0x120
                  |L71.288|
                          DCD      ||.conststring||+0x138
                  |L71.292|
                          DCD      ||.conststring||+0x150
                  |L71.296|
                          DCD      ||.conststring||+0x164
                  |L71.300|
                          DCD      ||.conststring||+0x178
                  |L71.304|
                          DCD      ||.conststring||+0x18c
                  |L71.308|
                          DCD      ||.conststring||+0x1a4
                  |L71.312|
                          DCD      ||.conststring||+0x1c4
                  |L71.316|
                          DCD      ||.conststring||+0x1e4
                  |L71.320|
                          DCD      ||.conststring||+0x204
                  |L71.324|
                          DCD      ||.conststring||+0x218
                  |L71.328|
                          DCD      ||.conststring||+0x230
                  |L71.332|
                          DCD      ||.conststring||+0x248
                  |L71.336|
                          DCD      ||.conststring||+0x258
                  |L71.340|
                          DCD      ||.conststring||+0x270

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\scpu\\drivers\\src\\kdp_memxfer.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___13_kdp_memxfer_c_17390038____REV16|
#line 208 "F:\\Users\\fu\\AppData\\Local\\Arm\\Packs\\ARM\\CMSIS\\5.9.0\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___13_kdp_memxfer_c_17390038____REV16| PROC
#line 209

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___13_kdp_memxfer_c_17390038____REVSH|
#line 223
|__asm___13_kdp_memxfer_c_17390038____REVSH| PROC
#line 224

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___13_kdp_memxfer_c_17390038____RRX|
#line 410
|__asm___13_kdp_memxfer_c_17390038____RRX| PROC
#line 411

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
