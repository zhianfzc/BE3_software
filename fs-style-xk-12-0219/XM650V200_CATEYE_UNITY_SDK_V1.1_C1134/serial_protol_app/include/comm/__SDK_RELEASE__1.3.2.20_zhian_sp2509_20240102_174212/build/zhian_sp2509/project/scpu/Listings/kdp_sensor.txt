; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\objects\kdp_sensor.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\kdp_sensor.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O3 --diag_suppress=9931 -I..\..\config -I..\..\..\..\board -I..\..\..\..\common\include -I..\..\..\..\scpu\device\include\CMSIS -I..\..\..\..\scpu\device\include\Kneron -I..\..\..\..\scpu\framework\include -I..\..\..\..\scpu\framework\include\framework -I..\..\..\..\scpu\drivers\include -I..\..\..\..\scpu\drivers\include\media\touch -I..\..\..\..\scpu\drivers\include\media\flash -I..\..\..\..\scpu\lib\kdp_system\inc -I..\..\..\..\scpu\lib\kdp_application\include\ -I..\..\..\..\scpu\lib\kdp_application\base\ -I..\..\..\..\scpu\lib\kdp_application\misc -I..\..\..\..\scpu\lib\kdp_e2e_r1n1\include -I..\..\..\..\scpu\include -I..\..\..\..\scpu\middleware\ota -I..\..\..\..\scpu\middleware\comm -I..\..\..\..\scpu\middleware\kdp_comm -I..\..\..\..\scpu\share -I..\..\..\..\scpu\share\gui_lib -I..\..\user -I.\RTE\CMSIS -I.\RTE\_Target-scpu -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\RTOS2\Include -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\RTOS2\RTX\Include -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\Device\ARM\ARMCM4\Include -D__RTX -D__MICROLIB -D__UVISION_VERSION=538 -D_RTE_ -DARMCM4_FP -D_RTE_ -DARM_MATH_CM4 -DTARGET_SCPU -DLOG_ENABLE -DKL520 -DHEAD_POSE_CHECK_PERCENT --omf_browse=.\objects\kdp_sensor.crf ..\..\..\..\scpu\drivers\media\platform\kdp_sensor.c]
                          THUMB

                          AREA ||i.kdp_sensor_enum_fmt||, CODE, READONLY, ALIGN=2

                  kdp_sensor_enum_fmt PROC
;;;67     
;;;68     int kdp_sensor_enum_fmt(int sensor_idx, unsigned int index, unsigned int *fourcc)
000000  b430              PUSH     {r4,r5}
;;;69     {
000002  460c              MOV      r4,r1
;;;70         if (sensor_idx >= SENSOR_TYPE_MAX)
;;;71             return -1;
000004  f04f31ff          MOV      r1,#0xffffffff
000008  2802              CMP      r0,#2                 ;70
00000a  da09              BGE      |L1.32|
;;;72         
;;;73         if (sensor_s[sensor_idx].ops->enum_fmt == NULL)
00000c  4b06              LDR      r3,|L1.40|
00000e  eb0300c0          ADD      r0,r3,r0,LSL #3
000012  6840              LDR      r0,[r0,#4]
000014  68c3              LDR      r3,[r0,#0xc]
000016  b11b              CBZ      r3,|L1.32|
;;;74             return -1;
;;;75             
;;;76         return sensor_s[sensor_idx].ops->enum_fmt(index, fourcc);
000018  4620              MOV      r0,r4
00001a  bc30              POP      {r4,r5}
00001c  4611              MOV      r1,r2
00001e  4718              BX       r3
                  |L1.32|
;;;77     }
000020  bc30              POP      {r4,r5}
000022  4608              MOV      r0,r1                 ;74
000024  4770              BX       lr
;;;78     
                          ENDP

000026  0000              DCW      0x0000
                  |L1.40|
                          DCD      ||.bss||

                          AREA ||i.kdp_sensor_get_device_id||, CODE, READONLY, ALIGN=2

                  kdp_sensor_get_device_id PROC
;;;188    
;;;189    int kdp_sensor_get_device_id(int sensor_idx)
000000  f04f31ff          MOV      r1,#0xffffffff
;;;190    {
;;;191        if (sensor_idx >= SENSOR_TYPE_MAX)
000004  2802              CMP      r0,#2
000006  da06              BGE      |L2.22|
;;;192            return -1;
;;;193        
;;;194        if (sensor_s[sensor_idx].ops->get_id == NULL)
000008  4a04              LDR      r2,|L2.28|
00000a  eb0200c0          ADD      r0,r2,r0,LSL #3
00000e  6840              LDR      r0,[r0,#4]
000010  6b40              LDR      r0,[r0,#0x34]
000012  b100              CBZ      r0,|L2.22|
;;;195            return -1;
;;;196            
;;;197        return sensor_s[sensor_idx].ops->get_id();
000014  4700              BX       r0
                  |L2.22|
000016  4608              MOV      r0,r1                 ;195
;;;198    }
000018  4770              BX       lr
;;;199    
                          ENDP

00001a  0000              DCW      0x0000
                  |L2.28|
                          DCD      ||.bss||

                          AREA ||i.kdp_sensor_get_fmt||, CODE, READONLY, ALIGN=2

                  kdp_sensor_get_fmt PROC
;;;177    
;;;178    int kdp_sensor_get_fmt(int sensor_idx, struct cam_format *format)
000000  f04f33ff          MOV      r3,#0xffffffff
;;;179    {
;;;180        if (sensor_idx >= SENSOR_TYPE_MAX)
000004  2802              CMP      r0,#2
000006  da07              BGE      |L3.24|
;;;181            return -1;
;;;182        
;;;183        if (sensor_s[sensor_idx].ops->get_fmt == NULL)
000008  4a04              LDR      r2,|L3.28|
00000a  eb0200c0          ADD      r0,r2,r0,LSL #3
00000e  6840              LDR      r0,[r0,#4]
000010  6902              LDR      r2,[r0,#0x10]
000012  b10a              CBZ      r2,|L3.24|
;;;184            return -1;
;;;185            
;;;186        return sensor_s[sensor_idx].ops->get_fmt(format);
000014  4608              MOV      r0,r1
000016  4710              BX       r2
                  |L3.24|
000018  4618              MOV      r0,r3                 ;184
;;;187    }
00001a  4770              BX       lr
;;;188    
                          ENDP

                  |L3.28|
                          DCD      ||.bss||

                          AREA ||i.kdp_sensor_get_lux||, CODE, READONLY, ALIGN=2

                  kdp_sensor_get_lux PROC
;;;111    
;;;112    int kdp_sensor_get_lux(int sensor_idx, u16* exposure, u8* pre_gain, u8* post_gain, u8* global_gain, u8* y_average)
000000  b5f8              PUSH     {r3-r7,lr}
;;;113    {
000002  461d              MOV      r5,r3
000004  4616              MOV      r6,r2
000006  e9dd3206          LDRD     r3,r2,[sp,#0x18]
00000a  460f              MOV      r7,r1
;;;114        if (sensor_idx >= SENSOR_TYPE_MAX)
;;;115            return -1;
00000c  f04f31ff          MOV      r1,#0xffffffff
000010  2802              CMP      r0,#2                 ;114
000012  da0b              BGE      |L4.44|
;;;116    
;;;117        if (sensor_s[sensor_idx].ops->get_lux == NULL)
000014  4c06              LDR      r4,|L4.48|
000016  eb0400c0          ADD      r0,r4,r0,LSL #3
00001a  6840              LDR      r0,[r0,#4]
00001c  6a04              LDR      r4,[r0,#0x20]
00001e  b12c              CBZ      r4,|L4.44|
;;;118            return -1;
;;;119    
;;;120        return sensor_s[sensor_idx].ops->get_lux(exposure, pre_gain, post_gain, global_gain, y_average);
000020  9200              STR      r2,[sp,#0]
000022  462a              MOV      r2,r5
000024  4631              MOV      r1,r6
000026  4638              MOV      r0,r7
000028  47a0              BLX      r4
;;;121    }
00002a  bdf8              POP      {r3-r7,pc}
                  |L4.44|
00002c  4608              MOV      r0,r1                 ;118
00002e  bdf8              POP      {r3-r7,pc}
;;;122    
                          ENDP

                  |L4.48|
                          DCD      ||.bss||

                          AREA ||i.kdp_sensor_register||, CODE, READONLY, ALIGN=2

                  kdp_sensor_register PROC
;;;199    
;;;200    int kdp_sensor_register(int sensor_id, struct sensor_ops *sensor_ops_p)
000000  b510              PUSH     {r4,lr}
;;;201    {
;;;202        if (sensor_ops_p == NULL)
;;;203            return -1;
000002  f04f34ff          MOV      r4,#0xffffffff
000006  b169              CBZ      r1,|L5.36|
;;;204    
;;;205        if (IMGSRC_0_TYPE == sensor_id)
;;;206        {
;;;207            if (sensor_s[0].inuse)
;;;208                return -1;
;;;209    
;;;210            sensor_s[0].ops = sensor_ops_p;
;;;211            sensor_s[0].inuse = 1;
000008  2301              MOVS     r3,#1
00000a  4a09              LDR      r2,|L5.48|
00000c  2808              CMP      r0,#8                 ;205
00000e  d002              BEQ      |L5.22|
;;;212        }
;;;213        else if (IMGSRC_1_TYPE == sensor_id)
000010  2809              CMP      r0,#9
000012  d005              BEQ      |L5.32|
000014  e00a              B        |L5.44|
                  |L5.22|
000016  6810              LDR      r0,[r2,#0]            ;207  ; sensor_s
000018  b920              CBNZ     r0,|L5.36|
00001a  e9c23100          STRD     r3,r1,[r2,#0]         ;207
00001e  e005              B        |L5.44|
                  |L5.32|
;;;214        {
;;;215            if (sensor_s[1].inuse)
000020  6890              LDR      r0,[r2,#8]  ; sensor_s
000022  b108              CBZ      r0,|L5.40|
                  |L5.36|
;;;216                return -1;
000024  4620              MOV      r0,r4
;;;217    
;;;218            sensor_s[1].ops = sensor_ops_p;
;;;219            sensor_s[1].inuse = 1;
;;;220        }
;;;221    
;;;222        return 0;
;;;223    }
000026  bd10              POP      {r4,pc}
                  |L5.40|
000028  e9c23102          STRD     r3,r1,[r2,#8]
                  |L5.44|
00002c  2000              MOVS     r0,#0                 ;222
00002e  bd10              POP      {r4,pc}
;;;224    
                          ENDP

                  |L5.48|
                          DCD      ||.bss||

                          AREA ||i.kdp_sensor_reset||, CODE, READONLY, ALIGN=2

                  kdp_sensor_reset PROC
;;;45     
;;;46     int kdp_sensor_reset(int sensor_idx)
000000  f04f31ff          MOV      r1,#0xffffffff
;;;47     {
;;;48         if (sensor_idx >= SENSOR_TYPE_MAX)
000004  2802              CMP      r0,#2
000006  da06              BGE      |L6.22|
;;;49             return -1;
;;;50         
;;;51         if (sensor_s[sensor_idx].ops->reset == NULL)
000008  4a04              LDR      r2,|L6.28|
00000a  eb0200c0          ADD      r0,r2,r0,LSL #3
00000e  6840              LDR      r0,[r0,#4]
000010  6840              LDR      r0,[r0,#4]
000012  b100              CBZ      r0,|L6.22|
;;;52             return -1;
;;;53             
;;;54         return sensor_s[sensor_idx].ops->reset();
000014  4700              BX       r0
                  |L6.22|
000016  4608              MOV      r0,r1                 ;52
;;;55     }
000018  4770              BX       lr
;;;56     
                          ENDP

00001a  0000              DCW      0x0000
                  |L6.28|
                          DCD      ||.bss||

                          AREA ||i.kdp_sensor_s_power||, CODE, READONLY, ALIGN=2

                  kdp_sensor_s_power PROC
;;;34     
;;;35     int kdp_sensor_s_power(int sensor_idx, int on)
000000  f04f33ff          MOV      r3,#0xffffffff
;;;36     {
;;;37         if (sensor_idx >= SENSOR_TYPE_MAX)
000004  2802              CMP      r0,#2
000006  da07              BGE      |L7.24|
;;;38             return -1;
;;;39         
;;;40         if (sensor_s[sensor_idx].ops->s_power == NULL)
000008  4a04              LDR      r2,|L7.28|
00000a  eb0200c0          ADD      r0,r2,r0,LSL #3
00000e  6840              LDR      r0,[r0,#4]
000010  6802              LDR      r2,[r0,#0]
000012  b10a              CBZ      r2,|L7.24|
;;;41             return -1;
;;;42             
;;;43         return sensor_s[sensor_idx].ops->s_power(on);
000014  4608              MOV      r0,r1
000016  4710              BX       r2
                  |L7.24|
000018  4618              MOV      r0,r3                 ;41
;;;44     }
00001a  4770              BX       lr
;;;45     
                          ENDP

                  |L7.28|
                          DCD      ||.bss||

                          AREA ||i.kdp_sensor_s_stream||, CODE, READONLY, ALIGN=2

                  kdp_sensor_s_stream PROC
;;;56     
;;;57     int kdp_sensor_s_stream(int sensor_idx, int enable)
000000  f04f33ff          MOV      r3,#0xffffffff
;;;58     {
;;;59         if (sensor_idx >= SENSOR_TYPE_MAX)
000004  2802              CMP      r0,#2
000006  da07              BGE      |L8.24|
;;;60             return -1;
;;;61         
;;;62         if (sensor_s[sensor_idx].ops->s_stream == NULL)
000008  4a04              LDR      r2,|L8.28|
00000a  eb0200c0          ADD      r0,r2,r0,LSL #3
00000e  6840              LDR      r0,[r0,#4]
000010  6882              LDR      r2,[r0,#8]
000012  b10a              CBZ      r2,|L8.24|
;;;63             return -1;
;;;64             
;;;65         return sensor_s[sensor_idx].ops->s_stream(enable);
000014  4608              MOV      r0,r1
000016  4710              BX       r2
                  |L8.24|
000018  4618              MOV      r0,r3                 ;63
;;;66     }
00001a  4770              BX       lr
;;;67     
                          ENDP

                  |L8.28|
                          DCD      ||.bss||

                          AREA ||i.kdp_sensor_set_aec_en||, CODE, READONLY, ALIGN=2

                  kdp_sensor_set_aec_en PROC
;;;249    
;;;250    int kdp_sensor_set_aec_en(int sensor_idx, BOOL enable)
000000  f04f33ff          MOV      r3,#0xffffffff
;;;251    {
;;;252        if (sensor_idx >= SENSOR_TYPE_MAX)
000004  2802              CMP      r0,#2
000006  da07              BGE      |L9.24|
;;;253            return -1;
;;;254    
;;;255        if (sensor_s[sensor_idx].ops->set_aec_en == NULL)
000008  4a04              LDR      r2,|L9.28|
00000a  eb0200c0          ADD      r0,r2,r0,LSL #3
00000e  6840              LDR      r0,[r0,#4]
000010  6bc2              LDR      r2,[r0,#0x3c]
000012  b10a              CBZ      r2,|L9.24|
;;;256            return -1;
;;;257    
;;;258        return sensor_s[sensor_idx].ops->set_aec_en(enable);
000014  4608              MOV      r0,r1
000016  4710              BX       r2
                  |L9.24|
000018  4618              MOV      r0,r3                 ;256
;;;259    }
00001a  4770              BX       lr
;;;260    
                          ENDP

                  |L9.28|
                          DCD      ||.bss||

                          AREA ||i.kdp_sensor_set_aec_roi||, CODE, READONLY, ALIGN=2

                  kdp_sensor_set_aec_roi PROC
;;;122    
;;;123    int kdp_sensor_set_aec_roi(int sensor_idx, u8 x1, u8 x2, u8 y1, u8 y2, u8 center_x1, u8 center_x2, u8 center_y1, u8 center_y2)
000000  e92d47ff          PUSH     {r0-r10,lr}
;;;124    {
000004  461e              MOV      r6,r3
000006  4689              MOV      r9,r1
000008  e9dd310e          LDRD     r3,r1,[sp,#0x38]
00000c  e9dd8c0c          LDRD     r8,r12,[sp,#0x30]
000010  4617              MOV      r7,r2
;;;125        if (sensor_idx >= SENSOR_TYPE_MAX)
000012  9d10              LDR      r5,[sp,#0x40]
;;;126            return -1;
000014  f04f32ff          MOV      r2,#0xffffffff
000018  2802              CMP      r0,#2                 ;125
00001a  da12              BGE      |L10.66|
;;;127    
;;;128        if (sensor_s[sensor_idx].ops->set_aec_roi == NULL)
00001c  4c0a              LDR      r4,|L10.72|
00001e  eb0400c0          ADD      r0,r4,r0,LSL #3
000022  6840              LDR      r0,[r0,#4]
000024  6a44              LDR      r4,[r0,#0x24]
000026  b164              CBZ      r4,|L10.66|
;;;129            return -1;
;;;130    
;;;131        return sensor_s[sensor_idx].ops->set_aec_roi(x1, x2, y1, y2, center_x1, center_x2, center_y1, center_y2);
000028  f8cdc000          STR      r12,[sp,#0]
00002c  9503              STR      r5,[sp,#0xc]
00002e  e9cd3101          STRD     r3,r1,[sp,#4]
000032  4643              MOV      r3,r8
000034  4632              MOV      r2,r6
000036  4639              MOV      r1,r7
000038  4648              MOV      r0,r9
00003a  47a0              BLX      r4
                  |L10.60|
;;;132    }
00003c  b004              ADD      sp,sp,#0x10
00003e  e8bd87f0          POP      {r4-r10,pc}
                  |L10.66|
000042  4610              MOV      r0,r2                 ;129
000044  e7fa              B        |L10.60|
;;;133    
                          ENDP

000046  0000              DCW      0x0000
                  |L10.72|
                          DCD      ||.bss||

                          AREA ||i.kdp_sensor_set_exp_time||, CODE, READONLY, ALIGN=2

                  kdp_sensor_set_exp_time PROC
;;;100    
;;;101    int kdp_sensor_set_exp_time(int sensor_idx, u8 gain1, u8 gain2)
000000  b430              PUSH     {r4,r5}
;;;102    {
000002  460c              MOV      r4,r1
;;;103        if (sensor_idx >= SENSOR_TYPE_MAX)
;;;104            return -1;
000004  f04f31ff          MOV      r1,#0xffffffff
000008  2802              CMP      r0,#2                 ;103
00000a  da09              BGE      |L11.32|
;;;105    
;;;106        if (sensor_s[sensor_idx].ops->set_exp_time == NULL)
00000c  4b06              LDR      r3,|L11.40|
00000e  eb0300c0          ADD      r0,r3,r0,LSL #3
000012  6840              LDR      r0,[r0,#4]
000014  69c3              LDR      r3,[r0,#0x1c]
000016  b11b              CBZ      r3,|L11.32|
;;;107            return -1;
;;;108    
;;;109        return sensor_s[sensor_idx].ops->set_exp_time(gain1, gain2);
000018  4620              MOV      r0,r4
00001a  bc30              POP      {r4,r5}
00001c  4611              MOV      r1,r2
00001e  4718              BX       r3
                  |L11.32|
;;;110    }
000020  bc30              POP      {r4,r5}
000022  4608              MOV      r0,r1                 ;107
000024  4770              BX       lr
;;;111    
                          ENDP

000026  0000              DCW      0x0000
                  |L11.40|
                          DCD      ||.bss||

                          AREA ||i.kdp_sensor_set_flip||, CODE, READONLY, ALIGN=2

                  kdp_sensor_set_flip PROC
;;;144    
;;;145    int kdp_sensor_set_flip(int sensor_idx, BOOL enable)
000000  f04f33ff          MOV      r3,#0xffffffff
;;;146    {
;;;147        if (sensor_idx >= SENSOR_TYPE_MAX)
000004  2802              CMP      r0,#2
000006  da07              BGE      |L12.24|
;;;148            return -1;
;;;149    
;;;150        if (sensor_s[sensor_idx].ops->set_flip == NULL)
000008  4a04              LDR      r2,|L12.28|
00000a  eb0200c0          ADD      r0,r2,r0,LSL #3
00000e  6840              LDR      r0,[r0,#4]
000010  6ac2              LDR      r2,[r0,#0x2c]
000012  b10a              CBZ      r2,|L12.24|
;;;151            return -1;
;;;152    
;;;153        return sensor_s[sensor_idx].ops->set_flip(enable);
000014  4608              MOV      r0,r1
000016  4710              BX       r2
                  |L12.24|
000018  4618              MOV      r0,r3                 ;151
;;;154    }
00001a  4770              BX       lr
;;;155    
                          ENDP

                  |L12.28|
                          DCD      ||.bss||

                          AREA ||i.kdp_sensor_set_fmt||, CODE, READONLY, ALIGN=2

                  kdp_sensor_set_fmt PROC
;;;78     
;;;79     int kdp_sensor_set_fmt(int sensor_idx, struct cam_format *format)
000000  f04f33ff          MOV      r3,#0xffffffff
;;;80     {
;;;81         if (sensor_idx >= SENSOR_TYPE_MAX)
000004  2802              CMP      r0,#2
000006  da07              BGE      |L13.24|
;;;82             return -1;
;;;83         
;;;84         if (sensor_s[sensor_idx].ops->set_fmt == NULL)
000008  4a04              LDR      r2,|L13.28|
00000a  eb0200c0          ADD      r0,r2,r0,LSL #3
00000e  6840              LDR      r0,[r0,#4]
000010  6942              LDR      r2,[r0,#0x14]
000012  b10a              CBZ      r2,|L13.24|
;;;85             return -1;
;;;86             
;;;87         return sensor_s[sensor_idx].ops->set_fmt(format);
000014  4608              MOV      r0,r1
000016  4710              BX       r2
                  |L13.24|
000018  4618              MOV      r0,r3                 ;85
;;;88     }
00001a  4770              BX       lr
;;;89     
                          ENDP

                  |L13.28|
                          DCD      ||.bss||

                          AREA ||i.kdp_sensor_set_fps||, CODE, READONLY, ALIGN=2

                  kdp_sensor_set_fps PROC
;;;166    
;;;167    int kdp_sensor_set_fps(int sensor_idx, u8 fps)
000000  f04f33ff          MOV      r3,#0xffffffff
;;;168    {
;;;169        if (sensor_idx >= SENSOR_TYPE_MAX)
000004  2802              CMP      r0,#2
000006  da07              BGE      |L14.24|
;;;170            return -1;
;;;171    
;;;172        if (sensor_s[sensor_idx].ops->set_fps == NULL)
000008  4a04              LDR      r2,|L14.28|
00000a  eb0200c0          ADD      r0,r2,r0,LSL #3
00000e  6840              LDR      r0,[r0,#4]
000010  6b82              LDR      r2,[r0,#0x38]
000012  b10a              CBZ      r2,|L14.24|
;;;173            return -1;
;;;174    
;;;175        return sensor_s[sensor_idx].ops->set_fps(fps);
000014  4608              MOV      r0,r1
000016  4710              BX       r2
                  |L14.24|
000018  4618              MOV      r0,r3                 ;173
;;;176    }
00001a  4770              BX       lr
;;;177    
                          ENDP

                  |L14.28|
                          DCD      ||.bss||

                          AREA ||i.kdp_sensor_set_gain||, CODE, READONLY, ALIGN=2

                  kdp_sensor_set_gain PROC
;;;89     
;;;90     int kdp_sensor_set_gain(int sensor_idx, u8 gain1, u8 gain2)
000000  b430              PUSH     {r4,r5}
;;;91     {
000002  460c              MOV      r4,r1
;;;92         if (sensor_idx >= SENSOR_TYPE_MAX)
;;;93             return -1;
000004  f04f31ff          MOV      r1,#0xffffffff
000008  2802              CMP      r0,#2                 ;92
00000a  da09              BGE      |L15.32|
;;;94     
;;;95         if (sensor_s[sensor_idx].ops->set_gain == NULL)
00000c  4b06              LDR      r3,|L15.40|
00000e  eb0300c0          ADD      r0,r3,r0,LSL #3
000012  6840              LDR      r0,[r0,#4]
000014  6983              LDR      r3,[r0,#0x18]
000016  b11b              CBZ      r3,|L15.32|
;;;96             return -1;
;;;97     
;;;98         return sensor_s[sensor_idx].ops->set_gain(gain1, gain2);
000018  4620              MOV      r0,r4
00001a  bc30              POP      {r4,r5}
00001c  4611              MOV      r1,r2
00001e  4718              BX       r3
                  |L15.32|
;;;99     }
000020  bc30              POP      {r4,r5}
000022  4608              MOV      r0,r1                 ;96
000024  4770              BX       lr
;;;100    
                          ENDP

000026  0000              DCW      0x0000
                  |L15.40|
                          DCD      ||.bss||

                          AREA ||i.kdp_sensor_set_led||, CODE, READONLY, ALIGN=2

                  kdp_sensor_set_led PROC
;;;155    
;;;156    int kdp_sensor_set_led(int sensor_idx, BOOL enable)
000000  f04f33ff          MOV      r3,#0xffffffff
;;;157    {
;;;158        if (sensor_idx >= SENSOR_TYPE_MAX)
000004  2802              CMP      r0,#2
000006  da07              BGE      |L16.24|
;;;159            return -1;
;;;160    
;;;161        if (sensor_s[sensor_idx].ops->set_led == NULL)
000008  4a04              LDR      r2,|L16.28|
00000a  eb0200c0          ADD      r0,r2,r0,LSL #3
00000e  6840              LDR      r0,[r0,#4]
000010  6b02              LDR      r2,[r0,#0x30]
000012  b10a              CBZ      r2,|L16.24|
;;;162            return -1;
;;;163    
;;;164        return sensor_s[sensor_idx].ops->set_led(enable);
000014  4608              MOV      r0,r1
000016  4710              BX       r2
                  |L16.24|
000018  4618              MOV      r0,r3                 ;162
;;;165    }
00001a  4770              BX       lr
;;;166    
                          ENDP

                  |L16.28|
                          DCD      ||.bss||

                          AREA ||i.kdp_sensor_set_mirror||, CODE, READONLY, ALIGN=2

                  kdp_sensor_set_mirror PROC
;;;133    
;;;134    int kdp_sensor_set_mirror(int sensor_idx, BOOL enable)
000000  f04f33ff          MOV      r3,#0xffffffff
;;;135    {
;;;136        if (sensor_idx >= SENSOR_TYPE_MAX)
000004  2802              CMP      r0,#2
000006  da07              BGE      |L17.24|
;;;137            return -1;
;;;138    
;;;139        if (sensor_s[sensor_idx].ops->set_mirror == NULL)
000008  4a04              LDR      r2,|L17.28|
00000a  eb0200c0          ADD      r0,r2,r0,LSL #3
00000e  6840              LDR      r0,[r0,#4]
000010  6a82              LDR      r2,[r0,#0x28]
000012  b10a              CBZ      r2,|L17.24|
;;;140            return -1;
;;;141    
;;;142        return sensor_s[sensor_idx].ops->set_mirror(enable);
000014  4608              MOV      r0,r1
000016  4710              BX       r2
                  |L17.24|
000018  4618              MOV      r0,r3                 ;140
;;;143    }
00001a  4770              BX       lr
;;;144    
                          ENDP

                  |L17.28|
                          DCD      ||.bss||

                          AREA ||i.kdp_sensor_sleep||, CODE, READONLY, ALIGN=2

                  kdp_sensor_sleep PROC
;;;261    #if CFG_ONE_SHOT_MODE == YES
;;;262    int kdp_sensor_sleep(int sensor_idx, BOOL enable)
000000  f04f33ff          MOV      r3,#0xffffffff
;;;263    {
;;;264        if (sensor_idx >= SENSOR_TYPE_MAX)
000004  2802              CMP      r0,#2
000006  da07              BGE      |L18.24|
;;;265            return -1;
;;;266    
;;;267        if (sensor_s[sensor_idx].ops->sleep == NULL)
000008  4a04              LDR      r2,|L18.28|
00000a  eb0200c0          ADD      r0,r2,r0,LSL #3
00000e  6840              LDR      r0,[r0,#4]
000010  6c02              LDR      r2,[r0,#0x40]
000012  b10a              CBZ      r2,|L18.24|
;;;268            return -1;
;;;269    
;;;270        return sensor_s[sensor_idx].ops->sleep(enable);;
000014  4608              MOV      r0,r1
000016  4710              BX       r2
                  |L18.24|
000018  4618              MOV      r0,r3                 ;268
;;;271    }
00001a  4770              BX       lr
;;;272    #endif
                          ENDP

                  |L18.28|
                          DCD      ||.bss||

                          AREA ||i.kdp_sensor_unregister||, CODE, READONLY, ALIGN=2

                  kdp_sensor_unregister PROC
;;;224    
;;;225    int kdp_sensor_unregister(int sensor_id, struct sensor_ops *sensor_ops_p)
000000  f04f33ff          MOV      r3,#0xffffffff
;;;226    {
000004  b189              CBZ      r1,|L19.42|
000006  2200              MOVS     r2,#0
;;;227        if (sensor_ops_p == NULL)
;;;228            return -1;
;;;229    
;;;230        if (IMGSRC_0_TYPE == sensor_id)
;;;231        {
;;;232            if (!sensor_s[0].inuse)
000008  4909              LDR      r1,|L19.48|
00000a  2808              CMP      r0,#8                 ;230
00000c  d002              BEQ      |L19.20|
;;;233                return -1;
;;;234    
;;;235            sensor_s[0].ops = NULL;
;;;236            sensor_s[0].inuse = 0;
;;;237        }
;;;238        else if (IMGSRC_1_TYPE == sensor_id)
00000e  2809              CMP      r0,#9
000010  d005              BEQ      |L19.30|
000012  e008              B        |L19.38|
                  |L19.20|
000014  6808              LDR      r0,[r1,#0]            ;232  ; sensor_s
000016  b140              CBZ      r0,|L19.42|
000018  604a              STR      r2,[r1,#4]            ;236  ; sensor_s
00001a  600a              STR      r2,[r1,#0]            ;236  ; sensor_s
00001c  e003              B        |L19.38|
                  |L19.30|
;;;239        {
;;;240            if (!sensor_s[1].inuse)
00001e  6888              LDR      r0,[r1,#8]  ; sensor_s
000020  b118              CBZ      r0,|L19.42|
;;;241                return -1;
;;;242    
;;;243            sensor_s[1].ops = NULL;
;;;244            sensor_s[1].inuse = 0;
000022  60ca              STR      r2,[r1,#0xc]  ; sensor_s
000024  608a              STR      r2,[r1,#8]  ; sensor_s
                  |L19.38|
;;;245        }
;;;246    
;;;247        return 0;
000026  2000              MOVS     r0,#0
;;;248    }
000028  4770              BX       lr
                  |L19.42|
00002a  4618              MOV      r0,r3                 ;241
00002c  4770              BX       lr
;;;249    
                          ENDP

00002e  0000              DCW      0x0000
                  |L19.48|
                          DCD      ||.bss||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  sensor_s
                          %        16
