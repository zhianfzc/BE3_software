L 1 "RTE/CMSIS/RTX_Config.c"
N/*
N * Copyright (c) 2013-2018 Arm Limited. All rights reserved.
N *
N * SPDX-License-Identifier: Apache-2.0
N *
N * Licensed under the Apache License, Version 2.0 (the License); you may
N * not use this file except in compliance with the License.
N * You may obtain a copy of the License at
N *
N * www.apache.org/licenses/LICENSE-2.0
N *
N * Unless required by applicable law or agreed to in writing, software
N * distributed under the License is distributed on an AS IS BASIS, WITHOUT
N * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
N * See the License for the specific language governing permissions and
N * limitations under the License.
N *
N * -----------------------------------------------------------------------------
N *
N * $Revision:   V5.1.0
N *
N * Project:     CMSIS-RTOS RTX
N * Title:       RTX Configuration
N *
N * -----------------------------------------------------------------------------
N */
N 
N#include "cmsis_compiler.h"
L 1 "F:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include\cmsis_compiler.h" 1
N/**************************************************************************//**
N * @file     cmsis_compiler.h
N * @brief    CMSIS compiler generic header file
N * @version  V5.1.0
N * @date     09. October 2018
N ******************************************************************************/
N/*
N * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
N *
N * SPDX-License-Identifier: Apache-2.0
N *
N * Licensed under the Apache License, Version 2.0 (the License); you may
N * not use this file except in compliance with the License.
N * You may obtain a copy of the License at
N *
N * www.apache.org/licenses/LICENSE-2.0
N *
N * Unless required by applicable law or agreed to in writing, software
N * distributed under the License is distributed on an AS IS BASIS, WITHOUT
N * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
N * See the License for the specific language governing permissions and
N * limitations under the License.
N */
N
N#ifndef __CMSIS_COMPILER_H
N#define __CMSIS_COMPILER_H
N
N#include <stdint.h>
L 1 "F:\Keil_v5\ARM\ARMCC\Bin\..\include\stdint.h" 1
N/* Copyright (C) ARM Ltd., 1999,2014 */
N/* All rights reserved */
N
N/*
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: agrant $
N */
N
N#ifndef __stdint_h
N#define __stdint_h
N#define __ARMCLIB_VERSION 5060037
N
N  #ifdef __INT64_TYPE__
S    /* armclang predefines '__INT64_TYPE__' and '__INT64_C_SUFFIX__' */
S    #define __INT64 __INT64_TYPE__
N  #else
N    /* armcc has builtin '__int64' which can be used in --strict mode */
N    #define __INT64 __int64
N    #define __INT64_C_SUFFIX__ ll
N  #endif
N  #define __PASTE2(x, y) x ## y
N  #define __PASTE(x, y) __PASTE2(x, y)
N  #define __INT64_C(x)  __ESCAPE__(__PASTE(x, __INT64_C_SUFFIX__))
N  #define __UINT64_C(x)  __ESCAPE__(__PASTE(x ## u, __INT64_C_SUFFIX__))
N  #if defined(__clang__) || (defined(__ARMCC_VERSION) && !defined(__STRICT_ANSI__))
X  #if 0L || (1L && !0L)
N    /* armclang and non-strict armcc allow 'long long' in system headers */
N    #define __LONGLONG long long
N  #else
S    /* strict armcc has '__int64' */
S    #define __LONGLONG __int64
N  #endif
N
N  #ifndef __STDINT_DECLS
N  #define __STDINT_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S      namespace std {
S          #define __CLIBNS std::
S          extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N
N/*
N * 'signed' is redundant below, except for 'signed char' and if
N * the typedef is used to declare a bitfield.
N */
N
N    /* 7.18.1.1 */
N
N    /* exact-width signed integer types */
Ntypedef   signed          char int8_t;
Ntypedef   signed short     int int16_t;
Ntypedef   signed           int int32_t;
Ntypedef   signed       __INT64 int64_t;
Xtypedef   signed       __int64 int64_t;
N
N    /* exact-width unsigned integer types */
Ntypedef unsigned          char uint8_t;
Ntypedef unsigned short     int uint16_t;
Ntypedef unsigned           int uint32_t;
Ntypedef unsigned       __INT64 uint64_t;
Xtypedef unsigned       __int64 uint64_t;
N
N    /* 7.18.1.2 */
N
N    /* smallest type of at least n bits */
N    /* minimum-width signed integer types */
Ntypedef   signed          char int_least8_t;
Ntypedef   signed short     int int_least16_t;
Ntypedef   signed           int int_least32_t;
Ntypedef   signed       __INT64 int_least64_t;
Xtypedef   signed       __int64 int_least64_t;
N
N    /* minimum-width unsigned integer types */
Ntypedef unsigned          char uint_least8_t;
Ntypedef unsigned short     int uint_least16_t;
Ntypedef unsigned           int uint_least32_t;
Ntypedef unsigned       __INT64 uint_least64_t;
Xtypedef unsigned       __int64 uint_least64_t;
N
N    /* 7.18.1.3 */
N
N    /* fastest minimum-width signed integer types */
Ntypedef   signed           int int_fast8_t;
Ntypedef   signed           int int_fast16_t;
Ntypedef   signed           int int_fast32_t;
Ntypedef   signed       __INT64 int_fast64_t;
Xtypedef   signed       __int64 int_fast64_t;
N
N    /* fastest minimum-width unsigned integer types */
Ntypedef unsigned           int uint_fast8_t;
Ntypedef unsigned           int uint_fast16_t;
Ntypedef unsigned           int uint_fast32_t;
Ntypedef unsigned       __INT64 uint_fast64_t;
Xtypedef unsigned       __int64 uint_fast64_t;
N
N    /* 7.18.1.4 integer types capable of holding object pointers */
N#if __sizeof_ptr == 8
X#if 4 == 8
Stypedef   signed       __INT64 intptr_t;
Stypedef unsigned       __INT64 uintptr_t;
N#else
Ntypedef   signed           int intptr_t;
Ntypedef unsigned           int uintptr_t;
N#endif
N
N    /* 7.18.1.5 greatest-width integer types */
Ntypedef   signed     __LONGLONG intmax_t;
Xtypedef   signed     long long intmax_t;
Ntypedef unsigned     __LONGLONG uintmax_t;
Xtypedef unsigned     long long uintmax_t;
N
N
N#if !defined(__cplusplus) || defined(__STDC_LIMIT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.2.1 */
N
N    /* minimum values of exact-width signed integer types */
N#define INT8_MIN                   -128
N#define INT16_MIN                -32768
N#define INT32_MIN          (~0x7fffffff)   /* -2147483648 is unsigned */
N#define INT64_MIN  __INT64_C(~0x7fffffffffffffff) /* -9223372036854775808 is unsigned */
N
N    /* maximum values of exact-width signed integer types */
N#define INT8_MAX                    127
N#define INT16_MAX                 32767
N#define INT32_MAX            2147483647
N#define INT64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of exact-width unsigned integer types */
N#define UINT8_MAX                   255
N#define UINT16_MAX                65535
N#define UINT32_MAX           4294967295u
N#define UINT64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.2 */
N
N    /* minimum values of minimum-width signed integer types */
N#define INT_LEAST8_MIN                   -128
N#define INT_LEAST16_MIN                -32768
N#define INT_LEAST32_MIN          (~0x7fffffff)
N#define INT_LEAST64_MIN  __INT64_C(~0x7fffffffffffffff)
N
N    /* maximum values of minimum-width signed integer types */
N#define INT_LEAST8_MAX                    127
N#define INT_LEAST16_MAX                 32767
N#define INT_LEAST32_MAX            2147483647
N#define INT_LEAST64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of minimum-width unsigned integer types */
N#define UINT_LEAST8_MAX                   255
N#define UINT_LEAST16_MAX                65535
N#define UINT_LEAST32_MAX           4294967295u
N#define UINT_LEAST64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.3 */
N
N    /* minimum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MIN           (~0x7fffffff)
N#define INT_FAST16_MIN          (~0x7fffffff)
N#define INT_FAST32_MIN          (~0x7fffffff)
N#define INT_FAST64_MIN  __INT64_C(~0x7fffffffffffffff)
N
N    /* maximum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MAX             2147483647
N#define INT_FAST16_MAX            2147483647
N#define INT_FAST32_MAX            2147483647
N#define INT_FAST64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of fastest minimum-width unsigned integer types */
N#define UINT_FAST8_MAX            4294967295u
N#define UINT_FAST16_MAX           4294967295u
N#define UINT_FAST32_MAX           4294967295u
N#define UINT_FAST64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.4 */
N
N    /* minimum value of pointer-holding signed integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define INTPTR_MIN INT64_MIN
N#else
N#define INTPTR_MIN INT32_MIN
N#endif
N
N    /* maximum value of pointer-holding signed integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define INTPTR_MAX INT64_MAX
N#else
N#define INTPTR_MAX INT32_MAX
N#endif
N
N    /* maximum value of pointer-holding unsigned integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define UINTPTR_MAX UINT64_MAX
N#else
N#define UINTPTR_MAX UINT32_MAX
N#endif
N
N    /* 7.18.2.5 */
N
N    /* minimum value of greatest-width signed integer type */
N#define INTMAX_MIN  __ESCAPE__(~0x7fffffffffffffffll)
N
N    /* maximum value of greatest-width signed integer type */
N#define INTMAX_MAX  __ESCAPE__(9223372036854775807ll)
N
N    /* maximum value of greatest-width unsigned integer type */
N#define UINTMAX_MAX __ESCAPE__(18446744073709551615ull)
N
N    /* 7.18.3 */
N
N    /* limits of ptrdiff_t */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define PTRDIFF_MIN INT64_MIN
S#define PTRDIFF_MAX INT64_MAX
N#else
N#define PTRDIFF_MIN INT32_MIN
N#define PTRDIFF_MAX INT32_MAX
N#endif
N
N    /* limits of sig_atomic_t */
N#define SIG_ATOMIC_MIN (~0x7fffffff)
N#define SIG_ATOMIC_MAX   2147483647
N
N    /* limit of size_t */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define SIZE_MAX UINT64_MAX
N#else
N#define SIZE_MAX UINT32_MAX
N#endif
N
N    /* limits of wchar_t */
N    /* NB we have to undef and redef because they're defined in both
N     * stdint.h and wchar.h */
N#undef WCHAR_MIN
N#undef WCHAR_MAX
N
N#if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
X#if 0L || (0L && __ARM_SIZEOF_WCHAR_T == 4)
S  #define WCHAR_MIN   0
S  #define WCHAR_MAX   0xffffffffU
N#else
N  #define WCHAR_MIN   0
N  #define WCHAR_MAX   65535
N#endif
N
N    /* limits of wint_t */
N#define WINT_MIN (~0x7fffffff)
N#define WINT_MAX 2147483647
N
N#endif /* __STDC_LIMIT_MACROS */
N
N#if !defined(__cplusplus) || defined(__STDC_CONSTANT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.4.1 macros for minimum-width integer constants */
N#define INT8_C(x)   (x)
N#define INT16_C(x)  (x)
N#define INT32_C(x)  (x)
N#define INT64_C(x)  __INT64_C(x)
N
N#define UINT8_C(x)  (x ## u)
N#define UINT16_C(x) (x ## u)
N#define UINT32_C(x) (x ## u)
N#define UINT64_C(x) __UINT64_C(x)
N
N    /* 7.18.4.2 macros for greatest-width integer constants */
N#define INTMAX_C(x)  __ESCAPE__(x ## ll)
N#define UINTMAX_C(x) __ESCAPE__(x ## ull)
N
N#endif /* __STDC_CONSTANT_MACROS */
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STDINT_DECLS */
N
N  #ifdef __cplusplus
S    #ifndef __STDINT_NO_EXPORTS
S      using ::std::int8_t;
S      using ::std::int16_t;
S      using ::std::int32_t;
S      using ::std::int64_t;
S      using ::std::uint8_t;
S      using ::std::uint16_t;
S      using ::std::uint32_t;
S      using ::std::uint64_t;
S      using ::std::int_least8_t;
S      using ::std::int_least16_t;
S      using ::std::int_least32_t;
S      using ::std::int_least64_t;
S      using ::std::uint_least8_t;
S      using ::std::uint_least16_t;
S      using ::std::uint_least32_t;
S      using ::std::uint_least64_t;
S      using ::std::int_fast8_t;
S      using ::std::int_fast16_t;
S      using ::std::int_fast32_t;
S      using ::std::int_fast64_t;
S      using ::std::uint_fast8_t;
S      using ::std::uint_fast16_t;
S      using ::std::uint_fast32_t;
S      using ::std::uint_fast64_t;
S      using ::std::intptr_t;
S      using ::std::uintptr_t;
S      using ::std::intmax_t;
S      using ::std::uintmax_t;
S    #endif
N  #endif /* __cplusplus */
N
N#undef __INT64
N#undef __LONGLONG
N
N#endif /* __stdint_h */
N
N/* end of stdint.h */
L 29 "F:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include\cmsis_compiler.h" 2
N
N/*
N * Arm Compiler 4/5
N */
N#if   defined ( __CC_ARM )
X#if   1L
N  #include "cmsis_armcc.h"
L 1 "F:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include\cmsis_armcc.h" 1
N/**************************************************************************//**
N * @file     cmsis_armcc.h
N * @brief    CMSIS compiler ARMCC (Arm Compiler 5) header file
N * @version  V5.3.2
N * @date     27. May 2021
N ******************************************************************************/
N/*
N * Copyright (c) 2009-2021 Arm Limited. All rights reserved.
N *
N * SPDX-License-Identifier: Apache-2.0
N *
N * Licensed under the Apache License, Version 2.0 (the License); you may
N * not use this file except in compliance with the License.
N * You may obtain a copy of the License at
N *
N * www.apache.org/licenses/LICENSE-2.0
N *
N * Unless required by applicable law or agreed to in writing, software
N * distributed under the License is distributed on an AS IS BASIS, WITHOUT
N * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
N * See the License for the specific language governing permissions and
N * limitations under the License.
N */
N
N#ifndef __CMSIS_ARMCC_H
N#define __CMSIS_ARMCC_H
N
N
N#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 400677)
X#if 1L && (5060750 < 400677)
S  #error "Please use Arm Compiler Toolchain V4.0.677 or later!"
N#endif
N
N/* CMSIS compiler control architecture macros */
N#if ((defined (__TARGET_ARCH_6_M  ) && (__TARGET_ARCH_6_M   == 1)) || \
N     (defined (__TARGET_ARCH_6S_M ) && (__TARGET_ARCH_6S_M  == 1))   )
X#if ((0L && (__TARGET_ARCH_6_M   == 1)) ||      (0L && (__TARGET_ARCH_6S_M  == 1))   )
S  #define __ARM_ARCH_6M__           1
N#endif
N
N#if (defined (__TARGET_ARCH_7_M ) && (__TARGET_ARCH_7_M  == 1))
X#if (0L && (__TARGET_ARCH_7_M  == 1))
S  #define __ARM_ARCH_7M__           1
N#endif
N
N#if (defined (__TARGET_ARCH_7E_M) && (__TARGET_ARCH_7E_M == 1))
X#if (1L && (1 == 1))
N  #define __ARM_ARCH_7EM__          1
N#endif
N
N  /* __ARM_ARCH_8M_BASE__  not applicable */
N  /* __ARM_ARCH_8M_MAIN__  not applicable */
N  /* __ARM_ARCH_8_1M_MAIN__  not applicable */
N
N/* CMSIS compiler control DSP macros */
N#if ((defined (__ARM_ARCH_7EM__) && (__ARM_ARCH_7EM__ == 1))     )
X#if ((1L && (1 == 1))     )
N  #define __ARM_FEATURE_DSP         1
N#endif
N
N/* CMSIS compiler specific defines */
N#ifndef   __ASM
N  #define __ASM                                  __asm
N#endif
N#ifndef   __INLINE
N  #define __INLINE                               __inline
N#endif
N#ifndef   __STATIC_INLINE
N  #define __STATIC_INLINE                        static __inline
N#endif
N#ifndef   __STATIC_FORCEINLINE
N  #define __STATIC_FORCEINLINE                   static __forceinline
N#endif
N#ifndef   __NO_RETURN
N  #define __NO_RETURN                            __declspec(noreturn)
N#endif
N#ifndef   __USED
N  #define __USED                                 __attribute__((used))
N#endif
N#ifndef   __WEAK
N  #define __WEAK                                 __attribute__((weak))
N#endif
N#ifndef   __PACKED
N  #define __PACKED                               __attribute__((packed))
N#endif
N#ifndef   __PACKED_STRUCT
N  #define __PACKED_STRUCT                        __packed struct
N#endif
N#ifndef   __PACKED_UNION
N  #define __PACKED_UNION                         __packed union
N#endif
N#ifndef   __UNALIGNED_UINT32        /* deprecated */
N  #define __UNALIGNED_UINT32(x)                  (*((__packed uint32_t *)(x)))
N#endif
N#ifndef   __UNALIGNED_UINT16_WRITE
N  #define __UNALIGNED_UINT16_WRITE(addr, val)    ((*((__packed uint16_t *)(addr))) = (val))
N#endif
N#ifndef   __UNALIGNED_UINT16_READ
N  #define __UNALIGNED_UINT16_READ(addr)          (*((const __packed uint16_t *)(addr)))
N#endif
N#ifndef   __UNALIGNED_UINT32_WRITE
N  #define __UNALIGNED_UINT32_WRITE(addr, val)    ((*((__packed uint32_t *)(addr))) = (val))
N#endif
N#ifndef   __UNALIGNED_UINT32_READ
N  #define __UNALIGNED_UINT32_READ(addr)          (*((const __packed uint32_t *)(addr)))
N#endif
N#ifndef   __ALIGNED
N  #define __ALIGNED(x)                           __attribute__((aligned(x)))
N#endif
N#ifndef   __RESTRICT
N  #define __RESTRICT                             __restrict
N#endif
N#ifndef   __COMPILER_BARRIER
N  #define __COMPILER_BARRIER()                   __memory_changed()
N#endif
N
N/* #########################  Startup and Lowlevel Init  ######################## */
N
N#ifndef __PROGRAM_START
N#define __PROGRAM_START           __main
N#endif
N
N#ifndef __INITIAL_SP
N#define __INITIAL_SP              Image$$ARM_LIB_STACK$$ZI$$Limit
N#endif
N
N#ifndef __STACK_LIMIT
N#define __STACK_LIMIT             Image$$ARM_LIB_STACK$$ZI$$Base
N#endif
N
N#ifndef __VECTOR_TABLE
N#define __VECTOR_TABLE            __Vectors
N#endif
N
N#ifndef __VECTOR_TABLE_ATTRIBUTE
N#define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section("RESET")))
N#endif
N
N/* ##########################  Core Instruction Access  ######################### */
N/** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
N  Access to dedicated instructions
N  @{
N*/
N
N/**
N  \brief   No Operation
N  \details No Operation does nothing. This instruction can be used for code alignment purposes.
N */
N#define __NOP                             __nop
N
N
N/**
N  \brief   Wait For Interrupt
N  \details Wait For Interrupt is a hint instruction that suspends execution until one of a number of events occurs.
N */
N#define __WFI                             __wfi
N
N
N/**
N  \brief   Wait For Event
N  \details Wait For Event is a hint instruction that permits the processor to enter
N           a low-power state until one of a number of events occurs.
N */
N#define __WFE                             __wfe
N
N
N/**
N  \brief   Send Event
N  \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
N */
N#define __SEV                             __sev
N
N
N/**
N  \brief   Instruction Synchronization Barrier
N  \details Instruction Synchronization Barrier flushes the pipeline in the processor,
N           so that all instructions following the ISB are fetched from cache or memory,
N           after the instruction has been completed.
N */
N#define __ISB()                           __isb(0xF)
N
N/**
N  \brief   Data Synchronization Barrier
N  \details Acts as a special kind of Data Memory Barrier.
N           It completes when all explicit memory accesses before this instruction complete.
N */
N#define __DSB()                           __dsb(0xF)
N
N/**
N  \brief   Data Memory Barrier
N  \details Ensures the apparent order of the explicit memory operations before
N           and after the instruction, without ensuring their completion.
N */
N#define __DMB()                           __dmb(0xF)
N
N
N/**
N  \brief   Reverse byte order (32 bit)
N  \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x78563412.
N  \param [in]    value  Value to reverse
N  \return               Reversed value
N */
N#define __REV                             __rev
N
N
N/**
N  \brief   Reverse byte order (16 bit)
N  \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 0x34127856.
N  \param [in]    value  Value to reverse
N  \return               Reversed value
N */
N#ifndef __NO_EMBEDDED_ASM
N__attribute__((section(".rev16_text"))) __STATIC_INLINE __ASM uint32_t __REV16(uint32_t value)
X__attribute__((section(".rev16_text"))) static __inline __asm uint32_t __REV16(uint32_t value)
N{
N  rev16 r0, r0
N  bx lr
N}
N#endif
N
N
N/**
N  \brief   Reverse byte order (16 bit)
N  \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For example, 0x0080 becomes 0x8000.
N  \param [in]    value  Value to reverse
N  \return               Reversed value
N */
N#ifndef __NO_EMBEDDED_ASM
N__attribute__((section(".revsh_text"))) __STATIC_INLINE __ASM int16_t __REVSH(int16_t value)
X__attribute__((section(".revsh_text"))) static __inline __asm int16_t __REVSH(int16_t value)
N{
N  revsh r0, r0
N  bx lr
N}
N#endif
N
N
N/**
N  \brief   Rotate Right in unsigned value (32 bit)
N  \details Rotate Right (immediate) provides the value of the contents of a register rotated by a variable number of bits.
N  \param [in]    op1  Value to rotate
N  \param [in]    op2  Number of Bits to rotate
N  \return               Rotated value
N */
N#define __ROR                             __ror
N
N
N/**
N  \brief   Breakpoint
N  \details Causes the processor to enter Debug state.
N           Debug tools can use this to investigate system state when the instruction at a particular address is reached.
N  \param [in]    value  is ignored by the processor.
N                 If required, a debugger can use it to store additional information about the breakpoint.
N */
N#define __BKPT(value)                       __breakpoint(value)
N
N
N/**
N  \brief   Reverse bit order of value
N  \details Reverses the bit order of the given value.
N  \param [in]    value  Value to reverse
N  \return               Reversed value
N */
N#if ((defined (__ARM_ARCH_7M__ ) && (__ARM_ARCH_7M__  == 1)) || \
N     (defined (__ARM_ARCH_7EM__) && (__ARM_ARCH_7EM__ == 1))     )
X#if ((0L && (__ARM_ARCH_7M__  == 1)) ||      (1L && (1 == 1))     )
N  #define __RBIT                          __rbit
N#else
S__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
S{
S  uint32_t result;
S  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
S
S  result = value;                      /* r will be reversed bits of v; first get LSB of v */
S  for (value >>= 1U; value != 0U; value >>= 1U)
S  {
S    result <<= 1U;
S    result |= value & 1U;
S    s--;
S  }
S  result <<= s;                        /* shift when v's highest bits are zero */
S  return result;
S}
N#endif
N
N
N/**
N  \brief   Count leading zeros
N  \details Counts the number of leading zeros of a data value.
N  \param [in]  value  Value to count the leading zeros
N  \return             number of leading zeros in value
N */
N#define __CLZ                             __clz
N
N
N#if ((defined (__ARM_ARCH_7M__ ) && (__ARM_ARCH_7M__  == 1)) || \
N     (defined (__ARM_ARCH_7EM__) && (__ARM_ARCH_7EM__ == 1))     )
X#if ((0L && (__ARM_ARCH_7M__  == 1)) ||      (1L && (1 == 1))     )
N
N/**
N  \brief   LDR Exclusive (8 bit)
N  \details Executes a exclusive LDR instruction for 8 bit value.
N  \param [in]    ptr  Pointer to data
N  \return             value of type uint8_t at (*ptr)
N */
N#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 5060020)
X#if 1L && (5060750 < 5060020)
S  #define __LDREXB(ptr)                                                        ((uint8_t ) __ldrex(ptr))
N#else
N  #define __LDREXB(ptr)          _Pragma("push") _Pragma("diag_suppress 3731") ((uint8_t ) __ldrex(ptr))  _Pragma("pop")
N#endif
N
N
N/**
N  \brief   LDR Exclusive (16 bit)
N  \details Executes a exclusive LDR instruction for 16 bit values.
N  \param [in]    ptr  Pointer to data
N  \return        value of type uint16_t at (*ptr)
N */
N#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 5060020)
X#if 1L && (5060750 < 5060020)
S  #define __LDREXH(ptr)                                                        ((uint16_t) __ldrex(ptr))
N#else
N  #define __LDREXH(ptr)          _Pragma("push") _Pragma("diag_suppress 3731") ((uint16_t) __ldrex(ptr))  _Pragma("pop")
N#endif
N
N
N/**
N  \brief   LDR Exclusive (32 bit)
N  \details Executes a exclusive LDR instruction for 32 bit values.
N  \param [in]    ptr  Pointer to data
N  \return        value of type uint32_t at (*ptr)
N */
N#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 5060020)
X#if 1L && (5060750 < 5060020)
S  #define __LDREXW(ptr)                                                        ((uint32_t ) __ldrex(ptr))
N#else
N  #define __LDREXW(ptr)          _Pragma("push") _Pragma("diag_suppress 3731") ((uint32_t ) __ldrex(ptr))  _Pragma("pop")
N#endif
N
N
N/**
N  \brief   STR Exclusive (8 bit)
N  \details Executes a exclusive STR instruction for 8 bit values.
N  \param [in]  value  Value to store
N  \param [in]    ptr  Pointer to location
N  \return          0  Function succeeded
N  \return          1  Function failed
N */
N#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 5060020)
X#if 1L && (5060750 < 5060020)
S  #define __STREXB(value, ptr)                                                 __strex(value, ptr)
N#else
N  #define __STREXB(value, ptr)   _Pragma("push") _Pragma("diag_suppress 3731") __strex(value, ptr)        _Pragma("pop")
N#endif
N
N
N/**
N  \brief   STR Exclusive (16 bit)
N  \details Executes a exclusive STR instruction for 16 bit values.
N  \param [in]  value  Value to store
N  \param [in]    ptr  Pointer to location
N  \return          0  Function succeeded
N  \return          1  Function failed
N */
N#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 5060020)
X#if 1L && (5060750 < 5060020)
S  #define __STREXH(value, ptr)                                                 __strex(value, ptr)
N#else
N  #define __STREXH(value, ptr)   _Pragma("push") _Pragma("diag_suppress 3731") __strex(value, ptr)        _Pragma("pop")
N#endif
N
N
N/**
N  \brief   STR Exclusive (32 bit)
N  \details Executes a exclusive STR instruction for 32 bit values.
N  \param [in]  value  Value to store
N  \param [in]    ptr  Pointer to location
N  \return          0  Function succeeded
N  \return          1  Function failed
N */
N#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 5060020)
X#if 1L && (5060750 < 5060020)
S  #define __STREXW(value, ptr)                                                 __strex(value, ptr)
N#else
N  #define __STREXW(value, ptr)   _Pragma("push") _Pragma("diag_suppress 3731") __strex(value, ptr)        _Pragma("pop")
N#endif
N
N
N/**
N  \brief   Remove the exclusive lock
N  \details Removes the exclusive lock which is created by LDREX.
N */
N#define __CLREX                           __clrex
N
N
N/**
N  \brief   Signed Saturate
N  \details Saturates a signed value.
N  \param [in]  value  Value to be saturated
N  \param [in]    sat  Bit position to saturate to (1..32)
N  \return             Saturated value
N */
N#define __SSAT                            __ssat
N
N
N/**
N  \brief   Unsigned Saturate
N  \details Saturates an unsigned value.
N  \param [in]  value  Value to be saturated
N  \param [in]    sat  Bit position to saturate to (0..31)
N  \return             Saturated value
N */
N#define __USAT                            __usat
N
N
N/**
N  \brief   Rotate Right with Extend (32 bit)
N  \details Moves each bit of a bitstring right by one bit.
N           The carry input is shifted in at the left end of the bitstring.
N  \param [in]    value  Value to rotate
N  \return               Rotated value
N */
N#ifndef __NO_EMBEDDED_ASM
N__attribute__((section(".rrx_text"))) __STATIC_INLINE __ASM uint32_t __RRX(uint32_t value)
X__attribute__((section(".rrx_text"))) static __inline __asm uint32_t __RRX(uint32_t value)
N{
N  rrx r0, r0
N  bx lr
N}
N#endif
N
N
N/**
N  \brief   LDRT Unprivileged (8 bit)
N  \details Executes a Unprivileged LDRT instruction for 8 bit value.
N  \param [in]    ptr  Pointer to data
N  \return             value of type uint8_t at (*ptr)
N */
N#define __LDRBT(ptr)                      ((uint8_t )  __ldrt(ptr))
N
N
N/**
N  \brief   LDRT Unprivileged (16 bit)
N  \details Executes a Unprivileged LDRT instruction for 16 bit values.
N  \param [in]    ptr  Pointer to data
N  \return        value of type uint16_t at (*ptr)
N */
N#define __LDRHT(ptr)                      ((uint16_t)  __ldrt(ptr))
N
N
N/**
N  \brief   LDRT Unprivileged (32 bit)
N  \details Executes a Unprivileged LDRT instruction for 32 bit values.
N  \param [in]    ptr  Pointer to data
N  \return        value of type uint32_t at (*ptr)
N */
N#define __LDRT(ptr)                       ((uint32_t ) __ldrt(ptr))
N
N
N/**
N  \brief   STRT Unprivileged (8 bit)
N  \details Executes a Unprivileged STRT instruction for 8 bit values.
N  \param [in]  value  Value to store
N  \param [in]    ptr  Pointer to location
N */
N#define __STRBT(value, ptr)               __strt(value, ptr)
N
N
N/**
N  \brief   STRT Unprivileged (16 bit)
N  \details Executes a Unprivileged STRT instruction for 16 bit values.
N  \param [in]  value  Value to store
N  \param [in]    ptr  Pointer to location
N */
N#define __STRHT(value, ptr)               __strt(value, ptr)
N
N
N/**
N  \brief   STRT Unprivileged (32 bit)
N  \details Executes a Unprivileged STRT instruction for 32 bit values.
N  \param [in]  value  Value to store
N  \param [in]    ptr  Pointer to location
N */
N#define __STRT(value, ptr)                __strt(value, ptr)
N
N#else  /* ((defined (__ARM_ARCH_7M__ ) && (__ARM_ARCH_7M__  == 1)) || \
N           (defined (__ARM_ARCH_7EM__) && (__ARM_ARCH_7EM__ == 1))     ) */
X#else   
S
S/**
S  \brief   Signed Saturate
S  \details Saturates a signed value.
S  \param [in]  value  Value to be saturated
S  \param [in]    sat  Bit position to saturate to (1..32)
S  \return             Saturated value
S */
S__attribute__((always_inline)) __STATIC_INLINE int32_t __SSAT(int32_t val, uint32_t sat)
S{
S  if ((sat >= 1U) && (sat <= 32U))
S  {
S    const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
S    const int32_t min = -1 - max ;
S    if (val > max)
S    {
S      return max;
S    }
S    else if (val < min)
S    {
S      return min;
S    }
S  }
S  return val;
S}
S
S/**
S  \brief   Unsigned Saturate
S  \details Saturates an unsigned value.
S  \param [in]  value  Value to be saturated
S  \param [in]    sat  Bit position to saturate to (0..31)
S  \return             Saturated value
S */
S__attribute__((always_inline)) __STATIC_INLINE uint32_t __USAT(int32_t val, uint32_t sat)
S{
S  if (sat <= 31U)
S  {
S    const uint32_t max = ((1U << sat) - 1U);
S    if (val > (int32_t)max)
S    {
S      return max;
S    }
S    else if (val < 0)
S    {
S      return 0U;
S    }
S  }
S  return (uint32_t)val;
S}
S
N#endif /* ((defined (__ARM_ARCH_7M__ ) && (__ARM_ARCH_7M__  == 1)) || \
N           (defined (__ARM_ARCH_7EM__) && (__ARM_ARCH_7EM__ == 1))     ) */
X#endif  
N
N/*@}*/ /* end of group CMSIS_Core_InstructionInterface */
N
N
N/* ###########################  Core Function Access  ########################### */
N/** \ingroup  CMSIS_Core_FunctionInterface
N    \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
N  @{
N */
N
N/**
N  \brief   Enable IRQ Interrupts
N  \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
N           Can only be executed in Privileged modes.
N */
N/* intrinsic void __enable_irq();     */
N
N
N/**
N  \brief   Disable IRQ Interrupts
N  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
N           Can only be executed in Privileged modes.
N */
N/* intrinsic void __disable_irq();    */
N
N/**
N  \brief   Get Control Register
N  \details Returns the content of the Control Register.
N  \return               Control Register value
N */
N__STATIC_INLINE uint32_t __get_CONTROL(void)
Xstatic __inline uint32_t __get_CONTROL(void)
N{
N  register uint32_t __regControl         __ASM("control");
X  register uint32_t __regControl         __asm("control");
N  return(__regControl);
N}
N
N
N/**
N  \brief   Set Control Register
N  \details Writes the given value to the Control Register.
N  \param [in]    control  Control Register value to set
N */
N__STATIC_INLINE void __set_CONTROL(uint32_t control)
Xstatic __inline void __set_CONTROL(uint32_t control)
N{
N  register uint32_t __regControl         __ASM("control");
X  register uint32_t __regControl         __asm("control");
N  __regControl = control;
N  __ISB();
X  __isb(0xF);
N}
N
N
N/**
N  \brief   Get IPSR Register
N  \details Returns the content of the IPSR Register.
N  \return               IPSR Register value
N */
N__STATIC_INLINE uint32_t __get_IPSR(void)
Xstatic __inline uint32_t __get_IPSR(void)
N{
N  register uint32_t __regIPSR          __ASM("ipsr");
X  register uint32_t __regIPSR          __asm("ipsr");
N  return(__regIPSR);
N}
N
N
N/**
N  \brief   Get APSR Register
N  \details Returns the content of the APSR Register.
N  \return               APSR Register value
N */
N__STATIC_INLINE uint32_t __get_APSR(void)
Xstatic __inline uint32_t __get_APSR(void)
N{
N  register uint32_t __regAPSR          __ASM("apsr");
X  register uint32_t __regAPSR          __asm("apsr");
N  return(__regAPSR);
N}
N
N
N/**
N  \brief   Get xPSR Register
N  \details Returns the content of the xPSR Register.
N  \return               xPSR Register value
N */
N__STATIC_INLINE uint32_t __get_xPSR(void)
Xstatic __inline uint32_t __get_xPSR(void)
N{
N  register uint32_t __regXPSR          __ASM("xpsr");
X  register uint32_t __regXPSR          __asm("xpsr");
N  return(__regXPSR);
N}
N
N
N/**
N  \brief   Get Process Stack Pointer
N  \details Returns the current value of the Process Stack Pointer (PSP).
N  \return               PSP Register value
N */
N__STATIC_INLINE uint32_t __get_PSP(void)
Xstatic __inline uint32_t __get_PSP(void)
N{
N  register uint32_t __regProcessStackPointer  __ASM("psp");
X  register uint32_t __regProcessStackPointer  __asm("psp");
N  return(__regProcessStackPointer);
N}
N
N
N/**
N  \brief   Set Process Stack Pointer
N  \details Assigns the given value to the Process Stack Pointer (PSP).
N  \param [in]    topOfProcStack  Process Stack Pointer value to set
N */
N__STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
Xstatic __inline void __set_PSP(uint32_t topOfProcStack)
N{
N  register uint32_t __regProcessStackPointer  __ASM("psp");
X  register uint32_t __regProcessStackPointer  __asm("psp");
N  __regProcessStackPointer = topOfProcStack;
N}
N
N
N/**
N  \brief   Get Main Stack Pointer
N  \details Returns the current value of the Main Stack Pointer (MSP).
N  \return               MSP Register value
N */
N__STATIC_INLINE uint32_t __get_MSP(void)
Xstatic __inline uint32_t __get_MSP(void)
N{
N  register uint32_t __regMainStackPointer     __ASM("msp");
X  register uint32_t __regMainStackPointer     __asm("msp");
N  return(__regMainStackPointer);
N}
N
N
N/**
N  \brief   Set Main Stack Pointer
N  \details Assigns the given value to the Main Stack Pointer (MSP).
N  \param [in]    topOfMainStack  Main Stack Pointer value to set
N */
N__STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
Xstatic __inline void __set_MSP(uint32_t topOfMainStack)
N{
N  register uint32_t __regMainStackPointer     __ASM("msp");
X  register uint32_t __regMainStackPointer     __asm("msp");
N  __regMainStackPointer = topOfMainStack;
N}
N
N
N/**
N  \brief   Get Priority Mask
N  \details Returns the current state of the priority mask bit from the Priority Mask Register.
N  \return               Priority Mask value
N */
N__STATIC_INLINE uint32_t __get_PRIMASK(void)
Xstatic __inline uint32_t __get_PRIMASK(void)
N{
N  register uint32_t __regPriMask         __ASM("primask");
X  register uint32_t __regPriMask         __asm("primask");
N  return(__regPriMask);
N}
N
N
N/**
N  \brief   Set Priority Mask
N  \details Assigns the given value to the Priority Mask Register.
N  \param [in]    priMask  Priority Mask
N */
N__STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
Xstatic __inline void __set_PRIMASK(uint32_t priMask)
N{
N  register uint32_t __regPriMask         __ASM("primask");
X  register uint32_t __regPriMask         __asm("primask");
N  __regPriMask = (priMask);
N}
N
N
N#if ((defined (__ARM_ARCH_7M__ ) && (__ARM_ARCH_7M__  == 1)) || \
N     (defined (__ARM_ARCH_7EM__) && (__ARM_ARCH_7EM__ == 1))     )
X#if ((0L && (__ARM_ARCH_7M__  == 1)) ||      (1L && (1 == 1))     )
N
N/**
N  \brief   Enable FIQ
N  \details Enables FIQ interrupts by clearing special-purpose register FAULTMASK.
N           Can only be executed in Privileged modes.
N */
N#define __enable_fault_irq                __enable_fiq
N
N
N/**
N  \brief   Disable FIQ
N  \details Disables FIQ interrupts by setting special-purpose register FAULTMASK.
N           Can only be executed in Privileged modes.
N */
N#define __disable_fault_irq               __disable_fiq
N
N
N/**
N  \brief   Get Base Priority
N  \details Returns the current value of the Base Priority register.
N  \return               Base Priority register value
N */
N__STATIC_INLINE uint32_t  __get_BASEPRI(void)
Xstatic __inline uint32_t  __get_BASEPRI(void)
N{
N  register uint32_t __regBasePri         __ASM("basepri");
X  register uint32_t __regBasePri         __asm("basepri");
N  return(__regBasePri);
N}
N
N
N/**
N  \brief   Set Base Priority
N  \details Assigns the given value to the Base Priority register.
N  \param [in]    basePri  Base Priority value to set
N */
N__STATIC_INLINE void __set_BASEPRI(uint32_t basePri)
Xstatic __inline void __set_BASEPRI(uint32_t basePri)
N{
N  register uint32_t __regBasePri         __ASM("basepri");
X  register uint32_t __regBasePri         __asm("basepri");
N  __regBasePri = (basePri & 0xFFU);
N}
N
N
N/**
N  \brief   Set Base Priority with condition
N  \details Assigns the given value to the Base Priority register only if BASEPRI masking is disabled,
N           or the new value increases the BASEPRI priority level.
N  \param [in]    basePri  Base Priority value to set
N */
N__STATIC_INLINE void __set_BASEPRI_MAX(uint32_t basePri)
Xstatic __inline void __set_BASEPRI_MAX(uint32_t basePri)
N{
N  register uint32_t __regBasePriMax      __ASM("basepri_max");
X  register uint32_t __regBasePriMax      __asm("basepri_max");
N  __regBasePriMax = (basePri & 0xFFU);
N}
N
N
N/**
N  \brief   Get Fault Mask
N  \details Returns the current value of the Fault Mask register.
N  \return               Fault Mask register value
N */
N__STATIC_INLINE uint32_t __get_FAULTMASK(void)
Xstatic __inline uint32_t __get_FAULTMASK(void)
N{
N  register uint32_t __regFaultMask       __ASM("faultmask");
X  register uint32_t __regFaultMask       __asm("faultmask");
N  return(__regFaultMask);
N}
N
N
N/**
N  \brief   Set Fault Mask
N  \details Assigns the given value to the Fault Mask register.
N  \param [in]    faultMask  Fault Mask value to set
N */
N__STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
Xstatic __inline void __set_FAULTMASK(uint32_t faultMask)
N{
N  register uint32_t __regFaultMask       __ASM("faultmask");
X  register uint32_t __regFaultMask       __asm("faultmask");
N  __regFaultMask = (faultMask & (uint32_t)1U);
N}
N
N#endif /* ((defined (__ARM_ARCH_7M__ ) && (__ARM_ARCH_7M__  == 1)) || \
N           (defined (__ARM_ARCH_7EM__) && (__ARM_ARCH_7EM__ == 1))     ) */
X#endif  
N
N
N/**
N  \brief   Get FPSCR
N  \details Returns the current value of the Floating Point Status/Control register.
N  \return               Floating Point Status/Control register value
N */
N__STATIC_INLINE uint32_t __get_FPSCR(void)
Xstatic __inline uint32_t __get_FPSCR(void)
N{
N#if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
N     (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
X#if ((0L && (__FPU_PRESENT == 1U)) &&      (0L && (__FPU_USED    == 1U))     )
S  register uint32_t __regfpscr         __ASM("fpscr");
S  return(__regfpscr);
N#else
N   return(0U);
N#endif
N}
N
N
N/**
N  \brief   Set FPSCR
N  \details Assigns the given value to the Floating Point Status/Control register.
N  \param [in]    fpscr  Floating Point Status/Control value to set
N */
N__STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
Xstatic __inline void __set_FPSCR(uint32_t fpscr)
N{
N#if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
N     (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
X#if ((0L && (__FPU_PRESENT == 1U)) &&      (0L && (__FPU_USED    == 1U))     )
S  register uint32_t __regfpscr         __ASM("fpscr");
S  __regfpscr = (fpscr);
N#else
N  (void)fpscr;
N#endif
N}
N
N
N/*@} end of CMSIS_Core_RegAccFunctions */
N
N
N/* ###################  Compiler specific Intrinsics  ########################### */
N/** \defgroup CMSIS_SIMD_intrinsics CMSIS SIMD Intrinsics
N  Access to dedicated SIMD instructions
N  @{
N*/
N
N#if ((defined (__ARM_ARCH_7EM__) && (__ARM_ARCH_7EM__ == 1))     )
X#if ((1L && (1 == 1))     )
N
N#define __SADD8                           __sadd8
N#define __QADD8                           __qadd8
N#define __SHADD8                          __shadd8
N#define __UADD8                           __uadd8
N#define __UQADD8                          __uqadd8
N#define __UHADD8                          __uhadd8
N#define __SSUB8                           __ssub8
N#define __QSUB8                           __qsub8
N#define __SHSUB8                          __shsub8
N#define __USUB8                           __usub8
N#define __UQSUB8                          __uqsub8
N#define __UHSUB8                          __uhsub8
N#define __SADD16                          __sadd16
N#define __QADD16                          __qadd16
N#define __SHADD16                         __shadd16
N#define __UADD16                          __uadd16
N#define __UQADD16                         __uqadd16
N#define __UHADD16                         __uhadd16
N#define __SSUB16                          __ssub16
N#define __QSUB16                          __qsub16
N#define __SHSUB16                         __shsub16
N#define __USUB16                          __usub16
N#define __UQSUB16                         __uqsub16
N#define __UHSUB16                         __uhsub16
N#define __SASX                            __sasx
N#define __QASX                            __qasx
N#define __SHASX                           __shasx
N#define __UASX                            __uasx
N#define __UQASX                           __uqasx
N#define __UHASX                           __uhasx
N#define __SSAX                            __ssax
N#define __QSAX                            __qsax
N#define __SHSAX                           __shsax
N#define __USAX                            __usax
N#define __UQSAX                           __uqsax
N#define __UHSAX                           __uhsax
N#define __USAD8                           __usad8
N#define __USADA8                          __usada8
N#define __SSAT16                          __ssat16
N#define __USAT16                          __usat16
N#define __UXTB16                          __uxtb16
N#define __UXTAB16                         __uxtab16
N#define __SXTB16                          __sxtb16
N#define __SXTAB16                         __sxtab16
N#define __SMUAD                           __smuad
N#define __SMUADX                          __smuadx
N#define __SMLAD                           __smlad
N#define __SMLADX                          __smladx
N#define __SMLALD                          __smlald
N#define __SMLALDX                         __smlaldx
N#define __SMUSD                           __smusd
N#define __SMUSDX                          __smusdx
N#define __SMLSD                           __smlsd
N#define __SMLSDX                          __smlsdx
N#define __SMLSLD                          __smlsld
N#define __SMLSLDX                         __smlsldx
N#define __SEL                             __sel
N#define __QADD                            __qadd
N#define __QSUB                            __qsub
N
N#define __PKHBT(ARG1,ARG2,ARG3)          ( ((((uint32_t)(ARG1))          ) & 0x0000FFFFUL) |  \
N                                           ((((uint32_t)(ARG2)) << (ARG3)) & 0xFFFF0000UL)  )
X#define __PKHBT(ARG1,ARG2,ARG3)          ( ((((uint32_t)(ARG1))          ) & 0x0000FFFFUL) |                                             ((((uint32_t)(ARG2)) << (ARG3)) & 0xFFFF0000UL)  )
N
N#define __PKHTB(ARG1,ARG2,ARG3)          ( ((((uint32_t)(ARG1))          ) & 0xFFFF0000UL) |  \
N                                           ((((uint32_t)(ARG2)) >> (ARG3)) & 0x0000FFFFUL)  )
X#define __PKHTB(ARG1,ARG2,ARG3)          ( ((((uint32_t)(ARG1))          ) & 0xFFFF0000UL) |                                             ((((uint32_t)(ARG2)) >> (ARG3)) & 0x0000FFFFUL)  )
N
N#define __SMMLA(ARG1,ARG2,ARG3)          ( (int32_t)((((int64_t)(ARG1) * (ARG2)) + \
N                                                      ((int64_t)(ARG3) << 32U)     ) >> 32U))
X#define __SMMLA(ARG1,ARG2,ARG3)          ( (int32_t)((((int64_t)(ARG1) * (ARG2)) +                                                       ((int64_t)(ARG3) << 32U)     ) >> 32U))
N
N#define __SXTB16_RORn(ARG1, ARG2)        __SXTB16(__ROR(ARG1, ARG2))
N
N#define __SXTAB16_RORn(ARG1, ARG2, ARG3) __SXTAB16(ARG1, __ROR(ARG2, ARG3))
N
N#endif /* ((defined (__ARM_ARCH_7EM__) && (__ARM_ARCH_7EM__ == 1))     ) */
N/*@} end of group CMSIS_SIMD_intrinsics */
N
N
N#endif /* __CMSIS_ARMCC_H */
L 35 "F:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include\cmsis_compiler.h" 2
N
N
N/*
N * Arm Compiler 6.6 LTM (armclang)
N */
N#elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050) && (__ARMCC_VERSION < 6100100)
X#elif 1L && (5060750 >= 6010050) && (5060750 < 6100100)
S  #include "cmsis_armclang_ltm.h"
S
S  /*
S * Arm Compiler above 6.10.1 (armclang)
S */
S#elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6100100)
S  #include "cmsis_armclang.h"
S
S
S/*
S * GNU Compiler
S */
S#elif defined ( __GNUC__ )
S  #include "cmsis_gcc.h"
S
S
S/*
S * IAR Compiler
S */
S#elif defined ( __ICCARM__ )
S  #include <cmsis_iccarm.h>
S
S
S/*
S * TI Arm Compiler
S */
S#elif defined ( __TI_ARM__ )
S  #include <cmsis_ccs.h>
S
S  #ifndef   __ASM
S    #define __ASM                                  __asm
S  #endif
S  #ifndef   __INLINE
S    #define __INLINE                               inline
S  #endif
S  #ifndef   __STATIC_INLINE
S    #define __STATIC_INLINE                        static inline
S  #endif
S  #ifndef   __STATIC_FORCEINLINE
S    #define __STATIC_FORCEINLINE                   __STATIC_INLINE
S  #endif
S  #ifndef   __NO_RETURN
S    #define __NO_RETURN                            __attribute__((noreturn))
S  #endif
S  #ifndef   __USED
S    #define __USED                                 __attribute__((used))
S  #endif
S  #ifndef   __WEAK
S    #define __WEAK                                 __attribute__((weak))
S  #endif
S  #ifndef   __PACKED
S    #define __PACKED                               __attribute__((packed))
S  #endif
S  #ifndef   __PACKED_STRUCT
S    #define __PACKED_STRUCT                        struct __attribute__((packed))
S  #endif
S  #ifndef   __PACKED_UNION
S    #define __PACKED_UNION                         union __attribute__((packed))
S  #endif
S  #ifndef   __UNALIGNED_UINT32        /* deprecated */
S    struct __attribute__((packed)) T_UINT32 { uint32_t v; };
S    #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
S  #endif
S  #ifndef   __UNALIGNED_UINT16_WRITE
S    __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
S    #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void*)(addr))->v) = (val))
S  #endif
S  #ifndef   __UNALIGNED_UINT16_READ
S    __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
S    #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(addr))->v)
S  #endif
S  #ifndef   __UNALIGNED_UINT32_WRITE
S    __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
S    #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))->v) = (val))
S  #endif
S  #ifndef   __UNALIGNED_UINT32_READ
S    __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
S    #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(addr))->v)
S  #endif
S  #ifndef   __ALIGNED
S    #define __ALIGNED(x)                           __attribute__((aligned(x)))
S  #endif
S  #ifndef   __RESTRICT
S    #define __RESTRICT                             __restrict
S  #endif
S  #ifndef   __COMPILER_BARRIER
S    #warning No compiler specific solution for __COMPILER_BARRIER. __COMPILER_BARRIER is ignored.
S    #define __COMPILER_BARRIER()                   (void)0
S  #endif
S
S
S/*
S * TASKING Compiler
S */
S#elif defined ( __TASKING__ )
S  /*
S   * The CMSIS functions have been implemented as intrinsics in the compiler.
S   * Please use "carm -?i" to get an up to date list of all intrinsics,
S   * Including the CMSIS ones.
S   */
S
S  #ifndef   __ASM
S    #define __ASM                                  __asm
S  #endif
S  #ifndef   __INLINE
S    #define __INLINE                               inline
S  #endif
S  #ifndef   __STATIC_INLINE
S    #define __STATIC_INLINE                        static inline
S  #endif
S  #ifndef   __STATIC_FORCEINLINE
S    #define __STATIC_FORCEINLINE                   __STATIC_INLINE
S  #endif
S  #ifndef   __NO_RETURN
S    #define __NO_RETURN                            __attribute__((noreturn))
S  #endif
S  #ifndef   __USED
S    #define __USED                                 __attribute__((used))
S  #endif
S  #ifndef   __WEAK
S    #define __WEAK                                 __attribute__((weak))
S  #endif
S  #ifndef   __PACKED
S    #define __PACKED                               __packed__
S  #endif
S  #ifndef   __PACKED_STRUCT
S    #define __PACKED_STRUCT                        struct __packed__
S  #endif
S  #ifndef   __PACKED_UNION
S    #define __PACKED_UNION                         union __packed__
S  #endif
S  #ifndef   __UNALIGNED_UINT32        /* deprecated */
S    struct __packed__ T_UINT32 { uint32_t v; };
S    #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
S  #endif
S  #ifndef   __UNALIGNED_UINT16_WRITE
S    __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
S    #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))->v) = (val))
S  #endif
S  #ifndef   __UNALIGNED_UINT16_READ
S    __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
S    #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(addr))->v)
S  #endif
S  #ifndef   __UNALIGNED_UINT32_WRITE
S    __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
S    #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))->v) = (val))
S  #endif
S  #ifndef   __UNALIGNED_UINT32_READ
S    __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
S    #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(addr))->v)
S  #endif
S  #ifndef   __ALIGNED
S    #define __ALIGNED(x)              __align(x)
S  #endif
S  #ifndef   __RESTRICT
S    #warning No compiler specific solution for __RESTRICT. __RESTRICT is ignored.
S    #define __RESTRICT
S  #endif
S  #ifndef   __COMPILER_BARRIER
S    #warning No compiler specific solution for __COMPILER_BARRIER. __COMPILER_BARRIER is ignored.
S    #define __COMPILER_BARRIER()                   (void)0
S  #endif
S
S
S/*
S * COSMIC Compiler
S */
S#elif defined ( __CSMC__ )
S   #include <cmsis_csm.h>
S
S #ifndef   __ASM
S    #define __ASM                                  _asm
S  #endif
S  #ifndef   __INLINE
S    #define __INLINE                               inline
S  #endif
S  #ifndef   __STATIC_INLINE
S    #define __STATIC_INLINE                        static inline
S  #endif
S  #ifndef   __STATIC_FORCEINLINE
S    #define __STATIC_FORCEINLINE                   __STATIC_INLINE
S  #endif
S  #ifndef   __NO_RETURN
S    // NO RETURN is automatically detected hence no warning here
S    #define __NO_RETURN
S  #endif
S  #ifndef   __USED
S    #warning No compiler specific solution for __USED. __USED is ignored.
S    #define __USED
S  #endif
S  #ifndef   __WEAK
S    #define __WEAK                                 __weak
S  #endif
S  #ifndef   __PACKED
S    #define __PACKED                               @packed
S  #endif
S  #ifndef   __PACKED_STRUCT
S    #define __PACKED_STRUCT                        @packed struct
S  #endif
S  #ifndef   __PACKED_UNION
S    #define __PACKED_UNION                         @packed union
S  #endif
S  #ifndef   __UNALIGNED_UINT32        /* deprecated */
S    @packed struct T_UINT32 { uint32_t v; };
S    #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
S  #endif
S  #ifndef   __UNALIGNED_UINT16_WRITE
S    __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
S    #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))->v) = (val))
S  #endif
S  #ifndef   __UNALIGNED_UINT16_READ
S    __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
S    #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(addr))->v)
S  #endif
S  #ifndef   __UNALIGNED_UINT32_WRITE
S    __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
S    #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))->v) = (val))
S  #endif
S  #ifndef   __UNALIGNED_UINT32_READ
S    __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
S    #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(addr))->v)
S  #endif
S  #ifndef   __ALIGNED
S    #warning No compiler specific solution for __ALIGNED. __ALIGNED is ignored.
S    #define __ALIGNED(x)
S  #endif
S  #ifndef   __RESTRICT
S    #warning No compiler specific solution for __RESTRICT. __RESTRICT is ignored.
S    #define __RESTRICT
S  #endif
S  #ifndef   __COMPILER_BARRIER
S    #warning No compiler specific solution for __COMPILER_BARRIER. __COMPILER_BARRIER is ignored.
S    #define __COMPILER_BARRIER()                   (void)0
S  #endif
S
S
S#else
S  #error Unknown compiler.
N#endif
N
N
N#endif /* __CMSIS_COMPILER_H */
N
L 29 "RTE/CMSIS/RTX_Config.c" 2
N#include "rtx_os.h"
L 1 "F:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\RTOS2\RTX\Include\rtx_os.h" 1
N/*
N * Copyright (c) 2013-2021 Arm Limited. All rights reserved.
N *
N * SPDX-License-Identifier: Apache-2.0
N *
N * Licensed under the Apache License, Version 2.0 (the License); you may
N * not use this file except in compliance with the License.
N * You may obtain a copy of the License at
N *
N * www.apache.org/licenses/LICENSE-2.0
N *
N * Unless required by applicable law or agreed to in writing, software
N * distributed under the License is distributed on an AS IS BASIS, WITHOUT
N * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
N * See the License for the specific language governing permissions and
N * limitations under the License.
N *
N * -----------------------------------------------------------------------------
N *
N * Project:     CMSIS-RTOS RTX
N * Title:       RTX OS definitions
N *
N * -----------------------------------------------------------------------------
N */
N 
N#ifndef RTX_OS_H_
N#define RTX_OS_H_
N 
N#include <stdint.h>
N#include <stddef.h>
L 1 "F:\Keil_v5\ARM\ARMCC\Bin\..\include\stddef.h" 1
N/* stddef.h: ANSI 'C' (X3J11 Oct 88) library header, section 4.1.4 */
N
N/* Copyright (C) ARM Ltd., 1999
N * All rights reserved
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: agrant $
N */
N
N/* Copyright (C) Codemist Ltd., 1988                            */
N/* Copyright 1991 ARM Limited. All rights reserved.             */
N/* version 0.05 */
N
N/*
N * The following types and macros are defined in several headers referred to in
N * the descriptions of the functions declared in that header. They are also
N * defined in this header file.
N */
N
N#ifndef __stddef_h
N#define __stddef_h
N#define __ARMCLIB_VERSION 5060037
N
N  #ifndef __STDDEF_DECLS
N  #define __STDDEF_DECLS
N    #undef __CLIBNS
N    #ifdef __cplusplus
S        namespace std {
S        #define __CLIBNS ::std::
S        extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N#if __sizeof_ptr == 8
X#if 4 == 8
S  typedef signed long ptrdiff_t;
N#else
N  typedef signed int ptrdiff_t;
N#endif
N
N#if defined(__cplusplus) || !defined(__STRICT_ANSI__)
X#if 0L || !0L
N /* unconditional in C++ and non-strict C for consistency of debug info */
N  #if __sizeof_ptr == 8
X  #if 4 == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
N  #else
N    typedef unsigned int size_t;   /* see <stddef.h> */
N  #endif
N#elif !defined(__size_t)
X#elif !0L
S  #define __size_t 1
S  #if __sizeof_ptr == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
S  #else
S    typedef unsigned int size_t;   /* see <stddef.h> */
S  #endif
S   /* the unsigned integral type of the result of the sizeof operator. */
N#endif
N
N#ifndef __cplusplus  /* wchar_t is a builtin type for C++ */
N  #if !defined(__STRICT_ANSI__)
X  #if !0L
N  /* unconditional in non-strict C for consistency of debug info */
N    #if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
X    #if 0L || (0L && __ARM_SIZEOF_WCHAR_T == 4)
S      typedef unsigned int wchar_t; /* also in <stdlib.h> and <inttypes.h> */
N    #else
N      typedef unsigned short wchar_t; /* also in <stdlib.h> and <inttypes.h> */
N    #endif
N  #elif !defined(__wchar_t)
X  #elif !0L
S    #define __wchar_t 1
S    #if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
S      typedef unsigned int wchar_t; /* also in <stdlib.h> and <inttypes.h> */
S    #else
S      typedef unsigned short wchar_t; /* also in <stdlib.h> and <inttypes.h> */
S    #endif
S   /*
S    * An integral type whose range of values can represent distinct codes for
S    * all members of the largest extended character set specified among the
S    * supported locales; the null character shall have the code value zero and
S    * each member of the basic character set shall have a code value when used
S    * as the lone character in an integer character constant.
S    */
N  #endif
N#endif
N
N#undef NULL  /* others (e.g. <stdio.h>) also define */
N#define NULL 0
N   /* null pointer constant. */
N
N#ifdef __clang__
S  #define offsetof(t, d) __builtin_offsetof(t, d)
N#else
N  /* EDG uses __INTADDR__ to avoid errors when strict */
N  #define offsetof(t, memb) ((__CLIBNS size_t)__INTADDR__(&(((t *)0)->memb)))
N#endif
N
N#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 201112L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X#if !0L || (1L && 201112L <= 199901L) || (0L && 201103L <= __cplusplus)
N  typedef long double max_align_t;
N#endif
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STDDEF_DECLS */
N
N
N  #ifdef __cplusplus
S    #ifndef __STDDEF_NO_EXPORTS
S      using ::std::size_t;
S      using ::std::ptrdiff_t;
S      #if !defined(__STRICT_ANSI__) || (defined(__cplusplus) && 201103L <= __cplusplus)
S        using ::std::max_align_t;
S      #endif
S    #endif 
N  #endif /* __cplusplus */
N
N#endif
N
N/* end of stddef.h */
N
L 31 "F:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\RTOS2\RTX\Include\rtx_os.h" 2
N#include "cmsis_os2.h"
L 1 "F:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\RTOS2\Include\cmsis_os2.h" 1
N/*
N * Copyright (c) 2013-2020 Arm Limited. All rights reserved.
N *
N * SPDX-License-Identifier: Apache-2.0
N *
N * Licensed under the Apache License, Version 2.0 (the License); you may
N * not use this file except in compliance with the License.
N * You may obtain a copy of the License at
N *
N * www.apache.org/licenses/LICENSE-2.0
N *
N * Unless required by applicable law or agreed to in writing, software
N * distributed under the License is distributed on an AS IS BASIS, WITHOUT
N * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
N * See the License for the specific language governing permissions and
N * limitations under the License.
N *
N * ----------------------------------------------------------------------
N *
N * $Date:        12. June 2020
N * $Revision:    V2.1.3
N *
N * Project:      CMSIS-RTOS2 API
N * Title:        cmsis_os2.h header file
N *
N * Version 2.1.3
N *    Additional functions allowed to be called from Interrupt Service Routines:
N *    - osThreadGetId
N * Version 2.1.2
N *    Additional functions allowed to be called from Interrupt Service Routines:
N *    - osKernelGetInfo, osKernelGetState
N * Version 2.1.1
N *    Additional functions allowed to be called from Interrupt Service Routines:
N *    - osKernelGetTickCount, osKernelGetTickFreq
N *    Changed Kernel Tick type to uint32_t:
N *    - updated: osKernelGetTickCount, osDelayUntil
N * Version 2.1.0
N *    Support for critical and uncritical sections (nesting safe):
N *    - updated: osKernelLock, osKernelUnlock
N *    - added: osKernelRestoreLock
N *    Updated Thread and Event Flags:
N *    - changed flags parameter and return type from int32_t to uint32_t
N * Version 2.0.0
N *    Initial Release
N *---------------------------------------------------------------------------*/
N 
N#ifndef CMSIS_OS2_H_
N#define CMSIS_OS2_H_
N 
N#ifndef __NO_RETURN
S#if   defined(__CC_ARM)
S#define __NO_RETURN __declspec(noreturn)
S#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
S#define __NO_RETURN __attribute__((__noreturn__))
S#elif defined(__GNUC__)
S#define __NO_RETURN __attribute__((__noreturn__))
S#elif defined(__ICCARM__)
S#define __NO_RETURN __noreturn
S#else
S#define __NO_RETURN
S#endif
N#endif
N 
N#include <stdint.h>
N#include <stddef.h>
N 
N#ifdef  __cplusplus
Sextern "C"
S{
N#endif
N 
N 
N//  ==== Enumerations, structures, defines ====
N 
N/// Version information.
Ntypedef struct {
N  uint32_t                       api;   ///< API version (major.minor.rev: mmnnnrrrr dec).
N  uint32_t                    kernel;   ///< Kernel version (major.minor.rev: mmnnnrrrr dec).
N} osVersion_t;
N 
N/// Kernel state.
Ntypedef enum {
N  osKernelInactive        =  0,         ///< Inactive.
N  osKernelReady           =  1,         ///< Ready.
N  osKernelRunning         =  2,         ///< Running.
N  osKernelLocked          =  3,         ///< Locked.
N  osKernelSuspended       =  4,         ///< Suspended.
N  osKernelError           = -1,         ///< Error.
N  osKernelReserved        = 0x7FFFFFFF  ///< Prevents enum down-size compiler optimization.
N} osKernelState_t;
N 
N/// Thread state.
Ntypedef enum {
N  osThreadInactive        =  0,         ///< Inactive.
N  osThreadReady           =  1,         ///< Ready.
N  osThreadRunning         =  2,         ///< Running.
N  osThreadBlocked         =  3,         ///< Blocked.
N  osThreadTerminated      =  4,         ///< Terminated.
N  osThreadError           = -1,         ///< Error.
N  osThreadReserved        = 0x7FFFFFFF  ///< Prevents enum down-size compiler optimization.
N} osThreadState_t;
N 
N/// Priority values.
Ntypedef enum {
N  osPriorityNone          =  0,         ///< No priority (not initialized).
N  osPriorityIdle          =  1,         ///< Reserved for Idle thread.
N  osPriorityLow           =  8,         ///< Priority: low
N  osPriorityLow1          =  8+1,       ///< Priority: low + 1
N  osPriorityLow2          =  8+2,       ///< Priority: low + 2
N  osPriorityLow3          =  8+3,       ///< Priority: low + 3
N  osPriorityLow4          =  8+4,       ///< Priority: low + 4
N  osPriorityLow5          =  8+5,       ///< Priority: low + 5
N  osPriorityLow6          =  8+6,       ///< Priority: low + 6
N  osPriorityLow7          =  8+7,       ///< Priority: low + 7
N  osPriorityBelowNormal   = 16,         ///< Priority: below normal
N  osPriorityBelowNormal1  = 16+1,       ///< Priority: below normal + 1
N  osPriorityBelowNormal2  = 16+2,       ///< Priority: below normal + 2
N  osPriorityBelowNormal3  = 16+3,       ///< Priority: below normal + 3
N  osPriorityBelowNormal4  = 16+4,       ///< Priority: below normal + 4
N  osPriorityBelowNormal5  = 16+5,       ///< Priority: below normal + 5
N  osPriorityBelowNormal6  = 16+6,       ///< Priority: below normal + 6
N  osPriorityBelowNormal7  = 16+7,       ///< Priority: below normal + 7
N  osPriorityNormal        = 24,         ///< Priority: normal
N  osPriorityNormal1       = 24+1,       ///< Priority: normal + 1
N  osPriorityNormal2       = 24+2,       ///< Priority: normal + 2
N  osPriorityNormal3       = 24+3,       ///< Priority: normal + 3
N  osPriorityNormal4       = 24+4,       ///< Priority: normal + 4
N  osPriorityNormal5       = 24+5,       ///< Priority: normal + 5
N  osPriorityNormal6       = 24+6,       ///< Priority: normal + 6
N  osPriorityNormal7       = 24+7,       ///< Priority: normal + 7
N  osPriorityAboveNormal   = 32,         ///< Priority: above normal
N  osPriorityAboveNormal1  = 32+1,       ///< Priority: above normal + 1
N  osPriorityAboveNormal2  = 32+2,       ///< Priority: above normal + 2
N  osPriorityAboveNormal3  = 32+3,       ///< Priority: above normal + 3
N  osPriorityAboveNormal4  = 32+4,       ///< Priority: above normal + 4
N  osPriorityAboveNormal5  = 32+5,       ///< Priority: above normal + 5
N  osPriorityAboveNormal6  = 32+6,       ///< Priority: above normal + 6
N  osPriorityAboveNormal7  = 32+7,       ///< Priority: above normal + 7
N  osPriorityHigh          = 40,         ///< Priority: high
N  osPriorityHigh1         = 40+1,       ///< Priority: high + 1
N  osPriorityHigh2         = 40+2,       ///< Priority: high + 2
N  osPriorityHigh3         = 40+3,       ///< Priority: high + 3
N  osPriorityHigh4         = 40+4,       ///< Priority: high + 4
N  osPriorityHigh5         = 40+5,       ///< Priority: high + 5
N  osPriorityHigh6         = 40+6,       ///< Priority: high + 6
N  osPriorityHigh7         = 40+7,       ///< Priority: high + 7
N  osPriorityRealtime      = 48,         ///< Priority: realtime
N  osPriorityRealtime1     = 48+1,       ///< Priority: realtime + 1
N  osPriorityRealtime2     = 48+2,       ///< Priority: realtime + 2
N  osPriorityRealtime3     = 48+3,       ///< Priority: realtime + 3
N  osPriorityRealtime4     = 48+4,       ///< Priority: realtime + 4
N  osPriorityRealtime5     = 48+5,       ///< Priority: realtime + 5
N  osPriorityRealtime6     = 48+6,       ///< Priority: realtime + 6
N  osPriorityRealtime7     = 48+7,       ///< Priority: realtime + 7
N  osPriorityISR           = 56,         ///< Reserved for ISR deferred thread.
N  osPriorityError         = -1,         ///< System cannot determine priority or illegal priority.
N  osPriorityReserved      = 0x7FFFFFFF  ///< Prevents enum down-size compiler optimization.
N} osPriority_t;
N 
N/// Entry point of a thread.
Ntypedef void (*osThreadFunc_t) (void *argument);
N 
N/// Timer callback function.
Ntypedef void (*osTimerFunc_t) (void *argument);
N 
N/// Timer type.
Ntypedef enum {
N  osTimerOnce               = 0,          ///< One-shot timer.
N  osTimerPeriodic           = 1           ///< Repeating timer.
N} osTimerType_t;
N 
N// Timeout value.
N#define osWaitForever         0xFFFFFFFFU ///< Wait forever timeout value.
N 
N// Flags options (\ref osThreadFlagsWait and \ref osEventFlagsWait).
N#define osFlagsWaitAny        0x00000000U ///< Wait for any flag (default).
N#define osFlagsWaitAll        0x00000001U ///< Wait for all flags.
N#define osFlagsNoClear        0x00000002U ///< Do not clear flags which have been specified to wait for.
N 
N// Flags errors (returned by osThreadFlagsXxxx and osEventFlagsXxxx).
N#define osFlagsError          0x80000000U ///< Error indicator.
N#define osFlagsErrorUnknown   0xFFFFFFFFU ///< osError (-1).
N#define osFlagsErrorTimeout   0xFFFFFFFEU ///< osErrorTimeout (-2).
N#define osFlagsErrorResource  0xFFFFFFFDU ///< osErrorResource (-3).
N#define osFlagsErrorParameter 0xFFFFFFFCU ///< osErrorParameter (-4).
N#define osFlagsErrorISR       0xFFFFFFFAU ///< osErrorISR (-6).
N 
N// Thread attributes (attr_bits in \ref osThreadAttr_t).
N#define osThreadDetached      0x00000000U ///< Thread created in detached mode (default)
N#define osThreadJoinable      0x00000001U ///< Thread created in joinable mode
N 
N// Mutex attributes (attr_bits in \ref osMutexAttr_t).
N#define osMutexRecursive      0x00000001U ///< Recursive mutex.
N#define osMutexPrioInherit    0x00000002U ///< Priority inherit protocol.
N#define osMutexRobust         0x00000008U ///< Robust mutex.
N 
N/// Status code values returned by CMSIS-RTOS functions.
Ntypedef enum {
N  osOK                      =  0,         ///< Operation completed successfully.
N  osError                   = -1,         ///< Unspecified RTOS error: run-time error but no other error message fits.
N  osErrorTimeout            = -2,         ///< Operation not completed within the timeout period.
N  osErrorResource           = -3,         ///< Resource not available.
N  osErrorParameter          = -4,         ///< Parameter error.
N  osErrorNoMemory           = -5,         ///< System is out of memory: it was impossible to allocate or reserve memory for the operation.
N  osErrorISR                = -6,         ///< Not allowed in ISR context: the function cannot be called from interrupt service routines.
N  osStatusReserved          = 0x7FFFFFFF  ///< Prevents enum down-size compiler optimization.
N} osStatus_t;
N 
N 
N/// \details Thread ID identifies the thread.
Ntypedef void *osThreadId_t;
N 
N/// \details Timer ID identifies the timer.
Ntypedef void *osTimerId_t;
N 
N/// \details Event Flags ID identifies the event flags.
Ntypedef void *osEventFlagsId_t;
N 
N/// \details Mutex ID identifies the mutex.
Ntypedef void *osMutexId_t;
N 
N/// \details Semaphore ID identifies the semaphore.
Ntypedef void *osSemaphoreId_t;
N 
N/// \details Memory Pool ID identifies the memory pool.
Ntypedef void *osMemoryPoolId_t;
N 
N/// \details Message Queue ID identifies the message queue.
Ntypedef void *osMessageQueueId_t;
N 
N 
N#ifndef TZ_MODULEID_T
N#define TZ_MODULEID_T
N/// \details Data type that identifies secure software modules called by a process.
Ntypedef uint32_t TZ_ModuleId_t;
N#endif
N 
N 
N/// Attributes structure for thread.
Ntypedef struct {
N  const char                   *name;   ///< name of the thread
N  uint32_t                 attr_bits;   ///< attribute bits
N  void                      *cb_mem;    ///< memory for control block
N  uint32_t                   cb_size;   ///< size of provided memory for control block
N  void                   *stack_mem;    ///< memory for stack
N  uint32_t                stack_size;   ///< size of stack
N  osPriority_t              priority;   ///< initial thread priority (default: osPriorityNormal)
N  TZ_ModuleId_t            tz_module;   ///< TrustZone module identifier
N  uint32_t                  reserved;   ///< reserved (must be 0)
N} osThreadAttr_t;
N 
N/// Attributes structure for timer.
Ntypedef struct {
N  const char                   *name;   ///< name of the timer
N  uint32_t                 attr_bits;   ///< attribute bits
N  void                      *cb_mem;    ///< memory for control block
N  uint32_t                   cb_size;   ///< size of provided memory for control block
N} osTimerAttr_t;
N 
N/// Attributes structure for event flags.
Ntypedef struct {
N  const char                   *name;   ///< name of the event flags
N  uint32_t                 attr_bits;   ///< attribute bits
N  void                      *cb_mem;    ///< memory for control block
N  uint32_t                   cb_size;   ///< size of provided memory for control block
N} osEventFlagsAttr_t;
N 
N/// Attributes structure for mutex.
Ntypedef struct {
N  const char                   *name;   ///< name of the mutex
N  uint32_t                 attr_bits;   ///< attribute bits
N  void                      *cb_mem;    ///< memory for control block
N  uint32_t                   cb_size;   ///< size of provided memory for control block
N} osMutexAttr_t;
N 
N/// Attributes structure for semaphore.
Ntypedef struct {
N  const char                   *name;   ///< name of the semaphore
N  uint32_t                 attr_bits;   ///< attribute bits
N  void                      *cb_mem;    ///< memory for control block
N  uint32_t                   cb_size;   ///< size of provided memory for control block
N} osSemaphoreAttr_t;
N 
N/// Attributes structure for memory pool.
Ntypedef struct {
N  const char                   *name;   ///< name of the memory pool
N  uint32_t                 attr_bits;   ///< attribute bits
N  void                      *cb_mem;    ///< memory for control block
N  uint32_t                   cb_size;   ///< size of provided memory for control block
N  void                      *mp_mem;    ///< memory for data storage
N  uint32_t                   mp_size;   ///< size of provided memory for data storage 
N} osMemoryPoolAttr_t;
N 
N/// Attributes structure for message queue.
Ntypedef struct {
N  const char                   *name;   ///< name of the message queue
N  uint32_t                 attr_bits;   ///< attribute bits
N  void                      *cb_mem;    ///< memory for control block
N  uint32_t                   cb_size;   ///< size of provided memory for control block
N  void                      *mq_mem;    ///< memory for data storage
N  uint32_t                   mq_size;   ///< size of provided memory for data storage 
N} osMessageQueueAttr_t;
N 
N 
N//  ==== Kernel Management Functions ====
N 
N/// Initialize the RTOS Kernel.
N/// \return status code that indicates the execution status of the function.
NosStatus_t osKernelInitialize (void);
N 
N///  Get RTOS Kernel Information.
N/// \param[out]    version       pointer to buffer for retrieving version information.
N/// \param[out]    id_buf        pointer to buffer for retrieving kernel identification string.
N/// \param[in]     id_size       size of buffer for kernel identification string.
N/// \return status code that indicates the execution status of the function.
NosStatus_t osKernelGetInfo (osVersion_t *version, char *id_buf, uint32_t id_size);
N 
N/// Get the current RTOS Kernel state.
N/// \return current RTOS Kernel state.
NosKernelState_t osKernelGetState (void);
N 
N/// Start the RTOS Kernel scheduler.
N/// \return status code that indicates the execution status of the function.
NosStatus_t osKernelStart (void);
N 
N/// Lock the RTOS Kernel scheduler.
N/// \return previous lock state (1 - locked, 0 - not locked, error code if negative).
Nint32_t osKernelLock (void);
N 
N/// Unlock the RTOS Kernel scheduler.
N/// \return previous lock state (1 - locked, 0 - not locked, error code if negative).
Nint32_t osKernelUnlock (void);
N 
N/// Restore the RTOS Kernel scheduler lock state.
N/// \param[in]     lock          lock state obtained by \ref osKernelLock or \ref osKernelUnlock.
N/// \return new lock state (1 - locked, 0 - not locked, error code if negative).
Nint32_t osKernelRestoreLock (int32_t lock);
N 
N/// Suspend the RTOS Kernel scheduler.
N/// \return time in ticks, for how long the system can sleep or power-down.
Nuint32_t osKernelSuspend (void);
N 
N/// Resume the RTOS Kernel scheduler.
N/// \param[in]     sleep_ticks   time in ticks for how long the system was in sleep or power-down mode.
Nvoid osKernelResume (uint32_t sleep_ticks);
N 
N/// Get the RTOS kernel tick count.
N/// \return RTOS kernel current tick count.
Nuint32_t osKernelGetTickCount (void);
N 
N/// Get the RTOS kernel tick frequency.
N/// \return frequency of the kernel tick in hertz, i.e. kernel ticks per second.
Nuint32_t osKernelGetTickFreq (void);
N 
N/// Get the RTOS kernel system timer count.
N/// \return RTOS kernel current system timer count as 32-bit value.
Nuint32_t osKernelGetSysTimerCount (void);
N 
N/// Get the RTOS kernel system timer frequency.
N/// \return frequency of the system timer in hertz, i.e. timer ticks per second.
Nuint32_t osKernelGetSysTimerFreq (void);
N 
N 
N//  ==== Thread Management Functions ====
N 
N/// Create a thread and add it to Active Threads.
N/// \param[in]     func          thread function.
N/// \param[in]     argument      pointer that is passed to the thread function as start argument.
N/// \param[in]     attr          thread attributes; NULL: default values.
N/// \return thread ID for reference by other functions or NULL in case of error.
NosThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr);
N 
N/// Get name of a thread.
N/// \param[in]     thread_id     thread ID obtained by \ref osThreadNew or \ref osThreadGetId.
N/// \return name as null-terminated string.
Nconst char *osThreadGetName (osThreadId_t thread_id);
N 
N/// Return the thread ID of the current running thread.
N/// \return thread ID for reference by other functions or NULL in case of error.
NosThreadId_t osThreadGetId (void);
N 
N/// Get current thread state of a thread.
N/// \param[in]     thread_id     thread ID obtained by \ref osThreadNew or \ref osThreadGetId.
N/// \return current thread state of the specified thread.
NosThreadState_t osThreadGetState (osThreadId_t thread_id);
N 
N/// Get stack size of a thread.
N/// \param[in]     thread_id     thread ID obtained by \ref osThreadNew or \ref osThreadGetId.
N/// \return stack size in bytes.
Nuint32_t osThreadGetStackSize (osThreadId_t thread_id);
N 
N/// Get available stack space of a thread based on stack watermark recording during execution.
N/// \param[in]     thread_id     thread ID obtained by \ref osThreadNew or \ref osThreadGetId.
N/// \return remaining stack space in bytes.
Nuint32_t osThreadGetStackSpace (osThreadId_t thread_id);
N 
N/// Change priority of a thread.
N/// \param[in]     thread_id     thread ID obtained by \ref osThreadNew or \ref osThreadGetId.
N/// \param[in]     priority      new priority value for the thread function.
N/// \return status code that indicates the execution status of the function.
NosStatus_t osThreadSetPriority (osThreadId_t thread_id, osPriority_t priority);
N 
N/// Get current priority of a thread.
N/// \param[in]     thread_id     thread ID obtained by \ref osThreadNew or \ref osThreadGetId.
N/// \return current priority value of the specified thread.
NosPriority_t osThreadGetPriority (osThreadId_t thread_id);
N 
N/// Pass control to next thread that is in state \b READY.
N/// \return status code that indicates the execution status of the function.
NosStatus_t osThreadYield (void);
N 
N/// Suspend execution of a thread.
N/// \param[in]     thread_id     thread ID obtained by \ref osThreadNew or \ref osThreadGetId.
N/// \return status code that indicates the execution status of the function.
NosStatus_t osThreadSuspend (osThreadId_t thread_id);
N 
N/// Resume execution of a thread.
N/// \param[in]     thread_id     thread ID obtained by \ref osThreadNew or \ref osThreadGetId.
N/// \return status code that indicates the execution status of the function.
NosStatus_t osThreadResume (osThreadId_t thread_id);
N 
N/// Detach a thread (thread storage can be reclaimed when thread terminates).
N/// \param[in]     thread_id     thread ID obtained by \ref osThreadNew or \ref osThreadGetId.
N/// \return status code that indicates the execution status of the function.
NosStatus_t osThreadDetach (osThreadId_t thread_id);
N 
N/// Wait for specified thread to terminate.
N/// \param[in]     thread_id     thread ID obtained by \ref osThreadNew or \ref osThreadGetId.
N/// \return status code that indicates the execution status of the function.
NosStatus_t osThreadJoin (osThreadId_t thread_id);
N 
N/// Terminate execution of current running thread.
N__NO_RETURN void osThreadExit (void);
X__declspec(noreturn) void osThreadExit (void);
N 
N/// Terminate execution of a thread.
N/// \param[in]     thread_id     thread ID obtained by \ref osThreadNew or \ref osThreadGetId.
N/// \return status code that indicates the execution status of the function.
NosStatus_t osThreadTerminate (osThreadId_t thread_id);
N 
N/// Get number of active threads.
N/// \return number of active threads.
Nuint32_t osThreadGetCount (void);
N 
N/// Enumerate active threads.
N/// \param[out]    thread_array  pointer to array for retrieving thread IDs.
N/// \param[in]     array_items   maximum number of items in array for retrieving thread IDs.
N/// \return number of enumerated threads.
Nuint32_t osThreadEnumerate (osThreadId_t *thread_array, uint32_t array_items);
N 
N 
N//  ==== Thread Flags Functions ====
N 
N/// Set the specified Thread Flags of a thread.
N/// \param[in]     thread_id     thread ID obtained by \ref osThreadNew or \ref osThreadGetId.
N/// \param[in]     flags         specifies the flags of the thread that shall be set.
N/// \return thread flags after setting or error code if highest bit set.
Nuint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags);
N 
N/// Clear the specified Thread Flags of current running thread.
N/// \param[in]     flags         specifies the flags of the thread that shall be cleared.
N/// \return thread flags before clearing or error code if highest bit set.
Nuint32_t osThreadFlagsClear (uint32_t flags);
N 
N/// Get the current Thread Flags of current running thread.
N/// \return current thread flags.
Nuint32_t osThreadFlagsGet (void);
N 
N/// Wait for one or more Thread Flags of the current running thread to become signaled.
N/// \param[in]     flags         specifies the flags to wait for.
N/// \param[in]     options       specifies flags options (osFlagsXxxx).
N/// \param[in]     timeout       \ref CMSIS_RTOS_TimeOutValue or 0 in case of no time-out.
N/// \return thread flags before clearing or error code if highest bit set.
Nuint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout);
N 
N 
N//  ==== Generic Wait Functions ====
N 
N/// Wait for Timeout (Time Delay).
N/// \param[in]     ticks         \ref CMSIS_RTOS_TimeOutValue "time ticks" value
N/// \return status code that indicates the execution status of the function.
NosStatus_t osDelay (uint32_t ticks);
N 
N/// Wait until specified time.
N/// \param[in]     ticks         absolute time in ticks
N/// \return status code that indicates the execution status of the function.
NosStatus_t osDelayUntil (uint32_t ticks);
N 
N 
N//  ==== Timer Management Functions ====
N 
N/// Create and Initialize a timer.
N/// \param[in]     func          function pointer to callback function.
N/// \param[in]     type          \ref osTimerOnce for one-shot or \ref osTimerPeriodic for periodic behavior.
N/// \param[in]     argument      argument to the timer callback function.
N/// \param[in]     attr          timer attributes; NULL: default values.
N/// \return timer ID for reference by other functions or NULL in case of error.
NosTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr);
N 
N/// Get name of a timer.
N/// \param[in]     timer_id      timer ID obtained by \ref osTimerNew.
N/// \return name as null-terminated string.
Nconst char *osTimerGetName (osTimerId_t timer_id);
N 
N/// Start or restart a timer.
N/// \param[in]     timer_id      timer ID obtained by \ref osTimerNew.
N/// \param[in]     ticks         \ref CMSIS_RTOS_TimeOutValue "time ticks" value of the timer.
N/// \return status code that indicates the execution status of the function.
NosStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks);
N 
N/// Stop a timer.
N/// \param[in]     timer_id      timer ID obtained by \ref osTimerNew.
N/// \return status code that indicates the execution status of the function.
NosStatus_t osTimerStop (osTimerId_t timer_id);
N 
N/// Check if a timer is running.
N/// \param[in]     timer_id      timer ID obtained by \ref osTimerNew.
N/// \return 0 not running, 1 running.
Nuint32_t osTimerIsRunning (osTimerId_t timer_id);
N 
N/// Delete a timer.
N/// \param[in]     timer_id      timer ID obtained by \ref osTimerNew.
N/// \return status code that indicates the execution status of the function.
NosStatus_t osTimerDelete (osTimerId_t timer_id);
N 
N 
N//  ==== Event Flags Management Functions ====
N 
N/// Create and Initialize an Event Flags object.
N/// \param[in]     attr          event flags attributes; NULL: default values.
N/// \return event flags ID for reference by other functions or NULL in case of error.
NosEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr);
N 
N/// Get name of an Event Flags object.
N/// \param[in]     ef_id         event flags ID obtained by \ref osEventFlagsNew.
N/// \return name as null-terminated string.
Nconst char *osEventFlagsGetName (osEventFlagsId_t ef_id);
N 
N/// Set the specified Event Flags.
N/// \param[in]     ef_id         event flags ID obtained by \ref osEventFlagsNew.
N/// \param[in]     flags         specifies the flags that shall be set.
N/// \return event flags after setting or error code if highest bit set.
Nuint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags);
N 
N/// Clear the specified Event Flags.
N/// \param[in]     ef_id         event flags ID obtained by \ref osEventFlagsNew.
N/// \param[in]     flags         specifies the flags that shall be cleared.
N/// \return event flags before clearing or error code if highest bit set.
Nuint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags);
N 
N/// Get the current Event Flags.
N/// \param[in]     ef_id         event flags ID obtained by \ref osEventFlagsNew.
N/// \return current event flags.
Nuint32_t osEventFlagsGet (osEventFlagsId_t ef_id);
N 
N/// Wait for one or more Event Flags to become signaled.
N/// \param[in]     ef_id         event flags ID obtained by \ref osEventFlagsNew.
N/// \param[in]     flags         specifies the flags to wait for.
N/// \param[in]     options       specifies flags options (osFlagsXxxx).
N/// \param[in]     timeout       \ref CMSIS_RTOS_TimeOutValue or 0 in case of no time-out.
N/// \return event flags before clearing or error code if highest bit set.
Nuint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout);
N 
N/// Delete an Event Flags object.
N/// \param[in]     ef_id         event flags ID obtained by \ref osEventFlagsNew.
N/// \return status code that indicates the execution status of the function.
NosStatus_t osEventFlagsDelete (osEventFlagsId_t ef_id);
N 
N 
N//  ==== Mutex Management Functions ====
N 
N/// Create and Initialize a Mutex object.
N/// \param[in]     attr          mutex attributes; NULL: default values.
N/// \return mutex ID for reference by other functions or NULL in case of error.
NosMutexId_t osMutexNew (const osMutexAttr_t *attr);
N 
N/// Get name of a Mutex object.
N/// \param[in]     mutex_id      mutex ID obtained by \ref osMutexNew.
N/// \return name as null-terminated string.
Nconst char *osMutexGetName (osMutexId_t mutex_id);
N 
N/// Acquire a Mutex or timeout if it is locked.
N/// \param[in]     mutex_id      mutex ID obtained by \ref osMutexNew.
N/// \param[in]     timeout       \ref CMSIS_RTOS_TimeOutValue or 0 in case of no time-out.
N/// \return status code that indicates the execution status of the function.
NosStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout);
N 
N/// Release a Mutex that was acquired by \ref osMutexAcquire.
N/// \param[in]     mutex_id      mutex ID obtained by \ref osMutexNew.
N/// \return status code that indicates the execution status of the function.
NosStatus_t osMutexRelease (osMutexId_t mutex_id);
N 
N/// Get Thread which owns a Mutex object.
N/// \param[in]     mutex_id      mutex ID obtained by \ref osMutexNew.
N/// \return thread ID of owner thread or NULL when mutex was not acquired.
NosThreadId_t osMutexGetOwner (osMutexId_t mutex_id);
N 
N/// Delete a Mutex object.
N/// \param[in]     mutex_id      mutex ID obtained by \ref osMutexNew.
N/// \return status code that indicates the execution status of the function.
NosStatus_t osMutexDelete (osMutexId_t mutex_id);
N 
N 
N//  ==== Semaphore Management Functions ====
N 
N/// Create and Initialize a Semaphore object.
N/// \param[in]     max_count     maximum number of available tokens.
N/// \param[in]     initial_count initial number of available tokens.
N/// \param[in]     attr          semaphore attributes; NULL: default values.
N/// \return semaphore ID for reference by other functions or NULL in case of error.
NosSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr);
N 
N/// Get name of a Semaphore object.
N/// \param[in]     semaphore_id  semaphore ID obtained by \ref osSemaphoreNew.
N/// \return name as null-terminated string.
Nconst char *osSemaphoreGetName (osSemaphoreId_t semaphore_id);
N 
N/// Acquire a Semaphore token or timeout if no tokens are available.
N/// \param[in]     semaphore_id  semaphore ID obtained by \ref osSemaphoreNew.
N/// \param[in]     timeout       \ref CMSIS_RTOS_TimeOutValue or 0 in case of no time-out.
N/// \return status code that indicates the execution status of the function.
NosStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout);
N 
N/// Release a Semaphore token up to the initial maximum count.
N/// \param[in]     semaphore_id  semaphore ID obtained by \ref osSemaphoreNew.
N/// \return status code that indicates the execution status of the function.
NosStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id);
N 
N/// Get current Semaphore token count.
N/// \param[in]     semaphore_id  semaphore ID obtained by \ref osSemaphoreNew.
N/// \return number of tokens available.
Nuint32_t osSemaphoreGetCount (osSemaphoreId_t semaphore_id);
N 
N/// Delete a Semaphore object.
N/// \param[in]     semaphore_id  semaphore ID obtained by \ref osSemaphoreNew.
N/// \return status code that indicates the execution status of the function.
NosStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id);
N 
N 
N//  ==== Memory Pool Management Functions ====
N 
N/// Create and Initialize a Memory Pool object.
N/// \param[in]     block_count   maximum number of memory blocks in memory pool.
N/// \param[in]     block_size    memory block size in bytes.
N/// \param[in]     attr          memory pool attributes; NULL: default values.
N/// \return memory pool ID for reference by other functions or NULL in case of error.
NosMemoryPoolId_t osMemoryPoolNew (uint32_t block_count, uint32_t block_size, const osMemoryPoolAttr_t *attr);
N 
N/// Get name of a Memory Pool object.
N/// \param[in]     mp_id         memory pool ID obtained by \ref osMemoryPoolNew.
N/// \return name as null-terminated string.
Nconst char *osMemoryPoolGetName (osMemoryPoolId_t mp_id);
N 
N/// Allocate a memory block from a Memory Pool.
N/// \param[in]     mp_id         memory pool ID obtained by \ref osMemoryPoolNew.
N/// \param[in]     timeout       \ref CMSIS_RTOS_TimeOutValue or 0 in case of no time-out.
N/// \return address of the allocated memory block or NULL in case of no memory is available.
Nvoid *osMemoryPoolAlloc (osMemoryPoolId_t mp_id, uint32_t timeout);
N 
N/// Return an allocated memory block back to a Memory Pool.
N/// \param[in]     mp_id         memory pool ID obtained by \ref osMemoryPoolNew.
N/// \param[in]     block         address of the allocated memory block to be returned to the memory pool.
N/// \return status code that indicates the execution status of the function.
NosStatus_t osMemoryPoolFree (osMemoryPoolId_t mp_id, void *block);
N 
N/// Get maximum number of memory blocks in a Memory Pool.
N/// \param[in]     mp_id         memory pool ID obtained by \ref osMemoryPoolNew.
N/// \return maximum number of memory blocks.
Nuint32_t osMemoryPoolGetCapacity (osMemoryPoolId_t mp_id);
N 
N/// Get memory block size in a Memory Pool.
N/// \param[in]     mp_id         memory pool ID obtained by \ref osMemoryPoolNew.
N/// \return memory block size in bytes.
Nuint32_t osMemoryPoolGetBlockSize (osMemoryPoolId_t mp_id);
N 
N/// Get number of memory blocks used in a Memory Pool.
N/// \param[in]     mp_id         memory pool ID obtained by \ref osMemoryPoolNew.
N/// \return number of memory blocks used.
Nuint32_t osMemoryPoolGetCount (osMemoryPoolId_t mp_id);
N 
N/// Get number of memory blocks available in a Memory Pool.
N/// \param[in]     mp_id         memory pool ID obtained by \ref osMemoryPoolNew.
N/// \return number of memory blocks available.
Nuint32_t osMemoryPoolGetSpace (osMemoryPoolId_t mp_id);
N 
N/// Delete a Memory Pool object.
N/// \param[in]     mp_id         memory pool ID obtained by \ref osMemoryPoolNew.
N/// \return status code that indicates the execution status of the function.
NosStatus_t osMemoryPoolDelete (osMemoryPoolId_t mp_id);
N 
N 
N//  ==== Message Queue Management Functions ====
N 
N/// Create and Initialize a Message Queue object.
N/// \param[in]     msg_count     maximum number of messages in queue.
N/// \param[in]     msg_size      maximum message size in bytes.
N/// \param[in]     attr          message queue attributes; NULL: default values.
N/// \return message queue ID for reference by other functions or NULL in case of error.
NosMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr);
N 
N/// Get name of a Message Queue object.
N/// \param[in]     mq_id         message queue ID obtained by \ref osMessageQueueNew.
N/// \return name as null-terminated string.
Nconst char *osMessageQueueGetName (osMessageQueueId_t mq_id);
N 
N/// Put a Message into a Queue or timeout if Queue is full.
N/// \param[in]     mq_id         message queue ID obtained by \ref osMessageQueueNew.
N/// \param[in]     msg_ptr       pointer to buffer with message to put into a queue.
N/// \param[in]     msg_prio      message priority.
N/// \param[in]     timeout       \ref CMSIS_RTOS_TimeOutValue or 0 in case of no time-out.
N/// \return status code that indicates the execution status of the function.
NosStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout);
N 
N/// Get a Message from a Queue or timeout if Queue is empty.
N/// \param[in]     mq_id         message queue ID obtained by \ref osMessageQueueNew.
N/// \param[out]    msg_ptr       pointer to buffer for message to get from a queue.
N/// \param[out]    msg_prio      pointer to buffer for message priority or NULL.
N/// \param[in]     timeout       \ref CMSIS_RTOS_TimeOutValue or 0 in case of no time-out.
N/// \return status code that indicates the execution status of the function.
NosStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout);
N 
N/// Get maximum number of messages in a Message Queue.
N/// \param[in]     mq_id         message queue ID obtained by \ref osMessageQueueNew.
N/// \return maximum number of messages.
Nuint32_t osMessageQueueGetCapacity (osMessageQueueId_t mq_id);
N 
N/// Get maximum message size in a Message Queue.
N/// \param[in]     mq_id         message queue ID obtained by \ref osMessageQueueNew.
N/// \return maximum message size in bytes.
Nuint32_t osMessageQueueGetMsgSize (osMessageQueueId_t mq_id);
N 
N/// Get number of queued messages in a Message Queue.
N/// \param[in]     mq_id         message queue ID obtained by \ref osMessageQueueNew.
N/// \return number of queued messages.
Nuint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id);
N 
N/// Get number of available slots for messages in a Message Queue.
N/// \param[in]     mq_id         message queue ID obtained by \ref osMessageQueueNew.
N/// \return number of available slots for messages.
Nuint32_t osMessageQueueGetSpace (osMessageQueueId_t mq_id);
N 
N/// Reset a Message Queue to initial empty state.
N/// \param[in]     mq_id         message queue ID obtained by \ref osMessageQueueNew.
N/// \return status code that indicates the execution status of the function.
NosStatus_t osMessageQueueReset (osMessageQueueId_t mq_id);
N 
N/// Delete a Message Queue object.
N/// \param[in]     mq_id         message queue ID obtained by \ref osMessageQueueNew.
N/// \return status code that indicates the execution status of the function.
NosStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id);
N 
N 
N#ifdef  __cplusplus
S}
N#endif
N 
N#endif  // CMSIS_OS2_H_
L 32 "F:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\RTOS2\RTX\Include\rtx_os.h" 2
N#include "rtx_def.h"
L 1 "F:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\RTOS2\RTX\Include\rtx_def.h" 1
N/*
N * Copyright (c) 2021 Arm Limited. All rights reserved.
N *
N * SPDX-License-Identifier: Apache-2.0
N *
N * Licensed under the Apache License, Version 2.0 (the License); you may
N * not use this file except in compliance with the License.
N * You may obtain a copy of the License at
N *
N * www.apache.org/licenses/LICENSE-2.0
N *
N * Unless required by applicable law or agreed to in writing, software
N * distributed under the License is distributed on an AS IS BASIS, WITHOUT
N * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
N * See the License for the specific language governing permissions and
N * limitations under the License.
N *
N * -----------------------------------------------------------------------------
N *
N * Project:     CMSIS-RTOS RTX
N * Title:       RTX derived definitions
N *
N * -----------------------------------------------------------------------------
N */
N
N#ifndef RTX_DEF_H_
N#define RTX_DEF_H_
N
N#ifdef   _RTE_
N#include "RTE_Components.h"
L 1 ".\RTE\_Target-scpu\RTE_Components.h" 1
N
N/*
N * Auto generated Run-Time-Environment Configuration File
N *      *** Do not modify ! ***
N *
N * Project: 'scpu' 
N * Target:  'Target-scpu' 
N */
N
N#ifndef RTE_COMPONENTS_H
N#define RTE_COMPONENTS_H
N
N
N/*
N * Define the Device Header File: 
N */
N#define CMSIS_device_header "ARMCM4_FP.h"
N
N/* ARM::CMSIS:RTOS2:Keil RTX5:Source:5.5.4 */
N#define RTE_CMSIS_RTOS2                 /* CMSIS-RTOS2 */
N        #define RTE_CMSIS_RTOS2_RTX5            /* CMSIS-RTOS2 Keil RTX5 */
N        #define RTE_CMSIS_RTOS2_RTX5_SOURCE     /* CMSIS-RTOS2 Keil RTX5 Source */
N
N
N#endif /* RTE_COMPONENTS_H */
L 31 "F:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\RTOS2\RTX\Include\rtx_def.h" 2
N#endif
N#include "RTX_Config.h"
L 1 ".\RTE\CMSIS\RTX_Config.h" 1
N/*
N * Copyright (c) 2013-2018 Arm Limited. All rights reserved.
N *
N * SPDX-License-Identifier: Apache-2.0
N *
N * Licensed under the Apache License, Version 2.0 (the License); you may
N * not use this file except in compliance with the License.
N * You may obtain a copy of the License at
N *
N * www.apache.org/licenses/LICENSE-2.0
N *
N * Unless required by applicable law or agreed to in writing, software
N * distributed under the License is distributed on an AS IS BASIS, WITHOUT
N * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
N * See the License for the specific language governing permissions and
N * limitations under the License.
N *
N * -----------------------------------------------------------------------------
N *
N * $Revision:   V5.4.0
N *
N * Project:     CMSIS-RTOS RTX
N * Title:       RTX Configuration definitions
N *
N * -----------------------------------------------------------------------------
N */
N 
N#ifndef RTX_CONFIG_H_
N#define RTX_CONFIG_H_
N 
N#ifdef   _RTE_
N#include "RTE_Components.h"
N#ifdef    RTE_RTX_CONFIG_H
S#include  RTE_RTX_CONFIG_H
N#endif
N#endif
N 
N//-------- <<< Use Configuration Wizard in Context Menu >>> --------------------
N 
N// <h>System Configuration
N// =======================
N 
N//   <o>Global Dynamic Memory size [bytes] <0-1073741824:8>
N//   <i> Defines the combined global dynamic memory size.
N//   <i> Default: 4096
N#ifndef OS_DYNAMIC_MEM_SIZE
N#define OS_DYNAMIC_MEM_SIZE         4096
N#endif
N 
N//   <o>Kernel Tick Frequency [Hz] <1-1000000>
N//   <i> Defines base time unit for delays and timeouts.
N//   <i> Default: 1000 (1ms tick)
N#ifndef OS_TICK_FREQ
N#define OS_TICK_FREQ                1000
N#endif
N 
N//   <e>Round-Robin Thread switching
N//   <i> Enables Round-Robin Thread switching.
N#ifndef OS_ROBIN_ENABLE
N#define OS_ROBIN_ENABLE             1
N#endif
N 
N//     <o>Round-Robin Timeout <1-1000>
N//     <i> Defines how many ticks a thread will execute before a thread switch.
N//     <i> Default: 5
N#ifndef OS_ROBIN_TIMEOUT
N#define OS_ROBIN_TIMEOUT            5
N#endif
N 
N//   </e>
N 
N//   <o>ISR FIFO Queue 
N//      <4=>  4 entries    <8=>   8 entries   <12=>  12 entries   <16=>  16 entries
N//     <24=> 24 entries   <32=>  32 entries   <48=>  48 entries   <64=>  64 entries
N//     <96=> 96 entries  <128=> 128 entries  <196=> 196 entries  <256=> 256 entries
N//   <i> RTOS Functions called from ISR store requests to this buffer.
N//   <i> Default: 16 entries
N#ifndef OS_ISR_FIFO_QUEUE
N#define OS_ISR_FIFO_QUEUE           16
N#endif
N 
N//   <q>Object Memory usage counters
N//   <i> Enables object memory usage counters (requires RTX source variant).
N#ifndef OS_OBJ_MEM_USAGE
N#define OS_OBJ_MEM_USAGE            1
N#endif
N 
N// </h>
N 
N// <h>Thread Configuration
N// =======================
N 
N//   <e>Object specific Memory allocation
N//   <i> Enables object specific memory allocation.
N#ifndef OS_THREAD_OBJ_MEM
N#define OS_THREAD_OBJ_MEM           1
N#endif
N 
N//     <o>Number of user Threads <1-1000>
N//     <i> Defines maximum number of user threads that can be active at the same time.
N//     <i> Applies to user threads with system provided memory for control blocks.
N#ifndef OS_THREAD_NUM
N#define OS_THREAD_NUM               16
N#endif
N 
N//     <o>Number of user Threads with default Stack size <0-1000>
N//     <i> Defines maximum number of user threads with default stack size.
N//     <i> Applies to user threads with zero stack size specified.
N#ifndef OS_THREAD_DEF_STACK_NUM
N#define OS_THREAD_DEF_STACK_NUM     0
N#endif
N 
N//     <o>Total Stack size [bytes] for user Threads with user-provided Stack size <0-1073741824:8>
N//     <i> Defines the combined stack size for user threads with user-provided stack size.
N//     <i> Applies to user threads with user-provided stack size and system provided memory for stack.
N//     <i> Default: 0
N#ifndef OS_THREAD_USER_STACK_SIZE
N#define OS_THREAD_USER_STACK_SIZE   15360
N#endif
N 
N//   </e>
N 
N//   <o>Default Thread Stack size [bytes] <96-1073741824:8>
N//   <i> Defines stack size for threads with zero stack size specified.
N//   <i> Default: 256
N#ifndef OS_STACK_SIZE
N#define OS_STACK_SIZE               256
N#endif
N 
N//   <o>Idle Thread Stack size [bytes] <72-1073741824:8>
N//   <i> Defines stack size for Idle thread.
N//   <i> Default: 256
N#ifndef OS_IDLE_THREAD_STACK_SIZE
N#define OS_IDLE_THREAD_STACK_SIZE   256
N#endif
N 
N//   <o>Idle Thread TrustZone Module Identifier
N//   <i> Defines TrustZone Thread Context Management Identifier.
N//   <i> Applies only to cores with TrustZone technology.
N//   <i> Default: 0 (not used)
N#ifndef OS_IDLE_THREAD_TZ_MOD_ID
N#define OS_IDLE_THREAD_TZ_MOD_ID    0
N#endif
N 
N//   <q>Stack overrun checking
N//   <i> Enables stack overrun check at thread switch.
N//   <i> Enabling this option increases slightly the execution time of a thread switch.
N#ifndef OS_STACK_CHECK
N#define OS_STACK_CHECK              1
N#endif
N 
N//   <q>Stack usage watermark
N//   <i> Initializes thread stack with watermark pattern for analyzing stack usage.
N//   <i> Enabling this option increases significantly the execution time of thread creation.
N#ifndef OS_STACK_WATERMARK
N#define OS_STACK_WATERMARK          0
N#endif
N 
N//   <o>Processor mode for Thread execution 
N//     <0=> Unprivileged mode 
N//     <1=> Privileged mode
N//   <i> Default: Privileged mode
N#ifndef OS_PRIVILEGE_MODE
N#define OS_PRIVILEGE_MODE           1
N#endif
N 
N// </h>
N 
N// <h>Timer Configuration
N// ======================
N 
N//   <e>Object specific Memory allocation
N//   <i> Enables object specific memory allocation.
N#ifndef OS_TIMER_OBJ_MEM
N#define OS_TIMER_OBJ_MEM            0
N#endif
N 
N//     <o>Number of Timer objects <1-1000>
N//     <i> Defines maximum number of objects that can be active at the same time.
N//     <i> Applies to objects with system provided memory for control blocks.
N#ifndef OS_TIMER_NUM
N#define OS_TIMER_NUM                1
N#endif
N 
N//   </e>
N 
N//   <o>Timer Thread Priority
N//      <8=> Low
N//     <16=> Below Normal  <24=> Normal  <32=> Above Normal
N//     <40=> High
N//     <48=> Realtime
N//   <i> Defines priority for timer thread
N//   <i> Default: High
N#ifndef OS_TIMER_THREAD_PRIO
N#define OS_TIMER_THREAD_PRIO        24
N#endif
N 
N//   <o>Timer Thread Stack size [bytes] <0-1073741824:8>
N//   <i> Defines stack size for Timer thread.
N//   <i> May be set to 0 when timers are not used.
N//   <i> Default: 256
N#ifndef OS_TIMER_THREAD_STACK_SIZE
N#define OS_TIMER_THREAD_STACK_SIZE  1024
N#endif
N 
N//   <o>Timer Thread TrustZone Module Identifier
N//   <i> Defines TrustZone Thread Context Management Identifier.
N//   <i> Applies only to cores with TrustZone technology.
N//   <i> Default: 0 (not used)
N#ifndef OS_TIMER_THREAD_TZ_MOD_ID
N#define OS_TIMER_THREAD_TZ_MOD_ID   0
N#endif
N 
N//   <o>Timer Callback Queue entries <0-256>
N//   <i> Number of concurrent active timer callback functions.
N//   <i> May be set to 0 when timers are not used.
N//   <i> Default: 4
N#ifndef OS_TIMER_CB_QUEUE
N#define OS_TIMER_CB_QUEUE           4
N#endif
N 
N// </h>
N 
N// <h>Event Flags Configuration
N// ============================
N 
N//   <e>Object specific Memory allocation
N//   <i> Enables object specific memory allocation.
N#ifndef OS_EVFLAGS_OBJ_MEM
N#define OS_EVFLAGS_OBJ_MEM          0
N#endif
N 
N//     <o>Number of Event Flags objects <1-1000>
N//     <i> Defines maximum number of objects that can be active at the same time.
N//     <i> Applies to objects with system provided memory for control blocks.
N#ifndef OS_EVFLAGS_NUM
N#define OS_EVFLAGS_NUM              1
N#endif
N 
N//   </e>
N 
N// </h>
N 
N// <h>Mutex Configuration
N// ======================
N 
N//   <e>Object specific Memory allocation
N//   <i> Enables object specific memory allocation.
N#ifndef OS_MUTEX_OBJ_MEM
N#define OS_MUTEX_OBJ_MEM            0
N#endif
N 
N//     <o>Number of Mutex objects <1-1000>
N//     <i> Defines maximum number of objects that can be active at the same time.
N//     <i> Applies to objects with system provided memory for control blocks.
N#ifndef OS_MUTEX_NUM
N#define OS_MUTEX_NUM                1
N#endif
N 
N//   </e>
N 
N// </h>
N 
N// <h>Semaphore Configuration
N// ==========================
N 
N//   <e>Object specific Memory allocation
N//   <i> Enables object specific memory allocation.
N#ifndef OS_SEMAPHORE_OBJ_MEM
N#define OS_SEMAPHORE_OBJ_MEM        0
N#endif
N 
N//     <o>Number of Semaphore objects <1-1000>
N//     <i> Defines maximum number of objects that can be active at the same time.
N//     <i> Applies to objects with system provided memory for control blocks.
N#ifndef OS_SEMAPHORE_NUM
N#define OS_SEMAPHORE_NUM            1
N#endif
N 
N//   </e>
N 
N// </h>
N 
N// <h>Memory Pool Configuration
N// ============================
N 
N//   <e>Object specific Memory allocation
N//   <i> Enables object specific memory allocation.
N#ifndef OS_MEMPOOL_OBJ_MEM
N#define OS_MEMPOOL_OBJ_MEM          0
N#endif
N 
N//     <o>Number of Memory Pool objects <1-1000>
N//     <i> Defines maximum number of objects that can be active at the same time.
N//     <i> Applies to objects with system provided memory for control blocks.
N#ifndef OS_MEMPOOL_NUM
N#define OS_MEMPOOL_NUM              1
N#endif
N 
N//     <o>Data Storage Memory size [bytes] <0-1073741824:8>
N//     <i> Defines the combined data storage memory size.
N//     <i> Applies to objects with system provided memory for data storage.
N//     <i> Default: 0
N#ifndef OS_MEMPOOL_DATA_SIZE
N#define OS_MEMPOOL_DATA_SIZE        0
N#endif
N 
N//   </e>
N 
N// </h>
N 
N// <h>Message Queue Configuration
N// ==============================
N 
N//   <e>Object specific Memory allocation
N//   <i> Enables object specific memory allocation.
N#ifndef OS_MSGQUEUE_OBJ_MEM
N#define OS_MSGQUEUE_OBJ_MEM         0
N#endif
N 
N//     <o>Number of Message Queue objects <1-1000>
N//     <i> Defines maximum number of objects that can be active at the same time.
N//     <i> Applies to objects with system provided memory for control blocks.
N#ifndef OS_MSGQUEUE_NUM
N#define OS_MSGQUEUE_NUM             1
N#endif
N 
N//     <o>Data Storage Memory size [bytes] <0-1073741824:8>
N//     <i> Defines the combined data storage memory size.
N//     <i> Applies to objects with system provided memory for data storage.
N//     <i> Default: 0
N#ifndef OS_MSGQUEUE_DATA_SIZE
N#define OS_MSGQUEUE_DATA_SIZE       0
N#endif
N 
N//   </e>
N 
N// </h>
N 
N// <h>Event Recorder Configuration
N// ===============================
N 
N//   <e>Global Initialization
N//   <i> Initialize Event Recorder during 'osKernelInitialize'.
N#ifndef OS_EVR_INIT
N#define OS_EVR_INIT                 0
N#endif
N 
N//     <q>Start recording
N//     <i> Start event recording after initialization.
N#ifndef OS_EVR_START
N#define OS_EVR_START                1
N#endif
N 
N//     <h>Global Event Filter Setup
N//     <i> Initial event filter settings applied to all components.
N//       <o.0>Error events
N//       <o.1>API function call events
N//       <o.2>Operation events
N//       <o.3>Detailed operation events
N//     </h>
N#ifndef OS_EVR_LEVEL
N#define OS_EVR_LEVEL                0x00U
N#endif
N 
N//     <h>RTOS Event Filter Setup
N//     <i> Event filter settings for RTX components.
N//     <i> Only applicable if events for the respective component are generated.
N 
N//       <e.7>Memory Management
N//       <i> Filter enable settings for Memory Management events.
N//         <o.0>Error events
N//         <o.1>API function call events
N//         <o.2>Operation events
N//         <o.3>Detailed operation events
N//       </e>
N#ifndef OS_EVR_MEMORY_FILTER
N#define OS_EVR_MEMORY_FILTER        0x81U
N#endif
N 
N//       <e.7>Kernel
N//       <i> Filter enable settings for Kernel events.
N//         <o.0>Error events
N//         <o.1>API function call events
N//         <o.2>Operation events
N//         <o.3>Detailed operation events
N//       </e>
N#ifndef OS_EVR_KERNEL_FILTER
N#define OS_EVR_KERNEL_FILTER        0x81U
N#endif
N 
N//       <e.7>Thread
N//       <i> Filter enable settings for Thread events.
N//         <o.0>Error events
N//         <o.1>API function call events
N//         <o.2>Operation events
N//         <o.3>Detailed operation events
N//       </e>
N#ifndef OS_EVR_THREAD_FILTER
N#define OS_EVR_THREAD_FILTER        0x85U
N#endif
N 
N//       <e.7>Timer
N//       <i> Filter enable settings for Timer events.
N//         <o.0>Error events
N//         <o.1>API function call events
N//         <o.2>Operation events
N//         <o.3>Detailed operation events
N//       </e>
N#ifndef OS_EVR_TIMER_FILTER
N#define OS_EVR_TIMER_FILTER         0x81U
N#endif
N 
N//       <e.7>Event Flags
N//       <i> Filter enable settings for Event Flags events.
N//         <o.0>Error events
N//         <o.1>API function call events
N//         <o.2>Operation events
N//         <o.3>Detailed operation events
N//       </e>
N#ifndef OS_EVR_EVFLAGS_FILTER
N#define OS_EVR_EVFLAGS_FILTER       0x81U
N#endif
N 
N//       <e.7>Mutex
N//       <i> Filter enable settings for Mutex events.
N//         <o.0>Error events
N//         <o.1>API function call events
N//         <o.2>Operation events
N//         <o.3>Detailed operation events
N//       </e>
N#ifndef OS_EVR_MUTEX_FILTER
N#define OS_EVR_MUTEX_FILTER         0x81U
N#endif
N 
N//       <e.7>Semaphore
N//       <i> Filter enable settings for Semaphore events.
N//         <o.0>Error events
N//         <o.1>API function call events
N//         <o.2>Operation events
N//         <o.3>Detailed operation events
N//       </e>
N#ifndef OS_EVR_SEMAPHORE_FILTER
N#define OS_EVR_SEMAPHORE_FILTER     0x81U
N#endif
N 
N//       <e.7>Memory Pool
N//       <i> Filter enable settings for Memory Pool events.
N//         <o.0>Error events
N//         <o.1>API function call events
N//         <o.2>Operation events
N//         <o.3>Detailed operation events
N//       </e>
N#ifndef OS_EVR_MEMPOOL_FILTER
N#define OS_EVR_MEMPOOL_FILTER       0x81U
N#endif
N 
N//       <e.7>Message Queue
N//       <i> Filter enable settings for Message Queue events.
N//         <o.0>Error events
N//         <o.1>API function call events
N//         <o.2>Operation events
N//         <o.3>Detailed operation events
N//       </e>
N#ifndef OS_EVR_MSGQUEUE_FILTER
N#define OS_EVR_MSGQUEUE_FILTER      0x81U
N#endif
N 
N//     </h>
N 
N//   </e>
N 
N//   <h>RTOS Event Generation
N//   <i> Enables event generation for RTX components (requires RTX source variant).
N 
N//     <q>Memory Management
N//     <i> Enables Memory Management event generation.
N#ifndef OS_EVR_MEMORY
N#define OS_EVR_MEMORY               1
N#endif
N 
N//     <q>Kernel
N//     <i> Enables Kernel event generation.
N#ifndef OS_EVR_KERNEL
N#define OS_EVR_KERNEL               1
N#endif
N 
N//     <q>Thread
N//     <i> Enables Thread event generation.
N#ifndef OS_EVR_THREAD
N#define OS_EVR_THREAD               1
N#endif
N 
N//     <q>Timer
N//     <i> Enables Timer event generation.
N#ifndef OS_EVR_TIMER
N#define OS_EVR_TIMER                1
N#endif
N 
N//     <q>Event Flags
N//     <i> Enables Event Flags event generation.
N#ifndef OS_EVR_EVFLAGS
N#define OS_EVR_EVFLAGS              1
N#endif
N  
N//     <q>Mutex
N//     <i> Enables Mutex event generation.
N#ifndef OS_EVR_MUTEX
N#define OS_EVR_MUTEX                1
N#endif
N 
N//     <q>Semaphore
N//     <i> Enables Semaphore event generation.
N#ifndef OS_EVR_SEMAPHORE
N#define OS_EVR_SEMAPHORE            1
N#endif
N 
N//     <q>Memory Pool
N//     <i> Enables Memory Pool event generation.
N#ifndef OS_EVR_MEMPOOL
N#define OS_EVR_MEMPOOL              1
N#endif
N 
N//     <q>Message Queue
N//     <i> Enables Message Queue event generation.
N#ifndef OS_EVR_MSGQUEUE
N#define OS_EVR_MSGQUEUE             1
N#endif
N 
N//   </h>
N 
N// </h>
N 
N// Number of Threads which use standard C/C++ library libspace
N// (when thread specific memory allocation is not used).
N#if (OS_THREAD_OBJ_MEM == 0)
X#if (1 == 0)
S#define OS_THREAD_LIBSPACE_NUM      4
N#else
N#define OS_THREAD_LIBSPACE_NUM      OS_THREAD_NUM
N#endif
N 
N//------------- <<< end of configuration section >>> ---------------------------
N 
N#endif  // RTX_CONFIG_H_
L 33 "F:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\RTOS2\RTX\Include\rtx_def.h" 2
N
N#if (defined(OS_OBJ_MEM_USAGE) && (OS_OBJ_MEM_USAGE != 0))
X#if (1L && (1 != 0))
N  #define RTX_OBJ_MEM_USAGE
N#endif
N
N#if (defined(OS_STACK_CHECK) && (OS_STACK_CHECK != 0))
X#if (1L && (1 != 0))
N  #define RTX_STACK_CHECK
N#endif
N
N#ifdef  RTE_CMSIS_RTOS2_RTX5_ARMV8M_NS
S  #define DOMAIN_NS             1
N#endif
N
N#endif  // RTX_DEF_H_
L 33 "F:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\RTOS2\RTX\Include\rtx_os.h" 2
N 
N#ifdef  __cplusplus
Sextern "C"
S{
N#endif
N 
N 
N/// Kernel Information
N#define osRtxVersionAPI      20010003   ///< API version (2.1.3)
N#define osRtxVersionKernel   50050004   ///< Kernel version (5.5.4)
N#define osRtxKernelId     "RTX V5.5.4"  ///< Kernel identification string
N 
N 
N//  ==== Common definitions ====
N 
N/// Object Identifier definitions
N#define osRtxIdInvalid          0x00U
N#define osRtxIdThread           0xF1U
N#define osRtxIdTimer            0xF2U
N#define osRtxIdEventFlags       0xF3U
N#define osRtxIdMutex            0xF5U
N#define osRtxIdSemaphore        0xF6U
N#define osRtxIdMemoryPool       0xF7U
N#define osRtxIdMessage          0xF9U
N#define osRtxIdMessageQueue     0xFAU
N 
N/// Object Flags definitions
N#define osRtxFlagSystemObject   0x01U
N#define osRtxFlagSystemMemory   0x02U
N 
N 
N//  ==== Kernel definitions ====
N 
N/// Kernel State definitions
N#define osRtxKernelInactive             ((uint8_t)osKernelInactive)
N#define osRtxKernelReady                ((uint8_t)osKernelReady)
N#define osRtxKernelRunning              ((uint8_t)osKernelRunning)
N#define osRtxKernelLocked               ((uint8_t)osKernelLocked)
N#define osRtxKernelSuspended            ((uint8_t)osKernelSuspended)
N 
N 
N//  ==== Thread definitions ====
N 
N/// Thread State definitions (extending osThreadState)
N#define osRtxThreadStateMask            0x0FU
N 
N#define osRtxThreadInactive             ((uint8_t)osThreadInactive)
N#define osRtxThreadReady                ((uint8_t)osThreadReady)
N#define osRtxThreadRunning              ((uint8_t)osThreadRunning)
N#define osRtxThreadBlocked              ((uint8_t)osThreadBlocked)
N#define osRtxThreadTerminated           ((uint8_t)osThreadTerminated)
N 
N#define osRtxThreadWaitingDelay         ((uint8_t)(osRtxThreadBlocked | 0x10U))
N#define osRtxThreadWaitingJoin          ((uint8_t)(osRtxThreadBlocked | 0x20U))
N#define osRtxThreadWaitingThreadFlags   ((uint8_t)(osRtxThreadBlocked | 0x30U))
N#define osRtxThreadWaitingEventFlags    ((uint8_t)(osRtxThreadBlocked | 0x40U))
N#define osRtxThreadWaitingMutex         ((uint8_t)(osRtxThreadBlocked | 0x50U))
N#define osRtxThreadWaitingSemaphore     ((uint8_t)(osRtxThreadBlocked | 0x60U))
N#define osRtxThreadWaitingMemoryPool    ((uint8_t)(osRtxThreadBlocked | 0x70U))
N#define osRtxThreadWaitingMessageGet    ((uint8_t)(osRtxThreadBlocked | 0x80U))
N#define osRtxThreadWaitingMessagePut    ((uint8_t)(osRtxThreadBlocked | 0x90U))
N 
N/// Thread Flags definitions
N#define osRtxThreadFlagDefStack 0x10U   ///< Default Stack flag
N 
N/// Stack Marker definitions
N#define osRtxStackMagicWord     0xE25A2EA5U ///< Stack Magic Word (Stack Base)
N#define osRtxStackFillPattern   0xCCCCCCCCU ///< Stack Fill Pattern 
N 
N/// Thread Control Block
Ntypedef struct osRtxThread_s {
N  uint8_t                          id;  ///< Object Identifier
N  uint8_t                       state;  ///< Object State
N  uint8_t                       flags;  ///< Object Flags
N  uint8_t                        attr;  ///< Object Attributes
N  const char                    *name;  ///< Object Name
N  struct osRtxThread_s   *thread_next;  ///< Link pointer to next Thread in Object list
N  struct osRtxThread_s   *thread_prev;  ///< Link pointer to previous Thread in Object list
N  struct osRtxThread_s    *delay_next;  ///< Link pointer to next Thread in Delay list
N  struct osRtxThread_s    *delay_prev;  ///< Link pointer to previous Thread in Delay list
N  struct osRtxThread_s   *thread_join;  ///< Thread waiting to Join
N  uint32_t                      delay;  ///< Delay Time/Round Robin Time Tick
N  int8_t                     priority;  ///< Thread Priority
N  int8_t                priority_base;  ///< Base Priority
N  uint8_t                 stack_frame;  ///< Stack Frame (EXC_RETURN[7..0])
N  uint8_t               flags_options;  ///< Thread/Event Flags Options
N  uint32_t                 wait_flags;  ///< Waiting Thread/Event Flags
N  uint32_t               thread_flags;  ///< Thread Flags
N  struct osRtxMutex_s     *mutex_list;  ///< Link pointer to list of owned Mutexes
N  void                     *stack_mem;  ///< Stack Memory
N  uint32_t                 stack_size;  ///< Stack Size
N  uint32_t                         sp;  ///< Current Stack Pointer
N  uint32_t                thread_addr;  ///< Thread entry address
N  uint32_t                  tz_memory;  ///< TrustZone Memory Identifier
N#ifdef RTX_TF_M_EXTENSION
S  uint32_t                  tz_module;  ///< TrustZone Module Identifier
N#endif
N} osRtxThread_t;
N 
N 
N//  ==== Timer definitions ====
N 
N/// Timer State definitions
N#define osRtxTimerInactive      0x00U   ///< Timer Inactive
N#define osRtxTimerStopped       0x01U   ///< Timer Stopped
N#define osRtxTimerRunning       0x02U   ///< Timer Running
N 
N/// Timer Type definitions
N#define osRtxTimerPeriodic      ((uint8_t)osTimerPeriodic)
N 
N/// Timer Function Information
Ntypedef struct {
N  osTimerFunc_t                  func;  ///< Function Pointer
N  void                           *arg;  ///< Function Argument
N} osRtxTimerFinfo_t;
N 
N/// Timer Control Block
Ntypedef struct osRtxTimer_s {
N  uint8_t                          id;  ///< Object Identifier
N  uint8_t                       state;  ///< Object State
N  uint8_t                       flags;  ///< Object Flags
N  uint8_t                        type;  ///< Timer Type (Periodic/One-shot)
N  const char                    *name;  ///< Object Name
N  struct osRtxTimer_s           *prev;  ///< Pointer to previous active Timer
N  struct osRtxTimer_s           *next;  ///< Pointer to next active Timer
N  uint32_t                       tick;  ///< Timer current Tick
N  uint32_t                       load;  ///< Timer Load value
N  osRtxTimerFinfo_t             finfo;  ///< Timer Function Info
N} osRtxTimer_t;
N 
N 
N//  ==== Event Flags definitions ====
N 
N/// Event Flags Control Block
Ntypedef struct {
N  uint8_t                          id;  ///< Object Identifier
N  uint8_t              reserved_state;  ///< Object State (not used)
N  uint8_t                       flags;  ///< Object Flags
N  uint8_t                    reserved;
N  const char                    *name;  ///< Object Name
N  osRtxThread_t          *thread_list;  ///< Waiting Threads List
N  uint32_t                event_flags;  ///< Event Flags
N} osRtxEventFlags_t;
N 
N 
N//  ==== Mutex definitions ====
N 
N/// Mutex Control Block
Ntypedef struct osRtxMutex_s {
N  uint8_t                          id;  ///< Object Identifier
N  uint8_t              reserved_state;  ///< Object State (not used)
N  uint8_t                       flags;  ///< Object Flags
N  uint8_t                        attr;  ///< Object Attributes
N  const char                    *name;  ///< Object Name
N  osRtxThread_t          *thread_list;  ///< Waiting Threads List
N  osRtxThread_t         *owner_thread;  ///< Owner Thread
N  struct osRtxMutex_s     *owner_prev;  ///< Pointer to previous owned Mutex
N  struct osRtxMutex_s     *owner_next;  ///< Pointer to next owned Mutex
N  uint8_t                        lock;  ///< Lock counter
N  uint8_t                  padding[3];
N} osRtxMutex_t;
N 
N 
N//  ==== Semaphore definitions ====
N 
N/// Semaphore Control Block
Ntypedef struct {
N  uint8_t                          id;  ///< Object Identifier
N  uint8_t              reserved_state;  ///< Object State (not used)
N  uint8_t                       flags;  ///< Object Flags
N  uint8_t                    reserved;
N  const char                    *name;  ///< Object Name
N  osRtxThread_t          *thread_list;  ///< Waiting Threads List
N  uint16_t                     tokens;  ///< Current number of tokens
N  uint16_t                 max_tokens;  ///< Maximum number of tokens
N} osRtxSemaphore_t;
N 
N 
N//  ==== Memory Pool definitions ====
N 
N/// Memory Pool Information
Ntypedef struct {
N  uint32_t                 max_blocks;  ///< Maximum number of Blocks
N  uint32_t                used_blocks;  ///< Number of used Blocks
N  uint32_t                 block_size;  ///< Block Size
N  void                    *block_base;  ///< Block Memory Base Address
N  void                     *block_lim;  ///< Block Memory Limit Address
N  void                    *block_free;  ///< First free Block Address
N} osRtxMpInfo_t;
N 
N/// Memory Pool Control Block
Ntypedef struct {
N  uint8_t                          id;  ///< Object Identifier
N  uint8_t              reserved_state;  ///< Object State (not used)
N  uint8_t                       flags;  ///< Object Flags
N  uint8_t                    reserved;
N  const char                    *name;  ///< Object Name
N  osRtxThread_t          *thread_list;  ///< Waiting Threads List
N  osRtxMpInfo_t               mp_info;  ///< Memory Pool Info
N} osRtxMemoryPool_t;
N 
N 
N//  ==== Message Queue definitions ====
N 
N/// Message Control Block
Ntypedef struct osRtxMessage_s {
N  uint8_t                          id;  ///< Object Identifier
N  uint8_t              reserved_state;  ///< Object State (not used)
N  uint8_t                       flags;  ///< Object Flags
N  uint8_t                    priority;  ///< Message Priority
N  struct osRtxMessage_s         *prev;  ///< Pointer to previous Message
N  struct osRtxMessage_s         *next;  ///< Pointer to next Message
N} osRtxMessage_t;
N 
N/// Message Queue Control Block
Ntypedef struct {
N  uint8_t                          id;  ///< Object Identifier
N  uint8_t              reserved_state;  ///< Object State (not used)
N  uint8_t                       flags;  ///< Object Flags
N  uint8_t                    reserved;
N  const char                    *name;  ///< Object Name
N  osRtxThread_t          *thread_list;  ///< Waiting Threads List
N  osRtxMpInfo_t               mp_info;  ///< Memory Pool Info
N  uint32_t                   msg_size;  ///< Message Size
N  uint32_t                  msg_count;  ///< Number of queued Messages
N  osRtxMessage_t           *msg_first;  ///< Pointer to first Message
N  osRtxMessage_t            *msg_last;  ///< Pointer to last Message
N} osRtxMessageQueue_t;
N 
N 
N//  ==== Generic Object definitions ====
N 
N/// Generic Object Control Block
Ntypedef struct {
N  uint8_t                          id;  ///< Object Identifier
N  uint8_t                       state;  ///< Object State
N  uint8_t                       flags;  ///< Object Flags
N  uint8_t                    reserved;
N  const char                    *name;  ///< Object Name
N  osRtxThread_t          *thread_list;  ///< Threads List
N} osRtxObject_t;
N 
N 
N//  ==== OS Runtime Information definitions ====
N 
N/// OS Runtime Information structure
Ntypedef struct {
N  const char                   *os_id;  ///< OS Identification
N  uint32_t                    version;  ///< OS Version
N  struct {                              ///< Kernel Info
N    uint8_t                     state;  ///< State
N    volatile uint8_t          blocked;  ///< Blocked
N    uint8_t                    pendSV;  ///< Pending SV
N    uint8_t                  reserved;
N    uint32_t                     tick;  ///< Tick counter
N  } kernel;
N  int32_t                   tick_irqn;  ///< Tick Timer IRQ Number
N  struct {                              ///< Thread Info
N    struct {                            ///< Thread Run Info
N      osRtxThread_t             *curr;  ///< Current running Thread
N      osRtxThread_t             *next;  ///< Next Thread to Run
N    } run;
N    osRtxObject_t               ready;  ///< Ready List Object
N    osRtxThread_t               *idle;  ///< Idle Thread
N    osRtxThread_t         *delay_list;  ///< Delay List
N    osRtxThread_t          *wait_list;  ///< Wait List (no Timeout)
N    osRtxThread_t     *terminate_list;  ///< Terminate Thread List
N    uint32_t                 reserved;
N    struct {                            ///< Thread Round Robin Info
N      osRtxThread_t           *thread;  ///< Round Robin Thread
N      uint32_t                timeout;  ///< Round Robin Timeout
N    } robin;
N  } thread;
N  struct {                              ///< Timer Info
N    osRtxTimer_t                *list;  ///< Active Timer List
N    osRtxThread_t             *thread;  ///< Timer Thread
N    osRtxMessageQueue_t           *mq;  ///< Timer Message Queue
N    void                (*tick)(void);  ///< Timer Tick Function
N  } timer;
N  struct {                              ///< ISR Post Processing Queue
N    uint16_t                      max;  ///< Maximum Items
N    uint16_t                      cnt;  ///< Item Count
N    uint16_t                       in;  ///< Incoming Item Index
N    uint16_t                      out;  ///< Outgoing Item Index
N    void                       **data;  ///< Queue Data
N  } isr_queue;
N  struct {                                      ///< ISR Post Processing functions
N    void          (*thread)(osRtxThread_t*);    ///< Thread Post Processing function
N    void (*event_flags)(osRtxEventFlags_t*);    ///< Event Flags Post Processing function
N    void    (*semaphore)(osRtxSemaphore_t*);    ///< Semaphore Post Processing function
N    void (*memory_pool)(osRtxMemoryPool_t*);    ///< Memory Pool Post Processing function
N    void        (*message)(osRtxMessage_t*);    ///< Message Post Processing function
N  } post_process;
N  struct {                              ///< Memory Pools (Variable Block Size)
N    void                       *stack;  ///< Stack Memory
N    void                     *mp_data;  ///< Memory Pool Data Memory
N    void                     *mq_data;  ///< Message Queue Data Memory
N    void                      *common;  ///< Common Memory
N  } mem;
N  struct {                              ///< Memory Pools (Fixed Block Size)
N    osRtxMpInfo_t              *stack;  ///< Stack for Threads
N    osRtxMpInfo_t             *thread;  ///< Thread Control Blocks
N    osRtxMpInfo_t              *timer;  ///< Timer Control Blocks
N    osRtxMpInfo_t        *event_flags;  ///< Event Flags Control Blocks
N    osRtxMpInfo_t              *mutex;  ///< Mutex Control Blocks
N    osRtxMpInfo_t          *semaphore;  ///< Semaphore Control Blocks
N    osRtxMpInfo_t        *memory_pool;  ///< Memory Pool Control Blocks
N    osRtxMpInfo_t      *message_queue;  ///< Message Queue Control Blocks
N  } mpi;
N} osRtxInfo_t;
N 
Nextern osRtxInfo_t osRtxInfo;           ///< OS Runtime Information
N 
N/// OS Runtime Object Memory Usage structure
Ntypedef struct {
N  uint32_t cnt_alloc;                   ///< Counter for alloc
N  uint32_t cnt_free;                    ///< Counter for free
N  uint32_t max_used;                    ///< Maximum used
N} osRtxObjectMemUsage_t;
N 
N/// OS Runtime Object Memory Usage variables
Nextern osRtxObjectMemUsage_t osRtxThreadMemUsage;
Nextern osRtxObjectMemUsage_t osRtxTimerMemUsage;
Nextern osRtxObjectMemUsage_t osRtxEventFlagsMemUsage;
Nextern osRtxObjectMemUsage_t osRtxMutexMemUsage;
Nextern osRtxObjectMemUsage_t osRtxSemaphoreMemUsage;
Nextern osRtxObjectMemUsage_t osRtxMemoryPoolMemUsage;
Nextern osRtxObjectMemUsage_t osRtxMessageQueueMemUsage;
N 
N 
N//  ==== OS API definitions ====
N 
N// Object Limits definitions
N#define osRtxThreadFlagsLimit    31U    ///< number of Thread Flags available per thread
N#define osRtxEventFlagsLimit     31U    ///< number of Event Flags available per object
N#define osRtxMutexLockLimit      255U   ///< maximum number of recursive mutex locks
N#define osRtxSemaphoreTokenLimit 65535U ///< maximum number of tokens per semaphore
N 
N// Control Block sizes
N#define osRtxThreadCbSize        sizeof(osRtxThread_t)
N#define osRtxTimerCbSize         sizeof(osRtxTimer_t)
N#define osRtxEventFlagsCbSize    sizeof(osRtxEventFlags_t)
N#define osRtxMutexCbSize         sizeof(osRtxMutex_t)
N#define osRtxSemaphoreCbSize     sizeof(osRtxSemaphore_t)
N#define osRtxMemoryPoolCbSize    sizeof(osRtxMemoryPool_t)
N#define osRtxMessageQueueCbSize  sizeof(osRtxMessageQueue_t)
N 
N/// Memory size in bytes for Memory Pool storage.
N/// \param         block_count   maximum number of memory blocks in memory pool.
N/// \param         block_size    memory block size in bytes.
N#define osRtxMemoryPoolMemSize(block_count, block_size) \
N  (4*(block_count)*(((block_size)+3)/4))
X#define osRtxMemoryPoolMemSize(block_count, block_size)   (4*(block_count)*(((block_size)+3)/4))
N 
N/// Memory size in bytes for Message Queue storage.
N/// \param         msg_count     maximum number of messages in queue.
N/// \param         msg_size      maximum message size in bytes.
N#define osRtxMessageQueueMemSize(msg_count, msg_size) \
N  (4*(msg_count)*(3+(((msg_size)+3)/4)))
X#define osRtxMessageQueueMemSize(msg_count, msg_size)   (4*(msg_count)*(3+(((msg_size)+3)/4)))
N 
N 
N//  ==== OS External Functions ====
N 
N// OS Error Codes
N#define osRtxErrorStackUnderflow        1U  ///< \deprecated Superseded by \ref osRtxErrorStackOverflow.
N#define osRtxErrorStackOverflow         1U  ///< Stack overflow, i.e. stack pointer below its lower memory limit for descending stacks.
N#define osRtxErrorISRQueueOverflow      2U  ///< ISR Queue overflow detected when inserting object.
N#define osRtxErrorTimerQueueOverflow    3U  ///< User Timer Callback Queue overflow detected for timer.
N#define osRtxErrorClibSpace             4U  ///< Standard C/C++ library libspace not available: increase \c OS_THREAD_LIBSPACE_NUM.
N#define osRtxErrorClibMutex             5U  ///< Standard C/C++ library mutex initialization failed.
N 
N/// OS Error Callback function
Nextern uint32_t osRtxErrorNotify (uint32_t code, void *object_id);
Nextern uint32_t osRtxKernelErrorNotify (uint32_t code, void *object_id);
N 
N/// OS Idle Thread
Nextern void osRtxIdleThread (void *argument);
N 
N/// OS Exception handlers
Nextern void SVC_Handler     (void);
Nextern void PendSV_Handler  (void);
Nextern void SysTick_Handler (void);
N 
N/// OS Trusted Firmware M Extension
N#ifdef RTX_TF_M_EXTENSION
Sextern uint32_t osRtxTzGetModuleId (void);
N#endif
N 
N 
N//  ==== OS External Configuration ====
N 
N/// OS Configuration flags
N#define osRtxConfigPrivilegedMode   (1UL<<0)    ///< Threads in Privileged mode
N#define osRtxConfigStackCheck       (1UL<<1)    ///< Stack overrun checking
N#define osRtxConfigStackWatermark   (1UL<<2)    ///< Stack usage Watermark
N 
N/// OS Configuration structure
Ntypedef struct {
N  uint32_t                             flags;   ///< OS Configuration Flags
N  uint32_t                         tick_freq;   ///< Kernel Tick Frequency
N  uint32_t                     robin_timeout;   ///< Round Robin Timeout Tick
N  struct {                                      ///< ISR Post Processing Queue
N    void                              **data;   ///< Queue Data
N    uint16_t                             max;   ///< Maximum Items
N    uint16_t                         padding;
N  } isr_queue;
N  struct {                                      ///< Memory Pools (Variable Block Size)
N    void                         *stack_addr;   ///< Stack Memory Address
N    uint32_t                      stack_size;   ///< Stack Memory Size
N    void                       *mp_data_addr;   ///< Memory Pool Memory Address
N    uint32_t                    mp_data_size;   ///< Memory Pool Memory Size
N    void                       *mq_data_addr;   ///< Message Queue Data Memory Address
N    uint32_t                    mq_data_size;   ///< Message Queue Data Memory Size
N    void                        *common_addr;   ///< Common Memory Address
N    uint32_t                     common_size;   ///< Common Memory Size
N  } mem;
N  struct {                                      ///< Memory Pools (Fixed Block Size)
N    osRtxMpInfo_t                     *stack;   ///< Stack for Threads
N    osRtxMpInfo_t                    *thread;   ///< Thread Control Blocks
N    osRtxMpInfo_t                     *timer;   ///< Timer Control Blocks
N    osRtxMpInfo_t               *event_flags;   ///< Event Flags Control Blocks
N    osRtxMpInfo_t                     *mutex;   ///< Mutex Control Blocks
N    osRtxMpInfo_t                 *semaphore;   ///< Semaphore Control Blocks
N    osRtxMpInfo_t               *memory_pool;   ///< Memory Pool Control Blocks
N    osRtxMpInfo_t             *message_queue;   ///< Message Queue Control Blocks
N  } mpi;
N  uint32_t                 thread_stack_size;   ///< Default Thread Stack Size
N  const
N  osThreadAttr_t           *idle_thread_attr;   ///< Idle Thread Attributes
N  const
N  osThreadAttr_t          *timer_thread_attr;   ///< Timer Thread Attributes
N  void               (*timer_thread)(void *);   ///< Timer Thread Function
N  int32_t               (*timer_setup)(void);   ///< Timer Setup Function
N  const
N  osMessageQueueAttr_t        *timer_mq_attr;   ///< Timer Message Queue Attributes
N  uint32_t                     timer_mq_mcnt;   ///< Timer Message Queue maximum Messages
N} osRtxConfig_t;
N 
Nextern const osRtxConfig_t osRtxConfig;         ///< OS Configuration
N 
N 
N#ifdef  __cplusplus
S}
N#endif
N 
N#endif  // RTX_OS_H_
L 30 "RTE/CMSIS/RTX_Config.c" 2
N#include "power_manager.h"
L 1 "..\..\..\..\scpu\drivers\include\power_manager.h" 1
N/*
N * Kneron Power Manager driver
N *
N * Copyright (C) 2019 Kneron, Inc. All rights reserved.
N *
N */
N
N#ifndef __POWER_MANAGER_H__
N#define __POWER_MANAGER_H__
N
N#include "base.h"
L 1 "..\..\..\..\common\include\base.h" 1
N/**
N * @file      base.h
N * @brief     Basic utils & struct
N * @copyright (c) 2018 Kneron Inc. All right reserved.
N */
N
N#ifndef __BASE_H__
N#define __BASE_H__
N
N
N#define BIT0                            0x00000001
N#define BIT1                            0x00000002
N#define BIT2                            0x00000004
N#define BIT3                            0x00000008
N#define BIT4                            0x00000010
N#define BIT5                            0x00000020
N#define BIT6                            0x00000040
N#define BIT7                            0x00000080
N#define BIT8                            0x00000100
N#define BIT9                            0x00000200
N#define BIT10                           0x00000400
N#define BIT11                           0x00000800
N#define BIT12                           0x00001000
N#define BIT13                           0x00002000
N#define BIT14                           0x00004000
N#define BIT15                           0x00008000
N#define BIT16                           0x00010000
N#define BIT17                           0x00020000
N#define BIT18                           0x00040000
N#define BIT19                           0x00080000
N#define BIT20                           0x00100000
N#define BIT21                           0x00200000
N#define BIT22                           0x00400000
N#define BIT23                           0x00800000
N#define BIT24                           0x01000000
N#define BIT25                           0x02000000
N#define BIT26                           0x04000000
N#define BIT27                           0x08000000
N#define BIT28                           0x10000000
N#define BIT29                           0x20000000
N#define BIT30                           0x40000000
N#define BIT31                           0x80000000
N
N#ifndef BIT
N#define BIT(x)      (0x01U << (x))
N#endif
N
N#define divRoundDown(n,s)   ((n) / (s))
N#define divRoundUp(n,s)     ((n+s-1)/(s))
N
N#define ARRAY_SIZE(x) 		(sizeof(x) / sizeof((x)[0]))
N
N#define RoundUp(val, units) \
N		((((unsigned long)(val) + ((units) - 1)) / (units)) * (units))
X#define RoundUp(val, units) 		((((unsigned long)(val) + ((units) - 1)) / (units)) * (units))
N#define RoundDown(val, units) \
N		(((unsigned long)(val)/(units))*(units))
X#define RoundDown(val, units) 		(((unsigned long)(val)/(units))*(units))
N    
N#include "io.h"
L 1 "..\..\..\..\scpu\drivers\include\io.h" 1
N#ifndef IO_H
N#define IO_H
N
N
N#define readl(addr)             (*(volatile unsigned int *)(addr))
N#define writel(val, addr)       (*(volatile unsigned int *)(addr) = (val))
N
N#define readw(addr)             (*(volatile unsigned short *)(addr))
N#define writew(val, addr)       (*(volatile unsigned short *)(addr) = (val))
N
N#define readb(addr)             (*(volatile unsigned char *)(addr))
N#define writeb(val, addr)       (*(volatile unsigned char *)(addr) = (val))
N
N#define inl(p)                  readl(p)
N#define outl(v, p)              writel(v, p)
N
N#define inw(port)               readl(port)
N#define outw(port, val)         writel(val, port)
N
N#define inb(port)               readb(port)
N#define outb(port, val)         writeb(val, port)
N
N//#define inhw(port)            readw(port)
N//#define outhw(port, val)      writew(val, port)
N#define inhw(port)              readl(port)
N#define outhw(port, val)        writel(val, port)
N
N#define u32Lib_LeRead32(x)      *((volatile INT32U *)((INT8U * )x)) //bessel:add  (INT8U * )
N#define vLib_LeWrite32(x,y)     *(volatile INT32U *)((INT8U * )x)=(y)  //bessel:add  (INT8U * )
N
N#define masked_outw(port, val, mask)    outw(port, (inw(port) & ~mask) | (val & mask))
N
N#define GET_BIT(port, __bit) \
N    ((inw(port) & BIT##__bit) >> __bit)
X#define GET_BIT(port, __bit)     ((inw(port) & BIT##__bit) >> __bit)
N
N#define GET_BITS(port, __s_bit, __e_bit) \
N    ((inw(port) & (BIT##__e_bit | (BIT##__e_bit - BIT##__s_bit))) >> __s_bit)
X#define GET_BITS(port, __s_bit, __e_bit)     ((inw(port) & (BIT##__e_bit | (BIT##__e_bit - BIT##__s_bit))) >> __s_bit)
N
N#define SET_BIT(port, __bit) \
N    outw(port, BIT##__bit)
X#define SET_BIT(port, __bit)     outw(port, BIT##__bit)
N
N#define SET_MASKED_BIT(port, val, __bit) \
N    outw(port, (inw(port) & ~BIT##__bit) | ((val << __bit) & BIT##__bit))
X#define SET_MASKED_BIT(port, val, __bit)     outw(port, (inw(port) & ~BIT##__bit) | ((val << __bit) & BIT##__bit))
N
N#define SET_MASKED_BITS(port, val, __s_bit, __e_bit) \
N    outw(port, ((inw(port) & ~(BIT##__e_bit | (BIT##__e_bit - BIT##__s_bit))) | (val << __s_bit))); 
X#define SET_MASKED_BITS(port, val, __s_bit, __e_bit)     outw(port, ((inw(port) & ~(BIT##__e_bit | (BIT##__e_bit - BIT##__s_bit))) | (val << __s_bit))); 
N
N
N#endif // IO_H
L 59 "..\..\..\..\common\include\base.h" 2
N        
N#endif
N
N
L 12 "..\..\..\..\scpu\drivers\include\power_manager.h" 2
N
N/* SCU_REG_INT_EN & SCU_REG_INT_STS */
N#define SCU_INT_RTC_PERIODIC        BIT17
N#define SCU_INT_RTC_ALARM           BIT16
N#define SCU_INT_PLL_UPDATE          BIT8
N#define SCU_INT_FCS                 BIT6
N#define SCU_INT_BUSSPEED            BIT5
N#define SCU_INT_WAKEUP              BIT3
N#define SCU_INT_PWRBTN_RISE         BIT1
N#define SCU_INT_PWRBTN_FALL         BIT0
N
Nenum pm_device_id {
N    PM_DEVICE_NONE = 0,
N    PM_DEVICE_CAMERA1,
N    PM_DEVICE_CAMERA2,
N    PM_DEVICE_DISPLAY1,
N    PM_DEVICE_DISPLAY2,
N    PM_DEVICE_HOST_COM,
N    PM_DEVICE_OTA_UPDATE,
N    PM_DEVICE_NCPU_INFERENCE,
N    PM_DEVICE_UNUSED4,
N    PM_DEVICE_UNUSED5,
N    PM_DEVICE_UNUSED6,
N    PM_DEVICE_UNUSED7,
N    PM_DEVICE_UNUSED8,
N    PM_DEVICE_MAX,
N};
N
N/* Prototypes for callback functions */
Ntypedef int (*pm_call)(enum pm_device_id dev_id);
N
Nstruct pm_s {
N    pm_call     nap;
N    pm_call     wakeup_nap;
N    pm_call     deep_nap;
N    pm_call     wakeup_deep_nap;
N    pm_call     sleep;
N    pm_call     wakeup_sleep;
N    pm_call     deep_sleep;
N    pm_call     wakeup_deep_sleep;
N};
N
N/* PM APIs */
N__NO_RETURN void power_manager_cpu_idle(void);
X__declspec(noreturn) void power_manager_cpu_idle(void);
Nvoid power_manager_init(void);
Nvoid power_manager_error_notify(uint32_t code, void *object_id);
Nvoid power_manager_reset(void);
Nvoid power_manager_sleep(void);
Nvoid power_manager_deep_sleep(void);
Nvoid power_manager_shutdown(void);
N
N/* Registration APIs */
Nint power_manager_register(enum pm_device_id dev_id, struct pm_s *pm_p);
Nvoid power_manager_unregister(enum pm_device_id dev_id, struct pm_s *pm_p);
N
N#endif
L 31 "RTE/CMSIS/RTX_Config.c" 2
N#include "dbg.h"
L 1 "..\..\..\..\common\include\dbg.h" 1
N/**
N * @file      dbg.h
N * @brief     debug macro 
N * @copyright (c) 2018 Kneron Inc. All right reserved.
N */
N
N#ifndef __DBG_H__
N#define __DBG_H__
N
N#include <stdio.h>
L 1 "F:\Keil_v5\ARM\ARMCC\Bin\..\include\stdio.h" 1
N/* stdio.h: ANSI 'C' (X3J11 Oct 88) library header, section 4.9 */
N/* Copyright (C) Codemist Ltd., 1988-1993                       */
N/* Copyright 1991-1998 ARM Limited. All rights reserved.        */
N
N/*
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: sdouglas $
N */
N
N/*
N * stdio.h declares two types, several macros, and many functions for
N * performing input and output. For a discussion on Streams and Files
N * refer to sections 4.9.2 and 4.9.3 in the above ANSI draft, or to a
N * modern textbook on C.
N */
N
N#ifndef __stdio_h
N#define __stdio_h
N#define __ARMCLIB_VERSION 5060037
N
N/*
N * Depending on compiler version __int64 or __INT64_TYPE__ should be defined.
N */
N#ifndef __int64
N  #ifdef __INT64_TYPE__
S    #define __int64 __INT64_TYPE__
N  #endif
N  /* On some architectures neither of these may be defined - if so, fall
N     through and error out if used. */
N#endif
N
N
N#define _ARMABI __declspec(__nothrow)
N
N  #ifndef __STDIO_DECLS
N  #define __STDIO_DECLS
N
N    #undef __CLIBNS
N    #ifdef __cplusplus
S      namespace std {
S      #define __CLIBNS ::std::
S        extern "C" {
N    #else /* ndef __cplusplus */
N      #define __CLIBNS
N    #endif /* ndef __cplusplus */
N
N#if defined(__cplusplus) || !defined(__STRICT_ANSI__) || !defined(__size_t)
X#if 0L || !0L || !0L
N /* always defined in C++ and non-strict C for consistency of debug info */
N  #if __sizeof_ptr == 8
X  #if 4 == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
N  #else
N    typedef unsigned int size_t;   /* see <stddef.h> */
N  #endif
N  #if !defined(__cplusplus) && defined(__STRICT_ANSI__)
X  #if !0L && 0L
S    #define __size_t 1
N  #endif
N#endif
N
N#undef NULL
N#define NULL 0                   /* see <stddef.h> */
N
N/* ANSI forbids va_list to be defined here */
N/* keep in step with <stdarg.h> and <wchar.h> */
N#if !defined(__va_list) && (defined(__cplusplus) || !defined(__STRICT_ANSI__) || !defined(__va_list_defined))
X#if !0L && (0L || !0L || !0L)
N/* always defined in C++ and non-strict C for consistency of debug info */
N  #ifdef __clang__
S    typedef __builtin_va_list __va_list;
N  #else
N    typedef struct __va_list __va_list;
N  #endif
N  #if !defined(__cplusplus) && defined(__STRICT_ANSI__)
X  #if !0L && 0L
S    #define __va_list_defined 1
N  #endif
N#endif
N
N   /*
N    * If the compiler supports signalling nans as per N965 then it
N    * will define __SUPPORT_SNAN__, in which case a user may define
N    * _WANT_SNAN in order to obtain compliant versions of the printf
N    * and scanf families of functions
N    */
N#if defined(__SUPPORT_SNAN__) && defined(_WANT_SNAN)
X#if 0L && 0L
S#pragma import(__use_snan)
N#endif
N
Ntypedef struct __fpos_t_struct {
N    unsigned __int64 __pos;
N    /*
N     * this structure is equivalent to an mbstate_t, but we're not
N     * allowed to actually define the type name `mbstate_t' within
N     * stdio.h
N     */
N    struct {
N        unsigned int __state1, __state2;
N    } __mbstate;
N} fpos_t;
N   /*
N    * fpos_t is an object capable of recording all information needed to
N    * specify uniquely every position within a file.
N    */
N
N#define _SYS_OPEN 16
N   /* _SYS_OPEN defines a limit on the number of open files that is imposed
N    * by this C library
N    */
N
Ntypedef struct __FILE FILE;
N   /*
N    * FILE is an object capable of recording all information needed to control
N    * a stream, such as its file position indicator, a pointer to its
N    * associated buffer, an error indicator that records whether a read/write
N    * error has occurred and an end-of-file indicator that records whether the
N    * end-of-file has been reached.
N    * Its structure is not made known to library clients.
N    */
N
N#if defined(__STRICT_ANSI__) && !__FILE_INCOMPLETE
X#if 0L && !__FILE_INCOMPLETE
Sstruct __FILE {
S    union {
S        long __FILE_alignment;
S#ifdef __TARGET_ARCH_AARCH64
S        char __FILE_size[136];
S#else /* __TARGET_ARCH_AARCH64 */
S        char __FILE_size[84];
S#endif /* __TARGET_ARCH_AARCH64 */
S    } __FILE_opaque;
S};
S    /*
S     * FILE must be an object type (C99 - 7.19.1) and an object type fully
S     * describes an object [including its static size] (C99 - 6.2.5).
S     * This definition is a placeholder which matches the struct __FILE in
S     * size and alignment as used internally by libc.
S     */
N#endif
N
N
Nextern FILE __stdin, __stdout, __stderr;
Nextern FILE *__aeabi_stdin, *__aeabi_stdout, *__aeabi_stderr;
N
N#if _AEABI_PORTABILITY_LEVEL != 0 || (!defined _AEABI_PORTABILITY_LEVEL && __DEFAULT_AEABI_PORTABILITY_LEVEL != 0)
X#if _AEABI_PORTABILITY_LEVEL != 0 || (!0L && __DEFAULT_AEABI_PORTABILITY_LEVEL != 0)
S#define stdin  (__CLIBNS __aeabi_stdin)
S   /* pointer to a FILE object associated with standard input stream */
S#define stdout (__CLIBNS __aeabi_stdout)
S   /* pointer to a FILE object associated with standard output stream */
S#define stderr (__CLIBNS __aeabi_stderr)
S   /* pointer to a FILE object associated with standard error stream */
Sextern const int __aeabi_IOFBF;
S#define _IOFBF (__CLIBNS __aeabi_IOFBF)
Sextern const int __aeabi_IONBF;
S#define _IONBF (__CLIBNS __aeabi_IONBF)
Sextern const int __aeabi_IOLBF;
S#define _IOLBF (__CLIBNS __aeabi_IOLBF)
Sextern const int __aeabi_BUFSIZ;
S#define BUFSIZ (__CLIBNS __aeabi_BUFSIZ)
Sextern const int __aeabi_FOPEN_MAX;
S#define FOPEN_MAX (__CLIBNS __aeabi_FOPEN_MAX)
Sextern const int __aeabi_TMP_MAX;
S#define TMP_MAX (__CLIBNS __aeabi_TMP_MAX)
Sextern const int __aeabi_FILENAME_MAX;
S#define FILENAME_MAX (__CLIBNS __aeabi_FILENAME_MAX)
Sextern const int __aeabi_L_tmpnam;
S#define L_tmpnam (__CLIBNS __aeabi_L_tmpnam)
N#else
N#define stdin  (&__CLIBNS __stdin)
N   /* pointer to a FILE object associated with standard input stream */
N#define stdout (&__CLIBNS __stdout)
N   /* pointer to a FILE object associated with standard output stream */
N#define stderr (&__CLIBNS __stderr)
N   /* pointer to a FILE object associated with standard error stream */
N
N#define _IOFBF           0x100 /* fully buffered IO */
N#define _IOLBF           0x200 /* line buffered IO */
N#define _IONBF           0x400 /* unbuffered IO */
N
N    /* Various default file IO buffer sizes */
N#define BUFSIZ       (512)  /* system buffer size (as used by setbuf) */
N
N#define FOPEN_MAX _SYS_OPEN
N   /*
N    * an integral constant expression that is the minimum number of files that
N    * this implementation guarantees can be open simultaneously.
N    */
N
N#define FILENAME_MAX 256
N   /*
N    * an integral constant expression that is the size of an array of char
N    * large enough to hold the longest filename string
N    */
N#define L_tmpnam FILENAME_MAX
N   /*
N    * an integral constant expression that is the size of an array of char
N    * large enough to hold a temporary file name string generated by the
N    * tmpnam function.
N    */
N#define TMP_MAX 256
N   /*
N    * an integral constant expression that is the minimum number of unique
N    * file names that shall be generated by the tmpnam function.
N    */
N
N#endif
N
N#define EOF      (-1)
N   /*
N    * negative integral constant, indicates end-of-file, that is, no more input
N    * from a stream.
N    */
N
N#define SEEK_SET 0 /* start of stream (see fseek) */
N#define SEEK_CUR 1 /* current position in stream (see fseek) */
N#define SEEK_END 2 /* end of stream (see fseek) */
N
N    /*
N     * _IOBIN is the flag passed to _sys_write to denote a binary
N     * file.
N     */
N#define _IOBIN            0x04     /* binary stream */
N
N#define __STDIN_BUFSIZ  (64)  /* default stdin buffer size */
N#define __STDOUT_BUFSIZ (64)  /* default stdout buffer size */
N#define __STDERR_BUFSIZ (16)  /* default stderr buffer size */
N
Nextern _ARMABI int remove(const char * /*filename*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int remove(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * causes the file whose name is the string pointed to by filename to be
N    * removed. Subsequent attempts to open the file will fail, unless it is
N    * created anew. If the file is open, the behaviour of the remove function
N    * is implementation-defined.
N    * Returns: zero if the operation succeeds, nonzero if it fails.
N    */
Nextern _ARMABI int rename(const char * /*old*/, const char * /*new*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int rename(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * causes the file whose name is the string pointed to by old to be
N    * henceforth known by the name given by the string pointed to by new. The
N    * file named old is effectively removed. If a file named by the string
N    * pointed to by new exists prior to the call of the rename function, the
N    * behaviour is implementation-defined.
N    * Returns: zero if the operation succeeds, nonzero if it fails, in which
N    *          case if the file existed previously it is still known by its
N    *          original name.
N    */
Nextern _ARMABI FILE *tmpfile(void);
Xextern __declspec(__nothrow) FILE *tmpfile(void);
N   /*
N    * creates a temporary binary file that will be automatically removed when
N    * it is closed or at program termination. The file is opened for update.
N    * Returns: a pointer to the stream of the file that it created. If the file
N    *          cannot be created, a null pointer is returned.
N    */
Nextern _ARMABI char *tmpnam(char * /*s*/);
Xextern __declspec(__nothrow) char *tmpnam(char *  );
N   /*
N    * generates a string that is not the same as the name of an existing file.
N    * The tmpnam function generates a different string each time it is called,
N    * up to TMP_MAX times. If it is called more than TMP_MAX times, the
N    * behaviour is implementation-defined.
N    * Returns: If the argument is a null pointer, the tmpnam function leaves
N    *          its result in an internal static object and returns a pointer to
N    *          that object. Subsequent calls to the tmpnam function may modify
N    *          the same object. if the argument is not a null pointer, it is
N    *          assumed to point to an array of at least L_tmpnam characters;
N    *          the tmpnam function writes its result in that array and returns
N    *          the argument as its value.
N    */
N
Nextern _ARMABI int fclose(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int fclose(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * causes the stream pointed to by stream to be flushed and the associated
N    * file to be closed. Any unwritten buffered data for the stream are
N    * delivered to the host environment to be written to the file; any unread
N    * buffered data are discarded. The stream is disassociated from the file.
N    * If the associated buffer was automatically allocated, it is deallocated.
N    * Returns: zero if the stream was succesfully closed, or nonzero if any
N    *          errors were detected or if the stream was already closed.
N    */
Nextern _ARMABI int fflush(FILE * /*stream*/);
Xextern __declspec(__nothrow) int fflush(FILE *  );
N   /*
N    * If the stream points to an output or update stream in which the most
N    * recent operation was output, the fflush function causes any unwritten
N    * data for that stream to be delivered to the host environment to be
N    * written to the file. If the stream points to an input or update stream,
N    * the fflush function undoes the effect of any preceding ungetc operation
N    * on the stream.
N    * Returns: nonzero if a write error occurs.
N    */
Nextern _ARMABI FILE *fopen(const char * __restrict /*filename*/,
Xextern __declspec(__nothrow) FILE *fopen(const char * __restrict  ,
N                           const char * __restrict /*mode*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * opens the file whose name is the string pointed to by filename, and
N    * associates a stream with it.
N    * The argument mode points to a string beginning with one of the following
N    * sequences:
N    * "r"         open text file for reading
N    * "w"         create text file for writing, or truncate to zero length
N    * "a"         append; open text file or create for writing at eof
N    * "rb"        open binary file for reading
N    * "wb"        create binary file for writing, or truncate to zero length
N    * "ab"        append; open binary file or create for writing at eof
N    * "r+"        open text file for update (reading and writing)
N    * "w+"        create text file for update, or truncate to zero length
N    * "a+"        append; open text file or create for update, writing at eof
N    * "r+b"/"rb+" open binary file for update (reading and writing)
N    * "w+b"/"wb+" create binary file for update, or truncate to zero length
N    * "a+b"/"ab+" append; open binary file or create for update, writing at eof
N    *
N    * Opening a file with read mode ('r' as the first character in the mode
N    * argument) fails if the file does not exist or cannot be read.
N    * Opening a file with append mode ('a' as the first character in the mode
N    * argument) causes all subsequent writes to be forced to the current end of
N    * file, regardless of intervening calls to the fseek function. In some
N    * implementations, opening a binary file with append mode ('b' as the
N    * second or third character in the mode argument) may initially position
N    * the file position indicator beyond the last data written, because of the
N    * NUL padding.
N    * When a file is opened with update mode ('+' as the second or third
N    * character in the mode argument), both input and output may be performed
N    * on the associated stream. However, output may not be directly followed
N    * by input without an intervening call to the fflush fuction or to a file
N    * positioning function (fseek, fsetpos, or rewind), and input be not be
N    * directly followed by output without an intervening call to the fflush
N    * fuction or to a file positioning function, unless the input operation
N    * encounters end-of-file. Opening a file with update mode may open or
N    * create a binary stream in some implementations. When opened, a stream
N    * is fully buffered if and only if it does not refer to an interactive
N    * device. The error and end-of-file indicators for the stream are
N    * cleared.
N    * Returns: a pointer to the object controlling the stream. If the open
N    *          operation fails, fopen returns a null pointer.
N    */
Nextern _ARMABI FILE *freopen(const char * __restrict /*filename*/,
Xextern __declspec(__nothrow) FILE *freopen(const char * __restrict  ,
N                    const char * __restrict /*mode*/,
N                    FILE * __restrict /*stream*/) __attribute__((__nonnull__(2,3)));
N   /*
N    * opens the file whose name is the string pointed to by filename and
N    * associates the stream pointed to by stream with it. The mode argument is
N    * used just as in the fopen function.
N    * The freopen function first attempts to close any file that is associated
N    * with the specified stream. Failure to close the file successfully is
N    * ignored. The error and end-of-file indicators for the stream are cleared.
N    * Returns: a null pointer if the operation fails. Otherwise, freopen
N    *          returns the value of the stream.
N    */
Nextern _ARMABI void setbuf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) void setbuf(FILE * __restrict  ,
N                    char * __restrict /*buf*/) __attribute__((__nonnull__(1)));
N   /*
N    * Except that it returns no value, the setbuf function is equivalent to the
N    * setvbuf function invoked with the values _IOFBF for mode and BUFSIZ for
N    * size, or (if buf is a null pointer), with the value _IONBF for mode.
N    * Returns: no value.
N    */
Nextern _ARMABI int setvbuf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int setvbuf(FILE * __restrict  ,
N                   char * __restrict /*buf*/,
N                   int /*mode*/, size_t /*size*/) __attribute__((__nonnull__(1)));
N   /*
N    * may be used after the stream pointed to by stream has been associated
N    * with an open file but before it is read or written. The argument mode
N    * determines how stream will be buffered, as follows: _IOFBF causes
N    * input/output to be fully buffered; _IOLBF causes output to be line
N    * buffered (the buffer will be flushed when a new-line character is
N    * written, when the buffer is full, or when input is requested); _IONBF
N    * causes input/output to be completely unbuffered. If buf is not the null
N    * pointer, the array it points to may be used instead of an automatically
N    * allocated buffer (the buffer must have a lifetime at least as great as
N    * the open stream, so the stream should be closed before a buffer that has
N    * automatic storage duration is deallocated upon block exit). The argument
N    * size specifies the size of the array. The contents of the array at any
N    * time are indeterminate.
N    * Returns: zero on success, or nonzero if an invalid value is given for
N    *          mode or size, or if the request cannot be honoured.
N    */
N#pragma __printf_args
Nextern _ARMABI int fprintf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int fprintf(FILE * __restrict  ,
N                    const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * writes output to the stream pointed to by stream, under control of the
N    * string pointed to by format that specifies how subsequent arguments are
N    * converted for output. If there are insufficient arguments for the format,
N    * the behaviour is undefined. If the format is exhausted while arguments
N    * remain, the excess arguments are evaluated but otherwise ignored. The
N    * fprintf function returns when the end of the format string is reached.
N    * The format shall be a multibyte character sequence, beginning and ending
N    * in its initial shift state. The format is composed of zero or more
N    * directives: ordinary multibyte characters (not %), which are copied
N    * unchanged to the output stream; and conversion specifiers, each of which
N    * results in fetching zero or more subsequent arguments. Each conversion
N    * specification is introduced by the character %. For a description of the
N    * available conversion specifiers refer to section 4.9.6.1 in the ANSI
N    * draft mentioned at the start of this file or to any modern textbook on C.
N    * The minimum value for the maximum number of characters producable by any
N    * single conversion is at least 509.
N    * Returns: the number of characters transmitted, or a negative value if an
N    *          output error occurred.
N    */
N#pragma __printf_args
Nextern _ARMABI int _fprintf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int _fprintf(FILE * __restrict  ,
N                     const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fprintf, but does not support floating-point formats.
N    * You can use instead of fprintf to improve code size.
N    * Returns: as fprintf.
N    */
N#pragma __printf_args
Nextern _ARMABI int printf(const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int printf(const char * __restrict  , ...) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to fprintf with the argument stdout interposed before the
N    * arguments to printf.
N    * Returns: the number of characters transmitted, or a negative value if an
N    *          output error occurred.
N    */
N#pragma __printf_args
Nextern _ARMABI int _printf(const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _printf(const char * __restrict  , ...) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to printf, but does not support floating-point formats.
N    * You can use instead of printf to improve code size.
N    * Returns: as printf.
N    */
N#pragma __printf_args
Nextern _ARMABI int sprintf(char * __restrict /*s*/, const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int sprintf(char * __restrict  , const char * __restrict  , ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fprintf, except that the argument s specifies an array
N    * into which the generated output is to be written, rather than to a
N    * stream. A null character is written at the end of the characters written;
N    * it is not counted as part of the returned sum.
N    * Returns: the number of characters written to the array, not counting the
N    *          terminating null character.
N    */
N#pragma __printf_args
Nextern _ARMABI int _sprintf(char * __restrict /*s*/, const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int _sprintf(char * __restrict  , const char * __restrict  , ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to sprintf, but does not support floating-point formats.
N    * You can use instead of sprintf to improve code size.
N    * Returns: as sprintf.
N    */
N
N#pragma __printf_args
Nextern _ARMABI int __ARM_snprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int __ARM_snprintf(char * __restrict  , size_t  ,
N                     const char * __restrict /*format*/, ...) __attribute__((__nonnull__(3)));
N
N#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X#if !0L || (1L && 199901L <= 199901L) || (0L && 201103L <= __cplusplus)
N#pragma __printf_args
Nextern _ARMABI int snprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int snprintf(char * __restrict  , size_t  ,
N                     const char * __restrict /*format*/, ...) __attribute__((__nonnull__(3)));
N   /*
N    * is equivalent to fprintf, except that the argument s specifies an array
N    * into which the generated output is to be written, rather than to a
N    * stream. The argument n specifies the size of the output array, so as to
N    * avoid overflowing the buffer.
N    * A null character is written at the end of the characters written, even
N    * if the formatting was not completed; it is not counted as part of the
N    * returned sum. At most n characters of the output buffer are used,
N    * _including_ the null character.
N    * Returns: the number of characters that would have been written to the
N    *          array, not counting the terminating null character, if the
N    *          array had been big enough. So if the return is >=0 and <n, then
N    *          the entire string was successfully formatted; if the return is
N    *          >=n, the string was truncated (but there is still a null char
N    *          at the end of what was written); if the return is <0, there was
N    *          an error.
N    */
N#endif
N#pragma __printf_args
Nextern _ARMABI int _snprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int _snprintf(char * __restrict  , size_t  ,
N                      const char * __restrict /*format*/, ...) __attribute__((__nonnull__(3)));
N   /*
N    * is equivalent to snprintf, but does not support floating-point formats.
N    * You can use instead of snprintf to improve code size.
N    * Returns: as snprintf.
N    */
N#pragma __scanf_args
Nextern _ARMABI int fscanf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int fscanf(FILE * __restrict  ,
N                    const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * reads input from the stream pointed to by stream, under control of the
N    * string pointed to by format that specifies the admissible input sequences
N    * and how thay are to be converted for assignment, using subsequent
N    * arguments as pointers to the objects to receive the converted input. If
N    * there are insufficient arguments for the format, the behaviour is
N    * undefined. If the format is exhausted while arguments remain, the excess
N    * arguments are evaluated but otherwise ignored.
N    * The format is composed of zero or more directives: one or more
N    * white-space characters; an ordinary character (not %); or a conversion
N    * specification. Each conversion specification is introduced by the
N    * character %. For a description of the available conversion specifiers
N    * refer to section 4.9.6.2 in the ANSI draft mentioned at the start of this
N    * file, or to any modern textbook on C.
N    * If end-of-file is encountered during input, conversion is terminated. If
N    * end-of-file occurs before any characters matching the current directive
N    * have been read (other than leading white space, where permitted),
N    * execution of the current directive terminates with an input failure;
N    * otherwise, unless execution of the current directive is terminated with a
N    * matching failure, execution of the following directive (if any) is
N    * terminated with an input failure.
N    * If conversions terminates on a conflicting input character, the offending
N    * input character is left unread in the input strem. Trailing white space
N    * (including new-line characters) is left unread unless matched by a
N    * directive. The success of literal matches and suppressed asignments is
N    * not directly determinable other than via the %n directive.
N    * Returns: the value of the macro EOF if an input failure occurs before any
N    *          conversion. Otherwise, the fscanf function returns the number of
N    *          input items assigned, which can be fewer than provided for, or
N    *          even zero, in the event of an early conflict between an input
N    *          character and the format.
N    */
N#pragma __scanf_args
Nextern _ARMABI int _fscanf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int _fscanf(FILE * __restrict  ,
N                     const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fscanf, but does not support floating-point formats.
N    * You can use instead of fscanf to improve code size.
N    * Returns: as fscanf.
N    */
N#pragma __scanf_args
Nextern _ARMABI int scanf(const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int scanf(const char * __restrict  , ...) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to fscanf with the argument stdin interposed before the
N    * arguments to scanf.
N    * Returns: the value of the macro EOF if an input failure occurs before any
N    *          conversion. Otherwise, the scanf function returns the number of
N    *          input items assigned, which can be fewer than provided for, or
N    *          even zero, in the event of an early matching failure.
N    */
N#pragma __scanf_args
Nextern _ARMABI int _scanf(const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _scanf(const char * __restrict  , ...) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to scanf, but does not support floating-point formats.
N    * You can use instead of scanf to improve code size.
N    * Returns: as scanf.
N    */
N#pragma __scanf_args
Nextern _ARMABI int sscanf(const char * __restrict /*s*/,
Xextern __declspec(__nothrow) int sscanf(const char * __restrict  ,
N                    const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fscanf except that the argument s specifies a string
N    * from which the input is to be obtained, rather than from a stream.
N    * Reaching the end of the string is equivalent to encountering end-of-file
N    * for the fscanf function.
N    * Returns: the value of the macro EOF if an input failure occurs before any
N    *          conversion. Otherwise, the scanf function returns the number of
N    *          input items assigned, which can be fewer than provided for, or
N    *          even zero, in the event of an early matching failure.
N    */
N#pragma __scanf_args
Nextern _ARMABI int _sscanf(const char * __restrict /*s*/,
Xextern __declspec(__nothrow) int _sscanf(const char * __restrict  ,
N                     const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to sscanf, but does not support floating-point formats.
N    * You can use instead of sscanf to improve code size.
N    * Returns: as sscanf.
N    */
N#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X#if !0L || (1L && 199901L <= 199901L) || (0L && 201103L <= __cplusplus)
N/* C99 additions */
Nextern _ARMABI int vfscanf(FILE * __restrict /*stream*/, const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int vfscanf(FILE * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI int vscanf(const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int vscanf(const char * __restrict  , __va_list) __attribute__((__nonnull__(1)));
Nextern _ARMABI int vsscanf(const char * __restrict /*s*/, const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int vsscanf(const char * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
N#endif
Nextern _ARMABI int _vfscanf(FILE * __restrict /*stream*/, const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int _vfscanf(FILE * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI int _vscanf(const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _vscanf(const char * __restrict  , __va_list) __attribute__((__nonnull__(1)));
Nextern _ARMABI int _vsscanf(const char * __restrict /*s*/, const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int _vsscanf(const char * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI int __ARM_vsscanf(const char * __restrict /*s*/, const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int __ARM_vsscanf(const char * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
N
Nextern _ARMABI int vprintf(const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int vprintf(const char * __restrict  , __va_list  ) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to printf, with the variable argument list replaced by arg,
N    * which has been initialised by the va_start macro (and possibly subsequent
N    * va_arg calls). The vprintf function does not invoke the va_end function.
N    * Returns: the number of characters transmitted, or a negative value if an
N    *          output error occurred.
N    */
Nextern _ARMABI int _vprintf(const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _vprintf(const char * __restrict  , __va_list  ) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to vprintf, but does not support floating-point formats.
N    * You can use instead of vprintf to improve code size.
N    * Returns: as vprintf.
N    */
Nextern _ARMABI int vfprintf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int vfprintf(FILE * __restrict  ,
N                    const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fprintf, with the variable argument list replaced by
N    * arg, which has been initialised by the va_start macro (and possibly
N    * subsequent va_arg calls). The vfprintf function does not invoke the
N    * va_end function.
N    * Returns: the number of characters transmitted, or a negative value if an
N    *          output error occurred.
N    */
Nextern _ARMABI int vsprintf(char * __restrict /*s*/,
Xextern __declspec(__nothrow) int vsprintf(char * __restrict  ,
N                     const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to sprintf, with the variable argument list replaced by
N    * arg, which has been initialised by the va_start macro (and possibly
N    * subsequent va_arg calls). The vsprintf function does not invoke the
N    * va_end function.
N    * Returns: the number of characters written in the array, not counting the
N    *          terminating null character.
N    */
Nextern _ARMABI int __ARM_vsnprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int __ARM_vsnprintf(char * __restrict  , size_t  ,
N                     const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(3)));
N#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X#if !0L || (1L && 199901L <= 199901L) || (0L && 201103L <= __cplusplus)
Nextern _ARMABI int vsnprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int vsnprintf(char * __restrict  , size_t  ,
N                     const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(3)));
N   /*
N    * is equivalent to snprintf, with the variable argument list replaced by
N    * arg, which has been initialised by the va_start macro (and possibly
N    * subsequent va_arg calls). The vsprintf function does not invoke the
N    * va_end function.
N    * Returns: the number of characters that would have been written in the
N    *          array, not counting the terminating null character. As
N    *          snprintf.
N    */
N#endif
Nextern _ARMABI int _vsprintf(char * __restrict /*s*/,
Xextern __declspec(__nothrow) int _vsprintf(char * __restrict  ,
N                      const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to vsprintf, but does not support floating-point formats.
N    * You can use instead of vsprintf to improve code size.
N    * Returns: as vsprintf.
N    */
Nextern _ARMABI int _vfprintf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int _vfprintf(FILE * __restrict  ,
N                     const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to vfprintf, but does not support floating-point formats.
N    * You can use instead of vfprintf to improve code size.
N    * Returns: as vfprintf.
N    */
Nextern _ARMABI int _vsnprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int _vsnprintf(char * __restrict  , size_t  ,
N                      const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(3)));
N   /*
N    * is equivalent to vsnprintf, but does not support floating-point formats.
N    * You can use instead of vsnprintf to improve code size.
N    * Returns: as vsnprintf.
N    */
N#if !defined(__STRICT_ANSI__)
X#if !0L
N#pragma __printf_args
Nextern _ARMABI int asprintf(char ** /*strp*/, const char * __restrict /*format*/, ...) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int asprintf(char **  , const char * __restrict  , ...) __attribute__((__nonnull__(2)));
Nextern _ARMABI int vasprintf(char ** /*strp*/, const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int vasprintf(char **  , const char * __restrict  , __va_list  ) __attribute__((__nonnull__(2)));
N#endif
N#pragma __printf_args
Nextern _ARMABI int __ARM_asprintf(char ** /*strp*/, const char * __restrict /*format*/, ...) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int __ARM_asprintf(char **  , const char * __restrict  , ...) __attribute__((__nonnull__(2)));
Nextern _ARMABI int __ARM_vasprintf(char ** /*strp*/, const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int __ARM_vasprintf(char **  , const char * __restrict  , __va_list  ) __attribute__((__nonnull__(2)));
N   /*
N    * dynamically allocates a buffer of the right size for the
N    * formatted string, and returns it in (*strp). Formal return value
N    * is the same as any other printf variant, except that it returns
N    * -1 if the buffer could not be allocated.
N    *
N    * (The functions with __ARM_ prefixed names are identical to the
N    * ones without, but are available in all compilation modes without
N    * violating user namespace.)
N    */
N
Nextern _ARMABI int fgetc(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int fgetc(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * obtains the next character (if present) as an unsigned char converted to
N    * an int, from the input stream pointed to by stream, and advances the
N    * associated file position indicator (if defined).
N    * Returns: the next character from the input stream pointed to by stream.
N    *          If the stream is at end-of-file, the end-of-file indicator is
N    *          set and fgetc returns EOF. If a read error occurs, the error
N    *          indicator is set and fgetc returns EOF.
N    */
Nextern _ARMABI char *fgets(char * __restrict /*s*/, int /*n*/,
Xextern __declspec(__nothrow) char *fgets(char * __restrict  , int  ,
N                    FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,3)));
N   /*
N    * reads at most one less than the number of characters specified by n from
N    * the stream pointed to by stream into the array pointed to by s. No
N    * additional characters are read after a new-line character (which is
N    * retained) or after end-of-file. A null character is written immediately
N    * after the last character read into the array.
N    * Returns: s if successful. If end-of-file is encountered and no characters
N    *          have been read into the array, the contents of the array remain
N    *          unchanged and a null pointer is returned. If a read error occurs
N    *          during the operation, the array contents are indeterminate and a
N    *          null pointer is returned.
N    */
Nextern _ARMABI int fputc(int /*c*/, FILE * /*stream*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int fputc(int  , FILE *  ) __attribute__((__nonnull__(2)));
N   /*
N    * writes the character specified by c (converted to an unsigned char) to
N    * the output stream pointed to by stream, at the position indicated by the
N    * asociated file position indicator (if defined), and advances the
N    * indicator appropriately. If the file position indicator is not defined,
N    * the character is appended to the output stream.
N    * Returns: the character written. If a write error occurs, the error
N    *          indicator is set and fputc returns EOF.
N    */
Nextern _ARMABI int fputs(const char * __restrict /*s*/, FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int fputs(const char * __restrict  , FILE * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * writes the string pointed to by s to the stream pointed to by stream.
N    * The terminating null character is not written.
N    * Returns: EOF if a write error occurs; otherwise it returns a nonnegative
N    *          value.
N    */
Nextern _ARMABI int getc(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int getc(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to fgetc except that it may be implemented as an unsafe
N    * macro (stream may be evaluated more than once, so the argument should
N    * never be an expression with side-effects).
N    * Returns: the next character from the input stream pointed to by stream.
N    *          If the stream is at end-of-file, the end-of-file indicator is
N    *          set and getc returns EOF. If a read error occurs, the error
N    *          indicator is set and getc returns EOF.
N    */
N#ifdef __cplusplus
S    inline int getchar() { return getc(stdin); }
N#else
N    #define getchar() getc(stdin)
N    extern _ARMABI int (getchar)(void);
X    extern __declspec(__nothrow) int (getchar)(void);
N#endif
N   /*
N    * is equivalent to getc with the argument stdin.
N    * Returns: the next character from the input stream pointed to by stdin.
N    *          If the stream is at end-of-file, the end-of-file indicator is
N    *          set and getchar returns EOF. If a read error occurs, the error
N    *          indicator is set and getchar returns EOF.
N    */
Nextern _ARMABI char *gets(char * /*s*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) char *gets(char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * reads characters from the input stream pointed to by stdin into the array
N    * pointed to by s, until end-of-file is encountered or a new-line character
N    * is read. Any new-line character is discarded, and a null character is
N    * written immediately after the last character read into the array.
N    * Returns: s if successful. If end-of-file is encountered and no characters
N    *          have been read into the array, the contents of the array remain
N    *          unchanged and a null pointer is returned. If a read error occurs
N    *          during the operation, the array contents are indeterminate and a
N    *          null pointer is returned.
N    */
Nextern _ARMABI int putc(int /*c*/, FILE * /*stream*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int putc(int  , FILE *  ) __attribute__((__nonnull__(2)));
N   /*
N    * is equivalent to fputc except that it may be implemented as aan unsafe
N    * macro (stream may be evaluated more than once, so the argument should
N    * never be an expression with side-effects).
N    * Returns: the character written. If a write error occurs, the error
N    *          indicator is set and putc returns EOF.
N    */
N#ifdef __cplusplus
S    inline int putchar(int __c) { return putc(__c, stdout); }
N#else
N    #define putchar(c) putc(c, stdout)
N    extern _ARMABI int (putchar)(int /*c*/);
X    extern __declspec(__nothrow) int (putchar)(int  );
N#endif
N   /*
N    * is equivalent to putc with the second argument stdout.
N    * Returns: the character written. If a write error occurs, the error
N    *          indicator is set and putc returns EOF.
N    */
Nextern _ARMABI int puts(const char * /*s*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int puts(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * writes the string pointed to by s to the stream pointed to by stdout, and
N    * appends a new-line character to the output. The terminating null
N    * character is not written.
N    * Returns: EOF if a write error occurs; otherwise it returns a nonnegative
N    *          value.
N    */
Nextern _ARMABI int ungetc(int /*c*/, FILE * /*stream*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int ungetc(int  , FILE *  ) __attribute__((__nonnull__(2)));
N   /*
N    * pushes the character specified by c (converted to an unsigned char) back
N    * onto the input stream pointed to by stream. The character will be
N    * returned by the next read on that stream. An intervening call to the
N    * fflush function or to a file positioning function (fseek, fsetpos,
N    * rewind) discards any pushed-back characters. The extern _ARMABIal storage
N    * corresponding to the stream is unchanged.
N    * One character pushback is guaranteed. If the unget function is called too
N    * many times on the same stream without an intervening read or file
N    * positioning operation on that stream, the operation may fail.
N    * If the value of c equals that of the macro EOF, the operation fails and
N    * the input stream is unchanged.
N    * A successful call to the ungetc function clears the end-of-file
N    * indicator. The value of the file position indicator after reading or
N    * discarding all pushed-back characters shall be the same as it was before
N    * the characters were pushed back. For a text stream, the value of the file
N    * position indicator after a successful call to the ungetc function is
N    * unspecified until all pushed-back characters are read or discarded. For a
N    * binary stream, the file position indicator is decremented by each
N    * successful call to the ungetc function; if its value was zero before a
N    * call, it is indeterminate after the call.
N    * Returns: the character pushed back after conversion, or EOF if the
N    *          operation fails.
N    */
N
Nextern _ARMABI size_t fread(void * __restrict /*ptr*/,
Xextern __declspec(__nothrow) size_t fread(void * __restrict  ,
N                    size_t /*size*/, size_t /*nmemb*/, FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,4)));
N   /*
N    * reads into the array pointed to by ptr, up to nmemb members whose size is
N    * specified by size, from the stream pointed to by stream. The file
N    * position indicator (if defined) is advanced by the number of characters
N    * successfully read. If an error occurs, the resulting value of the file
N    * position indicator is indeterminate. If a partial member is read, its
N    * value is indeterminate. The ferror or feof function shall be used to
N    * distinguish between a read error and end-of-file.
N    * Returns: the number of members successfully read, which may be less than
N    *          nmemb if a read error or end-of-file is encountered. If size or
N    *          nmemb is zero, fread returns zero and the contents of the array
N    *          and the state of the stream remain unchanged.
N    */
N
Nextern _ARMABI size_t __fread_bytes_avail(void * __restrict /*ptr*/,
Xextern __declspec(__nothrow) size_t __fread_bytes_avail(void * __restrict  ,
N                    size_t /*count*/, FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,3)));
N   /*
N    * reads into the array pointed to by ptr, up to count characters from the
N    * stream pointed to by stream. The file position indicator (if defined)
N    * is advanced by the number of characters successfully read. If an error
N    * occurs, the resulting value of the file position indicator is
N    * indeterminate. The ferror or feof function shall be used to
N    * distinguish between a read error and end-of-file.  The call will block
N    * only if no characters are available.
N    * Returns: the number of characters successfully read, which may be less than
N    *          count. If count is zero, __fread_bytes_avail returns zero and
N    *          the contents of the array and the state of the stream remain
N    *          unchanged.
N    */
N
Nextern _ARMABI size_t fwrite(const void * __restrict /*ptr*/,
Xextern __declspec(__nothrow) size_t fwrite(const void * __restrict  ,
N                    size_t /*size*/, size_t /*nmemb*/, FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,4)));
N   /*
N    * writes, from the array pointed to by ptr up to nmemb members whose size
N    * is specified by size, to the stream pointed to by stream. The file
N    * position indicator (if defined) is advanced by the number of characters
N    * successfully written. If an error occurs, the resulting value of the file
N    * position indicator is indeterminate.
N    * Returns: the number of members successfully written, which will be less
N    *          than nmemb only if a write error is encountered.
N    */
N
Nextern _ARMABI int fgetpos(FILE * __restrict /*stream*/, fpos_t * __restrict /*pos*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int fgetpos(FILE * __restrict  , fpos_t * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * stores the current value of the file position indicator for the stream
N    * pointed to by stream in the object pointed to by pos. The value stored
N    * contains unspecified information usable by the fsetpos function for
N    * repositioning the stream to its position at the time  of the call to the
N    * fgetpos function.
N    * Returns: zero, if successful. Otherwise nonzero is returned and the
N    *          integer expression errno is set to an implementation-defined
N    *          nonzero value.
N    */
Nextern _ARMABI int fseek(FILE * /*stream*/, long int /*offset*/, int /*whence*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int fseek(FILE *  , long int  , int  ) __attribute__((__nonnull__(1)));
N   /*
N    * sets the file position indicator for the stream pointed to by stream.
N    * For a binary stream, the new position is at the signed number of
N    * characters specified by offset away from the point specified by whence.
N    * The specified point is the beginning of the file for SEEK_SET, the
N    * current position in the file for SEEK_CUR, or end-of-file for SEEK_END.
N    * A binary stream need not meaningfully support fseek calls with a whence
N    * value of SEEK_END.
N    * For a text stream, either offset shall be zero, or offset shall be a
N    * value returned by an earlier call to the ftell function on the same
N    * stream and whence shall be SEEK_SET.
N    * The fseek function clears the end-of-file indicator and undoes any
N    * effects of the ungetc function on the same stream. After an fseek call,
N    * the next operation on an update stream may be either input or output.
N    * Returns: nonzero only for a request that cannot be satisfied.
N    */
Nextern _ARMABI int fsetpos(FILE * __restrict /*stream*/, const fpos_t * __restrict /*pos*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int fsetpos(FILE * __restrict  , const fpos_t * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * sets  the file position indicator for the stream pointed to by stream
N    * according to the value of the object pointed to by pos, which shall be a
N    * value returned by an earlier call to the fgetpos function on the same
N    * stream.
N    * The fsetpos function clears the end-of-file indicator and undoes any
N    * effects of the ungetc function on the same stream. After an fsetpos call,
N    * the next operation on an update stream may be either input or output.
N    * Returns: zero, if successful. Otherwise nonzero is returned and the
N    *          integer expression errno is set to an implementation-defined
N    *          nonzero value.
N    */
Nextern _ARMABI long int ftell(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) long int ftell(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * obtains the current value of the file position indicator for the stream
N    * pointed to by stream. For a binary stream, the value is the number of
N    * characters from the beginning of the file. For a text stream, the file
N    * position indicator contains unspecified information, usable by the fseek
N    * function for returning the file position indicator to its position at the
N    * time of the ftell call; the difference between two such return values is
N    * not necessarily a meaningful measure of the number of characters written
N    * or read.
N    * Returns: if successful, the current value of the file position indicator.
N    *          On failure, the ftell function returns -1L and sets the integer
N    *          expression errno to an implementation-defined nonzero value.
N    */
Nextern _ARMABI void rewind(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) void rewind(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * sets the file position indicator for the stream pointed to by stream to
N    * the beginning of the file. It is equivalent to
N    *          (void)fseek(stream, 0L, SEEK_SET)
N    * except that the error indicator for the stream is also cleared.
N    * Returns: no value.
N    */
N
Nextern _ARMABI void clearerr(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) void clearerr(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * clears the end-of-file and error indicators for the stream pointed to by
N    * stream. These indicators are cleared only when the file is opened or by
N    * an explicit call to the clearerr function or to the rewind function.
N    * Returns: no value.
N    */
N
Nextern _ARMABI int feof(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int feof(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * tests the end-of-file indicator for the stream pointed to by stream.
N    * Returns: nonzero iff the end-of-file indicator is set for stream.
N    */
Nextern _ARMABI int ferror(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int ferror(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * tests the error indicator for the stream pointed to by stream.
N    * Returns: nonzero iff the error indicator is set for stream.
N    */
Nextern _ARMABI void perror(const char * /*s*/);
Xextern __declspec(__nothrow) void perror(const char *  );
N   /*
N    * maps the error number  in the integer expression errno to an error
N    * message. It writes a sequence of characters to the standard error stream
N    * thus: first (if s is not a null pointer and the character pointed to by
N    * s is not the null character), the string pointed to by s followed by a
N    * colon and a space; then an appropriate error message string followed by
N    * a new-line character. The contents of the error message strings are the
N    * same as those returned by the strerror function with argument errno,
N    * which are implementation-defined.
N    * Returns: no value.
N    */
N
Nextern _ARMABI int _fisatty(FILE * /*stream*/ ) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _fisatty(FILE *   ) __attribute__((__nonnull__(1)));
N    /* Returns 1 if the stream is tty (stdin), 0 otherwise. Not ANSI compliant.
N     */
N
Nextern _ARMABI void __use_no_semihosting_swi(void);
Xextern __declspec(__nothrow) void __use_no_semihosting_swi(void);
Nextern _ARMABI void __use_no_semihosting(void);
Xextern __declspec(__nothrow) void __use_no_semihosting(void);
N    /*
N     * Referencing either of these symbols will cause a link-time
N     * error if any library functions that use semihosting SWI
N     * calls are also present in the link, i.e. you define it if
N     * you want to make sure you haven't accidentally used any such
N     * SWIs.
N     */
N
N    #ifdef __cplusplus
S        }  /* extern "C" */
S      }  /* namespace std */
N    #endif
N  #endif /* __STDIO_DECLS */
N
N  #if _AEABI_PORTABILITY_LEVEL != 0 && !defined _AEABI_PORTABLE
X  #if _AEABI_PORTABILITY_LEVEL != 0 && !0L
S    #define _AEABI_PORTABLE
N  #endif
N
N  #if defined(__cplusplus) && !defined(__STDIO_NO_EXPORTS)
X  #if 0L && !0L
S    using ::std::size_t;
S    using ::std::fpos_t;
S    using ::std::FILE;
S    using ::std::remove;
S    using ::std::rename;
S    using ::std::tmpfile;
S    using ::std::tmpnam;
S    using ::std::fclose;
S    using ::std::fflush;
S    using ::std::fopen;
S    using ::std::freopen;
S    using ::std::setbuf;
S    using ::std::setvbuf;
S    using ::std::fprintf;
S    using ::std::_fprintf;
S    using ::std::printf;
S    using ::std::_printf;
S    using ::std::sprintf;
S    using ::std::_sprintf;
S    #if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
S      using ::std::snprintf;
S      using ::std::vsnprintf;
S      using ::std::vfscanf;
S      using ::std::vscanf;
S      using ::std::vsscanf;
S    #endif
S    using ::std::_snprintf;
S    using ::std::_vsnprintf;
S#if !defined(__STRICT_ANSI__)
S    using ::std::asprintf;
S    using ::std::vasprintf;
S#endif
S    using ::std::__ARM_asprintf;
S    using ::std::__ARM_vasprintf;
S    using ::std::__ARM_vsnprintf;
S    using ::std::__ARM_snprintf;
S    using ::std::__ARM_vsscanf;
S    using ::std::fscanf;
S    using ::std::_fscanf;
S    using ::std::scanf;
S    using ::std::_scanf;
S    using ::std::sscanf;
S    using ::std::_sscanf;
S    using ::std::_vfscanf;
S    using ::std::_vscanf;
S    using ::std::_vsscanf;
S    using ::std::vprintf;
S    using ::std::_vprintf;
S    using ::std::vfprintf;
S    using ::std::_vfprintf;
S    using ::std::vsprintf;
S    using ::std::_vsprintf;
S    using ::std::fgetc;
S    using ::std::fgets;
S    using ::std::fputc;
S    using ::std::fputs;
S    using ::std::getc;
S    using ::std::getchar;
S    using ::std::gets;
S    using ::std::putc;
S    using ::std::putchar;
S    using ::std::puts;
S    using ::std::ungetc;
S    using ::std::fread;
S    using ::std::__fread_bytes_avail;
S    using ::std::fwrite;
S    using ::std::fgetpos;
S    using ::std::fseek;
S    using ::std::fsetpos;
S    using ::std::ftell;
S    using ::std::rewind;
S    using ::std::clearerr;
S    using ::std::feof;
S    using ::std::ferror;
S    using ::std::perror;
S    using ::std::_fisatty;
S    using ::std::__use_no_semihosting_swi;
S    using ::std::__use_no_semihosting;
N  #endif
N
N#endif /* ndef __stdio_h */
N
N/* end of stdio.h */
N
L 11 "..\..\..\..\common\include\dbg.h" 2
N#include "ipc.h"
L 1 "..\..\..\..\common\include\ipc.h" 1
N/*
N * Kneron IPC Header for KL520
N *
N * Copyright (C) 2018-2019 Kneron, Inc. All rights reserved.
N *
N */
N
N#ifndef KNERON_IPC_H
N#define KNERON_IPC_H
N
N#include <stdint.h>
N#include "model_type.h"
L 1 "..\..\..\..\common\include\model_type.h" 1
N#ifndef __MODEL_TYPE_H
N#define __MODEL_TYPE_H
N
N
Nenum model_type {
N#if 0
S    INVALID_ID,
S    KNERON_FDSMALLBOX                   = 1,
S    KNERON_FDANCHOR                     = 2,
S    KNERON_FDSSD                        = 32,
S    AVERAGE_POOLING                     = 4,
S    KNERON_LM_5PTS                      = 5,
S    KNERON_LM_68PTS                     = 6,
S    KNERON_LM_150PTS                    = 7,
S    //KNERON_FR_RES50                     = 8,
S    KNERON_FR_RES34                     = 9,
S    KNERON_FR_VGG10                     = 8,
S    KNERON_TINY_YOLO_PERSON             = 11,
S    KNERON_3D_LIVENESS                  = 12,
S    KNERON_GESTURE_RETINANET            = 13,
S    TINY_YOLO_VOC                       = 14,
S    IMAGENET_CLASSIFICATION_RES50       = 15,
S    IMAGENET_CLASSIFICATION_RES34       = 16,
S    IMAGENET_CLASSIFICATION_INCEPTION_V3= 17,
S    IMAGENET_CLASSIFICATION_MOBILENET_V2= 18,
S    TINY_YOLO_V3                        = 19,
S	KNERON_2D_LIVENESS                  = 20,
S    KNERON_FD_RETINANET                 = 21,
S    KNERON_SSD_PERSON                   = 22,
S    KNERON_AGE_GENDER                   = 23,
S	KNERON_NIR_LIVENESS                 = 30,
S    KNERON_FUSE_LIVENESS                = 41,
S	KNERON_CV_LIVENESS                  = 26,
S    KNERON_OD_MBSSD                     = 27,
S    KNERON_AGE_GROUP                    = 28,
S    KNERON_LM_S_5PTS                    = 55,
S    //KNERON_NIR_HSN_LIVENESS             = 32,
S    KNERON_LM_EYE_LID                   = 42,
S    KNERON_FACE_QUALITY                 = 40,
S    KNERON_RGB_LIVENESS                 = 57,
S    KNERON_NIR_OCCLUDE                  = 51,
S    UPHOTON_LIVENESS                    = 1001,
S		KNERON_FACESEG_DLA34_128_128_3      = 58
N#endif
N    UPHOTON_LIVENESS                    = 1001,
N	INVALID_TYPE = 0,
N	KNERON_FD_SMALLBOX_200_200_3 = 1,
N	KNERON_FD_ANCHOR_200_200_3 = 2,
N	KNERON_FD_MBSSD_200_200_3= 3,
N	AVERAGE_POOLING = 4, //use with FD smallbox and don't use anymore
N	KNERON_LM_5PTS_ONET_56_56_3 = 5,
N	KNERON_LM_68PTS_dlib_112_112_3 = 6,
N	KNERON_LM_150PTS = 7,
N	KNERON_FR_RES50_112_112_3 = 8,
N    //KNERON_FR_RES50_COMPACT=39,
N	KNERON_FR_RES34 = 9,
N	KNERON_FR_VGG10 = 10,
N	KNERON_TINY_YOLO_PERSON_416_416_3 = 11,
N	KNERON_3D_LIVENESS = 12, //has two inputs: depth and RGB
N	KNERON_GESTURE_RETINANET_320_320_3 = 13,
N	TINY_YOLO_VOC_224_224_3 = 14,
N	IMAGENET_CLASSIFICATION_RES50_224_224_3 = 15,
N	IMAGENET_CLASSIFICATION_RES34_224_224_3 = 16,
N	IMAGENET_CLASSIFICATION_INCEPTION_V3_224_224_3 = 17,
N	IMAGENET_CLASSIFICATION_MOBILENET_V2_224_224_3 = 18,
N	TINY_YOLO_V3_224_224_3 = 19,
N	KNERON_2D_LIVENESS_224_224_3 = 20, //oldest rgb liveness model and don't use anymore
N	KNERON_FD_RETINANET_256_256_3 = 21,
N	KNERON_PERSON_MOBILENETSSD_224_224_3 = 22,
N	KNERON_AGE_GENDER = 23, //oldest age gender model and don't use anymore 
N	KNERON_LM_5PTS_BLUR_ONET_48_48_3 = 24,
N	KNERON_2D_LIVENESS_V3_FACEBAGNET_224_224_3 = 25,
N    KNERON_AGE_GENDER_V2_RES18_128_128_3 = 26,
N	KNERON_OD_MBSSD = 27, //HW model and don't know input size
N	KNERON_PD_MBSSD = 28, //HW model and don't know which version and input size
N	KNERON_FR_MASK_RES50_112_112_3 = 29, 
N	KNERON_NIR_LIVENESS_RES18_112_112_3 = 30,
N	KNERON_FR_MASK_RES101_112_112_3 = 31,
N    KNERON_FD_MASK_MBSSD_200_200_3 = 32,	
N    TINY_YOLO_V3_416_416_3 = 33,
N    TINY_YOLO_V3_608_608_3 = 34,
N
N	//Category Face related 40~200
N	KNERON_CAT_FACE = 40,
N	KNERON_FACE_QAULITY_ONET_56_56_1 = KNERON_CAT_FACE,
N	KNERON_FUSE_LIVENESS = KNERON_CAT_FACE +1, // don't know the model backbone and input size of fuse liveness model
N	KNERON_EYELID_DETECTION_ONET_48_48_3 = KNERON_CAT_FACE +2,
N	KNERON_YAWN_DETECTION_PFLD_112_112_3 = KNERON_CAT_FACE +3,
N	KNERON_DBFACE_MBNET_V2_480_864_3 = KNERON_CAT_FACE +4,
N	KNERON_FILTER = KNERON_CAT_FACE +5, //No model inference, just pre and post-process
N	KNERON_ALIGNMENT = KNERON_CAT_FACE +6, //No model inference, just preprocess
N	KNERON_FACE_EXPRESSION_112_112_3 = KNERON_CAT_FACE +7,
N	KNERON_RBG_OCCLUSION_RES18_112_112_3 = KNERON_CAT_FACE +8,
N	KNERON_LM2BBOX = KNERON_CAT_FACE + 9, //No model inference, just post-process
N	KNERON_PUPIL_ONET_48_48_3 = KNERON_CAT_FACE +10,
N    KNERON_NIR_OCCLUSION_RES18_112_112_3 = KNERON_CAT_FACE +11,
N    KNERON_HEAD_SHOULDER_MBNET_V2_112_112_3 = KNERON_CAT_FACE + 12,
N    KNERON_RGB_LIVENESS_RES18_112_112_3 = KNERON_CAT_FACE +13, 
N	KNERON_MOUTH_LM_v1_56_56_1 = KNERON_CAT_FACE +14,    //nose, upper lip middle, chin, two sides of faces
N	KNERON_MOUTH_LM_v2_56_56_1 = KNERON_CAT_FACE +15,    //nose, upper/lower lip middle, two sides of faces
N	KNERON_PUPIL_ONET_48_48_1 = KNERON_CAT_FACE +16,
N    KNERON_RGB_LIVENESS_MBV2_112_112_3 = KNERON_CAT_FACE +17,
N    KNERON_FACESEG_DLA34_128_128_3 = KNERON_CAT_FACE +18,
N    KNERON_OCC_CLS = KNERON_CAT_FACE +19, //no model inference, just post-process
N    KNERON_LMSEG_FUSE = KNERON_CAT_FACE+20, //no model inference, just post-process
N    KNERON_FUSE_LIVENESS_850 = 65,
N    KNERON_FUSE_SC035        = 98,
N    KNERON_FUSE_DUAL_1054    = 103,
N    KNERON_FUSE_LIVENESS_850_940 = 77,
N    KNERON_FACE_POSE = 68,
N    KNERON_FUSE_NIR_LV = 76,
N
N    KNERON_FD_ROTATE=63,
N    KNERON_LM_ROTATE=64,
N    KNERON_FACE_POSE_ROTATE=71,
N    KNERON_NIR_LV_ROTATE=72,
N    KNERON_HSN_LV_ROTATE=81,
N    KNERON_LM_S_ROTATE=87,
N    KNERON_LM_PLUS_ROTATE=93,
N    KNERON_FD_FCOS_ROTATE=94,
N    KNERON_NIR_LV_ROTATE_1054=104,
N    KNERON_FD_FCOS_ROTATE_1054=106,
N    KNERON_HSN_LV_ROTATE_1054=109,
N    KNERON_NIR_COMBO_ROTATE_1054=111,
N    KNERON_FR_RES50_1054=39,
N
N    KNERON_FACE_PUPIL_CLS2_48_48_3 = KNERON_CAT_FACE +52,
N    
N    KNERON_FACE_PUPIL_ROTATE_CLS2_48_48_3 = KNERON_CAT_FACE +56,
N    KNERON_FACESEG_DLA34_rotate_128_128_3 = KNERON_CAT_FACE +60,
N    KNERON_FACESEG_ROTATE = 119,
N    KNERON_TOF_FR50M_112_112_3 = 120,
N
N	//Category Object Detection related 200~300
N	KNERON_OB_DETECT = 200,
N	KNERON_OBJECTDETECTION_CENTERNET_512_512_3 = KNERON_OB_DETECT,
N	KNERON_OBJECTDETECTION_FCOS_416_416_3 = KNERON_OB_DETECT +1,
N	KNERON_PD_MBNET_V2_480_864_3 = KNERON_OB_DETECT +2, //16:9 aspect ratio
N	KNERON_CAR_DETECTION_MBSSD_224_416_3 = KNERON_OB_DETECT +3,
N	KNERON_PD_CROP_MBSSD_304_304_3 = KNERON_OB_DETECT +4,
N	YOLO_V3_416_416_3 = KNERON_OB_DETECT +5,
N	YOLO_V4_416_416_3 = KNERON_OB_DETECT +6,
N	KNERON_CAR_DETECTION_YOLO_V5_352_640_3 = KNERON_OB_DETECT +7,
N	KNERON_LICENSE_DETECT_WPOD_208_416_3 = KNERON_OB_DETECT +8,
N	KNERON_2D_UPPERBODY_KEYPOINT_RES18_384_288_3 = KNERON_OB_DETECT +9,
N	YOLO_V3_608_608_3 = KNERON_OB_DETECT +10,
N    KNERON_YOLOV5S_640_640_3 = KNERON_OB_DETECT +11,
N    KNERON_YOLOV5S_480_256_3 = KNERON_OB_DETECT + 12,
N    KNERON_SITTINGPOSTURE_RESNET34_288_384_3 = KNERON_OB_DETECT + 13,
N    KNERON_PERSONDETECTION_FCOS_416_416_3 = KNERON_OB_DETECT +14,
N    KNERON_YOLOV5m_640_640_3 = KNERON_OB_DETECT +15,
N    KNERON_YOLOV5S6_480_256_3 = KNERON_OB_DETECT + 16,
N    KNERON_PERSONDETECTION_FCOS_384_288_3 = KNERON_OB_DETECT +17,
N    KNERON_PERSONDETECTION_FCOS_720_416_3 = KNERON_OB_DETECT +18,
N    KNERON_PERSONDETECTION_dbface_864_480_3 = KNERON_OB_DETECT +19,
N        
N
N	//Category OCR related 300~400
N	KNERON_OCR = 300,
N	KNERON_LICENSE_OCR_MBNET_64_160_3 = KNERON_OCR,
N	KNERON_WATERMETER_OCR_MBNET = KNERON_OCR +1, //unknown
N
N
N	//Category SDK test related
N	KNERON_CAT_SDK_TEST = 1000,
N	KNERON_SDK_FD = KNERON_CAT_SDK_TEST,
N	KNERON_SDK_LM = KNERON_CAT_SDK_TEST +1,
N	KNERON_SDK_FR = KNERON_CAT_SDK_TEST +2,
N	
N	// Category Function Runner related 2000
N    KNERON_FUNCTION = 2000,
N    KNERON_FUNCTION_NIRLIVENESS_CLS = KNERON_FUNCTION,
N    KNERON_FUNCTION_OCC_CLS = KNERON_FUNCTION +1,
N    KNERON_FUNCTION_LMSEG_FUSE = KNERON_FUNCTION +2, 
N    KNERON_FUNCTION_FILTER_SCORE = KNERON_FUNCTION +3,
N
N	//Category Customer models
N	//0x8000 = 32768
N	CUSTOMER = 32768,
N
N	Count
N
N};
N#endif
L 13 "..\..\..\..\common\include\ipc.h" 2
N#include "model_res.h"
L 1 "..\..\..\..\common\include\model_res.h" 1
N#ifndef __MODEL_RES_H__
N#define __MODEL_RES_H__
N
N/* These header defines structures shared by scpu/ncpu/host_lib */
N
N#define LAND_MARK_POINTS       5
N#define EYE_LID_LM_POINTS      7
N#define FR_FEATURE_MAP_SIZE    512
N#define LV_R_SIZE              1
N#define LV_SCORE_SIZE          2
N#define DUAL_LAND_MARK_POINTS  10
N#define DME_OBJECT_MAX         80
N#define IMAGENET_TOP_MAX       5
N#define HAND_KEY_POINTS        7
N
N/* Yolo Result */
Nstruct bounding_box_s {
N    float x1;      // top-left corner: x
N    float y1;      // top-left corner: y
N    float x2;      // bottom-right corner: x
N    float y2;      // bottom-right corner: y
N    float score;   // probability score
N    int32_t class_num; // class # (of many) with highest probability
N};
N
Nstruct yolo_result_s {
N    uint32_t class_count;            // total class count
N    uint32_t box_count;              // boxes of all classes
N    struct bounding_box_s boxes[1];  // box_count
N};
N
Nstruct age_gender_result_s {
N    uint32_t age;
N    uint8_t ismale;
N};
N
Nstruct imagenet_result_s {
N    int32_t   index; // index of the class
N    float score; // probability score of the class
N};
N
Nstruct facedet_result_s {
N    int32_t len;
N    int32_t xywh[4]; // 4 values for X, Y, W, H
N    float xywh_fl[4]; // 4 values for X, Y, W, H
N    float score;     //prob score
N    int32_t class_num; //class
N};
N
Nstruct landmark_result_s {
N    struct {
N        uint32_t x;
N        uint32_t y;
N        float    x_f;
N        float    y_f;
N    } marks[LAND_MARK_POINTS];
X    } marks[5];
N    float score;
N    float blur;
N};
N
Nstruct hand_kp_result_s {
N    struct {
N        float    x_f;
N        float    y_f;
N    } marks[HAND_KEY_POINTS];
X    } marks[7];
N    float score;
N};
N
Nstruct eye_lid_lm_result_s {
N    struct {
N        uint32_t x;
N        uint32_t y;
N    } marks[EYE_LID_LM_POINTS];
X    } marks[7];
N    float score;
N};
N
Nstruct face_occlude_result_s {
N    float yaw;
N    float pitch;
N    float roll;
N    float occ;
N    float seg_res[7];
N};
N
Nstruct age_group_result_s {
N    int32_t age;
N};
N
Nstruct face_quality_result_s {
N    float face_score;
N};
N
Nstruct fr_result_s {
N    float feature_map[FR_FEATURE_MAP_SIZE];
X    float feature_map[512];
N};
N
N/* by larry lai */
N
Nstruct lv_result_s{
N    int32_t  real[LV_R_SIZE];
X    int32_t  real[1];
N    float    score[LV_SCORE_SIZE];
X    float    score[2];
N    _Bool    wb_result;
N    float    nir_luma_ratio;
N    uint8_t  rgb_quality;
N    uint8_t  rgb_corner_y;
N    float    effect_2d;
N    uint8_t  cal_nir_led_on_tile;
N    uint8_t  cal_distance;
N    float    id_ref_c;   
N};
N
Nstruct dual_landmarks_s {
N    struct {
N        uint32_t x;
N        uint32_t y;
N    } marks[DUAL_LAND_MARK_POINTS];
X    } marks[10];
N};
N
Ntypedef struct {
N    struct bounding_box_s fd_res;
N    struct age_gender_result_s ag_res;
N} fd_age_gender_res;
N
Ntypedef struct {
N    uint32_t class_count; // total class count
N    uint32_t box_count;   // boxes of all classes
N    struct bounding_box_s boxes[DME_OBJECT_MAX]; // box information
X    struct bounding_box_s boxes[80]; 
N} dme_res;
N
N#endif
L 14 "..\..\..\..\common\include\ipc.h" 2
N
N/* IPC memory */
N//----------------------------
N/* N i/d RAM */
N#ifdef TARGET_NCPU
S#define S_D_RAM_ADDR                0x20200000
S#define N_D_RAM_ADDR                0x0FFF0000
N#endif
N#ifdef TARGET_SCPU
N#define S_D_RAM_ADDR                0x10200000
N#define N_D_RAM_ADDR                0x2FFF0000
N#endif
N
N#define S_D_RAM_SIZE                0x18000          /* 96 KB */
N#define N_D_RAM_SIZE                0x10000          /* 64 KB */
N
N#define IPC_RAM_SIZE                0x2000           /* 8K Bytes : split 7 : 1 */
N#define IPC_MEM_OFFSET              (S_D_RAM_SIZE - IPC_RAM_SIZE)
N#define IPC_MEM_OFFSET2             (S_D_RAM_SIZE - IPC_RAM_SIZE / 8)
N#define IPC_MEM_ADDR                (S_D_RAM_ADDR + IPC_MEM_OFFSET)
N#define IPC_MEM_ADDR2               (S_D_RAM_ADDR + IPC_MEM_OFFSET2)
N//----------------------------
N
N#define SCPU2NCPU_ID		('s'<<24 | 'c'<<16 | 'p'<<8 | 'u')
N#define NCPU2SCPU_ID		('n'<<24 | 'c'<<16 | 'p'<<8 | 'u')
N
N#define MULTI_MODEL_MAX         16      /* Max active models in memory */
N#define IPC_IMAGE_ACTIVE_MAX    2       /* Max active images for NCPU/NPU */
N#define IPC_COM_PAX             IPC_IMAGE_ACTIVE_MAX
N#define IPC_IMAGE_MAX           5       /* Max cycled buffer for images */
N
N/* Image process cmd_flags set by scpu */
N#define IMAGE_STATE_INACTIVE                0
N#define IMAGE_STATE_ACTIVE                  1
N#define IMAGE_STATE_RECEIVING               2
N
N/* Image process status set by ncpu */
N#define IMAGE_STATE_IDLE                    0
N#define IMAGE_STATE_NPU_BUSY                1
N#define IMAGE_STATE_NPU_DONE                2
N#define IMAGE_STATE_POST_PROCESSING         IMAGE_STATE_NPU_DONE
N#define IMAGE_STATE_POST_PROCESSING_DONE    3
N#define IMAGE_STATE_DONE                    IMAGE_STATE_POST_PROCESSING_DONE
N
N#define IMAGE_STATE_PREPROC_ERROR           (-1)
N#define IMAGE_STATE_NPU_ERROR               (-2)
N
N/* Image format flags */
N#define IMAGE_FORMAT_SUB128                 BIT31
N#define IMAGE_FORMAT_ROT_MASK               (BIT30 | BIT29)
N#define IMAGE_FORMAT_ROT_SHIFT              29
N#define IMAGE_FORMAT_ROT_CLOCKWISE          0x01
N#define IMAGE_FORMAT_ROT_COUNTER_CLOCKWISE  0x02
N
N#define IMAGE_FORMAT_RAW_OUTPUT             BIT28
N#define IMAGE_FORMAT_PARALLEL_PROC          BIT27
N
N#define IMAGE_FORMAT_MODEL_AGE_GENDER       BIT24
N
N#define IMAGE_FORMAT_SYMMETRIC_PADDING      BIT21
N#define IMAGE_FORMAT_PAD_MODE               (BIT21 | BIT20)
N#define IMAGE_FORMAT_PAD_SHIFT              20
N
N
N#define IMAGE_FORMAT_CHANGE_ASPECT_RATIO    BIT20
N
N#define IMAGE_FORMAT_BYPASS_PRE             BIT19
N#define IMAGE_FORMAT_BYPASS_NPU_OP          BIT18
N#define IMAGE_FORMAT_BYPASS_CPU_OP          BIT17
N#define IMAGE_FORMAT_BYPASS_POST            BIT16
N
N/* Padding mode */
N#define NPU_PAD_RIGHT_BOTTOM 0
N#define NPU_PAD_NONE         1
N#define NPU_PAD_SYMMETRIC    2
N#define NPU_PAD_PREDEFINED   3
N
N
N#define IMAGE_FORMAT_NPU            0x00FF
N#define NPU_FORMAT_RGBA8888         0x00
N#define NPU_FORMAT_NIR              0x20
N/* Support YCBCR (YUV) */
N#define NPU_FORMAT_YCBCR422         0x30
N#define NPU_FORMAT_YCBCR444         0x50
N#define NPU_FORMAT_RGB565           0x60
N
N/* Determine the exact format with the data byte sequence in DDR memory: [lowest byte]...[highest byte] */
N#define NPU_FORMAT_YCBCR422_CRY1CBY0 0x30
N#define NPU_FORMAT_YCBCR422_CBY1CRY0 0x31
N#define NPU_FORMAT_YCBCR422_Y1CRY0CB 0x32
N#define NPU_FORMAT_YCBCR422_Y1CBY0CR 0x33
N#define NPU_FORMAT_YCBCR422_CRY0CBY1 0x34
N#define NPU_FORMAT_YCBCR422_CBY0CRY1 0x35
N#define NPU_FORMAT_YCBCR422_Y0CRY1CB 0x36
N#define NPU_FORMAT_YCBCR422_Y0CBY1CR 0x37  // Y0CbY1CrY2CbY3Cr...
N
N/* Model structure */
Nstruct kdp_model_s {
N    /* Model type */
N    uint32_t    model_type; //defined in model_type.h
N
N    /* Model version */
N    uint32_t    model_version;
N
N    /* Input in memory */
N    uint32_t    input_mem_addr;
N    int32_t     input_mem_len;
N	
N    /* Output in memory */
N    uint32_t    output_mem_addr;
N    int32_t     output_mem_len;
N
N    /* Working buffer */
N    uint32_t    buf_addr;
N    int32_t     buf_len;
N
N    /* command.bin in memory */
N    uint32_t    cmd_mem_addr;
N    int32_t     cmd_mem_len;
N
N    /* weight.bin in memory */
N    uint32_t    weight_mem_addr;
N    int32_t     weight_mem_len;
N
N    /* setup.bin in memory */
N    uint32_t    setup_mem_addr;
N    int32_t     setup_mem_len;
N};
Ntypedef struct kdp_model_s kdp_model_info_t;
N
N/* Result structure of a model */
Nstruct result_buf_s {
N    int32_t     model_id;
N    uint32_t    result_mem_addr;
N    int32_t     result_mem_len;
N    int32_t     result_ret_len;
N};
N
N#define MAX_PARAMS_LEN          40 /* uint32_t */
N
Nstruct kdp_img_cfg {
N    uint32_t image_mem_addr;
N    int32_t image_mem_len;
N    int32_t image_col;
N    int32_t image_row;
N    int32_t image_ch;
N    uint32_t image_format;
N    uint32_t image_buf_active_index; // scpu_to_ncpu->active_img_index
N};
N
Nstruct kdp_crop_box_s {
N    int32_t top;
N    int32_t bottom;
N    int32_t left;
N    int32_t right;
N};
N
Nstruct kdp_pad_value_s {
N    int32_t pad_top;
N    int32_t pad_bottom;
N    int32_t pad_left;
N    int32_t pad_right;
N};
N
N/* Parameter structure of a raw image */
Nstruct parameter_s {
N    /* Crop parameters or other purposes */
N    int         crop_top;
N    int         crop_bottom;
N    int         crop_left;
N    int         crop_right;
N
N    /* Pad parameters or other purposes */
N    int         pad_top;
N    int         pad_bottom;
N    int         pad_left;
N    int         pad_right;
N    int         flip_face;  // for fr, 0 to not, 1 to flip
N
N    /* Shared parameters */
N    uint32_t    params[MAX_PARAMS_LEN];
X    uint32_t    params[40];
N
N    uint32_t    dual_landmarks[20];
N    uint32_t    dual_landmarks_3d[20];
N    uint8_t     init_tile;
N    uint8_t     nir_mode;
N    float       init_nir_gain;
N    float       nir_gain;
N    uint32_t    nir_cur_exp_time;
N    uint32_t    calibration_count;
N    float       registered_offsetX;
N    float       registered_offsetY;
N    uint8_t     rgb_led_flag;
N    uint8_t     rgb_avg_luma;
N    float       x_scaling;
N    uint8_t     d_offset;
N    uint8_t     pass_type;
N    _Bool       ignore_rgb_led;
N    _Bool       bctc;
N    uint8_t     input_nir_led_on_tile;
N    uint8_t     nir_led_flag;
N    uint8_t     input_distance;
N    uint32_t    rgb_cur_exp_time;
N    uint32_t    rgb_init_exp_time;
N    uint8_t     pre_gain;
N    uint8_t     post_gain;
N    uint8_t     global_gain;
N    uint8_t     y_average;
N    float       rgb_lm_score;
N    float       nir_lv_cnn_face_real_score;
N    float       fuse_lv_cnn_real_score;
N};
N
N/* Raw image structure */
Nstruct kdp_img_raw_s {
N    /* Image state: 1 = active, 0 = inactive */
N    int         state;
N
N    /* Image sequence number */
N    int         seq_num;
N
N    /* Image ref index */
N    int         ref_idx;
N
N    /* raw image dimensions */
N    uint32_t    input_row;
N    uint32_t    input_col;
N    uint32_t    input_channel;
N
N    /* Raw image format and pre-process flags
N     * bit-31: = 1 : subtract 128
N     * bit 30:29 00: no rotation; 01: rotate clockwise; 10: rotate counter clockwise; 11: reserved
N     * bit 7:0: format
N     */
N    uint32_t    format;
N
N    /* Parameter structure */
N    struct parameter_s  params_s;
N
N    /* input image in memory */
N    uint32_t    image_mem_addr;
N    int32_t     image_mem_len;
N
N    struct result_buf_s results[MULTI_MODEL_MAX];
X    struct result_buf_s results[16];
N
N    /* Test: SCPU total */
N    uint32_t    tick_start;
N    uint32_t    tick_end;
N
N    /* Test: NCPU processes */
N    uint32_t    tick_start_pre;
N    uint32_t    tick_end_pre;
N    uint32_t    tick_start_npu;
N    uint32_t    tick_end_npu;
N    uint32_t    tick_start_post;
N    uint32_t    tick_end_post;
N};
N
N/* Image result structure */
Nstruct kdp_img_result_s {
N    /* Processing status: 2 = done, 1 = running, 0 = unused */
N    int         status;
N
N    /* Image sequence number */
N    int         seq_num;
N	
N    /* result memory addr */
N    //dummy information
N    uint32_t    result_mem_addr;
N};
N
N/* Structure of sCPU->nCPU Message */
Nstruct scpu_to_ncpu_s {
N    uint32_t    id;        /* = 'scpu' */
N    uint32_t    version;
N    uint32_t    cmd;            // Run / Stop
N    uint32_t    input_count;    // # of input image
N
N    /*
N     * debug control flags (dbg.h):
N     *   bits 19-16: scpu debug level
N     *   bits 03-00: ncpu debug level
N     */
N    uint32_t    debug_flags;
N
N    /* Active images (& model) being processed by npu/ncpu */
N    uint32_t            cmd_flags[IPC_IMAGE_ACTIVE_MAX]; // discussion, IPC_COM_PAX
X    uint32_t            cmd_flags[2]; 
N    int32_t             active_img_index[IPC_IMAGE_ACTIVE_MAX]; // discussion, raw_imgs_idx[IPC_COM_PAX]
X    int32_t             active_img_index[2]; 
N    int32_t             model_slot_index[IPC_IMAGE_ACTIVE_MAX]; // discussion, models_slot_idx[IPC_COM_PAX]
X    int32_t             model_slot_index[2]; 
N
N    int32_t             active_img_index_rgb_liveness;
N
N    /* Models in memory */
N    int32_t             num_models;  //usually, num_models=1 (only one active model)
N    struct kdp_model_s  models[MULTI_MODEL_MAX];            //to save active modelInfo
X    struct kdp_model_s  models[16];            
N    uint32_t            models_type[MULTI_MODEL_MAX];       //to save model type
X    uint32_t            models_type[16];       
N
N    /* Raw image information */
N    struct kdp_img_raw_s raw_images[IPC_IMAGE_MAX];
X    struct kdp_img_raw_s raw_images[5];
N
N    /* Input/Output working buffers for NPU */
N    uint32_t    input_mem_addr2;
N    int32_t     input_mem_len2;
N
N    /* Memory for parallel processing */
N    uint32_t    output_mem_addr2;
N    int32_t     output_mem_len2;
N
N    /* Memory for pre processing command */
N    uint32_t    inproc_mem_addr;
N    
N    /* Memory for post processing parameters */
N    uint32_t    output_mem_addr3;
N};
N
N/* Structure of nCPU->sCPU Message */
Nstruct ncpu_to_scpu_s {
N    uint32_t    id;        /* = 'ncpu' */
N    uint32_t    version;
N    int32_t     status;
N
N    /* Active pipeline */
N    int32_t     cmd_status[IPC_IMAGE_ACTIVE_MAX];
X    int32_t     cmd_status[2];
N    int32_t     img_index_done[IPC_IMAGE_ACTIVE_MAX]; // for debug only
X    int32_t     img_index_done[2]; 
N
N    /* Images result info corresponding to raw_images[] */
N    struct kdp_img_result_s img_results[IPC_IMAGE_MAX];
X    struct kdp_img_result_s img_results[5];
N};
N
N/* scpu_to_ncpu: cmd */
Nenum {
N    CMD_NO,
N    CMD_STOP_NPU,
N    CMD_RUN_NPU,
N    CMD_RUN_NPU_1,
N    CMD_RUN_NCPU,
N    CMD_RUN_NCPU_1,
N};
N
N/* ncpu_to_scpu: status */
Nenum {
N    STATUS_ERR = -1,
N    STATUS_INIT = 0,
N    STATUS_OK,
N    STATUS_OK_1,
N    STATUS_DDR_FAULT = -101,
N};
N
Nstruct nir_camera_tune_s{
N    uint8_t     init_tile;
N    uint8_t     nir_mode;
N    float       init_nir_gain;
N    float       nir_gain;
N    uint32_t    nir_cur_exp_time;
N    uint32_t    calibration_count;
N    float       registered_offsetX;
N    float       registered_offsetY;
N    uint8_t     rgb_led_flag;
N    uint8_t     rgb_avg_luma;
N    float       x_scaling;
N    uint8_t     d_offset;
N    uint8_t     pass_type;
N    _Bool       ignore_rgb_led;
N    _Bool       bctc;
N    uint8_t     input_nir_led_on_tile;
N    uint8_t     nir_led_flag;
N    uint8_t     input_distance;
N    uint32_t    rgb_cur_exp_time;
N    uint32_t    rgb_init_exp_time; 
N    uint8_t     pre_gain;
N    uint8_t     post_gain;
N    uint8_t     global_gain;
N    uint8_t     y_average;
N    float       rgb_lm_score;
N    float       nir_lv_cnn_face_real_score;
N    float       fuse_lv_cnn_real_score;
N    
N};
N
Nstruct lv_params_s {
N    uint32_t dual_landmarks[DUAL_LAND_MARK_POINTS * 2];
X    uint32_t dual_landmarks[10 * 2];
N    uint32_t dual_landmarks_3d[DUAL_LAND_MARK_POINTS * 2];
X    uint32_t dual_landmarks_3d[10 * 2];
N    struct nir_camera_tune_s nir_tune;
N};
N
N#endif
L 12 "..\..\..\..\common\include\dbg.h" 2
N
N//#define DEV_TEST_VERSION
N//#define DEV_PKT_LOG_DETAIL
N
N#define LOG_NONE        0
N#define LOG_USER        1
N#define LOG_CRITICAL    1
N#define LOG_ERROR       2
N
N#define LOG_INFO        4
N#define LOG_TRACE       5
N#define LOG_DBG         6
N#define LOG_PROFILE     9
N
N#define DEBUG_CONSOLE                  DRVUART_PORT0
N
N#ifdef DEV_TEST_VERSION
S#undef CUSTOMER_SETTING_REMOVE_LOG
N#else
N#define CUSTOMER_SETTING_REMOVE_LOG
N#endif
N
N#ifdef  LOG_ENABLE
N
N#ifdef TARGET_NCPU
S
Sextern void fLib_printf(const char *f, ...);
S
Sextern struct scpu_to_ncpu_s *in_comm_p;
Sextern int ncpu_debug_level;
S#define log_get_level_ncpu()    (in_comm_p->debug_flags & 0x0000000F)
S    
S#ifdef CUSTOMER_SETTING_REMOVE_LOG
S    #define dbg_msg(fmt, ...) 
S    #define trace_msg(fmt, ...) 
S    #define info_msg(fmt, ...) 
S    #define err_msg(fmt, ...) fLib_printf(fmt, ##__VA_ARGS__)
S    #define critical_msg(fmt, ...) 
S    #define profile_msg(fmt, ...) 
S    #define dbg_msg_algo(fmt, ...) //MSG(LOG_CRITICAL, fmt, ##__VA_ARGS__) 
S    #define dbg_msg_algo2(fmt, ...) //MSG(LOG_CRITICAL, fmt, ##__VA_ARGS__) 
S#else
S    #define dbg_msg(fmt, ...) //MSG(LOG_DBG, fmt, ##__VA_ARGS__)
S    #define trace_msg(fmt, ...) //MSG(LOG_TRACE, fmt, ##__VA_ARGS__)
S    #define info_msg(fmt, ...) //MSG(LOG_INFO, fmt, ##__VA_ARGS__)
S    #define err_msg(fmt, ...) fLib_printf(fmt, ##__VA_ARGS__)
S    #define critical_msg(fmt, ...) fLib_printf(fmt, ##__VA_ARGS__)
S    #define profile_msg(fmt, ...) fLib_printf(fmt, ##__VA_ARGS__)
S    #define dbg_msg_algo(fmt, ...) fLib_printf(fmt, ##__VA_ARGS__)
S    #define dbg_msg_algo2(fmt, ...) //MSG(LOG_CRITICAL, fmt, ##__VA_ARGS__) 
S#endif   
S    
S    
N#else // TARGET_SCPU
N
Nextern struct scpu_to_ncpu_s *s_out_comm;
Nextern int scpu_debug_level;
N
N#define MSG(level, format, ...) \
N    do {                                                   \
N        if (level <= scpu_debug_level)                     \
N            kdp_printf(format, ##__VA_ARGS__);            \
N    } while (0)
X#define MSG(level, format, ...)     do {                                                           if (level <= scpu_debug_level)                                 kdp_printf(format, ##__VA_ARGS__);                } while (0)
N
N
Nvoid kdp_printf(const char *f, ...);
Nvoid kdp_level_printf(int level, const char *fmt, ...);
Nvoid kdp_user_level_printf(int level, const char *fmt, ...);
Nvoid kdp_printf_nocrlf(const char *f, ...);
N    
N#define dbg_msg(fmt, ...) //MSG(LOG_DBG, fmt, ##__VA_ARGS__)
N#define trace_msg(fmt, ...) MSG(LOG_TRACE, fmt, ##__VA_ARGS__)
N#define info_msg(fmt, ...) //MSG(LOG_INFO, fmt, ##__VA_ARGS__)
N#define err_msg(fmt, ...) kdp_level_printf(LOG_ERROR, fmt, ##__VA_ARGS__)
N#define critical_msg(fmt, ...) MSG(LOG_CRITICAL, fmt, ##__VA_ARGS__)
N#define profile_msg(fmt, ...) MSG(LOG_PROFILE, fmt, ##__VA_ARGS__)
N
N
N#ifdef CUSTOMER_SETTING_REMOVE_LOG
N    #define dbg_msg_console(__format__, ...) kdp_level_printf(LOG_USER, __format__"\r\n", ##__VA_ARGS__)
N    #define dbg_msg_err(__format__, ...) kdp_level_printf(LOG_ERROR, __format__"\r\n", ##__VA_ARGS__)
N    #define dbg_msg_flash(__format__, ...) //kdp_level_printf(LOG_ERROR, __format__"\r\n", ##__VA_ARGS__)
N    #define dbg_msg_camera(__format__, ...) //kdp_level_printf(LOG_ERROR, __format__"\r\n", ##__VA_ARGS__)
N    #define dbg_msg_display(__format__, ...) //kdp_level_printf(LOG_ERROR, __format__"\r\n", ##__VA_ARGS__)
N    #define dbg_msg_touch(__format__, ...) //kdp_level_printf(LOG_ERROR, __format__"\r\n", ##__VA_ARGS__)
N    #define dbg_msg_com(__format__, ...) //kdp_level_printf(LOG_ERROR, __format__"\r\n", ##__VA_ARGS__)
N    #define dbg_msg_gui(__format__, ...) //kdp_level_printf(LOG_ERROR, __format__"\r\n", ##__VA_ARGS__)
N    #define dbg_msg_app(__format__, ...) //kdp_level_printf(LOG_ERROR, __format__"\r\n", ##__VA_ARGS__)
N    #define dbg_msg_e2e(__format__, ...) //kdp_level_printf(LOG_ERROR, __format__"\r\n", ##__VA_ARGS__)
N    #define dbg_msg_api(__format__, ...) //kdp_level_printf(LOG_ERROR, __format__"\r\n", ##__VA_ARGS__)
N    #define dbg_msg_usb(__format__, ...) //{ kdp_printf(__format__"\r\n", ##__VA_ARGS__); }
N    #define dbg_msg_algo(__format__, ...) //kdp_level_printf(LOG_CRITICAL, __format__"\r\n", ##__VA_ARGS__)
N    #define dlog(__format__, ...) //kdp_level_printf(LOG_DBG, "[%s][%s] " __format__ "\r\n", DEF_LOG_CATEG, __func__, ##__VA_ARGS__)
N    #define dbg_msg_model(__format__, ...) kdp_level_printf(LOG_USER, __format__"\r\n", ##__VA_ARGS__)
N    #define dbg_msg_ncpu(__format__, ...) //kdp_level_printf(LOG_USER, __format__"\r\n", ##__VA_ARGS__)
N    #define dbg_msg_engineering(__format__, ...) //kdp_user_level_printf(LOG_USER, __format__"\r\n", ##__VA_ARGS__)
N    #define dbg_msg_tile(__format__, ...) //kdp_level_printf(LOG_USER, __format__, ##__VA_ARGS__)
N#else
S    #define dbg_msg_console(__format__, ...) kdp_printf(__format__"\r\n", ##__VA_ARGS__)
S    #define dbg_msg_err(__format__, ...) kdp_level_printf(LOG_ERROR, __format__"\r\n", ##__VA_ARGS__)
S    #define dbg_msg_flash(__format__, ...) //kdp_level_printf(LOG_ERROR, __format__"\r\n", ##__VA_ARGS__)
S    #define dbg_msg_camera(__format__, ...) //kdp_level_printf(LOG_ERROR, __format__"\r\n", ##__VA_ARGS__)
S    #define dbg_msg_display(__format__, ...) //kdp_level_printf(LOG_ERROR, __format__"\r\n", ##__VA_ARGS__)
S    #define dbg_msg_touch(__format__, ...) //kdp_level_printf(LOG_ERROR, __format__"\r\n", ##__VA_ARGS__)
S    #define dbg_msg_com(__format__, ...) //kdp_level_printf(LOG_ERROR, __format__"\r\n", ##__VA_ARGS__)
S    #define dbg_msg_gui(__format__, ...) //kdp_level_printf(LOG_ERROR, __format__"\r\n", ##__VA_ARGS__)
S    #define dbg_msg_app(__format__, ...) //kdp_level_printf(LOG_ERROR, __format__"\r\n", ##__VA_ARGS__)
S    #define dbg_msg_e2e(__format__, ...) //kdp_level_printf(LOG_ERROR, __format__"\r\n", ##__VA_ARGS__)
S    #define dbg_msg_api(__format__, ...) //kdp_level_printf(LOG_ERROR, __format__"\r\n", ##__VA_ARGS__)
S    #define dbg_msg_usb(__format__, ...) { kdp_printf(__format__"\r\n", ##__VA_ARGS__); }
S    #define dbg_msg_algo(__format__, ...) kdp_level_printf(LOG_CRITICAL, __format__"\r\n", ##__VA_ARGS__)
S    #define dlog(__format__, ...) kdp_level_printf(LOG_DBG, "[%s][%s] " __format__ "\r\n", DEF_LOG_CATEG, __func__, ##__VA_ARGS__)
S    #define dbg_msg_model(__format__, ...) kdp_level_printf(LOG_USER, __format__"\r\n", ##__VA_ARGS__)    
S    #define dbg_msg_ncpu(__format__, ...) //kdp_level_printf(LOG_USER, __format__"\r\n", ##__VA_ARGS__)
S    #define dbg_msg_engineering(__format__, ...) //kdp_user_level_printf(LOG_USER, __format__"\r\n", ##__VA_ARGS__)
S    #define dbg_msg_tile(__format__, ...) kdp_level_printf(LOG_USER, __format__, ##__VA_ARGS__)
N#endif 
N
N#define dbg_msg_user(__format__, ...) kdp_user_level_printf(LOG_USER, __format__"\r\n", ##__VA_ARGS__)
N#define dbg_msg_nocrlf(__format__, ...) { kdp_printf_nocrlf(__format__, ##__VA_ARGS__); }
N#define dbg_msg_console_zhian(__format__, ...) kdp_level_printf(LOG_USER, __format__"\r\n", ##__VA_ARGS__)
N
N
N#endif
N
N#else
S
N#endif // LOG_ENABLE
N
Nuint32_t log_get_level_scpu(void);
Nuint32_t log_get_user_level_scpu(void);
Nvoid log_set_level_scpu(uint32_t level);
Nvoid log_set_level_ncpu(uint32_t level);
Nvoid log_set_user_level_scpu(uint32_t level);
Nvoid log_set_user_level_ncpu(uint32_t level);
N
N#define kmdw_console_set_log_level_scpu log_set_level_scpu
N#define kmdw_console_set_log_level_ncpu log_set_level_ncpu
N
N#define ASSERT(x)   do { \
N                        if (!(x)) 	\
N                            for (;;)	\
N                                ; 		\
N                    } while (0)
X#define ASSERT(x)   do {                         if (!(x)) 	                            for (;;)	                                ; 		                    } while (0)
N
N#endif // __DBG_H__
L 32 "RTE/CMSIS/RTX_Config.c" 2
N
N// OS Idle Thread
N__WEAK __NO_RETURN void osRtxIdleThread (void *argument) {
X__attribute__((weak)) __declspec(noreturn) void osRtxIdleThread (void *argument) {
N    (void)argument;
Npower_manager_cpu_idle();
N}
N 
N// OS Error Callback function
N__WEAK uint32_t osRtxErrorNotify (uint32_t code, void *object_id) {
X__attribute__((weak)) uint32_t osRtxErrorNotify (uint32_t code, void *object_id) {
N  (void)object_id;
N
N  dbg_msg("scpu: osRtxErrorNotify: code=%d, object_id=0x%p\n", code, object_id);
X  ;
N#if 0
S  err_msg("scpu: osRtxErrorNotify: code=%d, object_id=0x%p\n", code, object_id);
S
S  switch (code) {
S    case osRtxErrorStackUnderflow:
S      // Stack overflow detected for thread (thread_id=object_id)
S      break;
S    case osRtxErrorISRQueueOverflow:
S      // ISR Queue overflow detected when inserting object (object_id)
S      break;
S    case osRtxErrorTimerQueueOverflow:
S      // User Timer Callback Queue overflow detected for timer (timer_id=object_id)
S      break;
S    case osRtxErrorClibSpace:
S      // Standard C/C++ library libspace not available: increase OS_THREAD_LIBSPACE_NUM
S      break;
S    case osRtxErrorClibMutex:
S      // Standard C/C++ library mutex initialization failed
S      break;
S    default:
S      // Reserved
S      break;
S  }
S  for (;;) {}
S//return 0U;
N#else
N  power_manager_error_notify(code, object_id);
N  return 0;
N#endif
N}
