; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\objects\w25q256jv.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\w25q256jv.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O3 --diag_suppress=9931 -I..\..\config -I..\..\..\..\board -I..\..\..\..\common\include -I..\..\..\..\scpu\device\include\CMSIS -I..\..\..\..\scpu\device\include\Kneron -I..\..\..\..\scpu\framework\include -I..\..\..\..\scpu\framework\include\framework -I..\..\..\..\scpu\drivers\include -I..\..\..\..\scpu\drivers\include\media\touch -I..\..\..\..\scpu\drivers\include\media\flash -I..\..\..\..\scpu\lib\kdp_system\inc -I..\..\..\..\scpu\lib\kdp_application\include\ -I..\..\..\..\scpu\lib\kdp_application\base\ -I..\..\..\..\scpu\lib\kdp_application\misc -I..\..\..\..\scpu\lib\kdp_e2e_r1n1\include -I..\..\..\..\scpu\include -I..\..\..\..\scpu\middleware\ota -I..\..\..\..\scpu\middleware\comm -I..\..\..\..\scpu\middleware\kdp_comm -I..\..\..\..\scpu\share -I..\..\..\..\scpu\share\gui_lib -I..\..\user -I.\RTE\CMSIS -I.\RTE\_Target-scpu -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\RTOS2\Include -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\RTOS2\RTX\Include -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\Device\ARM\ARMCM4\Include -D__RTX -D__MICROLIB -D__UVISION_VERSION=538 -D_RTE_ -DARMCM4_FP -D_RTE_ -DARM_MATH_CM4 -DTARGET_SCPU -DLOG_ENABLE -DKL520 -DHEAD_POSE_CHECK_PERCENT --omf_browse=.\objects\w25q256jv.crf ..\..\..\..\scpu\drivers\media\flash\W25Q256JV.c]
                          THUMB

                          AREA ||i._spi020_check_status_til_ready_2||, CODE, READONLY, ALIGN=2

                  _spi020_check_status_til_ready_2 PROC
;;;759    
;;;760    void _spi020_check_status_til_ready_2(void)
000000  4b05              LDR      r3,|L1.24|
;;;761    {
000002  b510              PUSH     {r4,lr}
;;;762        /* fill in command 0~3 */
;;;763        kdp520_spi_set_commands(SPI020_05_CMD0_ORG, SPI020_05_CMD1_ORG, SPI020_05_CMD2_ORG, SPI020_05_CMD3_ORG);
000004  2200              MOVS     r2,#0
000006  0599              LSLS     r1,r3,#22
000008  4610              MOV      r0,r2
00000a  f7fffffe          BL       kdp520_spi_set_commands
;;;764        /* wait for command complete */
;;;765        kdp520_spi_wait_command_complete();
00000e  e8bd4010          POP      {r4,lr}
000012  f7ffbffe          B.W      kdp520_spi_wait_command_complete
;;;766    }
;;;767    
                          ENDP

000016  0000              DCW      0x0000
                  |L1.24|
                          DCD      0x05000004

                          AREA ||i.address_protect_check||, CODE, READONLY, ALIGN=2

                  address_protect_check PROC
;;;301    
;;;302    kdp_status_t address_protect_check( UINT32 addr_start, UINT32 addr_end, UINT32 pro_start, UINT32 pro_end)
000000  b510              PUSH     {r4,lr}
;;;303    {
;;;304        if ( protect_bypass == 0 )
000002  4c0c              LDR      r4,|L2.52|
000004  7864              LDRB     r4,[r4,#1]  ; protect_bypass
000006  b99c              CBNZ     r4,|L2.48|
;;;305        {
;;;306            if( ( ( addr_start < pro_start ) && ( addr_end >= pro_start ) ) 
000008  4290              CMP      r0,r2
00000a  d201              BCS      |L2.16|
00000c  4291              CMP      r1,r2
00000e  d207              BCS      |L2.32|
                  |L2.16|
;;;307                  || ( ( addr_start == pro_start ) && ( addr_end > pro_end ) )
000010  4290              CMP      r0,r2
000012  d101              BNE      |L2.24|
000014  4299              CMP      r1,r3
000016  d803              BHI      |L2.32|
                  |L2.24|
;;;308                  || ( ( addr_start > pro_start ) && ( addr_start < pro_end ) ) 
000018  4290              CMP      r0,r2
00001a  d909              BLS      |L2.48|
00001c  4298              CMP      r0,r3
00001e  d207              BCS      |L2.48|
                  |L2.32|
;;;309              )
;;;310            {
;;;311                dbg_msg_console ("trying to modify flash:%x,%x.\n", addr_start, addr_end);
000020  460b              MOV      r3,r1
000022  4602              MOV      r2,r0
000024  a104              ADR      r1,|L2.56|
000026  2001              MOVS     r0,#1
000028  f7fffffe          BL       kdp_level_printf
;;;312                return KDP_STATUS_ERROR;
00002c  2000              MOVS     r0,#0
;;;313            }
;;;314        }
;;;315        return KDP_STATUS_OK;
;;;316    }
00002e  bd10              POP      {r4,pc}
                  |L2.48|
000030  2001              MOVS     r0,#1                 ;315
000032  bd10              POP      {r4,pc}
;;;317    
                          ENDP

                  |L2.52|
                          DCD      ||.data||
                  |L2.56|
000038  74727969          DCB      "trying to modify flash:%x,%x.\n\r\n",0
00003c  6e672074
000040  6f206d6f
000044  64696679
000048  20666c61
00004c  73683a25
000050  782c2578
000054  2e0a0d0a
000058  00      
000059  00                DCB      0
00005a  00                DCB      0
00005b  00                DCB      0

                          AREA ||i.kdp520_flash_check_status_til_ready||, CODE, READONLY, ALIGN=1

                  kdp520_flash_check_status_til_ready PROC
;;;767    
;;;768    void kdp520_flash_check_status_til_ready(void)
000000  b510              PUSH     {r4,lr}
;;;769    {
;;;770        /* savecodesize, move into here */
;;;771        kdp520_spi_wait_command_complete();
000002  f7fffffe          BL       kdp520_spi_wait_command_complete
;;;772        /* read status */
;;;773        _spi020_check_status_til_ready_2();
000006  e8bd4010          POP      {r4,lr}
00000a  f7ffbffe          B.W      _spi020_check_status_til_ready_2
;;;774    }
;;;775    
                          ENDP


                          AREA ||i.kdp520_flash_dma_read_stop||, CODE, READONLY, ALIGN=1

                  kdp520_flash_dma_read_stop PROC
;;;775    
;;;776    void kdp520_flash_dma_read_stop(void)
000000  b510              PUSH     {r4,lr}
;;;777    {
;;;778        kdp520_spi_wait_command_complete();/* wait for command complete */
000002  f7fffffe          BL       kdp520_spi_wait_command_complete
;;;779    //  kdp520_flash_check_status_til_ready();
;;;780    
;;;781        outw((INT8U * )SPI020REG_INTERRUPT, SPI020_cmd_cmplt_intr_en);/* disable DMA function */
000006  f04f4120          MOV      r1,#0xa0000000
00000a  2002              MOVS     r0,#2
00000c  6208              STR      r0,[r1,#0x20]
;;;782    }
00000e  bd10              POP      {r4,pc}
;;;783    
                          ENDP


                          AREA ||i.kdp520_flash_dma_write_stop||, CODE, READONLY, ALIGN=1

                  kdp520_flash_dma_write_stop PROC
;;;783    
;;;784    void kdp520_flash_dma_write_stop(void)
000000  b510              PUSH     {r4,lr}
;;;785    {
;;;786        kdp520_spi_wait_command_complete();/* savecodesize, move into kdp520_flash_check_status_til_ready */
000002  f7fffffe          BL       kdp520_spi_wait_command_complete
;;;787        outw((INT8U * )SPI020REG_INTERRUPT, SPI020_cmd_cmplt_intr_en);/* disable DMA function */
000006  f04f4120          MOV      r1,#0xa0000000
00000a  2002              MOVS     r0,#2
00000c  6208              STR      r0,[r1,#0x20]
;;;788        //kdp520_flash_check_status_til_ready();
;;;789        _spi020_check_status_til_ready_2();
00000e  e8bd4010          POP      {r4,lr}
000012  f7ffbffe          B.W      _spi020_check_status_til_ready_2
;;;790    }
;;;791    
                          ENDP


                          AREA ||i.kdp520_flash_reset||, CODE, READONLY, ALIGN=2

                  kdp520_flash_reset PROC
;;;735    
;;;736    void kdp520_flash_reset(void)
000000  b510              PUSH     {r4,lr}
;;;737    {
;;;738        kdp520_spi_set_commands(RESET_66_CMD0, RESET_66_CMD1, RESET_66_CMD2, RESET_66_CMD3);
000002  4b07              LDR      r3,|L6.32|
000004  2200              MOVS     r2,#0
000006  05dc              LSLS     r4,r3,#23
000008  4621              MOV      r1,r4
00000a  4610              MOV      r0,r2
00000c  f7fffffe          BL       kdp520_spi_set_commands
;;;739        kdp520_spi_set_commands(RESET_99_CMD0, RESET_99_CMD1, RESET_99_CMD2, RESET_99_CMD3);
000010  4621              MOV      r1,r4
000012  2200              MOVS     r2,#0
000014  e8bd4010          POP      {r4,lr}
000018  4b02              LDR      r3,|L6.36|
00001a  4610              MOV      r0,r2
00001c  f7ffbffe          B.W      kdp520_spi_set_commands
;;;740    }
;;;741    
                          ENDP

                  |L6.32|
                          DCD      0x66000002
                  |L6.36|
                          DCD      0x99000002

                          AREA ||i.model_protect_check||, CODE, READONLY, ALIGN=2

                  model_protect_check PROC
;;;317    
;;;318    kdp_status_t model_protect_check( UINT32 addr_start, UINT32 addr_end )
000000  b570              PUSH     {r4-r6,lr}
;;;319    {
000002  460c              MOV      r4,r1
000004  4605              MOV      r5,r0
;;;320        kdp_status_t result = KDP_STATUS_OK;
;;;321        
;;;322        /*FW_INFO*/
;;;323        result = address_protect_check( addr_start, addr_end, KDP_FLASH_INF_ADDR, ( KDP_FLASH_INF_ADDR + KDP_FLASH_INF_SIZE ) );
000006  4b08              LDR      r3,|L7.40|
000008  4a08              LDR      r2,|L7.44|
00000a  f7fffffe          BL       address_protect_check
;;;324        /*ALL_MODELS*/
;;;325        if ( result == KDP_STATUS_OK )
00000e  2801              CMP      r0,#1
000010  d108              BNE      |L7.36|
;;;326        {
;;;327            result = address_protect_check( addr_start, addr_end, KDP_FLASH_ALL_MODELS_ADDR, ( KDP_FLASH_ALL_MODELS_ADDR + KDP_FLASH_ALL_MODELS_SIZE ) );
000012  4621              MOV      r1,r4
000014  4628              MOV      r0,r5
000016  e8bd4070          POP      {r4-r6,lr}
00001a  4b05              LDR      r3,|L7.48|
00001c  f44f12a2          MOV      r2,#0x144000
000020  f7ffbffe          B.W      address_protect_check
                  |L7.36|
;;;328        }
;;;329        
;;;330        return result;
;;;331    }
000024  bd70              POP      {r4-r6,pc}
;;;332    
                          ENDP

000026  0000              DCW      0x0000
                  |L7.40|
                          DCD      0x00fd3000
                  |L7.44|
                          DCD      0x00fd1000
                  |L7.48|
                          DCD      0x00fd0540

                          AREA ||i.nor_flash_quad_mode_en||, CODE, READONLY, ALIGN=2

                  nor_flash_quad_mode_en PROC
;;;93     
;;;94     void nor_flash_quad_mode_en(UINT8 enable)
000000  b538              PUSH     {r3-r5,lr}
;;;95     {
000002  4604              MOV      r4,r0
;;;96         UINT8 status2 = 0;
000004  2000              MOVS     r0,#0
000006  f88d0000          STRB     r0,[sp,#0]
;;;97         UINT8 flag;
;;;98         status2 = norflash_quad_mode_read();
00000a  f7fffffe          BL       norflash_quad_mode_read
00000e  f88d0000          STRB     r0,[sp,#0]
;;;99     
;;;100        flag = status2 & 0x02;
000012  f0000102          AND      r1,r0,#2
;;;101        if((enable && flag) || ((!enable) && (!flag)))
000016  b10c              CBZ      r4,|L8.28|
000018  2900              CMP      r1,#0
00001a  d11c              BNE      |L8.86|
                  |L8.28|
00001c  4321              ORRS     r1,r1,r4
00001e  d01a              BEQ      |L8.86|
;;;102        {
;;;103            return;
;;;104        }
;;;105        status2 &= 0x40;
000020  f0000040          AND      r0,r0,#0x40
000024  f88d0000          STRB     r0,[sp,#0]
;;;106        if (enable)
000028  b11c              CBZ      r4,|L8.50|
;;;107        {
;;;108            status2 |= 0x02;
00002a  f0400002          ORR      r0,r0,#2
00002e  f88d0000          STRB     r0,[sp,#0]
                  |L8.50|
;;;109        }
;;;110    
;;;111        norflash_write_control_volatile(1);
000032  2001              MOVS     r0,#1
000034  f7fffffe          BL       norflash_write_control_volatile
;;;112        kdp520_spi_set_commands( WRITE_STAT_31_CMD0, WRITE_STAT_31_CMD1, WRITE_STAT_31_CMD2, WRITE_STAT_31_CMD3 );
000038  2201              MOVS     r2,#1
00003a  4b07              LDR      r3,|L8.88|
00003c  0611              LSLS     r1,r2,#24
00003e  2000              MOVS     r0,#0
000040  f7fffffe          BL       kdp520_spi_set_commands
;;;113        kdp520_spi_write_data(&status2, 1);
000044  2101              MOVS     r1,#1
000046  4668              MOV      r0,sp
000048  f7fffffe          BL       kdp520_spi_write_data
;;;114        kdp520_flash_check_status_til_ready();
00004c  f7fffffe          BL       kdp520_flash_check_status_til_ready
;;;115        norflash_write_control(0);
000050  2000              MOVS     r0,#0
000052  f7fffffe          BL       norflash_write_control
                  |L8.86|
;;;116    }
000056  bd38              POP      {r3-r5,pc}
;;;117    
                          ENDP

                  |L8.88|
                          DCD      0x31000002

                          AREA ||i.norflash_32k_erase||, CODE, READONLY, ALIGN=2

                  norflash_32k_erase PROC
;;;371    
;;;372    kdp_status_t norflash_32k_erase(UINT32 offset)
000000  b510              PUSH     {r4,lr}
;;;373    {
000002  4604              MOV      r4,r0
;;;374        kdp520_spi_switch_fail();
000004  f7fffffe          BL       kdp520_spi_switch_fail
;;;375    
;;;376        /*Protect FW_INFO and ALL_MODELS*/
;;;377        if ( model_protect_check( offset, (offset + 32768) ) == KDP_STATUS_ERROR )
000008  f5044100          ADD      r1,r4,#0x8000
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       model_protect_check
000012  2800              CMP      r0,#0
000014  d015              BEQ      |L9.66|
;;;378        {
;;;379            return KDP_STATUS_ERROR;
;;;380        }
;;;381        
;;;382        norflash_write_control(1);/* send write enabled */
000016  2001              MOVS     r0,#1
000018  f7fffffe          BL       norflash_write_control
;;;383        kdp520_spi_set_commands(offset, ERASE_32K_52_CMD1, ERASE_32K_52_CMD2, ERASE_32K_52_CMD3);
00001c  4b09              LDR      r3,|L9.68|
00001e  2200              MOVS     r2,#0
000020  4909              LDR      r1,|L9.72|
000022  4620              MOV      r0,r4
000024  f7fffffe          BL       kdp520_spi_set_commands
;;;384        kdp520_spi_wait_command_complete();
000028  f7fffffe          BL       kdp520_spi_wait_command_complete
                  |L9.44|
;;;385    
;;;386        while(1)
;;;387        {
;;;388            if( ( norflash_busy_check() & 0x01) == 0x00)
00002c  f7fffffe          BL       norflash_busy_check
000030  07c0              LSLS     r0,r0,#31
000032  d003              BEQ      |L9.60|
;;;389            {
;;;390                break;
;;;391            }
;;;392    
;;;393            delay_us(50);
000034  2032              MOVS     r0,#0x32
000036  f7fffffe          BL       delay_us
00003a  e7f7              B        |L9.44|
                  |L9.60|
;;;394        }
;;;395        kdp520_spi_switch_org();
00003c  f7fffffe          BL       kdp520_spi_switch_org
;;;396        return KDP_STATUS_OK;
000040  2001              MOVS     r0,#1
                  |L9.66|
;;;397    }
000042  bd10              POP      {r4,pc}
;;;398    
                          ENDP

                  |L9.68|
                          DCD      0x52000002
                  |L9.72|
                          DCD      0x01000003

                          AREA ||i.norflash_4Bytes_ctrl||, CODE, READONLY, ALIGN=2

                  norflash_4Bytes_ctrl PROC
;;;35     
;;;36     void norflash_4Bytes_ctrl(UINT8 enable)
000000  b510              PUSH     {r4,lr}
;;;37     {
;;;38         if (enable) {
;;;39             kdp520_spi_set_commands(ENTER_4B_ADD_B7_CMD0, ENTER_4B_ADD_B7_CMD1, ENTER_4B_ADD_B7_CMD2, ENTER_4B_ADD_B7_CMD3);
000002  f04f7180          MOV      r1,#0x1000000
000006  b108              CBZ      r0,|L10.12|
000008  4b05              LDR      r3,|L10.32|
00000a  e000              B        |L10.14|
                  |L10.12|
;;;40         } else {
;;;41             kdp520_spi_set_commands(EXIT_4B_ADD_E9_CMD0, EXIT_4B_ADD_E9_CMD1, EXIT_4B_ADD_E9_CMD2, EXIT_4B_ADD_E9_CMD3);
00000c  4b05              LDR      r3,|L10.36|
                  |L10.14|
00000e  2200              MOVS     r2,#0
000010  4610              MOV      r0,r2
000012  f7fffffe          BL       kdp520_spi_set_commands
;;;42         }
;;;43         kdp520_spi_wait_command_complete();
000016  e8bd4010          POP      {r4,lr}
00001a  f7ffbffe          B.W      kdp520_spi_wait_command_complete
;;;44     }
;;;45     
                          ENDP

00001e  0000              DCW      0x0000
                  |L10.32|
                          DCD      0xb7000002
                  |L10.36|
                          DCD      0xe9000002

                          AREA ||i.norflash_4k_erase||, CODE, READONLY, ALIGN=2

                  norflash_4k_erase PROC
;;;332    
;;;333    kdp_status_t norflash_4k_erase(UINT32 address)
000000  b510              PUSH     {r4,lr}
;;;334    {
000002  4604              MOV      r4,r0
;;;335        kdp520_spi_switch_fail();
000004  f7fffffe          BL       kdp520_spi_switch_fail
;;;336    
;;;337        norflash_write_control(1);
000008  2001              MOVS     r0,#1
00000a  f7fffffe          BL       norflash_write_control
;;;338        while(1){
;;;339            if( ( norflash_busy_check() & 0x03) == 0x02)
00000e  bf00              NOP      
                  |L11.16|
000010  f7fffffe          BL       norflash_busy_check
000014  f0000003          AND      r0,r0,#3
000018  2802              CMP      r0,#2
00001a  d1f9              BNE      |L11.16|
;;;340            {
;;;341                break;
;;;342            }
;;;343        }
;;;344        
;;;345            /*Protect FW_INFO and ALL_MODELS*/
;;;346        if ( model_protect_check( address, (address + 4096) ) == KDP_STATUS_ERROR )
00001c  f5045180          ADD      r1,r4,#0x1000
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       model_protect_check
000026  2800              CMP      r0,#0
000028  d01b              BEQ      |L11.98|
;;;347        {
;;;348            return KDP_STATUS_ERROR;
;;;349        }
;;;350        
;;;351        //send erase sector index for 4kByte erase
;;;352        if (flash_4byte_en)
00002a  480e              LDR      r0,|L11.100|
00002c  7800              LDRB     r0,[r0,#0]  ; flash_4byte_en
00002e  b118              CBZ      r0,|L11.56|
;;;353            kdp520_spi_set_commands( address , ERASE_4K_21_CMD1, ERASE_4K_21_CMD2, ERASE_4K_21_CMD3);
000030  4b0d              LDR      r3,|L11.104|
000032  2200              MOVS     r2,#0
000034  490d              LDR      r1,|L11.108|
000036  e003              B        |L11.64|
                  |L11.56|
;;;354        else
;;;355            kdp520_spi_set_commands( address , SPI020_20_CMD1, SPI020_20_CMD2, SPI020_20_CMD3);
000038  490c              LDR      r1,|L11.108|
00003a  4b0d              LDR      r3,|L11.112|
00003c  2200              MOVS     r2,#0
00003e  1e49              SUBS     r1,r1,#1
                  |L11.64|
000040  4620              MOV      r0,r4
000042  f7fffffe          BL       kdp520_spi_set_commands
;;;356        kdp520_spi_wait_command_complete();
000046  f7fffffe          BL       kdp520_spi_wait_command_complete
;;;357    
;;;358        while(1)
;;;359        {
;;;360            if( ( norflash_busy_check() & 0x01) == 0x00)
00004a  bf00              NOP      
                  |L11.76|
00004c  f7fffffe          BL       norflash_busy_check
000050  07c0              LSLS     r0,r0,#31
000052  d003              BEQ      |L11.92|
;;;361            {
;;;362                break;
;;;363            }
;;;364    
;;;365            delay_us(50);
000054  2032              MOVS     r0,#0x32
000056  f7fffffe          BL       delay_us
00005a  e7f7              B        |L11.76|
                  |L11.92|
;;;366        }
;;;367        kdp520_spi_switch_org();
00005c  f7fffffe          BL       kdp520_spi_switch_org
;;;368        return KDP_STATUS_OK;
000060  2001              MOVS     r0,#1
                  |L11.98|
;;;369    }
000062  bd10              POP      {r4,pc}
;;;370    
                          ENDP

                  |L11.100|
                          DCD      ||.data||
                  |L11.104|
                          DCD      0x21000002
                  |L11.108|
                          DCD      0x01000004
                  |L11.112|
                          DCD      0x20000002

                          AREA ||i.norflash_64k_erase||, CODE, READONLY, ALIGN=2

                  norflash_64k_erase PROC
;;;398    
;;;399    kdp_status_t norflash_64k_erase(UINT32 offset)
000000  b510              PUSH     {r4,lr}
;;;400    {
000002  4604              MOV      r4,r0
;;;401        kdp520_spi_switch_fail();
000004  f7fffffe          BL       kdp520_spi_switch_fail
;;;402        norflash_write_control(1);  /* send write enabled */
000008  2001              MOVS     r0,#1
00000a  f7fffffe          BL       norflash_write_control
;;;403        while(1){
;;;404            if( ( norflash_busy_check() & 0x03 ) == 0x02 )
00000e  bf00              NOP      
                  |L12.16|
000010  f7fffffe          BL       norflash_busy_check
000014  f0000003          AND      r0,r0,#3
000018  2802              CMP      r0,#2
00001a  d1f9              BNE      |L12.16|
;;;405            {
;;;406                break;
;;;407            }
;;;408        }
;;;409    
;;;410        /*Protect FW_INFO and ALL_MODELS*/
;;;411        if ( model_protect_check( offset, (offset + 65536) ) == KDP_STATUS_ERROR )
00001c  f5043180          ADD      r1,r4,#0x10000
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       model_protect_check
000026  2800              CMP      r0,#0
000028  d01b              BEQ      |L12.98|
;;;412        {
;;;413            return KDP_STATUS_ERROR;
;;;414        }
;;;415    
;;;416        //send erase sector index for 64kByte erase
;;;417        if (flash_4byte_en)
00002a  480e              LDR      r0,|L12.100|
00002c  7800              LDRB     r0,[r0,#0]  ; flash_4byte_en
00002e  b118              CBZ      r0,|L12.56|
;;;418            kdp520_spi_set_commands(offset, ERASE_64K_DC_CMD1, ERASE_64K_DC_CMD2, ERASE_64K_DC_CMD3);
000030  4b0d              LDR      r3,|L12.104|
000032  2200              MOVS     r2,#0
000034  490d              LDR      r1,|L12.108|
000036  e003              B        |L12.64|
                  |L12.56|
;;;419        else
;;;420            kdp520_spi_set_commands(offset, SPI020_D8_CMD1, SPI020_D8_CMD2, SPI020_D8_CMD3);
000038  490c              LDR      r1,|L12.108|
00003a  4b0d              LDR      r3,|L12.112|
00003c  2200              MOVS     r2,#0
00003e  1e49              SUBS     r1,r1,#1
                  |L12.64|
000040  4620              MOV      r0,r4
000042  f7fffffe          BL       kdp520_spi_set_commands
;;;421        kdp520_spi_wait_command_complete();
000046  f7fffffe          BL       kdp520_spi_wait_command_complete
;;;422    
;;;423        while(1){
;;;424            if( ( norflash_busy_check() & 0x01) == 0x00 )
00004a  bf00              NOP      
                  |L12.76|
00004c  f7fffffe          BL       norflash_busy_check
000050  07c0              LSLS     r0,r0,#31
000052  d003              BEQ      |L12.92|
;;;425            {
;;;426                break;
;;;427            }
;;;428            delay_us(50);
000054  2032              MOVS     r0,#0x32
000056  f7fffffe          BL       delay_us
00005a  e7f7              B        |L12.76|
                  |L12.92|
;;;429        }
;;;430    
;;;431        kdp520_spi_switch_org();
00005c  f7fffffe          BL       kdp520_spi_switch_org
;;;432        return KDP_STATUS_OK;
000060  2001              MOVS     r0,#1
                  |L12.98|
;;;433    }
000062  bd10              POP      {r4,pc}
;;;434    
                          ENDP

                  |L12.100|
                          DCD      ||.data||
                  |L12.104|
                          DCD      0xdc000002
                  |L12.108|
                          DCD      0x01000004
                  |L12.112|
                          DCD      0xd8000002

                          AREA ||i.norflash_busy_check||, CODE, READONLY, ALIGN=2

                  norflash_busy_check PROC
;;;22     
;;;23     UINT8 norflash_busy_check(void)
000000  b510              PUSH     {r4,lr}
;;;24     {
000002  b086              SUB      sp,sp,#0x18
;;;25         UINT32   r_buffer_index=0;
000004  2400              MOVS     r4,#0
;;;26         UINT32   r_buffer[5];
;;;27         kdp520_spi_switch_fail();
000006  9405              STR      r4,[sp,#0x14]
000008  f7fffffe          BL       kdp520_spi_switch_fail
;;;28         kdp520_spi_set_commands( STATUS_05_CMD0, STATUS_05_CMD1, STATUS_05_CMD2, STATUS_05_CMD3 );
00000c  2201              MOVS     r2,#1
00000e  4b09              LDR      r3,|L13.52|
000010  0611              LSLS     r1,r2,#24
000012  2000              MOVS     r0,#0
000014  f7fffffe          BL       kdp520_spi_set_commands
;;;29         r_buffer_index = 0;
;;;30         kdp520_spi_read_Rx_FIFO( r_buffer, &r_buffer_index, 1 );
000018  2201              MOVS     r2,#1
00001a  a905              ADD      r1,sp,#0x14
00001c  4668              MOV      r0,sp
00001e  9405              STR      r4,[sp,#0x14]
000020  f7fffffe          BL       kdp520_spi_read_Rx_FIFO
;;;31         kdp520_spi_wait_command_complete();
000024  f7fffffe          BL       kdp520_spi_wait_command_complete
;;;32         kdp520_spi_switch_org();
000028  f7fffffe          BL       kdp520_spi_switch_org
;;;33         return r_buffer[0];
00002c  9800              LDR      r0,[sp,#0]
;;;34     }
00002e  b006              ADD      sp,sp,#0x18
000030  b2c0              UXTB     r0,r0                 ;33
000032  bd10              POP      {r4,pc}
;;;35     
                          ENDP

                  |L13.52|
                          DCD      0x05000008

                          AREA ||i.norflash_chip_erase||, CODE, READONLY, ALIGN=2

                  norflash_chip_erase PROC
;;;435    
;;;436    kdp_status_t norflash_chip_erase(void)
000000  b510              PUSH     {r4,lr}
;;;437    {
;;;438        kdp520_spi_switch_fail();
000002  f7fffffe          BL       kdp520_spi_switch_fail
;;;439        norflash_write_control(1);
000006  2001              MOVS     r0,#1
000008  f7fffffe          BL       norflash_write_control
                  |L14.12|
;;;440        while(1){
;;;441            if( ( norflash_busy_check() & 0x03 ) == 0x02)
00000c  f7fffffe          BL       norflash_busy_check
000010  f0000003          AND      r0,r0,#3
000014  2802              CMP      r0,#2
000016  d1f9              BNE      |L14.12|
;;;442                break;
;;;443        }
;;;444        kdp520_spi_set_commands(CHIP_ERASE_C7_CMD0, CHIP_ERASE_C7_CMD1, CHIP_ERASE_C7_CMD2, CHIP_ERASE_C7_CMD3);
000018  2200              MOVS     r2,#0
00001a  05c1              LSLS     r1,r0,#23
00001c  4b08              LDR      r3,|L14.64|
00001e  4610              MOV      r0,r2
000020  f7fffffe          BL       kdp520_spi_set_commands
;;;445        kdp520_spi_wait_command_complete();
000024  f7fffffe          BL       kdp520_spi_wait_command_complete
                  |L14.40|
;;;446    
;;;447        while(1){
;;;448            if( ( norflash_busy_check() & 0x01) == 0x00 )
000028  f7fffffe          BL       norflash_busy_check
00002c  07c0              LSLS     r0,r0,#31
00002e  d003              BEQ      |L14.56|
;;;449                break;
;;;450            delay_us(50);
000030  2032              MOVS     r0,#0x32
000032  f7fffffe          BL       delay_us
000036  e7f7              B        |L14.40|
                  |L14.56|
;;;451        }
;;;452    
;;;453        kdp520_spi_switch_org();
000038  f7fffffe          BL       kdp520_spi_switch_org
;;;454        return KDP_STATUS_OK;
00003c  2001              MOVS     r0,#1
;;;455    }
00003e  bd10              POP      {r4,pc}
;;;456    
                          ENDP

                  |L14.64|
                          DCD      0xc7000002

                          AREA ||i.norflash_erase_multi_sector||, CODE, READONLY, ALIGN=2

                  norflash_erase_multi_sector PROC
;;;666    
;;;667    kdp_status_t norflash_erase_multi_sector(UINT32 nstart_add,  UINT32 nend_add)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;668    {
;;;669    
;;;670        UINT32 nstart_index = nstart_add /st_flash_info.sector_size_Bytes;
000004  4e1b              LDR      r6,|L15.116|
000006  89f2              LDRH     r2,[r6,#0xe]  ; st_flash_info
000008  fbb0f4f2          UDIV     r4,r0,r2
;;;671        UINT32 nend_index = nend_add/st_flash_info.sector_size_Bytes;
00000c  fbb1f5f2          UDIV     r5,r1,r2
;;;672        if( ( nend_add%st_flash_info.sector_size_Bytes) == 0  && nend_index > nstart_index ){
000010  fbb1f3f2          UDIV     r3,r1,r2
000014  fb021213          MLS      r2,r2,r3,r1
000018  b912              CBNZ     r2,|L15.32|
00001a  42a5              CMP      r5,r4
00001c  d900              BLS      |L15.32|
00001e  1e6d              SUBS     r5,r5,#1
                  |L15.32|
;;;673            nend_index --;
;;;674        }
;;;675    
;;;676        UINT16  i =0;
;;;677        //UINT16 nBlock_numbers = st_flash_info.sector_size_Bytes / st_flash_info.block_size_Bytes;
;;;678        UINT16 nsectors_in_block = 0;
;;;679    
;;;680        //dbg_msg_flash(" Block erase start=======" );
;;;681        //dbg_msg_flash(" start sector index %d, end %d", nstart_index, nend_index );
;;;682    
;;;683        nsectors_in_block = st_flash_info.block_size_Bytes;
000020  8a32              LDRH     r2,[r6,#0x10]  ; st_flash_info
;;;684    
;;;685        if( nstart_index > nend_index )
000022  42ac              CMP      r4,r5
000024  b297              UXTH     r7,r2                 ;683
000026  d902              BLS      |L15.46|
;;;686        {
;;;687            return KDP_STATUS_ERROR;
000028  2000              MOVS     r0,#0
                  |L15.42|
;;;688        }
;;;689    
;;;690        /*Protect FW_INFO and ALL_MODELS*/
;;;691        if ( model_protect_check( nstart_add, nend_add ) == KDP_STATUS_ERROR )
;;;692        {
;;;693            return KDP_STATUS_ERROR;
;;;694        }
;;;695    
;;;696        for( i = nstart_index; i<= nend_index; ){
;;;697            if( (i%nsectors_in_block) == 0){
;;;698                if( (i+nsectors_in_block-1) <= nend_index ){
;;;699                    norflash_64k_erase( i*st_flash_info.sector_size_Bytes );
;;;700                    i+= nsectors_in_block;
;;;701                }
;;;702                else{
;;;703                    //4K erase
;;;704                    norflash_4k_erase( i*st_flash_info.sector_size_Bytes );
;;;705                    i++;
;;;706                }
;;;707            }
;;;708            else{
;;;709                //4K erase
;;;710                norflash_4k_erase( i*st_flash_info.sector_size_Bytes );
;;;711                i++;
;;;712            }
;;;713        }
;;;714        return KDP_STATUS_OK;
;;;715    }
00002a  e8bd81f0          POP      {r4-r8,pc}
                  |L15.46|
00002e  f7fffffe          BL       model_protect_check
000032  2800              CMP      r0,#0                 ;691
000034  d0f9              BEQ      |L15.42|
                  |L15.54|
000036  b2a4              UXTH     r4,r4                 ;696
000038  e011              B        |L15.94|
00003a  bf00              NOP                            ;697
                  |L15.60|
00003c  fbb4f0f7          UDIV     r0,r4,r7              ;697
000040  fb074010          MLS      r0,r7,r0,r4           ;697
000044  b978              CBNZ     r0,|L15.102|
000046  eb040807          ADD      r8,r4,r7              ;698
00004a  f1a80001          SUB      r0,r8,#1              ;698
00004e  42a8              CMP      r0,r5                 ;698
000050  d809              BHI      |L15.102|
000052  89f0              LDRH     r0,[r6,#0xe]          ;699  ; st_flash_info
000054  4360              MULS     r0,r4,r0              ;699
000056  f7fffffe          BL       norflash_64k_erase
00005a  fa1ff488          UXTH     r4,r8                 ;700
                  |L15.94|
00005e  42ac              CMP      r4,r5                 ;696
000060  d9ec              BLS      |L15.60|
000062  2001              MOVS     r0,#1                 ;714
000064  e7e1              B        |L15.42|
                  |L15.102|
000066  89f0              LDRH     r0,[r6,#0xe]          ;704  ; st_flash_info
000068  4360              MULS     r0,r4,r0              ;704
00006a  f7fffffe          BL       norflash_4k_erase
00006e  1c64              ADDS     r4,r4,#1              ;704
000070  e7e1              B        |L15.54|
;;;716    
                          ENDP

000072  0000              DCW      0x0000
                  |L15.116|
                          DCD      st_flash_info

                          AREA ||i.norflash_get_info||, CODE, READONLY, ALIGN=2

                  norflash_get_info PROC
;;;119    
;;;120    kdp_status_t norflash_get_info(void)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;121    {
000004  b087              SUB      sp,sp,#0x1c
;;;122        #define SPI_Rx_SIZE     (5)
;;;123        UINT32  nrx_buff_word_index = 0;
;;;124        UINT32  nrx_buff_word[ SPI_Rx_SIZE ];
;;;125        UINT32  ntemp =0;
;;;126    
;;;127        //do
;;;128        if( st_flash_info.page_size_Bytes == 256 && st_flash_info.block_size_Bytes != 0 )
000006  4cc5              LDR      r4,|L16.796|
000008  2500              MOVS     r5,#0                 ;123
00000a  9505              STR      r5,[sp,#0x14]
00000c  89a0              LDRH     r0,[r4,#0xc]  ; st_flash_info
00000e  f44f7980          MOV      r9,#0x100
000012  4548              CMP      r0,r9
000014  d102              BNE      |L16.28|
000016  6920              LDR      r0,[r4,#0x10]  ; st_flash_info
000018  2800              CMP      r0,#0
00001a  d16e              BNE      |L16.250|
                  |L16.28|
;;;129        {
;;;130            return  KDP_STATUS_OK;
;;;131        }
;;;132        kdp520_spi_switch_fail();
00001c  f7fffffe          BL       kdp520_spi_switch_fail
;;;133    
;;;134        norflash_write_control_volatile(1);
000020  2001              MOVS     r0,#1
000022  f7fffffe          BL       norflash_write_control_volatile
;;;135    
;;;136        nrx_buff_word_index =0;
;;;137        kdp520_spi_set_commands(STATUS_15_CMD0, STATUS_15_CMD1, STATUS_15_CMD2, STATUS_15_CMD3);
000026  4fbe              LDR      r7,|L16.800|
000028  f04f7b80          MOV      r11,#0x1000000
00002c  463b              MOV      r3,r7
00002e  2201              MOVS     r2,#1
000030  465e              MOV      r6,r11
000032  4659              MOV      r1,r11
000034  2000              MOVS     r0,#0
000036  9505              STR      r5,[sp,#0x14]
000038  f7fffffe          BL       kdp520_spi_set_commands
;;;138        kdp520_spi_read_Rx_FIFO( nrx_buff_word, &nrx_buff_word_index, 0x01 );
00003c  2201              MOVS     r2,#1
00003e  a905              ADD      r1,sp,#0x14
000040  4668              MOV      r0,sp
000042  f7fffffe          BL       kdp520_spi_read_Rx_FIFO
;;;139        kdp520_spi_wait_command_complete();
000046  f7fffffe          BL       kdp520_spi_wait_command_complete
;;;140    
;;;141        norflash_write_control_volatile(1);
00004a  2001              MOVS     r0,#1
00004c  f7fffffe          BL       norflash_write_control_volatile
;;;142    
;;;143        //Driving
;;;144        kdp520_spi_set_commands( 0x00 , WRITE_STAT_11_CMD1, WRITE_STAT_11_CMD2, WRITE_STAT_11_CMD3 );
000050  2200              MOVS     r2,#0
000052  4bb4              LDR      r3,|L16.804|
000054  f10b0101          ADD      r1,r11,#1
000058  4610              MOV      r0,r2
00005a  f7fffffe          BL       kdp520_spi_set_commands
;;;145        kdp520_spi_wait_command_complete();
00005e  f7fffffe          BL       kdp520_spi_wait_command_complete
;;;146        delay_ms(15);   //delay_us(300);
000062  200f              MOVS     r0,#0xf
000064  f7fffffe          BL       delay_ms
;;;147    
;;;148        nrx_buff_word_index =0;
;;;149        kdp520_spi_set_commands(STATUS_15_CMD0, STATUS_15_CMD1, STATUS_15_CMD2, STATUS_15_CMD3);
000068  463b              MOV      r3,r7
00006a  2201              MOVS     r2,#1
00006c  4631              MOV      r1,r6
00006e  2000              MOVS     r0,#0
000070  9505              STR      r5,[sp,#0x14]
000072  f7fffffe          BL       kdp520_spi_set_commands
;;;150        kdp520_spi_read_Rx_FIFO( nrx_buff_word, &nrx_buff_word_index, 0x01 );
000076  2201              MOVS     r2,#1
000078  a905              ADD      r1,sp,#0x14
00007a  4668              MOV      r0,sp
00007c  f7fffffe          BL       kdp520_spi_read_Rx_FIFO
;;;151        kdp520_spi_wait_command_complete();
000080  f7fffffe          BL       kdp520_spi_wait_command_complete
;;;152    
;;;153        //read quad bit
;;;154        nrx_buff_word_index =0;
;;;155        kdp520_spi_set_commands(STATUS_35_CMD0, STATUS_35_CMD1, STATUS_35_CMD2, STATUS_35_CMD3);//bessel:wait interrupt instead of delay
000084  4ba8              LDR      r3,|L16.808|
000086  2201              MOVS     r2,#1
000088  4631              MOV      r1,r6
00008a  2000              MOVS     r0,#0
00008c  9505              STR      r5,[sp,#0x14]
00008e  f7fffffe          BL       kdp520_spi_set_commands
;;;156        kdp520_spi_read_Rx_FIFO( nrx_buff_word, &nrx_buff_word_index, 0x01 );
000092  2201              MOVS     r2,#1
000094  a905              ADD      r1,sp,#0x14
000096  4668              MOV      r0,sp
000098  f7fffffe          BL       kdp520_spi_read_Rx_FIFO
;;;157        kdp520_spi_wait_command_complete();
00009c  f7fffffe          BL       kdp520_spi_wait_command_complete
;;;158    
;;;159        //read driving
;;;160        nrx_buff_word_index =0;
;;;161        kdp520_spi_set_commands(STATUS_15_CMD0, STATUS_15_CMD1, STATUS_15_CMD2, STATUS_15_CMD3);
0000a0  463b              MOV      r3,r7
0000a2  2201              MOVS     r2,#1
0000a4  4631              MOV      r1,r6
0000a6  2000              MOVS     r0,#0
0000a8  9505              STR      r5,[sp,#0x14]
0000aa  f7fffffe          BL       kdp520_spi_set_commands
;;;162        kdp520_spi_read_Rx_FIFO( nrx_buff_word, &nrx_buff_word_index, 0x01 );
0000ae  2201              MOVS     r2,#1
0000b0  a905              ADD      r1,sp,#0x14
0000b2  4668              MOV      r0,sp
0000b4  f7fffffe          BL       kdp520_spi_read_Rx_FIFO
;;;163        kdp520_spi_wait_command_complete();
0000b8  f7fffffe          BL       kdp520_spi_wait_command_complete
;;;164    
;;;165        //check status
;;;166        nrx_buff_word_index =0;
;;;167        kdp520_spi_set_commands( 0x00 , PARA_5A_CMD1, 0x04, PARA_5A_CMD3);
0000bc  4f9b              LDR      r7,|L16.812|
0000be  f8dfa270          LDR      r10,|L16.816|
0000c2  463b              MOV      r3,r7
0000c4  2204              MOVS     r2,#4
0000c6  4651              MOV      r1,r10
0000c8  2000              MOVS     r0,#0
0000ca  9505              STR      r5,[sp,#0x14]
0000cc  f7fffffe          BL       kdp520_spi_set_commands
;;;168        kdp520_spi_read_Rx_FIFO( nrx_buff_word, &nrx_buff_word_index, 0x04 );
0000d0  2204              MOVS     r2,#4
0000d2  a905              ADD      r1,sp,#0x14
0000d4  4668              MOV      r0,sp
0000d6  f7fffffe          BL       kdp520_spi_read_Rx_FIFO
;;;169        kdp520_spi_wait_command_complete();
0000da  f7fffffe          BL       kdp520_spi_wait_command_complete
;;;170        st_flash_info.signature = FLASH_SIGNATURE;
0000de  4895              LDR      r0,|L16.820|
;;;171    
;;;172        //check
;;;173        if( nrx_buff_word[nrx_buff_word_index-1] != FLASH_SIGNATURE )
0000e0  6020              STR      r0,[r4,#0]  ; st_flash_info
0000e2  9905              LDR      r1,[sp,#0x14]
0000e4  466e              MOV      r6,sp
0000e6  eb060181          ADD      r1,r6,r1,LSL #2
0000ea  f8511c04          LDR      r1,[r1,#-4]
0000ee  4281              CMP      r1,r0
0000f0  d004              BEQ      |L16.252|
;;;174        {
;;;175            return  KDP_STATUS_ERROR;
0000f2  2000              MOVS     r0,#0
                  |L16.244|
;;;176        }
;;;177    
;;;178        //get ptr
;;;179        nrx_buff_word_index =0;
;;;180        kdp520_spi_set_commands( 0x0C , PARA_5A_CMD1, 0x01, PARA_5A_CMD3);
;;;181        kdp520_spi_read_Rx_FIFO( nrx_buff_word, &nrx_buff_word_index, 0x01 );
;;;182        kdp520_spi_wait_command_complete();
;;;183        st_flash_info.PTP = nrx_buff_word[nrx_buff_word_index-1] & 0XFF;
;;;184    
;;;185        //get ID
;;;186        nrx_buff_word_index =0;
;;;187        kdp520_spi_set_commands( 0x10 , PARA_5A_CMD1, 0x04, PARA_5A_CMD3);
;;;188        kdp520_spi_read_Rx_FIFO( nrx_buff_word, &nrx_buff_word_index, 0x04 );
;;;189        kdp520_spi_wait_command_complete();
;;;190        st_flash_info.ID = nrx_buff_word[nrx_buff_word_index-1] & 0XFFFFFFFF;
;;;191    
;;;192        if( st_flash_info.ID== 0x00 || st_flash_info.ID==0xFF  )
;;;193        {
;;;194            nrx_buff_word_index =0;
;;;195            kdp520_spi_set_commands( RDID_9F_CMD0 , RDID_9F_CMD1, RDID_9F_CMD2, RDID_9F_CMD3 );
;;;196            kdp520_spi_read_Rx_FIFO( nrx_buff_word, &nrx_buff_word_index, RDID_9F_CMD2 );
;;;197            kdp520_spi_wait_command_complete();
;;;198            st_flash_info.ID = nrx_buff_word[nrx_buff_word_index-1] & 0xFF;
;;;199        }
;;;200    
;;;201        //get 4K erase support
;;;202        nrx_buff_word_index =0;
;;;203        kdp520_spi_set_commands( st_flash_info.PTP + 0, PARA_5A_CMD1, 0x01, PARA_5A_CMD3);
;;;204        kdp520_spi_read_Rx_FIFO( nrx_buff_word, &nrx_buff_word_index, 0x01 );
;;;205        kdp520_spi_wait_command_complete();
;;;206        st_flash_info.erase_4K_support = nrx_buff_word[nrx_buff_word_index-1] & 0x3;
;;;207    
;;;208        //get size
;;;209        nrx_buff_word_index =0;
;;;210        kdp520_spi_set_commands( st_flash_info.PTP+4 , PARA_5A_CMD1, 0x04, PARA_5A_CMD3);
;;;211        kdp520_spi_read_Rx_FIFO( nrx_buff_word, &nrx_buff_word_index, 0x04 );
;;;212        kdp520_spi_wait_command_complete();
;;;213        st_flash_info.flash_size_KByte = (nrx_buff_word[nrx_buff_word_index-1]>>10)>>3;
;;;214        ntemp = nrx_buff_word[nrx_buff_word_index-1]>>3;
;;;215    
;;;216        //get sector size 0x1C
;;;217        nrx_buff_word_index =0;
;;;218        kdp520_spi_set_commands( st_flash_info.PTP+0x1C , PARA_5A_CMD1, 0x01, PARA_5A_CMD3);
;;;219        kdp520_spi_read_Rx_FIFO( nrx_buff_word, &nrx_buff_word_index, 0x01 );
;;;220        kdp520_spi_wait_command_complete();
;;;221        st_flash_info.sector_size_Bytes = 1<<(nrx_buff_word[ nrx_buff_word_index-1 ]&0xFF);
;;;222        st_flash_info.total_sector_numbers = (ntemp / st_flash_info.sector_size_Bytes)+1;
;;;223    
;;;224        //get sector size 0x20
;;;225        nrx_buff_word_index =0;
;;;226        kdp520_spi_set_commands( st_flash_info.PTP+0x20 , PARA_5A_CMD1, 0x01, PARA_5A_CMD3);
;;;227        kdp520_spi_read_Rx_FIFO( nrx_buff_word, &nrx_buff_word_index, 0x01 );
;;;228        kdp520_spi_wait_command_complete();
;;;229        st_flash_info.block_size_Bytes = ( 1<<( nrx_buff_word[ nrx_buff_word_index-1 ] & 0xFF ) )/st_flash_info.sector_size_Bytes ;
;;;230    
;;;231        //get page size
;;;232        nrx_buff_word_index =0;
;;;233        kdp520_spi_set_commands( st_flash_info.PTP+0x28 , PARA_5A_CMD1, 0x01, PARA_5A_CMD3);
;;;234        kdp520_spi_read_Rx_FIFO( nrx_buff_word, &nrx_buff_word_index, 0x01 );
;;;235        kdp520_spi_wait_command_complete();
;;;236        ntemp = nrx_buff_word[nrx_buff_word_index-1]&0xFF;
;;;237    
;;;238        #if 0
;;;239        //20191219 add
;;;240        nrx_buff_word_index =0;
;;;241        kdp520_spi_set_commands(STATUS_15_CMD0, STATUS_15_CMD1, STATUS_15_CMD2, STATUS_15_CMD3);
;;;242        kdp520_spi_read_Rx_FIFO( nrx_buff_word, &nrx_buff_word_index, 0x01 );
;;;243        kdp520_spi_wait_command_complete();
;;;244        nrx_buff_word_index =0;
;;;245        kdp520_spi_set_commands(STATUS_35_CMD0, STATUS_35_CMD1, STATUS_35_CMD2, STATUS_35_CMD3);
;;;246        kdp520_spi_read_Rx_FIFO( nrx_buff_word, &nrx_buff_word_index, 0x01 );
;;;247        kdp520_spi_wait_command_complete();
;;;248        #endif
;;;249    
;;;250        kdp520_spi_switch_org();
;;;251        // if( (ntemp>>4) == FLASH_PAGE_SIZE_256_CODE )
;;;252        {
;;;253            st_flash_info.page_size_Bytes = 256;
;;;254        }
;;;255        // else
;;;256        // {
;;;257        //     st_flash_info.page_size_Bytes = 0;
;;;258        //     //return  KDP_STATUS_ERROR;
;;;259        // }
;;;260        
;;;261    #if (FLASH_SIZE >= FLASH_16MB)
;;;262        if((st_flash_info.erase_4K_support == 1) &&
;;;263            (st_flash_info.flash_size_KByte == 16383) &&
;;;264            (st_flash_info.sector_size_Bytes == 4096) &&
;;;265            (st_flash_info.total_sector_numbers == 4096) &&
;;;266            (st_flash_info.block_size_Bytes == 16) &&
;;;267            (st_flash_info.page_size_Bytes == 256 ) )
;;;268        {
;;;269            flash_4byte_en = false;
;;;270            dbg_msg_console("FLASH_SIZE: 16M");
;;;271        }
;;;272        else
;;;273    #endif
;;;274    #if (FLASH_SIZE >= FLASH_32MB)
;;;275        if((st_flash_info.erase_4K_support == 1) &&
;;;276            (st_flash_info.flash_size_KByte == 32767) &&
;;;277            (st_flash_info.sector_size_Bytes == 4096) &&
;;;278            (st_flash_info.total_sector_numbers == 8192) &&
;;;279            (st_flash_info.block_size_Bytes == 16) &&
;;;280            (st_flash_info.page_size_Bytes == 256 ) )
;;;281        {
;;;282            flash_4byte_en = true;
;;;283            dbg_msg_console("FLASH_SIZE: 32M");
;;;284        }
;;;285        else
;;;286    #endif
;;;287        {
;;;288            dbg_msg_console("[FIX]flash or driver must be repaired");
;;;289            dbg_msg_console("erase_4K_support:%d", st_flash_info.erase_4K_support);
;;;290            dbg_msg_console("flash_size_KByte:%d", st_flash_info.flash_size_KByte);
;;;291            dbg_msg_console("sector_size_Bytes:%d", st_flash_info.sector_size_Bytes);
;;;292            dbg_msg_console("total_sector_numbers:%d", st_flash_info.total_sector_numbers);
;;;293            dbg_msg_console("block_size_Bytes:%d", st_flash_info.block_size_Bytes);
;;;294            dbg_msg_console("page_size_Bytes:%d", st_flash_info.page_size_Bytes);
;;;295            while (1);
;;;296        }
;;;297    
;;;298        return  KDP_STATUS_OK;
;;;299    
;;;300    }
0000f4  b007              ADD      sp,sp,#0x1c
0000f6  e8bd8ff0          POP      {r4-r11,pc}
                  |L16.250|
0000fa  e10c              B        |L16.790|
                  |L16.252|
0000fc  46b8              MOV      r8,r7                 ;180
0000fe  463b              MOV      r3,r7                 ;180
000100  2201              MOVS     r2,#1                 ;180
000102  4657              MOV      r7,r10                ;180
000104  4651              MOV      r1,r10                ;180
000106  200c              MOVS     r0,#0xc               ;180
000108  9505              STR      r5,[sp,#0x14]         ;180
00010a  f7fffffe          BL       kdp520_spi_set_commands
00010e  2201              MOVS     r2,#1                 ;181
000110  a905              ADD      r1,sp,#0x14           ;181
000112  4668              MOV      r0,sp                 ;181
000114  f7fffffe          BL       kdp520_spi_read_Rx_FIFO
000118  f7fffffe          BL       kdp520_spi_wait_command_complete
00011c  9805              LDR      r0,[sp,#0x14]         ;183
00011e  4643              MOV      r3,r8                 ;187
000120  eb060080          ADD      r0,r6,r0,LSL #2       ;183
000124  2204              MOVS     r2,#4                 ;187
000126  f8100c04          LDRB     r0,[r0,#-4]           ;183
00012a  7120              STRB     r0,[r4,#4]            ;183
00012c  4639              MOV      r1,r7                 ;187
00012e  2010              MOVS     r0,#0x10              ;187
000130  9505              STR      r5,[sp,#0x14]         ;187
000132  f7fffffe          BL       kdp520_spi_set_commands
000136  2204              MOVS     r2,#4                 ;188
000138  a905              ADD      r1,sp,#0x14           ;188
00013a  4668              MOV      r0,sp                 ;188
00013c  f7fffffe          BL       kdp520_spi_read_Rx_FIFO
000140  f7fffffe          BL       kdp520_spi_wait_command_complete
000144  9805              LDR      r0,[sp,#0x14]         ;190
000146  eb060080          ADD      r0,r6,r0,LSL #2       ;190
00014a  f8100c04          LDRB     r0,[r0,#-4]           ;190
00014e  f01000ff          ANDS     r0,r0,#0xff           ;190
000152  7160              STRB     r0,[r4,#5]            ;190
000154  d001              BEQ      |L16.346|
000156  28ff              CMP      r0,#0xff              ;192
000158  d114              BNE      |L16.388|
                  |L16.346|
00015a  f04f431f          MOV      r3,#0x9f000000        ;195
00015e  2203              MOVS     r2,#3                 ;195
000160  4659              MOV      r1,r11                ;195
000162  2000              MOVS     r0,#0                 ;195
000164  9505              STR      r5,[sp,#0x14]         ;195
000166  f7fffffe          BL       kdp520_spi_set_commands
00016a  2203              MOVS     r2,#3                 ;196
00016c  a905              ADD      r1,sp,#0x14           ;196
00016e  4668              MOV      r0,sp                 ;196
000170  f7fffffe          BL       kdp520_spi_read_Rx_FIFO
000174  f7fffffe          BL       kdp520_spi_wait_command_complete
000178  9805              LDR      r0,[sp,#0x14]         ;198
00017a  eb060080          ADD      r0,r6,r0,LSL #2       ;198
00017e  f8100c04          LDRB     r0,[r0,#-4]           ;198
000182  7160              STRB     r0,[r4,#5]            ;198
                  |L16.388|
000184  9505              STR      r5,[sp,#0x14]         ;203
000186  7920              LDRB     r0,[r4,#4]            ;203  ; st_flash_info
000188  46c3              MOV      r11,r8                ;203
00018a  4643              MOV      r3,r8                 ;203
00018c  2201              MOVS     r2,#1                 ;203
00018e  46ba              MOV      r10,r7                ;203
000190  4639              MOV      r1,r7                 ;203
000192  f7fffffe          BL       kdp520_spi_set_commands
000196  2201              MOVS     r2,#1                 ;204
000198  a905              ADD      r1,sp,#0x14           ;204
00019a  4668              MOV      r0,sp                 ;204
00019c  f7fffffe          BL       kdp520_spi_read_Rx_FIFO
0001a0  f7fffffe          BL       kdp520_spi_wait_command_complete
0001a4  9805              LDR      r0,[sp,#0x14]         ;206
0001a6  465b              MOV      r3,r11                ;210
0001a8  eb060080          ADD      r0,r6,r0,LSL #2       ;206
0001ac  2204              MOVS     r2,#4                 ;210
0001ae  f8100c04          LDRB     r0,[r0,#-4]           ;206
0001b2  4651              MOV      r1,r10                ;210
0001b4  f0000003          AND      r0,r0,#3              ;206
0001b8  71a0              STRB     r0,[r4,#6]            ;206
0001ba  9505              STR      r5,[sp,#0x14]         ;210
0001bc  7920              LDRB     r0,[r4,#4]            ;210  ; st_flash_info
0001be  1d00              ADDS     r0,r0,#4              ;210
0001c0  f7fffffe          BL       kdp520_spi_set_commands
0001c4  2204              MOVS     r2,#4                 ;211
0001c6  a905              ADD      r1,sp,#0x14           ;211
0001c8  4668              MOV      r0,sp                 ;211
0001ca  f7fffffe          BL       kdp520_spi_read_Rx_FIFO
0001ce  f7fffffe          BL       kdp520_spi_wait_command_complete
0001d2  9805              LDR      r0,[sp,#0x14]         ;213
0001d4  465b              MOV      r3,r11                ;218
0001d6  eb060080          ADD      r0,r6,r0,LSL #2       ;213
0001da  2201              MOVS     r2,#1                 ;218
0001dc  f8500c04          LDR      r0,[r0,#-4]           ;213
0001e0  0b41              LSRS     r1,r0,#13             ;213
0001e2  60a1              STR      r1,[r4,#8]            ;217  ; st_flash_info
0001e4  08c7              LSRS     r7,r0,#3              ;214
0001e6  9505              STR      r5,[sp,#0x14]         ;218
0001e8  7920              LDRB     r0,[r4,#4]            ;218  ; st_flash_info
0001ea  4651              MOV      r1,r10                ;218
0001ec  301c              ADDS     r0,r0,#0x1c           ;218
0001ee  f7fffffe          BL       kdp520_spi_set_commands
0001f2  2201              MOVS     r2,#1                 ;219
0001f4  a905              ADD      r1,sp,#0x14           ;219
0001f6  4668              MOV      r0,sp                 ;219
0001f8  f7fffffe          BL       kdp520_spi_read_Rx_FIFO
0001fc  f7fffffe          BL       kdp520_spi_wait_command_complete
000200  9805              LDR      r0,[sp,#0x14]         ;221
000202  f04f0801          MOV      r8,#1                 ;221
000206  eb060080          ADD      r0,r6,r0,LSL #2       ;221
00020a  465b              MOV      r3,r11                ;226
00020c  f8101c04          LDRB     r1,[r0,#-4]           ;221
000210  4642              MOV      r2,r8                 ;226
000212  fa08f001          LSL      r0,r8,r1              ;221
000216  b280              UXTH     r0,r0                 ;221
000218  81e0              STRH     r0,[r4,#0xe]          ;221
00021a  fbb7f0f0          UDIV     r0,r7,r0              ;222
00021e  1c40              ADDS     r0,r0,#1              ;222
000220  82a0              STRH     r0,[r4,#0x14]         ;222
000222  9505              STR      r5,[sp,#0x14]         ;226
000224  7920              LDRB     r0,[r4,#4]            ;226  ; st_flash_info
000226  4651              MOV      r1,r10                ;226
000228  3020              ADDS     r0,r0,#0x20           ;226
00022a  f7fffffe          BL       kdp520_spi_set_commands
00022e  2201              MOVS     r2,#1                 ;227
000230  a905              ADD      r1,sp,#0x14           ;227
000232  4668              MOV      r0,sp                 ;227
000234  f7fffffe          BL       kdp520_spi_read_Rx_FIFO
000238  f7fffffe          BL       kdp520_spi_wait_command_complete
00023c  9805              LDR      r0,[sp,#0x14]         ;229
00023e  465b              MOV      r3,r11                ;233
000240  eb060080          ADD      r0,r6,r0,LSL #2       ;229
000244  2201              MOVS     r2,#1                 ;233
000246  f8101c04          LDRB     r1,[r0,#-4]           ;229
00024a  fa08f001          LSL      r0,r8,r1              ;229
00024e  89e1              LDRH     r1,[r4,#0xe]          ;229  ; st_flash_info
000250  fb90f0f1          SDIV     r0,r0,r1              ;229
000254  6120              STR      r0,[r4,#0x10]         ;232  ; st_flash_info
000256  9505              STR      r5,[sp,#0x14]         ;233
000258  7920              LDRB     r0,[r4,#4]            ;233  ; st_flash_info
00025a  4651              MOV      r1,r10                ;233
00025c  3028              ADDS     r0,r0,#0x28           ;233
00025e  f7fffffe          BL       kdp520_spi_set_commands
000262  2201              MOVS     r2,#1                 ;234
000264  a905              ADD      r1,sp,#0x14           ;234
000266  4668              MOV      r0,sp                 ;234
000268  f7fffffe          BL       kdp520_spi_read_Rx_FIFO
00026c  f7fffffe          BL       kdp520_spi_wait_command_complete
000270  f7fffffe          BL       kdp520_spi_switch_org
000274  f8a4900c          STRH     r9,[r4,#0xc]          ;253
000278  79a0              LDRB     r0,[r4,#6]            ;262  ; st_flash_info
00027a  2801              CMP      r0,#1                 ;262
00027c  d122              BNE      |L16.708|
00027e  68a1              LDR      r1,[r4,#8]            ;263  ; st_flash_info
000280  482d              LDR      r0,|L16.824|
000282  f5a1537c          SUB      r3,r1,#0x3f00         ;263
000286  f44f5280          MOV      r2,#0x1000            ;264
00028a  3bff              SUBS     r3,r3,#0xff           ;263
00028c  d108              BNE      |L16.672|
00028e  89e3              LDRH     r3,[r4,#0xe]          ;264  ; st_flash_info
000290  4293              CMP      r3,r2                 ;264
000292  d105              BNE      |L16.672|
000294  8aa3              LDRH     r3,[r4,#0x14]         ;265  ; st_flash_info
000296  4293              CMP      r3,r2                 ;265
000298  d102              BNE      |L16.672|
00029a  6923              LDR      r3,[r4,#0x10]         ;266  ; st_flash_info
00029c  2b10              CMP      r3,#0x10              ;266
00029e  d00b              BEQ      |L16.696|
                  |L16.672|
0002a0  f5a143fe          SUB      r3,r1,#0x7f00         ;276
0002a4  3bff              SUBS     r3,r3,#0xff           ;276
0002a6  d10d              BNE      |L16.708|
0002a8  89e1              LDRH     r1,[r4,#0xe]          ;277  ; st_flash_info
0002aa  4291              CMP      r1,r2                 ;277
0002ac  d10a              BNE      |L16.708|
0002ae  8aa1              LDRH     r1,[r4,#0x14]         ;278  ; st_flash_info
0002b0  f5b15f00          CMP      r1,#0x2000            ;278
0002b4  d003              BEQ      |L16.702|
0002b6  e005              B        |L16.708|
                  |L16.696|
0002b8  7005              STRB     r5,[r0,#0]            ;269
0002ba  a120              ADR      r1,|L16.828|
0002bc  e028              B        |L16.784|
                  |L16.702|
0002be  6921              LDR      r1,[r4,#0x10]         ;279  ; st_flash_info
0002c0  2910              CMP      r1,#0x10              ;279
0002c2  d022              BEQ      |L16.778|
                  |L16.708|
0002c4  a122              ADR      r1,|L16.848|
0002c6  2001              MOVS     r0,#1                 ;288
0002c8  f7fffffe          BL       kdp_level_printf
0002cc  79a2              LDRB     r2,[r4,#6]            ;289  ; st_flash_info
0002ce  a12a              ADR      r1,|L16.888|
0002d0  2001              MOVS     r0,#1                 ;289
0002d2  f7fffffe          BL       kdp_level_printf
0002d6  a12e              ADR      r1,|L16.912|
0002d8  2001              MOVS     r0,#1                 ;290
0002da  68a2              LDR      r2,[r4,#8]            ;290  ; st_flash_info
0002dc  f7fffffe          BL       kdp_level_printf
0002e0  89e2              LDRH     r2,[r4,#0xe]          ;291  ; st_flash_info
0002e2  a131              ADR      r1,|L16.936|
0002e4  2001              MOVS     r0,#1                 ;291
0002e6  f7fffffe          BL       kdp_level_printf
0002ea  8aa2              LDRH     r2,[r4,#0x14]         ;292  ; st_flash_info
0002ec  a134              ADR      r1,|L16.960|
0002ee  2001              MOVS     r0,#1                 ;292
0002f0  f7fffffe          BL       kdp_level_printf
0002f4  a139              ADR      r1,|L16.988|
0002f6  2001              MOVS     r0,#1                 ;293
0002f8  6922              LDR      r2,[r4,#0x10]         ;293  ; st_flash_info
0002fa  f7fffffe          BL       kdp_level_printf
0002fe  89a2              LDRH     r2,[r4,#0xc]          ;294  ; st_flash_info
000300  a13c              ADR      r1,|L16.1012|
000302  2001              MOVS     r0,#1                 ;294
000304  f7fffffe          BL       kdp_level_printf
                  |L16.776|
000308  e7fe              B        |L16.776|
                  |L16.778|
00030a  f8808000          STRB     r8,[r0,#0]            ;282
00030e  a13f              ADR      r1,|L16.1036|
                  |L16.784|
000310  2001              MOVS     r0,#1                 ;283
000312  f7fffffe          BL       kdp_level_printf
                  |L16.790|
000316  2001              MOVS     r0,#1                 ;298
000318  e6ec              B        |L16.244|
;;;301    
                          ENDP

00031a  0000              DCW      0x0000
                  |L16.796|
                          DCD      st_flash_info
                  |L16.800|
                          DCD      0x15000008
                  |L16.804|
                          DCD      0x11000002
                  |L16.808|
                          DCD      0x35000008
                  |L16.812|
                          DCD      0x5a000008
                  |L16.816|
                          DCD      0x01080003
                  |L16.820|
                          DCD      0x50444653
                  |L16.824|
                          DCD      ||.data||
                  |L16.828|
00033c  464c4153          DCB      "FLASH_SIZE: 16M\r\n",0
000340  485f5349
000344  5a453a20
000348  31364d0d
00034c  0a00    
00034e  00                DCB      0
00034f  00                DCB      0
                  |L16.848|
000350  5b464958          DCB      "[FIX]flash or driver must be repaired\r\n",0
000354  5d666c61
000358  7368206f
00035c  72206472
000360  69766572
000364  206d7573
000368  74206265
00036c  20726570
000370  61697265
000374  640d0a00
                  |L16.888|
000378  65726173          DCB      "erase_4K_support:%d\r\n",0
00037c  655f344b
000380  5f737570
000384  706f7274
000388  3a25640d
00038c  0a00    
00038e  00                DCB      0
00038f  00                DCB      0
                  |L16.912|
000390  666c6173          DCB      "flash_size_KByte:%d\r\n",0
000394  685f7369
000398  7a655f4b
00039c  42797465
0003a0  3a25640d
0003a4  0a00    
0003a6  00                DCB      0
0003a7  00                DCB      0
                  |L16.936|
0003a8  73656374          DCB      "sector_size_Bytes:%d\r\n",0
0003ac  6f725f73
0003b0  697a655f
0003b4  42797465
0003b8  733a2564
0003bc  0d0a00  
0003bf  00                DCB      0
                  |L16.960|
0003c0  746f7461          DCB      "total_sector_numbers:%d\r\n",0
0003c4  6c5f7365
0003c8  63746f72
0003cc  5f6e756d
0003d0  62657273
0003d4  3a25640d
0003d8  0a00    
0003da  00                DCB      0
0003db  00                DCB      0
                  |L16.988|
0003dc  626c6f63          DCB      "block_size_Bytes:%d\r\n",0
0003e0  6b5f7369
0003e4  7a655f42
0003e8  79746573
0003ec  3a25640d
0003f0  0a00    
0003f2  00                DCB      0
0003f3  00                DCB      0
                  |L16.1012|
0003f4  70616765          DCB      "page_size_Bytes:%d\r\n",0
0003f8  5f73697a
0003fc  655f4279
000400  7465733a
000404  25640d0a
000408  00      
000409  00                DCB      0
00040a  00                DCB      0
00040b  00                DCB      0
                  |L16.1036|
00040c  464c4153          DCB      "FLASH_SIZE: 32M\r\n",0
000410  485f5349
000414  5a453a20
000418  33324d0d
00041c  0a00    
00041e  00                DCB      0
00041f  00                DCB      0

                          AREA ||i.norflash_get_status||, CODE, READONLY, ALIGN=1

                  norflash_get_status PROC
;;;724    
;;;725    kdp_status_t norflash_get_status(void)
000000  b510              PUSH     {r4,lr}
;;;726    {
;;;727        UINT32 flash_status = norflash_busy_check() & 0x01;
000002  f7fffffe          BL       norflash_busy_check
000006  f0100f01          TST      r0,#1
;;;728        return ( flash_status == 1 ? KDP_STATUS_ERROR : KDP_STATUS_OK );
00000a  d001              BEQ      |L17.16|
00000c  2000              MOVS     r0,#0
;;;729    }
00000e  bd10              POP      {r4,pc}
                  |L17.16|
000010  2001              MOVS     r0,#1                 ;728
000012  bd10              POP      {r4,pc}
;;;730    
                          ENDP


                          AREA ||i.norflash_id||, CODE, READONLY, ALIGN=2

                  norflash_id PROC
;;;718    
;;;719    UINT8 norflash_id(void)
000000  4801              LDR      r0,|L18.8|
;;;720    {
;;;721        return st_flash_info.ID;
000002  7940              LDRB     r0,[r0,#5]  ; st_flash_info
;;;722    }
000004  4770              BX       lr
;;;723    
                          ENDP

000006  0000              DCW      0x0000
                  |L18.8|
                          DCD      st_flash_info

                          AREA ||i.norflash_program||, CODE, READONLY, ALIGN=2

                  norflash_program PROC
;;;610    
;;;611    kdp_status_t norflash_program( UINT32 addr, UINT8 *data, UINT32 send_bytes)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;612    {
000004  4607              MOV      r7,r0
;;;613        UINT32  i =0;
;;;614        //UINT32    data_acc = send_bytes;
;;;615        UINT32  pages_number = send_bytes / st_flash_info.page_size_Bytes;
000006  481c              LDR      r0,|L19.120|
000008  4613              MOV      r3,r2                 ;612
00000a  4689              MOV      r9,r1                 ;612
00000c  8984              LDRH     r4,[r0,#0xc]  ; st_flash_info
00000e  2500              MOVS     r5,#0                 ;613
;;;616        UINT16  nbytes_num = send_bytes % st_flash_info.page_size_Bytes;
000010  fbb2f0f4          UDIV     r0,r2,r4
000014  fbb2f6f4          UDIV     r6,r2,r4              ;615
000018  fb043010          MLS      r0,r4,r0,r3
00001c  fa1ff880          UXTH     r8,r0
;;;617        UINT16  page_size = st_flash_info.page_size_Bytes;
;;;618    
;;;619        #if( FLASH_QUAD_EN == YES )
;;;620        UINT8   flash_type = FLASH_QUAD_RW;
000020  f04f0a40          MOV      r10,#0x40
;;;621        #else
;;;622        UINT8   flash_type = FLASH_NORMAL;
;;;623        #endif
;;;624    
;;;625        #if( OTA_LOG_EN == YES )
;;;626        dbg_msg_flash("flash program start");
;;;627        #endif
;;;628    
;;;629        //----check page start address aligned ----
;;;630        if(  program_address_check( addr ) == 0 )
000024  4638              MOV      r0,r7
000026  f7fffffe          BL       program_address_check
00002a  2800              CMP      r0,#0
00002c  d002              BEQ      |L19.52|
;;;631        {
;;;632            return KDP_STATUS_ERROR;
;;;633        }
;;;634    
;;;635        if( (send_bytes %4) != 0 )
00002e  0798              LSLS     r0,r3,#30
000030  d002              BEQ      |L19.56|
;;;636        {
;;;637            return KDP_STATUS_ERROR;
000032  2000              MOVS     r0,#0
                  |L19.52|
;;;638        }
;;;639    
;;;640        /*Protect FW_INFO and ALL_MODELS*/
;;;641        if ( model_protect_check( addr, (addr + send_bytes) ) == KDP_STATUS_ERROR )
;;;642        {
;;;643            return KDP_STATUS_ERROR;
;;;644        }
;;;645    
;;;646        //parsing
;;;647        for( i=0; i<pages_number ; i++  )
;;;648        {
;;;649            norflash_write_running( flash_type, ((UINT32 )addr + (i*page_size)) , page_size, ( UINT8 *)(data + i*page_size) );
;;;650        }
;;;651        if( nbytes_num > 0 )
;;;652        {
;;;653            norflash_write_running( flash_type, ( (UINT32 )addr + ( page_size *pages_number ) )
;;;654                                    , nbytes_num, (UINT8 *)( data+ page_size * pages_number ) );
;;;655        }
;;;656    
;;;657        #if( OTA_LOG_EN == YES )
;;;658        dbg_msg_flash("flash program Done");
;;;659        #endif
;;;660    
;;;661        return KDP_STATUS_OK;
;;;662    
;;;663    
;;;664    }
000034  e8bd87f0          POP      {r4-r10,pc}
                  |L19.56|
000038  18f9              ADDS     r1,r7,r3              ;641
00003a  4638              MOV      r0,r7                 ;641
00003c  f7fffffe          BL       model_protect_check
000040  2800              CMP      r0,#0                 ;641
000042  d0f7              BEQ      |L19.52|
000044  e009              B        |L19.90|
000046  bf00              NOP                            ;649
                  |L19.72|
000048  fb059304          MLA      r3,r5,r4,r9           ;649
00004c  fb057104          MLA      r1,r5,r4,r7           ;649
000050  4622              MOV      r2,r4                 ;649
000052  4650              MOV      r0,r10                ;649
000054  f7fffffe          BL       norflash_write_running
000058  1c6d              ADDS     r5,r5,#1              ;649
                  |L19.90|
00005a  42b5              CMP      r5,r6                 ;647
00005c  d3f4              BCC      |L19.72|
00005e  f1b80f00          CMP      r8,#0                 ;651
000062  d007              BEQ      |L19.116|
000064  fb049306          MLA      r3,r4,r6,r9           ;653
000068  fb047106          MLA      r1,r4,r6,r7           ;653
00006c  4642              MOV      r2,r8                 ;653
00006e  4650              MOV      r0,r10                ;653
000070  f7fffffe          BL       norflash_write_running
                  |L19.116|
000074  2001              MOVS     r0,#1                 ;661
000076  e7dd              B        |L19.52|
;;;665    
                          ENDP

                  |L19.120|
                          DCD      st_flash_info

                          AREA ||i.norflash_quad_mode_read||, CODE, READONLY, ALIGN=2

                  norflash_quad_mode_read PROC
;;;69     
;;;70     UINT8 norflash_quad_mode_read(void)
000000  b500              PUSH     {lr}
;;;71     {
000002  b08b              SUB      sp,sp,#0x2c
;;;72     #if 0
;;;73         UINT8   tmpbuf;
;;;74         /* fill in command 0~3 */
;;;75         //kdp520_spi_set_commands(SPI020_05_CMD0_ORG, SPI020_05_CMD1_ORG, SPI020_05_CMD2_ORG, SPI020_05_CMD3_ORG&0xFFFFFFFE);
;;;76         kdp520_spi_set_commands(SPI020_35_CMD0, SPI020_35_CMD1, SPI020_35_CMD2, SPI020_35_CMD3);//bessel:wait interrupt instead of delay
;;;77         //main_delay_count(1000);
;;;78         kdp520_spi_wait_command_complete();
;;;79         tmpbuf = inl((INT8U * )SPI020REG_READ_ST);
;;;80         return tmpbuf;
;;;81     #else
;;;82         UINT32  nrx_buff_word_index = 0;
000004  2000              MOVS     r0,#0
;;;83         UINT32  nrx_buff_word[ 10 ];
;;;84         UINT8   tmpbuf;
;;;85         kdp520_spi_set_commands(STATUS_35_CMD0, STATUS_35_CMD1, STATUS_35_CMD2, STATUS_35_CMD3);
000006  2201              MOVS     r2,#1
000008  4b07              LDR      r3,|L20.40|
00000a  0611              LSLS     r1,r2,#24
00000c  900a              STR      r0,[sp,#0x28]
00000e  f7fffffe          BL       kdp520_spi_set_commands
;;;86         kdp520_spi_read_Rx_FIFO( nrx_buff_word, &nrx_buff_word_index, 0x01 );
000012  2201              MOVS     r2,#1
000014  a90a              ADD      r1,sp,#0x28
000016  4668              MOV      r0,sp
000018  f7fffffe          BL       kdp520_spi_read_Rx_FIFO
;;;87         kdp520_spi_wait_command_complete();
00001c  f7fffffe          BL       kdp520_spi_wait_command_complete
;;;88         tmpbuf = nrx_buff_word[0];
000020  9800              LDR      r0,[sp,#0]
;;;89     
;;;90         return tmpbuf;
;;;91     #endif
;;;92     }
000022  b00b              ADD      sp,sp,#0x2c
000024  b2c0              UXTB     r0,r0                 ;88
000026  bd00              POP      {pc}
;;;93     
                          ENDP

                  |L20.40|
                          DCD      0x35000008

                          AREA ||i.norflash_read||, CODE, READONLY, ALIGN=2

                  norflash_read PROC
;;;456    
;;;457    kdp_status_t norflash_read(uint32_t addr, void *data, uint32_t target_Bytes)
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;458    {
000004  4681              MOV      r9,r0
000006  4614              MOV      r4,r2
000008  460e              MOV      r6,r1
;;;459        s32 total_lens;
;;;460        //s32 access_byte;
;;;461        u32 write_addr;
;;;462        u32 read_data;
;;;463        //s32 rx_fifo_depth;
;;;464        if ((target_Bytes & 0x3) > 0) return KDP_STATUS_ERROR;
00000a  0790              LSLS     r0,r2,#30
00000c  d002              BEQ      |L21.20|
00000e  2000              MOVS     r0,#0
                  |L21.16|
;;;465    
;;;466        kdp520_spi_switch_org();
;;;467        total_lens = target_Bytes;
;;;468        write_addr = (u32)data;
;;;469        //rx_fifo_depth = (s32)kdp520_spi_rxfifo_depth();
;;;470    
;;;471        //kdp_flash_to_ddr_dma_copy((UINT32*)read_data, (UINT32*)write_addr, total_lens);
;;;472    
;;;473        while (total_lens > 0)
;;;474        {
;;;475            if(total_lens > DMA_LIMIT)
;;;476            {
;;;477                //dbg_msg_flash("[DMA] [DMA_LIMIT = %d] read_data = 0x%x, write_addr = 0x%x, total_lens = %d", DMA_LIMIT, read_data, write_addr, total_lens);
;;;478    
;;;479            if (flash_4byte_en)
;;;480            {
;;;481                norflash_4Bytes_ctrl(1);
;;;482                #ifdef SPI_QUAD_MODE
;;;483                    kdp520_spi_set_commands( (uint32_t)(addr) , QUAD_READ_EC_CMD1, DMA_LIMIT, QUAD_READ_EC_CMD3 );
;;;484                #else
;;;485                    #if SPI_BUS_SPEED == SPI_BUS_SPEED_100MHZ
;;;486                        dbg_msg_err("[%s] err, 13H cmd can not run on 100MHz");
;;;487                    #else
;;;488                        kdp520_spi_set_commands((uint32_t)data, SPI020_13_CMD1, DMA_LIMIT, SPI020_13_CMD3);
;;;489                    #endif
;;;490                #endif
;;;491            }
;;;492            else
;;;493            {
;;;494                #ifdef SPI_QUAD_MODE
;;;495                    kdp520_spi_set_commands( (uint32_t)(addr) , SPI020_EB_CMD1, DMA_LIMIT, SPI020_EB_CMD3 );
;;;496                #else
;;;497                    kdp520_spi_set_commands( (uint32_t)(addr) , SPI020_03_CMD1, DMA_LIMIT, SPI020_03_CMD3 );
;;;498                #endif
;;;499            }
;;;500    
;;;501                kdp_flash_to_ddr_dma_copy((UINT32*)read_data, (UINT32*)write_addr, DMA_LIMIT);
;;;502                addr += DMA_LIMIT;
;;;503                write_addr += DMA_LIMIT;
;;;504                total_lens -= DMA_LIMIT;
;;;505            }
;;;506            else
;;;507            {
;;;508                //dbg_msg_flash("[DMA] read_data = 0x%x, write_addr = 0x%x, total_lens = %d", read_data, write_addr, total_lens);
;;;509    
;;;510            if (flash_4byte_en)
;;;511            {
;;;512                norflash_4Bytes_ctrl(1);
;;;513                #ifdef SPI_QUAD_MODE
;;;514                    kdp520_spi_set_commands( (uint32_t)(addr) , QUAD_READ_EC_CMD1, total_lens, QUAD_READ_EC_CMD3 );
;;;515                #else
;;;516                    #if SPI_BUS_SPEED == SPI_BUS_SPEED_100MHZ
;;;517                        dbg_msg_err("[%s] err, 13H cmd can not run on 100MHz");
;;;518                    #else
;;;519                        kdp520_spi_set_commands((uint32_t)data, SPI020_13_CMD1, total_lens, SPI020_13_CMD3);
;;;520                    #endif
;;;521                #endif
;;;522            }
;;;523            else
;;;524            {
;;;525                #ifdef SPI_QUAD_MODE
;;;526                    kdp520_spi_set_commands( (uint32_t)(addr) , SPI020_EB_CMD1, total_lens, SPI020_EB_CMD3 );
;;;527                #else
;;;528                    kdp520_spi_set_commands( (uint32_t)(addr) , SPI020_03_CMD1, total_lens, SPI020_03_CMD3 );
;;;529                #endif
;;;530            }
;;;531    
;;;532                kdp_flash_to_ddr_dma_copy((UINT32*)read_data, (UINT32*)write_addr, total_lens);
;;;533                total_lens -= total_lens;
;;;534            }
;;;535        }
;;;536    
;;;537    
;;;538    
;;;539        #ifndef MIXING_MODE_OPEN_RENDERER
;;;540        //kdp520_spi_wait_command_complete();/* wait for command complete */
;;;541        #endif
;;;542    
;;;543        if (flash_4byte_en)
;;;544            norflash_4Bytes_ctrl(0);
;;;545    
;;;546        return KDP_STATUS_OK;
;;;547    }
000010  e8bd8ff8          POP      {r3-r11,pc}
                  |L21.20|
000014  f7fffffe          BL       kdp520_spi_switch_org
000018  4d22              LDR      r5,|L21.164|
00001a  f8dfa080          LDR      r10,|L21.156|
00001e  f8dfb080          LDR      r11,|L21.160|
000022  f1c50800          RSB      r8,r5,#0              ;504
000026  4f20              LDR      r7,|L21.168|
000028  e019              B        |L21.94|
                  |L21.42|
00002a  7838              LDRB     r0,[r7,#0]            ;510  ; flash_4byte_en
00002c  42ac              CMP      r4,r5                 ;475
00002e  dd1f              BLE      |L21.112|
000030  b130              CBZ      r0,|L21.64|
000032  2001              MOVS     r0,#1                 ;481
000034  f7fffffe          BL       norflash_4Bytes_ctrl
000038  4653              MOV      r3,r10                ;483
00003a  462a              MOV      r2,r5                 ;483
00003c  4659              MOV      r1,r11                ;483
00003e  e003              B        |L21.72|
                  |L21.64|
000040  4917              LDR      r1,|L21.160|
000042  4b1a              LDR      r3,|L21.172|
000044  462a              MOV      r2,r5                 ;495
000046  1e49              SUBS     r1,r1,#1              ;495
                  |L21.72|
000048  4648              MOV      r0,r9                 ;495
00004a  f7fffffe          BL       kdp520_spi_set_commands
00004e  462a              MOV      r2,r5                 ;501
000050  4631              MOV      r1,r6                 ;501
000052  9800              LDR      r0,[sp,#0]            ;501
000054  f7fffffe          BL       kdp_flash_to_ddr_dma_copy
000058  44a9              ADD      r9,r9,r5              ;502
00005a  442e              ADD      r6,r6,r5              ;503
00005c  4444              ADD      r4,r4,r8              ;504
                  |L21.94|
00005e  2c00              CMP      r4,#0                 ;473
000060  dce3              BGT      |L21.42|
                  |L21.98|
000062  7838              LDRB     r0,[r7,#0]            ;543  ; flash_4byte_en
000064  b110              CBZ      r0,|L21.108|
000066  2000              MOVS     r0,#0                 ;544
000068  f7fffffe          BL       norflash_4Bytes_ctrl
                  |L21.108|
00006c  2001              MOVS     r0,#1                 ;546
00006e  e7cf              B        |L21.16|
                  |L21.112|
000070  b130              CBZ      r0,|L21.128|
000072  2001              MOVS     r0,#1                 ;512
000074  f7fffffe          BL       norflash_4Bytes_ctrl
000078  4653              MOV      r3,r10                ;514
00007a  4622              MOV      r2,r4                 ;514
00007c  4659              MOV      r1,r11                ;514
00007e  e003              B        |L21.136|
                  |L21.128|
000080  4907              LDR      r1,|L21.160|
000082  4b0a              LDR      r3,|L21.172|
000084  4622              MOV      r2,r4                 ;526
000086  1e49              SUBS     r1,r1,#1              ;526
                  |L21.136|
000088  4648              MOV      r0,r9                 ;526
00008a  f7fffffe          BL       kdp520_spi_set_commands
00008e  4622              MOV      r2,r4                 ;532
000090  4631              MOV      r1,r6                 ;532
000092  9800              LDR      r0,[sp,#0]            ;532
000094  f7fffffe          BL       kdp_flash_to_ddr_dma_copy
000098  e7e3              B        |L21.98|
;;;548    
                          ENDP

00009a  0000              DCW      0x0000
                  |L21.156|
                          DCD      0xec000080
                  |L21.160|
                          DCD      0x01060004
                  |L21.164|
                          DCD      0x00fffffc
                  |L21.168|
                          DCD      ||.data||
                  |L21.172|
                          DCD      0xeb000080

                          AREA ||i.norflash_set_protect_bypass||, CODE, READONLY, ALIGN=2

                  norflash_set_protect_bypass PROC
;;;730    
;;;731    void norflash_set_protect_bypass(UINT8 bypass)
000000  4901              LDR      r1,|L22.8|
;;;732    {
;;;733        protect_bypass = bypass;
000002  7048              STRB     r0,[r1,#1]
;;;734    }
000004  4770              BX       lr
;;;735    
                          ENDP

000006  0000              DCW      0x0000
                  |L22.8|
                          DCD      ||.data||

                          AREA ||i.norflash_write_control||, CODE, READONLY, ALIGN=2

                  norflash_write_control PROC
;;;45     
;;;46     void norflash_write_control(UINT8 enable)
000000  b510              PUSH     {r4,lr}
;;;47     {
;;;48         /* fill in command 0~3 */
;;;49         if (enable) {
;;;50             kdp520_spi_set_commands(WRITE_CON_06_CMD0, WRITE_CON_06_CMD1, WRITE_CON_06_CMD2, WRITE_CON_06_CMD3);
000002  f04f7180          MOV      r1,#0x1000000
000006  b108              CBZ      r0,|L23.12|
000008  4b05              LDR      r3,|L23.32|
00000a  e000              B        |L23.14|
                  |L23.12|
;;;51         } else {
;;;52             kdp520_spi_set_commands(WRITE_CON_04_CMD0, WRITE_CON_04_CMD1, WRITE_CON_04_CMD2, WRITE_CON_04_CMD3);
00000c  4b05              LDR      r3,|L23.36|
                  |L23.14|
00000e  2200              MOVS     r2,#0
000010  4610              MOV      r0,r2
000012  f7fffffe          BL       kdp520_spi_set_commands
;;;53         }
;;;54         /* wait for command complete */
;;;55         kdp520_spi_wait_command_complete();
000016  e8bd4010          POP      {r4,lr}
00001a  f7ffbffe          B.W      kdp520_spi_wait_command_complete
;;;56     }
;;;57     
                          ENDP

00001e  0000              DCW      0x0000
                  |L23.32|
                          DCD      0x06000002
                  |L23.36|
                          DCD      0x04000002

                          AREA ||i.norflash_write_control_volatile||, CODE, READONLY, ALIGN=2

                  norflash_write_control_volatile PROC
;;;57     
;;;58     void norflash_write_control_volatile(UINT8 enable)
000000  b510              PUSH     {r4,lr}
;;;59     {
;;;60         /* fill in command 0~3 */
;;;61         if (enable) {
;;;62             kdp520_spi_set_commands(WRITE_CON_50_CMD0, WRITE_CON_50_CMD1, WRITE_CON_50_CMD2, WRITE_CON_50_CMD3);
000002  f04f7180          MOV      r1,#0x1000000
000006  b108              CBZ      r0,|L24.12|
000008  4b05              LDR      r3,|L24.32|
00000a  e000              B        |L24.14|
                  |L24.12|
;;;63         } else {
;;;64             kdp520_spi_set_commands(WRITE_CON_04_CMD0, WRITE_CON_04_CMD1, WRITE_CON_04_CMD2, WRITE_CON_04_CMD3);
00000c  4b05              LDR      r3,|L24.36|
                  |L24.14|
00000e  2200              MOVS     r2,#0
000010  4610              MOV      r0,r2
000012  f7fffffe          BL       kdp520_spi_set_commands
;;;65         }
;;;66         /* wait for command complete */
;;;67         kdp520_spi_wait_command_complete();
000016  e8bd4010          POP      {r4,lr}
00001a  f7ffbffe          B.W      kdp520_spi_wait_command_complete
;;;68     }
;;;69     
                          ENDP

00001e  0000              DCW      0x0000
                  |L24.32|
                          DCD      0x50000002
                  |L24.36|
                          DCD      0x04000002

                          AREA ||i.norflash_write_running||, CODE, READONLY, ALIGN=2

                  norflash_write_running PROC
;;;549    
;;;550    void norflash_write_running( UINT8 type, UINT32 offset, UINT32 total_send_byte, UINT8 *buf )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;551    {
000004  4616              MOV      r6,r2
000006  460f              MOV      r7,r1
000008  4605              MOV      r5,r0
;;;552        UINT8   *write_buf = buf;
00000a  461c              MOV      r4,r3
;;;553        kdp520_spi_switch_org();
00000c  f7fffffe          BL       kdp520_spi_switch_org
;;;554    
;;;555        norflash_write_control(1);
000010  2001              MOVS     r0,#1
000012  f7fffffe          BL       norflash_write_control
;;;556    
;;;557        /* fill in command 0~3 */
;;;558        if(type & FLASH_QUAD_RW)
;;;559        {
;;;560            #if( FLASH_QUAD_EN == YES )
;;;561            if (flash_4byte_en)
000016  481a              LDR      r0,|L25.128|
;;;562                kdp520_spi_set_commands(offset, QPAGE_WRITE_34_CMD1, total_send_byte, QPAGE_WRITE_34_CMD3);
000018  4918              LDR      r1,|L25.124|
00001a  066a              LSLS     r2,r5,#25             ;558
;;;563            else
;;;564            #endif
;;;565            {
;;;566                kdp520_spi_set_commands(offset, SPI020_32_CMD1, total_send_byte, SPI020_32_CMD3);
;;;567            }
;;;568        }
;;;569        else
;;;570        {
;;;571            if (flash_4byte_en)
00001c  7800              LDRB     r0,[r0,#0]  ; flash_4byte_en
00001e  f1a10c01          SUB      r12,r1,#1             ;566
000022  d504              BPL      |L25.46|
000024  b108              CBZ      r0,|L25.42|
000026  4b17              LDR      r3,|L25.132|
000028  e003              B        |L25.50|
                  |L25.42|
00002a  4b17              LDR      r3,|L25.136|
00002c  e004              B        |L25.56|
                  |L25.46|
00002e  b110              CBZ      r0,|L25.54|
;;;572                kdp520_spi_set_commands(offset, PAGE_WRITE_12_CMD1, total_send_byte, PAGE_WRITE_12_CMD3);
000030  4b16              LDR      r3,|L25.140|
                  |L25.50|
000032  4632              MOV      r2,r6                 ;562
000034  e002              B        |L25.60|
                  |L25.54|
;;;573            else
;;;574                kdp520_spi_set_commands(offset, SPI020_02_CMD1, total_send_byte, SPI020_02_CMD3);
000036  4b16              LDR      r3,|L25.144|
                  |L25.56|
000038  4632              MOV      r2,r6                 ;566
00003a  4661              MOV      r1,r12                ;566
                  |L25.60|
00003c  4638              MOV      r0,r7                 ;572
00003e  f7fffffe          BL       kdp520_spi_set_commands
;;;575        }
;;;576    
;;;577        if ( type & FLASH_DMA_WRITE )
000042  0728              LSLS     r0,r5,#28
000044  d505              BPL      |L25.82|
;;;578        {
;;;579            outw(SPI020REG_INTERRUPT, SPI020_cmd_cmplt_intr_en | SPI020_DMA_EN);
000046  f04f4120          MOV      r1,#0xa0000000
00004a  2003              MOVS     r0,#3
00004c  6208              STR      r0,[r1,#0x20]
;;;580            return;
;;;581        }
;;;582    
;;;583        kdp520_spi_write_Tx_FIFO(write_buf, total_send_byte);
;;;584        kdp520_spi_wait_command_complete();
;;;585    
;;;586        //check status
;;;587        kdp520_spi_switch_fail();
;;;588        while(1)
;;;589        {
;;;590            if( ( norflash_busy_check() & 0x01 ) == 0x00 )
;;;591            {
;;;592                break;
;;;593            }
;;;594            delay_us(40);
;;;595        }
;;;596        kdp520_spi_switch_fail();
;;;597        return;
;;;598    }
00004e  e8bd81f0          POP      {r4-r8,pc}
                  |L25.82|
000052  4631              MOV      r1,r6                 ;583
000054  4620              MOV      r0,r4                 ;583
000056  f7fffffe          BL       kdp520_spi_write_Tx_FIFO
00005a  f7fffffe          BL       kdp520_spi_wait_command_complete
00005e  f7fffffe          BL       kdp520_spi_switch_fail
000062  bf00              NOP                            ;590
                  |L25.100|
000064  f7fffffe          BL       norflash_busy_check
000068  07c0              LSLS     r0,r0,#31             ;590
00006a  d003              BEQ      |L25.116|
00006c  2028              MOVS     r0,#0x28              ;594
00006e  f7fffffe          BL       delay_us
000072  e7f7              B        |L25.100|
                  |L25.116|
000074  e8bd41f0          POP      {r4-r8,lr}            ;596
000078  f7ffbffe          B.W      kdp520_spi_switch_fail
;;;599    
                          ENDP

                  |L25.124|
                          DCD      0x01000004
                  |L25.128|
                          DCD      ||.data||
                  |L25.132|
                          DCD      0x34000042
                  |L25.136|
                          DCD      0x32000042
                  |L25.140|
                          DCD      0x12000002
                  |L25.144|
                          DCD      0x02000002

                          AREA ||i.program_address_check||, CODE, READONLY, ALIGN=2

                  program_address_check PROC
;;;599    
;;;600    UINT8 program_address_check( uint32_t addr )
000000  4905              LDR      r1,|L26.24|
;;;601    {
;;;602        //check sector start address
;;;603        if( ( addr % st_flash_info.sector_size_Bytes ) != 0 )
000002  89c9              LDRH     r1,[r1,#0xe]  ; st_flash_info
000004  fbb0f2f1          UDIV     r2,r0,r1
000008  fb010012          MLS      r0,r1,r2,r0
00000c  b108              CBZ      r0,|L26.18|
;;;604        {
;;;605            return 0;   //fail
00000e  2000              MOVS     r0,#0
;;;606        }
;;;607        return 1;       //pass
;;;608    }
000010  4770              BX       lr
                  |L26.18|
000012  2001              MOVS     r0,#1                 ;607
000014  4770              BX       lr
;;;609    
                          ENDP

000016  0000              DCW      0x0000
                  |L26.24|
                          DCD      st_flash_info

                          AREA ||.data||, DATA, ALIGN=0

                  flash_4byte_en
000000  00                DCB      0x00
                  protect_bypass
000001  00                DCB      0x00

                          AREA ||area_number.30||, DATA, ALIGN=2

                          EXPORTAS ||area_number.30||, ||.data||
                  flash_vendor
                          DCD      kdp520_spi_initialize
                          DCD      norflash_program
                          DCD      norflash_read
                          DCD      norflash_erase_multi_sector
                          DCD      norflash_4k_erase
                          DCD      norflash_64k_erase
                          DCD      norflash_chip_erase
                          DCD      norflash_get_info
                          DCD      norflash_id
                          DCD      norflash_get_status
                          DCD      norflash_set_protect_bypass

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\scpu\\drivers\\media\\flash\\W25Q256JV.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___11_W25Q256JV_c_6e48a707____REV16|
#line 208 "F:\\Users\\fu\\AppData\\Local\\Arm\\Packs\\ARM\\CMSIS\\5.9.0\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___11_W25Q256JV_c_6e48a707____REV16| PROC
#line 209

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___11_W25Q256JV_c_6e48a707____REVSH|
#line 223
|__asm___11_W25Q256JV_c_6e48a707____REVSH| PROC
#line 224

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___11_W25Q256JV_c_6e48a707____RRX|
#line 410
|__asm___11_W25Q256JV_c_6e48a707____RRX| PROC
#line 411

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
