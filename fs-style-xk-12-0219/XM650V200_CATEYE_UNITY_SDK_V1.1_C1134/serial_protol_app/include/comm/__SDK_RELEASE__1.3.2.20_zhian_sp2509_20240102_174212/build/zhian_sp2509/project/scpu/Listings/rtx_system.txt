; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\objects\rtx_system.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\rtx_system.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O3 --diag_suppress=9931 -I..\..\config -I..\..\..\..\board -I..\..\..\..\common\include -I..\..\..\..\scpu\device\include\CMSIS -I..\..\..\..\scpu\device\include\Kneron -I..\..\..\..\scpu\framework\include -I..\..\..\..\scpu\framework\include\framework -I..\..\..\..\scpu\drivers\include -I..\..\..\..\scpu\drivers\include\media\touch -I..\..\..\..\scpu\drivers\include\media\flash -I..\..\..\..\scpu\lib\kdp_system\inc -I..\..\..\..\scpu\lib\kdp_application\include\ -I..\..\..\..\scpu\lib\kdp_application\base\ -I..\..\..\..\scpu\lib\kdp_application\misc -I..\..\..\..\scpu\lib\kdp_e2e_r1n1\include -I..\..\..\..\scpu\include -I..\..\..\..\scpu\middleware\ota -I..\..\..\..\scpu\middleware\comm -I..\..\..\..\scpu\middleware\kdp_comm -I..\..\..\..\scpu\share -I..\..\..\..\scpu\share\gui_lib -I..\..\user -I.\RTE\CMSIS -I.\RTE\_Target-scpu -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\RTOS2\Include -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\RTOS2\RTX\Include -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\Device\ARM\ARMCM4\Include -D__RTX -D__MICROLIB -D__UVISION_VERSION=538 -D_RTE_ -DARMCM4_FP -D_RTE_ -DARM_MATH_CM4 -DTARGET_SCPU -DLOG_ENABLE -DKL520 -DHEAD_POSE_CHECK_PERCENT --omf_browse=.\objects\rtx_system.crf F:/Users/fu/AppData/Local/Arm/Packs/ARM/CMSIS/5.9.0/CMSIS/RTOS2/RTX/Source/rtx_system.c]
                          THUMB

                          AREA ||i.osRtxPendSV_Handler||, CODE, READONLY, ALIGN=2

                  osRtxPendSV_Handler PROC
;;;168    //lint -esym(765,osRtxPendSV_Handler) "Global scope"
;;;169    void osRtxPendSV_Handler (void) {
000000  b570              PUSH     {r4-r6,lr}
000002  4c17              LDR      r4,|L1.96|
000004  f1040556          ADD      r5,r4,#0x56
                  |L1.8|
000008  f8b46054          LDRH     r6,[r4,#0x54]  ; osRtxInfo
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       __asm___12_rtx_system_c_024f2f18__atomic_dec16_nz
000012  b1f8              CBZ      r0,|L1.84|
000014  4812              LDR      r0,|L1.96|
000016  4631              MOV      r1,r6
000018  305a              ADDS     r0,r0,#0x5a
00001a  f7fffffe          BL       __asm___12_rtx_system_c_024f2f18__atomic_inc16_lim
00001e  6de1              LDR      r1,[r4,#0x5c]  ; osRtxInfo
000020  f8510020          LDR      r0,[r1,r0,LSL #2]
000024  b1b0              CBZ      r0,|L1.84|
;;;170      os_object_t *object;
;;;171    
;;;172      for (;;) {
;;;173        object = isr_queue_get();
;;;174        if (object == NULL) {
;;;175          break;
;;;176        }
;;;177        switch (object->id) {
000026  7801              LDRB     r1,[r0,#0]
000028  39f1              SUBS     r1,r1,#0xf1
00002a  2909              CMP      r1,#9
00002c  d2ec              BCS      |L1.8|
00002e  e8dff001          TBB      [pc,r1]
000032  0605              DCB      0x06,0x05
000034  0805050a          DCB      0x08,0x05,0x05,0x0a
000038  0c050e00          DCB      0x0c,0x05,0x0e,0x00
00003c  e7e4              B        |L1.8|
;;;178          case osRtxIdThread:
;;;179            osRtxInfo.post_process.thread(osRtxThreadObject(object));
;;;180            break;
00003e  6e21              LDR      r1,[r4,#0x60]  ; osRtxInfo
000040  e006              B        |L1.80|
;;;181          case osRtxIdEventFlags:
;;;182            osRtxInfo.post_process.event_flags(osRtxEventFlagsObject(object));
;;;183            break;
000042  6e61              LDR      r1,[r4,#0x64]  ; osRtxInfo
000044  e004              B        |L1.80|
;;;184          case osRtxIdSemaphore:
;;;185            osRtxInfo.post_process.semaphore(osRtxSemaphoreObject(object));
;;;186            break;
000046  6ea1              LDR      r1,[r4,#0x68]  ; osRtxInfo
000048  e002              B        |L1.80|
;;;187          case osRtxIdMemoryPool:
;;;188            osRtxInfo.post_process.memory_pool(osRtxMemoryPoolObject(object));
;;;189            break;
00004a  6ee1              LDR      r1,[r4,#0x6c]  ; osRtxInfo
00004c  e000              B        |L1.80|
;;;190          case osRtxIdMessage:
;;;191            osRtxInfo.post_process.message(osRtxMessageObject(object));
00004e  6f21              LDR      r1,[r4,#0x70]  ; osRtxInfo
                  |L1.80|
000050  4788              BLX      r1
000052  e7d9              B        |L1.8|
                  |L1.84|
;;;192            break;
;;;193          default:
;;;194            // Should never come here
;;;195            break;
;;;196        }
;;;197      }
;;;198    
;;;199      osRtxThreadDispatch(NULL);
000054  e8bd4070          POP      {r4-r6,lr}
000058  2000              MOVS     r0,#0
00005a  f7ffbffe          B.W      osRtxThreadDispatch
;;;200    }
;;;201    
                          ENDP

00005e  0000              DCW      0x0000
                  |L1.96|
                          DCD      osRtxInfo

                          AREA ||i.osRtxPostProcess||, CODE, READONLY, ALIGN=2

                  osRtxPostProcess PROC
;;;203    /// \param[in]  object          generic object.
;;;204    void osRtxPostProcess (os_object_t *object) {
000000  b570              PUSH     {r4-r6,lr}
000002  4c11              LDR      r4,|L2.72|
000004  4605              MOV      r5,r0
000006  f1040056          ADD      r0,r4,#0x56
00000a  f8b46054          LDRH     r6,[r4,#0x54]  ; osRtxInfo
00000e  4631              MOV      r1,r6
000010  f7fffffe          BL       __asm___12_rtx_system_c_024f2f18__atomic_inc16_lt
000014  42b0              CMP      r0,r6
000016  d20c              BCS      |L2.50|
000018  4631              MOV      r1,r6
00001a  f1040058          ADD      r0,r4,#0x58
00001e  f7fffffe          BL       __asm___12_rtx_system_c_024f2f18__atomic_inc16_lim
000022  6de1              LDR      r1,[r4,#0x5c]  ; osRtxInfo
000024  f8415020          STR      r5,[r1,r0,LSL #2]
;;;205    
;;;206      if (isr_queue_put(object) != 0U) {
;;;207        if (osRtxInfo.kernel.blocked == 0U) {
000028  7a60              LDRB     r0,[r4,#9]  ; osRtxInfo
00002a  b140              CBZ      r0,|L2.62|
;;;208          SetPendSV();
;;;209        } else {
;;;210          osRtxInfo.kernel.pendSV = 1U;
00002c  2001              MOVS     r0,#1
00002e  72a0              STRB     r0,[r4,#0xa]
;;;211        }
;;;212      } else {
;;;213        (void)osRtxKernelErrorNotify(osRtxErrorISRQueueOverflow, object);
;;;214      }
;;;215    }
000030  bd70              POP      {r4-r6,pc}
                  |L2.50|
000032  4629              MOV      r1,r5                 ;213
000034  e8bd4070          POP      {r4-r6,lr}            ;213
000038  2002              MOVS     r0,#2                 ;213
00003a  f7ffbffe          B.W      osRtxKernelErrorNotify
                  |L2.62|
00003e  4903              LDR      r1,|L2.76|
000040  f04f5080          MOV      r0,#0x10000000        ;213
000044  6008              STR      r0,[r1,#0]            ;213
000046  bd70              POP      {r4-r6,pc}
                          ENDP

                  |L2.72|
                          DCD      osRtxInfo
                  |L2.76|
                          DCD      0xe000ed04

                          AREA ||i.osRtxTick_Handler||, CODE, READONLY, ALIGN=2

                  osRtxTick_Handler PROC
;;;118    //lint -esym(765,osRtxTick_Handler) "Global scope"
;;;119    void osRtxTick_Handler (void) {
000000  b570              PUSH     {r4-r6,lr}
;;;120      os_thread_t *thread;
;;;121    
;;;122      OS_Tick_AcknowledgeIRQ();
000002  f7fffffe          BL       OS_Tick_AcknowledgeIRQ
;;;123      osRtxInfo.kernel.tick++;
000006  4c1d              LDR      r4,|L3.124|
000008  68e0              LDR      r0,[r4,#0xc]  ; osRtxInfo
00000a  1c40              ADDS     r0,r0,#1
;;;124    
;;;125      // Process Thread Delays
;;;126      osRtxThreadDelayTick();
00000c  60e0              STR      r0,[r4,#0xc]  ; osRtxInfo
00000e  f7fffffe          BL       osRtxThreadDelayTick
;;;127    
;;;128      osRtxThreadDispatch(NULL);
000012  2000              MOVS     r0,#0
000014  f7fffffe          BL       osRtxThreadDispatch
;;;129    
;;;130      // Process Timers
;;;131      if (osRtxInfo.timer.tick != NULL) {
000018  6d20              LDR      r0,[r4,#0x50]  ; osRtxInfo
00001a  b100              CBZ      r0,|L3.30|
;;;132        osRtxInfo.timer.tick();
00001c  4780              BLX      r0
                  |L3.30|
;;;133      }
;;;134    
;;;135      // Check Round Robin timeout
;;;136      if (osRtxInfo.thread.robin.timeout != 0U) {
00001e  6c21              LDR      r1,[r4,#0x40]  ; osRtxInfo
000020  2900              CMP      r1,#0
000022  d02a              BEQ      |L3.122|
;;;137        thread = osRtxInfo.thread.run.next;
;;;138        if (thread != osRtxInfo.thread.robin.thread) {
000024  6be2              LDR      r2,[r4,#0x3c]  ; osRtxInfo
000026  69a0              LDR      r0,[r4,#0x18]  ; osRtxInfo
000028  4282              CMP      r2,r0
00002a  d004              BEQ      |L3.54|
;;;139          osRtxInfo.thread.robin.thread = thread;
;;;140          if (thread->delay == 0U) {
00002c  63e0              STR      r0,[r4,#0x3c]  ; osRtxInfo
00002e  69c2              LDR      r2,[r0,#0x1c]
000030  b91a              CBNZ     r2,|L3.58|
;;;141            // Reset Round Robin
;;;142            thread->delay = osRtxInfo.thread.robin.timeout;
000032  61c1              STR      r1,[r0,#0x1c]
000034  e001              B        |L3.58|
                  |L3.54|
;;;143          }
;;;144        }
;;;145        if (thread->delay != 0U) {
000036  69c1              LDR      r1,[r0,#0x1c]
000038  b119              CBZ      r1,|L3.66|
                  |L3.58|
;;;146          thread->delay--;
00003a  69c1              LDR      r1,[r0,#0x1c]
00003c  1e49              SUBS     r1,r1,#1
00003e  61c1              STR      r1,[r0,#0x1c]
000040  d11b              BNE      |L3.122|
                  |L3.66|
000042  7a20              LDRB     r0,[r4,#8]  ; osRtxInfo
;;;147        }
;;;148        if (thread->delay == 0U) {
;;;149          // Round Robin Timeout
;;;150          if (osRtxKernelGetState() == osRtxKernelRunning) {
000044  2802              CMP      r0,#2
000046  d118              BNE      |L3.122|
;;;151            thread = osRtxInfo.thread.ready.thread_list;
;;;152            if ((thread != NULL) && (thread->priority == osRtxInfo.thread.robin.thread->priority)) {
000048  6a65              LDR      r5,[r4,#0x24]  ; osRtxInfo
00004a  2d00              CMP      r5,#0
00004c  d015              BEQ      |L3.122|
00004e  6be1              LDR      r1,[r4,#0x3c]  ; osRtxInfo
000050  f9950020          LDRSB    r0,[r5,#0x20]
000054  f9911020          LDRSB    r1,[r1,#0x20]
000058  4288              CMP      r0,r1
00005a  d10e              BNE      |L3.122|
;;;153              osRtxThreadListRemove(thread);
00005c  4628              MOV      r0,r5
00005e  f7fffffe          BL       osRtxThreadListRemove
;;;154              osRtxThreadReadyPut(osRtxInfo.thread.robin.thread);
000062  6be0              LDR      r0,[r4,#0x3c]  ; osRtxInfo
000064  f7fffffe          BL       osRtxThreadReadyPut
;;;155              EvrRtxThreadPreempted(osRtxInfo.thread.robin.thread);
000068  6be0              LDR      r0,[r4,#0x3c]  ; osRtxInfo
00006a  f7fffffe          BL       EvrRtxThreadPreempted
;;;156              osRtxThreadSwitch(thread);
00006e  4628              MOV      r0,r5
000070  f7fffffe          BL       osRtxThreadSwitch
;;;157              osRtxInfo.thread.robin.thread = thread;
;;;158              thread->delay = osRtxInfo.thread.robin.timeout;
000074  63e5              STR      r5,[r4,#0x3c]  ; osRtxInfo
000076  6c20              LDR      r0,[r4,#0x40]  ; osRtxInfo
000078  61e8              STR      r0,[r5,#0x1c]
                  |L3.122|
;;;159            }
;;;160          }
;;;161        }
;;;162      }
;;;163    }
00007a  bd70              POP      {r4-r6,pc}
;;;164    
                          ENDP

                  |L3.124|
                          DCD      osRtxInfo

;*** Start embedded assembler ***

#line 1 "F:/Users/fu/AppData/Local/Arm/Packs/ARM/CMSIS/5.9.0/CMSIS/RTOS2/RTX/Source/rtx_system.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___12_rtx_system_c_024f2f18____REV16|
#line 208 "F:\\Users\\fu\\AppData\\Local\\Arm\\Packs\\ARM\\CMSIS\\5.9.0\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___12_rtx_system_c_024f2f18____REV16| PROC
#line 209

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___12_rtx_system_c_024f2f18____REVSH|
#line 223
|__asm___12_rtx_system_c_024f2f18____REVSH| PROC
#line 224

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___12_rtx_system_c_024f2f18____RRX|
#line 410
|__asm___12_rtx_system_c_024f2f18____RRX| PROC
#line 411

 rrx r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___12_rtx_system_c_024f2f18__atomic_wr8|
#line 464 "F:/Users/fu/AppData/Local/Arm/Packs/ARM/CMSIS/5.9.0/CMSIS/RTOS2/RTX/Source/rtx_core_cm.h"
|__asm___12_rtx_system_c_024f2f18__atomic_wr8| PROC
#line 464

 mov r2,r0
1
 ldrexb r0,[r2]
 strexb r3,r1,[r2]
 cbz r3,%F2
 b %B1
2
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___12_rtx_system_c_024f2f18__atomic_set32|
#line 511
|__asm___12_rtx_system_c_024f2f18__atomic_set32| PROC
#line 511

 mov r2,r0
1
 ldrex r0,[r2]
 orr r0,r0,r1
 strex r3,r0,[r2]
 cbz r3,%F2
 b %B1
2
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___12_rtx_system_c_024f2f18__atomic_clr32|
#line 570
|__asm___12_rtx_system_c_024f2f18__atomic_clr32| PROC
#line 570

 push {r4,lr}
 mov r2,r0
1
 ldrex r0,[r2]
 bic r4,r0,r1
 strex r3,r4,[r2]
 cbz r3,%F2
 b %B1
2
 pop {r4,pc}
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___12_rtx_system_c_024f2f18__atomic_chk32_all|
#line 630
|__asm___12_rtx_system_c_024f2f18__atomic_chk32_all| PROC
#line 630

 push {r4,lr}
 mov r2,r0
1
 ldrex r0,[r2]
 and r4,r0,r1
 cmp r4,r1
 beq %F2
 clrex
 movs r0,#0
 pop {r4,pc}
2
 bic r4,r0,r1
 strex r3,r4,[r2]
 cbz r3,%F3
 b %B1
3
 pop {r4,pc}
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___12_rtx_system_c_024f2f18__atomic_chk32_any|
#line 705
|__asm___12_rtx_system_c_024f2f18__atomic_chk32_any| PROC
#line 705

 push {r4,lr}
 mov r2,r0
1
 ldrex r0,[r2]
 tst r0,r1
 bne %F2
 clrex
 movs r0,#0
 pop {r4,pc}
2
 bic r4,r0,r1
 strex r3,r4,[r2]
 cbz r3,%F3
 b %B1
3
 pop {r4,pc}
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___12_rtx_system_c_024f2f18__atomic_inc32|
#line 772
|__asm___12_rtx_system_c_024f2f18__atomic_inc32| PROC
#line 772

 mov r2,r0
1
 ldrex r0,[r2]
 adds r1,r0,#1
 strex r3,r1,[r2]
 cbz r3,%F2
 b %B1
2
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___12_rtx_system_c_024f2f18__atomic_inc16_lt|
#line 821
|__asm___12_rtx_system_c_024f2f18__atomic_inc16_lt| PROC
#line 821

 push {r4,lr}
 mov r2,r0
1
 ldrexh r0,[r2]
 cmp r1,r0
 bhi %F2
 clrex
 pop {r4,pc}
2
 adds r4,r0,#1
 strexh r3,r4,[r2]
 cbz r3,%F3
 b %B1
3
 pop {r4,pc}
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___12_rtx_system_c_024f2f18__atomic_inc16_lim|
#line 882
|__asm___12_rtx_system_c_024f2f18__atomic_inc16_lim| PROC
#line 882

 push {r4,lr}
 mov r2,r0
1
 ldrexh r0,[r2]
 adds r4,r0,#1
 cmp r1,r4
 bhi %F2
 movs r4,#0
2
 strexh r3,r4,[r2]
 cbz r3,%F3
 b %B1
3
 pop {r4,pc}
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___12_rtx_system_c_024f2f18__atomic_dec32|
#line 940
|__asm___12_rtx_system_c_024f2f18__atomic_dec32| PROC
#line 940

 mov r2,r0
1
 ldrex r0,[r2]
 subs r1,r0,#1
 strex r3,r1,[r2]
 cbz r3,%F2
 b %B1
2
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___12_rtx_system_c_024f2f18__atomic_dec32_nz|
#line 988
|__asm___12_rtx_system_c_024f2f18__atomic_dec32_nz| PROC
#line 988

 mov r2,r0
1
 ldrex r0,[r2]
 cbnz r0,%F2
 clrex
 bx lr
2
 subs r1,r0,#1
 strex r3,r1,[r2]
 cbz r3,%F3
 b %B1
3
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___12_rtx_system_c_024f2f18__atomic_dec16_nz|
#line 1044
|__asm___12_rtx_system_c_024f2f18__atomic_dec16_nz| PROC
#line 1044

 mov r2,r0
1
 ldrexh r0,[r2]
 cbnz r0,%F2
 clrex
 bx lr
2
 subs r1,r0,#1
 strexh r3,r1,[r2]
 cbz r3,%F3
 b %B1
3
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___12_rtx_system_c_024f2f18__atomic_link_get|
#line 1100
|__asm___12_rtx_system_c_024f2f18__atomic_link_get| PROC
#line 1100

 mov r2,r0
1
 ldrex r0,[r2]
 cbnz r0,%F2
 clrex
 bx lr
2
 ldr r1,[r0]
 strex r3,r1,[r2]
 cbz r3,%F3
 b %B1
3
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___12_rtx_system_c_024f2f18__atomic_link_put|
#line 1156
|__asm___12_rtx_system_c_024f2f18__atomic_link_put| PROC
#line 1156

1
 ldr r2,[r0]
 str r2,[r1]
 dmb
 ldrex r2,[r0]
 ldr r3,[r1]
 cmp r3,r2
 bne %B1
 strex r3,r1,[r0]
 cbz r3,%F2
 b %B1
2
 bx lr
	ENDP

;*** End   embedded assembler ***
