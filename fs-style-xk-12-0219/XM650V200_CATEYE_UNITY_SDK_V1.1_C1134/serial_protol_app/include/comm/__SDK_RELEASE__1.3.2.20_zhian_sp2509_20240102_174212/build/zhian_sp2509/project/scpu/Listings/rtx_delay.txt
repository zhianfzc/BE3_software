; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\objects\rtx_delay.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\rtx_delay.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O3 --diag_suppress=9931 -I..\..\config -I..\..\..\..\board -I..\..\..\..\common\include -I..\..\..\..\scpu\device\include\CMSIS -I..\..\..\..\scpu\device\include\Kneron -I..\..\..\..\scpu\framework\include -I..\..\..\..\scpu\framework\include\framework -I..\..\..\..\scpu\drivers\include -I..\..\..\..\scpu\drivers\include\media\touch -I..\..\..\..\scpu\drivers\include\media\flash -I..\..\..\..\scpu\lib\kdp_system\inc -I..\..\..\..\scpu\lib\kdp_application\include\ -I..\..\..\..\scpu\lib\kdp_application\base\ -I..\..\..\..\scpu\lib\kdp_application\misc -I..\..\..\..\scpu\lib\kdp_e2e_r1n1\include -I..\..\..\..\scpu\include -I..\..\..\..\scpu\middleware\ota -I..\..\..\..\scpu\middleware\comm -I..\..\..\..\scpu\middleware\kdp_comm -I..\..\..\..\scpu\share -I..\..\..\..\scpu\share\gui_lib -I..\..\user -I.\RTE\CMSIS -I.\RTE\_Target-scpu -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\RTOS2\Include -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\RTOS2\RTX\Include -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\Device\ARM\ARMCM4\Include -D__RTX -D__MICROLIB -D__UVISION_VERSION=538 -D_RTE_ -DARMCM4_FP -D_RTE_ -DARM_MATH_CM4 -DTARGET_SCPU -DLOG_ENABLE -DKL520 -DHEAD_POSE_CHECK_PERCENT --omf_browse=.\objects\rtx_delay.crf F:/Users/fu/AppData/Local/Arm/Packs/ARM/CMSIS/5.9.0/CMSIS/RTOS2/RTX/Source/rtx_delay.c]
                          THUMB

                          AREA ||i.IsException||, CODE, READONLY, ALIGN=1

                  IsException PROC
;;;122    /// \return     true=exception, false=thread
;;;123    __STATIC_INLINE bool_t IsException (void) {
000000  f3ef8005          MRS      r0,IPSR
000004  2800              CMP      r0,#0
000006  d000              BEQ      |L1.10|
;;;124      return (__get_IPSR() != 0U);
000008  2001              MOVS     r0,#1
                  |L1.10|
;;;125    }
00000a  4770              BX       lr
;;;126    
                          ENDP


                          AREA ||i.IsIrqMasked||, CODE, READONLY, ALIGN=1

                  IsIrqMasked PROC
;;;128    /// \return     true=masked, false=not masked
;;;129    __STATIC_INLINE bool_t IsIrqMasked (void) {
000000  f3ef8010          MRS      r0,PRIMASK
000004  b918              CBNZ     r0,|L2.14|
000006  f3ef8011          MRS      r0,BASEPRI
;;;130    #if   ((defined(__ARM_ARCH_7M__)        && (__ARM_ARCH_7M__        != 0)) || \
;;;131           (defined(__ARM_ARCH_7EM__)       && (__ARM_ARCH_7EM__       != 0)) || \
;;;132           (defined(__ARM_ARCH_8M_MAIN__)   && (__ARM_ARCH_8M_MAIN__   != 0)) || \
;;;133           (defined(__ARM_ARCH_8_1M_MAIN__) && (__ARM_ARCH_8_1M_MAIN__ != 0)))
;;;134      return ((__get_PRIMASK() != 0U) || (__get_BASEPRI() != 0U));
00000a  2800              CMP      r0,#0
00000c  d000              BEQ      |L2.16|
                  |L2.14|
00000e  2001              MOVS     r0,#1
                  |L2.16|
;;;135    #else
;;;136      return  (__get_PRIMASK() != 0U);
;;;137    #endif
;;;138    }
000010  4770              BX       lr
;;;139    
                          ENDP


                          AREA ||i.osDelay||, CODE, READONLY, ALIGN=2

                  osDelay PROC
;;;85     /// Wait for Timeout (Time Delay).
;;;86     osStatus_t osDelay (uint32_t ticks) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;87       osStatus_t status;
;;;88     
;;;89       EvrRtxDelay(ticks);
000004  f7fffffe          BL       EvrRtxDelay
;;;90       if (IsException() || IsIrqMasked()) {
000008  f7fffffe          BL       IsException
00000c  b910              CBNZ     r0,|L3.20|
00000e  f7fffffe          BL       IsIrqMasked
000012  b130              CBZ      r0,|L3.34|
                  |L3.20|
;;;91         EvrRtxDelayError((int32_t)osErrorISR);
000014  f06f0405          MVN      r4,#5
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       EvrRtxDelayError
;;;92         status = osErrorISR;
00001e  4620              MOV      r0,r4
;;;93       } else {
;;;94         status = __svcDelay(ticks);
;;;95       }
;;;96       return status;
;;;97     }
000020  bd10              POP      {r4,pc}
                  |L3.34|
000022  4620              MOV      r0,r4                 ;94
000024  f8dfc004          LDR      r12,|L3.44|
000028  df00              SVC      #0x0                  ;94
00002a  bd10              POP      {r4,pc}
;;;98     
                          ENDP

                  |L3.44|
                          DCD      svcRtxDelay

                          AREA ||i.osDelayUntil||, CODE, READONLY, ALIGN=2

                  osDelayUntil PROC
;;;99     /// Wait until specified time.
;;;100    osStatus_t osDelayUntil (uint32_t ticks) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;101      osStatus_t status;
;;;102    
;;;103      EvrRtxDelayUntil(ticks);
000004  f7fffffe          BL       EvrRtxDelayUntil
;;;104      if (IsException() || IsIrqMasked()) {
000008  f7fffffe          BL       IsException
00000c  b910              CBNZ     r0,|L4.20|
00000e  f7fffffe          BL       IsIrqMasked
000012  b130              CBZ      r0,|L4.34|
                  |L4.20|
;;;105        EvrRtxDelayError((int32_t)osErrorISR);
000014  f06f0405          MVN      r4,#5
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       EvrRtxDelayError
;;;106        status = osErrorISR;
00001e  4620              MOV      r0,r4
;;;107      } else {
;;;108        status = __svcDelayUntil(ticks);
;;;109      }
;;;110      return status;
;;;111    }
000020  bd10              POP      {r4,pc}
                  |L4.34|
000022  4620              MOV      r0,r4                 ;108
000024  f8dfc004          LDR      r12,|L4.44|
000028  df00              SVC      #0x0                  ;108
00002a  bd10              POP      {r4,pc}
                          ENDP

                  |L4.44|
                          DCD      svcRtxDelayUntil

                          AREA ||i.svcRtxDelay||, CODE, READONLY, ALIGN=1

                  svcRtxDelay PROC
;;;32     /// \note API identical to osDelay
;;;33     static osStatus_t svcRtxDelay (uint32_t ticks) {
000000  b510              PUSH     {r4,lr}
000002  0004              MOVS     r4,r0
000004  d009              BEQ      |L5.26|
;;;34       osStatus_t status;
;;;35     
;;;36       if (ticks == 0U) {
;;;37         EvrRtxDelayError((int32_t)osErrorParameter);
;;;38         //lint -e{904} "Return statement before end of function" [MISRA Note 1]
;;;39         return osErrorParameter;
;;;40       }
;;;41     
;;;42       if (osRtxThreadWaitEnter(osRtxThreadWaitingDelay, ticks)) {
000006  4601              MOV      r1,r0
000008  2013              MOVS     r0,#0x13
00000a  f7fffffe          BL       osRtxThreadWaitEnter
00000e  b138              CBZ      r0,|L5.32|
;;;43         EvrRtxDelayStarted(ticks);
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       EvrRtxDelayStarted
;;;44         status = osOK;
000016  2000              MOVS     r0,#0
;;;45       } else {
;;;46         EvrRtxDelayError((int32_t)osError);
;;;47         status = osError;
;;;48       }
;;;49     
;;;50       return status;
;;;51     }
000018  bd10              POP      {r4,pc}
                  |L5.26|
00001a  f06f0403          MVN      r4,#3                 ;37
00001e  e001              B        |L5.36|
                  |L5.32|
000020  f04f34ff          MOV      r4,#0xffffffff        ;46
                  |L5.36|
000024  4620              MOV      r0,r4                 ;46
000026  f7fffffe          BL       EvrRtxDelayError
00002a  4620              MOV      r0,r4                 ;47
00002c  bd10              POP      {r4,pc}
;;;52     
                          ENDP


                          AREA ||i.svcRtxDelayUntil||, CODE, READONLY, ALIGN=2

                  svcRtxDelayUntil PROC
;;;54     /// \note API identical to osDelayUntil
;;;55     static osStatus_t svcRtxDelayUntil (uint32_t ticks) {
000000  490d              LDR      r1,|L6.56|
000002  b510              PUSH     {r4,lr}
;;;56       osStatus_t status;
;;;57     
;;;58       ticks -= osRtxInfo.kernel.tick;
000004  68c9              LDR      r1,[r1,#0xc]  ; osRtxInfo
000006  1a44              SUBS     r4,r0,r1
000008  d002              BEQ      |L6.16|
;;;59       if ((ticks == 0U) || (ticks > 0x7FFFFFFFU)) {
00000a  f1b44f00          CMP      r4,#0x80000000
00000e  d302              BCC      |L6.22|
                  |L6.16|
;;;60         EvrRtxDelayError((int32_t)osErrorParameter);
000010  f06f0403          MVN      r4,#3
;;;61         //lint -e{904} "Return statement before end of function" [MISRA Note 1]
;;;62         return osErrorParameter;
000014  e00b              B        |L6.46|
                  |L6.22|
;;;63       }
;;;64     
;;;65       if (osRtxThreadWaitEnter(osRtxThreadWaitingDelay, ticks)) {
000016  4621              MOV      r1,r4
000018  2013              MOVS     r0,#0x13
00001a  f7fffffe          BL       osRtxThreadWaitEnter
00001e  b120              CBZ      r0,|L6.42|
;;;66         EvrRtxDelayUntilStarted(ticks);
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       EvrRtxDelayUntilStarted
;;;67         status = osOK;
000026  2000              MOVS     r0,#0
;;;68       } else {
;;;69         EvrRtxDelayError((int32_t)osError);
;;;70         status = osError;
;;;71       }
;;;72     
;;;73       return status;
;;;74     }
000028  bd10              POP      {r4,pc}
                  |L6.42|
00002a  f04f34ff          MOV      r4,#0xffffffff        ;69
                  |L6.46|
00002e  4620              MOV      r0,r4                 ;69
000030  f7fffffe          BL       EvrRtxDelayError
000034  4620              MOV      r0,r4                 ;70
000036  bd10              POP      {r4,pc}
;;;75     
                          ENDP

                  |L6.56|
                          DCD      osRtxInfo

;*** Start embedded assembler ***

#line 1 "F:/Users/fu/AppData/Local/Arm/Packs/ARM/CMSIS/5.9.0/CMSIS/RTOS2/RTX/Source/rtx_delay.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___11_rtx_delay_c_osDelay____REV16|
#line 208 "F:\\Users\\fu\\AppData\\Local\\Arm\\Packs\\ARM\\CMSIS\\5.9.0\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___11_rtx_delay_c_osDelay____REV16| PROC
#line 209

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___11_rtx_delay_c_osDelay____REVSH|
#line 223
|__asm___11_rtx_delay_c_osDelay____REVSH| PROC
#line 224

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___11_rtx_delay_c_osDelay____RRX|
#line 410
|__asm___11_rtx_delay_c_osDelay____RRX| PROC
#line 411

 rrx r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___11_rtx_delay_c_osDelay__atomic_wr8|
#line 464 "F:/Users/fu/AppData/Local/Arm/Packs/ARM/CMSIS/5.9.0/CMSIS/RTOS2/RTX/Source/rtx_core_cm.h"
|__asm___11_rtx_delay_c_osDelay__atomic_wr8| PROC
#line 464

 mov r2,r0
1
 ldrexb r0,[r2]
 strexb r3,r1,[r2]
 cbz r3,%F2
 b %B1
2
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___11_rtx_delay_c_osDelay__atomic_set32|
#line 511
|__asm___11_rtx_delay_c_osDelay__atomic_set32| PROC
#line 511

 mov r2,r0
1
 ldrex r0,[r2]
 orr r0,r0,r1
 strex r3,r0,[r2]
 cbz r3,%F2
 b %B1
2
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___11_rtx_delay_c_osDelay__atomic_clr32|
#line 570
|__asm___11_rtx_delay_c_osDelay__atomic_clr32| PROC
#line 570

 push {r4,lr}
 mov r2,r0
1
 ldrex r0,[r2]
 bic r4,r0,r1
 strex r3,r4,[r2]
 cbz r3,%F2
 b %B1
2
 pop {r4,pc}
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___11_rtx_delay_c_osDelay__atomic_chk32_all|
#line 630
|__asm___11_rtx_delay_c_osDelay__atomic_chk32_all| PROC
#line 630

 push {r4,lr}
 mov r2,r0
1
 ldrex r0,[r2]
 and r4,r0,r1
 cmp r4,r1
 beq %F2
 clrex
 movs r0,#0
 pop {r4,pc}
2
 bic r4,r0,r1
 strex r3,r4,[r2]
 cbz r3,%F3
 b %B1
3
 pop {r4,pc}
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___11_rtx_delay_c_osDelay__atomic_chk32_any|
#line 705
|__asm___11_rtx_delay_c_osDelay__atomic_chk32_any| PROC
#line 705

 push {r4,lr}
 mov r2,r0
1
 ldrex r0,[r2]
 tst r0,r1
 bne %F2
 clrex
 movs r0,#0
 pop {r4,pc}
2
 bic r4,r0,r1
 strex r3,r4,[r2]
 cbz r3,%F3
 b %B1
3
 pop {r4,pc}
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___11_rtx_delay_c_osDelay__atomic_inc32|
#line 772
|__asm___11_rtx_delay_c_osDelay__atomic_inc32| PROC
#line 772

 mov r2,r0
1
 ldrex r0,[r2]
 adds r1,r0,#1
 strex r3,r1,[r2]
 cbz r3,%F2
 b %B1
2
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___11_rtx_delay_c_osDelay__atomic_inc16_lt|
#line 821
|__asm___11_rtx_delay_c_osDelay__atomic_inc16_lt| PROC
#line 821

 push {r4,lr}
 mov r2,r0
1
 ldrexh r0,[r2]
 cmp r1,r0
 bhi %F2
 clrex
 pop {r4,pc}
2
 adds r4,r0,#1
 strexh r3,r4,[r2]
 cbz r3,%F3
 b %B1
3
 pop {r4,pc}
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___11_rtx_delay_c_osDelay__atomic_inc16_lim|
#line 882
|__asm___11_rtx_delay_c_osDelay__atomic_inc16_lim| PROC
#line 882

 push {r4,lr}
 mov r2,r0
1
 ldrexh r0,[r2]
 adds r4,r0,#1
 cmp r1,r4
 bhi %F2
 movs r4,#0
2
 strexh r3,r4,[r2]
 cbz r3,%F3
 b %B1
3
 pop {r4,pc}
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___11_rtx_delay_c_osDelay__atomic_dec32|
#line 940
|__asm___11_rtx_delay_c_osDelay__atomic_dec32| PROC
#line 940

 mov r2,r0
1
 ldrex r0,[r2]
 subs r1,r0,#1
 strex r3,r1,[r2]
 cbz r3,%F2
 b %B1
2
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___11_rtx_delay_c_osDelay__atomic_dec32_nz|
#line 988
|__asm___11_rtx_delay_c_osDelay__atomic_dec32_nz| PROC
#line 988

 mov r2,r0
1
 ldrex r0,[r2]
 cbnz r0,%F2
 clrex
 bx lr
2
 subs r1,r0,#1
 strex r3,r1,[r2]
 cbz r3,%F3
 b %B1
3
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___11_rtx_delay_c_osDelay__atomic_dec16_nz|
#line 1044
|__asm___11_rtx_delay_c_osDelay__atomic_dec16_nz| PROC
#line 1044

 mov r2,r0
1
 ldrexh r0,[r2]
 cbnz r0,%F2
 clrex
 bx lr
2
 subs r1,r0,#1
 strexh r3,r1,[r2]
 cbz r3,%F3
 b %B1
3
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___11_rtx_delay_c_osDelay__atomic_link_get|
#line 1100
|__asm___11_rtx_delay_c_osDelay__atomic_link_get| PROC
#line 1100

 mov r2,r0
1
 ldrex r0,[r2]
 cbnz r0,%F2
 clrex
 bx lr
2
 ldr r1,[r0]
 strex r3,r1,[r2]
 cbz r3,%F3
 b %B1
3
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___11_rtx_delay_c_osDelay__atomic_link_put|
#line 1156
|__asm___11_rtx_delay_c_osDelay__atomic_link_put| PROC
#line 1156

1
 ldr r2,[r0]
 str r2,[r1]
 dmb
 ldrex r2,[r0]
 ldr r3,[r1]
 cmp r3,r2
 bne %B1
 strex r3,r1,[r0]
 cbz r3,%F2
 b %B1
2
 bx lr
	ENDP

;*** End   embedded assembler ***
