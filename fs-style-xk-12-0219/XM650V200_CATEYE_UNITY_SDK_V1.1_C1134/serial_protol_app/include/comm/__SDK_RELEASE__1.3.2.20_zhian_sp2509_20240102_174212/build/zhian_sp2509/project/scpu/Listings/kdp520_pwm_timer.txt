; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\objects\kdp520_pwm_timer.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\kdp520_pwm_timer.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O3 --diag_suppress=9931 -I..\..\config -I..\..\..\..\board -I..\..\..\..\common\include -I..\..\..\..\scpu\device\include\CMSIS -I..\..\..\..\scpu\device\include\Kneron -I..\..\..\..\scpu\framework\include -I..\..\..\..\scpu\framework\include\framework -I..\..\..\..\scpu\drivers\include -I..\..\..\..\scpu\drivers\include\media\touch -I..\..\..\..\scpu\drivers\include\media\flash -I..\..\..\..\scpu\lib\kdp_system\inc -I..\..\..\..\scpu\lib\kdp_application\include\ -I..\..\..\..\scpu\lib\kdp_application\base\ -I..\..\..\..\scpu\lib\kdp_application\misc -I..\..\..\..\scpu\lib\kdp_e2e_r1n1\include -I..\..\..\..\scpu\include -I..\..\..\..\scpu\middleware\ota -I..\..\..\..\scpu\middleware\comm -I..\..\..\..\scpu\middleware\kdp_comm -I..\..\..\..\scpu\share -I..\..\..\..\scpu\share\gui_lib -I..\..\user -I.\RTE\CMSIS -I.\RTE\_Target-scpu -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\RTOS2\Include -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\RTOS2\RTX\Include -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\Device\ARM\ARMCM4\Include -D__RTX -D__MICROLIB -D__UVISION_VERSION=538 -D_RTE_ -DARMCM4_FP -D_RTE_ -DARM_MATH_CM4 -DTARGET_SCPU -DLOG_ENABLE -DKL520 -DHEAD_POSE_CHECK_PERCENT --omf_browse=.\objects\kdp520_pwm_timer.crf ..\..\..\..\scpu\drivers\src\kdp520_pwm_timer.c]
                          THUMB

                          AREA ||i.PWMTMR1_IRQHandler||, CODE, READONLY, ALIGN=2

                  PWMTMR1_IRQHandler PROC
;;;48     
;;;49     void PWMTMR1_IRQHandler(void)
000000  b500              PUSH     {lr}
;;;50     {
;;;51         //internal reserved
;;;52         kdp_timer_int_clear(PWMTIMER1);
000002  2001              MOVS     r0,#1
000004  f7fffffe          BL       kdp_timer_int_clear
;;;53         ++t1_tick;
000008  4802              LDR      r0,|L1.20|
00000a  6801              LDR      r1,[r0,#0]  ; t1_tick
00000c  1c49              ADDS     r1,r1,#1
00000e  6001              STR      r1,[r0,#0]  ; t1_tick
;;;54     }
000010  bd00              POP      {pc}
;;;55     
                          ENDP

000012  0000              DCW      0x0000
                  |L1.20|
                          DCD      ||.data||

                          AREA ||i.PWMTMR2_IRQHandler||, CODE, READONLY, ALIGN=2

                  PWMTMR2_IRQHandler PROC
;;;55     
;;;56     void PWMTMR2_IRQHandler(void)
000000  b500              PUSH     {lr}
;;;57     {
;;;58         kdp_timer_int_clear(PWMTIMER2);
000002  2002              MOVS     r0,#2
000004  f7fffffe          BL       kdp_timer_int_clear
;;;59         ++t2_tick;
000008  4802              LDR      r0,|L2.20|
00000a  6841              LDR      r1,[r0,#4]  ; t2_tick
00000c  1c49              ADDS     r1,r1,#1
00000e  6041              STR      r1,[r0,#4]  ; t2_tick
;;;60     }
000010  bd00              POP      {pc}
;;;61     
                          ENDP

000012  0000              DCW      0x0000
                  |L2.20|
                          DCD      ||.data||

                          AREA ||i.PWMTMR3_IRQHandler||, CODE, READONLY, ALIGN=2

                  PWMTMR3_IRQHandler PROC
;;;61     
;;;62     void PWMTMR3_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;63     {
;;;64         kl520_api_tmr3_user(&t3_tick);   
000002  4806              LDR      r0,|L3.28|
000004  f7fffffe          BL       kl520_api_tmr3_user
;;;65         kdp_timer_int_clear(PWMTIMER3);
000008  2003              MOVS     r0,#3
00000a  f7fffffe          BL       kdp_timer_int_clear
;;;66         ++t3_tick;
00000e  4803              LDR      r0,|L3.28|
000010  3808              SUBS     r0,r0,#8
000012  6881              LDR      r1,[r0,#8]  ; t3_tick
000014  1c49              ADDS     r1,r1,#1
000016  6081              STR      r1,[r0,#8]  ; t3_tick
;;;67     }
000018  bd10              POP      {r4,pc}
;;;68     
                          ENDP

00001a  0000              DCW      0x0000
                  |L3.28|
                          DCD      ||.data||+0x8

                          AREA ||i.PWMTMR4_IRQHandler||, CODE, READONLY, ALIGN=2

                  PWMTMR4_IRQHandler PROC
;;;68     
;;;69     void PWMTMR4_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;70     {
;;;71         kl520_api_tmr4_user(&t4_tick);
000002  4806              LDR      r0,|L4.28|
000004  f7fffffe          BL       kl520_api_tmr4_user
;;;72         kdp_timer_int_clear(PWMTIMER4);
000008  2004              MOVS     r0,#4
00000a  f7fffffe          BL       kdp_timer_int_clear
;;;73         ++t4_tick;
00000e  4803              LDR      r0,|L4.28|
000010  380c              SUBS     r0,r0,#0xc
000012  68c1              LDR      r1,[r0,#0xc]  ; t4_tick
000014  1c49              ADDS     r1,r1,#1
000016  60c1              STR      r1,[r0,#0xc]  ; t4_tick
;;;74     }
000018  bd10              POP      {r4,pc}
;;;75     
                          ENDP

00001a  0000              DCW      0x0000
                  |L4.28|
                          DCD      ||.data||+0xc

                          AREA ||i.PWMTMR5_IRQHandler||, CODE, READONLY, ALIGN=2

                  PWMTMR5_IRQHandler PROC
;;;75     
;;;76     void PWMTMR5_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;77     {
;;;78         kl520_api_tmr5_user(&t5_tick);
000002  4806              LDR      r0,|L5.28|
000004  f7fffffe          BL       kl520_api_tmr5_user
;;;79         kdp_timer_int_clear(PWMTIMER5);
000008  2005              MOVS     r0,#5
00000a  f7fffffe          BL       kdp_timer_int_clear
;;;80         ++t5_tick;
00000e  4803              LDR      r0,|L5.28|
000010  3810              SUBS     r0,r0,#0x10
000012  6901              LDR      r1,[r0,#0x10]  ; t5_tick
000014  1c49              ADDS     r1,r1,#1
000016  6101              STR      r1,[r0,#0x10]  ; t5_tick
;;;81     }
000018  bd10              POP      {r4,pc}
;;;82     
                          ENDP

00001a  0000              DCW      0x0000
                  |L5.28|
                          DCD      ||.data||+0x10

                          AREA ||i.PWMTMR6_IRQHandler||, CODE, READONLY, ALIGN=2

                  PWMTMR6_IRQHandler PROC
;;;82     
;;;83     void PWMTMR6_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;84     {
;;;85         kl520_api_tmr6_user(&t6_tick);
000002  4806              LDR      r0,|L6.28|
000004  f7fffffe          BL       kl520_api_tmr6_user
;;;86         kdp_timer_int_clear(PWMTIMER6);
000008  2006              MOVS     r0,#6
00000a  f7fffffe          BL       kdp_timer_int_clear
;;;87         ++t6_tick;
00000e  4803              LDR      r0,|L6.28|
000010  3814              SUBS     r0,r0,#0x14
000012  6941              LDR      r1,[r0,#0x14]  ; t6_tick
000014  1c49              ADDS     r1,r1,#1
000016  6141              STR      r1,[r0,#0x14]  ; t6_tick
;;;88     }
000018  bd10              POP      {r4,pc}
;;;89     
                          ENDP

00001a  0000              DCW      0x0000
                  |L6.28|
                          DCD      ||.data||+0x14

                          AREA ||i._get_timer_tick||, CODE, READONLY, ALIGN=2

                  _get_timer_tick PROC
;;;466    
;;;467    INT32 _get_timer_tick(pwmtimer timer)
000000  4a05              LDR      r2,|L7.24|
;;;468    {
;;;469        UINT32 cur_tick;
;;;470    
;;;471        volatile kdp_timer_struct *ctimer = &ftimer[timer];
000002  eb000140          ADD      r1,r0,r0,LSL #1
000006  eb020181          ADD      r1,r2,r1,LSL #2
00000a  b108              CBZ      r0,|L7.16|
;;;472    
;;;473        if ((timer == 0) || (timer > MAX_PWM_TIMER))
00000c  2806              CMP      r0,#6
00000e  d901              BLS      |L7.20|
                  |L7.16|
;;;474            return FALSE;
000010  2000              MOVS     r0,#0
;;;475    
;;;476        cur_tick=ctimer->Tick;
;;;477    
;;;478        return cur_tick;
;;;479    }
000012  4770              BX       lr
                  |L7.20|
000014  6848              LDR      r0,[r1,#4]            ;476
000016  4770              BX       lr
;;;480    
                          ENDP

                  |L7.24|
                          DCD      ||.bss||

                          AREA ||i._print_pwm_reg||, CODE, READONLY, ALIGN=1

                  _print_pwm_reg PROC
;;;603    
;;;604    void _print_pwm_reg(pwmtimer timer)
000000  4770              BX       lr
;;;605    {
;;;606    #if 0
;;;607        UINT32 val = 0;
;;;608        
;;;609        val = inw(TimerBase[timer]);
;;;610        //dbg_msg("T%d_CTRL = 0x%4x", timer, val);
;;;611        val = inw(CNTBBase[timer]);
;;;612        //dbg_msg("T%d_CNTB = 0x%4x", timer, val);
;;;613        val = inw(CMPBBase[timer]);
;;;614        //dbg_msg("T%d_CMPB = 0x%4x", timer, val);
;;;615        val = inw(CMPBBase[timer] + 0x4);
;;;616        //dbg_msg("T%d_CNTO = 0x%4x", timer, val);
;;;617    #endif
;;;618    }
;;;619    
                          ENDP


                          AREA ||i._set_timer_clk_source||, CODE, READONLY, ALIGN=2

                  _set_timer_clk_source PROC
;;;353    
;;;354    INT32 _set_timer_clk_source(pwmtimer timer,UINT32 clk)
000000  b108              CBZ      r0,|L9.6|
;;;355    {
;;;356        if ((timer == 0) || (timer > MAX_PWM_TIMER))
000002  2806              CMP      r0,#6
000004  d901              BLS      |L9.10|
                  |L9.6|
;;;357            return FALSE;
000006  2000              MOVS     r0,#0
;;;358    
;;;359        masked_outw(TimerBase[timer], clk, TMR_CTRL_CLK_SRC);
;;;360    
;;;361        return TRUE;
;;;362    }
000008  4770              BX       lr
                  |L9.10|
00000a  4a04              LDR      r2,|L9.28|
00000c  f8520020          LDR      r0,[r2,r0,LSL #2]     ;359
000010  6802              LDR      r2,[r0,#0]            ;359
000012  f3610200          BFI      r2,r1,#0,#1           ;359
000016  6002              STR      r2,[r0,#0]            ;359
000018  2001              MOVS     r0,#1                 ;361
00001a  4770              BX       lr
;;;363    
                          ENDP

                  |L9.28|
                          DCD      ||.data||+0x18

                          AREA ||i._set_timer_tick||, CODE, READONLY, ALIGN=2

                  _set_timer_tick PROC
;;;480    
;;;481    INT32 _set_timer_tick(UINT32 timer,UINT32 clk_tick)
000000  4b06              LDR      r3,|L10.28|
;;;482    {
;;;483        volatile kdp_timer_struct *ctimer = &ftimer[timer];
000002  eb000240          ADD      r2,r0,r0,LSL #1
000006  eb030282          ADD      r2,r3,r2,LSL #2
00000a  b108              CBZ      r0,|L10.16|
;;;484    
;;;485        if ((timer == 0) || (timer > MAX_PWM_TIMER))
00000c  2806              CMP      r0,#6
00000e  d901              BLS      |L10.20|
                  |L10.16|
;;;486            return FALSE;
000010  2000              MOVS     r0,#0
;;;487    
;;;488        ctimer->Tick=clk_tick;
;;;489    
;;;490        return TRUE;
;;;491    }
000012  4770              BX       lr
                  |L10.20|
000014  6051              STR      r1,[r2,#4]            ;488
000016  2001              MOVS     r0,#1                 ;490
000018  4770              BX       lr
;;;492    
                          ENDP

00001a  0000              DCW      0x0000
                  |L10.28|
                          DCD      ||.bss||

                          AREA ||i._timer_dma_enable||, CODE, READONLY, ALIGN=2

                  _timer_dma_enable PROC
;;;282    
;;;283    INT32 _timer_dma_enable(UINT32 timer)
000000  b108              CBZ      r0,|L11.6|
;;;284    {
;;;285    
;;;286        //timer_struct *ctimer=&ftimer[timer];
;;;287    
;;;288        if ((timer == 0) || (timer > MAX_PWM_TIMER))
000002  2806              CMP      r0,#6
000004  d901              BLS      |L11.10|
                  |L11.6|
;;;289            return FALSE;
000006  2000              MOVS     r0,#0
;;;290    
;;;291        masked_outw(TimerBase[timer], TMR_CTRL_DMA_EN, TMR_CTRL_DMA_EN);
;;;292    
;;;293        return TRUE;
;;;294    }
000008  4770              BX       lr
                  |L11.10|
00000a  4904              LDR      r1,|L11.28|
00000c  f8510020          LDR      r0,[r1,r0,LSL #2]     ;291
000010  6801              LDR      r1,[r0,#0]            ;291
000012  f0410180          ORR      r1,r1,#0x80           ;291
000016  6001              STR      r1,[r0,#0]            ;291
000018  2001              MOVS     r0,#1                 ;293
00001a  4770              BX       lr
;;;295    
                          ENDP

                  |L11.28|
                          DCD      ||.data||+0x18

                          AREA ||i.kdp_current_t1_tick||, CODE, READONLY, ALIGN=2

                  kdp_current_t1_tick PROC
;;;384    
;;;385    UINT32 kdp_current_t1_tick(void)
000000  4801              LDR      r0,|L12.8|
;;;386    {
;;;387        return t1_tick;
000002  6800              LDR      r0,[r0,#0]  ; t1_tick
;;;388    }
000004  4770              BX       lr
;;;389    
                          ENDP

000006  0000              DCW      0x0000
                  |L12.8|
                          DCD      ||.data||

                          AREA ||i.kdp_current_t2_tick||, CODE, READONLY, ALIGN=2

                  kdp_current_t2_tick PROC
;;;389    
;;;390    UINT32 kdp_current_t2_tick(void)
000000  4801              LDR      r0,|L13.8|
;;;391    {
;;;392        return t2_tick;
000002  6840              LDR      r0,[r0,#4]  ; t2_tick
;;;393    }
000004  4770              BX       lr
;;;394    
                          ENDP

000006  0000              DCW      0x0000
                  |L13.8|
                          DCD      ||.data||

                          AREA ||i.kdp_current_t3_tick||, CODE, READONLY, ALIGN=2

                  kdp_current_t3_tick PROC
;;;394    
;;;395    UINT32 kdp_current_t3_tick(void)
000000  4801              LDR      r0,|L14.8|
;;;396    {
;;;397        return t3_tick;
000002  6880              LDR      r0,[r0,#8]  ; t3_tick
;;;398    }
000004  4770              BX       lr
;;;399    
                          ENDP

000006  0000              DCW      0x0000
                  |L14.8|
                          DCD      ||.data||

                          AREA ||i.kdp_current_t4_tick||, CODE, READONLY, ALIGN=2

                  kdp_current_t4_tick PROC
;;;399    
;;;400    UINT32 kdp_current_t4_tick(void)
000000  4801              LDR      r0,|L15.8|
;;;401    {
;;;402        return t4_tick;
000002  68c0              LDR      r0,[r0,#0xc]  ; t4_tick
;;;403    }
000004  4770              BX       lr
;;;404    
                          ENDP

000006  0000              DCW      0x0000
                  |L15.8|
                          DCD      ||.data||

                          AREA ||i.kdp_current_t5_tick||, CODE, READONLY, ALIGN=2

                  kdp_current_t5_tick PROC
;;;404    
;;;405    UINT32 kdp_current_t5_tick(void)
000000  4801              LDR      r0,|L16.8|
;;;406    {
;;;407        return t5_tick;
000002  6900              LDR      r0,[r0,#0x10]  ; t5_tick
;;;408    }
000004  4770              BX       lr
;;;409    
                          ENDP

000006  0000              DCW      0x0000
                  |L16.8|
                          DCD      ||.data||

                          AREA ||i.kdp_current_t6_tick||, CODE, READONLY, ALIGN=2

                  kdp_current_t6_tick PROC
;;;409    
;;;410    UINT32 kdp_current_t6_tick(void)
000000  4801              LDR      r0,|L17.8|
;;;411    {
;;;412        return t6_tick;
000002  6940              LDR      r0,[r0,#0x14]  ; t6_tick
;;;413    }
000004  4770              BX       lr
;;;414    
                          ENDP

000006  0000              DCW      0x0000
                  |L17.8|
                          DCD      ||.data||

                          AREA ||i.kdp_pwm_config||, CODE, READONLY, ALIGN=2

                  kdp_pwm_config PROC
;;;502    /* Routine to start the specified timer & enable the PWM function */
;;;503    BOOL kdp_pwm_config(pwmtimer timer, pwmpolarity polarity, int duty, int period)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;504    {
000004  0004              MOVS     r4,r0
;;;505        //UINT32 val;
;;;506        unsigned int freq;
;;;507    	unsigned int ratio_period = 0;
000006  f04f0500          MOV      r5,#0
;;;508    	unsigned int ratio_duty = 0;	
00000a  4628              MOV      r0,r5
00000c  d001              BEQ      |L18.18|
;;;509    	unsigned int tmp;
;;;510        kdp_timer_control setting;
;;;511        if (timer == 0 || timer > MAX_PWM_TIMER)
00000e  2c06              CMP      r4,#6
000010  d903              BLS      |L18.26|
                  |L18.18|
;;;512            return FALSE;
000012  f04f0000          MOV      r0,#0
                  |L18.22|
;;;513    
;;;514        //_print_pwm_reg(timer);
;;;515            
;;;516        if(timer == PWMTIMER6)
;;;517        {
;;;518            //val = PINMUX_LC_DATA12_GET();
;;;519            //dbg_msg("LC_DATA12_GET = 0x%4x",val);
;;;520            PINMUX_LC_DATA12_SET(PINMUX_LC_DATA12_PWM5);
;;;521            //val = PINMUX_LC_DATA12_GET();
;;;522            //dbg_msg("LC_DATA12_GET = 0x%4x",val);
;;;523        }
;;;524     
;;;525        PWMCNTB[timer] = (kdp_pwm_CNTB *) (CNTBBase[timer]);
;;;526        PWMCMPB[timer] = (kdp_pwm_CMPB *) (CMPBBase[timer]);
;;;527        
;;;528        memset(&setting,0,4);
;;;529    
;;;530        if(period)                /*	ratio_period = 1000000000 / period_ns;*/
;;;531    	{
;;;532    		tmp = 1000000000;
;;;533    		tmp = tmp/period;
;;;534    		ratio_period = tmp;
;;;535    	}
;;;536    	
;;;537    	if(duty)                /*	ratio_duty = 1000000000 / duty_ns; */
;;;538    	{	
;;;539    		tmp = 1000000000;
;;;540    		tmp = tmp/duty;
;;;541    		ratio_duty = tmp;
;;;542    	}
;;;543        
;;;544        if(ratio_period)
;;;545    	{	
;;;546    		freq = APB_CLK / ratio_period;
;;;547    		PWMCNTB[timer]->Counter = freq ;
;;;548    	}
;;;549    	
;;;550    	if(ratio_duty)
;;;551    	{	
;;;552    		freq = APB_CLK / ratio_duty;
;;;553    		PWMCMPB[timer]->CompareBuffer = freq ;
;;;554    	}
;;;555        else
;;;556        {
;;;557            PWMCMPB[timer]->CompareBuffer = 1 ;
;;;558        }
;;;559        setting.TmStart = 0;
;;;560        setting.TmUpdate = 1;
;;;561        setting.TmOutInv = polarity;
;;;562        setting.TmAutoLoad = 1;
;;;563        memcpy((void *)TimerBase[timer],&setting,4);
;;;564    
;;;565        kdp_pwm_start(timer);
;;;566    
;;;567        if ( duty == 0 )
;;;568        {
;;;569            delay_us(1000);
;;;570            kdp_pwm_stop(timer);
;;;571        }
;;;572    
;;;573        return TRUE;
;;;574    }
000016  e8bd81f0          POP      {r4-r8,pc}
                  |L18.26|
00001a  d108              BNE      |L18.46|
00001c  4e23              LDR      r6,|L18.172|
00001e  f8d6716c          LDR      r7,[r6,#0x16c]        ;520
000022  f0270707          BIC      r7,r7,#7              ;520
000026  f1070702          ADD      r7,r7,#2              ;520
00002a  f8c6716c          STR      r7,[r6,#0x16c]        ;520
                  |L18.46|
00002e  4e20              LDR      r6,|L18.176|
000030  4f20              LDR      r7,|L18.180|
000032  f856c024          LDR      r12,[r6,r4,LSL #2]    ;525
000036  4e1f              LDR      r6,|L18.180|
000038  f107071c          ADD      r7,r7,#0x1c           ;526
00003c  f846c024          STR      r12,[r6,r4,LSL #2]    ;525
000040  4e1b              LDR      r6,|L18.176|
000042  f106061c          ADD      r6,r6,#0x1c           ;526
000046  f8566024          LDR      r6,[r6,r4,LSL #2]     ;526
00004a  f8476024          STR      r6,[r7,r4,LSL #2]     ;526
00004e  4e1a              LDR      r6,|L18.184|
000050  b10b              CBZ      r3,|L18.86|
000052  fbb6f5f3          UDIV     r5,r6,r3              ;533
                  |L18.86|
000056  b10a              CBZ      r2,|L18.92|
000058  fbb6f0f2          UDIV     r0,r6,r2              ;540
                  |L18.92|
00005c  4b17              LDR      r3,|L18.188|
00005e  b11d              CBZ      r5,|L18.104|
000060  fbb3f5f5          UDIV     r5,r3,r5              ;546
000064  f8cc5000          STR      r5,[r12,#0]           ;547
                  |L18.104|
000068  b110              CBZ      r0,|L18.112|
00006a  fbb3f0f0          UDIV     r0,r3,r0              ;552
00006e  e001              B        |L18.116|
                  |L18.112|
000070  f04f0001          MOV      r0,#1                 ;557
                  |L18.116|
000074  f8573024          LDR      r3,[r7,r4,LSL #2]     ;557
000078  6018              STR      r0,[r3,#0]            ;560
00007a  f04f0004          MOV      r0,#4                 ;560
00007e  f36100c3          BFI      r0,r1,#3,#1           ;561
000082  490b              LDR      r1,|L18.176|
000084  f0400010          ORR      r0,r0,#0x10           ;562
000088  f1a1011c          SUB      r1,r1,#0x1c           ;563
00008c  f8511024          LDR      r1,[r1,r4,LSL #2]     ;563
000090  6008              STR      r0,[r1,#0]            ;563
000092  4620              MOV      r0,r4                 ;565
000094  f7fffffe          BL       kdp_pwm_start
000098  b932              CBNZ     r2,|L18.168|
00009a  f44f707a          MOV      r0,#0x3e8             ;569
00009e  f7fffffe          BL       delay_us
0000a2  4620              MOV      r0,r4                 ;570
0000a4  f7fffffe          BL       kdp_pwm_stop
                  |L18.168|
0000a8  2001              MOVS     r0,#1                 ;573
0000aa  e7b4              B        |L18.22|
;;;575    
                          ENDP

                  |L18.172|
                          DCD      0xc2380000
                  |L18.176|
                          DCD      ||.data||+0x34
                  |L18.180|
                          DCD      ||.bss||+0x54
                  |L18.184|
                          DCD      0x3b9aca00
                  |L18.188|
                          DCD      0x05f5e100

                          AREA ||i.kdp_pwm_disable||, CODE, READONLY, ALIGN=2

                  kdp_pwm_disable PROC
;;;596    
;;;597    BOOL kdp_pwm_disable(pwmtimer timer)
000000  4904              LDR      r1,|L19.20|
;;;598    {
;;;599        masked_outw(TimerBase[timer], 0, TMR_CTRL_PWM_EN);
000002  f8510020          LDR      r0,[r1,r0,LSL #2]
000006  6801              LDR      r1,[r0,#0]
000008  f4217180          BIC      r1,r1,#0x100
00000c  6001              STR      r1,[r0,#0]
;;;600            
;;;601        return TRUE;
00000e  2001              MOVS     r0,#1
;;;602    }
000010  4770              BX       lr
;;;603    
                          ENDP

000012  0000              DCW      0x0000
                  |L19.20|
                          DCD      ||.data||+0x18

                          AREA ||i.kdp_pwm_enable||, CODE, READONLY, ALIGN=2

                  kdp_pwm_enable PROC
;;;589    
;;;590    BOOL kdp_pwm_enable(pwmtimer timer)
000000  4904              LDR      r1,|L20.20|
;;;591    {
;;;592        masked_outw(TimerBase[timer], TMR_CTRL_PWM_EN, TMR_CTRL_PWM_EN);
000002  f8510020          LDR      r0,[r1,r0,LSL #2]
000006  6801              LDR      r1,[r0,#0]
000008  f4417180          ORR      r1,r1,#0x100
00000c  6001              STR      r1,[r0,#0]
;;;593    
;;;594        return TRUE;
00000e  2001              MOVS     r0,#1
;;;595    }
000010  4770              BX       lr
;;;596    
                          ENDP

000012  0000              DCW      0x0000
                  |L20.20|
                          DCD      ||.data||+0x18

                          AREA ||i.kdp_pwm_start||, CODE, READONLY, ALIGN=2

                  kdp_pwm_start PROC
;;;575    
;;;576    BOOL kdp_pwm_start(pwmtimer timer)
000000  4904              LDR      r1,|L21.20|
;;;577    {
;;;578        masked_outw(TimerBase[timer], TMR_CTRL_START, TMR_CTRL_START);
000002  f8510020          LDR      r0,[r1,r0,LSL #2]
000006  6801              LDR      r1,[r0,#0]
000008  f0410102          ORR      r1,r1,#2
00000c  6001              STR      r1,[r0,#0]
;;;579    
;;;580        return TRUE;
00000e  2001              MOVS     r0,#1
;;;581    }
000010  4770              BX       lr
;;;582    
                          ENDP

000012  0000              DCW      0x0000
                  |L21.20|
                          DCD      ||.data||+0x18

                          AREA ||i.kdp_pwm_stop||, CODE, READONLY, ALIGN=2

                  kdp_pwm_stop PROC
;;;582    
;;;583    BOOL kdp_pwm_stop(pwmtimer timer)
000000  4904              LDR      r1,|L22.20|
;;;584    {
;;;585        masked_outw(TimerBase[timer], 0, TMR_CTRL_START);
000002  f8510020          LDR      r0,[r1,r0,LSL #2]
000006  6801              LDR      r1,[r0,#0]
000008  f0210102          BIC      r1,r1,#2
00000c  6001              STR      r1,[r0,#0]
;;;586    
;;;587        return TRUE;
00000e  2001              MOVS     r0,#1
;;;588    }
000010  4770              BX       lr
;;;589    
                          ENDP

000012  0000              DCW      0x0000
                  |L22.20|
                          DCD      ||.data||+0x18

                          AREA ||i.kdp_timer_autoreloadenable||, CODE, READONLY, ALIGN=2

                  kdp_timer_autoreloadenable PROC
;;;230    
;;;231    INT32 kdp_timer_autoreloadenable(pwmtimer timer)
000000  b108              CBZ      r0,|L23.6|
;;;232    {
;;;233        //timer_struct *ctimer=&ftimer[timer];
;;;234    
;;;235        if ((timer == 0) || (timer > MAX_PWM_TIMER))
000002  2806              CMP      r0,#6
000004  d901              BLS      |L23.10|
                  |L23.6|
;;;236            return FALSE;
000006  2000              MOVS     r0,#0
;;;237    
;;;238        masked_outw(TimerBase[timer], TMR_CTRL_AUTO_LOAD, TMR_CTRL_AUTO_LOAD);
;;;239        return TRUE;
;;;240    }
000008  4770              BX       lr
                  |L23.10|
00000a  4904              LDR      r1,|L23.28|
00000c  f8510020          LDR      r0,[r1,r0,LSL #2]     ;238
000010  6801              LDR      r1,[r0,#0]            ;238
000012  f0410110          ORR      r1,r1,#0x10           ;238
000016  6001              STR      r1,[r0,#0]            ;238
000018  2001              MOVS     r0,#1                 ;239
00001a  4770              BX       lr
;;;241    
                          ENDP

                  |L23.28|
                          DCD      ||.data||+0x18

                          AREA ||i.kdp_timer_autoreloadvalue||, CODE, READONLY, ALIGN=2

                  kdp_timer_autoreloadvalue PROC
;;;492    
;;;493    void kdp_timer_autoreloadvalue(pwmtimer timer, UINT32 value)
000000  4a02              LDR      r2,|L24.12|
;;;494    {
;;;495        outw(TimerBase[timer] + TIMER_LOAD, value);
000002  f8520020          LDR      r0,[r2,r0,LSL #2]
000006  6041              STR      r1,[r0,#4]
;;;496    }
000008  4770              BX       lr
;;;497    
                          ENDP

00000a  0000              DCW      0x0000
                  |L24.12|
                          DCD      ||.data||+0x18

                          AREA ||i.kdp_timer_close||, CODE, READONLY, ALIGN=2

                  kdp_timer_close PROC
;;;91     /* Routine to disable a timer and free-up the associated IRQ */
;;;92     INT32 kdp_timer_close(pwmtimer timer)
000000  b510              PUSH     {r4,lr}
;;;93     {
000002  0004              MOVS     r4,r0
000004  d032              BEQ      |L25.108|
;;;94         u32 timer_irq;
;;;95     
;;;96         if (timer == 0 || timer > MAX_PWM_TIMER)
000006  2c06              CMP      r4,#6
000008  d830              BHI      |L25.108|
;;;97             return FALSE;
;;;98     
;;;99         if(!kdp_timer_disable(timer))
00000a  f7fffffe          BL       kdp_timer_disable
00000e  2800              CMP      r0,#0
000010  d02b              BEQ      |L25.106|
000012  2100              MOVS     r1,#0
;;;100            return FALSE;   /* Stop the timer first */
;;;101    
;;;102        switch(timer)
;;;103        {
;;;104            case PWMTIMER1:
;;;105                timer_irq = PWM_FTPWMTMR010_1_IRQ;
;;;106                t1_tick = 0;
000014  4a16              LDR      r2,|L25.112|
000016  2c07              CMP      r4,#7                 ;102
000018  d228              BCS      |L25.108|
00001a  e8dff004          TBB      [pc,r4]               ;102
00001e  2704              DCB      0x27,0x04
000020  070a0d10          DCB      0x07,0x0a,0x0d,0x10
000024  1300              DCB      0x13,0x00
000026  200c              MOVS     r0,#0xc               ;105
;;;107            break;
000028  6011              STR      r1,[r2,#0]  ; t1_tick
00002a  e00d              B        |L25.72|
;;;108            case PWMTIMER2:
;;;109                timer_irq = PWM_FTPWMTMR010_2_IRQ;
00002c  200d              MOVS     r0,#0xd
;;;110                t2_tick = 0;
;;;111            break;
00002e  6051              STR      r1,[r2,#4]  ; t2_tick
000030  e00a              B        |L25.72|
;;;112            case PWMTIMER3:
;;;113                timer_irq = PWM_FTPWMTMR010_3_IRQ;
000032  200e              MOVS     r0,#0xe
;;;114                t3_tick = 0;
;;;115            break;
000034  6091              STR      r1,[r2,#8]  ; t3_tick
000036  e007              B        |L25.72|
;;;116            case PWMTIMER4:
;;;117                timer_irq = PWM_FTPWMTMR010_4_IRQ;
000038  200f              MOVS     r0,#0xf
;;;118                t4_tick = 0;
;;;119            break;
00003a  60d1              STR      r1,[r2,#0xc]  ; t4_tick
00003c  e004              B        |L25.72|
;;;120            case PWMTIMER5:
;;;121                timer_irq = PWM_FTPWMTMR010_5_IRQ;
00003e  2010              MOVS     r0,#0x10
;;;122                t5_tick = 0;
;;;123            break;
000040  6111              STR      r1,[r2,#0x10]  ; t5_tick
000042  e001              B        |L25.72|
;;;124            case PWMTIMER6:
;;;125                timer_irq = PWM_FTPWMTMR010_6_IRQ;
000044  2011              MOVS     r0,#0x11
;;;126                t6_tick = 0;
000046  6151              STR      r1,[r2,#0x14]  ; t6_tick
                  |L25.72|
000048  2800              CMP      r0,#0
00004a  db0d              BLT      |L25.104|
00004c  f000021f          AND      r2,r0,#0x1f
000050  2101              MOVS     r1,#1
000052  4091              LSLS     r1,r1,r2
000054  0940              LSRS     r0,r0,#5
000056  0080              LSLS     r0,r0,#2
000058  f10020e0          ADD      r0,r0,#0xe000e000
00005c  f8c01180          STR      r1,[r0,#0x180]
000060  f3bf8f4f          DSB      
000064  f3bf8f6f          ISB      
                  |L25.104|
;;;127            break;
;;;128            default:
;;;129                return FALSE;
;;;130        }	
;;;131            
;;;132        NVIC_DisableIRQ((IRQn_Type)timer_irq);
;;;133            
;;;134        return TRUE;
000068  2001              MOVS     r0,#1
                  |L25.106|
;;;135    }
00006a  bd10              POP      {r4,pc}
                  |L25.108|
00006c  2000              MOVS     r0,#0                 ;129
00006e  bd10              POP      {r4,pc}
;;;136    
                          ENDP

                  |L25.112|
                          DCD      ||.data||

                          AREA ||i.kdp_timer_cmpvalue||, CODE, READONLY, ALIGN=2

                  kdp_timer_cmpvalue PROC
;;;348    
;;;349    void kdp_timer_cmpvalue(pwmtimer timer, UINT32 value)
000000  4a02              LDR      r2,|L26.12|
;;;350    {
;;;351        outw(TimerBase[timer] + TIMER_COMPARE, value);
000002  f8520020          LDR      r0,[r2,r0,LSL #2]
000006  6081              STR      r1,[r0,#8]
;;;352    }
000008  4770              BX       lr
;;;353    
                          ENDP

00000a  0000              DCW      0x0000
                  |L26.12|
                          DCD      ||.data||+0x18

                          AREA ||i.kdp_timer_counter||, CODE, READONLY, ALIGN=2

                  kdp_timer_counter PROC
;;;242    
;;;243    INT32 kdp_timer_counter(pwmtimer timer)
000000  4902              LDR      r1,|L27.12|
;;;244    {
;;;245        return inw(TimerBase[timer] + TIMER_CNTO);
000002  f8510020          LDR      r0,[r1,r0,LSL #2]
000006  68c0              LDR      r0,[r0,#0xc]
;;;246    }
000008  4770              BX       lr
;;;247    
                          ENDP

00000a  0000              DCW      0x0000
                  |L27.12|
                          DCD      ||.data||+0x18

                          AREA ||i.kdp_timer_disable||, CODE, READONLY, ALIGN=2

                  kdp_timer_disable PROC
;;;316    /* This routine stops the specified timer hardware. */
;;;317    INT32 kdp_timer_disable(pwmtimer timer)
000000  4a08              LDR      r2,|L28.36|
;;;318    {
;;;319        kdp_timer_struct *ctimer=&ftimer[timer];
000002  eb000140          ADD      r1,r0,r0,LSL #1
000006  eb020181          ADD      r1,r2,r1,LSL #2
00000a  b108              CBZ      r0,|L28.16|
;;;320    
;;;321        if ((timer == 0) || (timer > MAX_PWM_TIMER))
00000c  2806              CMP      r0,#6
00000e  d901              BLS      |L28.20|
                  |L28.16|
;;;322            return FALSE;
000010  2000              MOVS     r0,#0
;;;323    
;;;324        /* Disable the Control register bit */
;;;325        outw(TimerBase[timer], 0);
;;;326    
;;;327         //set the timer status=false
;;;328        ctimer->Running=FALSE;
;;;329    
;;;330        return TRUE;
;;;331    }
000012  4770              BX       lr
                  |L28.20|
000014  4b04              LDR      r3,|L28.40|
000016  2200              MOVS     r2,#0                 ;325
000018  f8530020          LDR      r0,[r3,r0,LSL #2]     ;325
00001c  6002              STR      r2,[r0,#0]            ;325
00001e  2001              MOVS     r0,#1                 ;330
000020  608a              STR      r2,[r1,#8]            ;330
000022  4770              BX       lr
;;;332    
                          ENDP

                  |L28.36|
                          DCD      ||.bss||
                  |L28.40|
                          DCD      ||.data||+0x18

                          AREA ||i.kdp_timer_enable||, CODE, READONLY, ALIGN=2

                  kdp_timer_enable PROC
;;;296    /* This routine starts the specified timer hardware. */
;;;297    INT32 kdp_timer_enable(pwmtimer timer)
000000  4a0b              LDR      r2,|L29.48|
;;;298    {
;;;299        kdp_timer_struct *ctimer=&ftimer[timer];
000002  eb000140          ADD      r1,r0,r0,LSL #1
000006  eb020181          ADD      r1,r2,r1,LSL #2
00000a  b170              CBZ      r0,|L29.42|
;;;300    
;;;301        if ((timer == 0) || (timer > MAX_PWM_TIMER))
00000c  2806              CMP      r0,#6
00000e  d80c              BHI      |L29.42|
;;;302            return FALSE;
;;;303    
;;;304        if(ctimer->Running==TRUE)
000010  688a              LDR      r2,[r1,#8]
000012  2a01              CMP      r2,#1
000014  d009              BEQ      |L29.42|
;;;305            return FALSE;
;;;306    
;;;307        masked_outw(TimerBase[timer], (TMR_CTRL_UPDATE | TMR_CTRL_START), (TMR_CTRL_UPDATE | TMR_CTRL_START));
000016  4a07              LDR      r2,|L29.52|
000018  f8520020          LDR      r0,[r2,r0,LSL #2]
00001c  6802              LDR      r2,[r0,#0]
00001e  f0420206          ORR      r2,r2,#6
000022  6002              STR      r2,[r0,#0]
;;;308    
;;;309        //set the timer status =true
;;;310        ctimer->Running=TRUE;
000024  2001              MOVS     r0,#1
;;;311    
;;;312        return TRUE;
000026  6088              STR      r0,[r1,#8]
;;;313    }
000028  4770              BX       lr
                  |L29.42|
00002a  2000              MOVS     r0,#0                 ;305
00002c  4770              BX       lr
;;;314    
                          ENDP

00002e  0000              DCW      0x0000
                  |L29.48|
                          DCD      ||.bss||
                  |L29.52|
                          DCD      ||.data||+0x18

                          AREA ||i.kdp_timer_init||, CODE, READONLY, ALIGN=2

                  kdp_timer_init PROC
;;;161    /* Routine to start the specified timer & enable the interrupt */
;;;162    BOOL kdp_timer_init(pwmtimer timer, u32 tick)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;163    {
000004  4688              MOV      r8,r1
000006  0005              MOVS     r5,r0
;;;164        kdp_timer_struct *ctimer=&ftimer[timer];
000008  492f              LDR      r1,|L30.200|
00000a  eb050045          ADD      r0,r5,r5,LSL #1
00000e  eb010780          ADD      r7,r1,r0,LSL #2
000012  d056              BEQ      |L30.194|
;;;165        UINT32 timer_irq;
;;;166        FNTimerISR isr;
;;;167    
;;;168        if (timer == 0 || timer > MAX_PWM_TIMER)
000014  2d06              CMP      r5,#6
000016  d854              BHI      |L30.194|
000018  2000              MOVS     r0,#0
;;;169        return FALSE;
;;;170    
;;;171        switch(timer)
;;;172        {
;;;173            case PWMTIMER1:
;;;174                t1_tick = 0;
00001a  492c              LDR      r1,|L30.204|
00001c  2d07              CMP      r5,#7                 ;171
00001e  d250              BCS      |L30.194|
000020  e8dff005          TBB      [pc,r5]               ;171
000024  4f04080c          DCB      0x4f,0x04,0x08,0x0c
000028  10141800          DCB      0x10,0x14,0x18,0x00
;;;175                timer_irq = PWM_FTPWMTMR010_1_IRQ;		
00002c  240c              MOVS     r4,#0xc
;;;176                isr = PWMTMR1_IRQHandler;
00002e  4e28              LDR      r6,|L30.208|
;;;177            break;
000030  6008              STR      r0,[r1,#0]  ; t1_tick
000032  e012              B        |L30.90|
;;;178            case PWMTIMER2:
;;;179                t2_tick = 0;
;;;180                timer_irq = PWM_FTPWMTMR010_2_IRQ;		
000034  240d              MOVS     r4,#0xd
;;;181                isr = PWMTMR2_IRQHandler;
000036  4e27              LDR      r6,|L30.212|
;;;182            break;
000038  6048              STR      r0,[r1,#4]  ; t2_tick
00003a  e00e              B        |L30.90|
;;;183            case PWMTIMER3:
;;;184                t3_tick = 0;
;;;185                timer_irq = PWM_FTPWMTMR010_3_IRQ;		
00003c  240e              MOVS     r4,#0xe
;;;186                isr = PWMTMR3_IRQHandler;
00003e  4e26              LDR      r6,|L30.216|
;;;187            break;
000040  6088              STR      r0,[r1,#8]  ; t3_tick
000042  e00a              B        |L30.90|
;;;188            case PWMTIMER4:
;;;189                t4_tick = 0;
;;;190                timer_irq = PWM_FTPWMTMR010_4_IRQ;		
000044  240f              MOVS     r4,#0xf
;;;191                isr = PWMTMR4_IRQHandler;
000046  4e25              LDR      r6,|L30.220|
;;;192            break;
000048  60c8              STR      r0,[r1,#0xc]  ; t4_tick
00004a  e006              B        |L30.90|
;;;193            case PWMTIMER5:
;;;194                t5_tick = 0;
;;;195                timer_irq = PWM_FTPWMTMR010_5_IRQ;		
00004c  2410              MOVS     r4,#0x10
;;;196                isr = PWMTMR5_IRQHandler;
00004e  4e24              LDR      r6,|L30.224|
;;;197            break;
000050  6108              STR      r0,[r1,#0x10]  ; t5_tick
000052  e002              B        |L30.90|
;;;198            case PWMTIMER6:
;;;199                t6_tick = 0;
;;;200                timer_irq = PWM_FTPWMTMR010_6_IRQ;		
;;;201                isr = PWMTMR6_IRQHandler;
000054  4e23              LDR      r6,|L30.228|
000056  2411              MOVS     r4,#0x11              ;200
000058  6148              STR      r0,[r1,#0x14]  ; t6_tick
                  |L30.90|
;;;202            break;
;;;203            default:
;;;204                return FALSE;
;;;205        }
;;;206    
;;;207        kdp_timer_close(timer);
00005a  4628              MOV      r0,r5
00005c  f7fffffe          BL       kdp_timer_close
;;;208    
;;;209        /* Set the timer tick */
;;;210        if(!kdp_timer_ioctrl(IO_TIMER_SETTICK,timer,tick))
000060  4642              MOV      r2,r8
000062  4629              MOV      r1,r5
000064  2002              MOVS     r0,#2
000066  f7fffffe          BL       kdp_timer_ioctrl
00006a  2800              CMP      r0,#0
00006c  d027              BEQ      |L30.190|
00006e  4917              LDR      r1,|L30.204|
000070  6878              LDR      r0,[r7,#4]
000072  3118              ADDS     r1,r1,#0x18
000074  f8511025          LDR      r1,[r1,r5,LSL #2]
000078  6048              STR      r0,[r1,#4]
;;;211            return FALSE;
;;;212    
;;;213        kdp_timer_autoreloadvalue(timer,ctimer->Tick);
;;;214        /*enable auto and int bit */
;;;215        kdp_timer_autoreloadenable(timer);
00007a  4628              MOV      r0,r5
00007c  f7fffffe          BL       kdp_timer_autoreloadenable
;;;216    
;;;217        kdp_timer_int_clear(timer);
000080  4628              MOV      r0,r5
000082  f7fffffe          BL       kdp_timer_int_clear
;;;218        if (!kdp_timer_int_enable(timer))
000086  4628              MOV      r0,r5
000088  f7fffffe          BL       kdp_timer_int_enable
00008c  2800              CMP      r0,#0
00008e  d016              BEQ      |L30.190|
000090  4815              LDR      r0,|L30.232|
000092  6800              LDR      r0,[r0,#0]
000094  2c00              CMP      r4,#0
000096  eb000084          ADD      r0,r0,r4,LSL #2
00009a  6406              STR      r6,[r0,#0x40]
00009c  db09              BLT      |L30.178|
00009e  f004011f          AND      r1,r4,#0x1f
0000a2  2001              MOVS     r0,#1
0000a4  4088              LSLS     r0,r0,r1
0000a6  0961              LSRS     r1,r4,#5
0000a8  0089              LSLS     r1,r1,#2
0000aa  f10121e0          ADD      r1,r1,#0xe000e000
0000ae  f8c10100          STR      r0,[r1,#0x100]
                  |L30.178|
;;;219            return FALSE;
;;;220    
;;;221        NVIC_SetVector((IRQn_Type)timer_irq, (uint32_t)isr);    
;;;222        NVIC_EnableIRQ((IRQn_Type)timer_irq);
;;;223    
;;;224        /* Start the timer ticking */
;;;225        if(!kdp_timer_enable(timer))
0000b2  4628              MOV      r0,r5
0000b4  f7fffffe          BL       kdp_timer_enable
0000b8  2800              CMP      r0,#0
0000ba  d000              BEQ      |L30.190|
;;;226            return FALSE;
;;;227            
;;;228        return TRUE;
0000bc  2001              MOVS     r0,#1
                  |L30.190|
;;;229    }
0000be  e8bd81f0          POP      {r4-r8,pc}
                  |L30.194|
0000c2  2000              MOVS     r0,#0                 ;204
0000c4  e7fb              B        |L30.190|
;;;230    
                          ENDP

0000c6  0000              DCW      0x0000
                  |L30.200|
                          DCD      ||.bss||
                  |L30.204|
                          DCD      ||.data||
                  |L30.208|
                          DCD      PWMTMR1_IRQHandler
                  |L30.212|
                          DCD      PWMTMR2_IRQHandler
                  |L30.216|
                          DCD      PWMTMR3_IRQHandler
                  |L30.220|
                          DCD      PWMTMR4_IRQHandler
                  |L30.224|
                          DCD      PWMTMR5_IRQHandler
                  |L30.228|
                          DCD      PWMTMR6_IRQHandler
                  |L30.232|
                          DCD      0xe000ed08

                          AREA ||i.kdp_timer_int_clear||, CODE, READONLY, ALIGN=2

                  kdp_timer_int_clear PROC
;;;333    /* This routine starts the specified timer hardware. */
;;;334    INT32 kdp_timer_int_clear(pwmtimer timer)
000000  b108              CBZ      r0,|L31.6|
;;;335    {
;;;336        int value;
;;;337    
;;;338            if ((timer == 0) || (timer > MAX_PWM_TIMER))
000002  2806              CMP      r0,#6
000004  d901              BLS      |L31.10|
                  |L31.6|
;;;339        {
;;;340           return FALSE;
000006  2000              MOVS     r0,#0
;;;341        }
;;;342    
;;;343        value=1<<(timer-1);
;;;344        outw(PWM_FTPWMTMR010_PA_BASE + TIMER_INTSTAT, value);
;;;345    
;;;346        return TRUE;
;;;347    }
000008  4770              BX       lr
                  |L31.10|
00000a  2101              MOVS     r1,#1                 ;343
00000c  1e40              SUBS     r0,r0,#1              ;343
00000e  4081              LSLS     r1,r1,r0              ;343
000010  4801              LDR      r0,|L31.24|
000012  6001              STR      r1,[r0,#0]            ;344
000014  2001              MOVS     r0,#1                 ;346
000016  4770              BX       lr
;;;348    
                          ENDP

                  |L31.24|
                          DCD      0xc1f00000

                          AREA ||i.kdp_timer_int_disable||, CODE, READONLY, ALIGN=2

                  kdp_timer_int_disable PROC
;;;257    
;;;258    INT32 kdp_timer_int_disable(UINT32 timer)
000000  b108              CBZ      r0,|L32.6|
;;;259    {
;;;260        //timer_struct *ctimer=&ftimer[timer];
;;;261    
;;;262        if ((timer == 0) || (timer > MAX_PWM_TIMER))
000002  2806              CMP      r0,#6
000004  d901              BLS      |L32.10|
                  |L32.6|
;;;263            return FALSE;
000006  2000              MOVS     r0,#0
;;;264    
;;;265        masked_outw(TimerBase[timer], 0, TMR_CTRL_INT_EN);
;;;266    
;;;267        return TRUE;
;;;268    }
000008  4770              BX       lr
                  |L32.10|
00000a  4904              LDR      r1,|L32.28|
00000c  f8510020          LDR      r0,[r1,r0,LSL #2]     ;265
000010  6801              LDR      r1,[r0,#0]            ;265
000012  f0210120          BIC      r1,r1,#0x20           ;265
000016  6001              STR      r1,[r0,#0]            ;265
000018  2001              MOVS     r0,#1                 ;267
00001a  4770              BX       lr
;;;269    
                          ENDP

                  |L32.28|
                          DCD      ||.data||+0x18

                          AREA ||i.kdp_timer_int_enable||, CODE, READONLY, ALIGN=2

                  kdp_timer_int_enable PROC
;;;248    
;;;249    INT32 kdp_timer_int_enable(pwmtimer timer)
000000  b108              CBZ      r0,|L33.6|
;;;250    {
;;;251        if ((timer == 0) || (timer > MAX_PWM_TIMER))
000002  2806              CMP      r0,#6
000004  d901              BLS      |L33.10|
                  |L33.6|
;;;252            return FALSE;
000006  2000              MOVS     r0,#0
;;;253    
;;;254        masked_outw(TimerBase[timer], TMR_CTRL_INT_EN, TMR_CTRL_INT_EN);
;;;255        return TRUE;
;;;256    }
000008  4770              BX       lr
                  |L33.10|
00000a  4904              LDR      r1,|L33.28|
00000c  f8510020          LDR      r0,[r1,r0,LSL #2]     ;254
000010  6801              LDR      r1,[r0,#0]            ;254
000012  f0410120          ORR      r1,r1,#0x20           ;254
000016  6001              STR      r1,[r0,#0]            ;254
000018  2001              MOVS     r0,#1                 ;255
00001a  4770              BX       lr
;;;257    
                          ENDP

                  |L33.28|
                          DCD      ||.data||+0x18

                          AREA ||i.kdp_timer_intmode_enable||, CODE, READONLY, ALIGN=2

                  kdp_timer_intmode_enable PROC
;;;270    
;;;271    INT32 kdp_timer_intmode_enable(UINT32 timer,UINT32 mode)
000000  b108              CBZ      r0,|L34.6|
;;;272    {
;;;273        //timer_struct *ctimer=&ftimer[timer];
;;;274    
;;;275        if ((timer == 0) || (timer > MAX_PWM_TIMER))
000002  2806              CMP      r0,#6
000004  d901              BLS      |L34.10|
                  |L34.6|
;;;276            return FALSE;
000006  2000              MOVS     r0,#0
;;;277    
;;;278        masked_outw(TimerBase[timer], mode << 6, TMR_CTRL_INT_MODE);
;;;279    
;;;280        return TRUE;
;;;281    }
000008  4770              BX       lr
                  |L34.10|
00000a  4a04              LDR      r2,|L34.28|
00000c  f8520020          LDR      r0,[r2,r0,LSL #2]     ;278
000010  6802              LDR      r2,[r0,#0]            ;278
000012  f3611286          BFI      r2,r1,#6,#1           ;278
000016  6002              STR      r2,[r0,#0]            ;278
000018  2001              MOVS     r0,#1                 ;280
00001a  4770              BX       lr
;;;282    
                          ENDP

                  |L34.28|
                          DCD      ||.data||+0x18

                          AREA ||i.kdp_timer_ioctrl||, CODE, READONLY, ALIGN=1

                  kdp_timer_ioctrl PROC
;;;137    
;;;138    INT32 kdp_timer_ioctrl(timeriotype iotype, pwmtimer timer, UINT32 tick)
000000  b500              PUSH     {lr}
;;;139    {
000002  460b              MOV      r3,r1
000004  b138              CBZ      r0,|L35.22|
;;;140        switch(iotype)
000006  2801              CMP      r0,#1
000008  d009              BEQ      |L35.30|
00000a  2802              CMP      r0,#2
00000c  d00c              BEQ      |L35.40|
00000e  2803              CMP      r0,#3
000010  d010              BEQ      |L35.52|
;;;141        {
;;;142            case IO_TIMER_RESETALL:
;;;143                kdp_timer_resetall();
;;;144                break;
;;;145            case IO_TIMER_GETTICK:
;;;146                return _get_timer_tick(timer);
;;;147             // break;
;;;148            case IO_TIMER_SETTICK:
;;;149                return _set_timer_tick(timer,tick);
;;;150             // break;
;;;151            case IO_TIMER_SETCLKSRC:
;;;152                return _set_timer_clk_source(timer,tick);
;;;153             // break;
;;;154            default:
;;;155                return FALSE;
000012  2000              MOVS     r0,#0
;;;156        }
;;;157    
;;;158        return TRUE;
;;;159    }
000014  bd00              POP      {pc}
                  |L35.22|
000016  f7fffffe          BL       kdp_timer_resetall
00001a  2001              MOVS     r0,#1                 ;158
00001c  bd00              POP      {pc}
                  |L35.30|
00001e  4608              MOV      r0,r1                 ;146
000020  f85deb04          POP      {lr}                  ;146
000024  f7ffbffe          B.W      _get_timer_tick
                  |L35.40|
000028  4611              MOV      r1,r2                 ;149
00002a  4618              MOV      r0,r3                 ;149
00002c  f85deb04          POP      {lr}                  ;149
000030  f7ffbffe          B.W      _set_timer_tick
                  |L35.52|
000034  4611              MOV      r1,r2                 ;152
000036  4618              MOV      r0,r3                 ;152
000038  f85deb04          POP      {lr}                  ;152
00003c  f7ffbffe          B.W      _set_timer_clk_source
;;;160    
                          ENDP


                          AREA ||i.kdp_timer_resetall||, CODE, READONLY, ALIGN=1

                  kdp_timer_resetall PROC
;;;456    /* Start-up routine to initialise the timers to a known state */
;;;457    void kdp_timer_resetall(void)
000000  b510              PUSH     {r4,lr}
;;;458    {
;;;459        UINT32 i;
;;;460    
;;;461        //reset all timer to default value
;;;462        for (i = 1; i <= MAX_PWM_TIMER; i++)
000002  2401              MOVS     r4,#1
                  |L36.4|
;;;463            kdp_timer_disable((pwmtimer)i);
000004  b2e0              UXTB     r0,r4
000006  f7fffffe          BL       kdp_timer_disable
00000a  1c64              ADDS     r4,r4,#1
00000c  2c06              CMP      r4,#6                 ;462
00000e  d9f9              BLS      |L36.4|
;;;464    
;;;465    }
000010  bd10              POP      {r4,pc}
;;;466    
                          ENDP


                          AREA ||i.kdp_timer_tick_reset||, CODE, READONLY, ALIGN=2

                  kdp_timer_tick_reset PROC
;;;414    
;;;415    void kdp_timer_tick_reset(pwmtimer timer)
000000  2800              CMP      r0,#0
;;;416    {
000002  d00c              BEQ      |L37.30|
;;;417        if ((timer == 0) || (timer > MAX_PWM_TIMER))
000004  2806              CMP      r0,#6
000006  d80a              BHI      |L37.30|
000008  2100              MOVS     r1,#0
;;;418        {
;;;419            return;
;;;420        }
;;;421    
;;;422        switch(timer)
;;;423        {
;;;424            case PWMTIMER1:
;;;425                t1_tick = 0;
00000a  4a0a              LDR      r2,|L37.52|
00000c  2807              CMP      r0,#7                 ;422
00000e  d206              BCS      |L37.30|
000010  e8dff000          TBB      [pc,r0]               ;422
000014  05040608          DCB      0x05,0x04,0x06,0x08
000018  0a0c0e00          DCB      0x0a,0x0c,0x0e,0x00
;;;426            break;
00001c  6011              STR      r1,[r2,#0]  ; t1_tick
                  |L37.30|
;;;427            case PWMTIMER2:
;;;428                t2_tick = 0;
;;;429            break;
;;;430            case PWMTIMER3:
;;;431                t3_tick = 0;
;;;432            break;
;;;433            case PWMTIMER4:
;;;434                t4_tick = 0;
;;;435            break;
;;;436            case PWMTIMER5:
;;;437                t5_tick = 0;
;;;438            break;
;;;439            case PWMTIMER6:
;;;440                t6_tick = 0;
;;;441            break;
;;;442            default:
;;;443                return;
;;;444        }   
;;;445    
;;;446        return;
;;;447    }
00001e  4770              BX       lr
000020  6051              STR      r1,[r2,#4]            ;429  ; t2_tick
000022  4770              BX       lr
000024  6091              STR      r1,[r2,#8]            ;432  ; t3_tick
000026  4770              BX       lr
000028  60d1              STR      r1,[r2,#0xc]          ;435  ; t4_tick
00002a  4770              BX       lr
00002c  6111              STR      r1,[r2,#0x10]         ;438  ; t5_tick
00002e  4770              BX       lr
000030  6151              STR      r1,[r2,#0x14]         ;440  ; t6_tick
000032  4770              BX       lr
;;;448    
                          ENDP

                  |L37.52|
                          DCD      ||.data||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  ftimer
                          %        84
                  PWMCNTB
                          %        28
                  PWMCMPB
                          %        28

                          AREA ||.data||, DATA, ALIGN=2

                  t1_tick
                          DCD      0x00000000
                  t2_tick
                          DCD      0x00000000
                  t3_tick
                          DCD      0x00000000
                  t4_tick
                          DCD      0x00000000
                  t5_tick
                          DCD      0x00000000
                  t6_tick
                          DCD      0x00000000
                  TimerBase
                          DCD      0x00000000
                          DCD      0xc1f00010
                          DCD      0xc1f00020
                          DCD      0xc1f00030
                          DCD      0xc1f00040
                          DCD      0xc1f00050
                          DCD      0xc1f00060
                  CNTBBase
                          DCD      0x00000000
                          DCD      0xc1f00014
                          DCD      0xc1f00024
                          DCD      0xc1f00034
                          DCD      0xc1f00044
                          DCD      0xc1f00054
                          DCD      0xc1f00064
                  CMPBBase
                          DCD      0x00000000
                          DCD      0xc1f00018
                          DCD      0xc1f00028
                          DCD      0xc1f00038
                          DCD      0xc1f00048
                          DCD      0xc1f00058
                          DCD      0xc1f00068

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\scpu\\drivers\\src\\kdp520_pwm_timer.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___18_kdp520_pwm_timer_c_t1_tick____REV16|
#line 208 "F:\\Users\\fu\\AppData\\Local\\Arm\\Packs\\ARM\\CMSIS\\5.9.0\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___18_kdp520_pwm_timer_c_t1_tick____REV16| PROC
#line 209

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___18_kdp520_pwm_timer_c_t1_tick____REVSH|
#line 223
|__asm___18_kdp520_pwm_timer_c_t1_tick____REVSH| PROC
#line 224

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___18_kdp520_pwm_timer_c_t1_tick____RRX|
#line 410
|__asm___18_kdp520_pwm_timer_c_t1_tick____RRX| PROC
#line 411

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
