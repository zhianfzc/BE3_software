; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\objects\kdp_comm_protoco.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\kdp_comm_protoco.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O3 --diag_suppress=9931 -I..\..\config -I..\..\..\..\board -I..\..\..\..\common\include -I..\..\..\..\scpu\device\include\CMSIS -I..\..\..\..\scpu\device\include\Kneron -I..\..\..\..\scpu\framework\include -I..\..\..\..\scpu\framework\include\framework -I..\..\..\..\scpu\drivers\include -I..\..\..\..\scpu\drivers\include\media\touch -I..\..\..\..\scpu\drivers\include\media\flash -I..\..\..\..\scpu\lib\kdp_system\inc -I..\..\..\..\scpu\lib\kdp_application\include\ -I..\..\..\..\scpu\lib\kdp_application\base\ -I..\..\..\..\scpu\lib\kdp_application\misc -I..\..\..\..\scpu\lib\kdp_e2e_r1n1\include -I..\..\..\..\scpu\include -I..\..\..\..\scpu\middleware\ota -I..\..\..\..\scpu\middleware\comm -I..\..\..\..\scpu\middleware\kdp_comm -I..\..\..\..\scpu\share -I..\..\..\..\scpu\share\gui_lib -I..\..\user -I.\RTE\CMSIS -I.\RTE\_Target-scpu -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\RTOS2\Include -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\RTOS2\RTX\Include -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\Device\ARM\ARMCM4\Include -D__RTX -D__MICROLIB -D__UVISION_VERSION=538 -D_RTE_ -DARMCM4_FP -D_RTE_ -DARM_MATH_CM4 -DTARGET_SCPU -DLOG_ENABLE -DKL520 -DHEAD_POSE_CHECK_PERCENT --omf_browse=.\objects\kdp_comm_protoco.crf ..\..\..\..\scpu\middleware\kdp_comm\kdp_comm_protoco.c]
                          THUMB

                          AREA ||i.DSM_AesEncrypt||, CODE, READONLY, ALIGN=2

                  DSM_AesEncrypt PROC
;;;141    
;;;142    void DSM_AesEncrypt(uint8_t* input, uint8_t* output, uint16_t size)
000000  b5fe              PUSH     {r1-r7,lr}
;;;143    {
000002  4606              MOV      r6,r0
;;;144        //input:data  output:enc data
;;;145        uint16_t s_msg_head = MSG_HEAD;
000004  f64a20ef          MOV      r0,#0xaaef
000008  f8ad0004          STRH     r0,[sp,#4]
00000c  460d              MOV      r5,r1                 ;143
00000e  ba50              REV16    r0,r2                 ;143
;;;146        uint16_t realSize = ShortType_BigToSmallEnd(size);
000010  f8ad0008          STRH     r0,[sp,#8]
000014  4614              MOV      r4,r2                 ;143
;;;147    
;;;148        memset(output,0,size+MSG_AES_HEAD_TAIL_SIZE);
000016  1d51              ADDS     r1,r2,#5
000018  4628              MOV      r0,r5
00001a  f7fffffe          BL       __aeabi_memclr
;;;149        //memcpy(output, &s_msg_head, MSG_AES_HEAD_SIZE);
;;;150        //memcpy(output+2, &realSize, MSG_AES_DATA_SIZE);
;;;151    
;;;152    #ifdef DEV_PKT_LOG_DETAIL
;;;153            dbg_msg_nocrlf("Plaintext Tx: ");
;;;154            for(u16 i=0; i<size; i++) {
;;;155                dbg_msg_nocrlf("%02x ", input[i]);
;;;156            }
;;;157            dbg_msg_nocrlf("\r\n");
;;;158    #endif
;;;159    
;;;160        //if(output[0]!=0xef || output[1]!=0xaa)
;;;161            //      dbg_msg_console("DSM_AesEncrypt000: output[0]:0x%02x,output[1]:0x%02x,output[2]:0x%02x",output[0],output[1],output[2]);
;;;162        int ret = aesEncrypt(debug_key, KEY_SIZE, input, output+MSG_AES_HEAD_BIG_SIZE, size);//maybe set msg_head to 0.
00001e  1d2b              ADDS     r3,r5,#4
000020  4632              MOV      r2,r6
000022  2110              MOVS     r1,#0x10
000024  480b              LDR      r0,|L1.84|
000026  9400              STR      r4,[sp,#0]
000028  f7fffffe          BL       aesEncrypt
;;;163            //if(output[0]!=0xef || output[1]!=0xaa)
;;;164            //  dbg_msg_console("DSM_AesEncrypt111: output[0]:0x%02x,output[1]:0x%02x,output[2]:0x%02x,size:%d",output[0],output[1],output[2],size);
;;;165        *(output+size+MSG_AES_HEAD_BIG_SIZE) = checksum_cal(output, MSG_AES_HEAD_BIG_SIZE, size+MSG_AES_HEAD_BIG_SIZE);
00002c  1d20              ADDS     r0,r4,#4
00002e  b282              UXTH     r2,r0
000030  2104              MOVS     r1,#4
000032  4628              MOV      r0,r5
000034  f7fffffe          BL       checksum_cal
000038  1929              ADDS     r1,r5,r4
00003a  7108              STRB     r0,[r1,#4]
;;;166        memcpy(output, &s_msg_head, MSG_AES_HEAD_SIZE);
00003c  f8bd0004          LDRH     r0,[sp,#4]
;;;167        memcpy(output+2, &realSize, MSG_AES_DATA_SIZE);
;;;168            if(output[0]!=COM_BUS_HEAD_RX_1 || output[1]!=COM_BUS_HEAD_RX_2)
;;;169                    dbg_msg_com("DSM_AesEncrypt222: output[0]:0x%02x,output[1]:0x%02x,output[2]:0x%02x",output[0],output[1],output[2]);
;;;170        g_nMsgPkgSize += MSG_AES_HEAD_TAIL_SIZE;
000040  4904              LDR      r1,|L1.84|
000042  8028              STRH     r0,[r5,#0]            ;166
000044  f8bd0008          LDRH     r0,[sp,#8]            ;167
000048  3908              SUBS     r1,r1,#8
00004a  8068              STRH     r0,[r5,#2]            ;167
00004c  8808              LDRH     r0,[r1,#0]  ; g_nMsgPkgSize
00004e  1d40              ADDS     r0,r0,#5
000050  8008              STRH     r0,[r1,#0]
;;;171    }
000052  bdfe              POP      {r1-r7,pc}
;;;172    #endif
                          ENDP

                  |L1.84|
                          DCD      ||.data||+0x8

                          AREA ||i.DSM_CheckBodySize||, CODE, READONLY, ALIGN=1

                  DSM_CheckBodySize PROC
;;;133    #if ( ENCRYPTION_MODE&AES_ENCRYPTION )
;;;134    uint16_t DSM_CheckBodySize( uint16_t body_size)
000000  0701              LSLS     r1,r0,#28
;;;135    {
000002  d003              BEQ      |L2.12|
;;;136        uint16_t check_body_size = body_size;
;;;137        if(body_size%16 != 0)
;;;138            check_body_size = (1+(body_size>>4))<<4;
000004  0900              LSRS     r0,r0,#4
000006  0100              LSLS     r0,r0,#4
000008  3010              ADDS     r0,r0,#0x10
00000a  b280              UXTH     r0,r0
                  |L2.12|
;;;139        return check_body_size;
;;;140    }
00000c  4770              BX       lr
;;;141    
                          ENDP


                          AREA ||i.DSM_XOREncrypt||, CODE, READONLY, ALIGN=2

                  DSM_XOREncrypt PROC
;;;174    #if ( ENCRYPTION_MODE&XOR_ENCRYPTION )
;;;175    void DSM_XOREncrypt(uint8_t* input, uint8_t* output, uint16_t size)
000000  b5fe              PUSH     {r1-r7,lr}
;;;176    {
000002  4606              MOV      r6,r0
;;;177        //input:data  output:enc data
;;;178        uint16_t s_msg_head = MSG_HEAD;
000004  f64a20ef          MOV      r0,#0xaaef
000008  f8ad0004          STRH     r0,[sp,#4]
00000c  460d              MOV      r5,r1                 ;176
00000e  ba50              REV16    r0,r2                 ;176
;;;179        uint16_t realSize = ShortType_BigToSmallEnd(size);
000010  f8ad0008          STRH     r0,[sp,#8]
000014  4614              MOV      r4,r2                 ;176
;;;180    
;;;181        memset(output,0,size+MSG_AES_HEAD_TAIL_SIZE);
000016  1d51              ADDS     r1,r2,#5
000018  4628              MOV      r0,r5
00001a  f7fffffe          BL       __aeabi_memclr
;;;182        //memcpy(output, &s_msg_head, MSG_AES_HEAD_SIZE);
;;;183        //memcpy(output+2, &realSize, MSG_AES_DATA_SIZE);
;;;184    
;;;185    #ifdef DEV_PKT_LOG_DETAIL
;;;186            dbg_msg_nocrlf("Plaintext Tx: ");
;;;187            for(u16 i=0; i<size; i++) {
;;;188                dbg_msg_nocrlf("%02x ", input[i]);
;;;189            }
;;;190            dbg_msg_nocrlf("\r\n");
;;;191    #endif
;;;192    
;;;193        //if(output[0]!=0xef || output[1]!=0xaa)
;;;194            //      dbg_msg_console("DSM_AesEncrypt000: output[0]:0x%02x,output[1]:0x%02x,output[2]:0x%02x",output[0],output[1],output[2]);
;;;195        int ret = encBytes( input, size, debug_key, 16, output+MSG_AES_HEAD_BIG_SIZE );
00001e  1d28              ADDS     r0,r5,#4
000020  9000              STR      r0,[sp,#0]
000022  2310              MOVS     r3,#0x10
000024  4a0c              LDR      r2,|L3.88|
000026  4621              MOV      r1,r4
000028  4630              MOV      r0,r6
00002a  f7fffffe          BL       encBytes
;;;196    
;;;197            //if(output[0]!=0xef || output[1]!=0xaa)
;;;198            //  dbg_msg_console("DSM_AesEncrypt111: output[0]:0x%02x,output[1]:0x%02x,output[2]:0x%02x,size:%d",output[0],output[1],output[2],size);
;;;199        *(output+size+MSG_AES_HEAD_BIG_SIZE) = checksum_cal(output, MSG_AES_HEAD_BIG_SIZE, size+MSG_AES_HEAD_BIG_SIZE);
00002e  1d20              ADDS     r0,r4,#4
000030  b282              UXTH     r2,r0
000032  2104              MOVS     r1,#4
000034  4628              MOV      r0,r5
000036  f7fffffe          BL       checksum_cal
00003a  1929              ADDS     r1,r5,r4
00003c  7108              STRB     r0,[r1,#4]
;;;200        memcpy(output, &s_msg_head, MSG_AES_HEAD_SIZE);
00003e  f8bd0004          LDRH     r0,[sp,#4]
;;;201        memcpy(output+2, &realSize, MSG_AES_DATA_SIZE);
;;;202        if(output[0]!=COM_BUS_HEAD_RX_1 || output[1]!=COM_BUS_HEAD_RX_2)
;;;203                    dbg_msg_com("DSM_AesEncrypt222: output[0]:0x%02x,output[1]:0x%02x,output[2]:0x%02x",output[0],output[1],output[2]);
;;;204            //dbg_msg_com("DSM_AesEncrypt checksum:%02x", *(output+size+MSG_AES_HEAD_BIG_SIZE));
;;;205        g_nMsgPkgSize += MSG_AES_HEAD_TAIL_SIZE;
000042  4905              LDR      r1,|L3.88|
000044  8028              STRH     r0,[r5,#0]            ;200
000046  f8bd0008          LDRH     r0,[sp,#8]            ;201
00004a  3908              SUBS     r1,r1,#8
00004c  8068              STRH     r0,[r5,#2]            ;201
00004e  8808              LDRH     r0,[r1,#0]  ; g_nMsgPkgSize
000050  1d40              ADDS     r0,r0,#5
000052  8008              STRH     r0,[r1,#0]
;;;206    
;;;207    }
000054  bdfe              POP      {r1-r7,pc}
;;;208    #endif
                          ENDP

000056  0000              DCW      0x0000
                  |L3.88|
                          DCD      ||.data||+0x8

                          AREA ||i.IntType_BigToSmallEnd||, CODE, READONLY, ALIGN=1

                  IntType_BigToSmallEnd PROC
;;;101    }
;;;102    uint32_t IntType_BigToSmallEnd(uint32_t value)
000000  0e01              LSRS     r1,r0,#24
;;;103    {
;;;104        uint32_t temp = ((value>>24)&0xff) | (((value>>16)&0xff)<<8) | (((value>>8)&0xff)<<16) | ((value&0xff)<<24);
000002  f3c04207          UBFX     r2,r0,#16,#8
000006  ea412102          ORR      r1,r1,r2,LSL #8
00000a  f3c02207          UBFX     r2,r0,#8,#8
00000e  ea414102          ORR      r1,r1,r2,LSL #16
000012  ea416000          ORR      r0,r1,r0,LSL #24
;;;105        return temp;
;;;106    }
000016  4770              BX       lr
;;;107    
                          ENDP


                          AREA ||i.PkgDecrypt||, CODE, READONLY, ALIGN=2

                  PkgDecrypt PROC
;;;231    
;;;232    void PkgDecrypt(uint8_t *bytes, int length, const uint8_t *key, int stride, uint8_t *out)
000000  b538              PUSH     {r3-r5,lr}
;;;233    {
000002  4615              MOV      r5,r2
;;;234    #if ( ENCRYPTION_MODE&XOR_ENCRYPTION )&&( ENCRYPTION_MODE&AES_ENCRYPTION )
;;;235        if ( g_nEncryptionMode == XOR_ENCRYPTION )
000004  4a09              LDR      r2,|L5.44|
000006  461c              MOV      r4,r3                 ;233
000008  9b04              LDR      r3,[sp,#0x10]
00000a  7812              LDRB     r2,[r2,#0]  ; g_nEncryptionMode
00000c  2a02              CMP      r2,#2
00000e  d006              BEQ      |L5.30|
;;;236        {
;;;237            DecBytes( bytes, length, key, stride, out );
;;;238        }
;;;239        else
;;;240        {
;;;241            aesDecrypt(key, stride, bytes, out, length);
000010  4602              MOV      r2,r0
000012  9100              STR      r1,[sp,#0]
000014  4621              MOV      r1,r4
000016  4628              MOV      r0,r5
000018  f7fffffe          BL       aesDecrypt
;;;242        }
;;;243    #elif ( ENCRYPTION_MODE&AES_ENCRYPTION )
;;;244        aesDecrypt(key, stride, bytes, out, length);
;;;245    #elif ( ENCRYPTION_MODE&XOR_ENCRYPTION )
;;;246        DecBytes( bytes, length, key, stride, out );
;;;247    #endif
;;;248    }
00001c  bd38              POP      {r3-r5,pc}
                  |L5.30|
00001e  9300              STR      r3,[sp,#0]            ;237
000020  4623              MOV      r3,r4                 ;237
000022  462a              MOV      r2,r5                 ;237
000024  f7fffffe          BL       DecBytes
000028  bd38              POP      {r3-r5,pc}
;;;249    #endif
                          ENDP

00002a  0000              DCW      0x0000
                  |L5.44|
                          DCD      g_nEncryptionMode

                          AREA ||i.ShortType_BigToSmallEnd||, CODE, READONLY, ALIGN=1

                  ShortType_BigToSmallEnd PROC
;;;96     
;;;97     uint16_t ShortType_BigToSmallEnd(uint16_t value)
000000  ba40              REV16    r0,r0
;;;98     {
;;;99         uint16_t temp = ((value>>8)&0xff) | ((value&0xff)<<8);
;;;100        return temp;
;;;101    }
000002  4770              BX       lr
;;;102    uint32_t IntType_BigToSmallEnd(uint32_t value)
                          ENDP


                          AREA ||i.StreamsToBigEndU16||, CODE, READONLY, ALIGN=1

                  StreamsToBigEndU16 PROC
;;;86     
;;;87     u16 StreamsToBigEndU16(u8* pData)
000000  8800              LDRH     r0,[r0,#0]
;;;88     {
;;;89         return ((pData[0]<<8)|(pData[1]<<0));
000002  ba40              REV16    r0,r0
;;;90     }
000004  4770              BX       lr
;;;91     
                          ENDP


                          AREA ||i.StreamsToBigEndU32||, CODE, READONLY, ALIGN=1

                  StreamsToBigEndU32 PROC
;;;91     
;;;92     u32 StreamsToBigEndU32(u8* pData)
000000  6801              LDR      r1,[r0,#0]
;;;93     {
;;;94         return ((pData[0]<<24)|(pData[1]<<16)|(pData[2]<<8)|(pData[3]<<0));
000002  78c0              LDRB     r0,[r0,#3]
000004  ba09              REV      r1,r1
000006  f02101ff          BIC      r1,r1,#0xff
00000a  4308              ORRS     r0,r0,r1
;;;95     }
00000c  4770              BX       lr
;;;96     
                          ENDP


                          AREA ||i.checksum_cal||, CODE, READONLY, ALIGN=1

                  checksum_cal PROC
;;;107    
;;;108    u8 checksum_cal(u8* p_data, u16 IdxS, u16 IdxE)
000000  b510              PUSH     {r4,lr}
;;;109    {
000002  4603              MOV      r3,r0
;;;110        int i;
;;;111        u8 nChkCode = 0;
000004  2000              MOVS     r0,#0
000006  e002              B        |L9.14|
                  |L9.8|
;;;112    
;;;113        for( i = IdxS; i < IdxE; i++ )
;;;114        {
;;;115            //dbg_msg_console("check_code: 0x%02X",*(p_data + i) );
;;;116            nChkCode ^= *(p_data + i);//((MSG_HEAD>>8)^(MSG_HEAD&0xFF)^KID_NOTE^(READY_DATA_SIZE>>8)^(READY_DATA_SIZE&0xFF)^NID_READY^READY_DATA);
000008  5c5c              LDRB     r4,[r3,r1]
00000a  4060              EORS     r0,r0,r4
00000c  1c49              ADDS     r1,r1,#1
                  |L9.14|
00000e  4291              CMP      r1,r2                 ;113
000010  dbfa              BLT      |L9.8|
;;;117        }
;;;118    
;;;119        return nChkCode;
;;;120    }
000012  bd10              POP      {r4,pc}
;;;121    
                          ENDP


                          AREA ||i.kdp_com_fill_hdr||, CODE, READONLY, ALIGN=1

                  kdp_com_fill_hdr PROC
;;;250    
;;;251    static void kdp_com_fill_hdr(msg_base* p, uint8_t cmd, uint16_t size)
000000  2800              CMP      r0,#0
;;;252    {
000002  d006              BEQ      |L10.18|
;;;253        if(p == NULL) return;
;;;254        p->head = MSG_HEAD;
000004  f64a23ef          MOV      r3,#0xaaef
000008  8003              STRH     r3,[r0,#0]
;;;255        p->cmd = cmd;
00000a  7081              STRB     r1,[r0,#2]
00000c  ba51              REV16    r1,r2
;;;256        p->size = kl_htons(size);
00000e  f8a01003          STRH     r1,[r0,#3]
                  |L10.18|
;;;257    }
000012  4770              BX       lr
;;;258    
                          ENDP


                          AREA ||i.kdp_com_pack_rsp_msg||, CODE, READONLY, ALIGN=1

                  kdp_com_pack_rsp_msg PROC
;;;258    
;;;259    static void kdp_com_pack_rsp_msg(s_msg_rsp_base* p, uint8_t cmd, uint16_t size, uint8_t kid, uint8_t result)
000000  b570              PUSH     {r4-r6,lr}
;;;260    {
000002  461d              MOV      r5,r3
000004  9e04              LDR      r6,[sp,#0x10]
000006  0004              MOVS     r4,r0
000008  d003              BEQ      |L11.18|
;;;261        if(p == NULL) return;
;;;262        kdp_com_fill_hdr(&(p->msg_head), cmd, size);
00000a  f7fffffe          BL       kdp_com_fill_hdr
;;;263        
;;;264        p->kid = kid;
00000e  7165              STRB     r5,[r4,#5]
;;;265        p->result = result;
000010  71a6              STRB     r6,[r4,#6]
                  |L11.18|
;;;266        return;
;;;267    }
000012  bd70              POP      {r4-r6,pc}
;;;268    
                          ENDP


                          AREA ||i.kdp_com_send_out_msg||, CODE, READONLY, ALIGN=2

                  kdp_com_send_out_msg PROC
;;;268    
;;;269    static void kdp_com_send_out_msg(uint8_t* msg_ptr, int msg_size)
000000  b570              PUSH     {r4-r6,lr}
;;;270    {
000002  460c              MOV      r4,r1
000004  4605              MOV      r5,r0
;;;271        if(msg_size < (sizeof(msg_base) + 1)) return; //error size
000006  2906              CMP      r1,#6
000008  d32b              BCC      |L12.98|
;;;272    
;;;273        if (g_nEncryptionMode == NO_ENCRYPTION)
00000a  4816              LDR      r0,|L12.100|
00000c  7801              LDRB     r1,[r0,#0]  ; g_nEncryptionMode
00000e  b1a9              CBZ      r1,|L12.60|
;;;274        {
;;;275            //msg.check
;;;276            msg_ptr[msg_size - 1] = checksum_cal(msg_ptr, MSG_HEAD_SIZE, msg_size - MSG_CHK_SIZE);
;;;277            user_com_response_data(msg_ptr, msg_size);
;;;278        }
;;;279    #if ( ENCRYPTION_MODE != NO_ENCRYPTION )
;;;280        else
;;;281        {
;;;282            uint16_t data_size = msg_size - 1 - sizeof(msg_base);
;;;283            PkgEncrypt(msg_ptr, data_size);
000010  1fa4              SUBS     r4,r4,#6
000012  b2a0              UXTH     r0,r4                 ;282
000014  4c14              LDR      r4,|L12.104|
000016  1cc0              ADDS     r0,r0,#3              ;282
000018  462b              MOV      r3,r5
00001a  2902              CMP      r1,#2
00001c  d01a              BEQ      |L12.84|
00001e  b280              UXTH     r0,r0
000020  f7fffffe          BL       DSM_CheckBodySize
000024  8020              STRH     r0,[r4,#0]
000026  4602              MOV      r2,r0
000028  1c98              ADDS     r0,r3,#2
00002a  6861              LDR      r1,[r4,#4]  ; msg_dst
00002c  f7fffffe          BL       DSM_AesEncrypt
                  |L12.48|
;;;284            user_com_response_data(msg_dst, g_nMsgPkgSize);
000030  8821              LDRH     r1,[r4,#0]  ; g_nMsgPkgSize
000032  6860              LDR      r0,[r4,#4]  ; msg_dst
                  |L12.52|
000034  e8bd4070          POP      {r4-r6,lr}
000038  f7ffbffe          B.W      user_com_response_data
                  |L12.60|
00003c  1e60              SUBS     r0,r4,#1              ;276
00003e  b282              UXTH     r2,r0                 ;276
000040  2102              MOVS     r1,#2                 ;276
000042  4628              MOV      r0,r5                 ;276
000044  f7fffffe          BL       checksum_cal
000048  1929              ADDS     r1,r5,r4              ;276
00004a  f8010c01          STRB     r0,[r1,#-1]           ;276
00004e  b2a1              UXTH     r1,r4                 ;277
000050  4628              MOV      r0,r5                 ;277
000052  e7ef              B        |L12.52|
                  |L12.84|
000054  b282              UXTH     r2,r0                 ;277
000056  8022              STRH     r2,[r4,#0]            ;277
000058  1c98              ADDS     r0,r3,#2              ;277
00005a  6861              LDR      r1,[r4,#4]            ;277  ; msg_dst
00005c  f7fffffe          BL       DSM_XOREncrypt
000060  e7e6              B        |L12.48|
                  |L12.98|
;;;285        }
;;;286    #endif
;;;287    }
000062  bd70              POP      {r4-r6,pc}
;;;288    
                          ENDP

                  |L12.100|
                          DCD      g_nEncryptionMode
                  |L12.104|
                          DCD      ||.data||

                          AREA ||i.kdp_comm_get_protocol_version||, CODE, READONLY, ALIGN=1

                  kdp_comm_get_protocol_version PROC
;;;122    #if ( UART_PROTOCOL_VERSION >= 0x0200 )
;;;123    u16 kdp_comm_get_protocol_version(void)
000000  f44f7000          MOV      r0,#0x200
;;;124    {
;;;125        return UART_PROTOCOL_VERSION;
;;;126    }
000004  4770              BX       lr
;;;127    #endif
                          ENDP


                          AREA ||i.kl_htonl||, CODE, READONLY, ALIGN=1

                  kl_htonl PROC
;;;78     
;;;79     u32 kl_htonl(u32 val)
000000  f7ffbffe          B.W      IntType_BigToSmallEnd
;;;80     {
;;;81     #if (NET_BYTE_ORDER == KL_BYTE_ORDER)
;;;82     #else
;;;83         return IntType_BigToSmallEnd(val);
;;;84     #endif
;;;85     }
;;;86     
                          ENDP


                          AREA ||i.kl_htons||, CODE, READONLY, ALIGN=1

                  kl_htons PROC
;;;70     
;;;71     u16 kl_htons(u16 val)
000000  ba40              REV16    r0,r0
;;;72     {
;;;73     #if (NET_BYTE_ORDER == KL_BYTE_ORDER)
;;;74     #else
;;;75         return ShortType_BigToSmallEnd(val);
;;;76     #endif
;;;77     }
000002  4770              BX       lr
;;;78     
                          ENDP


                          AREA ||i.kl_ntohl||, CODE, READONLY, ALIGN=1

                  kl_ntohl PROC
;;;48     
;;;49     u32 kl_ntohl(u32 val)
000000  b501              PUSH     {r0,lr}
;;;50     {
;;;51         u8* p = (u8*) &val;
000002  4668              MOV      r0,sp
;;;52         return kl_ntohpl(p);
000004  f7fffffe          BL       StreamsToBigEndU32
;;;53     }
000008  bd08              POP      {r3,pc}
;;;54     
                          ENDP


                          AREA ||i.kl_ntohpl||, CODE, READONLY, ALIGN=1

                  kl_ntohpl PROC
;;;62     
;;;63     u32 kl_ntohpl(u8* p)
000000  f7ffbffe          B.W      StreamsToBigEndU32
;;;64     {
;;;65     #if (NET_BYTE_ORDER == KL_BYTE_ORDER)
;;;66     #else
;;;67         return StreamsToBigEndU32(p);
;;;68     #endif
;;;69     }
;;;70     
                          ENDP


                          AREA ||i.kl_ntohps||, CODE, READONLY, ALIGN=1

                  kl_ntohps PROC
;;;54     
;;;55     u16 kl_ntohps(u8* p)
000000  8800              LDRH     r0,[r0,#0]
;;;56     {
;;;57     #if (NET_BYTE_ORDER == KL_BYTE_ORDER)
;;;58     #else
;;;59         return StreamsToBigEndU16(p);
000002  ba40              REV16    r0,r0
;;;60     #endif
;;;61     }
000004  4770              BX       lr
;;;62     
                          ENDP


                          AREA ||i.kl_ntohs||, CODE, READONLY, ALIGN=1

                  kl_ntohs PROC
;;;42     
;;;43     u16 kl_ntohs(u16 val)
000000  ba40              REV16    r0,r0
;;;44     {
;;;45         u8* p = (u8*) &val;
;;;46         return kl_ntohps(p);
;;;47     }
000002  4770              BX       lr
;;;48     
                          ENDP


                          AREA ||i.response_delete_msg||, CODE, READONLY, ALIGN=1

                  response_delete_msg PROC
;;;671    
;;;672    void response_delete_msg(uint8_t result, uint8_t OneOrAll)
000000  f7ffbffe          B.W      send_reply_AesNoDataMsg
;;;673    {
;;;674        dbg_msg_com("%s", __func__);
;;;675        send_reply_AesNoDataMsg(result,OneOrAll);
;;;676    }
;;;677    
                          ENDP


                          AREA ||i.response_delete_one_msg||, CODE, READONLY, ALIGN=1

                  response_delete_one_msg PROC
;;;657    #ifdef KID_DEL_USER
;;;658    void response_delete_one_msg(uint8_t result, uint16_t user_id)
000000  b51f              PUSH     {r0-r4,lr}
;;;659    {
000002  460c              MOV      r4,r1
;;;660        s_msg_reply_delete_one_data reply_deleteone;
;;;661    
;;;662        uint16_t msg_size = 2 + MSG_APPEND_2_SIZE;
;;;663        kdp_com_pack_rsp_msg((s_msg_rsp_base*)&reply_deleteone, KID_REPLY, msg_size, KID_DEL_USER, result);
000004  9000              STR      r0,[sp,#0]
000006  2204              MOVS     r2,#4                 ;662
000008  2320              MOVS     r3,#0x20
00000a  2100              MOVS     r1,#0
00000c  a801              ADD      r0,sp,#4
00000e  f7fffffe          BL       kdp_com_pack_rsp_msg
;;;664    
;;;665        reply_deleteone.user_id_heb = (user_id >> 8) & 0xFF;
000012  0a20              LSRS     r0,r4,#8
000014  f88d000b          STRB     r0,[sp,#0xb]
;;;666        reply_deleteone.user_id_leb = user_id & 0xFF;
000018  f88d400c          STRB     r4,[sp,#0xc]
;;;667    
;;;668        kdp_com_send_out_msg((uint8_t*)&reply_deleteone, sizeof(reply_deleteone));
00001c  210a              MOVS     r1,#0xa
00001e  a801              ADD      r0,sp,#4
000020  f7fffffe          BL       kdp_com_send_out_msg
;;;669    }
000024  bd1f              POP      {r0-r4,pc}
;;;670    #endif
                          ENDP


                          AREA ||i.response_get_Alluser_info_msg||, CODE, READONLY, ALIGN=1

                  response_get_Alluser_info_msg PROC
;;;693    #ifdef KID_GET_ALL_USER_ID
;;;694    void response_get_Alluser_info_msg(uint8_t result, msg_get_all_user_id_data P_allUserInfo)   //result:MR_SUCCESS
000000  b40f              PUSH     {r0-r3}
;;;695    {
;;;696        s_msg_reply_get_all_user_info msg_alluserinfo;
;;;697    
;;;698        uint16_t msg_size = sizeof(msg_alluserinfo.AllUserInfo) - sizeof(msg_get_all_user_id_data) + 1 + P_allUserInfo.user_counts * 2 + MSG_APPEND_2_SIZE;
000002  2203              MOVS     r2,#3
000004  b500              PUSH     {lr}                  ;695
000006  b0b7              SUB      sp,sp,#0xdc           ;695
;;;699        kdp_com_pack_rsp_msg((s_msg_rsp_base*)&msg_alluserinfo, KID_REPLY, msg_size, KID_GET_ALL_USER_ID, result);
000008  2324              MOVS     r3,#0x24
00000a  f89d10e4          LDRB     r1,[sp,#0xe4]         ;698
00000e  9000              STR      r0,[sp,#0]
000010  eb020241          ADD      r2,r2,r1,LSL #1       ;698
000014  2100              MOVS     r1,#0
000016  a801              ADD      r0,sp,#4
000018  f7fffffe          BL       kdp_com_pack_rsp_msg
;;;700    
;;;701        memcpy(&msg_alluserinfo.AllUserInfo, &P_allUserInfo, sizeof(P_allUserInfo));     //core provide 20 id
00001c  22c9              MOVS     r2,#0xc9
00001e  a939              ADD      r1,sp,#0xe4
000020  f10d000b          ADD      r0,sp,#0xb
000024  f7fffffe          BL       __aeabi_memcpy
;;;702    
;;;703        kdp_com_send_out_msg((uint8_t*)&msg_alluserinfo, sizeof(msg_alluserinfo) - sizeof(msg_get_all_user_id_data) + 1 + P_allUserInfo.user_counts * 2);
000028  f89d00e4          LDRB     r0,[sp,#0xe4]
00002c  2109              MOVS     r1,#9
00002e  eb010140          ADD      r1,r1,r0,LSL #1
000032  a801              ADD      r0,sp,#4
000034  f7fffffe          BL       kdp_com_send_out_msg
;;;704    }
000038  b037              ADD      sp,sp,#0xdc
00003a  f85dfb14          LDR      pc,[sp],#0x14
;;;705    #endif
                          ENDP


                          AREA ||i.response_get_user_info_msg||, CODE, READONLY, ALIGN=1

                  response_get_user_info_msg PROC
;;;679    #ifdef KID_GET_USER_INFO
;;;680    void response_get_user_info_msg(uint8_t result, msg_get_user_info_data userinfo)          //result:MR_SUCCESS
000000  b40f              PUSH     {r0-r3}
;;;681    {
;;;682        s_msg_reply_get_user_info msg_userinfo;
;;;683    
;;;684        uint16_t msg_size = sizeof(msg_userinfo.user_info) + MSG_APPEND_2_SIZE;
000002  2225              MOVS     r2,#0x25
000004  b500              PUSH     {lr}                  ;681
000006  b08d              SUB      sp,sp,#0x34           ;681
;;;685        kdp_com_pack_rsp_msg((s_msg_rsp_base*)&msg_userinfo, KID_REPLY, msg_size, KID_GET_USER_INFO, result);
000008  2322              MOVS     r3,#0x22
00000a  9000              STR      r0,[sp,#0]
00000c  2100              MOVS     r1,#0
00000e  a801              ADD      r0,sp,#4
000010  f7fffffe          BL       kdp_com_pack_rsp_msg
;;;686    
;;;687        memcpy(&msg_userinfo.user_info, &userinfo, sizeof(userinfo));
000014  2223              MOVS     r2,#0x23
000016  a90f              ADD      r1,sp,#0x3c
000018  f10d000b          ADD      r0,sp,#0xb
00001c  f7fffffe          BL       __aeabi_memcpy
;;;688    
;;;689        kdp_com_send_out_msg((uint8_t*)&msg_userinfo, sizeof(msg_userinfo));
000020  212b              MOVS     r1,#0x2b
000022  a801              ADD      r0,sp,#4
000024  f7fffffe          BL       kdp_com_send_out_msg
;;;690    }
000028  b00d              ADD      sp,sp,#0x34
00002a  f85dfb14          LDR      pc,[sp],#0x14
;;;691    #endif
                          ENDP


                          AREA ||i.response_get_version_info_msg||, CODE, READONLY, ALIGN=1

                  response_get_version_info_msg PROC
;;;417    #ifdef KID_GET_VERSION
;;;418    void response_get_version_info_msg(uint8_t result, uint8_t Version[32]) //result:MR_SUCCESS
000000  b510              PUSH     {r4,lr}
;;;419    {
000002  b08c              SUB      sp,sp,#0x30
000004  460c              MOV      r4,r1
;;;420        s_msg_reply_version_data version_info;
;;;421    
;;;422        uint16_t size = sizeof(version_info.version_infos) + MSG_APPEND_2_SIZE;
;;;423        kdp_com_pack_rsp_msg((s_msg_rsp_base*)&version_info, KID_REPLY, size, KID_GET_VERSION, result);
000006  9000              STR      r0,[sp,#0]
000008  2222              MOVS     r2,#0x22              ;422
00000a  2330              MOVS     r3,#0x30
00000c  2100              MOVS     r1,#0
00000e  a801              ADD      r0,sp,#4
000010  f7fffffe          BL       kdp_com_pack_rsp_msg
;;;424       
;;;425        memcpy(version_info.version_infos,Version,VERSION_INFO_BUFFER_SIZE);
000014  2220              MOVS     r2,#0x20
000016  4621              MOV      r1,r4
000018  f10d000b          ADD      r0,sp,#0xb
00001c  f7fffffe          BL       __aeabi_memcpy
;;;426    
;;;427        kdp_com_send_out_msg((uint8_t*)&version_info, sizeof(version_info));
000020  2128              MOVS     r1,#0x28
000022  a801              ADD      r0,sp,#4
000024  f7fffffe          BL       kdp_com_send_out_msg
;;;428    }
000028  b00c              ADD      sp,sp,#0x30
00002a  bd10              POP      {r4,pc}
;;;429    #endif
                          ENDP


                          AREA ||i.response_get_version_info_msg_zhian||, CODE, READONLY, ALIGN=1

                  response_get_version_info_msg_zhian PROC
;;;430    #ifdef KID_GET_VERSION_ZA
;;;431    void response_get_version_info_msg_zhian(uint8_t result, uint8_t Version[32]) //result:MR_SUCCESS
000000  b530              PUSH     {r4,r5,lr}
;;;432    {
000002  b08b              SUB      sp,sp,#0x2c
000004  460d              MOV      r5,r1
;;;433        s_msg_reply_version_data version_info;
;;;434    
;;;435        uint16_t size = sizeof(version_info.version_infos) + MSG_APPEND_2_SIZE;
;;;436        kdp_com_pack_rsp_msg((s_msg_rsp_base*)&version_info, KID_REPLY, size, KID_GET_VERSION_ZA, result);
000006  9000              STR      r0,[sp,#0]
000008  2222              MOVS     r2,#0x22              ;435
00000a  236a              MOVS     r3,#0x6a
00000c  2100              MOVS     r1,#0
00000e  a801              ADD      r0,sp,#4
000010  f7fffffe          BL       kdp_com_pack_rsp_msg
;;;437        memset(version_info.version_infos, 0, VERSION_INFO_BUFFER_SIZE);//zcy add 
000014  ac01              ADD      r4,sp,#4
000016  2120              MOVS     r1,#0x20
000018  1de0              ADDS     r0,r4,#7
00001a  f7fffffe          BL       __aeabi_memclr
;;;438        memcpy(version_info.version_infos,Version,VERSION_INFO_BUFFER_SIZE);
00001e  2220              MOVS     r2,#0x20
000020  4629              MOV      r1,r5
000022  1de0              ADDS     r0,r4,#7
000024  f7fffffe          BL       __aeabi_memcpy
;;;439    
;;;440        kdp_com_send_out_msg((uint8_t*)&version_info, sizeof(version_info));
000028  2128              MOVS     r1,#0x28
00002a  a801              ADD      r0,sp,#4
00002c  f7fffffe          BL       kdp_com_send_out_msg
;;;441    }
000030  b00b              ADD      sp,sp,#0x2c
000032  bd30              POP      {r4,r5,pc}
;;;442    #endif
                          ENDP


                          AREA ||i.response_get_version_info_msg_zhian_hard||, CODE, READONLY, ALIGN=1

                  response_get_version_info_msg_zhian_hard PROC
;;;457    #ifdef KID_GET_VERSION_HARDWARE
;;;458    void response_get_version_info_msg_zhian_hard(uint8_t result, uint8_t Version[32]) //result:MR_SUCCESS
000000  b530              PUSH     {r4,r5,lr}
;;;459    {
000002  b08b              SUB      sp,sp,#0x2c
000004  460d              MOV      r5,r1
;;;460        s_msg_reply_version_data version_info;
;;;461    
;;;462        uint16_t size = sizeof(version_info.version_infos) + MSG_APPEND_2_SIZE;
;;;463        kdp_com_pack_rsp_msg((s_msg_rsp_base*)&version_info, KID_REPLY, size, KID_GET_VERSION_HARDWARE, result);
000006  9000              STR      r0,[sp,#0]
000008  2222              MOVS     r2,#0x22              ;462
00000a  233b              MOVS     r3,#0x3b
00000c  2100              MOVS     r1,#0
00000e  a801              ADD      r0,sp,#4
000010  f7fffffe          BL       kdp_com_pack_rsp_msg
;;;464        memset(version_info.version_infos, 0, VERSION_INFO_BUFFER_SIZE);//zcy add 
000014  ac01              ADD      r4,sp,#4
000016  2120              MOVS     r1,#0x20
000018  1de0              ADDS     r0,r4,#7
00001a  f7fffffe          BL       __aeabi_memclr
;;;465        memcpy(version_info.version_infos,Version,VERSION_INFO_BUFFER_SIZE);
00001e  2220              MOVS     r2,#0x20
000020  4629              MOV      r1,r5
000022  1de0              ADDS     r0,r4,#7
000024  f7fffffe          BL       __aeabi_memcpy
;;;466    
;;;467        kdp_com_send_out_msg((uint8_t*)&version_info, sizeof(version_info));
000028  2128              MOVS     r1,#0x28
00002a  a801              ADD      r0,sp,#4
00002c  f7fffffe          BL       kdp_com_send_out_msg
;;;468    }
000030  b00b              ADD      sp,sp,#0x2c
000032  bd30              POP      {r4,r5,pc}
;;;469    #endif
                          ENDP


                          AREA ||i.response_get_version_info_msg_zhian_prd||, CODE, READONLY, ALIGN=1

                  response_get_version_info_msg_zhian_prd PROC
;;;443    #ifdef KID_GET_VERSION_ZAPRD
;;;444    void response_get_version_info_msg_zhian_prd(uint8_t result, uint8_t Version[32]) //result:MR_SUCCESS
000000  b530              PUSH     {r4,r5,lr}
;;;445    {
000002  b08b              SUB      sp,sp,#0x2c
000004  460d              MOV      r5,r1
;;;446        s_msg_reply_version_data version_info;
;;;447    
;;;448        uint16_t size = sizeof(version_info.version_infos) + MSG_APPEND_2_SIZE;
;;;449        kdp_com_pack_rsp_msg((s_msg_rsp_base*)&version_info, KID_REPLY, size, KID_GET_VERSION_ZAPRD, result);
000006  9000              STR      r0,[sp,#0]
000008  2222              MOVS     r2,#0x22              ;448
00000a  233a              MOVS     r3,#0x3a
00000c  2100              MOVS     r1,#0
00000e  a801              ADD      r0,sp,#4
000010  f7fffffe          BL       kdp_com_pack_rsp_msg
;;;450        memset(version_info.version_infos, 0, VERSION_INFO_BUFFER_SIZE);//zcy add 
000014  ac01              ADD      r4,sp,#4
000016  2120              MOVS     r1,#0x20
000018  1de0              ADDS     r0,r4,#7
00001a  f7fffffe          BL       __aeabi_memclr
;;;451        memcpy(version_info.version_infos,Version,VERSION_INFO_BUFFER_SIZE);
00001e  2220              MOVS     r2,#0x20
000020  4629              MOV      r1,r5
000022  1de0              ADDS     r0,r4,#7
000024  f7fffffe          BL       __aeabi_memcpy
;;;452    
;;;453        kdp_com_send_out_msg((uint8_t*)&version_info, sizeof(version_info));
000028  2128              MOVS     r1,#0x28
00002a  a801              ADD      r0,sp,#4
00002c  f7fffffe          BL       kdp_com_send_out_msg
;;;454    }
000030  b00b              ADD      sp,sp,#0x2c
000032  bd30              POP      {r4,r5,pc}
;;;455    #endif
                          ENDP


                          AREA ||i.send_AlgThreshold_level_reply_msg||, CODE, READONLY, ALIGN=1

                  send_AlgThreshold_level_reply_msg PROC
;;;850    #ifdef KID_SET_THRESHOLD_LEVEL
;;;851    void send_AlgThreshold_level_reply_msg(uint8_t result) //MR_SUCCESS
000000  21d4              MOVS     r1,#0xd4
;;;852    {
;;;853        dbg_msg_com("%s", __func__);
;;;854        send_reply_AesNoDataMsg(result, KID_SET_THRESHOLD_LEVEL);
000002  f7ffbffe          B.W      send_reply_AesNoDataMsg
;;;855    }
;;;856    #endif
                          ENDP


                          AREA ||i.send_ConfigBaurate_reply_msg||, CODE, READONLY, ALIGN=1

                  send_ConfigBaurate_reply_msg PROC
;;;858    #ifdef KID_CONFIG_BAUDRATE
;;;859    void send_ConfigBaurate_reply_msg(uint8_t result)// MR_SUCCESS; MID_OTA_HEADER:MID_OTA_PACKET
000000  2151              MOVS     r1,#0x51
;;;860    {
;;;861        dbg_msg_com("%s", __func__);
;;;862        send_reply_AesNoDataMsg(result,KID_CONFIG_BAUDRATE);
000002  f7ffbffe          B.W      send_reply_AesNoDataMsg
;;;863    }
;;;864    #endif
                          ENDP


                          AREA ||i.send_DebugModeOrDemoMode_reply_msg||, CODE, READONLY, ALIGN=1

                  send_DebugModeOrDemoMode_reply_msg PROC
;;;470    
;;;471    void send_DebugModeOrDemoMode_reply_msg(uint8_t result, uint8_t kid) // MR_SUCCESS; MID_OTA_HEADER:MID_OTA_PACKET
000000  f7ffbffe          B.W      send_reply_AesNoDataMsg
;;;472    {
;;;473        dbg_msg_com("%s", __func__);
;;;474    
;;;475        send_reply_AesNoDataMsg(result, kid);
;;;476    }
;;;477    
                          ENDP


                          AREA ||i.send_EnrollOrVerify_note_msg||, CODE, READONLY, ALIGN=1

                  send_EnrollOrVerify_note_msg PROC
;;;629    //send note msg to H
;;;630    void send_EnrollOrVerify_note_msg(s_msg_note_data_face face_info,uint8_t nid)
000000  b51f              PUSH     {r0-r4,lr}
;;;631    {
000002  b086              SUB      sp,sp,#0x18
;;;632        s_msg_note_data_EAR_face note_face_data;
;;;633    
;;;634        uint16_t msg_size = sizeof(note_face_data.msg_data) + MSG_APPEND_1_SIZE;
000004  2211              MOVS     r2,#0x11
;;;635        kdp_com_fill_hdr((msg_base*)&note_face_data, KID_NOTE, msg_size);
000006  2101              MOVS     r1,#1
000008  4668              MOV      r0,sp
00000a  9c0c              LDR      r4,[sp,#0x30]
00000c  f7fffffe          BL       kdp_com_fill_hdr
;;;636    
;;;637        note_face_data.nid = nid;
000010  f88d4005          STRB     r4,[sp,#5]
;;;638        memcpy(&note_face_data.msg_data, &face_info, sizeof(face_info));
000014  2210              MOVS     r2,#0x10
000016  a906              ADD      r1,sp,#0x18
000018  f10d0006          ADD      r0,sp,#6
00001c  f7fffffe          BL       __aeabi_memcpy
;;;639    
;;;640        kdp_com_send_out_msg((uint8_t*)&note_face_data, sizeof(note_face_data));
000020  2117              MOVS     r1,#0x17
000022  4668              MOV      r0,sp
000024  f7fffffe          BL       kdp_com_send_out_msg
;;;641    }
000028  b00a              ADD      sp,sp,#0x28
00002a  bd10              POP      {r4,pc}
;;;642    
                          ENDP


                          AREA ||i.send_GetCurPart_reply_msg||, CODE, READONLY, ALIGN=1

                  send_GetCurPart_reply_msg PROC
;;;910    #ifdef KID_GET_CUR_PART
;;;911    void send_GetCurPart_reply_msg(uint8_t result, uint8_t nCurPart)
000000  22ab              MOVS     r2,#0xab
;;;912    {
;;;913        return send_SwPart_reply_msg(result, nCurPart, KID_GET_CUR_PART);
000002  f7ffbffe          B.W      send_SwPart_reply_msg
;;;914    }
;;;915    #endif
                          ENDP


                          AREA ||i.send_Get_Kn_DeviceInfo_reply_msg||, CODE, READONLY, ALIGN=1

                  send_Get_Kn_DeviceInfo_reply_msg PROC
;;;403    #ifdef KID_KN_DEVICE_INFO
;;;404    void send_Get_Kn_DeviceInfo_reply_msg(uint8_t result, kn_device_info_data *device_info)
000000  b510              PUSH     {r4,lr}
;;;405    {
000002  b0a8              SUB      sp,sp,#0xa0
000004  460c              MOV      r4,r1
;;;406        s_msg_reply_kn_device_info_data msg_device_info;
;;;407    
;;;408        uint16_t size = sizeof(msg_device_info.device_info) + MSG_APPEND_2_SIZE;
;;;409        kdp_com_pack_rsp_msg((s_msg_rsp_base*)&msg_device_info, KID_REPLY, size, KID_KN_DEVICE_INFO, result);
000006  9000              STR      r0,[sp,#0]
000008  2296              MOVS     r2,#0x96              ;408
00000a  23cb              MOVS     r3,#0xcb
00000c  2100              MOVS     r1,#0
00000e  a801              ADD      r0,sp,#4
000010  f7fffffe          BL       kdp_com_pack_rsp_msg
;;;410    
;;;411        memcpy(&msg_device_info.device_info, device_info, sizeof(kn_device_info_data));
000014  2294              MOVS     r2,#0x94
000016  4621              MOV      r1,r4
000018  f10d000b          ADD      r0,sp,#0xb
00001c  f7fffffe          BL       __aeabi_memcpy
;;;412    
;;;413        kdp_com_send_out_msg((uint8_t*)&msg_device_info, sizeof(msg_device_info));
000020  219c              MOVS     r1,#0x9c
000022  a801              ADD      r0,sp,#4
000024  f7fffffe          BL       kdp_com_send_out_msg
;;;414    }
000028  b028              ADD      sp,sp,#0xa0
00002a  bd10              POP      {r4,pc}
;;;415    #endif
                          ENDP


                          AREA ||i.send_InitEncryption_reply_msg||, CODE, READONLY, ALIGN=2

                  send_InitEncryption_reply_msg PROC
;;;928    #ifdef KID_INIT_ENCRYPTION
;;;929    void send_InitEncryption_reply_msg(uint8_t result, uint8_t device_id[DEVICE_ID_NUM])
000000  b510              PUSH     {r4,lr}
;;;930    {
000002  b088              SUB      sp,sp,#0x20
000004  460c              MOV      r4,r1
;;;931        s_msg_reply_init_encryption_data encryption;
;;;932    
;;;933        uint16_t size = sizeof(encryption.device_id) + MSG_APPEND_2_SIZE;
;;;934        kdp_com_pack_rsp_msg((s_msg_rsp_base*)&encryption, KID_REPLY, size, KID_INIT_ENCRYPTION, result);
000006  9000              STR      r0,[sp,#0]
000008  2216              MOVS     r2,#0x16              ;933
00000a  2350              MOVS     r3,#0x50
00000c  2100              MOVS     r1,#0
00000e  a801              ADD      r0,sp,#4
000010  f7fffffe          BL       kdp_com_pack_rsp_msg
;;;935    
;;;936        memcpy(encryption.device_id,device_id,sizeof(encryption.device_id));
000014  2214              MOVS     r2,#0x14
000016  4621              MOV      r1,r4
000018  f10d000b          ADD      r0,sp,#0xb
00001c  f7fffffe          BL       __aeabi_memcpy
;;;937    
;;;938    #if ( ENCRYPTION_MODE != NO_ENCRYPTION )
;;;939        if (msg_dst == NULL)
000020  4c07              LDR      r4,|L34.64|
000022  6860              LDR      r0,[r4,#4]  ; msg_dst
000024  b928              CBNZ     r0,|L34.50|
;;;940        {
;;;941            msg_dst = (uint8_t *)kdp_ddr_reserve(MSG_MAX_SIZE);
000026  f24050dc          MOV      r0,#0x5dc
00002a  f7fffffe          BL       kdp_ddr_reserve
00002e  3080              ADDS     r0,r0,#0x80
;;;942            msg_dst += 128;
000030  6060              STR      r0,[r4,#4]  ; msg_dst
                  |L34.50|
;;;943        }
;;;944    #endif
;;;945    
;;;946        kdp_com_send_out_msg((uint8_t*)&encryption, sizeof(encryption));
000032  211c              MOVS     r1,#0x1c
000034  a801              ADD      r0,sp,#4
000036  f7fffffe          BL       kdp_com_send_out_msg
;;;947    }
00003a  b008              ADD      sp,sp,#0x20
00003c  bd10              POP      {r4,pc}
;;;948    #endif
                          ENDP

00003e  0000              DCW      0x0000
                  |L34.64|
                          DCD      ||.data||

                          AREA ||i.send_MpCalibration_reply_msg||, CODE, READONLY, ALIGN=1

                  send_MpCalibration_reply_msg PROC
;;;917    #ifdef KID_MP_CALIBRATION
;;;918    void send_MpCalibration_reply_msg(uint8_t result)
000000  21cc              MOVS     r1,#0xcc
;;;919    {
;;;920        dbg_msg_com("%s", __func__);
;;;921        send_reply_AesNoDataMsg(result, KID_MP_CALIBRATION);
000002  f7ffbffe          B.W      send_reply_AesNoDataMsg
;;;922    }
;;;923    #endif
                          ENDP


                          AREA ||i.send_OtaDone_Note_msg||, CODE, READONLY, ALIGN=1

                  send_OtaDone_Note_msg PROC
;;;999    
;;;1000   void send_OtaDone_Note_msg(uint8_t OtaResult)//0:OTA sucess,1:OTA fail
000000  b50e              PUSH     {r1-r3,lr}
;;;1001   {
;;;1002       s_msg_note_mass_data note_otaDone;
;;;1003   
;;;1004       uint16_t size = MSG_APPEND_2_SIZE;
000002  2202              MOVS     r2,#2
;;;1005       kdp_com_pack_rsp_msg((s_msg_rsp_base*)&note_otaDone, KID_NOTE, size, NID_OTA_DONE, OtaResult);
000004  9000              STR      r0,[sp,#0]
000006  2303              MOVS     r3,#3
000008  2101              MOVS     r1,#1
00000a  a801              ADD      r0,sp,#4
00000c  f7fffffe          BL       kdp_com_pack_rsp_msg
;;;1006   
;;;1007       kdp_com_send_out_msg((uint8_t*)&note_otaDone, sizeof(note_otaDone));
000010  2108              MOVS     r1,#8
000012  a801              ADD      r0,sp,#4
000014  f7fffffe          BL       kdp_com_send_out_msg
;;;1008   }
000018  bd0e              POP      {r1-r3,pc}
;;;1009   
                          ENDP


                          AREA ||i.send_OtaHeaderOrPacket_reply_msg||, CODE, READONLY, ALIGN=1

                  send_OtaHeaderOrPacket_reply_msg PROC
;;;993    
;;;994    void send_OtaHeaderOrPacket_reply_msg(uint8_t result,uint8_t HeaderOrPacket)// MR_SUCCESS; MID_OTA_HEADER:MID_OTA_PACKET
000000  f7ffbffe          B.W      send_reply_NoDataMsg
;;;995    {
;;;996        dbg_msg_com("%s", __func__);
;;;997        send_reply_NoDataMsg(result,HeaderOrPacket);
;;;998    }
;;;999    
                          ENDP


                          AREA ||i.send_OtaStatus_reply_msg||, CODE, READONLY, ALIGN=1

                  send_OtaStatus_reply_msg PROC
;;;979    #ifdef KID_GET_OTA_STATUS
;;;980    void send_OtaStatus_reply_msg(uint8_t result,uint8_t ota_status,uint8_t next_pid_e[2])// MR_SUCCESS;
000000  b57f              PUSH     {r0-r6,lr}
;;;981    {
000002  4614              MOV      r4,r2
000004  460d              MOV      r5,r1
;;;982        s_msg_reply_get_ota_status_data reply_OtaStatus;
;;;983    
;;;984        uint16_t size = sizeof(reply_OtaStatus.next_pid_e) + MSG_APPEND_3_SIZE;
;;;985        kdp_com_pack_rsp_msg((s_msg_rsp_base*)&reply_OtaStatus, KID_REPLY, size, KID_GET_OTA_STATUS, result);
000006  9000              STR      r0,[sp,#0]
000008  2205              MOVS     r2,#5                 ;984
00000a  2342              MOVS     r3,#0x42
00000c  2100              MOVS     r1,#0
00000e  a801              ADD      r0,sp,#4
000010  f7fffffe          BL       kdp_com_pack_rsp_msg
;;;986    
;;;987        reply_OtaStatus.ota_status = ota_status;
000014  f88d500b          STRB     r5,[sp,#0xb]
;;;988        memcpy(reply_OtaStatus.next_pid_e,next_pid_e,sizeof(reply_OtaStatus.next_pid_e));
000018  8820              LDRH     r0,[r4,#0]
00001a  f8ad000c          STRH     r0,[sp,#0xc]
;;;989    
;;;990        kdp_com_send_out_msg((uint8_t*)&reply_OtaStatus, sizeof(reply_OtaStatus));
00001e  210b              MOVS     r1,#0xb
000020  a801              ADD      r0,sp,#4
000022  f7fffffe          BL       kdp_com_send_out_msg
;;;991    }
000026  bd7f              POP      {r0-r6,pc}
;;;992    #endif
                          ENDP


                          AREA ||i.send_Response_result_reply_msg||, CODE, READONLY, ALIGN=1

                  send_Response_result_reply_msg PROC
;;;813    //-----0x40-0x6F Unit control
;;;814    void send_Response_result_reply_msg(uint8_t result, uint8_t kid)
000000  f7ffbffe          B.W      send_reply_AesNoDataMsg
;;;815    {
;;;816    #if ( CFG_PRODUCTION_TEST == YES ) || ( IGNORE_PRODUCTION_TEST == YES )
;;;817    #if defined(KID_TURN_ON_CAMERA) && defined(KID_TURN_OFF_PANEL)
;;;818        char aStrSw[][4] = {"NULL", "ON", "OFF"};
;;;819        char aStrDev[][10] = {"NULL", "CAMERA", "VIS_LED", "IR_LED", "STRUCT_LED", "PANEL"};
;;;820        u8 nStrSwIdx = 0;
;;;821        u8 nStrDevIdx = 0;
;;;822    
;;;823        if ( (kid >= KID_TURN_ON_CAMERA) && (kid <= KID_TURN_OFF_PANEL) )
;;;824        {
;;;825            nStrSwIdx  = ((kid-KID_TURN_ON_CAMERA)&0x01)+1;
;;;826            nStrDevIdx = ((kid-KID_TURN_ON_CAMERA)>>1)+1;
;;;827            dbg_msg_console("%s, KID:0x%02X, %s_%s", __func__, kid, aStrSw[nStrSwIdx], aStrDev[nStrDevIdx]);
;;;828        }
;;;829        else
;;;830    #endif
;;;831    #endif
;;;832        if ( result == MR_REJECTED )
;;;833        {
;;;834            dbg_msg_com("%s, KID:0x%02x, %s", __func__, kid, "MR_REJECTED");
;;;835        }
;;;836        else
;;;837        {
;;;838            dbg_msg_com("%s, KID:0x%02x", __func__, kid);
;;;839        }
;;;840    
;;;841        send_reply_AesNoDataMsg(result ,kid);
;;;842    }
;;;843    
                          ENDP


                          AREA ||i.send_SetMassDataHeader_reply_msg||, CODE, READONLY, ALIGN=1

                  send_SetMassDataHeader_reply_msg PROC
;;;843    
;;;844    void send_SetMassDataHeader_reply_msg(uint8_t result, uint8_t kid)
000000  f7ffbffe          B.W      send_reply_AesNoDataMsg
;;;845    {
;;;846        dbg_msg_com("%s", __func__);
;;;847        send_reply_AesNoDataMsg(result, kid);
;;;848    }
;;;849    
                          ENDP


                          AREA ||i.send_SetReleaseOrDebugEncKey_reply_msg||, CODE, READONLY, ALIGN=1

                  send_SetReleaseOrDebugEncKey_reply_msg PROC
;;;949    
;;;950    void send_SetReleaseOrDebugEncKey_reply_msg(uint8_t result,uint8_t ReleaseOrDebugEncKey)// MR_SUCCESS; MID_OTA_HEADER:MID_OTA_PACKET
000000  b50e              PUSH     {r1-r3,lr}
;;;951    {
;;;952        dbg_msg_com("%s, %d", __func__, result);
;;;953        s_msg_reply_no_data reply_snapImage;
;;;954    
;;;955        kdp_com_pack_rsp_msg((s_msg_rsp_base*)&reply_snapImage, KID_REPLY, MSG_APPEND_2_SIZE, ReleaseOrDebugEncKey, result);
000002  460b              MOV      r3,r1
000004  9000              STR      r0,[sp,#0]
000006  2202              MOVS     r2,#2
000008  2100              MOVS     r1,#0
00000a  a801              ADD      r0,sp,#4
00000c  f7fffffe          BL       kdp_com_pack_rsp_msg
;;;956    
;;;957        reply_snapImage.check = checksum_cal((uint8_t*)&reply_snapImage, MSG_HEAD_SIZE, sizeof(reply_snapImage) - MSG_CHK_SIZE);
000010  2207              MOVS     r2,#7
000012  2102              MOVS     r1,#2
000014  a801              ADD      r0,sp,#4
000016  f7fffffe          BL       checksum_cal
00001a  f88d000b          STRB     r0,[sp,#0xb]
;;;958        user_com_response_data((uint8_t*)&reply_snapImage, sizeof(reply_snapImage));
00001e  2108              MOVS     r1,#8
000020  a801              ADD      r0,sp,#4
000022  f7fffffe          BL       user_com_response_data
;;;959    }
000026  bd0e              POP      {r1-r3,pc}
;;;960    
                          ENDP


                          AREA ||i.send_StartOrStopOta_reply_msg||, CODE, READONLY, ALIGN=1

                  send_StartOrStopOta_reply_msg PROC
;;;972    //-----0xF8-0xFF OTA
;;;973    void send_StartOrStopOta_reply_msg(uint8_t result,uint8_t StartOrStopOTA)// MR_SUCCESS; MID_START_OTA:MID_STOP_OTA
000000  f7ffbffe          B.W      send_reply_NoDataMsg
;;;974    {
;;;975        dbg_msg_com("%s", __func__);
;;;976        send_reply_NoDataMsg(result,StartOrStopOTA);
;;;977    }
;;;978    
                          ENDP


                          AREA ||i.send_SwPart_reply_msg||, CODE, READONLY, ALIGN=1

                  send_SwPart_reply_msg PROC
;;;889    #if defined KID_SW_BOOT_PART || defined KID_GET_CUR_PART
;;;890    void send_SwPart_reply_msg(uint8_t result, uint8_t nCurPart, uint8_t kid)
000000  b51f              PUSH     {r0-r4,lr}
;;;891    {
000002  460c              MOV      r4,r1
;;;892        s_msg_reply_switch_part switch_part;
;;;893    
;;;894        uint16_t size = sizeof(switch_part.current_part) + MSG_APPEND_2_SIZE;
000004  2103              MOVS     r1,#3
;;;895        kdp_com_pack_rsp_msg((s_msg_rsp_base*)&switch_part, KID_REPLY, size, kid, result);
000006  4613              MOV      r3,r2
000008  460a              MOV      r2,r1
00000a  9000              STR      r0,[sp,#0]
00000c  2100              MOVS     r1,#0
00000e  a801              ADD      r0,sp,#4
000010  f7fffffe          BL       kdp_com_pack_rsp_msg
;;;896    
;;;897        switch_part.current_part = nCurPart;
000014  f88d400b          STRB     r4,[sp,#0xb]
;;;898    
;;;899        kdp_com_send_out_msg((uint8_t*)&switch_part, sizeof(switch_part));
000018  2109              MOVS     r1,#9
00001a  a801              ADD      r0,sp,#4
00001c  f7fffffe          BL       kdp_com_send_out_msg
;;;900    }
000020  bd1f              POP      {r0-r4,pc}
;;;901    #endif
                          ENDP


                          AREA ||i.send_SwitchPart_reply_msg||, CODE, READONLY, ALIGN=1

                  send_SwitchPart_reply_msg PROC
;;;903    #ifdef KID_SW_BOOT_PART
;;;904    void send_SwitchPart_reply_msg(uint8_t result, uint8_t nCurPart)
000000  22aa              MOVS     r2,#0xaa
;;;905    {
;;;906        return send_SwPart_reply_msg(result, nCurPart, KID_SW_BOOT_PART);
000002  f7ffbffe          B.W      send_SwPart_reply_msg
;;;907    }
;;;908    #endif
                          ENDP


                          AREA ||i.send_data_error_reply_msg||, CODE, READONLY, ALIGN=1

                  send_data_error_reply_msg PROC
;;;559    
;;;560    void send_data_error_reply_msg(uint8_t result)
000000  2100              MOVS     r1,#0
;;;561    {
;;;562        dbg_msg_com("%s", __func__);
;;;563    //    if ( g_nEncryptionMode == NO_ENCRYPTION )
;;;564    //    {
;;;565    //        send_reply_NoDataMsg(result, KID_REPLY);
;;;566    //    }
;;;567    //    else
;;;568    //    {
;;;569        send_reply_AesNoDataMsg(result, KID_REPLY);
000002  f7ffbffe          B.W      send_reply_AesNoDataMsg
;;;570    //    }
;;;571    }
;;;572    //-----0x00-0x0F System
                          ENDP


                          AREA ||i.send_db_export_reply_msg||, CODE, READONLY, ALIGN=1

                  send_db_export_reply_msg PROC
;;;1011   #ifdef KID_DB_EXPORT_REQUEST
;;;1012   void send_db_export_reply_msg(uint8_t result, u16 user_id, u32 total_size, u8 *md5)
000000  b570              PUSH     {r4-r6,lr}
;;;1013   {
000002  b08e              SUB      sp,sp,#0x38
000004  461e              MOV      r6,r3
000006  4614              MOV      r4,r2
000008  460d              MOV      r5,r1
;;;1014       s_msg_reply_db_export_request msg_reply;
;;;1015   
;;;1016       uint16_t size = sizeof(msg_reply.data) + MSG_APPEND_2_SIZE;
;;;1017       kdp_com_pack_rsp_msg((s_msg_rsp_base*)&msg_reply, KID_REPLY, size, KID_DB_EXPORT_REQUEST, result);
00000a  9000              STR      r0,[sp,#0]
00000c  2228              MOVS     r2,#0x28              ;1016
00000e  237c              MOVS     r3,#0x7c
000010  2100              MOVS     r1,#0
000012  a801              ADD      r0,sp,#4
000014  f7fffffe          BL       kdp_com_pack_rsp_msg
;;;1018   
;;;1019       msg_reply.data.user_id_heb = (user_id >> 8) & 0xff;
000018  0a28              LSRS     r0,r5,#8
00001a  f88d000b          STRB     r0,[sp,#0xb]
;;;1020       msg_reply.data.user_id_leb = user_id & 0xff;
00001e  f88d500c          STRB     r5,[sp,#0xc]
;;;1021       msg_reply.data.total_size[0] = (total_size >> 24) & 0xff;
000022  0e20              LSRS     r0,r4,#24
000024  f88d000d          STRB     r0,[sp,#0xd]
;;;1022       msg_reply.data.total_size[1] = (total_size >> 16) & 0xff;
000028  0c20              LSRS     r0,r4,#16
00002a  f88d000e          STRB     r0,[sp,#0xe]
;;;1023       msg_reply.data.total_size[2] = (total_size >> 8) & 0xff;
00002e  0a20              LSRS     r0,r4,#8
000030  f88d000f          STRB     r0,[sp,#0xf]
;;;1024       msg_reply.data.total_size[3] = (total_size >> 0) & 0xff;
000034  f88d4010          STRB     r4,[sp,#0x10]
;;;1025       memcpy(msg_reply.data.md5, md5, sizeof(msg_reply.data.md5));
000038  2220              MOVS     r2,#0x20
00003a  4631              MOV      r1,r6
00003c  f10d0011          ADD      r0,sp,#0x11
000040  f7fffffe          BL       __aeabi_memcpy
;;;1026   
;;;1027       kdp_com_send_out_msg((uint8_t*)&msg_reply, sizeof(msg_reply));
000044  212e              MOVS     r1,#0x2e
000046  a801              ADD      r0,sp,#4
000048  f7fffffe          BL       kdp_com_send_out_msg
;;;1028   }
00004c  b00e              ADD      sp,sp,#0x38
00004e  bd70              POP      {r4-r6,pc}
;;;1029   #endif
                          ENDP


                          AREA ||i.send_db_import_request_reply_msg||, CODE, READONLY, ALIGN=2

                  send_db_import_request_reply_msg PROC
;;;1051   #ifdef KID_DB_IMPORT_REQUEST
;;;1052   void send_db_import_request_reply_msg(uint8_t result, uint16_t user_id)
000000  b57f              PUSH     {r0-r6,lr}
;;;1053   {
000002  460c              MOV      r4,r1
000004  4605              MOV      r5,r0
;;;1054       s_msg_reply_db_import_request msg_reply;
;;;1055   
;;;1056       uint16_t size = sizeof(msg_reply.reply_data) + MSG_APPEND_2_SIZE;
;;;1057       kdp_com_pack_rsp_msg((s_msg_rsp_base*)&msg_reply, KID_REPLY, size, KID_DB_IMPORT_REQUEST, result);
000006  9000              STR      r0,[sp,#0]
000008  2204              MOVS     r2,#4                 ;1056
00000a  237e              MOVS     r3,#0x7e
00000c  2100              MOVS     r1,#0
00000e  a801              ADD      r0,sp,#4
000010  f7fffffe          BL       kdp_com_pack_rsp_msg
;;;1058   
;;;1059       msg_reply.reply_data.user_id_heb = (user_id >> 8) & 0xFF;
000014  0a20              LSRS     r0,r4,#8
000016  f88d000b          STRB     r0,[sp,#0xb]
;;;1060       msg_reply.reply_data.user_id_leb = user_id & 0xFF;
00001a  f88d400c          STRB     r4,[sp,#0xc]
;;;1061   
;;;1062       kdp_com_send_out_msg((uint8_t*)&msg_reply, sizeof(msg_reply));
00001e  210a              MOVS     r1,#0xa
000020  a801              ADD      r0,sp,#4
000022  f7fffffe          BL       kdp_com_send_out_msg
;;;1063   
;;;1064       dbg_msg_console("[%s][%d] result: %s", __func__, osKernelGetTickCount(), str_uart_reply((enum uart_reply_result)result));
000026  4628              MOV      r0,r5
000028  f7fffffe          BL       str_uart_reply
00002c  4604              MOV      r4,r0
00002e  f7fffffe          BL       osKernelGetTickCount
000032  4603              MOV      r3,r0
000034  4a03              LDR      r2,|L47.68|
000036  a104              ADR      r1,|L47.72|
000038  2001              MOVS     r0,#1
00003a  9400              STR      r4,[sp,#0]
00003c  f7fffffe          BL       kdp_level_printf
;;;1065   }
000040  bd7f              POP      {r0-r6,pc}
;;;1066   
                          ENDP

000042  0000              DCW      0x0000
                  |L47.68|
                          DCD      ||.constdata||+0x2c
                  |L47.72|
000048  5b25735d          DCB      "[%s][%d] result: %s\r\n",0
00004c  5b25645d
000050  20726573
000054  756c743a
000058  2025730d
00005c  0a00    
00005e  00                DCB      0
00005f  00                DCB      0

                          AREA ||i.send_enroll_reply_msg||, CODE, READONLY, ALIGN=2

                  send_enroll_reply_msg PROC
;;;610    #if defined KID_ENROLL || defined KID_ENROLL_OVERWRITE
;;;611    void send_enroll_reply_msg(uint8_t result, uint8_t user_id_heb, uint8_t user_id_leb,uint8_t face_direction, uint8_t cmd_id)
000000  e92d41ff          PUSH     {r0-r8,lr}
;;;612    {
000004  461d              MOV      r5,r3
;;;613        s_msg_reply_enroll_data msg_reply;
;;;614    
;;;615        uint16_t msg_size = sizeof(msg_reply.reply_data) + MSG_APPEND_2_SIZE;
;;;616        kdp_com_pack_rsp_msg((s_msg_rsp_base*)&msg_reply, KID_REPLY, msg_size, cmd_id, result);
000006  9b0a              LDR      r3,[sp,#0x28]
000008  4616              MOV      r6,r2                 ;612
00000a  460f              MOV      r7,r1                 ;612
00000c  4604              MOV      r4,r0                 ;612
00000e  9000              STR      r0,[sp,#0]
000010  2205              MOVS     r2,#5                 ;615
000012  2100              MOVS     r1,#0
000014  a801              ADD      r0,sp,#4
000016  f7fffffe          BL       kdp_com_pack_rsp_msg
;;;617    
;;;618        msg_reply.reply_data.user_id_heb = user_id_heb;    //alg result
;;;619        msg_reply.reply_data.user_id_leb = user_id_leb;    //alg result
00001a  f88d600c          STRB     r6,[sp,#0xc]
00001e  f88d700b          STRB     r7,[sp,#0xb]          ;618
;;;620        msg_reply.reply_data.face_direction = face_direction; //alg result
000022  f88d500d          STRB     r5,[sp,#0xd]
;;;621    
;;;622        kdp_com_send_out_msg((uint8_t*)&msg_reply, sizeof(msg_reply));
000026  210b              MOVS     r1,#0xb
000028  a801              ADD      r0,sp,#4
00002a  f7fffffe          BL       kdp_com_send_out_msg
;;;623    
;;;624        g_nAutoPowerOffCnt = 0;
00002e  4909              LDR      r1,|L48.84|
000030  2000              MOVS     r0,#0
;;;625        dbg_msg_console("[%s][%d] result: %s", __func__, osKernelGetTickCount(), str_uart_reply((enum uart_reply_result)result));
000032  6008              STR      r0,[r1,#0]  ; g_nAutoPowerOffCnt
000034  4620              MOV      r0,r4
000036  f7fffffe          BL       str_uart_reply
00003a  4604              MOV      r4,r0
00003c  f7fffffe          BL       osKernelGetTickCount
000040  4603              MOV      r3,r0
000042  4a05              LDR      r2,|L48.88|
000044  a105              ADR      r1,|L48.92|
000046  2001              MOVS     r0,#1
000048  9400              STR      r4,[sp,#0]
00004a  f7fffffe          BL       kdp_level_printf
;;;626    }
00004e  e8bd81ff          POP      {r0-r8,pc}
;;;627    #endif
                          ENDP

000052  0000              DCW      0x0000
                  |L48.84|
                          DCD      g_nAutoPowerOffCnt
                  |L48.88|
                          DCD      ||.constdata||+0x16
                  |L48.92|
00005c  5b25735d          DCB      "[%s][%d] result: %s\r\n",0
000060  5b25645d
000064  20726573
000068  756c743a
00006c  2025730d
000070  0a00    
000072  00                DCB      0
000073  00                DCB      0

                          AREA ||i.send_exp_mass_data_done_note_msg||, CODE, READONLY, ALIGN=1

                  send_exp_mass_data_done_note_msg PROC
;;;800    
;;;801    void send_exp_mass_data_done_note_msg(uint8_t nResult)
000000  b50e              PUSH     {r1-r3,lr}
;;;802    {
;;;803        s_msg_note_mass_data note_mass_data_done;
;;;804    
;;;805        uint16_t size = MSG_APPEND_2_SIZE;
000002  2202              MOVS     r2,#2
;;;806        kdp_com_pack_rsp_msg((s_msg_rsp_base*)&note_mass_data_done, KID_NOTE, size, NID_MASS_DATA_DONE, nResult);
000004  9000              STR      r0,[sp,#0]
000006  2304              MOVS     r3,#4
000008  2101              MOVS     r1,#1
00000a  a801              ADD      r0,sp,#4
00000c  f7fffffe          BL       kdp_com_pack_rsp_msg
;;;807    
;;;808        kdp_com_send_out_msg((uint8_t*)&note_mass_data_done, sizeof(note_mass_data_done));
000010  2108              MOVS     r1,#8
000012  a801              ADD      r0,sp,#4
000014  f7fffffe          BL       kdp_com_send_out_msg
;;;809    }
000018  bd0e              POP      {r1-r3,pc}
;;;810    
                          ENDP


                          AREA ||i.send_exp_mass_data_reply_msg||, CODE, READONLY, ALIGN=2

                  send_exp_mass_data_reply_msg PROC
;;;784    
;;;785    void send_exp_mass_data_reply_msg(uint8_t result, u8 eCMD, u32 nAddr, u16 nUploadSize)
000000  b5f8              PUSH     {r3-r7,lr}
;;;786    {
000002  4616              MOV      r6,r2
000004  4602              MOV      r2,r0
;;;787        uint8_t* ptr = stCom_type.tx_buffer;
000006  480c              LDR      r0,|L50.56|
000008  461c              MOV      r4,r3                 ;786
00000a  6845              LDR      r5,[r0,#4]  ; stCom_type
;;;788        uint16_t msg_size = nUploadSize + MSG_APPEND_2_SIZE;
00000c  1c98              ADDS     r0,r3,#2
00000e  b280              UXTH     r0,r0
;;;789    
;;;790        kdp_com_pack_rsp_msg((s_msg_rsp_base*)ptr, KID_REPLY, msg_size, eCMD, result);
000010  9200              STR      r2,[sp,#0]
000012  460b              MOV      r3,r1
000014  4602              MOV      r2,r0
000016  2100              MOVS     r1,#0
000018  4628              MOV      r0,r5
00001a  f7fffffe          BL       kdp_com_pack_rsp_msg
;;;791    
;;;792        //Copy to tx buffer
;;;793        //kl520_com_buf_addr_init();
;;;794        u16 nDataLen = sizeof(msg_base) + MSG_APPEND_2_SIZE;
;;;795        memcpy(ptr + nDataLen, (u8*)nAddr, nUploadSize);
00001e  1de8              ADDS     r0,r5,#7
000020  4622              MOV      r2,r4
000022  4631              MOV      r1,r6
000024  f7fffffe          BL       __aeabi_memcpy
000028  1de4              ADDS     r4,r4,#7
;;;796        nDataLen += nUploadSize;
00002a  b2a1              UXTH     r1,r4
;;;797    
;;;798        kdp_com_send_out_msg((uint8_t*)ptr, nDataLen + 1);
00002c  4628              MOV      r0,r5
00002e  e8bd40f8          POP      {r3-r7,lr}
000032  1c49              ADDS     r1,r1,#1
000034  f7ffbffe          B.W      kdp_com_send_out_msg
;;;799    }
;;;800    
                          ENDP

                  |L50.56|
                          DCD      stCom_type

                          AREA ||i.send_heartbeat_msg||, CODE, READONLY, ALIGN=1

                  send_heartbeat_msg PROC
;;;353    
;;;354    void send_heartbeat_msg(void)
000000  b508              PUSH     {r3,lr}
;;;355    {
;;;356        //send hb msg to MCU.
;;;357    //    s_msg_note_ready hb_msg;
;;;358    //    uint8_t* msg_ptr = (uint8_t*)&hb_msg;
;;;359    //    hb_msg.msg_head.head = 0x1234;
;;;360    //    hb_msg.msg_head.cmd = 0x00;
;;;361    //    hb_msg.msg_head.size = ShortType_BigToSmallEnd(MSG_APPEND_1_SIZE);
;;;362    //    hb_msg.nid = 0xab;
;;;363    //    hb_msg.check = checksum_cal(msg_ptr, MSG_HEAD_SIZE, sizeof(hb_msg)-MSG_CHK_SIZE);
;;;364        
;;;365        u16 msg = 0x1234;
000002  f2412034          MOV      r0,#0x1234
000006  f8ad0000          STRH     r0,[sp,#0]
;;;366        user_com_response_data( (uint8_t*)&msg, sizeof(msg));
00000a  2102              MOVS     r1,#2
00000c  4668              MOV      r0,sp
00000e  f7fffffe          BL       user_com_response_data
;;;367    }
000012  bd08              POP      {r3,pc}
;;;368    
                          ENDP


                          AREA ||i.send_power_off_reply_msg||, CODE, READONLY, ALIGN=1

                  send_power_off_reply_msg PROC
;;;552    #ifdef KID_POWERDOWN
;;;553    void send_power_off_reply_msg()
000000  21ed              MOVS     r1,#0xed
;;;554    {
;;;555        dbg_msg_com("%s", __func__);
;;;556        send_reply_AesNoDataMsg(MR_SUCCESS,KID_POWERDOWN);
000002  2000              MOVS     r0,#0
000004  f7ffbffe          B.W      send_reply_AesNoDataMsg
;;;557    }
;;;558    #endif
                          ENDP


                          AREA ||i.send_reply_AesNoDataMsg||, CODE, READONLY, ALIGN=1

                  send_reply_AesNoDataMsg PROC
;;;289    
;;;290    void send_reply_AesNoDataMsg(uint8_t result, uint8_t kid)// MR_SUCCESS; mid:reply type msg
000000  f7ffbffe          B.W      send_reply_NoDataMsg
;;;291    {
;;;292        return send_reply_NoDataMsg(result, kid);
;;;293    }
;;;294    
                          ENDP


                          AREA ||i.send_reply_NoDataMsg||, CODE, READONLY, ALIGN=1

                  send_reply_NoDataMsg PROC
;;;294    
;;;295    void send_reply_NoDataMsg(uint8_t result,uint8_t kid)// MR_SUCCESS; mid:reply type msg
000000  b50e              PUSH     {r1-r3,lr}
;;;296    {
;;;297        s_msg_reply_no_data reply_snapImage;
;;;298    
;;;299        uint16_t size = MSG_APPEND_2_SIZE;
;;;300        kdp_com_pack_rsp_msg((s_msg_rsp_base*)&reply_snapImage, KID_REPLY, size, kid, result);
000002  460b              MOV      r3,r1
000004  9000              STR      r0,[sp,#0]
000006  2202              MOVS     r2,#2                 ;299
000008  2100              MOVS     r1,#0
00000a  a801              ADD      r0,sp,#4
00000c  f7fffffe          BL       kdp_com_pack_rsp_msg
;;;301        
;;;302        //no data
;;;303    
;;;304        kdp_com_send_out_msg((uint8_t*)&reply_snapImage, sizeof(reply_snapImage));
000010  2108              MOVS     r1,#8
000012  a801              ADD      r0,sp,#4
000014  f7fffffe          BL       kdp_com_send_out_msg
;;;305    }
000018  bd0e              POP      {r1-r3,pc}
;;;306    
                          ENDP


                          AREA ||i.send_savedImage_reply_msg||, CODE, READONLY, ALIGN=1

                  send_savedImage_reply_msg PROC
;;;721    #if defined KID_GET_SAVED_IMAGE || defined KID_KN_GET_SAVED_IMAGE
;;;722    void send_savedImage_reply_msg(uint8_t result,uint8_t size[4])// MR_SUCCESS; size:number of saved image
000000  b51f              PUSH     {r0-r4,lr}
;;;723    {
000002  460c              MOV      r4,r1
;;;724        s_msg_reply_get_saved_image_data reply_savedImage;
;;;725    
;;;726        uint16_t msg_size = sizeof(reply_savedImage.image_size) + MSG_APPEND_2_SIZE;
;;;727    
;;;728    #ifdef KID_GET_SAVED_IMAGE
;;;729            kdp_com_pack_rsp_msg((s_msg_rsp_base*)&reply_savedImage, KID_REPLY, msg_size, KID_GET_SAVED_IMAGE, result);
;;;730    #endif
;;;731    #ifdef KID_KN_GET_SAVED_IMAGE
;;;732            kdp_com_pack_rsp_msg((s_msg_rsp_base*)&reply_savedImage, KID_REPLY, msg_size, KID_KN_GET_SAVED_IMAGE, result);
000004  9000              STR      r0,[sp,#0]
000006  2206              MOVS     r2,#6                 ;726
000008  23ad              MOVS     r3,#0xad
00000a  2100              MOVS     r1,#0
00000c  a801              ADD      r0,sp,#4
00000e  f7fffffe          BL       kdp_com_pack_rsp_msg
;;;733    #endif
;;;734    
;;;735        memcpy(reply_savedImage.image_size,size,sizeof(reply_savedImage.image_size));
000012  6820              LDR      r0,[r4,#0]
000014  f8cd000b          STR      r0,[sp,#0xb]
;;;736    
;;;737        kdp_com_send_out_msg((uint8_t*)&reply_savedImage, sizeof(reply_savedImage));
000018  210c              MOVS     r1,#0xc
00001a  a801              ADD      r0,sp,#4
00001c  f7fffffe          BL       kdp_com_send_out_msg
;;;738    }
000020  bd1f              POP      {r0-r4,pc}
;;;739    #endif
                          ENDP


                          AREA ||i.send_snapImage_reply_msg||, CODE, READONLY, ALIGN=1

                  send_snapImage_reply_msg PROC
;;;709    #if defined KID_SNAP_IMAGE || defined KID_KN_SNAP_IMAGE
;;;710    void send_snapImage_reply_msg(uint8_t result)// MR_SUCCESS;
000000  21ac              MOVS     r1,#0xac
;;;711    {
;;;712    #ifdef KID_SNAP_IMAGE
;;;713            send_reply_AesNoDataMsg(result, KID_SNAP_IMAGE);
;;;714    #endif
;;;715    #ifdef KID_KN_SNAP_IMAGE
;;;716            send_reply_AesNoDataMsg(result, KID_KN_SNAP_IMAGE);
000002  f7ffbffe          B.W      send_reply_AesNoDataMsg
;;;717    #endif
;;;718    }
;;;719    #endif
                          ENDP


                          AREA ||i.send_soft_reset_reply_msg||, CODE, READONLY, ALIGN=1

                  send_soft_reset_reply_msg PROC
;;;544    #ifdef KID_SOFT_RESET
;;;545    void send_soft_reset_reply_msg(uint8_t result)
000000  21ca              MOVS     r1,#0xca
;;;546    {
;;;547        dbg_msg_com("%s", __func__);
;;;548        send_reply_AesNoDataMsg(result,KID_SOFT_RESET);
000002  f7ffbffe          B.W      send_reply_AesNoDataMsg
;;;549    }
;;;550    #endif
                          ENDP


                          AREA ||i.send_status_reply_msg||, CODE, READONLY, ALIGN=1

                  send_status_reply_msg PROC
;;;577    #ifdef KID_GET_STATUS
;;;578    void send_status_reply_msg(uint8_t result, uint8_t status)// MR_SUCCESS;
000000  b51f              PUSH     {r0-r4,lr}
;;;579    {
000002  460c              MOV      r4,r1
;;;580        s_msg_reply_getstatus_data reply_status;
;;;581    
;;;582        uint16_t msg_size = MSG_APPEND_3_SIZE;
;;;583        kdp_com_pack_rsp_msg((s_msg_rsp_base*)&reply_status, KID_REPLY, msg_size, KID_GET_STATUS, result);
000004  9000              STR      r0,[sp,#0]
000006  2203              MOVS     r2,#3                 ;582
000008  2311              MOVS     r3,#0x11
00000a  2100              MOVS     r1,#0
00000c  a801              ADD      r0,sp,#4
00000e  f7fffffe          BL       kdp_com_pack_rsp_msg
;;;584    
;;;585        reply_status.status = status;
000012  f88d400b          STRB     r4,[sp,#0xb]
;;;586    
;;;587        kdp_com_send_out_msg((uint8_t*)&reply_status, sizeof(reply_status));
000016  2109              MOVS     r1,#9
000018  a801              ADD      r0,sp,#4
00001a  f7fffffe          BL       kdp_com_send_out_msg
;;;588    }
00001e  bd1f              POP      {r0-r4,pc}
;;;589    #endif
                          ENDP


                          AREA ||i.send_system_ready_note_msg||, CODE, READONLY, ALIGN=1

                  send_system_ready_note_msg PROC
;;;306    
;;;307    void send_system_ready_note_msg(void)
000000  b51c              PUSH     {r2-r4,lr}
;;;308    {
;;;309        s_msg_note_ready note_ready;
;;;310    
;;;311        uint16_t msg_size = MSG_APPEND_1_SIZE;
000002  2201              MOVS     r2,#1
;;;312        kdp_com_fill_hdr((msg_base*)&note_ready, KID_NOTE, msg_size);
000004  4611              MOV      r1,r2
000006  4668              MOV      r0,sp
000008  f7fffffe          BL       kdp_com_fill_hdr
;;;313    
;;;314    #ifdef GET_HOST_CAMERA_STATUS
;;;315        if(GET_HOST_CAMERA_STATUS())
;;;316            note_ready.nid = NID_CATEYE_RUNNING;
;;;317        else
;;;318    #endif
;;;319        {
;;;320            note_ready.nid = NID_READY;
00000c  2000              MOVS     r0,#0
00000e  f88d0005          STRB     r0,[sp,#5]
;;;321        }
;;;322    
;;;323        kdp_com_send_out_msg((uint8_t*)&note_ready, sizeof(note_ready));
000012  2107              MOVS     r1,#7
000014  4668              MOV      r0,sp
000016  f7fffffe          BL       kdp_com_send_out_msg
;;;324    }
00001a  bd1c              POP      {r2-r4,pc}
;;;325    
                          ENDP


                          AREA ||i.send_uploadImage_reply_msg||, CODE, READONLY, ALIGN=2

                  send_uploadImage_reply_msg PROC
;;;740    
;;;741    void send_uploadImage_reply_msg(uint8_t result,uint8_t* upload_image_data,uint16_t upload_image_size)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;742    {
000004  4605              MOV      r5,r0
;;;743        uint8_t* ptr = stCom_type.tx_buffer;
000006  480c              LDR      r0,|L60.56|
000008  460e              MOV      r6,r1                 ;742
00000a  4614              MOV      r4,r2                 ;742
00000c  6847              LDR      r7,[r0,#4]  ; stCom_type
;;;744    
;;;745        kdp_com_fill_hdr((msg_base*)ptr, KID_IMAGE, upload_image_size);
00000e  2102              MOVS     r1,#2
000010  4638              MOV      r0,r7
000012  f7fffffe          BL       kdp_com_fill_hdr
;;;746    
;;;747        u16 nDataLen = sizeof(msg_base);
;;;748        memcpy(ptr + nDataLen, upload_image_data, upload_image_size);
000016  1d78              ADDS     r0,r7,#5
000018  4622              MOV      r2,r4
00001a  4631              MOV      r1,r6
00001c  f7fffffe          BL       __aeabi_memcpy
000020  1d64              ADDS     r4,r4,#5
;;;749        nDataLen += upload_image_size;
000022  b2a1              UXTH     r1,r4
;;;750        
;;;751        if ( result == MR_SUCCESS ) {
000024  2d00              CMP      r5,#0
000026  d105              BNE      |L60.52|
;;;752            kdp_com_send_out_msg((uint8_t*)ptr, nDataLen + 1);
000028  4638              MOV      r0,r7
00002a  e8bd41f0          POP      {r4-r8,lr}
00002e  1c49              ADDS     r1,r1,#1
000030  f7ffbffe          B.W      kdp_com_send_out_msg
                  |L60.52|
;;;753        }
;;;754    }
000034  e8bd81f0          POP      {r4-r8,pc}
;;;755    
                          ENDP

                  |L60.56|
                          DCD      stCom_type

                          AREA ||i.send_upload_data_reply_msg||, CODE, READONLY, ALIGN=2

                  send_upload_data_reply_msg PROC
;;;1031   #ifdef KID_UPLOAD_DATA
;;;1032   void send_upload_data_reply_msg(u8 result, u32 addr, u32 size)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1033   {
000002  460e              MOV      r6,r1
;;;1034       uint8_t* ptr = stCom_type.tx_buffer;
000004  490d              LDR      r1,|L61.60|
000006  4614              MOV      r4,r2                 ;1033
;;;1035   
;;;1036       uint16_t msg_size = size + MSG_APPEND_2_SIZE;
;;;1037       kdp_com_pack_rsp_msg((s_msg_rsp_base*)ptr, KID_REPLY, msg_size, KID_UPLOAD_DATA, result);
000008  237d              MOVS     r3,#0x7d
00000a  684d              LDR      r5,[r1,#4]            ;1034  ; stCom_type
00000c  1c91              ADDS     r1,r2,#2              ;1036
00000e  b28a              UXTH     r2,r1                 ;1036
000010  9000              STR      r0,[sp,#0]
000012  2100              MOVS     r1,#0
000014  4628              MOV      r0,r5
000016  f7fffffe          BL       kdp_com_pack_rsp_msg
;;;1038   
;;;1039       //Copy to tx buffer
;;;1040       u16 nDataLen = sizeof(msg_base) + MSG_APPEND_2_SIZE;
00001a  2107              MOVS     r1,#7
;;;1041       if ((addr > 0) && (size > 0))
00001c  b13e              CBZ      r6,|L61.46|
00001e  b134              CBZ      r4,|L61.46|
;;;1042       {
;;;1043           memcpy(ptr + nDataLen, (u8*)addr, size);
000020  1de8              ADDS     r0,r5,#7
000022  4622              MOV      r2,r4
000024  4631              MOV      r1,r6
000026  f7fffffe          BL       __aeabi_memcpy
00002a  1de4              ADDS     r4,r4,#7
;;;1044           nDataLen += size;
00002c  b2a1              UXTH     r1,r4
                  |L61.46|
;;;1045       }
;;;1046   
;;;1047       kdp_com_send_out_msg((uint8_t*)ptr, nDataLen + 1);
00002e  4628              MOV      r0,r5
000030  e8bd40f8          POP      {r3-r7,lr}
000034  1c49              ADDS     r1,r1,#1
000036  f7ffbffe          B.W      kdp_com_send_out_msg
;;;1048   }
;;;1049   #endif
                          ENDP

00003a  0000              DCW      0x0000
                  |L61.60|
                          DCD      stCom_type

                          AREA ||i.send_verify_reply_msg||, CODE, READONLY, ALIGN=2

                  send_verify_reply_msg PROC
;;;592    #ifdef KID_VERIFY
;;;593    void send_verify_reply_msg(uint8_t result,msg_verify_data userinfo)
000000  b40f              PUSH     {r0-r3}
;;;594    {
;;;595        s_msg_reply_verify_data msg_reply;
;;;596    
;;;597        uint16_t msg_size = sizeof(msg_reply.reply_data) + MSG_APPEND_2_SIZE;
000002  2226              MOVS     r2,#0x26
000004  b510              PUSH     {r4,lr}               ;594
000006  b08c              SUB      sp,sp,#0x30           ;594
000008  4604              MOV      r4,r0                 ;594
;;;598        kdp_com_pack_rsp_msg((s_msg_rsp_base*)&msg_reply, KID_REPLY, msg_size, KID_VERIFY, result);
00000a  9000              STR      r0,[sp,#0]
00000c  2312              MOVS     r3,#0x12
00000e  2100              MOVS     r1,#0
000010  a801              ADD      r0,sp,#4
000012  f7fffffe          BL       kdp_com_pack_rsp_msg
;;;599    
;;;600        memcpy(&msg_reply.reply_data, &userinfo, sizeof(userinfo));
000016  2224              MOVS     r2,#0x24
000018  a90f              ADD      r1,sp,#0x3c
00001a  f10d000b          ADD      r0,sp,#0xb
00001e  f7fffffe          BL       __aeabi_memcpy
;;;601    
;;;602        kdp_com_send_out_msg((uint8_t*)&msg_reply, sizeof(msg_reply));
000022  212c              MOVS     r1,#0x2c
000024  a801              ADD      r0,sp,#4
000026  f7fffffe          BL       kdp_com_send_out_msg
;;;603    
;;;604        dbg_msg_console("[%s][%d] result: %s", __func__, osKernelGetTickCount(), str_uart_reply((enum uart_reply_result)result));
00002a  4620              MOV      r0,r4
00002c  f7fffffe          BL       str_uart_reply
000030  4604              MOV      r4,r0
000032  f7fffffe          BL       osKernelGetTickCount
000036  4603              MOV      r3,r0
000038  4a06              LDR      r2,|L62.84|
00003a  a107              ADR      r1,|L62.88|
00003c  2001              MOVS     r0,#1
00003e  9400              STR      r4,[sp,#0]
000040  f7fffffe          BL       kdp_level_printf
;;;605        g_nAutoPowerOffCnt = 0;
000044  490a              LDR      r1,|L62.112|
000046  2000              MOVS     r0,#0
000048  6008              STR      r0,[r1,#0]  ; g_nAutoPowerOffCnt
;;;606    }
00004a  b00c              ADD      sp,sp,#0x30
00004c  bc10              POP      {r4}
00004e  f85dfb14          LDR      pc,[sp],#0x14
;;;607    #endif
                          ENDP

000052  0000              DCW      0x0000
                  |L62.84|
                          DCD      ||.constdata||
                  |L62.88|
000058  5b25735d          DCB      "[%s][%d] result: %s\r\n",0
00005c  5b25645d
000060  20726573
000064  756c743a
000068  2025730d
00006c  0a00    
00006e  00                DCB      0
00006f  00                DCB      0
                  |L62.112|
                          DCD      g_nAutoPowerOffCnt

                          AREA ||i.str_uart_reply||, CODE, READONLY, ALIGN=1

                  str_uart_reply PROC
;;;37     
;;;38     char *str_uart_reply(enum uart_reply_result result)
000000  b510              PUSH     {r4,lr}
;;;39     {
;;;40         return _str_uart_reply(result);
000002  f7fffffe          BL       _str_uart_reply
;;;41     }
000006  bd10              POP      {r4,pc}
;;;42     
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  __func__
000000  73656e64          DCB      0x73,0x65,0x6e,0x64
000004  5f766572          DCB      0x5f,0x76,0x65,0x72
000008  6966795f          DCB      0x69,0x66,0x79,0x5f
00000c  7265706c          DCB      0x72,0x65,0x70,0x6c
000010  795f6d73          DCB      0x79,0x5f,0x6d,0x73
000014  6700              DCB      0x67,0x00
                  |symbol_number.149|
000016  7365              DCB      0x73,0x65
000018  6e645f65          DCB      0x6e,0x64,0x5f,0x65
00001c  6e726f6c          DCB      0x6e,0x72,0x6f,0x6c
000020  6c5f7265          DCB      0x6c,0x5f,0x72,0x65
000024  706c795f          DCB      0x70,0x6c,0x79,0x5f
000028  6d736700          DCB      0x6d,0x73,0x67,0x00
                  |symbol_number.150|
00002c  73656e64          DCB      0x73,0x65,0x6e,0x64
000030  5f64625f          DCB      0x5f,0x64,0x62,0x5f
000034  696d706f          DCB      0x69,0x6d,0x70,0x6f
000038  72745f72          DCB      0x72,0x74,0x5f,0x72
00003c  65717565          DCB      0x65,0x71,0x75,0x65
000040  73745f72          DCB      0x73,0x74,0x5f,0x72
000044  65706c79          DCB      0x65,0x70,0x6c,0x79
000048  5f6d7367          DCB      0x5f,0x6d,0x73,0x67
00004c  00                DCB      0x00

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  4d525f53          DCB      "MR_SUCCESS",0
000004  55434345
000008  535300  
00000b  00                DCB      0
00000c  4d525f52          DCB      "MR_REJECTED",0
000010  454a4543
000014  54454400
000018  4d525f41          DCB      "MR_ABORTED",0
00001c  424f5254
000020  454400  
000023  00                DCB      0
000024  4d525f46          DCB      "MR_FAILED_DEV_OPEN_FAIL",0
000028  41494c45
00002c  445f4445
000030  565f4f50
000034  454e5f46
000038  41494c00
00003c  4d525f46          DCB      "MR_FAILED_UNKNOWN_REASON",0
000040  41494c45
000044  445f554e
000048  4b4e4f57
00004c  4e5f5245
000050  41534f4e
000054  00      
000055  00                DCB      0
000056  00                DCB      0
000057  00                DCB      0
000058  4d525f46          DCB      "MR_FAILED_INVALID_PARAM",0
00005c  41494c45
000060  445f494e
000064  56414c49
000068  445f5041
00006c  52414d00
000070  4d525f46          DCB      "MR_FAILED_OOM",0
000074  41494c45
000078  445f4f4f
00007c  4d00    
00007e  00                DCB      0
00007f  00                DCB      0
000080  4d525f46          DCB      "MR_FAILED_UNKNOWN_USER",0
000084  41494c45
000088  445f554e
00008c  4b4e4f57
000090  4e5f5553
000094  455200  
000097  00                DCB      0
000098  4d525f46          DCB      "MR_FAILED_MAX_USER",0
00009c  41494c45
0000a0  445f4d41
0000a4  585f5553
0000a8  455200  
0000ab  00                DCB      0
0000ac  4d525f46          DCB      "MR_FAILED_FACE_ENROLLED",0
0000b0  41494c45
0000b4  445f4641
0000b8  43455f45
0000bc  4e524f4c
0000c0  4c454400
0000c4  4d525f46          DCB      "MR_FAILED_LIVENESS_CHECK",0
0000c8  41494c45
0000cc  445f4c49
0000d0  56454e45
0000d4  53535f43
0000d8  4845434b
0000dc  00      
0000dd  00                DCB      0
0000de  00                DCB      0
0000df  00                DCB      0
0000e0  4d525f46          DCB      "MR_FAILED_TIME_OUT",0
0000e4  41494c45
0000e8  445f5449
0000ec  4d455f4f
0000f0  555400  
0000f3  00                DCB      0
0000f4  4d525f46          DCB      "MR_FAILED_AUTHORIZATION",0
0000f8  41494c45
0000fc  445f4155
000100  54484f52
000104  495a4154
000108  494f4e00
00010c  4d525f46          DCB      "MR_FAILED_READ_FILE",0
000110  41494c45
000114  445f5245
000118  41445f46
00011c  494c4500
000120  4d525f46          DCB      "MR_FAILED_WRITE_FILE",0
000124  41494c45
000128  445f5752
00012c  4954455f
000130  46494c45
000134  00      
000135  00                DCB      0
000136  00                DCB      0
000137  00                DCB      0
000138  4d525f46          DCB      "MR_FAILED_NO_ENCRYPT",0
00013c  41494c45
000140  445f4e4f
000144  5f454e43
000148  52595054
00014c  00      
00014d  00                DCB      0
00014e  00                DCB      0
00014f  00                DCB      0
000150  4d525f46          DCB      "MR_FAILED_STORE_ERR",0
000154  41494c45
000158  445f5354
00015c  4f52455f
000160  45525200
000164  4d525f46          DCB      "MR_FAILED_NO_IMG",0
000168  41494c45
00016c  445f4e4f
000170  5f494d47
000174  00      
000175  00                DCB      0
000176  00                DCB      0
000177  00                DCB      0
000178  4d525f46          DCB      "MR_FAILED_NO_IDX",0
00017c  41494c45
000180  445f4e4f
000184  5f494458
000188  00      
000189  00                DCB      0
00018a  00                DCB      0
00018b  00                DCB      0
00018c  4d525f46          DCB      "MR_FAILED_BUF_OVERFLOW",0
000190  41494c45
000194  445f4255
000198  465f4f56
00019c  4552464c
0001a0  4f5700  
0001a3  00                DCB      0
0001a4  4d525f46          DCB      "MR_FAILED_MASS_DATA_HEAD_EMPTY",0
0001a8  41494c45
0001ac  445f4d41
0001b0  53535f44
0001b4  4154415f
0001b8  48454144
0001bc  5f454d50
0001c0  545900  
0001c3  00                DCB      0
0001c4  4d525f46          DCB      "MR_FAILED_MASS_DATA_DB_ABNORMAL",0
0001c8  41494c45
0001cc  445f4d41
0001d0  53535f44
0001d4  4154415f
0001d8  44425f41
0001dc  424e4f52
0001e0  4d414c00
0001e4  4d525f46          DCB      "MR_FAILED_MASS_DATA_FM_ABNORMAL",0
0001e8  41494c45
0001ec  445f4d41
0001f0  53535f44
0001f4  4154415f
0001f8  464d5f41
0001fc  424e4f52
000200  4d414c00
000204  4d525f46          DCB      "MR_FAILED_NOT_READY",0
000208  41494c45
00020c  445f4e4f
000210  545f5245
000214  41445900
000218  4d525f46          DCB      "MR_FAILED_EXISTED_USER",0
00021c  41494c45
000220  445f4558
000224  49535445
000228  445f5553
00022c  455200  
00022f  00                DCB      0
000230  4d525f46          DCB      "MR_FAILED_IDX_OVERFLOW",0
000234  41494c45
000238  445f4944
00023c  585f4f56
000240  4552464c
000244  4f5700  
000247  00                DCB      0
000248  4d525f43          DCB      "MR_CONTIUNOUS",0
00024c  4f4e5449
000250  554e4f55
000254  5300    
000256  00                DCB      0
000257  00                DCB      0
000258  4d525f53          DCB      "MR_SUCCESS_BUT_DEL_USER",0
00025c  55434345
000260  53535f42
000264  55545f44
000268  454c5f55
00026c  53455200
000270  4d525f46          DCB      "MR_FAILED_INVALID_CMD",0
000274  41494c45
000278  445f494e
00027c  56414c49
000280  445f434d
000284  4400    
000286  00                DCB      0
000287  00                DCB      0
000288  00                DCB      0

                          AREA ||.data||, DATA, ALIGN=2

                  g_nMsgPkgSize
000000  0000              DCW      0x0000
000002  0000              DCB      0x00,0x00
                  msg_dst
                          DCD      0x00000000
                  debug_key
000008  64303562          DCB      0x64,0x30,0x35,0x62
00000c  30326330          DCB      0x30,0x32,0x63,0x30
000010  64383164          DCB      0x64,0x38,0x31,0x64
000014  35646462          DCB      0x35,0x64,0x64,0x62

                          AREA ||i._str_uart_reply||, COMGROUP=_str_uart_reply, CODE, READONLY, ALIGN=2

                  _str_uart_reply PROC
;;;201    #pragma diag_suppress 111
;;;202    inline char *_str_uart_reply(enum uart_reply_result result)
000000  2814              CMP      r0,#0x14
;;;203    {
;;;204        switch (result)
000002  d04e              BEQ      |L376.162|
000004  dc0d              BGT      |L376.34|
000006  2814              CMP      r0,#0x14
000008  d22d              BCS      |L376.102|
00000a  e8dff000          TBB      [pc,r0]
00000e  2e30              DCB      0x2e,0x30
000010  322c3436          DCB      0x32,0x2c,0x34,0x36
000014  383a3c3e          DCB      0x38,0x3a,0x3c,0x3e
000018  402c4244          DCB      0x40,0x2c,0x42,0x44
00001c  462c2c2c          DCB      0x46,0x2c,0x2c,0x2c
000020  2c48              DCB      0x2c,0x48
                  |L376.34|
000022  2832              CMP      r0,#0x32
000024  d04d              BEQ      |L376.194|
000026  dc10              BGT      |L376.74|
000028  2818              CMP      r0,#0x18
00002a  d042              BEQ      |L376.178|
00002c  dc06              BGT      |L376.60|
00002e  2815              CMP      r0,#0x15
000030  d039              BEQ      |L376.166|
000032  2816              CMP      r0,#0x16
000034  d039              BEQ      |L376.170|
000036  2817              CMP      r0,#0x17
000038  d115              BNE      |L376.102|
00003a  e038              B        |L376.174|
                  |L376.60|
00003c  2819              CMP      r0,#0x19
00003e  d03a              BEQ      |L376.182|
000040  2830              CMP      r0,#0x30
000042  d03a              BEQ      |L376.186|
000044  2831              CMP      r0,#0x31
000046  d10e              BNE      |L376.102|
000048  e039              B        |L376.190|
                  |L376.74|
00004a  2836              CMP      r0,#0x36
00004c  d041              BEQ      |L376.210|
00004e  dc06              BGT      |L376.94|
000050  2833              CMP      r0,#0x33
000052  d038              BEQ      |L376.198|
000054  2834              CMP      r0,#0x34
000056  d038              BEQ      |L376.202|
000058  2835              CMP      r0,#0x35
00005a  d104              BNE      |L376.102|
00005c  e037              B        |L376.206|
                  |L376.94|
00005e  2840              CMP      r0,#0x40
000060  d039              BEQ      |L376.214|
000062  28ff              CMP      r0,#0xff
000064  d039              BEQ      |L376.218|
                  |L376.102|
;;;205        {
;;;206            CMD_REPLY_RESULT_MACRO(TO_STR)
;;;207        default:
;;;208            break;
;;;209        }
;;;210        
;;;211        return "";
000066  481e              LDR      r0,|L376.224|
;;;212    }
000068  4770              BX       lr
00006a  481e              LDR      r0,|L376.228|
00006c  4770              BX       lr
00006e  481e              LDR      r0,|L376.232|
000070  4770              BX       lr
000072  481e              LDR      r0,|L376.236|
000074  4770              BX       lr
000076  481e              LDR      r0,|L376.240|
000078  4770              BX       lr
00007a  481e              LDR      r0,|L376.244|
00007c  4770              BX       lr
00007e  481e              LDR      r0,|L376.248|
000080  4770              BX       lr
000082  481e              LDR      r0,|L376.252|
000084  4770              BX       lr
000086  481e              LDR      r0,|L376.256|
000088  4770              BX       lr
00008a  481e              LDR      r0,|L376.260|
00008c  4770              BX       lr
00008e  481e              LDR      r0,|L376.264|
000090  4770              BX       lr
000092  481e              LDR      r0,|L376.268|
000094  4770              BX       lr
000096  481e              LDR      r0,|L376.272|
000098  4770              BX       lr
00009a  481e              LDR      r0,|L376.276|
00009c  4770              BX       lr
00009e  481e              LDR      r0,|L376.280|
0000a0  4770              BX       lr
                  |L376.162|
0000a2  481e              LDR      r0,|L376.284|
0000a4  4770              BX       lr
                  |L376.166|
0000a6  481e              LDR      r0,|L376.288|
0000a8  4770              BX       lr
                  |L376.170|
0000aa  481e              LDR      r0,|L376.292|
0000ac  4770              BX       lr
                  |L376.174|
0000ae  481e              LDR      r0,|L376.296|
0000b0  4770              BX       lr
                  |L376.178|
0000b2  481e              LDR      r0,|L376.300|
0000b4  4770              BX       lr
                  |L376.182|
0000b6  481e              LDR      r0,|L376.304|
0000b8  4770              BX       lr
                  |L376.186|
0000ba  481e              LDR      r0,|L376.308|
0000bc  4770              BX       lr
                  |L376.190|
0000be  481e              LDR      r0,|L376.312|
0000c0  4770              BX       lr
                  |L376.194|
0000c2  481e              LDR      r0,|L376.316|
0000c4  4770              BX       lr
                  |L376.198|
0000c6  481e              LDR      r0,|L376.320|
0000c8  4770              BX       lr
                  |L376.202|
0000ca  481e              LDR      r0,|L376.324|
0000cc  4770              BX       lr
                  |L376.206|
0000ce  481e              LDR      r0,|L376.328|
0000d0  4770              BX       lr
                  |L376.210|
0000d2  481e              LDR      r0,|L376.332|
0000d4  4770              BX       lr
                  |L376.214|
0000d6  481e              LDR      r0,|L376.336|
0000d8  4770              BX       lr
                  |L376.218|
0000da  481e              LDR      r0,|L376.340|
0000dc  4770              BX       lr
;;;213    #pragma diag_warning 111
                          ENDP

0000de  0000              DCW      0x0000
                  |L376.224|
                          DCD      ||.conststring||+0x288
                  |L376.228|
                          DCD      ||.conststring||
                  |L376.232|
                          DCD      ||.conststring||+0xc
                  |L376.236|
                          DCD      ||.conststring||+0x18
                  |L376.240|
                          DCD      ||.conststring||+0x24
                  |L376.244|
                          DCD      ||.conststring||+0x3c
                  |L376.248|
                          DCD      ||.conststring||+0x58
                  |L376.252|
                          DCD      ||.conststring||+0x70
                  |L376.256|
                          DCD      ||.conststring||+0x80
                  |L376.260|
                          DCD      ||.conststring||+0x98
                  |L376.264|
                          DCD      ||.conststring||+0xac
                  |L376.268|
                          DCD      ||.conststring||+0xc4
                  |L376.272|
                          DCD      ||.conststring||+0xe0
                  |L376.276|
                          DCD      ||.conststring||+0xf4
                  |L376.280|
                          DCD      ||.conststring||+0x10c
                  |L376.284|
                          DCD      ||.conststring||+0x120
                  |L376.288|
                          DCD      ||.conststring||+0x138
                  |L376.292|
                          DCD      ||.conststring||+0x150
                  |L376.296|
                          DCD      ||.conststring||+0x164
                  |L376.300|
                          DCD      ||.conststring||+0x178
                  |L376.304|
                          DCD      ||.conststring||+0x18c
                  |L376.308|
                          DCD      ||.conststring||+0x1a4
                  |L376.312|
                          DCD      ||.conststring||+0x1c4
                  |L376.316|
                          DCD      ||.conststring||+0x1e4
                  |L376.320|
                          DCD      ||.conststring||+0x204
                  |L376.324|
                          DCD      ||.conststring||+0x218
                  |L376.328|
                          DCD      ||.conststring||+0x230
                  |L376.332|
                          DCD      ||.conststring||+0x248
                  |L376.336|
                          DCD      ||.conststring||+0x258
                  |L376.340|
                          DCD      ||.conststring||+0x270

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\scpu\\middleware\\kdp_comm\\kdp_comm_protoco.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___18_kdp_comm_protoco_c_54bfd15e____REV16|
#line 208 "F:\\Users\\fu\\AppData\\Local\\Arm\\Packs\\ARM\\CMSIS\\5.9.0\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___18_kdp_comm_protoco_c_54bfd15e____REV16| PROC
#line 209

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___18_kdp_comm_protoco_c_54bfd15e____REVSH|
#line 223
|__asm___18_kdp_comm_protoco_c_54bfd15e____REVSH| PROC
#line 224

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___18_kdp_comm_protoco_c_54bfd15e____RRX|
#line 410
|__asm___18_kdp_comm_protoco_c_54bfd15e____RRX| PROC
#line 411

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
