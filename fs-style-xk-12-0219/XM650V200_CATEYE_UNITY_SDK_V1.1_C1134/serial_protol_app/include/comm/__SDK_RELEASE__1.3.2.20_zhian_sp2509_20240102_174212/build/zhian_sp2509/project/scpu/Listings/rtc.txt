; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\objects\rtc.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\rtc.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O3 --diag_suppress=9931 -I..\..\config -I..\..\..\..\board -I..\..\..\..\common\include -I..\..\..\..\scpu\device\include\CMSIS -I..\..\..\..\scpu\device\include\Kneron -I..\..\..\..\scpu\framework\include -I..\..\..\..\scpu\framework\include\framework -I..\..\..\..\scpu\drivers\include -I..\..\..\..\scpu\drivers\include\media\touch -I..\..\..\..\scpu\drivers\include\media\flash -I..\..\..\..\scpu\lib\kdp_system\inc -I..\..\..\..\scpu\lib\kdp_application\include\ -I..\..\..\..\scpu\lib\kdp_application\base\ -I..\..\..\..\scpu\lib\kdp_application\misc -I..\..\..\..\scpu\lib\kdp_e2e_r1n1\include -I..\..\..\..\scpu\include -I..\..\..\..\scpu\middleware\ota -I..\..\..\..\scpu\middleware\comm -I..\..\..\..\scpu\middleware\kdp_comm -I..\..\..\..\scpu\share -I..\..\..\..\scpu\share\gui_lib -I..\..\user -I.\RTE\CMSIS -I.\RTE\_Target-scpu -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\RTOS2\Include -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\RTOS2\RTX\Include -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\Device\ARM\ARMCM4\Include -D__RTX -D__MICROLIB -D__UVISION_VERSION=538 -D_RTE_ -DARMCM4_FP -D_RTE_ -DARM_MATH_CM4 -DTARGET_SCPU -DLOG_ENABLE -DKL520 -DHEAD_POSE_CHECK_PERCENT --omf_browse=.\objects\rtc.crf ..\..\..\..\scpu\drivers\system\rtc.c]
                          THUMB

                          AREA ||i.rtc_alarm_disable||, CODE, READONLY, ALIGN=1

                  rtc_alarm_disable PROC
;;;316    
;;;317    void rtc_alarm_disable(enum alarm_type alm_type)
000000  f7ffbffe          B.W      rtc_alm_disable
;;;318    {	
;;;319        rtc_alm_disable();
;;;320    }
;;;321    
                          ENDP


                          AREA ||i.rtc_alarm_enable||, CODE, READONLY, ALIGN=2

                  rtc_alarm_enable PROC
;;;239    
;;;240    void rtc_alarm_enable(enum alarm_type alm_type, void *param1, void *param2)
000000  b5f8              PUSH     {r3-r7,lr}
;;;241    {	
000002  4614              MOV      r4,r2
000004  460d              MOV      r5,r1
000006  4607              MOV      r7,r0
;;;242        union rtc_time_u    *time_p;
;;;243        union rtc_date_u    *date_p;
;;;244        uint32_t            tmp;
;;;245    
;;;246        // disable hw first
;;;247        rtc_alm_disable();
000008  f7fffffe          BL       rtc_alm_disable
00000c  4e3d              LDR      r6,|L2.260|
;;;248    
;;;249        if (alm_type == ALARM_IN_SECS) {
00000e  2f01              CMP      r7,#1
000010  d011              BEQ      |L2.54|
;;;250            struct rtc_time_s time;
;;;251            struct rtc_date_s date;
;;;252            uint32_t time_in_secs, carry_on;
;;;253    
;;;254            rtc_get_date(&date);
;;;255            rtc_get_time(&time);
;;;256            time_in_secs = *(uint32_t *)param1;
;;;257    
;;;258            // update seconds
;;;259            tmp = time.sec + time_in_secs;  // use u32 tmp to avoid overflow
;;;260            time.sec = tmp % SECS_PER_MIN;
;;;261            carry_on = tmp / SECS_PER_MIN;
;;;262            if (carry_on) {
;;;263                // update minutes
;;;264                tmp = time.min + carry_on;
;;;265                time.min = tmp % MINS_PER_HOUR;
;;;266                carry_on = tmp / MINS_PER_HOUR;
;;;267                if (carry_on) {
;;;268                    // update hours
;;;269                    tmp = time.hour + carry_on;
;;;270                    time.hour = tmp % HOURS_PER_DAY;
;;;271                    carry_on = tmp / HOURS_PER_DAY;
;;;272                    if (carry_on) {
;;;273                        // update weekday
;;;274                        tmp = time.weekday + carry_on;
;;;275                        time.weekday = tmp % DAYS_PER_WEEK;
;;;276    
;;;277                        // Now update date
;;;278                        tmp = date.date + carry_on;
;;;279                        date.date = ((tmp - 1) % days_of_month[date.month]) + 1;
;;;280                        if (tmp > days_of_month[date.month]) {
;;;281                            // update month: no more than 1 month in future
;;;282                            date.month = (date.month % MONTH_PER_YEAR) + 1;
;;;283                            if (date.month == 1)
;;;284                                // update year
;;;285                                date.year++;
;;;286                        }
;;;287                    }
;;;288                }
;;;289            }
;;;290            date_p = (union rtc_date_u *)&date;
;;;291            outw(RTC_REG_ALM2, date_p->date_raw);
;;;292    
;;;293            time_p = (union rtc_time_u *)&time;
;;;294            outw(RTC_REG_ALM1, time_p->time_raw);
;;;295    
;;;296            // enable now
;;;297            rtc_alm_enable();
;;;298        } else if (alm_type == ALARM_IN_DATE_TIME) {
000012  2f02              CMP      r7,#2
000014  d175              BNE      |L2.258|
;;;299            struct rtc_time_s *time;
;;;300            struct rtc_date_s *date;
;;;301    
;;;302            date = (struct rtc_date_s *)param1;
;;;303            rtc_rectify_date(date);
000016  4628              MOV      r0,r5
000018  f7fffffe          BL       rtc_rectify_date
;;;304            date_p = (union rtc_date_u *)date;
;;;305            outw(RTC_REG_ALM2, date_p->date_raw);
00001c  6828              LDR      r0,[r5,#0]
00001e  f8c6020c          STR      r0,[r6,#0x20c]
;;;306    
;;;307            time = (struct rtc_time_s *)param2;
;;;308            rtc_rectify_time(time);
000022  4620              MOV      r0,r4
000024  f7fffffe          BL       rtc_rectify_time
;;;309            time_p = (union rtc_time_u *)time;
;;;310            outw(RTC_REG_ALM1, time_p->time_raw);
000028  6820              LDR      r0,[r4,#0]
00002a  f8c60208          STR      r0,[r6,#0x208]
;;;311    
;;;312            // enable now
;;;313            rtc_alm_enable();
00002e  e8bd40f8          POP      {r3-r7,lr}
000032  f7ffbffe          B.W      rtc_alm_enable
                  |L2.54|
000036  f8d64204          LDR      r4,[r6,#0x204]
00003a  4668              MOV      r0,sp                 ;255
00003c  f7fffffe          BL       rtc_get_time
000040  6828              LDR      r0,[r5,#0]            ;259
;;;314        }
;;;315    }
000042  9900              LDR      r1,[sp,#0]
000044  fa50f181          UXTAB    r1,r0,r1
000048  203c              MOVS     r0,#0x3c              ;260
00004a  fbb1f2f0          UDIV     r2,r1,r0              ;260
00004e  fb001212          MLS      r2,r0,r2,r1           ;260
000052  fbb1f1f0          UDIV     r1,r1,r0              ;261
000056  f88d2000          STRB     r2,[sp,#0]            ;260
00005a  b3e9              CBZ      r1,|L2.216|
00005c  9a00              LDR      r2,[sp,#0]            ;264
00005e  f3c22207          UBFX     r2,r2,#8,#8           ;264
000062  4411              ADD      r1,r1,r2              ;264
000064  fbb1f2f0          UDIV     r2,r1,r0              ;265
000068  fb001212          MLS      r2,r0,r2,r1           ;265
00006c  fbb1f0f0          UDIV     r0,r1,r0              ;266
000070  f88d2001          STRB     r2,[sp,#1]            ;265
000074  b380              CBZ      r0,|L2.216|
000076  9900              LDR      r1,[sp,#0]            ;269
000078  f3c14107          UBFX     r1,r1,#16,#8          ;269
00007c  4408              ADD      r0,r0,r1              ;269
00007e  2118              MOVS     r1,#0x18              ;270
000080  fbb0f2f1          UDIV     r2,r0,r1              ;270
000084  fb010212          MLS      r2,r1,r2,r0           ;270
000088  fbb0f0f1          UDIV     r0,r0,r1              ;271
00008c  f88d2002          STRB     r2,[sp,#2]            ;270
000090  b310              CBZ      r0,|L2.216|
000092  9900              LDR      r1,[sp,#0]            ;274
000094  2207              MOVS     r2,#7                 ;275
000096  eb006111          ADD      r1,r0,r1,LSR #24      ;274
00009a  fbb1f3f2          UDIV     r3,r1,r2              ;275
00009e  fb021113          MLS      r1,r2,r3,r1           ;275
0000a2  f88d1003          STRB     r1,[sp,#3]            ;275
0000a6  fa50f084          UXTAB    r0,r0,r4
0000aa  4a17              LDR      r2,|L2.264|
0000ac  f3c42107          UBFX     r1,r4,#8,#8           ;279
0000b0  f8523021          LDR      r3,[r2,r1,LSL #2]     ;279
0000b4  1e41              SUBS     r1,r0,#1              ;279
0000b6  fbb1f5f3          UDIV     r5,r1,r3              ;279
0000ba  fb031115          MLS      r1,r3,r5,r1           ;279
0000be  1c49              ADDS     r1,r1,#1              ;279
0000c0  f3610407          BFI      r4,r1,#0,#8           ;279
0000c4  f3c42107          UBFX     r1,r4,#8,#8           ;280
0000c8  f8522021          LDR      r2,[r2,r1,LSL #2]     ;280
0000cc  4282              CMP      r2,r0                 ;280
0000ce  d211              BCS      |L2.244|
0000d0  200c              MOVS     r0,#0xc               ;282
0000d2  fbb1f2f0          UDIV     r2,r1,r0              ;282
0000d6  e000              B        |L2.218|
                  |L2.216|
0000d8  e00c              B        |L2.244|
                  |L2.218|
0000da  fb001012          MLS      r0,r0,r2,r1           ;282
0000de  1c40              ADDS     r0,r0,#1              ;282
0000e0  f360240f          BFI      r4,r0,#8,#8           ;282
0000e4  f3c42107          UBFX     r1,r4,#8,#8           ;283
0000e8  2901              CMP      r1,#1                 ;283
0000ea  d103              BNE      |L2.244|
0000ec  0c20              LSRS     r0,r4,#16             ;285
0000ee  1c40              ADDS     r0,r0,#1              ;285
0000f0  f3604417          BFI      r4,r0,#16,#8          ;285
                  |L2.244|
0000f4  f8c6420c          STR      r4,[r6,#0x20c]        ;291
0000f8  9800              LDR      r0,[sp,#0]            ;294
0000fa  f8c60208          STR      r0,[r6,#0x208]        ;294
0000fe  f7fffffe          BL       rtc_alm_enable
                  |L2.258|
000102  bdf8              POP      {r3-r7,pc}
;;;316    
                          ENDP

                  |L2.260|
                          DCD      0xc2300000
                  |L2.264|
                          DCD      ||.constdata||+0x14

                          AREA ||i.rtc_alm_disable||, CODE, READONLY, ALIGN=2

                  rtc_alm_disable PROC
;;;232    
;;;233    static void rtc_alm_disable(void)
000000  4806              LDR      r0,|L3.28|
;;;234    {
;;;235        masked_outw(RTC_REG_CTRL, 0, RTC_CTRL_ALM_EN);
000002  f8d01210          LDR      r1,[r0,#0x210]
000006  f0210102          BIC      r1,r1,#2
00000a  f8c01210          STR      r1,[r0,#0x210]
;;;236        do {
;;;237        } while (inw(RTC_REG_CTRL) & RTC_CTRL_ALMEN_STS);
00000e  bf00              NOP      
                  |L3.16|
000010  f8d01210          LDR      r1,[r0,#0x210]
000014  0589              LSLS     r1,r1,#22
000016  d4fb              BMI      |L3.16|
;;;238    }
000018  4770              BX       lr
;;;239    
                          ENDP

00001a  0000              DCW      0x0000
                  |L3.28|
                          DCD      0xc2300000

                          AREA ||i.rtc_alm_enable||, CODE, READONLY, ALIGN=2

                  rtc_alm_enable PROC
;;;225    
;;;226    static void rtc_alm_enable(void)
000000  4806              LDR      r0,|L4.28|
;;;227    {
;;;228        masked_outw(RTC_REG_CTRL, RTC_CTRL_ALM_EN, RTC_CTRL_ALM_EN);
000002  f8d01210          LDR      r1,[r0,#0x210]
000006  f0410102          ORR      r1,r1,#2
00000a  f8c01210          STR      r1,[r0,#0x210]
;;;229        do {
;;;230        } while (!(inw(RTC_REG_CTRL) & RTC_CTRL_ALMEN_STS));
00000e  bf00              NOP      
                  |L4.16|
000010  f8d01210          LDR      r1,[r0,#0x210]
000014  0589              LSLS     r1,r1,#22
000016  d5fb              BPL      |L4.16|
;;;231    }
000018  4770              BX       lr
;;;232    
                          ENDP

00001a  0000              DCW      0x0000
                  |L4.28|
                          DCD      0xc2300000

                          AREA ||i.rtc_current_time_info||, CODE, READONLY, ALIGN=2

                  rtc_current_time_info PROC
;;;329    
;;;330    void rtc_current_time_info(void)
000000  4803              LDR      r0,|L5.16|
;;;331    {
000002  b508              PUSH     {r3,lr}
000004  f8d00204          LDR      r0,[r0,#0x204]
;;;332        struct rtc_time_s time;
;;;333        struct rtc_date_s date;
;;;334    
;;;335        rtc_get_date(&date);
;;;336        rtc_get_time(&time);
000008  4668              MOV      r0,sp
00000a  f7fffffe          BL       rtc_get_time
;;;337    
;;;338        //info_msg("RTC: (%s) %2.2d%2.2d/%2.2d/%2.2d - %2.2d:%2.2d:%2.2d\n",
;;;339                ///weekdays[time.weekday],
;;;340        info_msg("RTC: %2.2d%2.2d/%2.2d/%2.2d - %2.2d:%2.2d:%2.2d\n",
;;;341                date.century, date.year, date.month, date.date,
;;;342                time.hour, time.min, time.sec);
;;;343    }
00000e  bd08              POP      {r3,pc}
;;;344    
                          ENDP

                  |L5.16|
                          DCD      0xc2300000

                          AREA ||i.rtc_get_date_time||, CODE, READONLY, ALIGN=2

                  rtc_get_date_time PROC
;;;369    
;;;370    void rtc_get_date_time(struct rtc_date_s *date, struct rtc_time_s *time)
000000  b118              CBZ      r0,|L6.10|
000002  4a05              LDR      r2,|L6.24|
000004  f8d22204          LDR      r2,[r2,#0x204]
000008  6002              STR      r2,[r0,#0]
                  |L6.10|
;;;371    {
;;;372        if (date != NULL)
;;;373            rtc_get_date(date);
;;;374        if (time != NULL)
00000a  2900              CMP      r1,#0
00000c  d002              BEQ      |L6.20|
;;;375            rtc_get_time(time);
00000e  4608              MOV      r0,r1
000010  f7ffbffe          B.W      rtc_get_time
                  |L6.20|
;;;376    }
000014  4770              BX       lr
;;;377    
                          ENDP

000016  0000              DCW      0x0000
                  |L6.24|
                          DCD      0xc2300000

                          AREA ||i.rtc_get_date_time_in_secs||, CODE, READONLY, ALIGN=2

                  rtc_get_date_time_in_secs PROC
;;;344    
;;;345    void rtc_get_date_time_in_secs(uint32_t *date_time_in_secs)
000000  b538              PUSH     {r3-r5,lr}
;;;346    {
000002  4605              MOV      r5,r0
000004  481a              LDR      r0,|L7.112|
000006  f8d04204          LDR      r4,[r0,#0x204]
;;;347        struct rtc_time_s time;
;;;348        struct rtc_date_s date;
;;;349        uint32_t long_time;
;;;350    
;;;351        rtc_get_date(&date);
;;;352        rtc_get_time(&time);
00000a  4668              MOV      r0,sp
00000c  f7fffffe          BL       rtc_get_time
;;;353    
;;;354        if (0) {
;;;355            // simple test
;;;356            long_time = time.sec + time.min * SECS_PER_MIN + time.hour * SECS_PER_HOUR;
;;;357        } else {
;;;358            // TODO: leap year
;;;359            long_time = time.sec + time.min * SECS_PER_MIN + time.hour * SECS_PER_HOUR
000010  9800              LDR      r0,[sp,#0]
000012  f3c02207          UBFX     r2,r0,#8,#8
000016  b2c1              UXTB     r1,r0
000018  ebc21202          RSB      r2,r2,r2,LSL #4
00001c  eb010182          ADD      r1,r1,r2,LSL #2
000020  f3c04007          UBFX     r0,r0,#16,#8
000024  ebc01240          RSB      r2,r0,r0,LSL #5
000028  ebc22000          RSB      r0,r2,r0,LSL #8
00002c  eb011000          ADD      r0,r1,r0,LSL #4
000030  b2e1              UXTB     r1,r4
000032  f24022a3          MOV      r2,#0x2a3
000036  fb11f102          SMULBB   r1,r1,r2
00003a  eb0011c1          ADD      r1,r0,r1,LSL #7
00003e  4a0d              LDR      r2,|L7.116|
000040  f3c42007          UBFX     r0,r4,#8,#8
000044  eb020080          ADD      r0,r2,r0,LSL #2
000048  f24022a3          MOV      r2,#0x2a3
00004c  f8500c04          LDR      r0,[r0,#-4]
000050  4350              MULS     r0,r2,r0
000052  eb0111c0          ADD      r1,r1,r0,LSL #7
000056  4a08              LDR      r2,|L7.120|
000058  f3c44007          UBFX     r0,r4,#16,#8
00005c  4350              MULS     r0,r2,r0
00005e  eb0110c0          ADD      r0,r1,r0,LSL #7
000062  4906              LDR      r1,|L7.124|
;;;360                + (date.date - 1) * SECS_PER_DAY + days_to_month[date.month - 1] * SECS_PER_DAY
;;;361                + date.year * (DAYS_PER_YEAR * SECS_PER_DAY);
;;;362        }
;;;363        
;;;364        if (date_time_in_secs != NULL)
000064  2d00              CMP      r5,#0
000066  4408              ADD      r0,r0,r1              ;359
000068  d000              BEQ      |L7.108|
;;;365            *date_time_in_secs = long_time;
00006a  6028              STR      r0,[r5,#0]
                  |L7.108|
;;;366        else
;;;367            info_msg("Flat time: %d\n", long_time);
;;;368    }
00006c  bd38              POP      {r3-r5,pc}
;;;369    
                          ENDP

00006e  0000              DCW      0x0000
                  |L7.112|
                          DCD      0xc2300000
                  |L7.116|
                          DCD      ||.constdata||+0x48
                  |L7.120|
                          DCD      0x0003c267
                  |L7.124|
                          DCD      0xfffeae80

                          AREA ||i.rtc_get_time||, CODE, READONLY, ALIGN=2

                  rtc_get_time PROC
;;;195    
;;;196    static void rtc_get_time(struct rtc_time_s *time)
000000  4a04              LDR      r2,|L8.20|
;;;197    {
;;;198        union rtc_time_u    *time_p;
;;;199        uint32_t first_read, second_read;
;;;200    
;;;201        time_p = (union rtc_time_u *)time;
;;;202    
;;;203        /* Read twice to get a good/same reading */
;;;204        do {
;;;205            first_read = inw(RTC_REG_TIME1);
000002  bf00              NOP      
                  |L8.4|
000004  f8d23200          LDR      r3,[r2,#0x200]
;;;206            second_read = inw(RTC_REG_TIME1);
000008  f8d21200          LDR      r1,[r2,#0x200]
;;;207        } while (first_read != second_read);
00000c  428b              CMP      r3,r1
00000e  d1f9              BNE      |L8.4|
;;;208    
;;;209        time_p->time_raw = second_read;
000010  6001              STR      r1,[r0,#0]
;;;210    }
000012  4770              BX       lr
;;;211    
                          ENDP

                  |L8.20|
                          DCD      0xc2300000

                          AREA ||i.rtc_init||, CODE, READONLY, ALIGN=2

                  rtc_init PROC
;;;377    
;;;378    void rtc_init(struct rtc_time_s *time, struct rtc_date_s *date)
000000  b570              PUSH     {r4-r6,lr}
000002  4c0f              LDR      r4,|L9.64|
;;;379    {
000004  460d              MOV      r5,r1
000006  2100              MOVS     r1,#0
000008  f8c41210          STR      r1,[r4,#0x210]
                  |L9.12|
00000c  f8d41210          LDR      r1,[r4,#0x210]
000010  05c9              LSLS     r1,r1,#23
000012  d4fb              BMI      |L9.12|
;;;380        rtc_disable();
;;;381    
;;;382        if (time == NULL)
000014  b900              CBNZ     r0,|L9.24|
;;;383            rtc_set_time(&init_time);
000016  480b              LDR      r0,|L9.68|
                  |L9.24|
;;;384        else
;;;385            rtc_set_time(time);
000018  f7fffffe          BL       rtc_set_time
;;;386    
;;;387        if (date == NULL)
00001c  b16d              CBZ      r5,|L9.58|
;;;388            rtc_set_date(&init_date);
;;;389        else
;;;390            rtc_set_date(date);
00001e  4628              MOV      r0,r5
                  |L9.32|
000020  f7fffffe          BL       rtc_set_date
000024  f8d40210          LDR      r0,[r4,#0x210]
000028  f0400001          ORR      r0,r0,#1
00002c  f8c40210          STR      r0,[r4,#0x210]
                  |L9.48|
000030  f8d40210          LDR      r0,[r4,#0x210]
000034  05c0              LSLS     r0,r0,#23
000036  d5fb              BPL      |L9.48|
;;;391    
;;;392        rtc_enable();
;;;393    }
000038  bd70              POP      {r4-r6,pc}
                  |L9.58|
00003a  4802              LDR      r0,|L9.68|
00003c  1f00              SUBS     r0,r0,#4              ;388
00003e  e7ef              B        |L9.32|
                          ENDP

                  |L9.64|
                          DCD      0xc2300000
                  |L9.68|
                          DCD      ||.data||+0x4

                          AREA ||i.rtc_periodic_enable||, CODE, READONLY, ALIGN=2

                  rtc_periodic_enable PROC
;;;321    
;;;322    void rtc_periodic_enable(enum periodic_interrupt per_int_type)
000000  4906              LDR      r1,|L10.28|
;;;323    {
;;;324        uint32_t    ctrl;
;;;325    
;;;326        ctrl = per_int_table[per_int_type];
000002  f8111020          LDRB     r1,[r1,r0,LSL #2]
;;;327        masked_outw(RTC_REG_CTRL, ctrl, RTC_CTRL_PERIODIC_SEL);
000006  4806              LDR      r0,|L10.32|
000008  f8d02210          LDR      r2,[r0,#0x210]
00000c  f0010170          AND      r1,r1,#0x70
000010  f0220270          BIC      r2,r2,#0x70
000014  430a              ORRS     r2,r2,r1
000016  f8c02210          STR      r2,[r0,#0x210]
;;;328    }
00001a  4770              BX       lr
;;;329    
                          ENDP

                  |L10.28|
                          DCD      ||.constdata||
                  |L10.32|
                          DCD      0xc2300000

                          AREA ||i.rtc_rectify_date||, CODE, READONLY, ALIGN=1

                  rtc_rectify_date PROC
;;;141    
;;;142    static void rtc_rectify_date(struct rtc_date_s *date)
000000  6801              LDR      r1,[r0,#0]
;;;143    {
;;;144        date->century %= CENTURY_PER_100;
000002  0e0a              LSRS     r2,r1,#24
000004  2164              MOVS     r1,#0x64
000006  fbb2f3f1          UDIV     r3,r2,r1
00000a  fb012213          MLS      r2,r1,r3,r2
00000e  70c2              STRB     r2,[r0,#3]
;;;145        date->year %= YEARS_PER_CENTURY;
000010  6802              LDR      r2,[r0,#0]
000012  f3c24207          UBFX     r2,r2,#16,#8
000016  fbb2f3f1          UDIV     r3,r2,r1
00001a  fb012113          MLS      r1,r1,r3,r2
00001e  7081              STRB     r1,[r0,#2]
;;;146    
;;;147        if (date->month)    // RTC valid month: 1-12
000020  6801              LDR      r1,[r0,#0]
000022  f4114f7f          TST      r1,#0xff00
000026  d002              BEQ      |L11.46|
;;;148            date->month--;
000028  0a09              LSRS     r1,r1,#8
00002a  1e49              SUBS     r1,r1,#1
00002c  7041              STRB     r1,[r0,#1]
                  |L11.46|
;;;149        date->month %= MONTH_PER_YEAR;
00002e  8801              LDRH     r1,[r0,#0]
000030  220c              MOVS     r2,#0xc
000032  f3c12107          UBFX     r1,r1,#8,#8
000036  fbb1f3f2          UDIV     r3,r1,r2
00003a  fb021113          MLS      r1,r2,r3,r1
00003e  7041              STRB     r1,[r0,#1]
;;;150        date->month++;
000040  8801              LDRH     r1,[r0,#0]
000042  0a09              LSRS     r1,r1,#8
000044  1c49              ADDS     r1,r1,#1
000046  7041              STRB     r1,[r0,#1]
;;;151    
;;;152        if (date->date)     // RTC valid date: 1-31
000048  6801              LDR      r1,[r0,#0]
00004a  f0110fff          TST      r1,#0xff
00004e  d001              BEQ      |L11.84|
000050  1e49              SUBS     r1,r1,#1
;;;153            date->date--;
000052  7001              STRB     r1,[r0,#0]
                  |L11.84|
;;;154        date->date %= MAX_DAYS_PER_MONTH;
000054  7801              LDRB     r1,[r0,#0]
000056  221f              MOVS     r2,#0x1f
000058  fbb1f3f2          UDIV     r3,r1,r2
00005c  fb021113          MLS      r1,r2,r3,r1
;;;155        date->date++;
000060  b2c9              UXTB     r1,r1
000062  1c49              ADDS     r1,r1,#1
000064  7001              STRB     r1,[r0,#0]
;;;156    }
000066  4770              BX       lr
;;;157    
                          ENDP


                          AREA ||i.rtc_rectify_time||, CODE, READONLY, ALIGN=1

                  rtc_rectify_time PROC
;;;157    
;;;158    static void rtc_rectify_time(struct rtc_time_s *time)
000000  6801              LDR      r1,[r0,#0]
;;;159    {
;;;160        time->weekday %= DAYS_PER_WEEK;
000002  2207              MOVS     r2,#7
000004  0e09              LSRS     r1,r1,#24
000006  fbb1f3f2          UDIV     r3,r1,r2
00000a  fb021113          MLS      r1,r2,r3,r1
00000e  70c1              STRB     r1,[r0,#3]
;;;161        time->hour %= HOURS_PER_DAY;
000010  6801              LDR      r1,[r0,#0]
000012  2218              MOVS     r2,#0x18
000014  f3c14107          UBFX     r1,r1,#16,#8
000018  fbb1f3f2          UDIV     r3,r1,r2
00001c  fb021113          MLS      r1,r2,r3,r1
000020  7081              STRB     r1,[r0,#2]
;;;162        time->min %= MINS_PER_HOUR;
000022  8801              LDRH     r1,[r0,#0]
000024  f3c12207          UBFX     r2,r1,#8,#8
000028  213c              MOVS     r1,#0x3c
00002a  fbb2f3f1          UDIV     r3,r2,r1
00002e  fb012213          MLS      r2,r1,r3,r2
000032  7042              STRB     r2,[r0,#1]
;;;163        time->sec %= SECS_PER_MIN;
000034  7802              LDRB     r2,[r0,#0]
000036  fbb2f3f1          UDIV     r3,r2,r1
00003a  fb012113          MLS      r1,r1,r3,r2
00003e  7001              STRB     r1,[r0,#0]
;;;164    }
000040  4770              BX       lr
;;;165    
                          ENDP


                          AREA ||i.rtc_set_date||, CODE, READONLY, ALIGN=2

                  rtc_set_date PROC
;;;165    
;;;166    static void rtc_set_date(struct rtc_date_s *date)
000000  b510              PUSH     {r4,lr}
;;;167    {
000002  4604              MOV      r4,r0
;;;168        union rtc_date_u    *date_p;
;;;169        
;;;170        rtc_rectify_date(date);
000004  f7fffffe          BL       rtc_rectify_date
;;;171    
;;;172        date_p = (union rtc_date_u *)date;
;;;173    	outw(RTC_REG_TIME2, date_p->date_raw);
000008  4902              LDR      r1,|L13.20|
00000a  6820              LDR      r0,[r4,#0]
00000c  f8c10204          STR      r0,[r1,#0x204]
;;;174        dbg_msg("rtc_set_date: 0x%8.8x\n", date_p->date_raw);
;;;175    }
000010  bd10              POP      {r4,pc}
;;;176    
                          ENDP

000012  0000              DCW      0x0000
                  |L13.20|
                          DCD      0xc2300000

                          AREA ||i.rtc_set_time||, CODE, READONLY, ALIGN=2

                  rtc_set_time PROC
;;;184    
;;;185    static void rtc_set_time(struct rtc_time_s *time)
000000  b510              PUSH     {r4,lr}
;;;186    {
000002  4604              MOV      r4,r0
;;;187        union rtc_time_u    *time_p;
;;;188    
;;;189        rtc_rectify_time(time);
000004  f7fffffe          BL       rtc_rectify_time
;;;190    
;;;191        time_p = (union rtc_time_u *)time;
;;;192    	outw(RTC_REG_TIME1, time_p->time_raw);
000008  4902              LDR      r1,|L14.20|
00000a  6820              LDR      r0,[r4,#0]
00000c  f8c10200          STR      r0,[r1,#0x200]
;;;193        info_msg("rtc_set_time: 0x%8.8x\n", time_p->time_raw);
;;;194    }
000010  bd10              POP      {r4,pc}
;;;195    
                          ENDP

000012  0000              DCW      0x0000
                  |L14.20|
                          DCD      0xc2300000

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  per_int_table
                          DCD      0x00000030
                          DCD      0x00000040
                          DCD      0x00000050
                          DCD      0x00000060
                          DCD      0x00000070
                  days_of_month
                          DCD      0x00000000
                          DCD      0x0000001f
                          DCD      0x0000001c
                          DCD      0x0000001f
                          DCD      0x0000001e
                          DCD      0x0000001f
                          DCD      0x0000001e
                          DCD      0x0000001f
                          DCD      0x0000001f
                          DCD      0x0000001e
                          DCD      0x0000001f
                          DCD      0x0000001e
                          DCD      0x0000001f
                  days_to_month
                          DCD      0x00000000
                          DCD      0x0000001f
                          DCD      0x0000003b
                          DCD      0x0000005a
                          DCD      0x00000078
                          DCD      0x00000097
                          DCD      0x000000b5
                          DCD      0x000000d4
                          DCD      0x000000f3
                          DCD      0x00000111
                          DCD      0x00000130
                          DCD      0x0000014e
                          DCD      0x0000016d

                          AREA ||.data||, DATA, ALIGN=2

                  init_date
000000  0b071314          DCB      0x0b,0x07,0x13,0x14
                  init_time
000004  000b0704          DCB      0x00,0x0b,0x07,0x04

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\scpu\\drivers\\system\\rtc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_rtc_c_3343cf76____REV16|
#line 208 "F:\\Users\\fu\\AppData\\Local\\Arm\\Packs\\ARM\\CMSIS\\5.9.0\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___5_rtc_c_3343cf76____REV16| PROC
#line 209

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_rtc_c_3343cf76____REVSH|
#line 223
|__asm___5_rtc_c_3343cf76____REVSH| PROC
#line 224

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___5_rtc_c_3343cf76____RRX|
#line 410
|__asm___5_rtc_c_3343cf76____RRX| PROC
#line 411

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
