; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\objects\kdp_comm_and_gui_fdr.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\kdp_comm_and_gui_fdr.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O3 --diag_suppress=9931 -I..\..\config -I..\..\..\..\board -I..\..\..\..\common\include -I..\..\..\..\scpu\device\include\CMSIS -I..\..\..\..\scpu\device\include\Kneron -I..\..\..\..\scpu\framework\include -I..\..\..\..\scpu\framework\include\framework -I..\..\..\..\scpu\drivers\include -I..\..\..\..\scpu\drivers\include\media\touch -I..\..\..\..\scpu\drivers\include\media\flash -I..\..\..\..\scpu\lib\kdp_system\inc -I..\..\..\..\scpu\lib\kdp_application\include\ -I..\..\..\..\scpu\lib\kdp_application\base\ -I..\..\..\..\scpu\lib\kdp_application\misc -I..\..\..\..\scpu\lib\kdp_e2e_r1n1\include -I..\..\..\..\scpu\include -I..\..\..\..\scpu\middleware\ota -I..\..\..\..\scpu\middleware\comm -I..\..\..\..\scpu\middleware\kdp_comm -I..\..\..\..\scpu\share -I..\..\..\..\scpu\share\gui_lib -I..\..\user -I.\RTE\CMSIS -I.\RTE\_Target-scpu -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\RTOS2\Include -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\RTOS2\RTX\Include -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\Device\ARM\ARMCM4\Include -D__RTX -D__MICROLIB -D__UVISION_VERSION=538 -D_RTE_ -DARMCM4_FP -D_RTE_ -DARM_MATH_CM4 -DTARGET_SCPU -DLOG_ENABLE -DKL520 -DHEAD_POSE_CHECK_PERCENT --omf_browse=.\objects\kdp_comm_and_gui_fdr.crf ..\..\..\..\scpu\middleware\kdp_comm\kdp_comm_and_gui_fdr.c]
                          THUMB

                          AREA ||i._handle_face_enroll_correct_direction||, CODE, READONLY, ALIGN=2

                  _handle_face_enroll_correct_direction PROC
;;;2186   
;;;2187   static void _handle_face_enroll_correct_direction(void)
000000  b5f8              PUSH     {r3-r7,lr}
;;;2188   {
;;;2189       u16 ret = 0;
;;;2190       uint8_t thd_flag = 0;
;;;2191   
;;;2192   #if ( CFG_FMAP_EXTRA_ENABLE == YES ) && ( CFG_FMAP_AP_CTRL_TYPE > EX_FM_DISABLE )
;;;2193       kdp_api_db_set_last_register_id_preprocess();
;;;2194   #endif
;;;2195   
;;;2196       ret = uart_face_add_timeout(msg_enroll.admin, (char *) msg_enroll.user_name, msg_enroll.face_direction, msg_enroll.timeout, msg_enroll.cmd_id);
000002  4927              LDR      r1,|L1.160|
000004  2500              MOVS     r5,#0                 ;2190
000006  f8910025          LDRB     r0,[r1,#0x25]  ; msg_enroll
00000a  9000              STR      r0,[sp,#0]
00000c  f8913024          LDRB     r3,[r1,#0x24]  ; msg_enroll
000010  f8912021          LDRB     r2,[r1,#0x21]  ; msg_enroll
000014  f8110b01          LDRB     r0,[r1],#1  ; msg_enroll
000018  f7fffffe          BL       uart_face_add_timeout
;;;2197   
;;;2198       if ((ret & 0xFF) != 0) { //if error happened.
;;;2199           //if (msg_enroll.face_direction == KDP_FACE_DIRECTION_MIDDLE) { thd_flag = 1; }//need exit thread
;;;2200           if(0xFF03 == ret)
;;;2201               thd_flag = 2;
;;;2202           else
;;;2203               thd_flag = 1;
;;;2204       }
;;;2205       else
;;;2206       {
;;;2207           if ( ( ( g_eEnrollAddFaceTypeMode == FACE_ADD_MODE_5_FACES ) && ( g_eFaceDirState == KDP_FACE_DIRECTION_MASK ) ) ||\
;;;2208                ( g_eEnrollAddFaceTypeMode == FACE_ADD_MODE_1_FACE  ) )
;;;2209           { //the last one
;;;2210               dbg_msg_console("face enroll finished.");
;;;2211               thd_flag = 1;
;;;2212           }
;;;2213   #if ( CFG_COM_BUS_TYPE&COM_BUS_UART_MASK )
;;;2214           if ( ( g_tImpExpMassDataPkgInfo.nReadyType == DATA_READY_TYPE_IMP_FM ) ||
;;;2215                     ( g_tImpExpMassDataPkgInfo.nReadyType == DATA_READY_TYPE_IMP_IMG ) )
;;;2216           {
;;;2217               dbg_msg_console("face fm import finished.");
;;;2218               thd_flag = 1;
;;;2219           }
;;;2220   #endif
;;;2221       }
;;;2222   
;;;2223       if( thd_flag == 1) {
;;;2224   #if ( CFG_COM_BUS_TYPE&COM_BUS_UART_MASK )
;;;2225           if ( ( g_tImpExpMassDataPkgInfo.nReadyType == DATA_READY_TYPE_IMP_FM ) ||
;;;2226                     ( g_tImpExpMassDataPkgInfo.nReadyType == DATA_READY_TYPE_IMP_IMG ) )
;;;2227           {
;;;2228               KDP_clr_mass_data_header();
;;;2229           }
;;;2230   #endif
;;;2231   
;;;2232           if (g_eUserComThreadEvent <= USER_COM_THREAD_EVENT_READY)
00001c  4e21              LDR      r6,|L1.164|
00001e  4f22              LDR      r7,|L1.168|
000020  4c22              LDR      r4,|L1.172|
000022  f0100fff          TST      r0,#0xff              ;2198
000026  d004              BEQ      |L1.50|
000028  f5a0417f          SUB      r1,r0,#0xff00         ;2200
00002c  3903              SUBS     r1,#3                 ;2200
00002e  d033              BEQ      |L1.152|
000030  e019              B        |L1.102|
                  |L1.50|
000032  481f              LDR      r0,|L1.176|
000034  7800              LDRB     r0,[r0,#0]            ;2207  ; g_eEnrollAddFaceTypeMode
000036  2802              CMP      r0,#2                 ;2207
000038  d002              BEQ      |L1.64|
00003a  2801              CMP      r0,#1                 ;2208
00003c  d003              BEQ      |L1.70|
00003e  e007              B        |L1.80|
                  |L1.64|
000040  7838              LDRB     r0,[r7,#0]            ;2207  ; g_eFaceDirState
000042  281f              CMP      r0,#0x1f              ;2207
000044  d104              BNE      |L1.80|
                  |L1.70|
000046  a11b              ADR      r1,|L1.180|
000048  2001              MOVS     r0,#1                 ;2210
00004a  f7fffffe          BL       kdp_level_printf
00004e  2501              MOVS     r5,#1                 ;2211
                  |L1.80|
000050  7de0              LDRB     r0,[r4,#0x17]         ;2214  ; g_tImpExpMassDataPkgInfo
000052  2820              CMP      r0,#0x20              ;2214
000054  d003              BEQ      |L1.94|
000056  2830              CMP      r0,#0x30              ;2215
000058  d001              BEQ      |L1.94|
00005a  b95d              CBNZ     r5,|L1.116|
00005c  e01c              B        |L1.152|
                  |L1.94|
00005e  a11b              ADR      r1,|L1.204|
000060  2001              MOVS     r0,#1                 ;2217
000062  f7fffffe          BL       kdp_level_printf
                  |L1.102|
000066  7de0              LDRB     r0,[r4,#0x17]         ;2225  ; g_tImpExpMassDataPkgInfo
000068  2820              CMP      r0,#0x20              ;2225
00006a  d001              BEQ      |L1.112|
00006c  2830              CMP      r0,#0x30              ;2226
00006e  d101              BNE      |L1.116|
                  |L1.112|
000070  f7fffffe          BL       KDP_clr_mass_data_header
                  |L1.116|
000074  7870              LDRB     r0,[r6,#1]  ; g_eUserComThreadEvent
000076  b160              CBZ      r0,|L1.146|
;;;2233           {
;;;2234               // Interrupt
;;;2235               sample_face_close();
;;;2236               kl520_api_cam_disp_state_rst();
;;;2237           }
;;;2238           else
;;;2239           {
;;;2240               #if CFG_FMAP_AP_CTRL_TYPE > EX_FM_DISABLE && CFG_FMAP_AP_CTRL_TYPE < EX_FM_UART_AP_CTRL_MAIN_DB && CFG_FMAP_EXTRA_ENABLE == YES
;;;2241               KL520_api_ap_com_set_extra_fmap_status( USB_CMD_FM_REGISTER_e );
;;;2242               kl520_api_ap_com_set_timeout_and_start( 3 );
;;;2243               while( KL520_api_ap_com_get_extra_fmap_status() != USB_CMD_FM_NULL_e && kl520_api_ap_com_chk_timeout_and_stop() == FALSE ) { osDelay(10); }
;;;2244               KL520_api_ap_com_set_extra_fmap_status( USB_CMD_FM_NULL_e );
;;;2245               {
;;;2246                   u8 db_ret = kdp_api_ap_com_wait_host_db_result();
;;;2247                   if ( 0xFF != db_ret ) {
;;;2248                       ret = KL520_FACE_OK + ((db_ret&0xFF)<<8);
;;;2249                   }
;;;2250                   else
;;;2251                   {
;;;2252                       ret = 0xFF02;
;;;2253                   }
;;;2254               }
;;;2255               #endif //CFG_FMAP_AP_CTRL_TYPE == EX_FM_USB_AP_CTRL_ALL && CFG_FMAP_AP_CTRL_TYPE > EX_FM_DISABLE && CFG_FMAP_EXTRA_ENABLE == YES
;;;2256   
;;;2257   #if ( CFG_FMAP_EXTRA_ENABLE == YES ) && ( CFG_FMAP_AP_CTRL_TYPE > EX_FM_DISABLE )
;;;2258               kdp_api_db_set_last_register_id_postprocess();
;;;2259   
;;;2260               if ( (ret&0xFF) == 0 )
;;;2261               {
;;;2262                   g_tImpExpMassDataPkgInfo.nReadyType = DATA_READY_TYPE_EXP_DB;
;;;2263               }
;;;2264   #endif
;;;2265   
;;;2266               //==================================================================================================================================
;;;2267               //to-do: At all uart control module, only show wait system feedback instead of successed or failed case, and not colse display.
;;;2268               //==================================================================================================================================
;;;2269               sample_face_close();
000078  f7fffffe          BL       sample_face_close
;;;2270               kl520_api_cam_disp_close_perm_state_chk();
00007c  f7fffffe          BL       kl520_api_cam_disp_close_perm_state_chk
;;;2271               kl520_api_disp_open_chk();
000080  f7fffffe          BL       kl520_api_disp_open_chk
                  |L1.132|
;;;2272   
;;;2273   #if (CFG_PANEL_TYPE > PANEL_NULL)
;;;2274   #if ( CFG_GUI_ENABLE == YES )
;;;2275               gui_page_set_present_index((u8)PAGE_IDX_0);
;;;2276               gui_obj_sele_draw_two_img("reS", "reF", (ret&0xFF));
;;;2277               user_gui_update_renderer();
;;;2278   #else
;;;2279               kl520_api_dp_draw_two_img(USR_DDR_IMG_REGISTER_SUCCESSED_ADDR, USR_DDR_IMG_REGISTER_FAILED_ADDR, (ret&0xFF));
;;;2280   #endif
;;;2281   #endif
;;;2282               kl520_api_cam_disp_state_rst();
000084  f7fffffe          BL       kl520_api_cam_disp_state_rst
;;;2283           }
;;;2284   
;;;2285   //                face_enroll_status = 0; //clear it
;;;2286           g_eFaceDirState = 0;
;;;2287           g_nFaceId = 0;
000088  4917              LDR      r1,|L1.232|
00008a  2000              MOVS     r0,#0                 ;2286
00008c  7038              STRB     r0,[r7,#0]            ;2286
00008e  8008              STRH     r0,[r1,#0]
;;;2288       }
;;;2289       else{
;;;2290           user_com_thread_event_set(USER_COM_THREAD_EVENT_READY);
;;;2291           dbg_msg_com("tien-edit next_wait_fdfr");
;;;2292       }
;;;2293   }
000090  bdf8              POP      {r3-r7,pc}
                  |L1.146|
000092  f7fffffe          BL       sample_face_close
000096  e7f5              B        |L1.132|
                  |L1.152|
000098  2000              MOVS     r0,#0                 ;2290
00009a  7070              STRB     r0,[r6,#1]            ;2290
00009c  bdf8              POP      {r3-r7,pc}
;;;2294   
                          ENDP

00009e  0000              DCW      0x0000
                  |L1.160|
                          DCD      ||.bss||
                  |L1.164|
                          DCD      ||.data||
                  |L1.168|
                          DCD      g_eFaceDirState
                  |L1.172|
                          DCD      g_tImpExpMassDataPkgInfo
                  |L1.176|
                          DCD      g_eEnrollAddFaceTypeMode
                  |L1.180|
0000b4  66616365          DCB      "face enroll finished.\r\n",0
0000b8  20656e72
0000bc  6f6c6c20
0000c0  66696e69
0000c4  73686564
0000c8  2e0d0a00
                  |L1.204|
0000cc  66616365          DCB      "face fm import finished.\r\n",0
0000d0  20666d20
0000d4  696d706f
0000d8  72742066
0000dc  696e6973
0000e0  6865642e
0000e4  0d0a00  
0000e7  00                DCB      0
                  |L1.232|
                          DCD      g_nFaceId

                          AREA ||i._handle_user_com_event_delete_user||, CODE, READONLY, ALIGN=2

                  _handle_user_com_event_delete_user PROC
;;;2125   #ifdef KID_DEL_USER
;;;2126   static void _handle_user_com_event_delete_user(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;2127   {
;;;2128       u16 ret = 0;
;;;2129       {
;;;2130   #if ( CFG_FMAP_EXTRA_ENABLE == YES ) && ( CFG_FMAP_AP_CTRL_TYPE > EX_FM_DISABLE ) && (CFG_FMAP_AP_CTRL_TYPE == EX_FM_USB_AP_CTRL_ALL )
;;;2131           kdp_api_ap_com_set_user_id( _user_com_data );
;;;2132           KL520_api_ap_com_set_extra_fmap_status( USB_CMD_FM_DEL_USER_e );
;;;2133           while( KL520_api_ap_com_get_extra_fmap_status() != USB_CMD_FM_NULL_e ){ osDelay(10); }
;;;2134           ret = kdp_api_ap_com_wait_host_cmd_result();
;;;2135   #else
;;;2136           if (_user_com_data < 0x0100)
000004  4c1b              LDR      r4,|L2.116|
000006  88a0              LDRH     r0,[r4,#4]  ; _user_com_data
000008  28ff              CMP      r0,#0xff
;;;2137           {
;;;2138               if (kdp_app_db_check_user_id(_user_com_data))
;;;2139                   ret = uart_sample_face_del_user(_user_com_data);
;;;2140               else
;;;2141                   ret = MR_FAILED_INVALID_PARAM;
;;;2142           }
;;;2143           else
;;;2144           {
;;;2145               u8 id0 = _user_com_data & 0xff;
00000a  88a0              LDRH     r0,[r4,#4]  ; _user_com_data
00000c  d80a              BHI      |L2.36|
00000e  f7fffffe          BL       kdp_app_db_check_user_id
000012  b128              CBZ      r0,|L2.32|
000014  88a0              LDRH     r0,[r4,#4]            ;2139  ; _user_com_data
000016  b2c0              UXTB     r0,r0                 ;2139
000018  f7fffffe          BL       uart_sample_face_del_user
00001c  4605              MOV      r5,r0                 ;2139
00001e  e019              B        |L2.84|
                  |L2.32|
000020  2506              MOVS     r5,#6                 ;2141
000022  e01a              B        |L2.90|
                  |L2.36|
000024  b2c7              UXTB     r7,r0
;;;2146               u8 id1 = (_user_com_data >> 8) & 0xff;
000026  88a0              LDRH     r0,[r4,#4]  ; _user_com_data
;;;2147               
;;;2148               dbg_msg_console("del some users [%d:%d]", id0, id1);
000028  463a              MOV      r2,r7
00002a  0a06              LSRS     r6,r0,#8              ;2146
00002c  4633              MOV      r3,r6
00002e  a112              ADR      r1,|L2.120|
000030  2001              MOVS     r0,#1
000032  f7fffffe          BL       kdp_level_printf
;;;2149               ret = _uart_face_del_some_users(id0, id1);
000036  4631              MOV      r1,r6
000038  4638              MOV      r0,r7
00003a  f7fffffe          BL       _uart_face_del_some_users
00003e  4605              MOV      r5,r0
;;;2150               
;;;2151   #ifdef CUSTOMIZE_DB_OFFSET
;;;2152               if (((148 == id0) && (128 == id1)) ||
000040  2f94              CMP      r7,#0x94
000042  d101              BNE      |L2.72|
000044  2e80              CMP      r6,#0x80
000046  d003              BEQ      |L2.80|
                  |L2.72|
;;;2153                   ((148 == id1) && (128 == id0)))
000048  2e94              CMP      r6,#0x94
00004a  d103              BNE      |L2.84|
00004c  2f80              CMP      r7,#0x80
00004e  d101              BNE      |L2.84|
                  |L2.80|
;;;2154                   reset_user_db_offset();
000050  f7fffffe          BL       reset_user_db_offset
                  |L2.84|
;;;2155   #endif
;;;2156           }
;;;2157           
;;;2158           if (1 == ret)
000054  2d01              CMP      r5,#1
000056  d100              BNE      |L2.90|
;;;2159               ret = MR_FAILED_UNKNOWN_USER;
000058  2508              MOVS     r5,#8
                  |L2.90|
;;;2160           
;;;2161   #endif //CFG_FMAP_AP_CTRL_TYPE == EX_FM_USB_AP_CTRL_ALL && CFG_FMAP_AP_CTRL_TYPE > EX_FM_DISABLE && CFG_FMAP_EXTRA_ENABLE == YES
;;;2162   
;;;2163           kl520_api_cam_disp_close_perm_state_chk();
00005a  f7fffffe          BL       kl520_api_cam_disp_close_perm_state_chk
;;;2164           kl520_api_disp_open_chk();
00005e  f7fffffe          BL       kl520_api_disp_open_chk
;;;2165   
;;;2166   #if (CFG_PANEL_TYPE > PANEL_NULL)
;;;2167   #if ( CFG_GUI_ENABLE == YES )
;;;2168           gui_page_set_present_index((u8)PAGE_IDX_0);
;;;2169           gui_obj_sele_draw_two_img("deS", "deF", (ret&0xFF));
;;;2170           if (GUI_FSM_SRC_TOUCH == user_com_src)
;;;2171           {
;;;2172               gui_page_set_present_index((u8)PAGE_IDX_3);
;;;2173               user_gui_face_query_all_users();
;;;2174           }
;;;2175           user_gui_update_renderer();
;;;2176   #else
;;;2177           kl520_api_dp_draw_two_img(USR_DDR_IMG_DELETE_SUCCESSED_ADDR, USR_DDR_IMG_DELETE_FAILED_ADDR, (ret&0xFF));
;;;2178   #endif
;;;2179   #endif
;;;2180           kl520_api_cam_disp_state_rst();
000062  f7fffffe          BL       kl520_api_cam_disp_state_rst
;;;2181   
;;;2182           response_delete_one_msg(ret, _user_com_data);
000066  88a1              LDRH     r1,[r4,#4]  ; _user_com_data
000068  b2e8              UXTB     r0,r5
00006a  e8bd41f0          POP      {r4-r8,lr}
00006e  f7ffbffe          B.W      response_delete_one_msg
;;;2183       }
;;;2184   }
;;;2185   #endif
                          ENDP

000072  0000              DCW      0x0000
                  |L2.116|
                          DCD      ||.data||
                  |L2.120|
000078  64656c20          DCB      "del some users [%d:%d]\r\n",0
00007c  736f6d65
000080  20757365
000084  7273205b
000088  25643a25
00008c  645d0d0a
000090  00      
000091  00                DCB      0
000092  00                DCB      0
000093  00                DCB      0

                          AREA ||i._handle_user_com_event_face_enroll||, CODE, READONLY, ALIGN=2

                  _handle_user_com_event_face_enroll PROC
;;;2294   
;;;2295   static void _handle_user_com_event_face_enroll(void)
000000  b5f8              PUSH     {r3-r7,lr}
;;;2296   {
;;;2297   #if ( CFG_GUI_ENABLE == YES )
;;;2298       if (GUI_FSM_SRC_TOUCH == user_com_src)
;;;2299       {
;;;2300           kl520_api_hmi_ctrl_state_set(CTRL_GUI);
;;;2301   
;;;2302           u16 ret = uart_sample_face_add_timeout(_user_com_data);
;;;2303           notify_user_behavior_event(GUI_REGISTER_RET, ret, _user_com_data2);
;;;2304           return;
;;;2305       }
;;;2306   #endif
;;;2307       {
;;;2308           int check_enroll_flag = check_face_enroll_seq(g_eFaceDirState, msg_enroll.face_direction);
000002  4f14              LDR      r7,|L3.84|
000004  f8971021          LDRB     r1,[r7,#0x21]  ; msg_enroll
000008  4c13              LDR      r4,|L3.88|
00000a  7820              LDRB     r0,[r4,#0]  ; g_eFaceDirState
00000c  f7fffffe          BL       check_face_enroll_seq
000010  4606              MOV      r6,r0
;;;2309   
;;;2310           dbg_msg_com("g_eFaceDirState=0x%x, msg_enroll.face_direction=0x%x", g_eFaceDirState,  msg_enroll.face_direction);
;;;2311           dbg_msg_com("check_enroll_flag=%d", check_enroll_flag);
;;;2312   
;;;2313           kl520_api_hmi_ctrl_state_set(CTRL_CMD);
000012  2001              MOVS     r0,#1
000014  f7fffffe          BL       kl520_api_hmi_ctrl_state_set
;;;2314   
;;;2315           if ( check_enroll_flag == KDP_CHK_FACE_DIR_NORMAL )//(msg_enroll.user_name[0] != NULL) &&
000018  b19e              CBZ      r6,|L3.66|
;;;2316           {
;;;2317               _handle_face_enroll_correct_direction();
;;;2318           }
;;;2319           else if(check_enroll_flag == KDP_CHK_FACE_DIR_EXISTED){
;;;2320               send_enroll_reply_msg(MR_SUCCESS, ((g_nFaceId >> 8) &0xFF),  ((g_nFaceId >> 0) &0xFF) , g_eFaceDirState, msg_enroll.cmd_id);
00001a  4d10              LDR      r5,|L3.92|
;;;2321               //user_com_thread_event_set(USER_COM_THREAD_EVENT_READY);
;;;2322           }
;;;2323           else{
;;;2324               send_enroll_reply_msg(MR_FAILED_INVALID_PARAM, ((g_nFaceId >> 8) &0xFF),  ((g_nFaceId >> 0) &0xFF) , g_eFaceDirState, msg_enroll.cmd_id);
00001c  f8970025          LDRB     r0,[r7,#0x25]  ; msg_enroll
000020  2e02              CMP      r6,#2                 ;2319
000022  9000              STR      r0,[sp,#0]
000024  8828              LDRH     r0,[r5,#0]  ; g_nFaceId
000026  7823              LDRB     r3,[r4,#0]  ; g_eFaceDirState
000028  b2c2              UXTB     r2,r0
00002a  ea4f2110          LSR      r1,r0,#8
00002e  d00c              BEQ      |L3.74|
000030  2006              MOVS     r0,#6
000032  f7fffffe          BL       send_enroll_reply_msg
;;;2325                   sample_face_close();
000036  f7fffffe          BL       sample_face_close
;;;2326                   g_eFaceDirState = 0;
00003a  2000              MOVS     r0,#0
00003c  7020              STRB     r0,[r4,#0]
;;;2327                   g_nFaceId = 0;
00003e  8028              STRH     r0,[r5,#0]
;;;2328               //user_com_thread_event_set(USER_COM_THREAD_EVENT_READY);
;;;2329           }
;;;2330       }
;;;2331   }
000040  bdf8              POP      {r3-r7,pc}
                  |L3.66|
000042  e8bd40f8          POP      {r3-r7,lr}            ;2317
000046  f7ffbffe          B.W      _handle_face_enroll_correct_direction
                  |L3.74|
00004a  2000              MOVS     r0,#0                 ;2320
00004c  f7fffffe          BL       send_enroll_reply_msg
000050  bdf8              POP      {r3-r7,pc}
;;;2332   
                          ENDP

000052  0000              DCW      0x0000
                  |L3.84|
                          DCD      ||.bss||
                  |L3.88|
                          DCD      g_eFaceDirState
                  |L3.92|
                          DCD      g_nFaceId

                          AREA ||i._handle_user_com_event_ota_process||, CODE, READONLY, ALIGN=2

                  _handle_user_com_event_ota_process PROC
;;;2401   
;;;2402   static void _handle_user_com_event_ota_process(void)
000000  b570              PUSH     {r4-r6,lr}
;;;2403   {
;;;2404       // all data receive done and start ota process
;;;2405       static  uint8_t  flag_first_ota = 0;
;;;2406       if(!flag_first_ota)
000002  4c17              LDR      r4,|L4.96|
000004  78a0              LDRB     r0,[r4,#2]  ; flag_first_ota
000006  2800              CMP      r0,#0                 ;2403
000008  d129              BNE      |L4.94|
;;;2407       {
;;;2408           flag_first_ota = 1;
00000a  2001              MOVS     r0,#1
00000c  70a0              STRB     r0,[r4,#2]
;;;2409           uint8_t run_ota = OtaProcess_run( 0 );
00000e  2000              MOVS     r0,#0
000010  f7fffffe          BL       OtaProcess_run
000014  4605              MOV      r5,r0
;;;2410           dbg_msg_console("### run_ota:%x ###", run_ota);
000016  4602              MOV      r2,r0
000018  a112              ADR      r1,|L4.100|
00001a  2001              MOVS     r0,#1
00001c  f7fffffe          BL       kdp_level_printf
000020  2600              MOVS     r6,#0
;;;2411           if( run_ota < 2 )
000022  2d02              CMP      r5,#2
000024  d210              BCS      |L4.72|
;;;2412           {
;;;2413               send_OtaDone_Note_msg( run_ota );
000026  4628              MOV      r0,r5
000028  f7fffffe          BL       send_OtaDone_Note_msg
;;;2414               dbg_msg_console("### send_OtaDone_Note_msg ###");
00002c  a113              ADR      r1,|L4.124|
00002e  2001              MOVS     r0,#1
000030  f7fffffe          BL       kdp_level_printf
;;;2415               osDelay(5);
000034  2005              MOVS     r0,#5
000036  f7fffffe          BL       osDelay
;;;2416               DSM_Uart_StopOta();
00003a  f7fffffe          BL       DSM_Uart_StopOta
;;;2417   
;;;2418               g_nAutoPowerOffCnt = 0;
00003e  4817              LDR      r0,|L4.156|
;;;2419               g_bAutoPowerOff = FALSE;
000040  6006              STR      r6,[r0,#0]  ; g_nAutoPowerOffCnt
000042  4817              LDR      r0,|L4.160|
000044  7006              STRB     r6,[r0,#0]
000046  e005              B        |L4.84|
                  |L4.72|
;;;2420           } else {
;;;2421               dbg_msg_console("### ota idle ###");
000048  a116              ADR      r1,|L4.164|
00004a  2001              MOVS     r0,#1
00004c  f7fffffe          BL       kdp_level_printf
;;;2422               DSM_Uart_StopOta();
000050  f7fffffe          BL       DSM_Uart_StopOta
                  |L4.84|
;;;2423           }
;;;2424   
;;;2425           flag_first_ota = 0;//reuse ota
000054  70a6              STRB     r6,[r4,#2]
;;;2426   
;;;2427           power_mgr_sw_reset();
000056  e8bd4070          POP      {r4-r6,lr}
00005a  f7ffbffe          B.W      power_mgr_sw_reset
                  |L4.94|
;;;2428       }
;;;2429   }
00005e  bd70              POP      {r4-r6,pc}
;;;2430   #endif
                          ENDP

                  |L4.96|
                          DCD      ||.data||
                  |L4.100|
000064  23232320          DCB      "### run_ota:%x ###\r\n",0
000068  72756e5f
00006c  6f74613a
000070  25782023
000074  23230d0a
000078  00      
000079  00                DCB      0
00007a  00                DCB      0
00007b  00                DCB      0
                  |L4.124|
00007c  23232320          DCB      "### send_OtaDone_Note_msg ###\r\n",0
000080  73656e64
000084  5f4f7461
000088  446f6e65
00008c  5f4e6f74
000090  655f6d73
000094  67202323
000098  230d0a00
                  |L4.156|
                          DCD      g_nAutoPowerOffCnt
                  |L4.160|
                          DCD      g_bAutoPowerOff
                  |L4.164|
0000a4  23232320          DCB      "### ota idle ###\r\n",0
0000a8  6f746120
0000ac  69646c65
0000b0  20232323
0000b4  0d0a00  
0000b7  00                DCB      0

                          AREA ||i._user_com_fdfr_thread||, CODE, READONLY, ALIGN=2

                  _user_com_fdfr_thread PROC
;;;2431   
;;;2432   static void _user_com_fdfr_thread(void)
000000  4c29              LDR      r4,|L5.168|
;;;2433   {
;;;2434       u32 flags;
;;;2435       while(1) {
;;;2436           flags = wait_event(user_com_event_id, USER_COM_FLAG_ALL);
000002  f24075df          MOV      r5,#0x7df
                  |L5.6|
000006  4629              MOV      r1,r5
000008  68a0              LDR      r0,[r4,#8]  ; user_com_event_id
00000a  f7fffffe          BL       wait_event
;;;2437   
;;;2438           if ( USER_COM_FLAG_DELETE_ALL == (flags & USER_COM_FLAG_DELETE_ALL) )
00000e  0741              LSLS     r1,r0,#29
000010  d512              BPL      |L5.56|
000012  f7fffffe          BL       uart_sample_face_del_all
000016  f7fffffe          BL       reset_user_db_offset
00001a  a124              ADR      r1,|L5.172|
00001c  2001              MOVS     r0,#1
00001e  f7fffffe          BL       kdp_level_printf
000022  f7fffffe          BL       kl520_api_cam_disp_close_perm_state_chk
000026  f7fffffe          BL       kl520_api_disp_open_chk
00002a  f7fffffe          BL       kl520_api_cam_disp_state_rst
00002e  2000              MOVS     r0,#0
000030  2121              MOVS     r1,#0x21
000032  f7fffffe          BL       response_delete_msg
;;;2439           {
;;;2440   #ifdef KID_DEL_ALL
;;;2441               _handle_user_com_event_delete_all();
000036  e02b              B        |L5.144|
                  |L5.56|
;;;2442   #endif
;;;2443           }
;;;2444   #ifdef KID_DEL_USER
;;;2445           else if ( USER_COM_FLAG_DELETE_ONE == (flags & USER_COM_FLAG_DELETE_ONE) ) 
000038  0701              LSLS     r1,r0,#28
00003a  d502              BPL      |L5.66|
;;;2446           {
;;;2447               _handle_user_com_event_delete_user();
00003c  f7fffffe          BL       _handle_user_com_event_delete_user
000040  e026              B        |L5.144|
                  |L5.66|
;;;2448           }
;;;2449   #endif
;;;2450   #if ( CFG_COM_BUS_TYPE&COM_BUS_UART_MASK )
;;;2451           else if ( USER_COM_FLAG_REGISTRATION == (flags & USER_COM_FLAG_REGISTRATION) ) 
000042  07c1              LSLS     r1,r0,#31
000044  d002              BEQ      |L5.76|
;;;2452           {
;;;2453               _handle_user_com_event_face_enroll();
000046  f7fffffe          BL       _handle_user_com_event_face_enroll
00004a  e021              B        |L5.144|
                  |L5.76|
;;;2454           }
;;;2455   #if defined KID_SNAP_IMAGE || defined KID_KN_SNAP_IMAGE
;;;2456           else if ( USER_COM_FLAG_SNAP_IMG == (flags & USER_COM_FLAG_SNAP_IMG) )
00004c  0641              LSLS     r1,r0,#25
00004e  d504              BPL      |L5.90|
000050  f7fffffe          BL       uart_face_snap_image
000054  f7fffffe          BL       send_snapImage_reply_msg
;;;2457           {
;;;2458               _handle_user_com_event_snap_img();
000058  e01a              B        |L5.144|
                  |L5.90|
;;;2459           }
;;;2460   #endif        
;;;2461           else if ( USER_COM_FLAG_RECOGNITION == (flags & USER_COM_FLAG_RECOGNITION) )
00005a  0781              LSLS     r1,r0,#30
00005c  d514              BPL      |L5.136|
00005e  2001              MOVS     r0,#1
000060  f7fffffe          BL       kl520_api_hmi_ctrl_state_set
000064  88a0              LDRH     r0,[r4,#4]  ; _user_com_data
000066  f01001ff          ANDS     r1,r0,#0xff
00006a  d100              BNE      |L5.110|
00006c  2105              MOVS     r1,#5
                  |L5.110|
00006e  2000              MOVS     r0,#0
000070  f7fffffe          BL       uart_face_recognition_timeout
000074  f7fffffe          BL       kl520_api_cam_disp_close_perm_state_chk
000078  f7fffffe          BL       kl520_api_disp_open_chk
00007c  f7fffffe          BL       kl520_api_cam_disp_state_rst
000080  4913              LDR      r1,|L5.208|
000082  2000              MOVS     r0,#0
000084  7008              STRB     r0,[r1,#0]
;;;2462           {
;;;2463               _handle_user_com_event_face_recog();
000086  e003              B        |L5.144|
                  |L5.136|
;;;2464           }
;;;2465       
;;;2466           else if ( USER_COM_FLAG_OTA_PROCESS == (flags & USER_COM_FLAG_OTA_PROCESS) )
000088  0580              LSLS     r0,r0,#22
00008a  d501              BPL      |L5.144|
;;;2467           {
;;;2468               _handle_user_com_event_ota_process();
00008c  f7fffffe          BL       _handle_user_com_event_ota_process
                  |L5.144|
;;;2469           }
;;;2470   #endif
;;;2471   
;;;2472           user_com_thread_event_set(USER_COM_THREAD_EVENT_READY);
000090  2000              MOVS     r0,#0
000092  7060              STRB     r0,[r4,#1]
;;;2473           if(kl520_is_fdfr_abort() != 0) { //abort is ongoing
000094  f7fffffe          BL       kl520_is_fdfr_abort
000098  2800              CMP      r0,#0
00009a  d0b4              BEQ      |L5.6|
;;;2474               osEventFlagsSet(user_com_fdfr_evt, USER_COM_EVENT_CMD_READY);
00009c  2101              MOVS     r1,#1
00009e  68e0              LDR      r0,[r4,#0xc]  ; user_com_fdfr_evt
0000a0  f7fffffe          BL       osEventFlagsSet
0000a4  e7af              B        |L5.6|
;;;2475           }
;;;2476       }
;;;2477   //    dbg_msg_console("tid_user_com_fdfr_thread thread exiting....");
;;;2478   //    tid_user_com_fdfr_thread = NULL;
;;;2479   //    osThreadExit();
;;;2480   }
;;;2481   
                          ENDP

0000a6  0000              DCW      0x0000
                  |L5.168|
                          DCD      ||.data||
                  |L5.172|
0000ac  20756172          DCB      " uart_sample_face_del_all over\r\n",0
0000b0  745f7361
0000b4  6d706c65
0000b8  5f666163
0000bc  655f6465
0000c0  6c5f616c
0000c4  6c206f76
0000c8  65720d0a
0000cc  00      
0000cd  00                DCB      0
0000ce  00                DCB      0
0000cf  00                DCB      0
                  |L5.208|
                          DCD      g_bRecognitionMandatoryFlag

                          AREA ||i.check_face_enroll_seq||, CODE, READONLY, ALIGN=2

                  check_face_enroll_seq PROC
;;;1927   
;;;1928   static int check_face_enroll_seq(uint8_t _face_enroll_status, u8 _face_direction)
000000  b510              PUSH     {r4,lr}
;;;1929   {
000002  b109              CBZ      r1,|L6.8|
;;;1930       if(_face_direction == KDP_FACE_DIRECTION_UNDEFINE || (_face_direction > KDP_FACE_DIRECTION_MASK))
000004  291f              CMP      r1,#0x1f
000006  d901              BLS      |L6.12|
                  |L6.8|
;;;1931       {
;;;1932           return KDP_CHK_FACE_DIR_ERROR;
000008  2001              MOVS     r0,#1
;;;1933       }
;;;1934       
;;;1935       if(MAX_FID == 1 && _face_direction != KDP_FACE_DIRECTION_MIDDLE) {
;;;1936           return KDP_CHK_FACE_DIR_ERROR;
;;;1937       }
;;;1938   
;;;1939       if(_face_direction & KDP_FACE_DIRECTION_UDLR)
;;;1940       { //left right up or down any one
;;;1941           if((_face_enroll_status & 0x01) == 0)
;;;1942           { //middle is not finished yet
;;;1943               dbg_msg_console("middle face must be enrolled first, 0x%x", _face_direction);
;;;1944               return KDP_CHK_FACE_DIR_ERROR; //
;;;1945           }
;;;1946       }
;;;1947   
;;;1948       if ( ( _face_direction & _face_enroll_status) ==_face_direction )
;;;1949       {
;;;1950           dbg_msg_console("face already enrolled. 0x%x", _face_direction);
;;;1951           return KDP_CHK_FACE_DIR_EXISTED;
;;;1952       }
;;;1953   
;;;1954       return KDP_CHK_FACE_DIR_NORMAL;
;;;1955   }
00000a  bd10              POP      {r4,pc}
                  |L6.12|
00000c  f0110f1e          TST      r1,#0x1e              ;1939
000010  d001              BEQ      |L6.22|
000012  07c2              LSLS     r2,r0,#31             ;1941
000014  d004              BEQ      |L6.32|
                  |L6.22|
000016  ea310000          BICS     r0,r1,r0              ;1948
00001a  d007              BEQ      |L6.44|
00001c  2000              MOVS     r0,#0                 ;1954
00001e  bd10              POP      {r4,pc}
                  |L6.32|
000020  460a              MOV      r2,r1                 ;1943
000022  a106              ADR      r1,|L6.60|
000024  2001              MOVS     r0,#1                 ;1943
000026  f7fffffe          BL       kdp_level_printf
00002a  e7ed              B        |L6.8|
                  |L6.44|
00002c  460a              MOV      r2,r1                 ;1950
00002e  a10e              ADR      r1,|L6.104|
000030  2001              MOVS     r0,#1                 ;1950
000032  f7fffffe          BL       kdp_level_printf
000036  2002              MOVS     r0,#2                 ;1951
000038  bd10              POP      {r4,pc}
;;;1956   
                          ENDP

00003a  0000              DCW      0x0000
                  |L6.60|
00003c  6d696464          DCB      "middle face must be enrolled first, 0x%x\r\n",0
000040  6c652066
000044  61636520
000048  6d757374
00004c  20626520
000050  656e726f
000054  6c6c6564
000058  20666972
00005c  73742c20
000060  30782578
000064  0d0a00  
000067  00                DCB      0
                  |L6.104|
000068  66616365          DCB      "face already enrolled. 0x%x\r\n",0
00006c  20616c72
000070  65616479
000074  20656e72
000078  6f6c6c65
00007c  642e2030
000080  7825780d
000084  0a00    
000086  00                DCB      0
000087  00                DCB      0

                          AREA ||i.get_user_com_event_id||, CODE, READONLY, ALIGN=2

                  get_user_com_event_id PROC
;;;56     
;;;57     osEventFlagsId_t get_user_com_event_id(void)
000000  4801              LDR      r0,|L7.8|
;;;58     {
;;;59         return user_com_fdfr_evt;
000002  68c0              LDR      r0,[r0,#0xc]  ; user_com_fdfr_evt
;;;60     }
000004  4770              BX       lr
;;;61     
                          ENDP

000006  0000              DCW      0x0000
                  |L7.8|
                          DCD      ||.data||

                          AREA ||i.handle_db_export||, CODE, READONLY, ALIGN=2

                  handle_db_export PROC
;;;870    //KID_DB_EXPORT_REQUEST
;;;871    static void handle_db_export(u8* pDataStart)
000000  b5f0              PUSH     {r4-r7,lr}
;;;872    {
000002  4604              MOV      r4,r0
000004  b08d              SUB      sp,sp,#0x34
;;;873        dbg_msg_console("[%s]", "KID_DB_EXPORT_REQUEST");
000006  a222              ADR      r2,|L8.144|
000008  4927              LDR      r1,|L8.168|
00000a  2001              MOVS     r0,#1
00000c  f7fffffe          BL       kdp_level_printf
;;;874    
;;;875        u16 user_id = (pDataStart[0] << 8) | pDataStart[1];
000010  8820              LDRH     r0,[r4,#0]
000012  ba46              REV16    r6,r0
;;;876    
;;;877        u16 u_idx = kdp_app_db_find_exist_id(user_id);
000014  4630              MOV      r0,r6
000016  f7fffffe          BL       kdp_app_db_find_exist_id
;;;878        if(u_idx == MAX_USER)
00001a  2864              CMP      r0,#0x64
00001c  d02e              BEQ      |L8.124|
;;;879        {
;;;880            send_db_export_reply_msg(MR_FAILED_INVALID_PARAM, 0, 0, 0);
;;;881        }
;;;882        else
;;;883        {
;;;884            uint32_t db_addr = kdp_app_db_get_all_info_user_addr(u_idx);
00001e  f7fffffe          BL       kdp_app_db_get_all_info_user_addr
000022  4604              MOV      r4,r0
;;;885            uint32_t total_size = kdp_app_db_get_all_info_user_size();
000024  f7fffffe          BL       kdp_app_db_get_all_info_user_size
000028  4920              LDR      r1,|L8.172|
00002a  4605              MOV      r5,r0
;;;886            update_db_export_info(db_addr, total_size);
;;;887            dbg_msg_console("user_id:%d, total_size:%d", user_id, total_size);
00002c  462b              MOV      r3,r5
00002e  e9c14000          STRD     r4,r0,[r1,#0]
000032  4632              MOV      r2,r6
000034  a11e              ADR      r1,|L8.176|
000036  2001              MOVS     r0,#1
000038  f7fffffe          BL       kdp_level_printf
;;;888    
;;;889            u8 md5_crc[32], md5[16];
;;;890            md5_main((unsigned char*)db_addr, md5, total_size);
00003c  462a              MOV      r2,r5
00003e  a908              ADD      r1,sp,#0x20
000040  4620              MOV      r0,r4
000042  f7fffffe          BL       md5_main
;;;891            md5_covers(md5 ,md5_crc);
000046  4669              MOV      r1,sp
000048  a808              ADD      r0,sp,#0x20
00004a  f7fffffe          BL       md5_covers
;;;892            dbg_msg_nocrlf("md5: ");
00004e  a01f              ADR      r0,|L8.204|
000050  f7fffffe          BL       kdp_printf_nocrlf
;;;893            for (size_t i = 0; i < sizeof(md5_crc); i++)
000054  2400              MOVS     r4,#0
000056  466f              MOV      r7,sp                 ;889
                  |L8.88|
;;;894            {
;;;895                dbg_msg_nocrlf("%c", md5_crc[i]);
000058  a01e              ADR      r0,|L8.212|
00005a  5d39              LDRB     r1,[r7,r4]
00005c  f7fffffe          BL       kdp_printf_nocrlf
000060  1c64              ADDS     r4,r4,#1
000062  2c20              CMP      r4,#0x20              ;893
000064  d3f8              BCC      |L8.88|
;;;896            }
;;;897            dbg_msg_nocrlf("\n");
000066  a01c              ADR      r0,|L8.216|
000068  f7fffffe          BL       kdp_printf_nocrlf
;;;898    
;;;899            send_db_export_reply_msg(MR_SUCCESS, user_id, total_size, md5_crc);
00006c  466b              MOV      r3,sp
00006e  462a              MOV      r2,r5
000070  4631              MOV      r1,r6
000072  2000              MOVS     r0,#0
000074  f7fffffe          BL       send_db_export_reply_msg
;;;900        }
;;;901        
;;;902        return;
;;;903    }
000078  b00d              ADD      sp,sp,#0x34
00007a  bdf0              POP      {r4-r7,pc}
                  |L8.124|
00007c  b00d              ADD      sp,sp,#0x34           ;880
00007e  2300              MOVS     r3,#0                 ;880
000080  e8bd40f0          POP      {r4-r7,lr}            ;880
000084  461a              MOV      r2,r3                 ;880
000086  4619              MOV      r1,r3                 ;880
000088  2006              MOVS     r0,#6                 ;880
00008a  f7ffbffe          B.W      send_db_export_reply_msg
;;;904    
                          ENDP

00008e  0000              DCW      0x0000
                  |L8.144|
000090  4b49445f          DCB      "KID_DB_EXPORT_REQUEST",0
000094  44425f45
000098  58504f52
00009c  545f5245
0000a0  51554553
0000a4  5400    
0000a6  00                DCB      0
0000a7  00                DCB      0
                  |L8.168|
                          DCD      ||i.user_lwcom_parser||+0x434
                  |L8.172|
                          DCD      ||.data||+0x20
                  |L8.176|
0000b0  75736572          DCB      "user_id:%d, total_size:%d\r\n",0
0000b4  5f69643a
0000b8  25642c20
0000bc  746f7461
0000c0  6c5f7369
0000c4  7a653a25
0000c8  640d0a00
                  |L8.204|
0000cc  6d64353a          DCB      "md5: ",0
0000d0  2000    
0000d2  00                DCB      0
0000d3  00                DCB      0
                  |L8.212|
0000d4  256300            DCB      "%c",0
0000d7  00                DCB      0
                  |L8.216|
0000d8  0a00              DCB      "\n",0
0000da  00                DCB      0
0000db  00                DCB      0

                          AREA ||i.handle_db_import||, CODE, READONLY, ALIGN=2

                  handle_db_import PROC
;;;905    //KID_DB_IMPORT_REQUEST
;;;906    static void handle_db_import(u8* pDataStart)
000000  b57c              PUSH     {r2-r6,lr}
;;;907    {
000002  4605              MOV      r5,r0
;;;908        dbg_msg_console("[%s]", "KID_DB_IMPORT_REQUEST");
000004  a21f              ADR      r2,|L9.132|
000006  4925              LDR      r1,|L9.156|
000008  2001              MOVS     r0,#1
00000a  f7fffffe          BL       kdp_level_printf
;;;909    
;;;910        u8 result = MR_SUCCESS;
;;;911    
;;;912        uint16_t user_id = (pDataStart[0] << 8) | pDataStart[1];
00000e  8828              LDRH     r0,[r5,#0]
000010  2400              MOVS     r4,#0                 ;910
000012  ba40              REV16    r0,r0
000014  f8ad0004          STRH     r0,[sp,#4]
;;;913        uint32_t size = (pDataStart[2] << 24) | (pDataStart[3] << 16) | (pDataStart[4] << 8) | pDataStart[5];
000018  f8d50002          LDR      r0,[r5,#2]
;;;914        uint8_t import_mode = pDataStart[6];
;;;915    
;;;916        update_db_import_info(0, 0, 0xff);
00001c  22ff              MOVS     r2,#0xff
00001e  ba00              REV      r0,r0                 ;913
000020  f02006ff          BIC      r6,r0,#0xff           ;913
000024  7968              LDRB     r0,[r5,#5]            ;913
000026  79ad              LDRB     r5,[r5,#6]            ;914
000028  4306              ORRS     r6,r6,r0              ;913
00002a  4621              MOV      r1,r4
00002c  4620              MOV      r0,r4
00002e  f7fffffe          BL       update_db_import_info
;;;917    
;;;918        int32_t ret = kdp_app_db_import_request(&user_id, size, import_mode);
000032  462a              MOV      r2,r5
000034  4631              MOV      r1,r6
000036  a801              ADD      r0,sp,#4
000038  f7fffffe          BL       kdp_app_db_import_request
00003c  1d00              ADDS     r0,r0,#4
;;;919        uint32_t db_addr;
;;;920    
;;;921        switch (ret)
00003e  2805              CMP      r0,#5
000040  d21a              BCS      |L9.120|
000042  e8dff000          TBB      [pc,r0]
000046  1818              DCB      0x18,0x18
000048  16140300          DCB      0x16,0x14,0x03,0x00
;;;922        {
;;;923        case 0:
;;;924            db_addr = KDP_DDR_TEST_EXTRA_DB_ADDR;
00004c  4d14              LDR      r5,|L9.160|
;;;925            dbg_msg_console("db_addr:0x%08x, size:%d, user_id:%d", db_addr, size, user_id);
00004e  f8bd0004          LDRH     r0,[sp,#4]
000052  9000              STR      r0,[sp,#0]
000054  4633              MOV      r3,r6
000056  462a              MOV      r2,r5
000058  a112              ADR      r1,|L9.164|
00005a  2001              MOVS     r0,#1
00005c  f7fffffe          BL       kdp_level_printf
;;;926            update_db_import_info(db_addr, size, user_id);
000060  f8bd2004          LDRH     r2,[sp,#4]
000064  4631              MOV      r1,r6
000066  4628              MOV      r0,r5
000068  f7fffffe          BL       update_db_import_info
;;;927            break;
00006c  e004              B        |L9.120|
;;;928        
;;;929        case -1:
;;;930            // No space
;;;931            result = MR_FAILED_MAX_USER;
00006e  2409              MOVS     r4,#9
;;;932            break;
000070  e002              B        |L9.120|
;;;933        
;;;934        case -2:
;;;935            // MR_FAILED_FACE_ENROLLED
;;;936            result = MR_FAILED_FACE_ENROLLED;
000072  240a              MOVS     r4,#0xa
;;;937            break;
000074  e000              B        |L9.120|
;;;938        
;;;939        case -3:
;;;940        case -4:
;;;941            // MR_FAILED_INVALID_PARAM
;;;942            result = MR_FAILED_INVALID_PARAM;
000076  2406              MOVS     r4,#6
                  |L9.120|
;;;943            break;
;;;944    
;;;945        default:
;;;946            break;
;;;947        }
;;;948    
;;;949        send_db_import_request_reply_msg(result, user_id);
000078  f8bd1004          LDRH     r1,[sp,#4]
00007c  4620              MOV      r0,r4
00007e  f7fffffe          BL       send_db_import_request_reply_msg
;;;950        return;
;;;951    }
000082  bd7c              POP      {r2-r6,pc}
;;;952    
                          ENDP

                  |L9.132|
000084  4b49445f          DCB      "KID_DB_IMPORT_REQUEST",0
000088  44425f49
00008c  4d504f52
000090  545f5245
000094  51554553
000098  5400    
00009a  00                DCB      0
00009b  00                DCB      0
                  |L9.156|
                          DCD      ||i.user_lwcom_parser||+0x434
                  |L9.160|
                          DCD      0x61f7ce00
                  |L9.164|
0000a4  64625f61          DCB      "db_addr:0x%08x, size:%d, user_id:%d\r\n",0
0000a8  6464723a
0000ac  30782530
0000b0  38782c20
0000b4  73697a65
0000b8  3a25642c
0000bc  20757365
0000c0  725f6964
0000c4  3a25640d
0000c8  0a00    
0000ca  00                DCB      0
0000cb  00                DCB      0

                          AREA ||i.handle_download_data||, CODE, READONLY, ALIGN=2

                  handle_download_data PROC
;;;1000   //KID_DOWNLOAD_DATA
;;;1001   static void handle_download_data(u8* pDataStart)
000000  e92d5ffc          PUSH     {r2-r12,lr}
;;;1002   {
000004  4604              MOV      r4,r0
;;;1003       uint32_t pkg_offset = (pDataStart[0] << 24) | (pDataStart[1] << 16) | (pDataStart[2] << 8) | pDataStart[3];
000006  6800              LDR      r0,[r0,#0]
000008  78e1              LDRB     r1,[r4,#3]
00000a  ba00              REV      r0,r0
00000c  f02000ff          BIC      r0,r0,#0xff
000010  ea400901          ORR      r9,r0,r1
;;;1004       uint32_t pkg_size = (pDataStart[4] << 24) | (pDataStart[5] << 16) | (pDataStart[6] << 8) | pDataStart[7];
000014  6860              LDR      r0,[r4,#4]
000016  79e1              LDRB     r1,[r4,#7]
000018  ba00              REV      r0,r0
00001a  f02000ff          BIC      r0,r0,#0xff
00001e  ea400801          ORR      r8,r0,r1
;;;1005       uint8_t data_type = pDataStart[8];
000022  7a27              LDRB     r7,[r4,#8]
;;;1006   
;;;1007       dbg_msg_console("[%s] offset:%d, size:%d, data_type:0x%02x", "KID_DOWNLOAD_DATA", pkg_offset, pkg_size, data_type);
000024  464b              MOV      r3,r9
000026  e9cd8700          STRD     r8,r7,[sp,#0]
00002a  a21e              ADR      r2,|L10.164|
00002c  a122              ADR      r1,|L10.184|
00002e  2001              MOVS     r0,#1
000030  f7fffffe          BL       kdp_level_printf
;;;1008   
;;;1009       uint32_t addr, size;
;;;1010       u8 result = MR_SUCCESS;
000034  f04f0a00          MOV      r10,#0
;;;1011       u16 user_id;
;;;1012       uint32_t ret;
;;;1013   
;;;1014       switch (data_type)
000038  2f7e              CMP      r7,#0x7e
00003a  d102              BNE      |L10.66|
00003c  4829              LDR      r0,|L10.228|
00003e  e9d06500          LDRD     r6,r5,[r0,#0]
                  |L10.66|
;;;1015       {
;;;1016   #ifdef KID_DB_IMPORT_REQUEST
;;;1017       case KID_DB_IMPORT_REQUEST:
;;;1018           addr = get_db_import_addr();
;;;1019           size = get_db_import_size();
;;;1020           break;
;;;1021   #endif
;;;1022       
;;;1023       default:
;;;1024           break;
;;;1025       }
;;;1026   
;;;1027       if ((addr) && ((pkg_offset + pkg_size) <= size))
000042  b35e              CBZ      r6,|L10.156|
000044  eb090b08          ADD      r11,r9,r8
000048  4641              MOV      r1,r8
00004a  45ab              CMP      r11,r5
00004c  d826              BHI      |L10.156|
;;;1028       {
;;;1029           memcpy((void *)(addr + pkg_offset), &pDataStart[9], pkg_size);
00004e  460a              MOV      r2,r1
000050  eb060009          ADD      r0,r6,r9
000054  f1040109          ADD      r1,r4,#9
000058  f7fffffe          BL       __aeabi_memcpy
;;;1030           if ((pkg_offset + pkg_size) == size)
00005c  45ab              CMP      r11,r5
00005e  d111              BNE      |L10.132|
;;;1031           {
;;;1032               switch (data_type)
000060  2f7e              CMP      r7,#0x7e
000062  d10f              BNE      |L10.132|
;;;1033               {
;;;1034   #ifdef KID_DB_IMPORT_REQUEST
;;;1035               case KID_DB_IMPORT_REQUEST:
;;;1036                   user_id = get_db_import_user_id();
000064  481f              LDR      r0,|L10.228|
;;;1037                   ret = kdp_app_db_import(user_id, (u8 *)addr, size);
000066  b2aa              UXTH     r2,r5
000068  3828              SUBS     r0,r0,#0x28           ;1036
00006a  4631              MOV      r1,r6
00006c  88c0              LDRH     r0,[r0,#6]            ;1036  ; db_import_user_id
00006e  f7fffffe          BL       kdp_app_db_import
000072  0004              MOVS     r4,r0
;;;1038                   if(0 == ret)
000074  d00c              BEQ      |L10.144|
;;;1039                   {
;;;1040                       update_db_import_info(0, 0, 0xff);
;;;1041                       result = MR_SUCCESS;
;;;1042                   }
;;;1043                   else
;;;1044                       result = MR_FAILED_INVALID_PARAM;
000076  f04f0a06          MOV      r10,#6
                  |L10.122|
;;;1045                   dbg_msg_console("db_import ret:%d", ret);
00007a  4622              MOV      r2,r4
00007c  a11a              ADR      r1,|L10.232|
00007e  2001              MOVS     r0,#1
000080  f7fffffe          BL       kdp_level_printf
                  |L10.132|
;;;1046                   break;
;;;1047   #endif
;;;1048               
;;;1049               default:
;;;1050                   break;
;;;1051               }
;;;1052               
;;;1053           }
;;;1054   
;;;1055           send_reply_AesNoDataMsg(result, KID_DOWNLOAD_DATA);
000084  217f              MOVS     r1,#0x7f
000086  4650              MOV      r0,r10
                  |L10.136|
;;;1056       }
;;;1057       else
;;;1058       {
;;;1059           // MR_FAILED_INVALID_PARAM
;;;1060           send_reply_AesNoDataMsg(MR_FAILED_INVALID_PARAM, KID_DOWNLOAD_DATA);
000088  e8bd5ffc          POP      {r2-r12,lr}
00008c  f7ffbffe          B.W      send_reply_AesNoDataMsg
                  |L10.144|
000090  2100              MOVS     r1,#0                 ;1040
000092  22ff              MOVS     r2,#0xff              ;1040
000094  4608              MOV      r0,r1                 ;1040
000096  f7fffffe          BL       update_db_import_info
00009a  e7ee              B        |L10.122|
                  |L10.156|
00009c  217f              MOVS     r1,#0x7f
00009e  2006              MOVS     r0,#6
0000a0  e7f2              B        |L10.136|
;;;1061       }
;;;1062       return;
;;;1063   }
;;;1064   #endif
                          ENDP

0000a2  0000              DCW      0x0000
                  |L10.164|
0000a4  4b49445f          DCB      "KID_DOWNLOAD_DATA",0
0000a8  444f574e
0000ac  4c4f4144
0000b0  5f444154
0000b4  4100    
0000b6  00                DCB      0
0000b7  00                DCB      0
                  |L10.184|
0000b8  5b25735d          DCB      "[%s] offset:%d, size:%d, data_type:0x%02x\r\n",0
0000bc  206f6666
0000c0  7365743a
0000c4  25642c20
0000c8  73697a65
0000cc  3a25642c
0000d0  20646174
0000d4  615f7479
0000d8  70653a30
0000dc  78253032
0000e0  780d0a00
                  |L10.228|
                          DCD      ||.data||+0x28
                  |L10.232|
0000e8  64625f69          DCB      "db_import ret:%d\r\n",0
0000ec  6d706f72
0000f0  74207265
0000f4  743a2564
0000f8  0d0a00  
0000fb  00                DCB      0

                          AREA ||i.handle_enroll_itg||, CODE, READONLY, ALIGN=2

                  handle_enroll_itg PROC
;;;466    //KID_ENROLL_ITG
;;;467    static void handle_enroll_itg(u8* pDataStart, u8 cmd)
000000  b570              PUSH     {r4-r6,lr}
;;;468    {
000002  460c              MOV      r4,r1
000004  4605              MOV      r5,r0
;;;469        dbg_msg_console("[%s]", "KID_ENROLL_ITG");
000006  a217              ADR      r2,|L11.100|
000008  491a              LDR      r1,|L11.116|
00000a  2001              MOVS     r0,#1
00000c  f7fffffe          BL       kdp_level_printf
;;;470    
;;;471        parse_enroll_msg(pDataStart, cmd);
000010  4621              MOV      r1,r4
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       parse_enroll_msg
;;;472        set_enroll_customize_uid(0xff);
000018  20ff              MOVS     r0,#0xff
00001a  f7fffffe          BL       set_enroll_customize_uid
;;;473    
;;;474        dbg_msg_console("msg_enroll:enroll_type:%d, enable_duplicate:%d", 
00001e  4c16              LDR      r4,|L11.120|
000020  f8943023          LDRB     r3,[r4,#0x23]  ; msg_enroll
000024  f8942022          LDRB     r2,[r4,#0x22]  ; msg_enroll
000028  a114              ADR      r1,|L11.124|
00002a  2001              MOVS     r0,#1
00002c  f7fffffe          BL       kdp_level_printf
;;;475            msg_enroll.enroll_type, msg_enroll.enable_duplicate);
;;;476    
;;;477        if(user_com_thread_event_check_set(USER_COM_FLAG_REGISTRATION) == true) return;
000030  2001              MOVS     r0,#1
000032  f7fffffe          BL       user_com_thread_event_check_set
000036  2800              CMP      r0,#0
000038  d113              BNE      |L11.98|
;;;478    
;;;479        if (0 == msg_enroll.enroll_type) {
00003a  f8940022          LDRB     r0,[r4,#0x22]  ; msg_enroll
00003e  b170              CBZ      r0,|L11.94|
;;;480            KDP_Enroll_Add_Face_Type_Set(FACE_ADD_MODE_5_FACES);
;;;481        } else {
;;;482            KDP_Enroll_Add_Face_Type_Set(FACE_ADD_MODE_1_FACE);
000040  f05f0001          MOVS.W   r0,#1
                  |L11.68|
000044  f7fffffe          BL       KDP_Enroll_Add_Face_Type_Set
;;;483        }
;;;484    
;;;485        if (msg_enroll.enable_duplicate)
000048  f8940023          LDRB     r0,[r4,#0x23]  ; msg_enroll
00004c  b100              CBZ      r0,|L11.80|
;;;486            set_enroll_overwrite_flag(1);
00004e  2001              MOVS     r0,#1
                  |L11.80|
;;;487        else
;;;488            set_enroll_overwrite_flag(0);
000050  f7fffffe          BL       set_enroll_overwrite_flag
;;;489        
;;;490        user_com_event_start(USER_COM_FLAG_REGISTRATION);
000054  e8bd4070          POP      {r4-r6,lr}
000058  2001              MOVS     r0,#1
00005a  f7ffbffe          B.W      user_com_event_start
                  |L11.94|
00005e  2002              MOVS     r0,#2                 ;480
000060  e7f0              B        |L11.68|
                  |L11.98|
;;;491        return;
;;;492    }
000062  bd70              POP      {r4-r6,pc}
;;;493    
                          ENDP

                  |L11.100|
000064  4b49445f          DCB      "KID_ENROLL_ITG",0
000068  454e524f
00006c  4c4c5f49
000070  544700  
000073  00                DCB      0
                  |L11.116|
                          DCD      ||i.user_lwcom_parser||+0x434
                  |L11.120|
                          DCD      ||.bss||
                  |L11.124|
00007c  6d73675f          DCB      "msg_enroll:enroll_type:%d, enable_duplicate:%d\r\n",0
000080  656e726f
000084  6c6c3a65
000088  6e726f6c
00008c  6c5f7479
000090  70653a25
000094  642c2065
000098  6e61626c
00009c  655f6475
0000a0  706c6963
0000a4  6174653a
0000a8  25640d0a
0000ac  00      
0000ad  00                DCB      0
0000ae  00                DCB      0
0000af  00                DCB      0

                          AREA ||i.handle_face_reset||, CODE, READONLY, ALIGN=2

                  handle_face_reset PROC
;;;494    //KID_FACE_RESET
;;;495    static void handle_face_reset(u8 cmd)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;496    {
000004  4607              MOV      r7,r0
;;;497    #ifdef KID_FACE_RESET
;;;498        if(KID_FACE_RESET == cmd) dbg_msg_console("[%s]", "KID_FACE_RESET");
000006  2823              CMP      r0,#0x23
000008  d002              BEQ      |L12.16|
;;;499    #endif
;;;500    #ifdef KID_RESET
;;;501        if (KID_RESET == cmd)     dbg_msg_console("[%s]", "KID_RESET");
00000a  2f10              CMP      r7,#0x10
00000c  d002              BEQ      |L12.20|
00000e  e006              B        |L12.30|
                  |L12.16|
000010  a229              ADR      r2,|L12.184|
000012  e000              B        |L12.22|
                  |L12.20|
000014  a22c              ADR      r2,|L12.200|
                  |L12.22|
000016  a12f              ADR      r1,|L12.212|
000018  2001              MOVS     r0,#1                 ;498
00001a  f7fffffe          BL       kdp_level_printf
                  |L12.30|
;;;502    #endif
;;;503    
;;;504        s32 ret = 0;
00001e  2500              MOVS     r5,#0
;;;505        if(kdp_e2e_db_write_lock() == 0)
000020  f7fffffe          BL       kdp_e2e_db_write_lock
;;;506        {
;;;507            if (DB_FLASH_WRITE == db_write)
000024  4e2e              LDR      r6,|L12.224|
000026  2800              CMP      r0,#0                 ;505
;;;508            {
;;;509                u32 cnt = 200*3;
;;;510                while ((db_write != DB_FACE_ADD_IDLE) && (cnt > 0))
;;;511                {
;;;512                    osDelay(5);
;;;513                    cnt--;
;;;514                }
;;;515    
;;;516                kl520_api_face_del(2, m_curr_user_id);
000028  f8df80b0          LDR      r8,|L12.220|
;;;517                dbg_msg_console("[1]Del usr %#x", m_curr_user_id);
;;;518                send_reply_AesNoDataMsg(ret, cmd);
;;;519            }
;;;520            else
;;;521            {
;;;522                g_bResponseEn = TRUE;
;;;523    
;;;524                user_com_event_interrupt();
;;;525                ret = DSM_Uart_FaceReset();
;;;526    
;;;527                g_bResponseEn = FALSE;
;;;528                send_reply_AesNoDataMsg(ret, cmd);
;;;529            }
;;;530            kdp_e2e_db_write_unlock();
;;;531        }
;;;532        else
;;;533        {
;;;534            u32 cnt = 200*3;
;;;535            while ((db_write != DB_FACE_ADD_IDLE) && (cnt > 0))
00002c  7830              LDRB     r0,[r6,#0]  ; db_write
00002e  f44f7416          MOV      r4,#0x258             ;509
000032  d019              BEQ      |L12.104|
000034  b138              CBZ      r0,|L12.70|
                  |L12.54|
;;;536            {
;;;537                osDelay(5);
000036  2005              MOVS     r0,#5
000038  f7fffffe          BL       osDelay
00003c  7830              LDRB     r0,[r6,#0]            ;535  ; db_write
00003e  1e64              SUBS     r4,r4,#1              ;535
;;;538                cnt--;
000040  b108              CBZ      r0,|L12.70|
000042  2c00              CMP      r4,#0                 ;535
000044  d1f7              BNE      |L12.54|
                  |L12.70|
;;;539            }
;;;540    
;;;541            kl520_api_face_del(2, m_curr_user_id);
000046  4644              MOV      r4,r8
000048  f8981000          LDRB     r1,[r8,#0]  ; m_curr_user_id
00004c  2002              MOVS     r0,#2
00004e  f7fffffe          BL       kl520_api_face_del
;;;542            dbg_msg_console("[2]Del usr %#x", m_curr_user_id);
000052  7822              LDRB     r2,[r4,#0]  ; m_curr_user_id
000054  a123              ADR      r1,|L12.228|
000056  2001              MOVS     r0,#1
000058  f7fffffe          BL       kdp_level_printf
;;;543            send_reply_AesNoDataMsg(ret, cmd);
00005c  4628              MOV      r0,r5
00005e  4639              MOV      r1,r7
000060  e8bd41f0          POP      {r4-r8,lr}
000064  f7ffbffe          B.W      send_reply_AesNoDataMsg
                  |L12.104|
000068  2802              CMP      r0,#2                 ;507
00006a  d009              BEQ      |L12.128|
00006c  4c22              LDR      r4,|L12.248|
00006e  2001              MOVS     r0,#1                 ;522
000070  7020              STRB     r0,[r4,#0]            ;522
000072  f7fffffe          BL       user_com_event_interrupt
000076  f7fffffe          BL       DSM_Uart_FaceReset
00007a  2100              MOVS     r1,#0                 ;527
00007c  7021              STRB     r1,[r4,#0]            ;527
00007e  e013              B        |L12.168|
                  |L12.128|
000080  2005              MOVS     r0,#5                 ;512
000082  f7fffffe          BL       osDelay
000086  7830              LDRB     r0,[r6,#0]            ;510  ; db_write
000088  1e64              SUBS     r4,r4,#1              ;510
00008a  b108              CBZ      r0,|L12.144|
00008c  2c00              CMP      r4,#0                 ;510
00008e  d1f7              BNE      |L12.128|
                  |L12.144|
000090  4644              MOV      r4,r8                 ;516
000092  f8981000          LDRB     r1,[r8,#0]            ;516  ; m_curr_user_id
000096  2002              MOVS     r0,#2                 ;516
000098  f7fffffe          BL       kl520_api_face_del
00009c  7822              LDRB     r2,[r4,#0]            ;517  ; m_curr_user_id
00009e  a117              ADR      r1,|L12.252|
0000a0  2001              MOVS     r0,#1                 ;517
0000a2  f7fffffe          BL       kdp_level_printf
0000a6  4628              MOV      r0,r5                 ;518
                  |L12.168|
0000a8  4639              MOV      r1,r7                 ;528
0000aa  f7fffffe          BL       send_reply_AesNoDataMsg
0000ae  e8bd41f0          POP      {r4-r8,lr}            ;530
0000b2  f7ffbffe          B.W      kdp_e2e_db_write_unlock
;;;544        }
;;;545        
;;;546        return;
;;;547    }
;;;548    
                          ENDP

0000b6  0000              DCW      0x0000
                  |L12.184|
0000b8  4b49445f          DCB      "KID_FACE_RESET",0
0000bc  46414345
0000c0  5f524553
0000c4  455400  
0000c7  00                DCB      0
                  |L12.200|
0000c8  4b49445f          DCB      "KID_RESET",0
0000cc  52455345
0000d0  5400    
0000d2  00                DCB      0
0000d3  00                DCB      0
                  |L12.212|
0000d4  5b25735d          DCB      "[%s]\r\n",0
0000d8  0d0a00  
0000db  00                DCB      0
                  |L12.220|
                          DCD      m_curr_user_id
                  |L12.224|
                          DCD      db_write
                  |L12.228|
0000e4  5b325d44          DCB      "[2]Del usr %#x\r\n",0
0000e8  656c2075
0000ec  73722025
0000f0  23780d0a
0000f4  00      
0000f5  00                DCB      0
0000f6  00                DCB      0
0000f7  00                DCB      0
                  |L12.248|
                          DCD      ||.data||
                  |L12.252|
0000fc  5b315d44          DCB      "[1]Del usr %#x\r\n",0
000100  656c2075
000104  73722025
000108  23780d0a
00010c  00      
00010d  00                DCB      0
00010e  00                DCB      0
00010f  00                DCB      0

                          AREA ||i.handle_kid_enroll||, CODE, READONLY, ALIGN=2

                  handle_kid_enroll PROC
;;;393    //KID_ENROLL
;;;394    static void handle_kid_enroll(u8* pDataStart, u8 cmd)
000000  b5f8              PUSH     {r3-r7,lr}
;;;395    {
000002  460d              MOV      r5,r1
000004  4606              MOV      r6,r0
;;;396        dbg_msg_console("[%s]", (KID_ENROLL==cmd)?"KID_ENROLL":"KID_ENROLL_OVERWRITE");
000006  2913              CMP      r1,#0x13
000008  d00c              BEQ      |L13.36|
00000a  a220              ADR      r2,|L13.140|
                  |L13.12|
00000c  a125              ADR      r1,|L13.164|
00000e  2001              MOVS     r0,#1
000010  f7fffffe          BL       kdp_level_printf
;;;397    
;;;398        parse_enroll_msg(pDataStart, cmd);
000014  4629              MOV      r1,r5
000016  4630              MOV      r0,r6
000018  f7fffffe          BL       parse_enroll_msg
;;;399    
;;;400        u8 uid_in_msg = 0xff;
00001c  24ff              MOVS     r4,#0xff
;;;401    #ifdef  KID_ENROLL_OVERWRITE
;;;402        if (KID_ENROLL_OVERWRITE == cmd)
00001e  2d14              CMP      r5,#0x14
000020  d002              BEQ      |L13.40|
000022  e01a              B        |L13.90|
                  |L13.36|
000024  a221              ADR      r2,|L13.172|
000026  e7f1              B        |L13.12|
                  |L13.40|
;;;403        {
;;;404            uid_in_msg = *(pDataStart+35);
000028  f8964023          LDRB     r4,[r6,#0x23]
;;;405           #if 0
;;;406            if (uid_in_msg >= 0x80)
;;;407                update_user_db_offset(0x80);
;;;408            else
;;;409                reset_user_db_offset();
;;;410    
;;;411            if ((uid_in_msg < get_user_db_offset()) || 
;;;412                (uid_in_msg >= get_user_db_offset() + CFG_MAX_USER))
;;;413            {
;;;414                send_enroll_reply_msg(MR_FAILED_INVALID_PARAM, ((uid_in_msg >> 8) &0xFF),  (uid_in_msg &0xFF) , 0, cmd);
;;;415                return;
;;;416            }
;;;417    		#endif
;;;418    				 dbg_msg_console("[%s] uid_in_msg= %x", __func__, uid_in_msg);
00002c  4a22              LDR      r2,|L13.184|
00002e  4623              MOV      r3,r4
000030  a122              ADR      r1,|L13.188|
000032  2001              MOVS     r0,#1
000034  f7fffffe          BL       kdp_level_printf
;;;419                    if(uid_in_msg < kl520_api_get_start_user_id() || uid_in_msg > kl520_api_get_start_user_id()+MAX_USER){//zcy add
000038  f7fffffe          BL       kl520_api_get_start_user_id
00003c  42a0              CMP      r0,r4
00003e  d804              BHI      |L13.74|
000040  f7fffffe          BL       kl520_api_get_start_user_id
000044  3064              ADDS     r0,r0,#0x64
000046  42a0              CMP      r0,r4
000048  d207              BCS      |L13.90|
                  |L13.74|
;;;420                      // send_data_error_reply_msg(MR_REJECTED);
;;;421    				   send_enroll_reply_msg(MR_FAILED_INVALID_PARAM, ((uid_in_msg >> 8) &0xFF),  (uid_in_msg &0xFF) , 0, cmd);
00004a  2300              MOVS     r3,#0
00004c  4622              MOV      r2,r4
00004e  4619              MOV      r1,r3
000050  2006              MOVS     r0,#6
000052  9500              STR      r5,[sp,#0]
000054  f7fffffe          BL       send_enroll_reply_msg
                  |L13.88|
;;;422                       return;
;;;423                    }
;;;424        }
;;;425        else
;;;426    #endif
;;;427            uid_in_msg = 0xff;
;;;428        
;;;429        set_enroll_customize_uid(uid_in_msg);
;;;430        
;;;431    #ifdef  KID_ENROLL_OVERWRITE
;;;432        dbg_msg_console("overwrite_db_uid: %#x", uid_in_msg);
;;;433    #endif
;;;434    		if (KID_ENROLL_OVERWRITE == cmd){
;;;435    			set_enroll_overwrite_flag(0);//zcy md for stop re-enroll
;;;436    		}else{
;;;437    			//set_enroll_overwrite_flag(1);//zcy md for re-enroll
;;;438    			set_enroll_overwrite_flag(0);
;;;439    		}
;;;440    		
;;;441        if(user_com_thread_event_check_set(USER_COM_FLAG_REGISTRATION) == true) return;
;;;442    
;;;443        KDP_Enroll_Add_Face_Type_Set(FACE_ADD_MODE_5_FACES);
;;;444       
;;;445        user_com_event_start(USER_COM_FLAG_REGISTRATION);
;;;446        return;
;;;447    }
000058  bdf8              POP      {r3-r7,pc}
                  |L13.90|
00005a  4620              MOV      r0,r4                 ;429
00005c  f7fffffe          BL       set_enroll_customize_uid
000060  4622              MOV      r2,r4                 ;432
000062  a11c              ADR      r1,|L13.212|
000064  2001              MOVS     r0,#1                 ;432
000066  f7fffffe          BL       kdp_level_printf
00006a  2000              MOVS     r0,#0                 ;438
00006c  f7fffffe          BL       set_enroll_overwrite_flag
000070  2001              MOVS     r0,#1                 ;441
000072  f7fffffe          BL       user_com_thread_event_check_set
000076  2800              CMP      r0,#0                 ;438
000078  d1ee              BNE      |L13.88|
00007a  2002              MOVS     r0,#2                 ;443
00007c  f7fffffe          BL       KDP_Enroll_Add_Face_Type_Set
000080  e8bd40f8          POP      {r3-r7,lr}            ;445
000084  2001              MOVS     r0,#1                 ;445
000086  f7ffbffe          B.W      user_com_event_start
;;;448    
                          ENDP

00008a  0000              DCW      0x0000
                  |L13.140|
00008c  4b49445f          DCB      "KID_ENROLL_OVERWRITE",0
000090  454e524f
000094  4c4c5f4f
000098  56455257
00009c  52495445
0000a0  00      
0000a1  00                DCB      0
0000a2  00                DCB      0
0000a3  00                DCB      0
                  |L13.164|
0000a4  5b25735d          DCB      "[%s]\r\n",0
0000a8  0d0a00  
0000ab  00                DCB      0
                  |L13.172|
0000ac  4b49445f          DCB      "KID_ENROLL",0
0000b0  454e524f
0000b4  4c4c00  
0000b7  00                DCB      0
                  |L13.184|
                          DCD      ||.constdata||
                  |L13.188|
0000bc  5b25735d          DCB      "[%s] uid_in_msg= %x\r\n",0
0000c0  20756964
0000c4  5f696e5f
0000c8  6d73673d
0000cc  2025780d
0000d0  0a00    
0000d2  00                DCB      0
0000d3  00                DCB      0
                  |L13.212|
0000d4  6f766572          DCB      "overwrite_db_uid: %#x\r\n",0
0000d8  77726974
0000dc  655f6462
0000e0  5f756964
0000e4  3a202523
0000e8  780d0a00

                          AREA ||i.handle_kid_verify||, CODE, READONLY, ALIGN=2

                  handle_kid_verify PROC
;;;328    //KID_VERIFY
;;;329    static void handle_kid_verify(u8* pDataStart)
000000  b510              PUSH     {r4,lr}
;;;330    {
000002  4604              MOV      r4,r0
;;;331        dbg_msg_console("KID_VERIFY");
000004  a110              ADR      r1,|L14.72|
000006  2001              MOVS     r0,#1
000008  f7fffffe          BL       kdp_level_printf
;;;332        kl520_measure_stamp(E_MEASURE_VERIFY_MSG);
;;;333    
;;;334        _user_com_data = StreamsToBigEndU16(pDataStart);
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       StreamsToBigEndU16
000012  4c11              LDR      r4,|L14.88|
000014  80a0              STRH     r0,[r4,#4]
;;;335        dbg_msg_com(" shudown:%d; timeout:%d ",*pDataStart,*(pDataStart+1));
;;;336    
;;;337        if(user_com_thread_event_check_set(USER_COM_FLAG_RECOGNITION) == TRUE)  return;
000016  2002              MOVS     r0,#2
000018  f7fffffe          BL       user_com_thread_event_check_set
00001c  2800              CMP      r0,#0
00001e  d111              BNE      |L14.68|
;;;338    
;;;339        dbg_msg_com("had recv recognize cmd");
;;;340    
;;;341        if (FACE_MODE_NONE != m_face_mode)
000020  480e              LDR      r0,|L14.92|
000022  7800              LDRB     r0,[r0,#0]  ; m_face_mode
000024  b148              CBZ      r0,|L14.58|
;;;342        {
;;;343            g_bResponseEn = TRUE;
000026  2001              MOVS     r0,#1
000028  7020              STRB     r0,[r4,#0]
;;;344            sample_face_close();
00002a  f7fffffe          BL       sample_face_close
;;;345            g_eFaceDirState = 0;
00002e  490c              LDR      r1,|L14.96|
000030  2000              MOVS     r0,#0
000032  7008              STRB     r0,[r1,#0]
;;;346            g_nFaceId = 0;
000034  490b              LDR      r1,|L14.100|
000036  8008              STRH     r0,[r1,#0]
;;;347            g_bResponseEn = FALSE;
000038  7020              STRB     r0,[r4,#0]
                  |L14.58|
;;;348        }
;;;349        user_com_event_start(USER_COM_FLAG_RECOGNITION);
00003a  e8bd4010          POP      {r4,lr}
00003e  2002              MOVS     r0,#2
000040  f7ffbffe          B.W      user_com_event_start
                  |L14.68|
;;;350        return;
;;;351    }
000044  bd10              POP      {r4,pc}
;;;352    
                          ENDP

000046  0000              DCW      0x0000
                  |L14.72|
000048  4b49445f          DCB      "KID_VERIFY\r\n",0
00004c  56455249
000050  46590d0a
000054  00      
000055  00                DCB      0
000056  00                DCB      0
000057  00                DCB      0
                  |L14.88|
                          DCD      ||.data||
                  |L14.92|
                          DCD      m_face_mode
                  |L14.96|
                          DCD      g_eFaceDirState
                  |L14.100|
                          DCD      g_nFaceId

                          AREA ||i.handle_upload_data||, CODE, READONLY, ALIGN=2

                  handle_upload_data PROC
;;;954    //KID_UPLOAD_DATA
;;;955    static void handle_upload_data(u8* pDataStart)
000000  b5f8              PUSH     {r3-r7,lr}
;;;956    {
000002  4606              MOV      r6,r0
;;;957        dbg_msg_console("[%s]", "KID_UPLOAD_DATA");
000004  a21d              ADR      r2,|L15.124|
000006  4921              LDR      r1,|L15.140|
000008  2001              MOVS     r0,#1
00000a  f7fffffe          BL       kdp_level_printf
;;;958    
;;;959        uint32_t offset = (pDataStart[0] << 24) | (pDataStart[1] << 16) | (pDataStart[2] << 8) | pDataStart[3];
00000e  6830              LDR      r0,[r6,#0]
;;;960        uint32_t size = (pDataStart[4] << 24) | (pDataStart[5] << 16) | (pDataStart[6] << 8) | pDataStart[7];
;;;961        u8 request_cmd = pDataStart[8];
;;;962    
;;;963        dbg_msg_console("offset:%d, size:%d, request_cmd:0x%02x", offset, size, request_cmd);
000010  a11f              ADR      r1,|L15.144|
000012  ba00              REV      r0,r0                 ;959
000014  f02004ff          BIC      r4,r0,#0xff           ;959
000018  78f0              LDRB     r0,[r6,#3]            ;959
00001a  4304              ORRS     r4,r4,r0              ;959
00001c  6870              LDR      r0,[r6,#4]            ;960
00001e  4622              MOV      r2,r4
000020  ba00              REV      r0,r0                 ;960
000022  f02005ff          BIC      r5,r0,#0xff           ;960
000026  79f0              LDRB     r0,[r6,#7]            ;960
000028  7a36              LDRB     r6,[r6,#8]            ;961
00002a  4305              ORRS     r5,r5,r0              ;960
00002c  462b              MOV      r3,r5
00002e  2001              MOVS     r0,#1
000030  9600              STR      r6,[sp,#0]
000032  f7fffffe          BL       kdp_level_printf
;;;964    
;;;965        uint32_t data_addr = 0;
;;;966        uint32_t data_size = 0;
;;;967    
;;;968        switch (request_cmd)
000036  2e7c              CMP      r6,#0x7c
000038  d005              BEQ      |L15.70|
;;;969        {
;;;970    #ifdef KID_DB_EXPORT_REQUEST
;;;971        case KID_DB_EXPORT_REQUEST:
;;;972            data_addr = get_db_export_addr();
;;;973            data_size = get_db_export_size();
;;;974            break;
;;;975    #endif
;;;976        
;;;977        default:
;;;978            dbg_msg_console("request_cmd %d is invalid", request_cmd);
00003a  4632              MOV      r2,r6
00003c  a11f              ADR      r1,|L15.188|
00003e  2001              MOVS     r0,#1
000040  f7fffffe          BL       kdp_level_printf
;;;979            break;
000044  e00d              B        |L15.98|
                  |L15.70|
000046  4824              LDR      r0,|L15.216|
000048  e9d01000          LDRD     r1,r0,[r0,#0]
00004c  b149              CBZ      r1,|L15.98|
;;;980        }
;;;981    
;;;982        if ((data_addr) && (offset < data_size))
00004e  4284              CMP      r4,r0
000050  d207              BCS      |L15.98|
;;;983        {
;;;984            uint32_t upload_addr;
;;;985            upload_addr = data_addr + offset;
;;;986            if ((offset + size) > data_size)
000052  1962              ADDS     r2,r4,r5
000054  4421              ADD      r1,r1,r4              ;985
000056  4282              CMP      r2,r0
000058  d900              BLS      |L15.92|
;;;987                size = data_size - offset;
00005a  1b05              SUBS     r5,r0,r4
                  |L15.92|
;;;988    
;;;989            send_upload_data_reply_msg(MR_SUCCESS, upload_addr, size);
00005c  462a              MOV      r2,r5
00005e  2000              MOVS     r0,#0
;;;990        }
000060  e007              B        |L15.114|
                  |L15.98|
;;;991        else
;;;992        {
;;;993            dbg_msg_console("");
000062  490a              LDR      r1,|L15.140|
000064  2001              MOVS     r0,#1
000066  1d09              ADDS     r1,r1,#4
000068  f7fffffe          BL       kdp_level_printf
;;;994            send_upload_data_reply_msg(MR_FAILED_INVALID_PARAM, 0, 0);
00006c  2200              MOVS     r2,#0
00006e  4611              MOV      r1,r2
000070  2006              MOVS     r0,#6
                  |L15.114|
000072  e8bd40f8          POP      {r3-r7,lr}
000076  f7ffbffe          B.W      send_upload_data_reply_msg
;;;995        }
;;;996        
;;;997        return;
;;;998    }
;;;999    
                          ENDP

00007a  0000              DCW      0x0000
                  |L15.124|
00007c  4b49445f          DCB      "KID_UPLOAD_DATA",0
000080  55504c4f
000084  41445f44
000088  41544100
                  |L15.140|
                          DCD      ||i.user_lwcom_parser||+0x434
                  |L15.144|
000090  6f666673          DCB      "offset:%d, size:%d, request_cmd:0x%02x\r\n",0
000094  65743a25
000098  642c2073
00009c  697a653a
0000a0  25642c20
0000a4  72657175
0000a8  6573745f
0000ac  636d643a
0000b0  30782530
0000b4  32780d0a
0000b8  00      
0000b9  00                DCB      0
0000ba  00                DCB      0
0000bb  00                DCB      0
                  |L15.188|
0000bc  72657175          DCB      "request_cmd %d is invalid\r\n",0
0000c0  6573745f
0000c4  636d6420
0000c8  25642069
0000cc  7320696e
0000d0  76616c69
0000d4  640d0a00
                  |L15.216|
                          DCD      ||.data||+0x20

                          AREA ||i.handle_user_rotate_sensor||, CODE, READONLY, ALIGN=2

                  handle_user_rotate_sensor PROC
;;;773    #ifdef KID_USER_ROTATE_180
;;;774    static void handle_user_rotate_sensor(u8* pDataStart)
000000  b510              PUSH     {r4,lr}
;;;775    {
000002  4604              MOV      r4,r0
000004  b08c              SUB      sp,sp,#0x30
;;;776        dbg_msg_console("[%s]", "KID_USER_ROTATE_180");
000006  a210              ADR      r2,|L16.72|
000008  4914              LDR      r1,|L16.92|
00000a  2001              MOVS     r0,#1
00000c  f7fffffe          BL       kdp_level_printf
;;;777    
;;;778        u8 user_rotate_enable = *pDataStart;
000010  7824              LDRB     r4,[r4,#0]
;;;779    
;;;780        kl520_customer_info Cusinfo;
;;;781        kl520_api_customer_get(&Cusinfo);
000012  4668              MOV      r0,sp
000014  f7fffffe          BL       kl520_api_customer_get
;;;782    
;;;783        if (user_rotate_enable)
000018  b10c              CBZ      r4,|L16.30|
;;;784            user_rotate_enable = ROTATE_180_ENABLE;
00001a  2496              MOVS     r4,#0x96
00001c  e000              B        |L16.32|
                  |L16.30|
;;;785        else
;;;786            user_rotate_enable = ROTATE_180_DISABLE;
00001e  24ff              MOVS     r4,#0xff
                  |L16.32|
;;;787    
;;;788        if (Cusinfo.user_rotate_180 !=user_rotate_enable)
000020  f89d0028          LDRB     r0,[sp,#0x28]
000024  42a0              CMP      r0,r4
000026  d008              BEQ      |L16.58|
;;;789        {
;;;790            dbg_msg_console("Save rotate setting to flash");
000028  a10d              ADR      r1,|L16.96|
00002a  2001              MOVS     r0,#1
00002c  f7fffffe          BL       kdp_level_printf
;;;791            Cusinfo.user_rotate_180 =user_rotate_enable;
000030  f88d4028          STRB     r4,[sp,#0x28]
;;;792            kl520_api_customer_write(&Cusinfo);
000034  4668              MOV      r0,sp
000036  f7fffffe          BL       kl520_api_customer_write
                  |L16.58|
;;;793        }
;;;794    
;;;795        send_reply_AesNoDataMsg(MR_SUCCESS, KID_USER_ROTATE_180);
00003a  21cd              MOVS     r1,#0xcd
00003c  2000              MOVS     r0,#0
00003e  f7fffffe          BL       send_reply_AesNoDataMsg
;;;796        
;;;797        return;
;;;798    }
000042  b00c              ADD      sp,sp,#0x30
000044  bd10              POP      {r4,pc}
;;;799    #endif
                          ENDP

000046  0000              DCW      0x0000
                  |L16.72|
000048  4b49445f          DCB      "KID_USER_ROTATE_180",0
00004c  55534552
000050  5f524f54
000054  4154455f
000058  31383000
                  |L16.92|
                          DCD      ||i.user_lwcom_parser||+0x434
                  |L16.96|
000060  53617665          DCB      "Save rotate setting to flash\r\n",0
000064  20726f74
000068  61746520
00006c  73657474
000070  696e6720
000074  746f2066
000078  6c617368
00007c  0d0a00  
00007f  00                DCB      0

                          AREA ||i.init_user_com_thread||, CODE, READONLY, ALIGN=2

                  init_user_com_thread PROC
;;;2525   
;;;2526   void init_user_com_thread(void)
000000  b510              PUSH     {r4,lr}
;;;2527   {
;;;2528       if (NULL == user_com_event_id){
000002  4c0e              LDR      r4,|L17.60|
000004  b08a              SUB      sp,sp,#0x28           ;2527
000006  68a0              LDR      r0,[r4,#8]            ;2527  ; user_com_event_id
000008  b910              CBNZ     r0,|L17.16|
;;;2529           user_com_event_id = create_event();
00000a  f7fffffe          BL       create_event
00000e  60a0              STR      r0,[r4,#8]  ; user_com_event_id
                  |L17.16|
;;;2530       }
;;;2531       if (NULL == user_com_fdfr_evt) {
000010  68e0              LDR      r0,[r4,#0xc]  ; user_com_fdfr_evt
000012  b918              CBNZ     r0,|L17.28|
;;;2532           user_com_fdfr_evt = osEventFlagsNew(NULL);
000014  2000              MOVS     r0,#0
000016  f7fffffe          BL       osEventFlagsNew
00001a  60e0              STR      r0,[r4,#0xc]  ; user_com_fdfr_evt
                  |L17.28|
;;;2533       }
;;;2534       if (NULL == tid_user_com_fdfr_thread){
00001c  6920              LDR      r0,[r4,#0x10]  ; tid_user_com_fdfr_thread
00001e  2800              CMP      r0,#0
000020  d10a              BNE      |L17.56|
;;;2535           osThreadAttr_t attr = {
000022  2224              MOVS     r2,#0x24
000024  4906              LDR      r1,|L17.64|
000026  4668              MOV      r0,sp
000028  f7fffffe          BL       __aeabi_memcpy4
;;;2536               .stack_size = 1536
;;;2537           };
;;;2538           tid_user_com_fdfr_thread = osThreadNew((osThreadFunc_t)_user_com_fdfr_thread, NULL, &attr);
00002c  466a              MOV      r2,sp
00002e  2100              MOVS     r1,#0
000030  4804              LDR      r0,|L17.68|
000032  f7fffffe          BL       osThreadNew
000036  6120              STR      r0,[r4,#0x10]  ; tid_user_com_fdfr_thread
                  |L17.56|
;;;2539       }    
;;;2540   }
000038  b00a              ADD      sp,sp,#0x28
00003a  bd10              POP      {r4,pc}
;;;2541   
                          ENDP

                  |L17.60|
                          DCD      ||.data||
                  |L17.64|
                          DCD      ||.constdata||+0x14
                  |L17.68|
                          DCD      _user_com_fdfr_thread

                          AREA ||i.kl520_api_dp_draw_two_img||, CODE, READONLY, ALIGN=1

                  kl520_api_dp_draw_two_img PROC
;;;2050   #else
;;;2051   void kl520_api_dp_draw_two_img(u32 nImgAddr0, u32 nImgAddr1, u8 nRet)
000000  4770              BX       lr
;;;2052   {
;;;2053   #if ( CFG_PANEL_TYPE != PANEL_NULL )
;;;2054       int ret;
;;;2055   
;;;2056       do
;;;2057       {
;;;2058           if (nRet == 0)
;;;2059           {
;;;2060               KDP_CHK_BREAK(kl520_api_dp_draw_bitmap(0, 0, DISPLAY_WIDTH, DISPLAY_HEIGHT, (void *)nImgAddr0));
;;;2061           }
;;;2062           else
;;;2063           {
;;;2064               KDP_CHK_BREAK(kl520_api_dp_draw_bitmap(0, 0, DISPLAY_WIDTH, DISPLAY_HEIGHT, (void *)nImgAddr1));
;;;2065           }
;;;2066           KDP_CHK_BREAK(kl520_api_dp_fresh());
;;;2067   
;;;2068           osDelay(DISPLAY_RESULT_HOLD_TIME);
;;;2069           KDP_CHK_BREAK(kl520_api_dp_fresh_bg(BLACK, 2));
;;;2070       } while (0);
;;;2071   #endif
;;;2072   }
;;;2073   #endif
                          ENDP


                          AREA ||i.parse_enroll_msg||, CODE, READONLY, ALIGN=2

                  parse_enroll_msg PROC
;;;352    
;;;353    static void parse_enroll_msg(u8* pDataStart, u8 cmd)
000000  b57c              PUSH     {r2-r6,lr}
;;;354    {
000002  460e              MOV      r6,r1
000004  4605              MOV      r5,r0
;;;355        memset((void*)&msg_enroll,0,sizeof(msg_enroll));
000006  2126              MOVS     r1,#0x26
000008  4825              LDR      r0,|L19.160|
00000a  f7fffffe          BL       __aeabi_memclr
;;;356        msg_enroll.admin = *pDataStart;
00000e  4c24              LDR      r4,|L19.160|
000010  7828              LDRB     r0,[r5,#0]
000012  7020              STRB     r0,[r4,#0]
;;;357        memcpy((void*)msg_enroll.user_name, pDataStart+1,USER_NAME_SIZE);
000014  2220              MOVS     r2,#0x20
000016  1c69              ADDS     r1,r5,#1
000018  1c60              ADDS     r0,r4,#1
00001a  f7fffffe          BL       __aeabi_memcpy
;;;358        msg_enroll.cmd_id = cmd;
00001e  f8846025          STRB     r6,[r4,#0x25]
;;;359    	
;;;360    
;;;361        if(cmd == KID_ENROLL_OVERWRITE || cmd == KID_ENROLL) {
000022  2e14              CMP      r6,#0x14
000024  d007              BEQ      |L19.54|
000026  2e13              CMP      r6,#0x13
000028  d005              BEQ      |L19.54|
;;;362            msg_enroll.face_direction = *(pDataStart+33);
;;;363            msg_enroll.timeout = *(pDataStart+34);
;;;364        }
;;;365    #ifdef KID_ENROLL_SINGLE
;;;366        else if(cmd == KID_ENROLL_SINGLE) {
;;;367            msg_enroll.face_direction = KDP_FACE_DIRECTION_MIDDLE;
00002a  2001              MOVS     r0,#1
00002c  2e1d              CMP      r6,#0x1d              ;366
00002e  d008              BEQ      |L19.66|
;;;368            msg_enroll.timeout = *(pDataStart+34);
;;;369        }
;;;370    #endif
;;;371    #ifdef KID_ENROLL_ITG
;;;372        else if(cmd == KID_ENROLL_ITG) {
000030  2e26              CMP      r6,#0x26
000032  d00d              BEQ      |L19.80|
000034  e01f              B        |L19.118|
                  |L19.54|
000036  f8150f21          LDRB     r0,[r5,#0x21]!        ;362
00003a  f8840021          STRB     r0,[r4,#0x21]         ;362
00003e  7868              LDRB     r0,[r5,#1]            ;363
000040  e003              B        |L19.74|
                  |L19.66|
000042  f8840021          STRB     r0,[r4,#0x21]         ;367
000046  f8950022          LDRB     r0,[r5,#0x22]         ;368
                  |L19.74|
00004a  f8840024          STRB     r0,[r4,#0x24]         ;368
00004e  e012              B        |L19.118|
                  |L19.80|
;;;373            msg_enroll.enroll_type = pDataStart[34];
000050  f8951022          LDRB     r1,[r5,#0x22]
000054  f8841022          STRB     r1,[r4,#0x22]
;;;374            msg_enroll.enable_duplicate = pDataStart[35];
000058  f8951023          LDRB     r1,[r5,#0x23]
00005c  f8841023          STRB     r1,[r4,#0x23]
;;;375            msg_enroll.timeout = pDataStart[36];
000060  f8951024          LDRB     r1,[r5,#0x24]
000064  f8841024          STRB     r1,[r4,#0x24]
;;;376            if (0 == msg_enroll.enroll_type) {
000068  f8941022          LDRB     r1,[r4,#0x22]  ; msg_enroll
00006c  b909              CBNZ     r1,|L19.114|
;;;377                msg_enroll.face_direction = pDataStart[33];
00006e  f8950021          LDRB     r0,[r5,#0x21]
                  |L19.114|
;;;378            } else {
;;;379                msg_enroll.face_direction = KDP_FACE_DIRECTION_MIDDLE;
000072  f8840021          STRB     r0,[r4,#0x21]
                  |L19.118|
;;;380            }
;;;381        }
;;;382    #endif
;;;383    	//zcy add for test
;;;384    		if(msg_enroll.timeout <=0)
000076  f8940024          LDRB     r0,[r4,#0x24]  ; msg_enroll
00007a  4623              MOV      r3,r4
00007c  b910              CBNZ     r0,|L19.132|
;;;385    			msg_enroll.timeout = ENROLL_DEFAULT_TIME;
00007e  2009              MOVS     r0,#9
000080  f8830024          STRB     r0,[r3,#0x24]
                  |L19.132|
;;;386    		
;;;387        dbg_msg_console("msg_enroll:admin:0x%02x,user_name:%s,face_dir:0x%02x,timeout:0x%02x ",
000084  f8931024          LDRB     r1,[r3,#0x24]  ; msg_enroll
000088  f8930021          LDRB     r0,[r3,#0x21]  ; msg_enroll
00008c  e9cd0100          STRD     r0,r1,[sp,#0]
000090  781a              LDRB     r2,[r3,#0]  ; msg_enroll
000092  1c63              ADDS     r3,r4,#1
000094  4903              LDR      r1,|L19.164|
000096  2001              MOVS     r0,#1
000098  f7fffffe          BL       kdp_level_printf
;;;388            msg_enroll.admin, msg_enroll.user_name, msg_enroll.face_direction, msg_enroll.timeout);
;;;389        
;;;390        return;
;;;391    }
00009c  bd7c              POP      {r2-r6,pc}
;;;392    
                          ENDP

00009e  0000              DCW      0x0000
                  |L19.160|
                          DCD      ||.bss||
                  |L19.164|
                          DCD      ||.conststring||+0x28c

                          AREA ||i.update_db_import_info||, CODE, READONLY, ALIGN=2

                  update_db_import_info PROC
;;;177    
;;;178    static void update_db_import_info(u32 addr, u32 size, u16 user_id)
000000  4b03              LDR      r3,|L20.16|
;;;179    {
;;;180        db_import_info.addr = addr;
000002  e9c30100          STRD     r0,r1,[r3,#0]
;;;181        db_import_info.size = size;
;;;182        db_import_user_id = user_id;
000006  f1a30028          SUB      r0,r3,#0x28
00000a  80c2              STRH     r2,[r0,#6]
;;;183    }
00000c  4770              BX       lr
;;;184    
                          ENDP

00000e  0000              DCW      0x0000
                  |L20.16|
                          DCD      ||.data||+0x28

                          AREA ||i.user_com_GetOtaStatus||, CODE, READONLY, ALIGN=1

                  user_com_GetOtaStatus PROC
;;;1956   
;;;1957   u8 user_com_GetOtaStatus(void)
000000  f7ffbffe          B.W      get_mass_data_status
;;;1958   {
;;;1959       return get_mass_data_status();
;;;1960   }
;;;1961   
                          ENDP


                          AREA ||i.user_com_event_interrupt||, CODE, READONLY, ALIGN=2

                  user_com_event_interrupt PROC
;;;2512   }
;;;2513   void user_com_event_interrupt(void) {
000000  b570              PUSH     {r4-r6,lr}
;;;2514       //only one thread call this func, so no need mutex
;;;2515       if(kl520_is_fdfr_abort() == 1) return; 
000002  f7fffffe          BL       kl520_is_fdfr_abort
000006  2801              CMP      r0,#1
000008  d034              BEQ      |L22.116|
;;;2516   
;;;2517       osEventFlagsClear(user_com_fdfr_evt, USER_COM_EVENT_CMD_READY | USER_COM_EVENT_FDR_OPENED);
00000a  4c1b              LDR      r4,|L22.120|
00000c  2103              MOVS     r1,#3
00000e  68e0              LDR      r0,[r4,#0xc]  ; user_com_fdfr_evt
000010  f7fffffe          BL       osEventFlagsClear
;;;2518       kl520_set_fdfr_abort(1); //set abort flag
000014  2001              MOVS     r0,#1
000016  f7fffffe          BL       kl520_set_fdfr_abort
00001a  7860              LDRB     r0,[r4,#1]  ; g_eUserComThreadEvent
00001c  f2413588          MOV      r5,#0x1388
000020  2880              CMP      r0,#0x80
;;;2519   
;;;2520       _user_com_force_abort_fdfr();
000022  d00b              BEQ      |L22.60|
000024  7860              LDRB     r0,[r4,#1]  ; g_eUserComThreadEvent
000026  2881              CMP      r0,#0x81
000028  d008              BEQ      |L22.60|
00002a  f7fffffe          BL       sample_face_close
                  |L22.46|
00002e  7860              LDRB     r0,[r4,#1]  ; g_eUserComThreadEvent
000030  2880              CMP      r0,#0x80
000032  d014              BEQ      |L22.94|
000034  7860              LDRB     r0,[r4,#1]  ; g_eUserComThreadEvent
000036  2881              CMP      r0,#0x81
000038  d011              BEQ      |L22.94|
00003a  e016              B        |L22.106|
                  |L22.60|
00003c  f7fffffe          BL       kl520_fdfr_opened
000040  b928              CBNZ     r0,|L22.78|
000042  462b              MOV      r3,r5
000044  2200              MOVS     r2,#0
000046  2103              MOVS     r1,#3
000048  68e0              LDR      r0,[r4,#0xc]  ; user_com_fdfr_evt
00004a  f7fffffe          BL       osEventFlagsWait
                  |L22.78|
00004e  f7fffffe          BL       sample_face_close
000052  f7fffffe          BL       kl520_api_get_event
000056  2102              MOVS     r1,#2
000058  f7fffffe          BL       set_event
00005c  e7e7              B        |L22.46|
                  |L22.94|
00005e  462b              MOV      r3,r5
000060  2200              MOVS     r2,#0
000062  2101              MOVS     r1,#1
000064  68e0              LDR      r0,[r4,#0xc]  ; user_com_fdfr_evt
000066  f7fffffe          BL       osEventFlagsWait
                  |L22.106|
;;;2521       _wait_user_com_thread_event();
;;;2522   
;;;2523       kl520_set_fdfr_abort(0); //clear abort flag
00006a  e8bd4070          POP      {r4-r6,lr}
00006e  2000              MOVS     r0,#0
000070  f7ffbffe          B.W      kl520_set_fdfr_abort
                  |L22.116|
;;;2524   }
000074  bd70              POP      {r4-r6,pc}
;;;2525   
                          ENDP

000076  0000              DCW      0x0000
                  |L22.120|
                          DCD      ||.data||

                          AREA ||i.user_com_event_power_off||, CODE, READONLY, ALIGN=1

                  user_com_event_power_off PROC
;;;1962   #ifdef KID_POWERDOWN
;;;1963   void user_com_event_power_off(void)
000000  f7ffbffe          B.W      send_power_off_reply_msg
;;;1964   {
;;;1965       send_power_off_reply_msg();
;;;1966   #if CFG_KL520_VERSION == KL520A
;;;1967       osDelay(50);
;;;1968       kl520_api_poweroff();
;;;1969   #endif
;;;1970   }
;;;1971   #endif
                          ENDP


                          AREA ||i.user_com_event_start||, CODE, READONLY, ALIGN=2

                  user_com_event_start PROC
;;;2509   
;;;2510   void user_com_event_start(u32 event) {
000000  4601              MOV      r1,r0
;;;2511       set_event(user_com_event_id, event);
000002  4802              LDR      r0,|L24.12|
000004  6880              LDR      r0,[r0,#8]  ; user_com_event_id
000006  f7ffbffe          B.W      set_event
;;;2512   }
;;;2513   void user_com_event_interrupt(void) {
                          ENDP

00000a  0000              DCW      0x0000
                  |L24.12|
                          DCD      ||.data||

                          AREA ||i.user_com_init||, CODE, READONLY, ALIGN=2

                  user_com_init PROC
;;;1921   
;;;1922   void user_com_init(void)
000000  4801              LDR      r0,|L25.8|
;;;1923   {
;;;1924       kl520_com_reg_user_ops(&_user_com_ops);
000002  f7ffbffe          B.W      kl520_com_reg_user_ops
;;;1925   }
;;;1926   #endif
                          ENDP

000006  0000              DCW      0x0000
                  |L25.8|
                          DCD      ||.data||+0x18

                          AREA ||i.user_com_response_data||, CODE, READONLY, ALIGN=2

                  user_com_response_data PROC
;;;1973   extern u32 last_hb_tick;
;;;1974   void user_com_response_data(u8* p_data, u16 size)  //p_data cmd,size,data
000000  b570              PUSH     {r4-r6,lr}
;;;1975   {
;;;1976   #if ( CFG_COM_BUS_TYPE&COM_BUS_UART_MASK )
;;;1977       if (g_bResponseEn)
000002  4c18              LDR      r4,|L26.100|
000004  4606              MOV      r6,r0                 ;1975
000006  460d              MOV      r5,r1                 ;1975
000008  7820              LDRB     r0,[r4,#0]  ; g_bResponseEn
00000a  2800              CMP      r0,#0                 ;1975
00000c  d129              BNE      |L26.98|
;;;1978       {
;;;1979           return;
;;;1980       }
;;;1981   
;;;1982       if (NULL == p_data)
00000e  2e00              CMP      r6,#0
000010  d027              BEQ      |L26.98|
;;;1983       {
;;;1984           dbg_msg_com("NULL == p_data");
;;;1985           return;
;;;1986       }
;;;1987       if (0 < size)
000012  b305              CBZ      r5,|L26.86|
;;;1988       {
;;;1989           g_bAutoPowerOff = FALSE;
000014  4914              LDR      r1,|L26.104|
000016  7008              STRB     r0,[r1,#0]
;;;1990           g_nAutoPowerOffCnt = 0;
000018  4914              LDR      r1,|L26.108|
;;;1991   
;;;1992   //        osThreadId_t thread =  osThreadGetId();
;;;1993   //        osPriority_t CurPriority = osThreadGetPriority (thread);
;;;1994   //
;;;1995   //        if(CurPriority != osPriorityAboveNormal5)
;;;1996   //            osThreadSetPriority(thread, osPriorityAboveNormal5);
;;;1997   
;;;1998           if( p_data[0]!=COM_BUS_HEAD_TX_1 || p_data[1]!=COM_BUS_HEAD_TX_2 )
;;;1999           {
;;;2000                           //p_data[0]=0xef;   p_data[1]=0xaa;
;;;2001               //dbg_msg_console("$$222$$$$ p_data[0]:0x%02x,p_data[1]:0x%02x,p_data[2]:0x%02x $$222$$$",p_data[0],p_data[1],p_data[2]);
;;;2002           }
;;;2003           
;;;2004           if(mutex_rsp_msg) osMutexAcquire(mutex_rsp_msg, osWaitForever);
00001a  6008              STR      r0,[r1,#0]  ; g_nAutoPowerOffCnt
00001c  6960              LDR      r0,[r4,#0x14]  ; mutex_rsp_msg
00001e  b118              CBZ      r0,|L26.40|
000020  f04f31ff          MOV      r1,#0xffffffff
000024  f7fffffe          BL       osMutexAcquire
                  |L26.40|
;;;2005   #ifdef DEV_PKT_LOG_DETAIL
;;;2006           dbg_msg_nocrlf("%d -- Tx: ", osKernelGetTickCount());
;;;2007           for(u8 i=0; i<size; i++) {
;;;2008               dbg_msg_nocrlf("%02x ", p_data[i]);
;;;2009           }
;;;2010           dbg_msg_nocrlf("\r\n");
;;;2011   #endif
;;;2012   
;;;2013           if( kdp_uart_write( stCom_type.uart_port, p_data, size) == UART_API_ERROR )
000028  4811              LDR      r0,|L26.112|
00002a  462a              MOV      r2,r5
00002c  4631              MOV      r1,r6
00002e  7840              LDRB     r0,[r0,#1]  ; stCom_type
000030  f7fffffe          BL       kdp_uart_write
000034  2810              CMP      r0,#0x10
000036  d103              BNE      |L26.64|
;;;2014           {
;;;2015               dbg_msg_console("Response Uart Tx fail");
000038  a10e              ADR      r1,|L26.116|
00003a  2001              MOVS     r0,#1
00003c  f7fffffe          BL       kdp_level_printf
                  |L26.64|
;;;2016           }
;;;2017           last_hb_tick = osKernelGetTickCount();
000040  f7fffffe          BL       osKernelGetTickCount
000044  4911              LDR      r1,|L26.140|
;;;2018           if(mutex_rsp_msg) osMutexRelease(mutex_rsp_msg);
000046  6008              STR      r0,[r1,#0]  ; last_hb_tick
000048  6960              LDR      r0,[r4,#0x14]  ; mutex_rsp_msg
00004a  2800              CMP      r0,#0
00004c  d009              BEQ      |L26.98|
00004e  e8bd4070          POP      {r4-r6,lr}
000052  f7ffbffe          B.W      osMutexRelease
                  |L26.86|
;;;2019           //dbg_msg_console("Response end");
;;;2020           //kl520_com_response( &stCom_type );//lmm-edit
;;;2021       }
;;;2022       else
;;;2023       {
;;;2024           dbg_msg_console("size =< 0");
000056  e8bd4070          POP      {r4-r6,lr}
00005a  a10d              ADR      r1,|L26.144|
00005c  2001              MOVS     r0,#1
00005e  f7ffbffe          B.W      kdp_level_printf
                  |L26.98|
;;;2025       }
;;;2026   #endif
;;;2027   }
000062  bd70              POP      {r4-r6,pc}
;;;2028   
                          ENDP

                  |L26.100|
                          DCD      ||.data||
                  |L26.104|
                          DCD      g_bAutoPowerOff
                  |L26.108|
                          DCD      g_nAutoPowerOffCnt
                  |L26.112|
                          DCD      stCom_type
                  |L26.116|
000074  52657370          DCB      "Response Uart Tx fail\r\n",0
000078  6f6e7365
00007c  20556172
000080  74205478
000084  20666169
000088  6c0d0a00
                  |L26.140|
                          DCD      last_hb_tick
                  |L26.144|
000090  73697a65          DCB      "size =< 0\r\n",0
000094  203d3c20
000098  300d0a00

                          AREA ||i.user_com_thread_event_check_set||, CODE, READONLY, ALIGN=2

                  user_com_thread_event_check_set PROC
;;;63     
;;;64     bool user_com_thread_event_check_set(u32 flag)
000000  b570              PUSH     {r4-r6,lr}
;;;65     {
;;;66         if (g_eUserComThreadEvent > USER_COM_THREAD_EVENT_READY) {
000002  4c18              LDR      r4,|L27.100|
000004  4606              MOV      r6,r0                 ;65
000006  7860              LDRB     r0,[r4,#1]  ; g_eUserComThreadEvent
000008  b110              CBZ      r0,|L27.16|
;;;67             osDelay(200); //if this command too fast but the prev one not finished.
00000a  20c8              MOVS     r0,#0xc8
00000c  f7fffffe          BL       osDelay
                  |L27.16|
;;;68         }
;;;69         
;;;70         if(g_eUserComThreadEvent == USER_COM_THREAD_EVENT_OTA_FLASH) return TRUE;
000010  7860              LDRB     r0,[r4,#1]  ; g_eUserComThreadEvent
000012  2803              CMP      r0,#3
000014  d01a              BEQ      |L27.76|
;;;71         
;;;72         if(g_eUserComThreadEvent == USER_COM_THREAD_EVENT_NON_OVERWRITABLE) { //reject
000016  7860              LDRB     r0,[r4,#1]  ; g_eUserComThreadEvent
000018  2802              CMP      r0,#2
00001a  d019              BEQ      |L27.80|
;;;73             dbg_msg_console("[BYPASS]");
;;;74             return TRUE;
;;;75         }
;;;76         
;;;77         enum USER_COM_THREAD_EVENT n_sta = USER_COM_THREAD_EVENT_READY; //new state
00001c  2500              MOVS     r5,#0
;;;78         if(flag == USER_COM_FLAG_RECOGNITION) {
00001e  2e02              CMP      r6,#2
000020  d01b              BEQ      |L27.90|
;;;79             n_sta = USER_COM_THREAD_EVENT_VERIFY;
;;;80         } else if(flag == USER_COM_FLAG_REGISTRATION) {
000022  2e01              CMP      r6,#1
000024  d01b              BEQ      |L27.94|
;;;81             n_sta = USER_COM_THREAD_EVENT_ENROLL;
;;;82         } else if(flag == 0) { //demo
000026  b106              CBZ      r6,|L27.42|
;;;83             //not set new state
;;;84         } else {
;;;85             n_sta = USER_COM_THREAD_EVENT_NON_OVERWRITABLE;
000028  2502              MOVS     r5,#2
                  |L27.42|
;;;86         }
;;;87         
;;;88         if (g_eUserComThreadEvent <= USER_COM_THREAD_EVENT_READY) { //event ready
00002a  7860              LDRB     r0,[r4,#1]  ; g_eUserComThreadEvent
00002c  b150              CBZ      r0,|L27.68|
;;;89             if(flag) g_eUserComThreadEvent = (enum USER_COM_THREAD_EVENT)n_sta;
;;;90             return FALSE;
;;;91         }
;;;92         
;;;93         // overwritable
;;;94         // if(flag == 0 || n_sta != g_eUserComThreadEvent)
;;;95         { //abort the running one
;;;96             g_bResponseEn = TRUE;
00002e  2001              MOVS     r0,#1
000030  7020              STRB     r0,[r4,#0]
;;;97             user_com_event_interrupt();
000032  f7fffffe          BL       user_com_event_interrupt
;;;98             user_com_thread_event_set(USER_COM_THREAD_EVENT_READY);
000036  2000              MOVS     r0,#0
000038  7060              STRB     r0,[r4,#1]
;;;99             g_bResponseEn = FALSE;
00003a  7020              STRB     r0,[r4,#0]
;;;100            dbg_msg_console("[FORCE]");
00003c  a10a              ADR      r1,|L27.104|
00003e  2001              MOVS     r0,#1
000040  f7fffffe          BL       kdp_level_printf
                  |L27.68|
000044  b106              CBZ      r6,|L27.72|
000046  7065              STRB     r5,[r4,#1]            ;89
                  |L27.72|
;;;101            if(flag) g_eUserComThreadEvent = (enum USER_COM_THREAD_EVENT)n_sta;
;;;102        }
;;;103        
;;;104        return FALSE;
000048  2000              MOVS     r0,#0
;;;105    }
00004a  bd70              POP      {r4-r6,pc}
                  |L27.76|
00004c  2001              MOVS     r0,#1                 ;70
00004e  bd70              POP      {r4-r6,pc}
                  |L27.80|
000050  a108              ADR      r1,|L27.116|
000052  2001              MOVS     r0,#1                 ;73
000054  f7fffffe          BL       kdp_level_printf
000058  e7f8              B        |L27.76|
                  |L27.90|
00005a  2581              MOVS     r5,#0x81              ;79
00005c  e7e5              B        |L27.42|
                  |L27.94|
00005e  2580              MOVS     r5,#0x80              ;81
000060  e7e3              B        |L27.42|
;;;106    
                          ENDP

000062  0000              DCW      0x0000
                  |L27.100|
                          DCD      ||.data||
                  |L27.104|
000068  5b464f52          DCB      "[FORCE]\r\n",0
00006c  43455d0d
000070  0a00    
000072  00                DCB      0
000073  00                DCB      0
                  |L27.116|
000074  5b425950          DCB      "[BYPASS]\r\n",0
000078  4153535d
00007c  0d0a00  
00007f  00                DCB      0

                          AREA ||i.user_com_thread_event_get||, CODE, READONLY, ALIGN=2

                  user_com_thread_event_get PROC
;;;2079   
;;;2080   enum USER_COM_THREAD_EVENT user_com_thread_event_get(void)
000000  4801              LDR      r0,|L28.8|
;;;2081   {
;;;2082       return g_eUserComThreadEvent;
000002  7840              LDRB     r0,[r0,#1]  ; g_eUserComThreadEvent
;;;2083   }
000004  4770              BX       lr
;;;2084   
                          ENDP

000006  0000              DCW      0x0000
                  |L28.8|
                          DCD      ||.data||

                          AREA ||i.user_com_thread_event_ota_copy_to_flash||, CODE, READONLY, ALIGN=2

                  user_com_thread_event_ota_copy_to_flash PROC
;;;106    
;;;107    bool user_com_thread_event_ota_copy_to_flash(void)
000000  b570              PUSH     {r4-r6,lr}
;;;108    {
;;;109        dbg_msg_algo ("settting ota status:%d.", g_eUserComThreadEvent);
;;;110        if (g_eUserComThreadEvent > USER_COM_THREAD_EVENT_READY) {
000002  4c17              LDR      r4,|L29.96|
000004  7860              LDRB     r0,[r4,#1]  ; g_eUserComThreadEvent
000006  b110              CBZ      r0,|L29.14|
;;;111            osDelay(200); //if this command too fast but the prev one not finished.
000008  20c8              MOVS     r0,#0xc8
00000a  f7fffffe          BL       osDelay
                  |L29.14|
;;;112        }
;;;113        
;;;114        if(g_eUserComThreadEvent == USER_COM_THREAD_EVENT_OTA_FLASH) return TRUE;
00000e  7860              LDRB     r0,[r4,#1]  ; g_eUserComThreadEvent
000010  2803              CMP      r0,#3
000012  d004              BEQ      |L29.30|
;;;115        
;;;116        for (int i = 0; i < 25; i++) {
000014  2500              MOVS     r5,#0
                  |L29.22|
;;;117            if(g_eUserComThreadEvent == USER_COM_THREAD_EVENT_NON_OVERWRITABLE) {
000016  7860              LDRB     r0,[r4,#1]  ; g_eUserComThreadEvent
000018  2802              CMP      r0,#2
00001a  d002              BEQ      |L29.34|
00001c  e007              B        |L29.46|
                  |L29.30|
00001e  2001              MOVS     r0,#1                 ;114
;;;118                osDelay(200); //wait
;;;119            } else {
;;;120                break;
;;;121            }
;;;122        }
;;;123        
;;;124        if(g_eUserComThreadEvent == USER_COM_THREAD_EVENT_NON_OVERWRITABLE) { //reject
;;;125            dbg_msg_console("other command is writing flash.");
;;;126            return TRUE;
;;;127        }
;;;128        
;;;129        if (g_eUserComThreadEvent <= USER_COM_THREAD_EVENT_READY) { //event ready
;;;130            g_eUserComThreadEvent = USER_COM_THREAD_EVENT_OTA_FLASH;
;;;131            return FALSE;
;;;132        }
;;;133        
;;;134        if (g_eUserComThreadEvent == USER_COM_THREAD_EVENT_VERIFY || 
;;;135                g_eUserComThreadEvent == USER_COM_THREAD_EVENT_ENROLL) {
;;;136            user_com_event_interrupt();
;;;137            g_eUserComThreadEvent = USER_COM_THREAD_EVENT_OTA_FLASH;
;;;138            return FALSE;
;;;139        }
;;;140        
;;;141        return FALSE;
;;;142    }
000020  bd70              POP      {r4-r6,pc}
                  |L29.34|
000022  20c8              MOVS     r0,#0xc8              ;118
000024  f7fffffe          BL       osDelay
000028  1c6d              ADDS     r5,r5,#1              ;118
00002a  2d19              CMP      r5,#0x19              ;116
00002c  dbf3              BLT      |L29.22|
                  |L29.46|
00002e  7860              LDRB     r0,[r4,#1]            ;124  ; g_eUserComThreadEvent
000030  2802              CMP      r0,#2                 ;124
000032  d009              BEQ      |L29.72|
000034  7860              LDRB     r0,[r4,#1]            ;129  ; g_eUserComThreadEvent
000036  2503              MOVS     r5,#3                 ;130
000038  b158              CBZ      r0,|L29.82|
00003a  7860              LDRB     r0,[r4,#1]            ;134  ; g_eUserComThreadEvent
00003c  2881              CMP      r0,#0x81              ;134
00003e  d00b              BEQ      |L29.88|
000040  7860              LDRB     r0,[r4,#1]            ;135  ; g_eUserComThreadEvent
000042  2880              CMP      r0,#0x80              ;135
000044  d008              BEQ      |L29.88|
000046  e005              B        |L29.84|
                  |L29.72|
000048  a106              ADR      r1,|L29.100|
00004a  2001              MOVS     r0,#1                 ;125
00004c  f7fffffe          BL       kdp_level_printf
000050  e7e5              B        |L29.30|
                  |L29.82|
000052  7065              STRB     r5,[r4,#1]            ;130
                  |L29.84|
000054  2000              MOVS     r0,#0                 ;141
000056  bd70              POP      {r4-r6,pc}
                  |L29.88|
000058  f7fffffe          BL       user_com_event_interrupt
00005c  e7f9              B        |L29.82|
;;;143    
                          ENDP

00005e  0000              DCW      0x0000
                  |L29.96|
                          DCD      ||.data||
                  |L29.100|
000064  6f746865          DCB      "other command is writing flash.\r\n",0
000068  7220636f
00006c  6d6d616e
000070  64206973
000074  20777269
000078  74696e67
00007c  20666c61
000080  73682e0d
000084  0a00    
000086  00                DCB      0
000087  00                DCB      0

                          AREA ||i.user_com_thread_event_set||, CODE, READONLY, ALIGN=2

                  user_com_thread_event_set PROC
;;;2074   
;;;2075   void user_com_thread_event_set(enum USER_COM_THREAD_EVENT eState)
000000  4901              LDR      r1,|L30.8|
;;;2076   {
;;;2077       g_eUserComThreadEvent = eState;
000002  7048              STRB     r0,[r1,#1]
;;;2078   }
000004  4770              BX       lr
;;;2079   
                          ENDP

000006  0000              DCW      0x0000
                  |L30.8|
                          DCD      ||.data||

                          AREA ||i.user_lwcom_parser||, CODE, READONLY, ALIGN=2

                  user_lwcom_parser PROC
;;;1101   
;;;1102   void user_lwcom_parser( struct st_com_type *st_com )  //lmm-edit  parser func.
000000  b5f0              PUSH     {r4-r7,lr}
;;;1103   {
;;;1104       //s32 ret = 0;
;;;1105       u8 cmd = st_com->cmd;
000002  f8905022          LDRB     r5,[r0,#0x22]
;;;1106       u8* pDataStart = st_com->parser_buffer + st_com->data_start_index;
000006  6941              LDR      r1,[r0,#0x14]
000008  f8b00027          LDRH     r0,[r0,#0x27]
00000c  b0e3              SUB      sp,sp,#0x18c          ;1103
00000e  180c              ADDS     r4,r1,r0
;;;1107   
;;;1108   #ifdef GET_HOST_CAMERA_STATUS
;;;1109       if(GET_HOST_CAMERA_STATUS())
;;;1110       {
;;;1111           send_reply_AesNoDataMsg(MR_FAILED_CATEYE_RUNNING, cmd);
;;;1112           return;
;;;1113       }
;;;1114   #endif
;;;1115   
;;;1116       wait_fr_update_thread();
000010  f7fffffe          BL       wait_fr_update_thread
000014  4efb              LDR      r6,|L31.1028|
;;;1117       
;;;1118   #if ( CFG_GUI_ENABLE == YES )
;;;1119       user_com_src = GUI_FSM_SRC_USER_COM;
;;;1120   #endif
;;;1121   
;;;1122       switch( cmd )
000016  2d52              CMP      r5,#0x52
000018  d07d              BEQ      |L31.278|
00001a  dc2c              BGT      |L31.118|
00001c  2d26              CMP      r5,#0x26
00001e  d07b              BEQ      |L31.280|
000020  dc10              BGT      |L31.68|
000022  f1a50010          SUB      r0,r5,#0x10
000026  2815              CMP      r0,#0x15
000028  d25c              BCS      |L31.228|
00002a  e8dff000          TBB      [pc,r0]
00002e  f9f8              DCB      0xf9,0xf8
000030  f7f6f65b          DCB      0xf7,0xf6,0xf6,0x5b
000034  5b5b5b5b          DCB      0x5b,0x5b,0x5b,0x5b
000038  5b5b5bf5          DCB      0x5b,0x5b,0x5b,0xf5
00003c  5b5bf4f3          DCB      0x5b,0x5b,0xf4,0xf3
000040  f2f9f100          DCB      0xf2,0xf9,0xf1,0x00
                  |L31.68|
000044  2d42              CMP      r5,#0x42
000046  d068              BEQ      |L31.282|
000048  dc0c              BGT      |L31.100|
00004a  2d3b              CMP      r5,#0x3b
00004c  d073              BEQ      |L31.310|
00004e  dc04              BGT      |L31.90|
000050  2d30              CMP      r5,#0x30
000052  d063              BEQ      |L31.284|
000054  2d3a              CMP      r5,#0x3a
000056  d145              BNE      |L31.228|
000058  e08d              B        |L31.374|
                  |L31.90|
00005a  2d40              CMP      r5,#0x40
00005c  d06c              BEQ      |L31.312|
00005e  2d41              CMP      r5,#0x41
000060  d140              BNE      |L31.228|
000062  e35e              B        |L31.1826|
                  |L31.100|
000064  2d43              CMP      r5,#0x43
000066  d068              BEQ      |L31.314|
000068  2d44              CMP      r5,#0x44
00006a  d067              BEQ      |L31.316|
00006c  2d50              CMP      r5,#0x50
00006e  d07a              BEQ      |L31.358|
000070  2d51              CMP      r5,#0x51
000072  d137              BNE      |L31.228|
000074  e2a8              B        |L31.1480|
                  |L31.118|
000076  2dac              CMP      r5,#0xac
000078  d076              BEQ      |L31.360|
00007a  dc19              BGT      |L31.176|
00007c  2d7d              CMP      r5,#0x7d
00007e  d074              BEQ      |L31.362|
000080  dc0c              BGT      |L31.156|
000082  2d75              CMP      r5,#0x75
000084  d072              BEQ      |L31.364|
000086  dc04              BGT      |L31.146|
000088  2d53              CMP      r5,#0x53
00008a  d070              BEQ      |L31.366|
00008c  2d6a              CMP      r5,#0x6a
00008e  d129              BNE      |L31.228|
000090  e055              B        |L31.318|
                  |L31.146|
000092  2d79              CMP      r5,#0x79
000094  d06c              BEQ      |L31.368|
000096  2d7c              CMP      r5,#0x7c
000098  d124              BNE      |L31.228|
00009a  e382              B        |L31.1954|
                  |L31.156|
00009c  2d7e              CMP      r5,#0x7e
00009e  d068              BEQ      |L31.370|
0000a0  2d7f              CMP      r5,#0x7f
0000a2  d067              BEQ      |L31.372|
0000a4  26ff              MOVS     r6,#0xff
0000a6  2daa              CMP      r5,#0xaa
0000a8  d079              BEQ      |L31.414|
0000aa  2dab              CMP      r5,#0xab
0000ac  d11a              BNE      |L31.228|
0000ae  e2c6              B        |L31.1598|
                  |L31.176|
0000b0  2dcd              CMP      r5,#0xcd
0000b2  d075              BEQ      |L31.416|
0000b4  dc0e              BGT      |L31.212|
0000b6  f04f0700          MOV      r7,#0
0000ba  2dca              CMP      r5,#0xca
0000bc  d071              BEQ      |L31.418|
0000be  dc04              BGT      |L31.202|
0000c0  2dad              CMP      r5,#0xad
0000c2  d06f              BEQ      |L31.420|
0000c4  2dae              CMP      r5,#0xae
0000c6  d10d              BNE      |L31.228|
0000c8  e264              B        |L31.1428|
                  |L31.202|
0000ca  2dcb              CMP      r5,#0xcb
0000cc  d016              BEQ      |L31.252|
0000ce  2dcc              CMP      r5,#0xcc
0000d0  d108              BNE      |L31.228|
0000d2  e2c4              B        |L31.1630|
                  |L31.212|
0000d4  2dd4              CMP      r5,#0xd4
0000d6  d07a              BEQ      |L31.462|
0000d8  2ded              CMP      r5,#0xed
0000da  d079              BEQ      |L31.464|
0000dc  2df0              CMP      r5,#0xf0
0000de  d078              BEQ      |L31.466|
0000e0  2dfe              CMP      r5,#0xfe
0000e2  d078              BEQ      |L31.470|
                  |L31.228|
;;;1123       {
;;;1124   #ifdef KID_KN_DEVICE_INFO
;;;1125           case KID_KN_DEVICE_INFO:   //v//DEVICE_INFO:
;;;1126               handle_kn_device_info();
;;;1127               break;
;;;1128   #endif
;;;1129   
;;;1130   #ifdef KID_GET_VERSION
;;;1131           case KID_GET_VERSION:   //v//MID_GET_VERSION:
;;;1132               handle_get_version();
;;;1133               break;
;;;1134   #endif
;;;1135   #ifdef KID_GET_VERSION_ZA
;;;1136   				case KID_GET_VERSION_ZA:
;;;1137   					handle_get_version_zhian();
;;;1138   					break;
;;;1139   #endif
;;;1140   #ifdef KID_GET_VERSION_ZAPRD
;;;1141   				case KID_GET_VERSION_ZAPRD:
;;;1142   					handle_get_version_zhian_prd();
;;;1143   					break;
;;;1144   #endif
;;;1145   				
;;;1146   #ifdef KID_GET_VERSION_HARDWARE
;;;1147   				case KID_GET_VERSION_HARDWARE:
;;;1148   					handle_get_version_zhian_hard();
;;;1149   					break;
;;;1150   #endif
;;;1151   
;;;1152   #ifdef KID_DEMO_MODE
;;;1153           case KID_DEMO_MODE:  //MID_DEMOMODE:
;;;1154               handle_demo_mode(pDataStart);
;;;1155               break;
;;;1156   #endif
;;;1157   
;;;1158   #ifdef KID_DEBUG_MODE
;;;1159           case KID_DEBUG_MODE:    //MID_DEBUG_MODE:
;;;1160               handle_debug_mode(pDataStart);
;;;1161               break;
;;;1162   #endif
;;;1163   
;;;1164   #ifdef KID_SOFT_RESET
;;;1165           case KID_SOFT_RESET:         //MID_RESET:
;;;1166               handle_soft_reset(pDataStart);
;;;1167               break;
;;;1168   #endif
;;;1169   
;;;1170   #ifdef KID_POWERDOWN
;;;1171           case KID_POWERDOWN:     //MID_POWERDOWN:                //debug ok
;;;1172               handle_power_down();
;;;1173               break;
;;;1174   #endif
;;;1175   
;;;1176   #ifdef KID_GET_STATUS
;;;1177           case KID_GET_STATUS:    //MID_GETSTATUS:
;;;1178               handle_get_status();
;;;1179               break;
;;;1180   #endif
;;;1181   
;;;1182   #ifdef KID_VERIFY
;;;1183           case KID_VERIFY:        //MID_VERIFY:  //lmm-debug
;;;1184               handle_kid_verify(pDataStart);
;;;1185               break;
;;;1186   #endif
;;;1187   
;;;1188   #if defined KID_ENROLL || defined KID_ENROLL_OVERWRITE
;;;1189   #ifdef KID_ENROLL_OVERWRITE
;;;1190           case KID_ENROLL_OVERWRITE:
;;;1191   #endif
;;;1192   #ifdef KID_ENROLL
;;;1193           case KID_ENROLL:
;;;1194   #endif
;;;1195               handle_kid_enroll(pDataStart, cmd);
;;;1196               break;
;;;1197   #endif
;;;1198   
;;;1199   #ifdef KID_ENROLL_SINGLE
;;;1200           case KID_ENROLL_SINGLE:
;;;1201               handle_enroll_single(pDataStart, cmd);
;;;1202               break;
;;;1203   #endif
;;;1204   
;;;1205   #ifdef KID_ENROLL_ITG
;;;1206           case KID_ENROLL_ITG:
;;;1207               handle_enroll_itg(pDataStart, cmd);
;;;1208               break;
;;;1209   #endif
;;;1210   
;;;1211   #if defined(KID_FACE_RESET) ||  defined(KID_RESET)
;;;1212   #ifdef KID_RESET
;;;1213           case KID_RESET:
;;;1214   #endif
;;;1215   #ifdef KID_FACE_RESET
;;;1216           case KID_FACE_RESET:    //MID_FACERESET:
;;;1217   #endif
;;;1218               handle_face_reset(cmd);
;;;1219               break;
;;;1220   #endif
;;;1221   
;;;1222   #ifdef KID_DEL_USER
;;;1223           case KID_DEL_USER:          //MID_DELUSER:
;;;1224               handle_del_user(pDataStart);
;;;1225               break;
;;;1226   #endif
;;;1227   
;;;1228   #ifdef KID_DEL_ALL
;;;1229           case KID_DEL_ALL:           //MID_DELALL:
;;;1230               handle_del_all();
;;;1231               break;
;;;1232   #endif
;;;1233   
;;;1234   #ifdef KID_GET_USER_INFO
;;;1235           case KID_GET_USER_INFO:     //MID_GETUSERINFO:  //debug ok
;;;1236               handle_get_user(pDataStart);
;;;1237               break;
;;;1238   #endif
;;;1239   
;;;1240   #ifdef KID_GET_ALL_USER_ID
;;;1241           case KID_GET_ALL_USER_ID:   //MID_GET_ALL_USERID:	//debug ok
;;;1242               handle_get_all();
;;;1243               break;
;;;1244   #endif
;;;1245   
;;;1246   #if defined KID_SNAP_IMAGE || defined KID_KN_SNAP_IMAGE
;;;1247   #ifdef KID_SNAP_IMAGE
;;;1248           case KID_SNAP_IMAGE:
;;;1249   #endif
;;;1250   #ifdef KID_KN_SNAP_IMAGE
;;;1251           case KID_KN_SNAP_IMAGE:
;;;1252   #endif
;;;1253               handle_snap_image(pDataStart);
;;;1254               break;
;;;1255   #endif
;;;1256   
;;;1257   #if defined KID_GET_SAVED_IMAGE || defined KID_KN_GET_SAVED_IMAGE
;;;1258   #ifdef KID_GET_SAVED_IMAGE
;;;1259           case KID_GET_SAVED_IMAGE:
;;;1260   #endif
;;;1261   #ifdef KID_KN_GET_SAVED_IMAGE
;;;1262           case KID_KN_GET_SAVED_IMAGE:
;;;1263   #endif
;;;1264               handle_get_saved_image(pDataStart);
;;;1265               break;
;;;1266   #endif
;;;1267   
;;;1268   #if defined KID_UPLOAD_IMAGE || defined KID_KN_UPLOAD_IMAGE
;;;1269   #ifdef KID_UPLOAD_IMAGE
;;;1270           case KID_UPLOAD_IMAGE:
;;;1271   #endif
;;;1272   #ifdef KID_KN_UPLOAD_IMAGE
;;;1273           case KID_KN_UPLOAD_IMAGE:
;;;1274   #endif
;;;1275               handle_upload_image(pDataStart);
;;;1276               break;
;;;1277   #endif
;;;1278   
;;;1279   #ifdef KID_CONFIG_BAUDRATE
;;;1280           case KID_CONFIG_BAUDRATE:   //MID_CONFIG_BAUDRATE:
;;;1281               handle_config_baudrate(pDataStart);
;;;1282               break;
;;;1283   #endif
;;;1284   
;;;1285   #ifdef KID_SET_THRESHOLD_LEVEL
;;;1286           case KID_SET_THRESHOLD_LEVEL:   //MID_SET_THRESHOLD_LEVEL:
;;;1287               handle_threshold_level(pDataStart);
;;;1288               break;
;;;1289   #endif
;;;1290   
;;;1291   #ifdef KID_SW_BOOT_PART
;;;1292           case KID_SW_BOOT_PART:
;;;1293               handle_sw_boot_part(pDataStart);
;;;1294               break;
;;;1295   #endif
;;;1296   
;;;1297   #ifdef KID_GET_CUR_PART
;;;1298           case KID_GET_CUR_PART:
;;;1299               handle_get_cur_part();
;;;1300               break;
;;;1301   #endif
;;;1302   
;;;1303   #ifdef KID_MP_CALIBRATION
;;;1304           case KID_MP_CALIBRATION:
;;;1305               handle_mp_calibration(pDataStart);
;;;1306               break;
;;;1307   #endif
;;;1308   
;;;1309   #if ( ENCRYPTION_MODE&AES_ENCRYPTION ) || ( ENCRYPTION_MODE&XOR_ENCRYPTION )
;;;1310   #ifdef KID_INIT_ENCRYPTION
;;;1311           case KID_INIT_ENCRYPTION:   //MID_INIT_ENCRYPTION:
;;;1312               handle_init_encryption(pDataStart);
;;;1313               break;
;;;1314   #endif
;;;1315   
;;;1316   #ifdef KID_SET_RELEASE_ENC_KEY
;;;1317           case KID_SET_RELEASE_ENC_KEY:   //MID_SET_RELEASE_ENC_KEY:
;;;1318               handle_set_release_key(pDataStart);
;;;1319               break;
;;;1320   #endif
;;;1321   
;;;1322   #ifdef KID_SET_DEBUG_ENC_KEY
;;;1323           case KID_SET_DEBUG_ENC_KEY: //MID_SET_DEBUG_ENC_KEY:
;;;1324               handle_set_debug_key(pDataStart);
;;;1325               break;
;;;1326   #endif
;;;1327   #endif
;;;1328   
;;;1329   #ifdef KID_USER_ROTATE_180
;;;1330           case KID_USER_ROTATE_180:
;;;1331               handle_user_rotate_sensor(pDataStart);
;;;1332               break;
;;;1333   #endif
;;;1334   
;;;1335   //-----0xF8-0xFF OTA
;;;1336   #ifdef KID_START_OTA
;;;1337           case KID_START_OTA:         //MID_START_OTA
;;;1338               handle_start_ota(pDataStart);
;;;1339               break;
;;;1340   #endif
;;;1341   
;;;1342   #ifdef KID_STOP_OTA
;;;1343           case KID_STOP_OTA:          //MID_STOP_OTA:
;;;1344               handle_stop_ota();
;;;1345               break;
;;;1346   #endif
;;;1347   
;;;1348   #ifdef KID_GET_OTA_STATUS
;;;1349           case KID_GET_OTA_STATUS:    //MID_GET_OTA_STATUS:
;;;1350               handle_get_ota_status();
;;;1351               break;
;;;1352   #endif
;;;1353   
;;;1354   #ifdef KID_OTA_HEADER
;;;1355           case KID_OTA_HEADER:    //MID_OTA_HEADER:
;;;1356               handle_ota_header(pDataStart);
;;;1357               break;
;;;1358   #endif
;;;1359   
;;;1360   #ifdef KID_OTA_PACKET
;;;1361           case KID_OTA_PACKET:    //MID_OTA_PACKET:   //Lucien
;;;1362               handle_ota_packet(pDataStart);
;;;1363               break;
;;;1364   #endif
;;;1365   
;;;1366   #ifdef KID_DB_EXPORT_REQUEST
;;;1367           case KID_DB_EXPORT_REQUEST:
;;;1368               handle_db_export(pDataStart);
;;;1369               break;
;;;1370   #endif
;;;1371   
;;;1372   #ifdef KID_DB_IMPORT_REQUEST
;;;1373           case KID_DB_IMPORT_REQUEST:
;;;1374               handle_db_import(pDataStart);
;;;1375               break;
;;;1376   #endif
;;;1377   
;;;1378   #ifdef KID_UPLOAD_DATA
;;;1379           case KID_UPLOAD_DATA:
;;;1380               handle_upload_data(pDataStart);
;;;1381               break;
;;;1382   #endif
;;;1383   
;;;1384   #ifdef KID_DOWNLOAD_DATA
;;;1385           case KID_DOWNLOAD_DATA:
;;;1386               handle_download_data(pDataStart);
;;;1387               break;
;;;1388   #endif
;;;1389   
;;;1390   #ifdef KID_SET_IMP_MASS_DATA_HEADER
;;;1391           case KID_SET_IMP_MASS_DATA_HEADER:
;;;1392               handle_import_mass_data_header(pDataStart);
;;;1393               break;
;;;1394   #endif
;;;1395   
;;;1396   #ifdef KID_IMP_FM_DATA
;;;1397           case KID_IMP_FM_DATA:
;;;1398               handle_import_fm_data(pDataStart);
;;;1399               break;
;;;1400   #endif
;;;1401   
;;;1402   #ifdef KID_DEVICE_INFO
;;;1403           case KID_DEVICE_INFO:   //v//DEVICE_INFO:
;;;1404           {
;;;1405               dbg_msg_console("[%s]", "KID_DEVICE_INFO");
;;;1406   
;;;1407               device_info_data device_info;
;;;1408               ret = DSM_Uart_GetDeviceInfo(&device_info);
;;;1409               send_GetDeviceInfo_reply_msg(ret, device_info);
;;;1410               //free(device_info);
;;;1411               break;
;;;1412           }
;;;1413   #endif
;;;1414   
;;;1415   #ifdef KID_GET_DEBUG_INFO
;;;1416           case KID_GET_DEBUG_INFO:    //MID_GET_DEBUG_INFO:
;;;1417           {
;;;1418               dbg_msg_console("[%s]", "KID_GET_DEBUG_INFO");
;;;1419   
;;;1420               //pDataStart = st_com->parser_buffer + st_com->data_start_index;
;;;1421               uint8_t debug_file_size[4]={0};
;;;1422               ret = DSM_Uart_GET_DebugInfo(debug_file_size);//wait lmm to edit
;;;1423               send_GetDebugInfo_reply_msg(ret,debug_file_size);
;;;1424               break;
;;;1425           }
;;;1426   #endif
;;;1427   
;;;1428   #ifdef KID_UPLOAD_DEBUG_INFO
;;;1429           case KID_UPLOAD_DEBUG_INFO: //MID_UPLOAD_DEBUG_INFO:
;;;1430           {
;;;1431               dbg_msg_console("[%s]", "KID_UPLOAD_DEBUG_INFO");
;;;1432   
;;;1433               pDataStart = st_com->parser_buffer + st_com->data_start_index;
;;;1434               uint8_t upload_debug_info_offset[4], upload_debug_info_size[4];
;;;1435               memcpy(upload_debug_info_offset,pDataStart,sizeof(upload_debug_info_offset));
;;;1436               memcpy(upload_debug_info_size,pDataStart+4,sizeof(upload_debug_info_size));
;;;1437               ret = DSM_Uart_UploadDebugInfo(upload_debug_info_offset, upload_debug_info_size);
;;;1438               send_UploadDebugInfo_reply_msg(ret, upload_debug_info_offset, upload_debug_info_size);
;;;1439               break;
;;;1440           }
;;;1441   #endif
;;;1442   
;;;1443   #ifdef KID_GET_LOG_FILE
;;;1444           case KID_GET_LOG_FILE:       //MID_GET_LOGFILE:
;;;1445           {
;;;1446               dbg_msg_console("[%s]", "KID_GET_LOG_FILE");
;;;1447   
;;;1448               pDataStart = st_com->parser_buffer + st_com->data_start_index;
;;;1449               uint8_t log_type = *pDataStart;
;;;1450               uint8_t log_size[4];
;;;1451               ret = DSM_Uart_GetLogFile(log_type,log_size);
;;;1452               send_GetLogFile_reply_msg(ret, log_size);
;;;1453               //free(log_size);
;;;1454               break;
;;;1455           }
;;;1456   #endif
;;;1457   
;;;1458   #ifdef KID_UPLOAD_LOG_FILE
;;;1459           case KID_UPLOAD_LOG_FILE:    //MID_UPLOAD_LOGFILE:
;;;1460           {
;;;1461               dbg_msg_console("[%s]", "KID_UPLOAD_LOG_FILE");
;;;1462   
;;;1463               uint8_t* logdata = NULL;
;;;1464               msg_upload_logfile_data logData;
;;;1465               pDataStart = st_com->parser_buffer + st_com->data_start_index;
;;;1466               memcpy(&logData,pDataStart,sizeof(logData));
;;;1467               uint16_t log_size2 = StreamsToBigEndU16(&logData.upload_logfile_size[0]);
;;;1468               ret = DSM_Uart_UploadLogFile(logdata,logData);
;;;1469               send_UploadLogFile_reply_msg(ret, logdata, log_size2);
;;;1470               break;
;;;1471           }
;;;1472   #endif
;;;1473   
;;;1474   #ifdef KID_SW_EXP_FM_MODE
;;;1475           case KID_SW_EXP_FM_MODE:        //MID_SW_EXP_FM_MODE:
;;;1476           {
;;;1477               dbg_msg_console("[%s]", "KID_SW_EXP_FM_MODE");
;;;1478   
;;;1479               user_com_thread_event_set(USER_COM_THREAD_EVENT_NON_OVERWRITABLE);
;;;1480   
;;;1481               msg_sw_exp_mode_data tInfo;
;;;1482               pDataStart = st_com->parser_buffer + st_com->data_start_index;
;;;1483               memcpy(&tInfo, pDataStart, sizeof(tInfo));
;;;1484   
;;;1485               ret = KDP_export_fm_mode( (eEXTRA_FMAP_TYPE)tInfo.eType );
;;;1486               send_switch_exp_fm_mode_reply_msg(MR_SUCCESS);
;;;1487               user_com_thread_event_set(USER_COM_THREAD_EVENT_READY);
;;;1488               break;
;;;1489           }
;;;1490   #endif
;;;1491   
;;;1492   #ifdef KID_SW_EXP_DB_MODE
;;;1493           case KID_SW_EXP_DB_MODE:        //MID_SW_EXP_DB_MODE:
;;;1494           {
;;;1495               dbg_msg_console("[%s]", "KID_SW_EXP_DB_MODE");
;;;1496   
;;;1497               user_com_thread_event_set(USER_COM_THREAD_EVENT_NON_OVERWRITABLE);
;;;1498   
;;;1499               msg_sw_exp_mode_data tInfo;
;;;1500               pDataStart = st_com->parser_buffer + st_com->data_start_index;
;;;1501               memcpy(&tInfo, pDataStart, sizeof(tInfo));
;;;1502   
;;;1503               ret = KDP_export_db_mode( (eEXPORT_DB_TYPE)tInfo.eType );
;;;1504   #if CFG_FMAP_EX_FIG_ENABLE == YES && CFG_FMAP_AP_CTRL_TYPE > EX_FM_DISABLE && CFG_FMAP_AP_CTRL_TYPE < EX_FM_UART_AP_CTRL_MAIN_DB
;;;1505               if( snapshot_adv_mode == FALSE && mode_idx == 2)
;;;1506               {
;;;1507                   kl520_api_snapshot_adv_init(MIPI_CAM_NIR, KDP_DDR_TEST_NIR_IMG_SIZE);
;;;1508                   kl520_api_snapshot_adv_init(MIPI_CAM_RGB, KDP_DDR_TEST_RGB_IMG_SIZE);
;;;1509                   kl520_api_snapshot_adv_init(MIPI_CAM_INF, KDP_DDR_TEST_INF_IMG_SIZE);
;;;1510                   kl520_api_snapshot_adv_select(3); // five face log mode
;;;1511                   kl520_api_snapshot_adv_mode();
;;;1512               }
;;;1513   #endif //#if CFG_FMAP_EX_FIG_ENABLE == YES && CFG_FMAP_AP_CTRL_TYPE > EX_FM_DISABLE && CFG_FMAP_AP_CTRL_TYPE < EX_FM_UART_AP_CTRL_MAIN_DB
;;;1514               send_switch_exp_db_mode_reply_msg(MR_SUCCESS);
;;;1515               user_com_thread_event_set(USER_COM_THREAD_EVENT_READY);
;;;1516               break;
;;;1517           }
;;;1518   #endif
;;;1519   
;;;1520   #ifdef KID_EXP_FM_DATA
;;;1521           case KID_EXP_FM_DATA:       //MID_EXP_FM_DATA:  //Lucien
;;;1522           {
;;;1523               dbg_msg_console("[%s]", "KID_EXP_FM_DATA");
;;;1524   
;;;1525               user_com_thread_event_set(USER_COM_THREAD_EVENT_NON_OVERWRITABLE);
;;;1526   
;;;1527               msg_mass_data_pkg tInfo;
;;;1528               pDataStart = st_com->parser_buffer + st_com->data_start_index;
;;;1529               memcpy(&tInfo, pDataStart, sizeof(tInfo.nPkgIdx)+sizeof(tInfo.nPkgSize));
;;;1530   
;;;1531               KDP_exp_mass_data(tInfo, KID_EXP_FM_DATA);
;;;1532   
;;;1533               user_com_thread_event_set(USER_COM_THREAD_EVENT_READY);
;;;1534               break;
;;;1535           }
;;;1536   #endif
;;;1537   
;;;1538   #ifdef KID_EXP_DB_DATA
;;;1539           case KID_EXP_DB_DATA:       //MID_EXP_DB_DATA:
;;;1540           {
;;;1541               dbg_msg_console("[%s]", "KID_EXP_DB_DATA");
;;;1542   
;;;1543               user_com_thread_event_set(USER_COM_THREAD_EVENT_NON_OVERWRITABLE);
;;;1544               msg_mass_data_pkg tInfo;
;;;1545               pDataStart = st_com->parser_buffer + st_com->data_start_index;
;;;1546               memcpy(&tInfo, pDataStart, sizeof(tInfo.nPkgIdx)+sizeof(tInfo.nPkgSize));
;;;1547   
;;;1548               KDP_exp_mass_data(tInfo, KID_EXP_DB_DATA);
;;;1549   
;;;1550               user_com_thread_event_set(USER_COM_THREAD_EVENT_READY);
;;;1551               break;
;;;1552           }
;;;1553   #endif
;;;1554   
;;;1555   #ifdef KID_IMP_DB_DATA
;;;1556           case KID_IMP_DB_DATA:       //MID_IMP_DB_DATA:
;;;1557           {
;;;1558               dbg_msg_console("[%s]", "KID_IMP_DB_DATA");
;;;1559   
;;;1560               user_com_thread_event_set(USER_COM_THREAD_EVENT_NON_OVERWRITABLE);
;;;1561               msg_mass_data_pkg tInfo;
;;;1562               pDataStart = st_com->parser_buffer + st_com->data_start_index;
;;;1563               memcpy(&tInfo, pDataStart, sizeof(tInfo.nPkgIdx)+sizeof(tInfo.nPkgSize));
;;;1564               tInfo.pDataHeader = (u8*) (pDataStart + sizeof(tInfo.nPkgIdx)+sizeof(tInfo.nPkgSize));
;;;1565   
;;;1566               KDP_imp_mass_data(tInfo, KID_IMP_DB_DATA);
;;;1567   
;;;1568               user_com_thread_event_set(USER_COM_THREAD_EVENT_READY);
;;;1569               break;
;;;1570           }
;;;1571   #endif
;;;1572   
;;;1573   
;;;1574   #ifdef KID_IMP_IMG_DATA
;;;1575           case KID_IMP_IMG_DATA:       //MID_IMP_DB_DATA:
;;;1576           {
;;;1577               dbg_msg_console("[%s]", "KID_IMP_IMG_DATA");
;;;1578   
;;;1579               user_com_thread_event_set(USER_COM_THREAD_EVENT_NON_OVERWRITABLE);
;;;1580               msg_mass_data_pkg tInfo;
;;;1581               pDataStart = st_com->parser_buffer + st_com->data_start_index;
;;;1582               memcpy(&tInfo, pDataStart, sizeof(tInfo.nPkgIdx)+sizeof(tInfo.nPkgSize));
;;;1583               tInfo.pDataHeader = (u8*) (pDataStart + sizeof(tInfo.nPkgIdx)+sizeof(tInfo.nPkgSize));
;;;1584   
;;;1585               KDP_imp_mass_data(tInfo, KID_IMP_IMG_DATA);
;;;1586   
;;;1587               user_com_thread_event_set(USER_COM_THREAD_EVENT_READY);
;;;1588               break;
;;;1589           }
;;;1590   #endif
;;;1591   
;;;1592   #ifdef KID_CATCH_IMG_MODE
;;;1593           case KID_CATCH_IMG_MODE:
;;;1594           {
;;;1595               dbg_msg_console("[%s]", "KID_CATCH_IMG_MODE");
;;;1596   
;;;1597               user_com_thread_event_set(USER_COM_THREAD_EVENT_NON_OVERWRITABLE);
;;;1598   
;;;1599               pDataStart = st_com->parser_buffer + st_com->data_start_index;
;;;1600               uint16_t nSrcType = StreamsToBigEndU16(pDataStart);
;;;1601   
;;;1602               ret = KDP_catch_image_mode(nSrcType);
;;;1603   
;;;1604               send_catch_image_mode_reply_msg(ret);
;;;1605               user_com_thread_event_set(USER_COM_THREAD_EVENT_READY);
;;;1606               break;
;;;1607           }
;;;1608   #endif
;;;1609   
;;;1610   #ifdef KID_EXP_IMG_DATA
;;;1611           case KID_EXP_IMG_DATA:
;;;1612           {
;;;1613               dbg_msg_console("[%s]", "KID_EXP_IMG_DATA");
;;;1614   
;;;1615               user_com_thread_event_set(USER_COM_THREAD_EVENT_NON_OVERWRITABLE);
;;;1616               msg_mass_data_pkg tInfo;
;;;1617               pDataStart = st_com->parser_buffer + st_com->data_start_index;
;;;1618               memcpy(&tInfo, pDataStart, sizeof(tInfo.nPkgIdx)+sizeof(tInfo.nPkgSize));
;;;1619               tInfo.pDataHeader = (u8*) (pDataStart + sizeof(tInfo.nPkgIdx)+sizeof(tInfo.nPkgSize));
;;;1620   
;;;1621               KDP_exp_mass_data(tInfo, KID_EXP_IMG_DATA);
;;;1622   
;;;1623               user_com_thread_event_set(USER_COM_THREAD_EVENT_READY);
;;;1624               break;
;;;1625           }
;;;1626   #endif
;;;1627   
;;;1628   //-----0x40-0x6F Unit control
;;;1629   #ifdef KID_TURN_ON_CAMERA
;;;1630           case KID_TURN_ON_CAMERA:    //TURN_ON_CAMERA:
;;;1631           {
;;;1632               dbg_msg_console("[%s]", "KID_TURN_ON_CAMERA");
;;;1633   
;;;1634               pDataStart = st_com->parser_buffer + st_com->data_start_index;
;;;1635               u8 nIdx = *pDataStart;
;;;1636               ret = DSM_Uart_TurnOnOffCamera(nIdx, API_CTRL_CAM_EN);
;;;1637               send_Response_result_reply_msg(ret, cmd);
;;;1638               break;
;;;1639           }
;;;1640   #endif
;;;1641   
;;;1642   #ifdef KID_TURN_OFF_CAMERA
;;;1643           case KID_TURN_OFF_CAMERA:   //TURN_OFF_CAMERA:
;;;1644           {
;;;1645               dbg_msg_console("[%s]", "KID_TURN_OFF_CAMERA");
;;;1646   
;;;1647               pDataStart = st_com->parser_buffer + st_com->data_start_index;
;;;1648               u8 nIdx = *pDataStart;
;;;1649               ret = DSM_Uart_TurnOnOffCamera(nIdx, API_CTRL_CAM_DIS);
;;;1650               send_Response_result_reply_msg(ret, cmd);
;;;1651               break;
;;;1652           }
;;;1653   #endif
;;;1654   
;;;1655   #ifdef KID_TURN_ON_VIS_LED
;;;1656           case KID_TURN_ON_VIS_LED:   //TURN_ON_LED:
;;;1657           {
;;;1658               dbg_msg_console("[%s]", "KID_TURN_ON_VIS_LED");
;;;1659   
;;;1660               ret = DSM_Uart_TurnOnOffVisLed(TRUE);
;;;1661               send_Response_result_reply_msg(ret, cmd);
;;;1662               break;
;;;1663           }
;;;1664   #endif
;;;1665   
;;;1666   #ifdef KID_TURN_OFF_VIS_LED
;;;1667           case KID_TURN_OFF_VIS_LED:  //TURN_OFF_LED:
;;;1668           {
;;;1669               dbg_msg_console("[%s]", "KID_TURN_OFF_VIS_LED");
;;;1670   
;;;1671               ret = DSM_Uart_TurnOnOffVisLed(FALSE);
;;;1672               send_Response_result_reply_msg(ret, cmd);
;;;1673               break;
;;;1674           }
;;;1675   #endif
;;;1676   
;;;1677   #ifdef KID_TURN_ON_IR_LED
;;;1678           case KID_TURN_ON_IR_LED:   //TURN_ON_LED:
;;;1679           {
;;;1680               dbg_msg_console("[%s]", "KID_TURN_ON_IR_LED");
;;;1681   
;;;1682               s32 ret = DSM_Uart_TurnOnOffIrLed(TRUE);
;;;1683               send_Response_result_reply_msg(ret, cmd);
;;;1684               break;
;;;1685           }
;;;1686   #endif
;;;1687   
;;;1688   #ifdef KID_TURN_OFF_IR_LED
;;;1689           case KID_TURN_OFF_IR_LED:  //TURN_OFF_LED:
;;;1690           {
;;;1691               dbg_msg_console("[%s]", "KID_TURN_OFF_IR_LED");
;;;1692   
;;;1693               s32 ret = DSM_Uart_TurnOnOffIrLed(FALSE);
;;;1694               send_Response_result_reply_msg(ret, cmd);
;;;1695               break;
;;;1696           }
;;;1697   #endif
;;;1698   
;;;1699   #ifdef KID_TURN_ON_STRUCT_LED
;;;1700           case KID_TURN_ON_STRUCT_LED:    //TURN_ON_STRUCT:
;;;1701           {
;;;1702               dbg_msg_console("[%s]", "KID_TURN_ON_STRUCT_LED");
;;;1703   
;;;1704               ret = DSM_Uart_TurnOnOffStructLed(TRUE);
;;;1705               send_Response_result_reply_msg(ret, cmd);
;;;1706               break;
;;;1707           }
;;;1708   #endif
;;;1709   
;;;1710   #ifdef KID_TURN_OFF_STRUCT_LED
;;;1711           case KID_TURN_OFF_STRUCT_LED:   //TURN_OFF_STRUCT:
;;;1712           {
;;;1713               dbg_msg_console("[%s]", "KID_TURN_OFF_STRUCT_LED");
;;;1714   
;;;1715               ret = DSM_Uart_TurnOnOffStructLed(FALSE);
;;;1716               send_Response_result_reply_msg(ret, cmd);
;;;1717               break;
;;;1718           }
;;;1719   #endif
;;;1720   
;;;1721   #ifdef KID_TURN_ON_PANEL
;;;1722           case KID_TURN_ON_PANEL:
;;;1723           {
;;;1724               dbg_msg_console("[%s]", "KID_TURN_ON_PANEL");
;;;1725   
;;;1726               ret = DSM_Uart_TurnOnOffPanel(API_CTRL_DISP_OPEN);
;;;1727               send_Response_result_reply_msg(ret, cmd);
;;;1728               break;
;;;1729           }
;;;1730   #endif
;;;1731   
;;;1732   #ifdef KID_TURN_OFF_PANEL
;;;1733           case KID_TURN_OFF_PANEL:
;;;1734           {
;;;1735               dbg_msg_console("[%s]", "KID_TURN_OFF_PANEL");
;;;1736   
;;;1737               ret = DSM_Uart_TurnOnOffPanel(API_CTRL_DISP_CLOS);
;;;1738               send_Response_result_reply_msg(ret, cmd);
;;;1739               break;
;;;1740           }
;;;1741   #endif
;;;1742   
;;;1743   #ifdef KID_SET_EXP_TIME
;;;1744           case KID_SET_EXP_TIME:   //TURN_ON_LED:
;;;1745           {
;;;1746               dbg_msg_console("[%s]", "KID_SET_EXP_TIME");
;;;1747   
;;;1748               s_msg_exp_time tInfo;
;;;1749               pDataStart = st_com->parser_buffer + st_com->data_start_index;
;;;1750               memcpy(&tInfo, pDataStart, sizeof(tInfo));
;;;1751               
;;;1752               s32 ret = kn_uart_set_exposure_time(tInfo);
;;;1753               send_Response_result_reply_msg(ret, cmd);
;;;1754               
;;;1755               break;
;;;1756           }
;;;1757   #endif
;;;1758   
;;;1759   #ifdef KID_SET_GAIN
;;;1760           case KID_SET_GAIN:   //TURN_ON_LED:
;;;1761           {
;;;1762               dbg_msg_console("[%s]", "KID_SET_GAIN");
;;;1763   
;;;1764               pDataStart = st_com->parser_buffer + st_com->data_start_index;
;;;1765   
;;;1766               u8 cam_index = *pDataStart;
;;;1767               u8 gain_h = *(pDataStart+1);
;;;1768               u8 gain_l = *(pDataStart+2);
;;;1769               u32 gain = (gain_h << 8) | gain_l;
;;;1770               
;;;1771               u8 result = kn_uart_set_gain(cam_index, gain);
;;;1772   
;;;1773               send_Response_result_reply_msg(result, cmd);
;;;1774               break;
;;;1775           }
;;;1776   #endif
;;;1777   
;;;1778   #ifdef KID_SET_EXP_MASS_DATA_HEADER
;;;1779           case KID_SET_EXP_MASS_DATA_HEADER:
;;;1780           {
;;;1781               dbg_msg_console("[%s]", "KID_SET_EXP_MASS_DATA_HEADER");
;;;1782   
;;;1783               msg_mass_data_header tExpHeader = {0};
;;;1784               pDataStart = st_com->parser_buffer + st_com->data_start_index;
;;;1785   
;;;1786               memcpy(&tExpHeader, pDataStart, sizeof(tExpHeader));
;;;1787               ret = KDP_set_mass_data_header(&tExpHeader);
;;;1788   
;;;1789               send_SetMassDataHeader_reply_msg(ret, KID_SET_EXP_MASS_DATA_HEADER);
;;;1790               break;
;;;1791           }
;;;1792   #endif
;;;1793   
;;;1794   
;;;1795   #ifdef KID_GET_MASS_DATA_STATUS
;;;1796           case KID_GET_MASS_DATA_STATUS:
;;;1797           {
;;;1798               dbg_msg_console("[%s]", "KID_GET_MASS_DATA_STATUS");
;;;1799   //            uint8_t ota_status1;
;;;1800   //            uint8_t next_pid_e1[2];
;;;1801   //            ret = DSM_Uart_GetOtaStatus(&ota_status1,next_pid_e1);
;;;1802   //            send_OtaStatus_reply_msg(ret, ota_status1, next_pid_e1);
;;;1803               break;
;;;1804           }
;;;1805   #endif
;;;1806   
;;;1807   #ifdef KID_SYS_INIT_READY_TIME
;;;1808           case KID_SYS_INIT_READY_TIME:
;;;1809           {
;;;1810               dbg_msg_console("[%s]", "KID_SYS_INIT_READY_TIME");
;;;1811   
;;;1812               uint8_t time[4];
;;;1813               ret = DSM_Uart_SysInitReadyTime(time);
;;;1814               send_SysInitReadyTime_reply_msg(ret, time);
;;;1815               //free(device_info);
;;;1816               break;
;;;1817           }
;;;1818   #endif
;;;1819   
;;;1820   #ifdef KID_EXP_ALL_DB
;;;1821           case KID_EXP_ALL_DB:
;;;1822           {
;;;1823               dbg_msg_console("[%s]", "KID_EXP_ALL_DB");
;;;1824               msg_mass_data_pkg tInfo;
;;;1825   
;;;1826               user_com_thread_event_set(USER_COM_THREAD_EVENT_NON_OVERWRITABLE);
;;;1827               pDataStart = st_com->parser_buffer + st_com->data_start_index;
;;;1828               memcpy(&tInfo, pDataStart, sizeof(tInfo.nPkgIdx)+sizeof(tInfo.nPkgSize));
;;;1829               KDP_exp_mass_data(tInfo, KID_EXP_ALL_DB);
;;;1830               user_com_thread_event_set(USER_COM_THREAD_EVENT_READY);
;;;1831               break;
;;;1832           }
;;;1833   #endif
;;;1834   
;;;1835   #ifdef KID_IMP_ALL_DB
;;;1836           case KID_IMP_ALL_DB:
;;;1837           {
;;;1838               dbg_msg_console("[%s]", "KID_IMP_ALL_DB");
;;;1839               msg_mass_data_pkg tInfo;
;;;1840   
;;;1841               user_com_thread_event_set(USER_COM_THREAD_EVENT_NON_OVERWRITABLE);
;;;1842               pDataStart = st_com->parser_buffer + st_com->data_start_index;
;;;1843               memcpy(&tInfo, pDataStart, sizeof(tInfo.nPkgIdx)+sizeof(tInfo.nPkgSize));
;;;1844               tInfo.pDataHeader = (u8*) (pDataStart + sizeof(tInfo.nPkgIdx)+sizeof(tInfo.nPkgSize));
;;;1845               KDP_imp_mass_data(tInfo, KID_IMP_ALL_DB);
;;;1846               user_com_thread_event_set(USER_COM_THREAD_EVENT_READY);
;;;1847               break;
;;;1848           }
;;;1849   #endif
;;;1850   
;;;1851   #ifdef KID_EXP_FLASH
;;;1852           case KID_EXP_FLASH:
;;;1853           {
;;;1854               dbg_msg_console("[%s]", "KID_EXP_FLASH");
;;;1855               msg_mass_data_pkg tInfo;
;;;1856   
;;;1857               user_com_thread_event_set(USER_COM_THREAD_EVENT_NON_OVERWRITABLE);
;;;1858               pDataStart = st_com->parser_buffer + st_com->data_start_index;
;;;1859               memcpy(&tInfo, pDataStart, sizeof(tInfo.nPkgIdx)+sizeof(tInfo.nPkgSize));
;;;1860               KDP_exp_mass_data(tInfo, KID_EXP_FLASH);
;;;1861               user_com_thread_event_set(USER_COM_THREAD_EVENT_READY);
;;;1862               break;
;;;1863           }
;;;1864   #endif
;;;1865   
;;;1866   #ifdef KID_SET_INTER_ACTIVATE
;;;1867           case KID_SET_INTER_ACTIVATE: //MID_SET_INTERACTIVATE:
;;;1868           {
;;;1869               dbg_msg_console("[%s]", "KID_SET_INTER_ACTIVATE");
;;;1870   
;;;1871               pDataStart = st_com->parser_buffer + st_com->data_start_index;
;;;1872               msg_interactivate_param interactivate_param;
;;;1873               memcpy(&interactivate_param,pDataStart,sizeof(interactivate_param));
;;;1874               ret = DSM_Uart_SET_Interactivate(interactivate_param);
;;;1875               send_SetInteractivate_reply_msg(ret, KID_SET_INTER_ACTIVATE);
;;;1876               //free(&interactivate_param);
;;;1877               break;
;;;1878           }
;;;1879   #endif
;;;1880   
;;;1881   #ifdef KID_SNAPSHOT_MODE
;;;1882           case KID_SNAPSHOT_MODE:
;;;1883           {
;;;1884               pDataStart = st_com->parser_buffer + st_com->data_start_index;
;;;1885           
;;;1886               u8 snapshot_mode = pDataStart[0];
;;;1887           
;;;1888               dbg_msg_console("[%s] mode: %d", "KID_SNAPSHOT_MODE", snapshot_mode);
;;;1889   
;;;1890               if ((5 == snapshot_mode) || (6 == snapshot_mode))
;;;1891               {
;;;1892                   send_reply_AesNoDataMsg(MR_FAILED_INVALID_PARAM, KID_SNAPSHOT_MODE);
;;;1893               }
;;;1894               else
;;;1895               {
;;;1896                   sample_snapshot_auto_usb_mode(snapshot_mode);
;;;1897   
;;;1898                   send_reply_AesNoDataMsg(MR_SUCCESS, KID_SNAPSHOT_MODE);
;;;1899               }
;;;1900   
;;;1901               break;
;;;1902           }
;;;1903   #endif
;;;1904   
;;;1905           default:
;;;1906           {
;;;1907               //if (FALSE == user_parser(cmd))
;;;1908               {
;;;1909                   dbg_msg_console("[%s]", "Unknown command");
0000e4  a2c8              ADR      r2,|L31.1032|
0000e6  a1cc              ADR      r1,|L31.1048|
0000e8  2001              MOVS     r0,#1
0000ea  f7fffffe          BL       kdp_level_printf
;;;1910                   send_Response_result_reply_msg(MR_REJECTED, cmd);
0000ee  b063              ADD      sp,sp,#0x18c
0000f0  4629              MOV      r1,r5
0000f2  e8bd40f0          POP      {r4-r7,lr}
0000f6  2001              MOVS     r0,#1
0000f8  f7ffbffe          B.W      send_Response_result_reply_msg
                  |L31.252|
0000fc  a2c8              ADR      r2,|L31.1056|
0000fe  a1cd              ADR      r1,|L31.1076|
000100  2001              MOVS     r0,#1
000102  f7fffffe          BL       kdp_level_printf
000106  4668              MOV      r0,sp
000108  f7fffffe          BL       DSM_Uart_Get_Kn_DeviceInfo
00010c  4669              MOV      r1,sp
00010e  f7fffffe          BL       send_Get_Kn_DeviceInfo_reply_msg
                  |L31.274|
;;;1911               }
;;;1912               break;
;;;1913           }
;;;1914       }
;;;1915   }
000112  b063              ADD      sp,sp,#0x18c
000114  bdf0              POP      {r4-r7,pc}
                  |L31.278|
000116  e2cf              B        |L31.1720|
                  |L31.280|
000118  e0ec              B        |L31.756|
                  |L31.282|
00011a  e312              B        |L31.1858|
                  |L31.284|
00011c  a2c7              ADR      r2,|L31.1084|
00011e  a1c5              ADR      r1,|L31.1076|
000120  2001              MOVS     r0,#1
000122  f7fffffe          BL       kdp_level_printf
000126  4668              MOV      r0,sp
000128  f7fffffe          BL       DSM_Uart_Get_Version_Info
00012c  4669              MOV      r1,sp
00012e  2000              MOVS     r0,#0
000130  f7fffffe          BL       response_get_version_info_msg
                  |L31.308|
000134  e7ed              B        |L31.274|
                  |L31.310|
000136  e036              B        |L31.422|
                  |L31.312|
000138  e2e8              B        |L31.1804|
                  |L31.314|
00013a  e312              B        |L31.1890|
                  |L31.316|
00013c  e327              B        |L31.1934|
                  |L31.318|
00013e  a2c3              ADR      r2,|L31.1100|
000140  a1bc              ADR      r1,|L31.1076|
000142  2001              MOVS     r0,#1
000144  f7fffffe          BL       kdp_level_printf
000148  2120              MOVS     r1,#0x20
00014a  4668              MOV      r0,sp
00014c  f7fffffe          BL       __aeabi_memclr4
000150  4668              MOV      r0,sp
000152  f7fffffe          BL       DSM_Uart_Get_Version_Info_zhian
000156  2064              MOVS     r0,#0x64
000158  f7fffffe          BL       osDelay
00015c  4669              MOV      r1,sp
00015e  2000              MOVS     r0,#0
000160  f7fffffe          BL       response_get_version_info_msg_zhian
000164  e7d5              B        |L31.274|
                  |L31.358|
000166  e28b              B        |L31.1664|
                  |L31.360|
000168  e11c              B        |L31.932|
                  |L31.362|
00016a  e326              B        |L31.1978|
                  |L31.364|
00016c  e347              B        |L31.2046|
                  |L31.366|
00016e  e2b4              B        |L31.1754|
                  |L31.368|
000170  e32f              B        |L31.2002|
                  |L31.370|
000172  e31c              B        |L31.1966|
                  |L31.372|
000174  e327              B        |L31.1990|
                  |L31.374|
000176  a2ba              ADR      r2,|L31.1120|
000178  a1ae              ADR      r1,|L31.1076|
00017a  2001              MOVS     r0,#1
00017c  f7fffffe          BL       kdp_level_printf
000180  2120              MOVS     r1,#0x20
000182  4668              MOV      r0,sp
000184  f7fffffe          BL       __aeabi_memclr4
000188  4668              MOV      r0,sp
00018a  f7fffffe          BL       DSM_Uart_Get_Version_Info_zhian_prd
00018e  2064              MOVS     r0,#0x64
000190  f7fffffe          BL       osDelay
000194  4669              MOV      r1,sp
000196  2000              MOVS     r0,#0
000198  f7fffffe          BL       response_get_version_info_msg_zhian_prd
00019c  e7b9              B        |L31.274|
                  |L31.414|
00019e  e23d              B        |L31.1564|
                  |L31.416|
0001a0  e2ae              B        |L31.1792|
                  |L31.418|
0001a2  e03e              B        |L31.546|
                  |L31.420|
0001a4  e11f              B        |L31.998|
                  |L31.422|
0001a6  a2b4              ADR      r2,|L31.1144|
0001a8  a1a2              ADR      r1,|L31.1076|
0001aa  2001              MOVS     r0,#1
0001ac  f7fffffe          BL       kdp_level_printf
0001b0  2120              MOVS     r1,#0x20
0001b2  4668              MOV      r0,sp
0001b4  f7fffffe          BL       __aeabi_memclr4
0001b8  4668              MOV      r0,sp
0001ba  f7fffffe          BL       DSM_Uart_Get_Version_Info_zhian_hard
0001be  2064              MOVS     r0,#0x64
0001c0  f7fffffe          BL       osDelay
0001c4  4669              MOV      r1,sp
0001c6  2000              MOVS     r0,#0
0001c8  f7fffffe          BL       response_get_version_info_msg_zhian_hard
0001cc  e7a1              B        |L31.274|
                  |L31.462|
0001ce  e207              B        |L31.1504|
                  |L31.464|
0001d0  e047              B        |L31.610|
                  |L31.466|
0001d2  e013              B        |L31.508|
0001d4  e7ff              B        |L31.470|
                  |L31.470|
0001d6  a2af              ADR      r2,|L31.1172|
0001d8  a196              ADR      r1,|L31.1076|
0001da  2001              MOVS     r0,#1
0001dc  f7fffffe          BL       kdp_level_printf
0001e0  2000              MOVS     r0,#0
0001e2  f7fffffe          BL       user_com_thread_event_check_set
0001e6  2800              CMP      r0,#0
0001e8  d193              BNE      |L31.274|
0001ea  7820              LDRB     r0,[r4,#0]
0001ec  f7fffffe          BL       DSM_Uart_StartOrStopDemoMode
0001f0  21fe              MOVS     r1,#0xfe
                  |L31.498|
0001f2  b063              ADD      sp,sp,#0x18c
0001f4  e8bd40f0          POP      {r4-r7,lr}
0001f8  f7ffbffe          B.W      send_DebugModeOrDemoMode_reply_msg
                  |L31.508|
0001fc  a2a9              ADR      r2,|L31.1188|
0001fe  a18d              ADR      r1,|L31.1076|
000200  2001              MOVS     r0,#1
000202  f7fffffe          BL       kdp_level_printf
000206  7820              LDRB     r0,[r4,#0]
000208  f7fffffe          BL       DSM_Uart_StartDebugMode
00020c  21f0              MOVS     r1,#0xf0
00020e  e7f0              B        |L31.498|
000210  e0b3              B        |L31.890|
000212  e098              B        |L31.838|
000214  e08b              B        |L31.814|
000216  e07a              B        |L31.782|
000218  e052              B        |L31.704|
00021a  e04a              B        |L31.690|
00021c  e043              B        |L31.678|
00021e  e033              B        |L31.648|
000220  e06f              B        |L31.770|
                  |L31.546|
000222  7820              LDRB     r0,[r4,#0]            ;1161
000224  285a              CMP      r0,#0x5a              ;1161
000226  d102              BNE      |L31.558|
000228  7860              LDRB     r0,[r4,#1]            ;1161
00022a  28a5              CMP      r0,#0xa5              ;1161
00022c  d005              BEQ      |L31.570|
                  |L31.558|
00022e  b063              ADD      sp,sp,#0x18c          ;1161
000230  2006              MOVS     r0,#6                 ;1161
000232  e8bd40f0          POP      {r4-r7,lr}            ;1161
000236  f7ffbffe          B.W      send_soft_reset_reply_msg
                  |L31.570|
00023a  2401              MOVS     r4,#1                 ;1161
00023c  7034              STRB     r4,[r6,#0]            ;1161
00023e  a29d              ADR      r2,|L31.1204|
000240  a17c              ADR      r1,|L31.1076|
000242  4620              MOV      r0,r4                 ;1161
000244  f7fffffe          BL       kdp_level_printf
000248  489e              LDR      r0,|L31.1220|
00024a  7004              STRB     r4,[r0,#0]            ;1161
00024c  f7fffffe          BL       wait_fr_update_thread
000250  f7fffffe          BL       kl520_api_face_close
000254  f7fffffe          BL       user_io_poweroff
000258  b063              ADD      sp,sp,#0x18c          ;1161
00025a  e8bd40f0          POP      {r4-r7,lr}            ;1161
00025e  f7ffbffe          B.W      DSM_Uart_SystemReset
                  |L31.610|
000262  a299              ADR      r2,|L31.1224|
000264  a173              ADR      r1,|L31.1076|
000266  2001              MOVS     r0,#1                 ;1161
000268  f7fffffe          BL       kdp_level_printf
00026c  f7fffffe          BL       SysWaitDelayTime
000270  4602              MOV      r2,r0                 ;1161
000272  4899              LDR      r0,|L31.1240|
000274  a199              ADR      r1,|L31.1244|
000276  6803              LDR      r3,[r0,#0]            ;1161  ; g_nSysInternalTime
000278  2001              MOVS     r0,#1                 ;1161
00027a  f7fffffe          BL       kdp_level_printf
00027e  b063              ADD      sp,sp,#0x18c          ;1161
000280  e8bd40f0          POP      {r4-r7,lr}            ;1161
000284  f7ffbffe          B.W      send_power_off_reply_msg
                  |L31.648|
000288  a29f              ADR      r2,|L31.1288|
00028a  a16a              ADR      r1,|L31.1076|
00028c  2001              MOVS     r0,#1                 ;1161
00028e  f7fffffe          BL       kdp_level_printf
000292  7870              LDRB     r0,[r6,#1]            ;1161  ; g_eUserComThreadEvent
000294  f7fffffe          BL       DSM_Uart_GetState
000298  b063              ADD      sp,sp,#0x18c          ;1161
00029a  4601              MOV      r1,r0                 ;1161
00029c  e8bd40f0          POP      {r4-r7,lr}            ;1161
0002a0  2000              MOVS     r0,#0                 ;1161
0002a2  f7ffbffe          B.W      send_status_reply_msg
                  |L31.678|
0002a6  b063              ADD      sp,sp,#0x18c          ;1184
0002a8  4620              MOV      r0,r4                 ;1184
0002aa  e8bd40f0          POP      {r4-r7,lr}            ;1184
0002ae  f7ffbffe          B.W      handle_kid_verify
                  |L31.690|
0002b2  b063              ADD      sp,sp,#0x18c          ;1195
0002b4  4629              MOV      r1,r5                 ;1195
0002b6  4620              MOV      r0,r4                 ;1195
0002b8  e8bd40f0          POP      {r4-r7,lr}            ;1195
0002bc  f7ffbffe          B.W      handle_kid_enroll
                  |L31.704|
0002c0  a295              ADR      r2,|L31.1304|
0002c2  a15c              ADR      r1,|L31.1076|
0002c4  2001              MOVS     r0,#1                 ;1195
0002c6  f7fffffe          BL       kdp_level_printf
0002ca  4629              MOV      r1,r5                 ;1195
0002cc  4620              MOV      r0,r4                 ;1195
0002ce  f7fffffe          BL       parse_enroll_msg
0002d2  20ff              MOVS     r0,#0xff              ;1195
0002d4  f7fffffe          BL       set_enroll_customize_uid
0002d8  2001              MOVS     r0,#1                 ;1195
0002da  f7fffffe          BL       user_com_thread_event_check_set
0002de  2800              CMP      r0,#0                 ;1195
                  |L31.736|
0002e0  f47faf28          BNE      |L31.308|
0002e4  2001              MOVS     r0,#1                 ;1195
0002e6  f7fffffe          BL       KDP_Enroll_Add_Face_Type_Set
0002ea  2000              MOVS     r0,#0                 ;1195
0002ec  f7fffffe          BL       set_enroll_overwrite_flag
0002f0  2001              MOVS     r0,#1                 ;1195
0002f2  e073              B        |L31.988|
                  |L31.756|
0002f4  b063              ADD      sp,sp,#0x18c          ;1207
0002f6  4629              MOV      r1,r5                 ;1207
0002f8  4620              MOV      r0,r4                 ;1207
0002fa  e8bd40f0          POP      {r4-r7,lr}            ;1207
0002fe  f7ffbffe          B.W      handle_enroll_itg
                  |L31.770|
000302  b063              ADD      sp,sp,#0x18c          ;1218
000304  4628              MOV      r0,r5                 ;1218
000306  e8bd40f0          POP      {r4-r7,lr}            ;1218
00030a  f7ffbffe          B.W      handle_face_reset
                  |L31.782|
00030e  a287              ADR      r2,|L31.1324|
000310  a148              ADR      r1,|L31.1076|
000312  2001              MOVS     r0,#1                 ;1218
000314  f7fffffe          BL       kdp_level_printf
000318  4620              MOV      r0,r4                 ;1218
00031a  f7fffffe          BL       StreamsToBigEndU16
00031e  80b0              STRH     r0,[r6,#4]            ;1218
000320  2008              MOVS     r0,#8                 ;1218
000322  f7fffffe          BL       user_com_thread_event_check_set
000326  2800              CMP      r0,#0                 ;1218
000328  d1da              BNE      |L31.736|
00032a  2008              MOVS     r0,#8                 ;1218
00032c  e056              B        |L31.988|
                  |L31.814|
00032e  a283              ADR      r2,|L31.1340|
000330  a140              ADR      r1,|L31.1076|
000332  2001              MOVS     r0,#1                 ;1218
000334  f7fffffe          BL       kdp_level_printf
000338  2004              MOVS     r0,#4                 ;1218
00033a  f7fffffe          BL       user_com_thread_event_check_set
00033e  2800              CMP      r0,#0                 ;1218
000340  d1ce              BNE      |L31.736|
000342  2004              MOVS     r0,#4                 ;1218
000344  e04a              B        |L31.988|
                  |L31.838|
000346  a280              ADR      r2,|L31.1352|
000348  a13a              ADR      r1,|L31.1076|
00034a  2001              MOVS     r0,#1                 ;1218
00034c  f7fffffe          BL       kdp_level_printf
000350  4620              MOV      r0,r4                 ;1218
000352  f7fffffe          BL       StreamsToBigEndU16
000356  80b0              STRH     r0,[r6,#4]            ;1218
000358  a906              ADD      r1,sp,#0x18           ;1218
00035a  88b0              LDRH     r0,[r6,#4]            ;1218  ; _user_com_data
00035c  f7fffffe          BL       DSM_Uart_GetUserInfo
000360  4604              MOV      r4,r0                 ;1218
000362  2217              MOVS     r2,#0x17              ;1218
000364  a909              ADD      r1,sp,#0x24           ;1218
000366  4668              MOV      r0,sp                 ;1218
000368  f7fffffe          BL       __aeabi_memcpy4
00036c  ad06              ADD      r5,sp,#0x18           ;1218
00036e  4620              MOV      r0,r4                 ;1218
000370  e895000e          LDM      r5,{r1-r3}            ;1218
000374  f7fffffe          BL       response_get_user_info_msg
000378  e6cb              B        |L31.274|
                  |L31.890|
00037a  a278              ADR      r2,|L31.1372|
00037c  a12d              ADR      r1,|L31.1076|
00037e  2001              MOVS     r0,#1
000380  f7fffffe          BL       kdp_level_printf
000384  a830              ADD      r0,sp,#0xc0
000386  f7fffffe          BL       DSM_Uart_GetAllUserInfo
00038a  4604              MOV      r4,r0
00038c  22bd              MOVS     r2,#0xbd
00038e  a933              ADD      r1,sp,#0xcc
000390  4668              MOV      r0,sp
000392  f7fffffe          BL       __aeabi_memcpy4
000396  4620              MOV      r0,r4
000398  ac30              ADD      r4,sp,#0xc0
00039a  e894000e          LDM      r4,{r1-r3}
00039e  f7fffffe          BL       response_get_Alluser_info_msg
0003a2  e6b6              B        |L31.274|
                  |L31.932|
0003a4  a272              ADR      r2,|L31.1392|
0003a6  a123              ADR      r1,|L31.1076|
0003a8  2001              MOVS     r0,#1
0003aa  f7fffffe          BL       kdp_level_printf
0003ae  8820              LDRH     r0,[r4,#0]
0003b0  f8ad0000          STRH     r0,[sp,#0]
0003b4  2002              MOVS     r0,#2
0003b6  f7fffffe          BL       user_com_thread_event_check_set
0003ba  b128              CBZ      r0,|L31.968|
0003bc  b063              ADD      sp,sp,#0x18c
0003be  2033              MOVS     r0,#0x33
0003c0  e8bd40f0          POP      {r4-r7,lr}
0003c4  f7ffbffe          B.W      send_snapImage_reply_msg
                  |L31.968|
0003c8  9800              LDR      r0,[sp,#0]
0003ca  f7fffffe          BL       DSM_Uart_SnapImage
0003ce  b120              CBZ      r0,|L31.986|
0003d0  f7fffffe          BL       send_snapImage_reply_msg
                  |L31.980|
0003d4  2000              MOVS     r0,#0
0003d6  7070              STRB     r0,[r6,#1]
0003d8  e69b              B        |L31.274|
                  |L31.986|
0003da  2040              MOVS     r0,#0x40
                  |L31.988|
0003dc  b063              ADD      sp,sp,#0x18c
0003de  e8bd40f0          POP      {r4-r7,lr}
0003e2  f7ffbffe          B.W      user_com_event_start
                  |L31.998|
0003e6  a266              ADR      r2,|L31.1408|
0003e8  a112              ADR      r1,|L31.1076|
0003ea  2001              MOVS     r0,#1
0003ec  f7fffffe          BL       kdp_level_printf
0003f0  7820              LDRB     r0,[r4,#0]
0003f2  4669              MOV      r1,sp
0003f4  9700              STR      r7,[sp,#0]
0003f6  f7fffffe          BL       DSM_Uart_SavedImage
0003fa  4669              MOV      r1,sp
0003fc  f7fffffe          BL       send_savedImage_reply_msg
000400  e687              B        |L31.274|
000402  0000              DCW      0x0000
                  |L31.1028|
                          DCD      ||.data||
                  |L31.1032|
000408  556e6b6e          DCB      "Unknown command",0
00040c  6f776e20
000410  636f6d6d
000414  616e6400
                  |L31.1048|
000418  5b25735d          DCB      "[%s]\r\n",0
00041c  0d0a00  
00041f  00                DCB      0
                  |L31.1056|
000420  4b49445f          DCB      "KID_KN_DEVICE_INFO",0
000424  4b4e5f44
000428  45564943
00042c  455f494e
000430  464f00  
000433  00                DCB      0
                  |L31.1076|
000434  5b25735d          DCB      "[%s]\r\n",0
000438  0d0a00  
00043b  00                DCB      0
                  |L31.1084|
00043c  4b49445f          DCB      "KID_GET_VERSION",0
000440  4745545f
000444  56455253
000448  494f4e00
                  |L31.1100|
00044c  4b49445f          DCB      "KID_GET_VERSION_ZA",0
000450  4745545f
000454  56455253
000458  494f4e5f
00045c  5a4100  
00045f  00                DCB      0
                  |L31.1120|
000460  4b49445f          DCB      "KID_GET_VERSION_ZAPRD",0
000464  4745545f
000468  56455253
00046c  494f4e5f
000470  5a415052
000474  4400    
000476  00                DCB      0
000477  00                DCB      0
                  |L31.1144|
000478  4b49445f          DCB      "KID_GET_VERSION_HARDWARE",0
00047c  4745545f
000480  56455253
000484  494f4e5f
000488  48415244
00048c  57415245
000490  00      
000491  00                DCB      0
000492  00                DCB      0
000493  00                DCB      0
                  |L31.1172|
000494  4b49445f          DCB      "KID_DEMO_MODE",0
000498  44454d4f
00049c  5f4d4f44
0004a0  4500    
0004a2  00                DCB      0
0004a3  00                DCB      0
                  |L31.1188|
0004a4  4b49445f          DCB      "KID_DEBUG_MODE",0
0004a8  44454255
0004ac  475f4d4f
0004b0  444500  
0004b3  00                DCB      0
                  |L31.1204|
0004b4  4b49445f          DCB      "KID_SOFT_RESET",0
0004b8  534f4654
0004bc  5f524553
0004c0  455400  
0004c3  00                DCB      0
                  |L31.1220|
                          DCD      g_bPowerDown
                  |L31.1224|
0004c8  4b49445f          DCB      "KID_POWERDOWN",0
0004cc  504f5745
0004d0  52444f57
0004d4  4e00    
0004d6  00                DCB      0
0004d7  00                DCB      0
                  |L31.1240|
                          DCD      g_nSysInternalTime
                  |L31.1244|
0004dc  706f7765          DCB      "power_off diff_time=%d, note_msg_time=%d\r\n",0
0004e0  725f6f66
0004e4  66206469
0004e8  66665f74
0004ec  696d653d
0004f0  25642c20
0004f4  6e6f7465
0004f8  5f6d7367
0004fc  5f74696d
000500  653d2564
000504  0d0a00  
000507  00                DCB      0
                  |L31.1288|
000508  4b49445f          DCB      "KID_GET_STATUS",0
00050c  4745545f
000510  53544154
000514  555300  
000517  00                DCB      0
                  |L31.1304|
000518  4b49445f          DCB      "KID_ENROLL_SINGLE",0
00051c  454e524f
000520  4c4c5f53
000524  494e474c
000528  4500    
00052a  00                DCB      0
00052b  00                DCB      0
                  |L31.1324|
00052c  4b49445f          DCB      "KID_DEL_USER",0
000530  44454c5f
000534  55534552
000538  00      
000539  00                DCB      0
00053a  00                DCB      0
00053b  00                DCB      0
                  |L31.1340|
00053c  4b49445f          DCB      "KID_DEL_ALL",0
000540  44454c5f
000544  414c4c00
                  |L31.1352|
000548  4b49445f          DCB      "KID_GET_USER_INFO",0
00054c  4745545f
000550  55534552
000554  5f494e46
000558  4f00    
00055a  00                DCB      0
00055b  00                DCB      0
                  |L31.1372|
00055c  4b49445f          DCB      "KID_GET_ALL_USER_ID",0
000560  4745545f
000564  414c4c5f
000568  55534552
00056c  5f494400
                  |L31.1392|
000570  4b49445f          DCB      "KID_SNAP_IMAGE",0
000574  534e4150
000578  5f494d41
00057c  474500  
00057f  00                DCB      0
                  |L31.1408|
000580  4b49445f          DCB      "KID_GET_SAVED_IMAGE",0
000584  4745545f
000588  53415645
00058c  445f494d
000590  41474500
                  |L31.1428|
000594  a2a2              ADR      r2,|L31.2080|
000596  f2af1164          ADR      r1,|L31.1076|
00059a  2001              MOVS     r0,#1
00059c  f7fffffe          BL       kdp_level_printf
0005a0  4620              MOV      r0,r4
0005a2  9700              STR      r7,[sp,#0]
0005a4  f7fffffe          BL       kl_ntohpl
0005a8  4605              MOV      r5,r0
0005aa  1d20              ADDS     r0,r4,#4
0005ac  f7fffffe          BL       kl_ntohpl
0005b0  9001              STR      r0,[sp,#4]
0005b2  aa01              ADD      r2,sp,#4
0005b4  4669              MOV      r1,sp
0005b6  4628              MOV      r0,r5
0005b8  f7fffffe          BL       DSM_Uart_UploadImage
0005bc  9901              LDR      r1,[sp,#4]
0005be  b28a              UXTH     r2,r1
0005c0  9900              LDR      r1,[sp,#0]
0005c2  f7fffffe          BL       send_uploadImage_reply_msg
0005c6  e5a4              B        |L31.274|
                  |L31.1480|
0005c8  a29a              ADR      r2,|L31.2100|
0005ca  f2af1198          ADR      r1,|L31.1076|
0005ce  2001              MOVS     r0,#1
0005d0  f7fffffe          BL       kdp_level_printf
0005d4  7820              LDRB     r0,[r4,#0]
0005d6  b063              ADD      sp,sp,#0x18c
0005d8  e8bd40f0          POP      {r4-r7,lr}
0005dc  f7ffbffe          B.W      DSM_Uart_ConfigBaudrate
                  |L31.1504|
0005e0  a299              ADR      r2,|L31.2120|
0005e2  f2af11b0          ADR      r1,|L31.1076|
0005e6  2001              MOVS     r0,#1
0005e8  f7fffffe          BL       kdp_level_printf
0005ec  7825              LDRB     r5,[r4,#0]
0005ee  7866              LDRB     r6,[r4,#1]
0005f0  4628              MOV      r0,r5
0005f2  4631              MOV      r1,r6
0005f4  f7fffffe          BL       DSM_Uart_SET_THRESHOLD_LEVEL
0005f8  0004              MOVS     r4,r0
0005fa  d109              BNE      |L31.1552|
0005fc  4668              MOV      r0,sp
0005fe  f7fffffe          BL       kl520_api_customer_get
000602  f88d5021          STRB     r5,[sp,#0x21]
000606  f88d6022          STRB     r6,[sp,#0x22]
00060a  4668              MOV      r0,sp
00060c  f7fffffe          BL       kl520_api_customer_write
                  |L31.1552|
000610  b063              ADD      sp,sp,#0x18c
000612  4620              MOV      r0,r4
000614  e8bd40f0          POP      {r4-r7,lr}
000618  f7ffbffe          B.W      send_AlgThreshold_level_reply_msg
                  |L31.1564|
00061c  a290              ADR      r2,|L31.2144|
00061e  f2af11ec          ADR      r1,|L31.1076|
000622  2001              MOVS     r0,#1
000624  f7fffffe          BL       kdp_level_printf
000628  7820              LDRB     r0,[r4,#0]
00062a  f88d6000          STRB     r6,[sp,#0]
00062e  4669              MOV      r1,sp
000630  f7fffffe          BL       DSM_Uart_SwitchPart
000634  f89d1000          LDRB     r1,[sp,#0]
000638  f7fffffe          BL       send_SwitchPart_reply_msg
00063c  e569              B        |L31.274|
                  |L31.1598|
00063e  a28d              ADR      r2,|L31.2164|
000640  f2af2110          ADR      r1,|L31.1076|
000644  2001              MOVS     r0,#1
000646  f7fffffe          BL       kdp_level_printf
00064a  f88d6000          STRB     r6,[sp,#0]
00064e  4668              MOV      r0,sp
000650  f7fffffe          BL       DSM_Uart_Get_Cur_Part
000654  f89d1000          LDRB     r1,[sp,#0]
000658  f7fffffe          BL       send_GetCurPart_reply_msg
00065c  e559              B        |L31.274|
                  |L31.1630|
00065e  a28a              ADR      r2,|L31.2184|
000660  f2af2130          ADR      r1,|L31.1076|
000664  2001              MOVS     r0,#1
000666  f7fffffe          BL       kdp_level_printf
00066a  2002              MOVS     r0,#2
00066c  7070              STRB     r0,[r6,#1]
00066e  7820              LDRB     r0,[r4,#0]
000670  f7fffffe          BL       KDP_Uart_MP_Calibration
000674  f7fffffe          BL       send_MpCalibration_reply_msg
000678  4888              LDR      r0,|L31.2204|
00067a  7007              STRB     r7,[r0,#0]
00067c  7077              STRB     r7,[r6,#1]
00067e  e548              B        |L31.274|
                  |L31.1664|
000680  a287              ADR      r2,|L31.2208|
000682  f2af2150          ADR      r1,|L31.1076|
000686  2001              MOVS     r0,#1
000688  f7fffffe          BL       kdp_level_printf
00068c  2114              MOVS     r1,#0x14
00068e  4668              MOV      r0,sp
000690  f7fffffe          BL       __aeabi_memclr4
000694  7a23              LDRB     r3,[r4,#8]
000696  462a              MOV      r2,r5
000698  f3630207          BFI      r2,r3,#0,#8
00069c  6820              LDR      r0,[r4,#0]
00069e  6861              LDR      r1,[r4,#4]
0006a0  466b              MOV      r3,sp
0006a2  f7fffffe          BL       DSM_Uart_Init_Encryption
0006a6  4604              MOV      r4,r0
0006a8  200a              MOVS     r0,#0xa
0006aa  f7fffffe          BL       osDelay
0006ae  4620              MOV      r0,r4
0006b0  4669              MOV      r1,sp
0006b2  f7fffffe          BL       send_InitEncryption_reply_msg
0006b6  e52c              B        |L31.274|
                  |L31.1720|
0006b8  a27e              ADR      r2,|L31.2228|
0006ba  f2af2188          ADR      r1,|L31.1076|
0006be  2001              MOVS     r0,#1
0006c0  f7fffffe          BL       kdp_level_printf
0006c4  2210              MOVS     r2,#0x10
0006c6  4621              MOV      r1,r4
0006c8  4668              MOV      r0,sp
0006ca  f7fffffe          BL       __aeabi_memcpy
0006ce  e89d000f          LDM      sp,{r0-r3}
0006d2  f7fffffe          BL       DSM_Uart_SetReleaseEncKey
0006d6  2152              MOVS     r1,#0x52
0006d8  e00f              B        |L31.1786|
                  |L31.1754|
0006da  a27c              ADR      r2,|L31.2252|
0006dc  f2af21ac          ADR      r1,|L31.1076|
0006e0  2001              MOVS     r0,#1                 ;1319
0006e2  f7fffffe          BL       kdp_level_printf
0006e6  2210              MOVS     r2,#0x10              ;1319
0006e8  4621              MOV      r1,r4                 ;1319
0006ea  4668              MOV      r0,sp                 ;1319
0006ec  f7fffffe          BL       __aeabi_memcpy
0006f0  e89d000f          LDM      sp,{r0-r3}            ;1319
0006f4  f7fffffe          BL       DSM_Uart_SetDebugEncKey
0006f8  2153              MOVS     r1,#0x53              ;1319
                  |L31.1786|
0006fa  f7fffffe          BL       send_SetReleaseOrDebugEncKey_reply_msg
0006fe  e508              B        |L31.274|
                  |L31.1792|
000700  b063              ADD      sp,sp,#0x18c          ;1331
000702  4620              MOV      r0,r4                 ;1331
000704  e8bd40f0          POP      {r4-r7,lr}            ;1331
000708  f7ffbffe          B.W      handle_user_rotate_sensor
                  |L31.1804|
00070c  7820              LDRB     r0,[r4,#0]            ;1331
00070e  7861              LDRB     r1,[r4,#1]            ;1331
000710  78a2              LDRB     r2,[r4,#2]            ;1331
000712  f7fffffe          BL       DSM_Uart_StartOta
000716  b063              ADD      sp,sp,#0x18c          ;1331
000718  2140              MOVS     r1,#0x40              ;1331
00071a  e8bd40f0          POP      {r4-r7,lr}            ;1331
00071e  f7ffbffe          B.W      send_StartOrStopOta_reply_msg
                  |L31.1826|
000722  a270              ADR      r2,|L31.2276|
000724  f2af21f4          ADR      r1,|L31.1076|
000728  2001              MOVS     r0,#1                 ;1331
00072a  f7fffffe          BL       kdp_level_printf
00072e  f7fffffe          BL       DSM_Uart_StopOta
000732  2141              MOVS     r1,#0x41              ;1331
000734  f7fffffe          BL       send_StartOrStopOta_reply_msg
000738  b063              ADD      sp,sp,#0x18c          ;1331
00073a  e8bd40f0          POP      {r4-r7,lr}            ;1331
00073e  f7ffbffe          B.W      power_mgr_sw_reset
                  |L31.1858|
000742  a26c              ADR      r2,|L31.2292|
000744  f2af3114          ADR      r1,|L31.1076|
000748  2001              MOVS     r0,#1                 ;1331
00074a  f7fffffe          BL       kdp_level_printf
00074e  a901              ADD      r1,sp,#4              ;1331
000750  4668              MOV      r0,sp                 ;1331
000752  f7fffffe          BL       DSM_Uart_GetOtaStatus
000756  aa01              ADD      r2,sp,#4              ;1331
000758  f89d1000          LDRB     r1,[sp,#0]            ;1331
00075c  f7fffffe          BL       send_OtaStatus_reply_msg
000760  e4d7              B        |L31.274|
                  |L31.1890|
000762  a269              ADR      r2,|L31.2312|
000764  f2af3134          ADR      r1,|L31.1076|
000768  2001              MOVS     r0,#1
00076a  f7fffffe          BL       kdp_level_printf
00076e  2130              MOVS     r1,#0x30
000770  4668              MOV      r0,sp
000772  f7fffffe          BL       __aeabi_memclr4
000776  222b              MOVS     r2,#0x2b
000778  4621              MOV      r1,r4
00077a  4668              MOV      r0,sp
00077c  f7fffffe          BL       __aeabi_memcpy
000780  4668              MOV      r0,sp
000782  f7fffffe          BL       DSM_Uart_OtaHeader
000786  2143              MOVS     r1,#0x43
000788  f7fffffe          BL       send_OtaHeaderOrPacket_reply_msg
00078c  e4c1              B        |L31.274|
                  |L31.1934|
00078e  6820              LDR      r0,[r4,#0]
000790  1d21              ADDS     r1,r4,#4
000792  f7fffffe          BL       DSM_Uart_OtaPacket
000796  b063              ADD      sp,sp,#0x18c
000798  2144              MOVS     r1,#0x44
00079a  e8bd40f0          POP      {r4-r7,lr}
00079e  f7ffbffe          B.W      send_OtaHeaderOrPacket_reply_msg
                  |L31.1954|
0007a2  b063              ADD      sp,sp,#0x18c          ;1368
0007a4  4620              MOV      r0,r4                 ;1368
0007a6  e8bd40f0          POP      {r4-r7,lr}            ;1368
0007aa  f7ffbffe          B.W      handle_db_export
                  |L31.1966|
0007ae  b063              ADD      sp,sp,#0x18c          ;1374
0007b0  4620              MOV      r0,r4                 ;1374
0007b2  e8bd40f0          POP      {r4-r7,lr}            ;1374
0007b6  f7ffbffe          B.W      handle_db_import
                  |L31.1978|
0007ba  b063              ADD      sp,sp,#0x18c          ;1380
0007bc  4620              MOV      r0,r4                 ;1380
0007be  e8bd40f0          POP      {r4-r7,lr}            ;1380
0007c2  f7ffbffe          B.W      handle_upload_data
                  |L31.1990|
0007c6  b063              ADD      sp,sp,#0x18c          ;1386
0007c8  4620              MOV      r0,r4                 ;1386
0007ca  e8bd40f0          POP      {r4-r7,lr}            ;1386
0007ce  f7ffbffe          B.W      handle_download_data
                  |L31.2002|
0007d2  a251              ADR      r2,|L31.2328|
0007d4  f2af31a4          ADR      r1,|L31.1076|
0007d8  2001              MOVS     r0,#1                 ;1386
0007da  f7fffffe          BL       kdp_level_printf
0007de  2130              MOVS     r1,#0x30              ;1386
0007e0  4668              MOV      r0,sp                 ;1386
0007e2  f7fffffe          BL       __aeabi_memclr4
0007e6  222d              MOVS     r2,#0x2d              ;1386
0007e8  4621              MOV      r1,r4                 ;1386
0007ea  4668              MOV      r0,sp                 ;1386
0007ec  f7fffffe          BL       __aeabi_memcpy
0007f0  4668              MOV      r0,sp                 ;1386
0007f2  f7fffffe          BL       KDP_set_mass_data_header
0007f6  2179              MOVS     r1,#0x79              ;1386
0007f8  f7fffffe          BL       send_SetMassDataHeader_reply_msg
0007fc  e489              B        |L31.274|
                  |L31.2046|
0007fe  a24e              ADR      r2,|L31.2360|
000800  f2af31d0          ADR      r1,|L31.1076|
000804  2001              MOVS     r0,#1
000806  f7fffffe          BL       kdp_level_printf
00080a  2002              MOVS     r0,#2
00080c  7070              STRB     r0,[r6,#1]
00080e  f8540b04          LDR      r0,[r4],#4
000812  e9cd0400          STRD     r0,r4,[sp,#0]
000816  2175              MOVS     r1,#0x75
000818  4668              MOV      r0,sp
00081a  f7fffffe          BL       KDP_imp_mass_data
00081e  e5d9              B        |L31.980|
;;;1916   
                          ENDP

                  |L31.2080|
000820  4b49445f          DCB      "KID_UPLOAD_IMAGE",0
000824  55504c4f
000828  41445f49
00082c  4d414745
000830  00      
000831  00                DCB      0
000832  00                DCB      0
000833  00                DCB      0
                  |L31.2100|
000834  4b49445f          DCB      "KID_CONFIG_BAUDRATE",0
000838  434f4e46
00083c  49475f42
000840  41554452
000844  41544500
                  |L31.2120|
000848  4b49445f          DCB      "KID_SET_THRESHOLD_LEVEL",0
00084c  5345545f
000850  54485245
000854  53484f4c
000858  445f4c45
00085c  56454c00
                  |L31.2144|
000860  4b49445f          DCB      "KID_SW_BOOT_PART",0
000864  53575f42
000868  4f4f545f
00086c  50415254
000870  00      
000871  00                DCB      0
000872  00                DCB      0
000873  00                DCB      0
                  |L31.2164|
000874  4b49445f          DCB      "KID_GET_CUR_PART",0
000878  4745545f
00087c  4355525f
000880  50415254
000884  00      
000885  00                DCB      0
000886  00                DCB      0
000887  00                DCB      0
                  |L31.2184|
000888  4b49445f          DCB      "KID_MP_CALIBRATION",0
00088c  4d505f43
000890  414c4942
000894  52415449
000898  4f4e00  
00089b  00                DCB      0
                  |L31.2204|
                          DCD      db_write
                  |L31.2208|
0008a0  4b49445f          DCB      "KID_INIT_ENCRYPTION",0
0008a4  494e4954
0008a8  5f454e43
0008ac  52595054
0008b0  494f4e00
                  |L31.2228|
0008b4  4b49445f          DCB      "KID_SET_RELEASE_ENC_KEY",0
0008b8  5345545f
0008bc  52454c45
0008c0  4153455f
0008c4  454e435f
0008c8  4b455900
                  |L31.2252|
0008cc  4b49445f          DCB      "KID_SET_DEBUG_ENC_KEY",0
0008d0  5345545f
0008d4  44454255
0008d8  475f454e
0008dc  435f4b45
0008e0  5900    
0008e2  00                DCB      0
0008e3  00                DCB      0
                  |L31.2276|
0008e4  4b49445f          DCB      "KID_STOP_OTA",0
0008e8  53544f50
0008ec  5f4f5441
0008f0  00      
0008f1  00                DCB      0
0008f2  00                DCB      0
0008f3  00                DCB      0
                  |L31.2292|
0008f4  4b49445f          DCB      "KID_GET_OTA_STATUS",0
0008f8  4745545f
0008fc  4f54415f
000900  53544154
000904  555300  
000907  00                DCB      0
                  |L31.2312|
000908  4b49445f          DCB      "KID_OTA_HEADER",0
00090c  4f54415f
000910  48454144
000914  455200  
000917  00                DCB      0
                  |L31.2328|
000918  4b49445f          DCB      "KID_SET_IMP_MASS_DATA_HEADER",0
00091c  5345545f
000920  494d505f
000924  4d415353
000928  5f444154
00092c  415f4845
000930  41444552
000934  00      
000935  00                DCB      0
000936  00                DCB      0
000937  00                DCB      0
                  |L31.2360|
000938  4b49445f          DCB      "KID_IMP_FM_DATA",0
00093c  494d505f
000940  464d5f44
000944  41544100

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  msg_enroll
                          %        38

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  __func__
000000  68616e64          DCB      0x68,0x61,0x6e,0x64
000004  6c655f6b          DCB      0x6c,0x65,0x5f,0x6b
000008  69645f65          DCB      0x69,0x64,0x5f,0x65
00000c  6e726f6c          DCB      0x6e,0x72,0x6f,0x6c
000010  6c000000          DCB      0x6c,0x00,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000600
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  4d525f53          DCB      "MR_SUCCESS",0
000004  55434345
000008  535300  
00000b  00                DCB      0
00000c  4d525f52          DCB      "MR_REJECTED",0
000010  454a4543
000014  54454400
000018  4d525f41          DCB      "MR_ABORTED",0
00001c  424f5254
000020  454400  
000023  00                DCB      0
000024  4d525f46          DCB      "MR_FAILED_DEV_OPEN_FAIL",0
000028  41494c45
00002c  445f4445
000030  565f4f50
000034  454e5f46
000038  41494c00
00003c  4d525f46          DCB      "MR_FAILED_UNKNOWN_REASON",0
000040  41494c45
000044  445f554e
000048  4b4e4f57
00004c  4e5f5245
000050  41534f4e
000054  00      
000055  00                DCB      0
000056  00                DCB      0
000057  00                DCB      0
000058  4d525f46          DCB      "MR_FAILED_INVALID_PARAM",0
00005c  41494c45
000060  445f494e
000064  56414c49
000068  445f5041
00006c  52414d00
000070  4d525f46          DCB      "MR_FAILED_OOM",0
000074  41494c45
000078  445f4f4f
00007c  4d00    
00007e  00                DCB      0
00007f  00                DCB      0
000080  4d525f46          DCB      "MR_FAILED_UNKNOWN_USER",0
000084  41494c45
000088  445f554e
00008c  4b4e4f57
000090  4e5f5553
000094  455200  
000097  00                DCB      0
000098  4d525f46          DCB      "MR_FAILED_MAX_USER",0
00009c  41494c45
0000a0  445f4d41
0000a4  585f5553
0000a8  455200  
0000ab  00                DCB      0
0000ac  4d525f46          DCB      "MR_FAILED_FACE_ENROLLED",0
0000b0  41494c45
0000b4  445f4641
0000b8  43455f45
0000bc  4e524f4c
0000c0  4c454400
0000c4  4d525f46          DCB      "MR_FAILED_LIVENESS_CHECK",0
0000c8  41494c45
0000cc  445f4c49
0000d0  56454e45
0000d4  53535f43
0000d8  4845434b
0000dc  00      
0000dd  00                DCB      0
0000de  00                DCB      0
0000df  00                DCB      0
0000e0  4d525f46          DCB      "MR_FAILED_TIME_OUT",0
0000e4  41494c45
0000e8  445f5449
0000ec  4d455f4f
0000f0  555400  
0000f3  00                DCB      0
0000f4  4d525f46          DCB      "MR_FAILED_AUTHORIZATION",0
0000f8  41494c45
0000fc  445f4155
000100  54484f52
000104  495a4154
000108  494f4e00
00010c  4d525f46          DCB      "MR_FAILED_READ_FILE",0
000110  41494c45
000114  445f5245
000118  41445f46
00011c  494c4500
000120  4d525f46          DCB      "MR_FAILED_WRITE_FILE",0
000124  41494c45
000128  445f5752
00012c  4954455f
000130  46494c45
000134  00      
000135  00                DCB      0
000136  00                DCB      0
000137  00                DCB      0
000138  4d525f46          DCB      "MR_FAILED_NO_ENCRYPT",0
00013c  41494c45
000140  445f4e4f
000144  5f454e43
000148  52595054
00014c  00      
00014d  00                DCB      0
00014e  00                DCB      0
00014f  00                DCB      0
000150  4d525f46          DCB      "MR_FAILED_STORE_ERR",0
000154  41494c45
000158  445f5354
00015c  4f52455f
000160  45525200
000164  4d525f46          DCB      "MR_FAILED_NO_IMG",0
000168  41494c45
00016c  445f4e4f
000170  5f494d47
000174  00      
000175  00                DCB      0
000176  00                DCB      0
000177  00                DCB      0
000178  4d525f46          DCB      "MR_FAILED_NO_IDX",0
00017c  41494c45
000180  445f4e4f
000184  5f494458
000188  00      
000189  00                DCB      0
00018a  00                DCB      0
00018b  00                DCB      0
00018c  4d525f46          DCB      "MR_FAILED_BUF_OVERFLOW",0
000190  41494c45
000194  445f4255
000198  465f4f56
00019c  4552464c
0001a0  4f5700  
0001a3  00                DCB      0
0001a4  4d525f46          DCB      "MR_FAILED_MASS_DATA_HEAD_EMPTY",0
0001a8  41494c45
0001ac  445f4d41
0001b0  53535f44
0001b4  4154415f
0001b8  48454144
0001bc  5f454d50
0001c0  545900  
0001c3  00                DCB      0
0001c4  4d525f46          DCB      "MR_FAILED_MASS_DATA_DB_ABNORMAL",0
0001c8  41494c45
0001cc  445f4d41
0001d0  53535f44
0001d4  4154415f
0001d8  44425f41
0001dc  424e4f52
0001e0  4d414c00
0001e4  4d525f46          DCB      "MR_FAILED_MASS_DATA_FM_ABNORMAL",0
0001e8  41494c45
0001ec  445f4d41
0001f0  53535f44
0001f4  4154415f
0001f8  464d5f41
0001fc  424e4f52
000200  4d414c00
000204  4d525f46          DCB      "MR_FAILED_NOT_READY",0
000208  41494c45
00020c  445f4e4f
000210  545f5245
000214  41445900
000218  4d525f46          DCB      "MR_FAILED_EXISTED_USER",0
00021c  41494c45
000220  445f4558
000224  49535445
000228  445f5553
00022c  455200  
00022f  00                DCB      0
000230  4d525f46          DCB      "MR_FAILED_IDX_OVERFLOW",0
000234  41494c45
000238  445f4944
00023c  585f4f56
000240  4552464c
000244  4f5700  
000247  00                DCB      0
000248  4d525f43          DCB      "MR_CONTIUNOUS",0
00024c  4f4e5449
000250  554e4f55
000254  5300    
000256  00                DCB      0
000257  00                DCB      0
000258  4d525f53          DCB      "MR_SUCCESS_BUT_DEL_USER",0
00025c  55434345
000260  53535f42
000264  55545f44
000268  454c5f55
00026c  53455200
000270  4d525f46          DCB      "MR_FAILED_INVALID_CMD",0
000274  41494c45
000278  445f494e
00027c  56414c49
000280  445f434d
000284  4400    
000286  00                DCB      0
000287  00                DCB      0
000288  00                DCB      0
000289  00                DCB      0
00028a  00                DCB      0
00028b  00                DCB      0
00028c  6d73675f          DCB      "msg_enroll:admin:0x%02x,user_name:%s,face_dir:0x%02x,ti"
000290  656e726f
000294  6c6c3a61
000298  646d696e
00029c  3a307825
0002a0  3032782c
0002a4  75736572
0002a8  5f6e616d
0002ac  653a2573
0002b0  2c666163
0002b4  655f6469
0002b8  723a3078
0002bc  25303278
0002c0  2c7469  
0002c3  6d656f75          DCB      "meout:0x%02x \r\n",0
0002c7  743a3078
0002cb  25303278
0002cf  200d0a00

                          AREA ||.data||, DATA, ALIGN=2

                  g_bResponseEn
000000  00                DCB      0x00
                  g_eUserComThreadEvent
000001  00                DCB      0x00
                  flag_first_ota
000002  0000              DCB      0x00,0x00
                  _user_com_data
000004  0000              DCW      0x0000
                  db_import_user_id
000006  0000              DCB      0x00,0x00
                  user_com_event_id
                          DCD      0x00000000
                  user_com_fdfr_evt
                          DCD      0x00000000
                  tid_user_com_fdfr_thread
                          DCD      0x00000000
                  mutex_rsp_msg
                          DCD      0x00000000
                  _user_com_ops
                          DCD      kneron_lwcom_packet_analyze
                          DCD      user_lwcom_parser
                  db_export_info
                          %        8
                  db_import_info
                          %        8

                          AREA ||i._str_uart_reply||, COMGROUP=_str_uart_reply, CODE, READONLY, ALIGN=2

                  _str_uart_reply PROC
;;;201    #pragma diag_suppress 111
;;;202    inline char *_str_uart_reply(enum uart_reply_result result)
000000  2814              CMP      r0,#0x14
;;;203    {
;;;204        switch (result)
000002  d04e              BEQ      |L178.162|
000004  dc0d              BGT      |L178.34|
000006  2814              CMP      r0,#0x14
000008  d22d              BCS      |L178.102|
00000a  e8dff000          TBB      [pc,r0]
00000e  2e30              DCB      0x2e,0x30
000010  322c3436          DCB      0x32,0x2c,0x34,0x36
000014  383a3c3e          DCB      0x38,0x3a,0x3c,0x3e
000018  402c4244          DCB      0x40,0x2c,0x42,0x44
00001c  462c2c2c          DCB      0x46,0x2c,0x2c,0x2c
000020  2c48              DCB      0x2c,0x48
                  |L178.34|
000022  2832              CMP      r0,#0x32
000024  d04d              BEQ      |L178.194|
000026  dc10              BGT      |L178.74|
000028  2818              CMP      r0,#0x18
00002a  d042              BEQ      |L178.178|
00002c  dc06              BGT      |L178.60|
00002e  2815              CMP      r0,#0x15
000030  d039              BEQ      |L178.166|
000032  2816              CMP      r0,#0x16
000034  d039              BEQ      |L178.170|
000036  2817              CMP      r0,#0x17
000038  d115              BNE      |L178.102|
00003a  e038              B        |L178.174|
                  |L178.60|
00003c  2819              CMP      r0,#0x19
00003e  d03a              BEQ      |L178.182|
000040  2830              CMP      r0,#0x30
000042  d03a              BEQ      |L178.186|
000044  2831              CMP      r0,#0x31
000046  d10e              BNE      |L178.102|
000048  e039              B        |L178.190|
                  |L178.74|
00004a  2836              CMP      r0,#0x36
00004c  d041              BEQ      |L178.210|
00004e  dc06              BGT      |L178.94|
000050  2833              CMP      r0,#0x33
000052  d038              BEQ      |L178.198|
000054  2834              CMP      r0,#0x34
000056  d038              BEQ      |L178.202|
000058  2835              CMP      r0,#0x35
00005a  d104              BNE      |L178.102|
00005c  e037              B        |L178.206|
                  |L178.94|
00005e  2840              CMP      r0,#0x40
000060  d039              BEQ      |L178.214|
000062  28ff              CMP      r0,#0xff
000064  d039              BEQ      |L178.218|
                  |L178.102|
;;;205        {
;;;206            CMD_REPLY_RESULT_MACRO(TO_STR)
;;;207        default:
;;;208            break;
;;;209        }
;;;210        
;;;211        return "";
000066  481e              LDR      r0,|L178.224|
;;;212    }
000068  4770              BX       lr
00006a  481e              LDR      r0,|L178.228|
00006c  4770              BX       lr
00006e  481e              LDR      r0,|L178.232|
000070  4770              BX       lr
000072  481e              LDR      r0,|L178.236|
000074  4770              BX       lr
000076  481e              LDR      r0,|L178.240|
000078  4770              BX       lr
00007a  481e              LDR      r0,|L178.244|
00007c  4770              BX       lr
00007e  481e              LDR      r0,|L178.248|
000080  4770              BX       lr
000082  481e              LDR      r0,|L178.252|
000084  4770              BX       lr
000086  481e              LDR      r0,|L178.256|
000088  4770              BX       lr
00008a  481e              LDR      r0,|L178.260|
00008c  4770              BX       lr
00008e  481e              LDR      r0,|L178.264|
000090  4770              BX       lr
000092  481e              LDR      r0,|L178.268|
000094  4770              BX       lr
000096  481e              LDR      r0,|L178.272|
000098  4770              BX       lr
00009a  481e              LDR      r0,|L178.276|
00009c  4770              BX       lr
00009e  481e              LDR      r0,|L178.280|
0000a0  4770              BX       lr
                  |L178.162|
0000a2  481e              LDR      r0,|L178.284|
0000a4  4770              BX       lr
                  |L178.166|
0000a6  481e              LDR      r0,|L178.288|
0000a8  4770              BX       lr
                  |L178.170|
0000aa  481e              LDR      r0,|L178.292|
0000ac  4770              BX       lr
                  |L178.174|
0000ae  481e              LDR      r0,|L178.296|
0000b0  4770              BX       lr
                  |L178.178|
0000b2  481e              LDR      r0,|L178.300|
0000b4  4770              BX       lr
                  |L178.182|
0000b6  481e              LDR      r0,|L178.304|
0000b8  4770              BX       lr
                  |L178.186|
0000ba  481e              LDR      r0,|L178.308|
0000bc  4770              BX       lr
                  |L178.190|
0000be  481e              LDR      r0,|L178.312|
0000c0  4770              BX       lr
                  |L178.194|
0000c2  481e              LDR      r0,|L178.316|
0000c4  4770              BX       lr
                  |L178.198|
0000c6  481e              LDR      r0,|L178.320|
0000c8  4770              BX       lr
                  |L178.202|
0000ca  481e              LDR      r0,|L178.324|
0000cc  4770              BX       lr
                  |L178.206|
0000ce  481e              LDR      r0,|L178.328|
0000d0  4770              BX       lr
                  |L178.210|
0000d2  481e              LDR      r0,|L178.332|
0000d4  4770              BX       lr
                  |L178.214|
0000d6  481e              LDR      r0,|L178.336|
0000d8  4770              BX       lr
                  |L178.218|
0000da  481e              LDR      r0,|L178.340|
0000dc  4770              BX       lr
;;;213    #pragma diag_warning 111
                          ENDP

0000de  0000              DCW      0x0000
                  |L178.224|
                          DCD      ||.conststring||+0x288
                  |L178.228|
                          DCD      ||.conststring||
                  |L178.232|
                          DCD      ||.conststring||+0xc
                  |L178.236|
                          DCD      ||.conststring||+0x18
                  |L178.240|
                          DCD      ||.conststring||+0x24
                  |L178.244|
                          DCD      ||.conststring||+0x3c
                  |L178.248|
                          DCD      ||.conststring||+0x58
                  |L178.252|
                          DCD      ||.conststring||+0x70
                  |L178.256|
                          DCD      ||.conststring||+0x80
                  |L178.260|
                          DCD      ||.conststring||+0x98
                  |L178.264|
                          DCD      ||.conststring||+0xac
                  |L178.268|
                          DCD      ||.conststring||+0xc4
                  |L178.272|
                          DCD      ||.conststring||+0xe0
                  |L178.276|
                          DCD      ||.conststring||+0xf4
                  |L178.280|
                          DCD      ||.conststring||+0x10c
                  |L178.284|
                          DCD      ||.conststring||+0x120
                  |L178.288|
                          DCD      ||.conststring||+0x138
                  |L178.292|
                          DCD      ||.conststring||+0x150
                  |L178.296|
                          DCD      ||.conststring||+0x164
                  |L178.300|
                          DCD      ||.conststring||+0x178
                  |L178.304|
                          DCD      ||.conststring||+0x18c
                  |L178.308|
                          DCD      ||.conststring||+0x1a4
                  |L178.312|
                          DCD      ||.conststring||+0x1c4
                  |L178.316|
                          DCD      ||.conststring||+0x1e4
                  |L178.320|
                          DCD      ||.conststring||+0x204
                  |L178.324|
                          DCD      ||.conststring||+0x218
                  |L178.328|
                          DCD      ||.conststring||+0x230
                  |L178.332|
                          DCD      ||.conststring||+0x248
                  |L178.336|
                          DCD      ||.conststring||+0x258
                  |L178.340|
                          DCD      ||.conststring||+0x270

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\scpu\\middleware\\kdp_comm\\kdp_comm_and_gui_fdr.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___22_kdp_comm_and_gui_fdr_c_4f3ca34f____REV16|
#line 208 "F:\\Users\\fu\\AppData\\Local\\Arm\\Packs\\ARM\\CMSIS\\5.9.0\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___22_kdp_comm_and_gui_fdr_c_4f3ca34f____REV16| PROC
#line 209

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___22_kdp_comm_and_gui_fdr_c_4f3ca34f____REVSH|
#line 223
|__asm___22_kdp_comm_and_gui_fdr_c_4f3ca34f____REVSH| PROC
#line 224

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___22_kdp_comm_and_gui_fdr_c_4f3ca34f____RRX|
#line 410
|__asm___22_kdp_comm_and_gui_fdr_c_4f3ca34f____RRX| PROC
#line 411

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
