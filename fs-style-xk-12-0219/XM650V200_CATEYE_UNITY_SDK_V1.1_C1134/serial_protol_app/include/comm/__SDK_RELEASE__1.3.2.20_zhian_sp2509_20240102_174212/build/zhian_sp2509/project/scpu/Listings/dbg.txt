; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\objects\dbg.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\dbg.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O3 --diag_suppress=9931 -I..\..\config -I..\..\..\..\board -I..\..\..\..\common\include -I..\..\..\..\scpu\device\include\CMSIS -I..\..\..\..\scpu\device\include\Kneron -I..\..\..\..\scpu\framework\include -I..\..\..\..\scpu\framework\include\framework -I..\..\..\..\scpu\drivers\include -I..\..\..\..\scpu\drivers\include\media\touch -I..\..\..\..\scpu\drivers\include\media\flash -I..\..\..\..\scpu\lib\kdp_system\inc -I..\..\..\..\scpu\lib\kdp_application\include\ -I..\..\..\..\scpu\lib\kdp_application\base\ -I..\..\..\..\scpu\lib\kdp_application\misc -I..\..\..\..\scpu\lib\kdp_e2e_r1n1\include -I..\..\..\..\scpu\include -I..\..\..\..\scpu\middleware\ota -I..\..\..\..\scpu\middleware\comm -I..\..\..\..\scpu\middleware\kdp_comm -I..\..\..\..\scpu\share -I..\..\..\..\scpu\share\gui_lib -I..\..\user -I.\RTE\CMSIS -I.\RTE\_Target-scpu -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\RTOS2\Include -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\RTOS2\RTX\Include -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\Device\ARM\ARMCM4\Include -D__RTX -D__MICROLIB -D__UVISION_VERSION=538 -D_RTE_ -DARMCM4_FP -D_RTE_ -DARM_MATH_CM4 -DTARGET_SCPU -DLOG_ENABLE -DKL520 -DHEAD_POSE_CHECK_PERCENT --omf_browse=.\objects\dbg.crf ..\..\..\..\scpu\share\dbg.c]
                          THUMB

                          AREA ||i.kdp_level_printf||, CODE, READONLY, ALIGN=2

                  kdp_level_printf PROC
;;;88     }
;;;89     void kdp_level_printf(int level, const char *fmt, ...) /* variable arguments */
000000  b40f              PUSH     {r0-r3}
;;;90     {
;;;91         uint32_t lvl = log_get_level_scpu();
000002  4919              LDR      r1,|L1.104|
000004  b570              PUSH     {r4-r6,lr}            ;90
000006  6809              LDR      r1,[r1,#0]  ; s_out_comm
;;;92         lvl >>= 16;
;;;93     
;;;94         if ((level == LOG_PROFILE && level == lvl) || (level > 0 && level <= lvl))
;;;95         {
;;;96             va_list arg_ptr;
;;;97     
;;;98             va_start(arg_ptr, fmt);
;;;99             vsprintf(&uart_buffer[0], fmt, arg_ptr);
;;;100            va_end(arg_ptr);
;;;101    
;;;102            //UART0_Tx = false;
;;;103            if (strlen(uart_buffer) > DBG_BUFFER_SIZE)
;;;104            {
;;;105                kdp_uart_write(handle0, (uint8_t *)uart_error_msg, strlen(uart_error_msg));
;;;106                uart_buffer[DBG_BUFFER_SIZE-1] = 0; // truncate the original output
;;;107            }
;;;108            kdp_uart_write(handle0, (uint8_t *)uart_buffer, strlen(uart_buffer));
;;;109        }
;;;110    }
000008  220f              MOVS     r2,#0xf
00000a  2809              CMP      r0,#9                 ;94
00000c  6909              LDR      r1,[r1,#0x10]         ;91
00000e  ea024111          AND      r1,r2,r1,LSR #16
000012  d026              BEQ      |L1.98|
000014  2800              CMP      r0,#0                 ;94
000016  dd21              BLE      |L1.92|
                  |L1.24|
000018  4288              CMP      r0,r1                 ;94
00001a  d81f              BHI      |L1.92|
                  |L1.28|
00001c  aa06              ADD      r2,sp,#0x18           ;98
00001e  4813              LDR      r0,|L1.108|
000020  9905              LDR      r1,[sp,#0x14]         ;99
000022  f7fffffe          BL       vsprintf
000026  2500              MOVS     r5,#0                 ;100
000028  4810              LDR      r0,|L1.108|
00002a  f7fffffe          BL       strlen
00002e  4c10              LDR      r4,|L1.112|
000030  f5b07f00          CMP      r0,#0x200             ;103
000034  d90a              BLS      |L1.76|
000036  480f              LDR      r0,|L1.116|
000038  f7fffffe          BL       strlen
00003c  4602              MOV      r2,r0                 ;105
00003e  490d              LDR      r1,|L1.116|
000040  6820              LDR      r0,[r4,#0]            ;105  ; handle0
000042  f7fffffe          BL       kdp_uart_write
000046  4809              LDR      r0,|L1.108|
000048  f88051ff          STRB     r5,[r0,#0x1ff]        ;106
                  |L1.76|
00004c  4807              LDR      r0,|L1.108|
00004e  f7fffffe          BL       strlen
000052  4602              MOV      r2,r0                 ;108
000054  4905              LDR      r1,|L1.108|
000056  6820              LDR      r0,[r4,#0]            ;108  ; handle0
000058  f7fffffe          BL       kdp_uart_write
                  |L1.92|
00005c  bc70              POP      {r4-r6}
00005e  f85dfb14          LDR      pc,[sp],#0x14
                  |L1.98|
000062  2909              CMP      r1,#9                 ;94
000064  d0da              BEQ      |L1.28|
000066  e7d7              B        |L1.24|
;;;111    
                          ENDP

                  |L1.104|
                          DCD      s_out_comm
                  |L1.108|
                          DCD      ||.bss||
                  |L1.112|
                          DCD      ||.data||
                  |L1.116|
                          DCD      ||.constdata||

                          AREA ||i.kdp_printf||, CODE, READONLY, ALIGN=2

                  kdp_printf PROC
;;;73     #else
;;;74     void kdp_printf(const char *f, ...)    /* variable arguments */
000000  b40f              PUSH     {r0-r3}
;;;75     {
;;;76         va_list arg_ptr;
;;;77     
;;;78         va_start(arg_ptr, f);
;;;79         vsnprintf(&uart_buffer[0], DBG_BUFFER_SIZE - 1, f, arg_ptr);
000002  f24011ff          MOV      r1,#0x1ff
000006  b510              PUSH     {r4,lr}               ;75
000008  ab03              ADD      r3,sp,#0xc            ;78
00000a  4808              LDR      r0,|L2.44|
00000c  9a02              LDR      r2,[sp,#8]
00000e  f7fffffe          BL       vsnprintf
;;;80         va_end(arg_ptr);
;;;81     
;;;82         //UART0_Tx = FALSE;
;;;83     //    if (strlen(uart_buffer) > DBG_BUFFER_SIZE) {
;;;84     //        kdp_uart_write(handle0, (u8*) uart_error_msg, strlen(uart_error_msg));
;;;85     //        uart_buffer[DBG_BUFFER_SIZE-1] = 0;  // truncate the original output
;;;86     //    }
;;;87         kdp_uart_write(handle0, (u8*) uart_buffer, strlen(uart_buffer));     
000012  4806              LDR      r0,|L2.44|
000014  f7fffffe          BL       strlen
000018  4602              MOV      r2,r0
00001a  4805              LDR      r0,|L2.48|
00001c  4903              LDR      r1,|L2.44|
00001e  6800              LDR      r0,[r0,#0]  ; handle0
000020  f7fffffe          BL       kdp_uart_write
;;;88     }
000024  bc10              POP      {r4}
000026  f85dfb14          LDR      pc,[sp],#0x14
;;;89     void kdp_level_printf(int level, const char *fmt, ...) /* variable arguments */
                          ENDP

00002a  0000              DCW      0x0000
                  |L2.44|
                          DCD      ||.bss||
                  |L2.48|
                          DCD      ||.data||

                          AREA ||i.kdp_printf_nocrlf||, CODE, READONLY, ALIGN=2

                  kdp_printf_nocrlf PROC
;;;136    #endif
;;;137    void kdp_printf_nocrlf(const char *f, ...)    /* variable arguments */
000000  b40f              PUSH     {r0-r3}
;;;138    {
000002  b500              PUSH     {lr}
000004  b0c1              SUB      sp,sp,#0x104
;;;139        va_list arg_ptr;
;;;140        char buffer[256];
;;;141    
;;;142        va_start(arg_ptr, f);
000006  aa43              ADD      r2,sp,#0x10c
;;;143        vsprintf(&buffer[0], f, arg_ptr);
000008  4668              MOV      r0,sp
00000a  9942              LDR      r1,[sp,#0x108]
00000c  f7fffffe          BL       vsprintf
;;;144        va_end(arg_ptr);
;;;145    
;;;146        //UART0_Tx = FALSE;
;;;147        kdp_uart_write(handle0, (uint8_t*)buffer, strlen(buffer));
000010  4668              MOV      r0,sp
000012  f7fffffe          BL       strlen
000016  4602              MOV      r2,r0
000018  4803              LDR      r0,|L3.40|
00001a  4669              MOV      r1,sp
00001c  6800              LDR      r0,[r0,#0]  ; handle0
00001e  f7fffffe          BL       kdp_uart_write
;;;148    }
000022  b041              ADD      sp,sp,#0x104
000024  f85dfb14          LDR      pc,[sp],#0x14
;;;149    
                          ENDP

                  |L3.40|
                          DCD      ||.data||

                          AREA ||i.kdp_uart_app_uart0_log||, CODE, READONLY, ALIGN=2

                  kdp_uart_app_uart0_log PROC
;;;16     
;;;17     void kdp_uart_app_uart0_log(void)
000000  b53e              PUSH     {r1-r5,lr}
;;;18     {
;;;19         int32_t ret;
;;;20     
;;;21         handle0 = kdp_uart_open(DEBUG_CONSOLE, UART_MODE_ASYN_RX | UART_MODE_SYNC_TX, 0);
000002  2200              MOVS     r2,#0
000004  2109              MOVS     r1,#9
000006  4610              MOV      r0,r2
000008  f7fffffe          BL       kdp_uart_open
00000c  4c0e              LDR      r4,|L4.72|
;;;22         if (handle0 == (kdp_uart_hdl_t)UART_FAIL)
00000e  1c41              ADDS     r1,r0,#1
000010  6020              STR      r0,[r4,#0]  ; handle0
000012  d018              BEQ      |L4.70|
;;;23         {
;;;24             //dbg_msg("Open failed\n");
;;;25             return;
;;;26         }
;;;27     
;;;28         ret = kdp_uart_power_control(handle0, ARM_POWER_FULL);
000014  2102              MOVS     r1,#2
000016  f7fffffe          BL       kdp_uart_power_control
;;;29     
;;;30         if (ret != UART_API_RETURN_SUCCESS)
00001a  2800              CMP      r0,#0
00001c  d113              BNE      |L4.70|
;;;31         {
;;;32             //dbg_msg("Power on failed\n");
;;;33             return;
;;;34         }
;;;35     
;;;36         KDP_UART_CONFIG_t cfg;
;;;37         cfg.baudrate = BAUD_115200; // BAUD_921600;
00001e  2010              MOVS     r0,#0x10
;;;38         cfg.data_bits = 8;
000020  9000              STR      r0,[sp,#0]
000022  2008              MOVS     r0,#8
000024  f88d0004          STRB     r0,[sp,#4]
;;;39         cfg.frame_length = 0;
000028  2000              MOVS     r0,#0
00002a  f88d0005          STRB     r0,[sp,#5]
;;;40         cfg.stop_bits = 1;
00002e  2101              MOVS     r1,#1
000030  f88d1006          STRB     r1,[sp,#6]
;;;41         cfg.parity_mode = PARITY_NONE;
000034  f88d0007          STRB     r0,[sp,#7]
;;;42         cfg.fifo_en = FALSE;
000038  f88d0008          STRB     r0,[sp,#8]
;;;43     
;;;44         ret = kdp_uart_control(handle0, UART_CTRL_CONFIG, (void *)&cfg);
00003c  4601              MOV      r1,r0
00003e  466a              MOV      r2,sp
000040  6820              LDR      r0,[r4,#0]  ; handle0
000042  f7fffffe          BL       kdp_uart_control
                  |L4.70|
;;;45     
;;;46         if (ret != UART_API_RETURN_SUCCESS)
;;;47         {
;;;48             //dbg_msg("UART config failed\n");
;;;49             return;
;;;50         }
;;;51     
;;;52         //UART0_Rx = FALSE;
;;;53         //UART0_Tx = FALSE;
;;;54     
;;;55     }
000046  bd3e              POP      {r1-r5,pc}
;;;56     
                          ENDP

                  |L4.72|
                          DCD      ||.data||

                          AREA ||i.kdp_user_level_printf||, CODE, READONLY, ALIGN=2

                  kdp_user_level_printf PROC
;;;111    
;;;112    void kdp_user_level_printf(int level, const char *fmt, ...) /* variable arguments */
000000  b40f              PUSH     {r0-r3}
;;;113    {
;;;114        uint32_t lvl = log_get_user_level_scpu();
000002  4917              LDR      r1,|L5.96|
000004  b570              PUSH     {r4-r6,lr}            ;113
000006  6809              LDR      r1,[r1,#0]  ; s_out_comm
;;;115        lvl >>= 12;
;;;116    
;;;117        if (level > 0 && level <= lvl)
;;;118        {
;;;119            va_list arg_ptr;
;;;120    
;;;121            va_start(arg_ptr, fmt);
;;;122            vsprintf(&uart_buffer[0], fmt, arg_ptr);
;;;123            va_end(arg_ptr);
;;;124    
;;;125            //UART0_Tx = false;
;;;126            if (strlen(uart_buffer) > DBG_BUFFER_SIZE)
;;;127            {
;;;128                kdp_uart_write(handle0, (uint8_t *)uart_error_msg, strlen(uart_error_msg));
;;;129                uart_buffer[DBG_BUFFER_SIZE-1] = 0; // truncate the original output
;;;130            }
;;;131    
;;;132            kdp_uart_write(handle0, (uint8_t *)uart_buffer, strlen(uart_buffer));
;;;133        }
;;;134    }
000008  220f              MOVS     r2,#0xf
00000a  2800              CMP      r0,#0                 ;117
00000c  6909              LDR      r1,[r1,#0x10]         ;114
00000e  ea023111          AND      r1,r2,r1,LSR #12
000012  dd21              BLE      |L5.88|
000014  4288              CMP      r0,r1                 ;117
000016  d81f              BHI      |L5.88|
000018  aa06              ADD      r2,sp,#0x18           ;121
00001a  4812              LDR      r0,|L5.100|
00001c  9905              LDR      r1,[sp,#0x14]         ;122
00001e  f7fffffe          BL       vsprintf
000022  2500              MOVS     r5,#0                 ;123
000024  480f              LDR      r0,|L5.100|
000026  f7fffffe          BL       strlen
00002a  4c0f              LDR      r4,|L5.104|
00002c  f5b07f00          CMP      r0,#0x200             ;126
000030  d90a              BLS      |L5.72|
000032  480e              LDR      r0,|L5.108|
000034  f7fffffe          BL       strlen
000038  4602              MOV      r2,r0                 ;128
00003a  490c              LDR      r1,|L5.108|
00003c  6820              LDR      r0,[r4,#0]            ;128  ; handle0
00003e  f7fffffe          BL       kdp_uart_write
000042  4808              LDR      r0,|L5.100|
000044  f88051ff          STRB     r5,[r0,#0x1ff]        ;129
                  |L5.72|
000048  4806              LDR      r0,|L5.100|
00004a  f7fffffe          BL       strlen
00004e  4602              MOV      r2,r0                 ;132
000050  4904              LDR      r1,|L5.100|
000052  6820              LDR      r0,[r4,#0]            ;132  ; handle0
000054  f7fffffe          BL       kdp_uart_write
                  |L5.88|
000058  bc70              POP      {r4-r6}
00005a  f85dfb14          LDR      pc,[sp],#0x14
;;;135    
                          ENDP

00005e  0000              DCW      0x0000
                  |L5.96|
                          DCD      s_out_comm
                  |L5.100|
                          DCD      ||.bss||
                  |L5.104|
                          DCD      ||.data||
                  |L5.108|
                          DCD      ||.constdata||

                          AREA ||i.log_get_level_ncpu||, CODE, READONLY, ALIGN=2

                  log_get_level_ncpu PROC
;;;156    
;;;157    u32 log_get_level_ncpu(void)
000000  4802              LDR      r0,|L6.12|
;;;158    {
;;;159        return (s_out_comm->debug_flags & 0x0000000F);
000002  6800              LDR      r0,[r0,#0]  ; s_out_comm
000004  7c00              LDRB     r0,[r0,#0x10]
000006  f000000f          AND      r0,r0,#0xf
;;;160    }
00000a  4770              BX       lr
;;;161    
                          ENDP

                  |L6.12|
                          DCD      s_out_comm

                          AREA ||i.log_get_level_scpu||, CODE, READONLY, ALIGN=2

                  log_get_level_scpu PROC
;;;151    
;;;152    u32 log_get_level_scpu(void)
000000  4802              LDR      r0,|L7.12|
;;;153    {
;;;154        return (s_out_comm->debug_flags & 0x000F0000);
000002  6800              LDR      r0,[r0,#0]  ; s_out_comm
000004  6900              LDR      r0,[r0,#0x10]
000006  f4002070          AND      r0,r0,#0xf0000
;;;155    }
00000a  4770              BX       lr
;;;156    
                          ENDP

                  |L7.12|
                          DCD      s_out_comm

                          AREA ||i.log_get_user_level_ncpu||, CODE, READONLY, ALIGN=2

                  log_get_user_level_ncpu PROC
;;;166    
;;;167    u32 log_get_user_level_ncpu(void)
000000  4802              LDR      r0,|L8.12|
;;;168    {
;;;169        return (s_out_comm->debug_flags & 0x000000F0);
000002  6800              LDR      r0,[r0,#0]  ; s_out_comm
000004  7c00              LDRB     r0,[r0,#0x10]
000006  f00000f0          AND      r0,r0,#0xf0
;;;170    }
00000a  4770              BX       lr
;;;171    
                          ENDP

                  |L8.12|
                          DCD      s_out_comm

                          AREA ||i.log_get_user_level_scpu||, CODE, READONLY, ALIGN=2

                  log_get_user_level_scpu PROC
;;;161    
;;;162    u32 log_get_user_level_scpu(void)
000000  4802              LDR      r0,|L9.12|
;;;163    {
;;;164        return (s_out_comm->debug_flags & 0x0000F000);
000002  6800              LDR      r0,[r0,#0]  ; s_out_comm
000004  8a00              LDRH     r0,[r0,#0x10]
000006  f4004070          AND      r0,r0,#0xf000
;;;165    }
00000a  4770              BX       lr
;;;166    
                          ENDP

                  |L9.12|
                          DCD      s_out_comm

                          AREA ||i.log_set_level_ncpu||, CODE, READONLY, ALIGN=2

                  log_set_level_ncpu PROC
;;;177    
;;;178    void log_set_level_ncpu(u32 level)
000000  4903              LDR      r1,|L10.16|
;;;179    {
;;;180        s_out_comm->debug_flags = (s_out_comm->debug_flags & ~0x0000000F) | ((level) & 0x0000000F);
000002  6809              LDR      r1,[r1,#0]  ; s_out_comm
000004  690a              LDR      r2,[r1,#0x10]
000006  f3600203          BFI      r2,r0,#0,#4
00000a  610a              STR      r2,[r1,#0x10]
;;;181    }
00000c  4770              BX       lr
;;;182    
                          ENDP

00000e  0000              DCW      0x0000
                  |L10.16|
                          DCD      s_out_comm

                          AREA ||i.log_set_level_scpu||, CODE, READONLY, ALIGN=2

                  log_set_level_scpu PROC
;;;171    
;;;172    void log_set_level_scpu(u32 level)
000000  4905              LDR      r1,|L11.24|
;;;173    {
;;;174        s_out_comm->debug_flags = (s_out_comm->debug_flags & ~0x000F0000) | (((level) << 16) & 0x000F0000);
000002  680a              LDR      r2,[r1,#0]  ; s_out_comm
000004  6911              LDR      r1,[r2,#0x10]
000006  f3604113          BFI      r1,r0,#16,#4
;;;175        scpu_debug_level = (s_out_comm->debug_flags & 0x000F0000) >> 16;
00000a  f3c14003          UBFX     r0,r1,#16,#4
00000e  6111              STR      r1,[r2,#0x10]
000010  4902              LDR      r1,|L11.28|
000012  6048              STR      r0,[r1,#4]  ; scpu_debug_level
;;;176    }
000014  4770              BX       lr
;;;177    
                          ENDP

000016  0000              DCW      0x0000
                  |L11.24|
                          DCD      s_out_comm
                  |L11.28|
                          DCD      ||.data||

                          AREA ||i.log_set_user_level_ncpu||, CODE, READONLY, ALIGN=2

                  log_set_user_level_ncpu PROC
;;;187    
;;;188    void log_set_user_level_ncpu(u32 level)
000000  4904              LDR      r1,|L12.20|
;;;189    {
;;;190        s_out_comm->debug_flags = (s_out_comm->debug_flags & ~0x000000F0) | ((level) & 0x000000F0);
000002  f00000f0          AND      r0,r0,#0xf0
000006  6809              LDR      r1,[r1,#0]  ; s_out_comm
000008  690a              LDR      r2,[r1,#0x10]
00000a  f02202f0          BIC      r2,r2,#0xf0
00000e  4302              ORRS     r2,r2,r0
000010  610a              STR      r2,[r1,#0x10]
;;;191    }
000012  4770              BX       lr
                          ENDP

                  |L12.20|
                          DCD      s_out_comm

                          AREA ||i.log_set_user_level_scpu||, CODE, READONLY, ALIGN=2

                  log_set_user_level_scpu PROC
;;;182    
;;;183    void log_set_user_level_scpu(u32 level)
000000  4903              LDR      r1,|L13.16|
;;;184    {
;;;185        s_out_comm->debug_flags = (s_out_comm->debug_flags & ~0x0000F000) | (((level) << 12) & 0x0000F000);
000002  6809              LDR      r1,[r1,#0]  ; s_out_comm
000004  690a              LDR      r2,[r1,#0x10]
000006  f360320f          BFI      r2,r0,#12,#4
00000a  610a              STR      r2,[r1,#0x10]
;;;186    }
00000c  4770              BX       lr
;;;187    
                          ENDP

00000e  0000              DCW      0x0000
                  |L13.16|
                          DCD      s_out_comm

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  uart_buffer
                          %        512

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  uart_error_msg
000000  4552524f          DCB      0x45,0x52,0x52,0x4f
000004  523a2055          DCB      0x52,0x3a,0x20,0x55
000008  41525420          DCB      0x41,0x52,0x54,0x20
00000c  42756666          DCB      0x42,0x75,0x66,0x66
000010  6572204f          DCB      0x65,0x72,0x20,0x4f
000014  76657272          DCB      0x76,0x65,0x72,0x72
000018  756e2e0d          DCB      0x75,0x6e,0x2e,0x0d
00001c  0a00              DCB      0x0a,0x00

                          AREA ||.data||, DATA, ALIGN=2

                  handle0
                          DCD      0x00000000
                  scpu_debug_level
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\scpu\\share\\dbg.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_dbg_c_5fe44086____REV16|
#line 208 "F:\\Users\\fu\\AppData\\Local\\Arm\\Packs\\ARM\\CMSIS\\5.9.0\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___5_dbg_c_5fe44086____REV16| PROC
#line 209

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_dbg_c_5fe44086____REVSH|
#line 223
|__asm___5_dbg_c_5fe44086____REVSH| PROC
#line 224

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___5_dbg_c_5fe44086____RRX|
#line 410
|__asm___5_dbg_c_5fe44086____RRX| PROC
#line 411

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
