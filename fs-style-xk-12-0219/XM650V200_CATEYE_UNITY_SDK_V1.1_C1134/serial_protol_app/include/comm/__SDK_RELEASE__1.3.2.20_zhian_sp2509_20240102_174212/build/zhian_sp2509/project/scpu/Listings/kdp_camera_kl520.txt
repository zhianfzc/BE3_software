; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\objects\kdp_camera_kl520.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\kdp_camera_kl520.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O3 --diag_suppress=9931 -I..\..\config -I..\..\..\..\board -I..\..\..\..\common\include -I..\..\..\..\scpu\device\include\CMSIS -I..\..\..\..\scpu\device\include\Kneron -I..\..\..\..\scpu\framework\include -I..\..\..\..\scpu\framework\include\framework -I..\..\..\..\scpu\drivers\include -I..\..\..\..\scpu\drivers\include\media\touch -I..\..\..\..\scpu\drivers\include\media\flash -I..\..\..\..\scpu\lib\kdp_system\inc -I..\..\..\..\scpu\lib\kdp_application\include\ -I..\..\..\..\scpu\lib\kdp_application\base\ -I..\..\..\..\scpu\lib\kdp_application\misc -I..\..\..\..\scpu\lib\kdp_e2e_r1n1\include -I..\..\..\..\scpu\include -I..\..\..\..\scpu\middleware\ota -I..\..\..\..\scpu\middleware\comm -I..\..\..\..\scpu\middleware\kdp_comm -I..\..\..\..\scpu\share -I..\..\..\..\scpu\share\gui_lib -I..\..\user -I.\RTE\CMSIS -I.\RTE\_Target-scpu -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\RTOS2\Include -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\RTOS2\RTX\Include -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\Device\ARM\ARMCM4\Include -D__RTX -D__MICROLIB -D__UVISION_VERSION=538 -D_RTE_ -DARMCM4_FP -D_RTE_ -DARM_MATH_CM4 -DTARGET_SCPU -DLOG_ENABLE -DKL520 -DHEAD_POSE_CHECK_PERCENT --omf_browse=.\objects\kdp_camera_kl520.crf ..\..\..\..\scpu\drivers\media\platform\kdp_camera_kl520.c]
                          THUMB

                          AREA ||i.camera_isr||, CODE, READONLY, ALIGN=2

                  camera_isr PROC
;;;384    
;;;385    static void camera_isr(struct kdp520_cam_context *ctx)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;386    {   
000004  b093              SUB      sp,sp,#0x4c
000006  4604              MOV      r4,r0
;;;387        u32 sta_is, sta_st;
;;;388        u32 buf_addr[2];
;;;389        int cam_idx = ctx->id;
;;;390        u32 _ntick = GetCurrentT3Tick();
000008  6805              LDR      r5,[r0,#0]
00000a  f7fffffe          BL       GetCurrentT3Tick
;;;391        sta_is = inw(ctx->dpi2ahb_base + D2A_REG_IS);
00000e  6920              LDR      r0,[r4,#0x10]
000010  6946              LDR      r6,[r0,#0x14]
;;;392        sta_st = inw(ctx->dpi2ahb_base + D2A_REG_ST);
000012  6987              LDR      r7,[r0,#0x18]
;;;393        
;;;394        // dbg_msg_console("sensor_id[%d] sta_is:%#x", ctx->sensor_id, sta_is);
;;;395        if (sta_is & D2A_INT_WRD) {
;;;396    
;;;397            //dbg_msg_camera("camera_isr cam_idx=%d sta_st=%x", cam_idx, sta_st);
;;;398            if (1)  //(ctx->page_done_num != sta_st) // 1: page 1 done 2: page 0 done
;;;399            {
;;;400                if(cam_idx == MIPI_CAM_NIR){ nir_sensor_wait_effect();}
000014  f8df913c          LDR      r9,|L1.340|
;;;401                if(cam_idx == MIPI_CAM_RGB){ rgb_sensor_wait_effect();}     
000018  f8dfa13c          LDR      r10,|L1.344|
00001c  07f0              LSLS     r0,r6,#31             ;395
;;;402    
;;;403                //dbg_msg_console(" ctx->page_done_count: %d" , ctx->page_done_count );
;;;404                if(ctx->page_done_count >= NUM_DPI2AHB_ISR_SKIP)
;;;405                {
;;;406                    kdp_e2e_face_variables *vars = kdp_e2e_get_face_variables();
;;;407                    
;;;408                    #if (MEASURE_RECOGNITION == YES)
;;;409                    _kl520_measure_stamp_camera_isr(cam_idx);
;;;410                    #endif
;;;411    
;;;412                    if( vars->rgb_img_ready == CAM_IMAGE_STATE_NULL && cam_idx == MIPI_CAM_RGB) vars->rgb_img_ready = CAM_IMAGE_STATE_ISR;
00001e  f04f0b01          MOV      r11,#1
000022  d054              BEQ      |L1.206|
000024  f8990000          LDRB     r0,[r9,#0]            ;400  ; nir_sensor_index
000028  4285              CMP      r5,r0                 ;400
00002a  d101              BNE      |L1.48|
00002c  f7fffffe          BL       nir_sensor_wait_effect
                  |L1.48|
000030  f89a0000          LDRB     r0,[r10,#0]           ;401  ; rgb_sensor_index
000034  46d0              MOV      r8,r10                ;401
000036  4285              CMP      r5,r0                 ;401
000038  d101              BNE      |L1.62|
00003a  f7fffffe          BL       rgb_sensor_wait_effect
                  |L1.62|
00003e  f8940020          LDRB     r0,[r4,#0x20]         ;404
000042  2802              CMP      r0,#2                 ;404
000044  d33f              BCC      |L1.198|
000046  f7fffffe          BL       kdp_e2e_get_face_variables
00004a  f8901198          LDRB     r1,[r0,#0x198]
00004e  b929              CBNZ     r1,|L1.92|
000050  f8981000          LDRB     r1,[r8,#0]  ; rgb_sensor_index
000054  428d              CMP      r5,r1
000056  d101              BNE      |L1.92|
000058  f880b198          STRB     r11,[r0,#0x198]
                  |L1.92|
;;;413    
;;;414                    if( (vars->step_cnt_wait_led_gain > 0 && cam_idx == MIPI_CAM_NIR ) 
00005c  f8901097          LDRB     r1,[r0,#0x97]
000060  b119              CBZ      r1,|L1.106|
000062  f8991000          LDRB     r1,[r9,#0]  ; nir_sensor_index
000066  428d              CMP      r5,r1
000068  d030              BEQ      |L1.204|
                  |L1.106|
;;;415                     || (vars->step_cnt_rgb_wait_effect > 0 && cam_idx == MIPI_CAM_RGB ) ) {
00006a  f8901085          LDRB     r1,[r0,#0x85]
00006e  b119              CBZ      r1,|L1.120|
000070  f8981000          LDRB     r1,[r8,#0]  ; rgb_sensor_index
000074  428d              CMP      r5,r1
000076  d029              BEQ      |L1.204|
                  |L1.120|
000078  f10d0840          ADD      r8,sp,#0x40           ;388
;;;416                        goto skip_buf;
;;;417                    }
;;;418         
;;;419                    if (sta_st == BIT1) {
00007c  2f02              CMP      r7,#2
00007e  d007              BEQ      |L1.144|
;;;420    #if (FB_TILE_RECODE == YES)
;;;421                        kdp_fb_mgr_set_frame_record_cam_isr_tick(cam_idx, buf1_idx[cam_idx], _ntick);
;;;422    #endif
;;;423                        //sta_st=2
;;;424                        buf_addr[cam_idx] = kdp_fb_mgr_buffer_write_next(cam_idx, &buf1_idx[cam_idx], vars->info.tile_val);
;;;425                        if(buf_addr[cam_idx]) {
;;;426                            outw(ctx->dpi2ahb_base + D2A_REG_P0ADDR, buf_addr[cam_idx]);
;;;427                        }
;;;428                        
;;;429                    #if CALC_CAMERA_FPS == YES
;;;430                        _calculate_camera_fps(cam_idx);
;;;431                    #endif
;;;432                    }else if (sta_st == BIT0) {
000080  2f01              CMP      r7,#1
000082  d012              BEQ      |L1.170|
;;;433    #if (FB_TILE_RECODE == YES)
;;;434                        kdp_fb_mgr_set_frame_record_cam_isr_tick(cam_idx, buf0_idx[cam_idx], _ntick);
;;;435    #endif
;;;436                        //sta_st=1
;;;437                        buf_addr[cam_idx] = kdp_fb_mgr_buffer_write_next(cam_idx, &buf0_idx[cam_idx], vars->info.tile_val);
;;;438                        if(buf_addr[cam_idx]) {
;;;439                            outw(ctx->dpi2ahb_base + D2A_REG_P1ADDR, buf_addr[cam_idx]);
;;;440                        }
;;;441    
;;;442                    #if CALC_CAMERA_FPS == YES
;;;443                        _calculate_camera_fps(cam_idx);
;;;444                    #endif
;;;445                    }else{
;;;446                        dbg_msg_console("isr sta_st error %d" , sta_st );
000084  463a              MOV      r2,r7
000086  a135              ADR      r1,|L1.348|
000088  2001              MOVS     r0,#1
00008a  f7fffffe          BL       kdp_level_printf
00008e  e01d              B        |L1.204|
                  |L1.144|
000090  4938              LDR      r1,|L1.372|
000092  1c42              ADDS     r2,r0,#1              ;424
000094  eb010185          ADD      r1,r1,r5,LSL #2       ;424
000098  4628              MOV      r0,r5                 ;424
00009a  f7fffffe          BL       kdp_fb_mgr_buffer_write_next
00009e  f8480025          STR      r0,[r8,r5,LSL #2]     ;424
0000a2  b198              CBZ      r0,|L1.204|
0000a4  6921              LDR      r1,[r4,#0x10]         ;426
0000a6  6088              STR      r0,[r1,#8]            ;426
0000a8  e010              B        |L1.204|
                  |L1.170|
0000aa  4932              LDR      r1,|L1.372|
0000ac  1c42              ADDS     r2,r0,#1              ;437
0000ae  3908              SUBS     r1,r1,#8              ;437
0000b0  eb010185          ADD      r1,r1,r5,LSL #2       ;437
0000b4  4628              MOV      r0,r5                 ;437
0000b6  f7fffffe          BL       kdp_fb_mgr_buffer_write_next
0000ba  f8480025          STR      r0,[r8,r5,LSL #2]     ;437
0000be  b128              CBZ      r0,|L1.204|
0000c0  6921              LDR      r1,[r4,#0x10]         ;439
0000c2  60c8              STR      r0,[r1,#0xc]          ;439
0000c4  e002              B        |L1.204|
                  |L1.198|
0000c6  1c40              ADDS     r0,r0,#1              ;439
;;;447                    }
;;;448                }
;;;449                else{
;;;450                    ctx->page_done_count++;
0000c8  f8840020          STRB     r0,[r4,#0x20]
                  |L1.204|
;;;451                }
;;;452    skip_buf:
;;;453                ctx->page_done_num = sta_st;
0000cc  61e7              STR      r7,[r4,#0x1c]
                  |L1.206|
;;;454            }
;;;455        }
;;;456    
;;;457        
;;;458        if (ctx->tile_avg_en && ctx->page_done_count >= NUM_DPI2AHB_ISR_SKIP) {
0000ce  6f20              LDR      r0,[r4,#0x70]
0000d0  b3d0              CBZ      r0,|L1.328|
0000d2  f8940020          LDRB     r0,[r4,#0x20]
0000d6  2802              CMP      r0,#2
0000d8  d336              BCC      |L1.328|
;;;459            if (sta_is & D2A_INT_TILE_AVG_D) {
0000da  06b0              LSLS     r0,r6,#26
0000dc  d531              BPL      |L1.322|
;;;460    
;;;461                kdp_e2e_face_variables *vars = kdp_e2e_get_face_variables();
0000de  f7fffffe          BL       kdp_e2e_get_face_variables
;;;462                
;;;463                if( (vars->step_cnt_wait_led_gain > 0 && cam_idx == MIPI_CAM_NIR ) 
0000e2  f8901097          LDRB     r1,[r0,#0x97]
0000e6  b119              CBZ      r1,|L1.240|
0000e8  f8991000          LDRB     r1,[r9,#0]  ; nir_sensor_index
0000ec  428d              CMP      r5,r1
0000ee  d028              BEQ      |L1.322|
                  |L1.240|
;;;464                 || (vars->step_cnt_rgb_wait_effect > 0 && cam_idx == MIPI_CAM_RGB ) ) {
0000f0  f8900085          LDRB     r0,[r0,#0x85]
0000f4  b118              CBZ      r0,|L1.254|
0000f6  f89a0000          LDRB     r0,[r10,#0]  ; rgb_sensor_index
0000fa  4285              CMP      r5,r0
0000fc  d021              BEQ      |L1.322|
                  |L1.254|
;;;465                    goto skip_tile;
;;;466                }
;;;467    
;;;468                int k = 0;
0000fe  2000              MOVS     r0,#0
;;;469                struct frame_info info;
;;;470    
;;;471    #if (ALL_TILE_VALUE == NO)  //only for SC035
;;;472                for (int i = 0; i < 5; i++)
;;;473                {
;;;474                    u32 tmp = inw(ctx->dpi2ahb_base + D2A_REG_TAVR + i * 10);
;;;475                    info.tile_val[k++] = tmp & 0xff;
;;;476                    info.tile_val[k++] = (tmp & 0xff00) >> 8;
;;;477                    info.tile_val[k++] = (tmp & 0xff0000) >> 16;
;;;478                    info.tile_val[k++] = (tmp & 0xff000000) >> 24;
;;;479                }
;;;480                //    for (int i = 0; i < 5; ++i) {
;;;481                //        dbg_msg_camera("camera_isr line%d %x %x %x %x", i,
;;;482                //        vars->info.tile_val[i*4 + 0], vars->info.tile_val[i*4 + 1], vars->info.tile_val[i*4 + 2], vars->info.tile_val[i*4 + 3]);
;;;483                //    }
;;;484    #else
;;;485                for (int i = 0; i < 15; i++)  //get tile value 4*15
000100  4602              MOV      r2,r0
000102  466b              MOV      r3,sp                 ;469
;;;486                {
;;;487                    u32 tmp = inw(ctx->dpi2ahb_base + D2A_REG_TAVR + i * 4);
000104  f05f0728          MOVS.W   r7,#0x28
                  |L1.264|
000108  6921              LDR      r1,[r4,#0x10]
00010a  eb070c82          ADD      r12,r7,r2,LSL #2
00010e  f851100c          LDR      r1,[r1,r12]
;;;488                    info.tile_val[k++] = tmp & 0xff;
000112  5419              STRB     r1,[r3,r0]
;;;489                    info.tile_val[k++] = (tmp & 0xff00) >> 8;
000114  1c40              ADDS     r0,r0,#1
000116  ea4f2c11          LSR      r12,r1,#8
00011a  f803c000          STRB     r12,[r3,r0]
;;;490                    info.tile_val[k++] = (tmp & 0xff0000) >> 16;
00011e  1c40              ADDS     r0,r0,#1
000120  ea4f4c11          LSR      r12,r1,#16
000124  f803c000          STRB     r12,[r3,r0]
;;;491                    info.tile_val[k++] = (tmp & 0xff000000) >> 24;
000128  1c40              ADDS     r0,r0,#1
00012a  0e09              LSRS     r1,r1,#24
00012c  5419              STRB     r1,[r3,r0]
00012e  1c40              ADDS     r0,r0,#1
000130  1c52              ADDS     r2,r2,#1
000132  2a0f              CMP      r2,#0xf               ;485
000134  dbe8              BLT      |L1.264|
;;;492                }
;;;493    //            for (int i = 0; i < 6; i++)
;;;494    //            {
;;;495    //                dbg_msg_console("camera_isr line %d:  %3d %3d %3d %3d %3d %3d %3d %3d %3d %3d", i,
;;;496    //                  vars->info.tile_val[i*10 + 0], vars->info.tile_val[i*10 + 1], vars->info.tile_val[i*10 + 2], vars->info.tile_val[i*10 + 3],
;;;497    //                  vars->info.tile_val[i*10 + 4], vars->info.tile_val[i*10 + 5], vars->info.tile_val[i*10 + 6], vars->info.tile_val[i*10 + 7],
;;;498    //                  vars->info.tile_val[i*10 + 8], vars->info.tile_val[i*10 + 9]);
;;;499    //            }
;;;500    #endif
;;;501    #if FB_WAIT_TILE_VAL == YES
;;;502                info._inited = 1;
000136  f88db03c          STRB     r11,[sp,#0x3c]
;;;503    #endif
;;;504    #if (FB_TILE_RECODE == YES)
;;;505                kdp_fb_mgr_set_frame_record_cam_isr_tile(cam_idx, _ntick, &info);
;;;506    #else
;;;507                kdp_fb_mgr_set_frame_info(cam_idx, &info);
00013a  4619              MOV      r1,r3
00013c  4628              MOV      r0,r5
00013e  f7fffffe          BL       kdp_fb_mgr_set_frame_info
                  |L1.322|
;;;508    #endif
;;;509    #if 0
;;;510                for (int i = 0; i < 15; i++) {
;;;511                    u32 reg = ctx->dpi2ahb_base + D2A_REG_TAVR + i * 4;
;;;512                    u32 val = inw(reg);
;;;513                    dbg_msg_console("reg = 0x%08x, val = 0x%08x", reg, val);
;;;514                }
;;;515                
;;;516                u32 err_code = inw(CSIRX_FTCSIRX100_1_PA_BASE+0x38);
;;;517                    
;;;518                if(err_code != 0 )
;;;519                    dbg_msg_console("DDE!,err=%x",err_code);
;;;520                else
;;;521                    dbg_msg_console("DDE PASS!,err=%x",err_code);
;;;522    #endif
;;;523            }
;;;524    skip_tile:
;;;525            outw(ctx->dpi2ahb_base + D2A_REG_FNC, 0x2);
000142  6921              LDR      r1,[r4,#0x10]
000144  2002              MOVS     r0,#2
000146  6048              STR      r0,[r1,#4]
                  |L1.328|
;;;526        }
;;;527    
;;;528        outw(ctx->dpi2ahb_base + D2A_REG_IS, sta_is);
000148  6920              LDR      r0,[r4,#0x10]
00014a  6146              STR      r6,[r0,#0x14]
;;;529    }
00014c  b013              ADD      sp,sp,#0x4c
00014e  e8bd8ff0          POP      {r4-r11,pc}
;;;530    
                          ENDP

000152  0000              DCW      0x0000
                  |L1.340|
                          DCD      nir_sensor_index
                  |L1.344|
                          DCD      rgb_sensor_index
                  |L1.348|
00015c  69737220          DCB      "isr sta_st error %d\r\n",0
000160  7374615f
000164  73742065
000168  72726f72
00016c  2025640d
000170  0a00    
000172  00                DCB      0
000173  00                DCB      0
                  |L1.372|
                          DCD      ||.data||+0x8

                          AREA ||i.camera_isr_0||, CODE, READONLY, ALIGN=2

                  camera_isr_0 PROC
;;;530    
;;;531    void camera_isr_0(void)
000000  4801              LDR      r0,|L2.8|
;;;532    {   
;;;533        struct kdp520_cam_context *ctx = &cam_ctx[KDP_CAM_0];
;;;534    
;;;535        camera_isr(ctx);
000002  f7ffbffe          B.W      camera_isr
;;;536    }
;;;537    
                          ENDP

000006  0000              DCW      0x0000
                  |L2.8|
                          DCD      ||.bss||

                          AREA ||i.camera_isr_1||, CODE, READONLY, ALIGN=2

                  camera_isr_1 PROC
;;;537    
;;;538    void camera_isr_1(void)
000000  4801              LDR      r0,|L3.8|
;;;539    {
;;;540        struct kdp520_cam_context *ctx = &cam_ctx[KDP_CAM_1];
;;;541    
;;;542        camera_isr(ctx);
000002  f7ffbffe          B.W      camera_isr
;;;543    }
;;;544    
                          ENDP

000006  0000              DCW      0x0000
                  |L3.8|
                          DCD      ||.bss||+0x74

                          AREA ||i.csi2rx_init||, CODE, READONLY, ALIGN=2

                  csi2rx_init PROC
;;;727    
;;;728    static void csi2rx_init(struct kdp520_cam_context *ctx)
000000  6b41              LDR      r1,[r0,#0x34]
;;;729    { 
;;;730        int val, width;
;;;731    
;;;732        width = ROUND_UP(ctx->fmt.width, 4);
;;;733        outw(ctx->csi_rx_base + CSI2RX_REG_HPNR , width);
000002  6942              LDR      r2,[r0,#0x14]
000004  1cc9              ADDS     r1,r1,#3              ;732
000006  f0210103          BIC      r1,r1,#3              ;732
00000a  6211              STR      r1,[r2,#0x20]
;;;734          
;;;735        val = inw(ctx->csi_rx_base + CSI2RX_REG_MCR);
00000c  6941              LDR      r1,[r0,#0x14]
00000e  69ca              LDR      r2,[r1,#0x1c]
;;;736        val = (val&(~0xff)) | 0x00;//0x22;
000010  f02202ff          BIC      r2,r2,#0xff
;;;737        outw(ctx->csi_rx_base + CSI2RX_REG_MCR , val);
000014  61ca              STR      r2,[r1,#0x1c]
;;;738    
;;;739    #ifdef SOURCE_FROM_PATTERN    
;;;740        CSIRX_REG_PECR_SET_PEC(ctx->csi_rx_base + CSI2RX_REG_PECR, 1);
;;;741        
;;;742        //outw(ctx->csi_rx_base + CSI2RX_REG_BPGLR, 0x01); 
;;;743        val = (inw(ctx->csi_rx_base + CSI2RX_REG_BPGLR) & 0xFF);
;;;744        dbg_msg_camera(" CSI2RX_REG_BPGLR val=%x\n", val);
;;;745        
;;;746        val = (inw(ctx->csi_rx_base + CSI2RX_REG_BPGHR) & 0x0F);
;;;747            //val = 0;
;;;748    
;;;749        if (MIPI_CSI2RX_0 == ctx->id) {
;;;750        #if IMGSRC_0_FORMAT == IMAGE_FORMAT_RGB565
;;;751            val |= 0x40;         //RAW10
;;;752        #elif IMGSRC_0_FORMAT == IMAGE_FORMAT_RAW10
;;;753            val |= 0x40;         //RAW10
;;;754        #elif IMGSRC_0_FORMAT == IMAGE_FORMAT_RAW8
;;;755            val |= 0x00;         //RAW8
;;;756        #endif
;;;757        }
;;;758        else if (MIPI_CSI2RX_1 == ctx->id) {
;;;759        #if IMGSRC_1_FORMAT == IMAGE_FORMAT_RGB565
;;;760            val |= 0x40;         //RAW10
;;;761        #elif IMGSRC_1_FORMAT == IMAGE_FORMAT_RAW10
;;;762            val |= 0x40;         //RAW10
;;;763        #elif IMGSRC_1_FORMAT == IMAGE_FORMAT_RAW8
;;;764            val |= 0x00;         //RAW8
;;;765        #endif        
;;;766        }
;;;767        //val |= 0x20; //swap          
;;;768        outw(ctx->csi_rx_base + CSI2RX_REG_BPGHR, val); 
;;;769        val = inw(ctx->csi_rx_base + CSI2RX_REG_BPGHR);
;;;770    #endif    
;;;771    
;;;772        switch (ctx->sensor_id) {
000016  6b01              LDR      r1,[r0,#0x30]
000018  1ec9              SUBS     r1,r1,#3
00001a  290c              CMP      r1,#0xc
00001c  d25a              BCS      |L4.212|
00001e  e8dff001          TBB      [pc,r1]
000022  4206              DCB      0x42,0x06
000024  061d1d21          DCB      0x06,0x1d,0x1d,0x21
000028  21061d1d          DCB      0x21,0x06,0x1d,0x1d
00002c  2121              DCB      0x21,0x21
;;;773    #if 0
;;;774        case SENSOR_TYPE_OV9286:
;;;775        case SENSOR_TYPE_HMXRICA:
;;;776    #endif        
;;;777    
;;;778    #if defined(SENSOR_TYPE_OV9282_R) || defined(SENSOR_TYPE_OV9282_L)
;;;779    #ifdef SENSOR_TYPE_OV9282_R
;;;780        case SENSOR_TYPE_OV9282_R:
;;;781    #endif
;;;782    #ifdef SENSOR_TYPE_OV9282_L
;;;783        case SENSOR_TYPE_OV9282_L:
;;;784    #endif
;;;785           //val = inw(ctx->csi_rx_base + CSI2RX_REG_PFTR);
;;;786            val = (inw(ctx->csi_rx_base + CSI2RX_REG_VSTR0)) & 0xff00;
;;;787            val |= 0x02;
;;;788            outw(ctx->csi_rx_base + CSI2RX_REG_VSTR0 , val);
;;;789        
;;;790            val = (inw(ctx->csi_rx_base + CSI2RX_REG_VSTER));
;;;791            val |= 0x09;
;;;792            outw(ctx->csi_rx_base + CSI2RX_REG_VSTER , val);
;;;793        
;;;794            val = (inw(ctx->csi_rx_base + CSI2RX_REG_VSCR));
;;;795            val |= 0x01;
;;;796            outw(ctx->csi_rx_base + CSI2RX_REG_VSCR , val);
;;;797        
;;;798            val = 245;//100; // * 4 = 400 pixels
;;;799            outw(ctx->csi_rx_base + CSI2RX_REG_PFTR , val);
;;;800            break;
;;;801    #endif
;;;802    
;;;803        case SENSOR_TYPE_SC132GS:
;;;804           //val = inw(ctx->csi_rx_base + CSI2RX_REG_PFTR);
;;;805            val = (inw(ctx->csi_rx_base + CSI2RX_REG_VSTR0)) & 0xff00;
00002e  6941              LDR      r1,[r0,#0x14]
000030  694a              LDR      r2,[r1,#0x14]
000032  f402427f          AND      r2,r2,#0xff00
;;;806            val |= 0x02;
000036  f0420202          ORR      r2,r2,#2
;;;807            outw(ctx->csi_rx_base + CSI2RX_REG_VSTR0 , val);
00003a  614a              STR      r2,[r1,#0x14]
;;;808        
;;;809            val = (inw(ctx->csi_rx_base + CSI2RX_REG_VSTER));
00003c  6941              LDR      r1,[r0,#0x14]
00003e  f8512f1e          LDR      r2,[r1,#0x1e]!
;;;810            val |= 0x09;
000042  f0420209          ORR      r2,r2,#9
;;;811            outw(ctx->csi_rx_base + CSI2RX_REG_VSTER , val);
000046  600a              STR      r2,[r1,#0]
;;;812        
;;;813            val = (inw(ctx->csi_rx_base + CSI2RX_REG_VSCR));
000048  6941              LDR      r1,[r0,#0x14]
00004a  f8512f05          LDR      r2,[r1,#5]!
;;;814            val |= 0x01;
00004e  f0420201          ORR      r2,r2,#1
;;;815            outw(ctx->csi_rx_base + CSI2RX_REG_VSCR , val);
000052  600a              STR      r2,[r1,#0]
;;;816        
;;;817            val = 0xff;//100; // * 4 = 400 pixels
;;;818            outw(ctx->csi_rx_base + CSI2RX_REG_PFTR , val);
000054  6942              LDR      r2,[r0,#0x14]
000056  21ff              MOVS     r1,#0xff              ;817
000058  6511              STR      r1,[r2,#0x50]
;;;819            break;
00005a  e03b              B        |L4.212|
;;;820    #ifdef SENSOR_TYPE_GC02M1_L
;;;821        case SENSOR_TYPE_GC02M1_L:
;;;822    #endif
;;;823    #ifdef SENSOR_TYPE_GC02M1_R
;;;824        case SENSOR_TYPE_GC02M1_R:
;;;825    #endif
;;;826    #ifdef SENSOR_TYPE_GC1054_R
;;;827        case SENSOR_TYPE_GC1054_R:
;;;828    #endif
;;;829    #ifdef SENSOR_TYPE_GC1054_L
;;;830        case SENSOR_TYPE_GC1054_L:
;;;831    #endif
;;;832    #ifdef SENSOR_TYPE_BF20A1_R
;;;833        case SENSOR_TYPE_BF20A1_R:
;;;834    #endif
;;;835    #ifdef SENSOR_TYPE_BF20A1_L
;;;836        case SENSOR_TYPE_BF20A1_L:      
;;;837          
;;;838          outb(ctx->phy_csr_base + 0x11, 0x2);   
00005c  6982              LDR      r2,[r0,#0x18]
00005e  2102              MOVS     r1,#2
000060  7451              STRB     r1,[r2,#0x11]
;;;839            
;;;840          //val = inw(ctx->csi_rx_base + CSI2RX_REG_PFTR);
;;;841          val = (inw(ctx->csi_rx_base + CSI2RX_REG_VSTR0)) & 0xff00;
;;;842          val |= 0x02;
;;;843          outw(ctx->csi_rx_base + CSI2RX_REG_VSTR0 , val);
;;;844    
;;;845          val = (inw(ctx->csi_rx_base + CSI2RX_REG_VSTER));
;;;846          val |= 0x02;
;;;847          outw(ctx->csi_rx_base + CSI2RX_REG_VSTER , val);
;;;848          val = 0xff;//100; // * 4 = 400 pixels
;;;849          outw(ctx->csi_rx_base + CSI2RX_REG_PFTR , val);
;;;850          val = (inw(ctx->csi_rx_base + CSI2RX_REG_VSCR));
;;;851          val |= 0x01;
;;;852          outw(ctx->csi_rx_base + CSI2RX_REG_VSCR , val);
;;;853          break;  
000062  e009              B        |L4.120|
;;;854              
;;;855    #endif
;;;856    
;;;857    #ifdef SENSOR_TYPE_OV02B1B_L
;;;858        case SENSOR_TYPE_OV02B1B_L:
;;;859    #endif
;;;860    #ifdef SENSOR_TYPE_OV02B1B_R
;;;861        case SENSOR_TYPE_OV02B1B_R:
;;;862    #endif
;;;863    #ifdef SENSOR_TYPE_SP2509_R
;;;864        case SENSOR_TYPE_SP2509_R:
;;;865    #endif
;;;866    #ifdef SENSOR_TYPE_SP2509_L
;;;867        case SENSOR_TYPE_SP2509_L:
;;;868    #endif
;;;869            if (ctx->id == 0)
000064  6801              LDR      r1,[r0,#0]
;;;870                outb(MIPIRX_PHY_CSR_PA_BASE + 0x11, 0x7);
000066  2207              MOVS     r2,#7
000068  b111              CBZ      r1,|L4.112|
;;;871            else if (ctx->id == 1)
00006a  2901              CMP      r1,#1
00006c  d002              BEQ      |L4.116|
00006e  e003              B        |L4.120|
                  |L4.112|
000070  491f              LDR      r1,|L4.240|
000072  e000              B        |L4.118|
                  |L4.116|
;;;872                outb(MIPIRX_PHY_CSR_1_PA_BASE + 0x11, 0x7);
000074  491f              LDR      r1,|L4.244|
                  |L4.118|
000076  744a              STRB     r2,[r1,#0x11]
                  |L4.120|
;;;873    
;;;874            // val = inw(ctx->csi_rx_base + CSI2RX_REG_PFTR);
;;;875            val = (inw(ctx->csi_rx_base + CSI2RX_REG_VSTR0)) & 0xff00;
000078  6941              LDR      r1,[r0,#0x14]
00007a  694a              LDR      r2,[r1,#0x14]
00007c  f402427f          AND      r2,r2,#0xff00
;;;876            val |= 0x02;
000080  f0420202          ORR      r2,r2,#2
;;;877            outw(ctx->csi_rx_base + CSI2RX_REG_VSTR0, val);
000084  614a              STR      r2,[r1,#0x14]
;;;878    
;;;879            val = (inw(ctx->csi_rx_base + CSI2RX_REG_VSTER));
000086  6941              LDR      r1,[r0,#0x14]
000088  f8512f1e          LDR      r2,[r1,#0x1e]!
;;;880            val |= 0x02;
00008c  f0420202          ORR      r2,r2,#2
;;;881            outw(ctx->csi_rx_base + CSI2RX_REG_VSTER, val);
000090  600a              STR      r2,[r1,#0]
;;;882            val = 0xff; // 100; // * 4 = 400 pixels
;;;883            outw(ctx->csi_rx_base + CSI2RX_REG_PFTR, val);
000092  6942              LDR      r2,[r0,#0x14]
000094  21ff              MOVS     r1,#0xff              ;882
000096  6511              STR      r1,[r2,#0x50]
;;;884            val = (inw(ctx->csi_rx_base + CSI2RX_REG_VSCR));
000098  6941              LDR      r1,[r0,#0x14]
00009a  f8512f05          LDR      r2,[r1,#5]!
;;;885            val |= 0x01;
00009e  f0420201          ORR      r2,r2,#1
;;;886            outw(ctx->csi_rx_base + CSI2RX_REG_VSCR, val);
0000a2  600a              STR      r2,[r1,#0]
;;;887            break;
0000a4  e016              B        |L4.212|
;;;888    
;;;889    #ifdef SENSOR_TYPE_MIXO3238    
;;;890        case SENSOR_TYPE_MIXO3238:    
;;;891    #endif         
;;;892        case SENSOR_TYPE_SC035HGS:
;;;893    	   //val = inw(ctx->csi_rx_base + CSI2RX_REG_PFTR);
;;;894    		val = (inw(ctx->csi_rx_base + CSI2RX_REG_VSTR0)) & 0xff00;
;;;895    		val |= 0x02;
;;;896    		outw(ctx->csi_rx_base + CSI2RX_REG_VSTR0 , val);
;;;897    
;;;898    		val = (inw(ctx->csi_rx_base + CSI2RX_REG_VSTER));
;;;899    		val |= 0x09;
;;;900    		outw(ctx->csi_rx_base + CSI2RX_REG_VSTER , val);
;;;901    
;;;902    		val = (inw(ctx->csi_rx_base + CSI2RX_REG_VSCR));
;;;903    		val |= 0x01;
;;;904    		outw(ctx->csi_rx_base + CSI2RX_REG_VSCR , val);
;;;905    
;;;906    		val = 0xff;//100; // * 4 = 400 pixels
;;;907    		outw(ctx->csi_rx_base + CSI2RX_REG_PFTR , val);
;;;908    		break;
;;;909     
;;;910       
;;;911        case SENSOR_TYPE_GC2145:
;;;912            val = (inw(ctx->csi_rx_base + CSI2RX_REG_VSTR0)) & 0xff00;
0000a6  6941              LDR      r1,[r0,#0x14]
0000a8  694a              LDR      r2,[r1,#0x14]
0000aa  f402427f          AND      r2,r2,#0xff00
;;;913            val |= 0x05;
0000ae  f0420205          ORR      r2,r2,#5
;;;914            outw(ctx->csi_rx_base + CSI2RX_REG_VSTR0 , val);
0000b2  614a              STR      r2,[r1,#0x14]
;;;915        
;;;916            val = (inw(ctx->csi_rx_base + CSI2RX_REG_VSTER));
0000b4  6941              LDR      r1,[r0,#0x14]
0000b6  f8512f1e          LDR      r2,[r1,#0x1e]!
;;;917            val |= 0x08;
0000ba  f0420208          ORR      r2,r2,#8
;;;918            outw(ctx->csi_rx_base + CSI2RX_REG_VSTER , val);
0000be  600a              STR      r2,[r1,#0]
;;;919        
;;;920            val = (inw(ctx->csi_rx_base + CSI2RX_REG_VSCR));
0000c0  6941              LDR      r1,[r0,#0x14]
0000c2  f8512f05          LDR      r2,[r1,#5]!
;;;921            val |= 0x01;
0000c6  f0420201          ORR      r2,r2,#1
;;;922            outw(ctx->csi_rx_base + CSI2RX_REG_VSCR , val);
0000ca  600a              STR      r2,[r1,#0]
;;;923        
;;;924            val = (inw(ctx->csi_rx_base + CSI2RX_REG_PFTR));
0000cc  6941              LDR      r1,[r0,#0x14]
0000ce  6d0a              LDR      r2,[r1,#0x50]
;;;925            val = 0x30;
0000d0  2230              MOVS     r2,#0x30
;;;926            outw(ctx->csi_rx_base + CSI2RX_REG_PFTR , val);
0000d2  650a              STR      r2,[r1,#0x50]
                  |L4.212|
;;;927            break;
;;;928        default:;
;;;929        }
;;;930        val = inw(ctx->csi_rx_base + CSI2RX_REG_CR);
0000d4  6941              LDR      r1,[r0,#0x14]
0000d6  684a              LDR      r2,[r1,#4]
;;;931        val = (val&(~0xff)) | 0x0d; 
0000d8  f02202ff          BIC      r2,r2,#0xff
0000dc  f042020d          ORR      r2,r2,#0xd
;;;932        outw(ctx->csi_rx_base + CSI2RX_REG_CR , val);
0000e0  604a              STR      r2,[r1,#4]
;;;933        ctx->page_done_count = 0;
0000e2  2100              MOVS     r1,#0
0000e4  f8801020          STRB     r1,[r0,#0x20]
;;;934        delay_us(1000);
0000e8  f44f707a          MOV      r0,#0x3e8
0000ec  f7ffbffe          B.W      delay_us
;;;935    }
;;;936    
                          ENDP

                  |L4.240|
                          DCD      0xc3700000
                  |L4.244|
                          DCD      0xc3800000

                          AREA ||i.csi2rx_power||, CODE, READONLY, ALIGN=2

                  csi2rx_power PROC
;;;936    
;;;937    static void csi2rx_power(struct kdp520_cam_context *ctx, int on)
000000  6803              LDR      r3,[r0,#0]
;;;938    {
;;;939        uint32_t mask, val = 0;
;;;940    
;;;941        if (ctx->id == 0) {
;;;942            mask = (SCU_EXTREG_CSIRX_CTRL0_ClkLnEn | SCU_EXTREG_CSIRX_CTRL0_Enable);
;;;943            if (on)
;;;944                val = mask;
;;;945    
;;;946            masked_outw(SCU_EXTREG_CSIRX_CTRL0, val, mask);
000002  480b              LDR      r0,|L5.48|
000004  2200              MOVS     r2,#0                 ;939
000006  b163              CBZ      r3,|L5.34|
;;;947        } else if (ctx->id == 1) {
000008  2b01              CMP      r3,#1
00000a  d109              BNE      |L5.32|
;;;948            mask = (SCU_EXTREG_CSIRX_CTRL1_ClkLnEn | SCU_EXTREG_CSIRX_CTRL1_Enable);
00000c  2303              MOVS     r3,#3
;;;949            if (on)
00000e  b101              CBZ      r1,|L5.18|
;;;950                val = mask;
000010  461a              MOV      r2,r3
                  |L5.18|
;;;951    
;;;952            masked_outw(SCU_EXTREG_CSIRX_CTRL1, val, mask);
000012  f8501f94          LDR      r1,[r0,#0x94]!
000016  bf00              NOP                            ;946
                  |L5.24|
000018  f0210103          BIC      r1,r1,#3              ;946
00001c  4311              ORRS     r1,r1,r2              ;946
00001e  6001              STR      r1,[r0,#0]            ;946
                  |L5.32|
;;;953        }
;;;954    }
000020  4770              BX       lr
                  |L5.34|
000022  2303              MOVS     r3,#3                 ;942
000024  b101              CBZ      r1,|L5.40|
000026  461a              MOV      r2,r3                 ;944
                  |L5.40|
000028  f8501f90          LDR      r1,[r0,#0x90]!        ;946
00002c  e7f4              B        |L5.24|
;;;955    
                          ENDP

00002e  0000              DCW      0x0000
                  |L5.48|
                          DCD      0xc2380000

                          AREA ||i.csi2rx_reset||, CODE, READONLY, ALIGN=2

                  csi2rx_reset PROC
;;;955    
;;;956    static void csi2rx_reset(struct kdp520_cam_context *ctx)
000000  b510              PUSH     {r4,lr}
;;;957    {
;;;958        if (ctx->id == 0) {
;;;959            masked_outw( SCU_EXTREG_CSIRX_CTRL0,
000002  491d              LDR      r1,|L6.120|
000004  4a1d              LDR      r2,|L6.124|
000006  6804              LDR      r4,[r0,#0]            ;957
;;;960                        ((SCU_EXTREG_CSIRX_CTRL0_ClkLnEn | SCU_EXTREG_CSIRX_CTRL0_Enable) |
;;;961                         (SCU_EXTREG_CSIRX_CTRL0_apb_rst_n | SCU_EXTREG_CSIRX_CTRL0_pwr_rst_n |
;;;962                          SCU_EXTREG_CSIRX_CTRL0_sys_rst_n)),
;;;963                        ((SCU_EXTREG_CSIRX_CTRL0_ClkLnEn | SCU_EXTREG_CSIRX_CTRL0_Enable) |
;;;964                         (SCU_EXTREG_CSIRX_CTRL0_apb_rst_n | SCU_EXTREG_CSIRX_CTRL0_pwr_rst_n |
;;;965                          SCU_EXTREG_CSIRX_CTRL0_sys_rst_n)));
;;;966    
;;;967            masked_outw( SCU_EXTREG_CSIRX_CTRL1,
;;;968                        ((SCU_EXTREG_CSIRX_CTRL1_ClkLnEn | SCU_EXTREG_CSIRX_CTRL1_Enable) |
;;;969                         (SCU_EXTREG_CSIRX_CTRL1_apb_rst_n | SCU_EXTREG_CSIRX_CTRL1_pwr_rst_n |
;;;970                          SCU_EXTREG_CSIRX_CTRL1_sys_rst_n)),
;;;971                        ((SCU_EXTREG_CSIRX_CTRL1_ClkLnEn | SCU_EXTREG_CSIRX_CTRL1_Enable) |
;;;972                         (SCU_EXTREG_CSIRX_CTRL1_apb_rst_n | SCU_EXTREG_CSIRX_CTRL1_pwr_rst_n |
;;;973                          SCU_EXTREG_CSIRX_CTRL1_sys_rst_n)));
;;;974    
;;;975            masked_outw( SCU_EXTREG_DPI2AHB_CTRL,
;;;976                        (SCU_EXTREG_DPI2AHB_CTRL_rst_n | SCU_EXTREG_DPI2AHB_CTRL_apb_rst_n |
;;;977                         SCU_EXTREG_DPI2AHB_CTRL_apb_rst_n | SCU_EXTREG_DPI2AHB_CTRL_pwr_rst_n),
;;;978                        (SCU_EXTREG_DPI2AHB_CTRL_rst_n | SCU_EXTREG_DPI2AHB_CTRL_apb_rst_n |
;;;979                         SCU_EXTREG_DPI2AHB_CTRL_apb_rst_n | SCU_EXTREG_DPI2AHB_CTRL_pwr_rst_n));
;;;980    
;;;981            masked_outw( SCU_EXTREG_DPI2AHB_CTRL,
;;;982                        (SCU_EXTREG_DPI2AHB_CTRL_rst_n_1 | SCU_EXTREG_DPI2AHB_CTRL_apb_rst_n_1 |
;;;983                         SCU_EXTREG_DPI2AHB_CTRL_sys_rst_n_1 | SCU_EXTREG_DPI2AHB_CTRL_pwr_rst_n_1),
;;;984                        (SCU_EXTREG_DPI2AHB_CTRL_rst_n_1 | SCU_EXTREG_DPI2AHB_CTRL_apb_rst_n_1 |
;;;985                         SCU_EXTREG_DPI2AHB_CTRL_sys_rst_n_1 | SCU_EXTREG_DPI2AHB_CTRL_pwr_rst_n_1));
;;;986    
;;;987            outb(MIPIRX_PHY_CSR_PA_BASE + 0x11, 0x7);
000008  2307              MOVS     r3,#7
00000a  b114              CBZ      r4,|L6.18|
;;;988        
;;;989        } else if (ctx->id == 1) {
00000c  2c01              CMP      r4,#1
00000e  d011              BEQ      |L6.52|
000010  e02d              B        |L6.110|
                  |L6.18|
000012  f8514f90          LDR      r4,[r1,#0x90]!        ;959
000016  4314              ORRS     r4,r4,r2              ;959
000018  600c              STR      r4,[r1,#0]            ;959
00001a  684c              LDR      r4,[r1,#4]            ;967
00001c  4314              ORRS     r4,r4,r2              ;967
00001e  604c              STR      r4,[r1,#4]            ;967
000020  68ca              LDR      r2,[r1,#0xc]          ;975
000022  f042020d          ORR      r2,r2,#0xd            ;975
000026  60ca              STR      r2,[r1,#0xc]          ;975
000028  68ca              LDR      r2,[r1,#0xc]          ;981
00002a  f04202f0          ORR      r2,r2,#0xf0           ;981
00002e  60ca              STR      r2,[r1,#0xc]          ;981
000030  4913              LDR      r1,|L6.128|
000032  e01b              B        |L6.108|
                  |L6.52|
;;;990            masked_outw( SCU_EXTREG_CSIRX_CTRL0,
000034  f8514f90          LDR      r4,[r1,#0x90]!
000038  4314              ORRS     r4,r4,r2
00003a  600c              STR      r4,[r1,#0]
;;;991                        ((SCU_EXTREG_CSIRX_CTRL0_ClkLnEn | SCU_EXTREG_CSIRX_CTRL0_Enable) |
;;;992                         (SCU_EXTREG_CSIRX_CTRL0_apb_rst_n | SCU_EXTREG_CSIRX_CTRL0_pwr_rst_n |
;;;993                          SCU_EXTREG_CSIRX_CTRL0_sys_rst_n)),
;;;994                        ((SCU_EXTREG_CSIRX_CTRL0_ClkLnEn | SCU_EXTREG_CSIRX_CTRL0_Enable) |
;;;995                         (SCU_EXTREG_CSIRX_CTRL0_apb_rst_n | SCU_EXTREG_CSIRX_CTRL0_pwr_rst_n |
;;;996                          SCU_EXTREG_CSIRX_CTRL0_sys_rst_n)));
;;;997    
;;;998            masked_outw( SCU_EXTREG_CSIRX_CTRL1,
00003c  684c              LDR      r4,[r1,#4]
00003e  4314              ORRS     r4,r4,r2
000040  604c              STR      r4,[r1,#4]
;;;999                        ((SCU_EXTREG_CSIRX_CTRL1_ClkLnEn | SCU_EXTREG_CSIRX_CTRL1_Enable) |
;;;1000                        (SCU_EXTREG_CSIRX_CTRL1_apb_rst_n | SCU_EXTREG_CSIRX_CTRL1_pwr_rst_n |
;;;1001                         SCU_EXTREG_CSIRX_CTRL1_sys_rst_n)),
;;;1002                       ((SCU_EXTREG_CSIRX_CTRL1_ClkLnEn | SCU_EXTREG_CSIRX_CTRL1_Enable) |
;;;1003                        (SCU_EXTREG_CSIRX_CTRL1_apb_rst_n | SCU_EXTREG_CSIRX_CTRL1_pwr_rst_n |
;;;1004                         SCU_EXTREG_CSIRX_CTRL1_sys_rst_n)));
;;;1005   
;;;1006           masked_outw( SCU_EXTREG_DPI2AHB_CTRL,
000042  68ca              LDR      r2,[r1,#0xc]
000044  f042020d          ORR      r2,r2,#0xd
000048  60ca              STR      r2,[r1,#0xc]
;;;1007                       (SCU_EXTREG_DPI2AHB_CTRL_rst_n | SCU_EXTREG_DPI2AHB_CTRL_apb_rst_n |
;;;1008                        SCU_EXTREG_DPI2AHB_CTRL_apb_rst_n | SCU_EXTREG_DPI2AHB_CTRL_pwr_rst_n),
;;;1009                       (SCU_EXTREG_DPI2AHB_CTRL_rst_n | SCU_EXTREG_DPI2AHB_CTRL_apb_rst_n |
;;;1010                        SCU_EXTREG_DPI2AHB_CTRL_apb_rst_n | SCU_EXTREG_DPI2AHB_CTRL_pwr_rst_n));
;;;1011   
;;;1012           masked_outw( SCU_EXTREG_DPI2AHB_CTRL,
00004a  68ca              LDR      r2,[r1,#0xc]
00004c  f04202f0          ORR      r2,r2,#0xf0
000050  60ca              STR      r2,[r1,#0xc]
;;;1013                       (SCU_EXTREG_DPI2AHB_CTRL_rst_n_1 | SCU_EXTREG_DPI2AHB_CTRL_apb_rst_n_1 |
;;;1014                        SCU_EXTREG_DPI2AHB_CTRL_sys_rst_n_1 | SCU_EXTREG_DPI2AHB_CTRL_pwr_rst_n_1),
;;;1015                       (SCU_EXTREG_DPI2AHB_CTRL_rst_n_1 | SCU_EXTREG_DPI2AHB_CTRL_apb_rst_n_1 |
;;;1016                        SCU_EXTREG_DPI2AHB_CTRL_sys_rst_n_1 | SCU_EXTREG_DPI2AHB_CTRL_pwr_rst_n_1));
;;;1017   
;;;1018   
;;;1019           masked_outw( SCU_EXTREG_CSIRX_CTRL0,
000052  680a              LDR      r2,[r1,#0]
000054  f0425298          ORR      r2,r2,#0x13000000
000058  600a              STR      r2,[r1,#0]
;;;1020                       (SCU_EXTREG_CSIRX_CTRL0_apb_rst_n | SCU_EXTREG_CSIRX_CTRL0_pwr_rst_n |
;;;1021                        SCU_EXTREG_CSIRX_CTRL0_sys_rst_n),
;;;1022                       (SCU_EXTREG_CSIRX_CTRL0_apb_rst_n | SCU_EXTREG_CSIRX_CTRL0_pwr_rst_n |
;;;1023                        SCU_EXTREG_CSIRX_CTRL0_sys_rst_n));
;;;1024   
;;;1025           masked_outw( SCU_EXTREG_CSIRX_CTRL1,
00005a  684a              LDR      r2,[r1,#4]
00005c  f0425298          ORR      r2,r2,#0x13000000
000060  604a              STR      r2,[r1,#4]
;;;1026                       (SCU_EXTREG_CSIRX_CTRL1_apb_rst_n | SCU_EXTREG_CSIRX_CTRL1_pwr_rst_n |
;;;1027                        SCU_EXTREG_CSIRX_CTRL1_sys_rst_n ),
;;;1028                       (SCU_EXTREG_CSIRX_CTRL1_apb_rst_n | SCU_EXTREG_CSIRX_CTRL1_pwr_rst_n |
;;;1029                        SCU_EXTREG_CSIRX_CTRL1_sys_rst_n ));
;;;1030   
;;;1031           //dpi2ahb_1 reset
;;;1032           masked_outw( SCU_EXTREG_DPI2AHB_CTRL,
000062  68ca              LDR      r2,[r1,#0xc]
000064  f04202f0          ORR      r2,r2,#0xf0
000068  60ca              STR      r2,[r1,#0xc]
;;;1033                       (SCU_EXTREG_DPI2AHB_CTRL_rst_n_1 | SCU_EXTREG_DPI2AHB_CTRL_apb_rst_n_1 |
;;;1034                        SCU_EXTREG_DPI2AHB_CTRL_sys_rst_n_1 | SCU_EXTREG_DPI2AHB_CTRL_pwr_rst_n_1),
;;;1035   
;;;1036                       (SCU_EXTREG_DPI2AHB_CTRL_rst_n_1 | SCU_EXTREG_DPI2AHB_CTRL_apb_rst_n_1 |
;;;1037                        SCU_EXTREG_DPI2AHB_CTRL_sys_rst_n_1 | SCU_EXTREG_DPI2AHB_CTRL_pwr_rst_n_1));
;;;1038   
;;;1039   
;;;1040           outb(MIPIRX_PHY_CSR_1_PA_BASE + 0x11, 0x7);
00006a  4906              LDR      r1,|L6.132|
                  |L6.108|
00006c  744b              STRB     r3,[r1,#0x11]
                  |L6.110|
;;;1041   
;;;1042       }
;;;1043       ctx->page_done_count = 0;
00006e  2100              MOVS     r1,#0
000070  f8801020          STRB     r1,[r0,#0x20]
;;;1044   }
000074  bd10              POP      {r4,pc}
;;;1045   
                          ENDP

000076  0000              DCW      0x0000
                  |L6.120|
                          DCD      0xc2380000
                  |L6.124|
                          DCD      0x13000003
                  |L6.128|
                          DCD      0xc3700000
                  |L6.132|
                          DCD      0xc3800000

                          AREA ||i.dpi2ahb_enable||, CODE, READONLY, ALIGN=2

                  dpi2ahb_enable PROC
;;;559    
;;;560    void dpi2ahb_enable(struct kdp520_cam_context *ctx)
000000  b530              PUSH     {r4,r5,lr}
;;;561    {
;;;562        u32 val = 0;
;;;563        switch (ctx->sensor_id) {
;;;564    #if 0
;;;565        case SENSOR_TYPE_HMX2056:
;;;566            val |= 0x3000;
;;;567            break;
;;;568        case SENSOR_TYPE_OV9286:
;;;569            val |= 0x3008;
;;;570            break;
;;;571        case SENSOR_TYPE_HMXRICA:
;;;572            val |= 0x3008;
;;;573            break;
;;;574    #endif
;;;575        case SENSOR_TYPE_GC2145:
;;;576    #if GC2145_FULL_RES == YES
;;;577                val |= 0x6000;
;;;578    #else
;;;579                val |= 0x3000;
;;;580    #endif
;;;581            break;
;;;582        case SENSOR_TYPE_SC132GS:
;;;583            val |= 0x3000;
;;;584            break;
;;;585    #ifdef SENSOR_TYPE_BF20A1_R    
;;;586        case SENSOR_TYPE_BF20A1_R:
;;;587            val |= 0x3000;
;;;588            break;      
;;;589    #endif      
;;;590    #ifdef SENSOR_TYPE_BF20A1_L
;;;591        case SENSOR_TYPE_BF20A1_L:
;;;592            val |= 0x3000;
;;;593            break;
;;;594    #endif       
;;;595        case SENSOR_TYPE_SC035HGS:
;;;596            val |= 0x3000;
;;;597            break;
;;;598    #if defined(SENSOR_TYPE_GC1054_R) || defined(SENSOR_TYPE_GC1054_L)
;;;599    #ifdef SENSOR_TYPE_GC1054_R
;;;600        case SENSOR_TYPE_GC1054_R:
;;;601    #endif
;;;602    #ifdef SENSOR_TYPE_GC1054_L
;;;603        case SENSOR_TYPE_GC1054_L:
;;;604    #endif
;;;605            val |= 0x3000;
;;;606            break;
;;;607    #endif
;;;608    
;;;609    #if defined(SENSOR_TYPE_OV9282_R) || defined(SENSOR_TYPE_OV9282_L)
;;;610    #ifdef SENSOR_TYPE_OV9282_R
;;;611        case SENSOR_TYPE_OV9282_R:
;;;612    #endif
;;;613    #ifdef SENSOR_TYPE_OV9282_L
;;;614        case SENSOR_TYPE_OV9282_L:
;;;615    #endif
;;;616            val |= 0x2000;
;;;617            break;
;;;618    #endif
;;;619        
;;;620    #ifdef SENSOR_TYPE_GC02M1_L    
;;;621        case SENSOR_TYPE_GC02M1_L:
;;;622            val |= 0x1000;  
;;;623            break;    
;;;624    #endif
;;;625    #ifdef SENSOR_TYPE_GC02M1_R    
;;;626        case SENSOR_TYPE_GC02M1_R:
;;;627            val |= 0x1000; 
;;;628            break;	    
;;;629    #endif
;;;630    #ifdef SENSOR_TYPE_MIXO3238
;;;631        case SENSOR_TYPE_MIXO3238:
;;;632            val |= 0x5000;
000002  6b04              LDR      r4,[r0,#0x30]
000004  2100              MOVS     r1,#0                 ;562
000006  1ee4              SUBS     r4,r4,#3
000008  f44f5240          MOV      r2,#0x3000            ;579
00000c  f44f43a0          MOV      r3,#0x5000
000010  2c0c              CMP      r4,#0xc               ;563
000012  d20a              BCS      |L7.42|
000014  e8dff004          TBB      [pc,r4]               ;563
000018  06060606          DCB      0x06,0x06,0x06,0x06
00001c  06060608          DCB      0x06,0x06,0x06,0x08
000020  06060808          DCB      0x06,0x06,0x08,0x08
000024  4611              MOV      r1,r2                 ;579
000026  e000              B        |L7.42|
000028  4619              MOV      r1,r3
                  |L7.42|
;;;633            break;
;;;634    #endif
;;;635    #ifdef SENSOR_TYPE_OV02B1B_R    
;;;636        case SENSOR_TYPE_OV02B1B_R:
;;;637    #if CFG_OV02B1B_12MHZ_ENABLE == 1
;;;638          val |= 0x2000;
;;;639    #else
;;;640          val |= 0x5000;
;;;641    #endif
;;;642          break;
;;;643    #endif
;;;644    #ifdef SENSOR_TYPE_SP2509_R    
;;;645        case SENSOR_TYPE_SP2509_R:
;;;646          val |= 0x3000;
;;;647          break;
;;;648    #endif
;;;649    #ifdef SENSOR_TYPE_SP2509_L    
;;;650        case SENSOR_TYPE_SP2509_L:
;;;651          val |= 0x3000;
;;;652          break;
;;;653    #endif
;;;654    #ifdef SENSOR_TYPE_OV02B1B_L    
;;;655        case SENSOR_TYPE_OV02B1B_L:
;;;656    #if CFG_OV02B1B_12MHZ_ENABLE == 1
;;;657          val |= 0x2000;
;;;658    #else
;;;659          val |= 0x5000;
;;;660    #endif
;;;661          break;
;;;662    #endif
;;;663        }
;;;664    
;;;665        if (ctx->tile_avg_en) {
00002a  6f04              LDR      r4,[r0,#0x70]
00002c  6902              LDR      r2,[r0,#0x10]
;;;666            val |= D2A_TILE_AVG_SIZE;
;;;667            outw(ctx->dpi2ahb_base + D2A_REG_FNC, 0x2);
;;;668            outw(ctx->dpi2ahb_base + D2A_REG_CTRL, val);
;;;669            outw(ctx->dpi2ahb_base + D2A_REG_ICT, D2A_INT_WRD | D2A_INT_TILE_AVG_D);
;;;670        } else {
;;;671            outw(ctx->dpi2ahb_base + D2A_REG_FNC, 0x0);
;;;672            outw(ctx->dpi2ahb_base + D2A_REG_CTRL, val);
;;;673            outw(ctx->dpi2ahb_base + D2A_REG_ICT, D2A_INT_WRD);
00002e  2301              MOVS     r3,#1
000030  b13c              CBZ      r4,|L7.66|
000032  2402              MOVS     r4,#2                 ;667
000034  6054              STR      r4,[r2,#4]            ;667
000036  6902              LDR      r2,[r0,#0x10]         ;668
000038  6011              STR      r1,[r2,#0]            ;668
00003a  6902              LDR      r2,[r0,#0x10]         ;669
00003c  2121              MOVS     r1,#0x21              ;669
00003e  6111              STR      r1,[r2,#0x10]         ;669
000040  e005              B        |L7.78|
                  |L7.66|
000042  2400              MOVS     r4,#0                 ;671
000044  6054              STR      r4,[r2,#4]            ;671
000046  6902              LDR      r2,[r0,#0x10]         ;672
000048  6011              STR      r1,[r2,#0]            ;672
00004a  6901              LDR      r1,[r0,#0x10]
00004c  610b              STR      r3,[r1,#0x10]
                  |L7.78|
;;;674        }
;;;675        
;;;676        
;;;677    
;;;678    #ifdef SOURCE_FROM_PATTERN
;;;679        if (MIPI_CSI2RX_0 == ctx->id) {
;;;680        #if IMGSRC_0_FORMAT == IMAGE_FORMAT_YCBCR
;;;681            outw(ctx->dpi2ahb_base + D2A_REG_PT, D2A_PT_YUV422);
;;;682        #elif IMGSRC_0_FORMAT == IMAGE_FORMAT_RGB565
;;;683            outw(ctx->dpi2ahb_base + D2A_REG_PT, D2A_PT_RGB565);
;;;684        #elif IMGSRC_0_FORMAT == IMAGE_FORMAT_RAW10
;;;685            outw(ctx->dpi2ahb_base + D2A_REG_PT, D2A_PT_RAW10);
;;;686        #elif IMGSRC_0_FORMAT == IMAGE_FORMAT_RAW8
;;;687            outw(ctx->dpi2ahb_base + D2A_REG_PT, D2A_PT_RAW8);
;;;688        #endif
;;;689        }
;;;690        else if (MIPI_CSI2RX_1 == ctx->id) {
;;;691        #if IMGSRC_1_FORMAT == IMAGE_FORMAT_YCBCR
;;;692            outw(ctx->dpi2ahb_base + D2A_REG_PT, D2A_PT_YUV422);
;;;693        #elif IMGSRC_1_FORMAT == IMAGE_FORMAT_RGB565
;;;694            outw(ctx->dpi2ahb_base + D2A_REG_PT, D2A_PT_RGB565);
;;;695        #elif IMGSRC_1_FORMAT == IMAGE_FORMAT_RAW10
;;;696            outw(ctx->dpi2ahb_base + D2A_REG_PT, D2A_PT_RAW10);
;;;697        #elif IMGSRC_1_FORMAT == IMAGE_FORMAT_RAW8
;;;698            outw(ctx->dpi2ahb_base + D2A_REG_PT, D2A_PT_RAW8);
;;;699        #endif
;;;700        }
;;;701    #else
;;;702        switch (ctx->fmt.pixelformat) {
00004e  4a0c              LDR      r2,|L7.128|
000050  6bc1              LDR      r1,[r0,#0x3c]
000052  1889              ADDS     r1,r1,r2
000054  d010              BEQ      |L7.120|
000056  4a0b              LDR      r2,|L7.132|
000058  1889              ADDS     r1,r1,r2
00005a  d00f              BEQ      |L7.124|
00005c  4a0a              LDR      r2,|L7.136|
00005e  1889              ADDS     r1,r1,r2
000060  d004              BEQ      |L7.108|
000062  4a0a              LDR      r2,|L7.140|
000064  42d1              CMN      r1,r2
000066  d104              BNE      |L7.114|
;;;703        case V2K_PIX_FMT_YCBCR:
;;;704            dbg_msg_camera("[%s] V2K_PIX_FMT_YCBCR\n", __func__);
;;;705            outw(ctx->dpi2ahb_base + D2A_REG_PT, D2A_PT_YUV422);
000068  211e              MOVS     r1,#0x1e
;;;706            break;        
00006a  e000              B        |L7.110|
                  |L7.108|
;;;707        case V2K_PIX_FMT_RGB565:
;;;708            dbg_msg_camera("[%s] V2K_PIX_FMT_RGB565\n", __func__);
;;;709            outw(ctx->dpi2ahb_base + D2A_REG_PT, D2A_PT_RGB565);
00006c  2122              MOVS     r1,#0x22
                  |L7.110|
00006e  6902              LDR      r2,[r0,#0x10]         ;705
000070  61d1              STR      r1,[r2,#0x1c]         ;705
                  |L7.114|
;;;710            break;
;;;711        case V2K_PIX_FMT_RAW10:	
;;;712            dbg_msg_camera("[%s] V2K_PIX_FMT_RAW10\n", __func__);
;;;713            outw(ctx->dpi2ahb_base + D2A_REG_PT, D2A_PT_RAW10);
;;;714            break;
;;;715        case V2K_PIX_FMT_RAW8:
;;;716            dbg_msg_camera("[%s] V2K_PIX_FMT_RAW8\n", __func__);
;;;717            outw(ctx->dpi2ahb_base + D2A_REG_PT, D2A_PT_RAW8);
;;;718            break;
;;;719        default:;
;;;720        }
;;;721    #endif
;;;722    
;;;723        outw(ctx->dpi2ahb_base + D2A_REG_FIU0, 0x1);
000072  6900              LDR      r0,[r0,#0x10]
000074  6203              STR      r3,[r0,#0x20]
;;;724    }
000076  bd30              POP      {r4,r5,pc}
                  |L7.120|
000078  212b              MOVS     r1,#0x2b              ;713
00007a  e7f8              B        |L7.110|
                  |L7.124|
00007c  212a              MOVS     r1,#0x2a              ;717
00007e  e7f6              B        |L7.110|
;;;725    
                          ENDP

                  |L7.128|
                          DCD      0xcfcebeae
                  |L7.132|
                          DCD      0xf7da0000
                  |L7.136|
                          DCD      0xe814fa00
                  |L7.140|
                          DCD      0xfde904f9

                          AREA ||i.dpi2ahb_reset||, CODE, READONLY, ALIGN=2

                  dpi2ahb_reset PROC
;;;545    #if(DPI2AHB_RESET_ENABLE == YES)
;;;546    void dpi2ahb_reset(struct kdp520_cam_context *ctx)
000000  2100              MOVS     r1,#0
;;;547    {
;;;548        u32 prev_read, read;
;;;549        ctx->page_done_num = 0;
;;;550        prev_read = inw(ctx->dpi2ahb_base + D2A_REG_CTRL);
000002  61c1              STR      r1,[r0,#0x1c]
000004  6901              LDR      r1,[r0,#0x10]
000006  680a              LDR      r2,[r1,#0]
;;;551        read = (prev_read | BIT0);
000008  f0420301          ORR      r3,r2,#1
;;;552        outw(ctx->dpi2ahb_base + D2A_REG_CTRL, read);  //reset
00000c  600b              STR      r3,[r1,#0]
;;;553        read = inw(ctx->dpi2ahb_base + D2A_REG_CTRL);
00000e  6900              LDR      r0,[r0,#0x10]
000010  6803              LDR      r3,[r0,#0]
;;;554    
;;;555        if(prev_read != read)
000012  429a              CMP      r2,r3
000014  d003              BEQ      |L8.30|
;;;556            dbg_msg_console("Reset D2A_REG_CTRL error =%#x, %#x", prev_read, read);
000016  a102              ADR      r1,|L8.32|
000018  2001              MOVS     r0,#1
00001a  f7ffbffe          B.W      kdp_level_printf
                  |L8.30|
;;;557    }
00001e  4770              BX       lr
;;;558    #endif
                          ENDP

                  |L8.32|
000020  52657365          DCB      "Reset D2A_REG_CTRL error =%#x, %#x\r\n",0
000024  74204432
000028  415f5245
00002c  475f4354
000030  524c2065
000034  72726f72
000038  203d2523
00003c  782c2025
000040  23780d0a
000044  00      
000045  00                DCB      0
000046  00                DCB      0
000047  00                DCB      0

                          AREA ||i.kdp520_cam_buffer_init||, CODE, READONLY, ALIGN=2

                  kdp520_cam_buffer_init PROC
;;;1174   
;;;1175   static int kdp520_cam_buffer_init(unsigned int cam_idx)
000000  b570              PUSH     {r4-r6,lr}
;;;1176   {
000002  4605              MOV      r5,r0
;;;1177       struct kdp520_cam_context *ctx = &cam_ctx[cam_idx];
000004  eb000045          ADD      r0,r0,r5,LSL #1
000008  4913              LDR      r1,|L9.88|
00000a  ebc01045          RSB      r0,r0,r5,LSL #5
00000e  eb010480          ADD      r4,r1,r0,LSL #2
000012  68e0              LDR      r0,[r4,#0xc]          ;1176
000014  b930              CBNZ     r0,|L9.36|
;;;1178   
;;;1179       //critical_msg("[%s] cam %d: size=%d\n", __func__, cam_idx, ctx->fmt.sizeimage);
;;;1180   
;;;1181       if (ctx->inited == 0) {
;;;1182           kdp_fb_mgr_init(cam_idx, ctx->fmt.sizeimage, MAX_FRAME_BUFFER);
000016  2207              MOVS     r2,#7
000018  4628              MOV      r0,r5
00001a  6ca1              LDR      r1,[r4,#0x48]
00001c  f7fffffe          BL       kdp_fb_mgr_init
;;;1183           ctx->inited = 1;
000020  2001              MOVS     r0,#1
000022  60e0              STR      r0,[r4,#0xc]
                  |L9.36|
;;;1184       }
;;;1185   
;;;1186   #if(DPI2AHB_RESET_ENABLE == YES)
;;;1187       buf0_idx[cam_idx] = -1;
000024  4e0d              LDR      r6,|L9.92|
000026  f04f30ff          MOV      r0,#0xffffffff
;;;1188       buf1_idx[cam_idx] = -1;
00002a  f1060108          ADD      r1,r6,#8
00002e  f8460025          STR      r0,[r6,r5,LSL #2]     ;1187
000032  f8410025          STR      r0,[r1,r5,LSL #2]
;;;1189   #endif
;;;1190   
;;;1191       outw(ctx->dpi2ahb_base + D2A_REG_P0ADDR, kdp_fb_mgr_next_write(cam_idx, &buf1_idx[cam_idx]));
000036  eb010185          ADD      r1,r1,r5,LSL #2
00003a  4628              MOV      r0,r5
00003c  f7fffffe          BL       kdp_fb_mgr_next_write
000040  6921              LDR      r1,[r4,#0x10]
000042  6088              STR      r0,[r1,#8]
;;;1192       outw(ctx->dpi2ahb_base + D2A_REG_P1ADDR, kdp_fb_mgr_next_write(cam_idx, &buf0_idx[cam_idx]));   //mipi data put on P1ADDR at first ISR
000044  eb060185          ADD      r1,r6,r5,LSL #2
000048  4628              MOV      r0,r5
00004a  f7fffffe          BL       kdp_fb_mgr_next_write
00004e  6921              LDR      r1,[r4,#0x10]
000050  60c8              STR      r0,[r1,#0xc]
;;;1193       //outw(ctx->dpi2ahb_base + D2A_REG_FNC, 0);
;;;1194   
;;;1195       return 0;
000052  2000              MOVS     r0,#0
;;;1196   }
000054  bd70              POP      {r4-r6,pc}
;;;1197   
                          ENDP

000056  0000              DCW      0x0000
                  |L9.88|
                          DCD      ||.bss||
                  |L9.92|
                          DCD      ||.data||

                          AREA ||i.kdp520_cam_close||, CODE, READONLY, ALIGN=2

                  kdp520_cam_close PROC
;;;1116   
;;;1117   static void kdp520_cam_close(unsigned int cam_idx)
000000  eb000140          ADD      r1,r0,r0,LSL #1
;;;1118   {
;;;1119       struct kdp520_cam_context *ctx = &cam_ctx[cam_idx];
000004  ebc11040          RSB      r0,r1,r0,LSL #5
000008  b510              PUSH     {r4,lr}               ;1118
00000a  4917              LDR      r1,|L10.104|
00000c  eb010480          ADD      r4,r1,r0,LSL #2
000010  4916              LDR      r1,|L10.108|
000012  6820              LDR      r0,[r4,#0]            ;1118
000014  b110              CBZ      r0,|L10.28|
000016  2801              CMP      r0,#1                 ;1118
000018  d00d              BEQ      |L10.54|
00001a  e01a              B        |L10.82|
                  |L10.28|
00001c  f8510f90          LDR      r0,[r1,#0x90]!        ;1118
000020  f0200003          BIC      r0,r0,#3              ;1118
000024  6008              STR      r0,[r1,#0]            ;1118
000026  2070              MOVS     r0,#0x70              ;1118
000028  f7fffffe          BL       clk_disable
00002c  2071              MOVS     r0,#0x71              ;1118
00002e  f7fffffe          BL       clk_disable
000032  206f              MOVS     r0,#0x6f              ;1118
000034  e00b              B        |L10.78|
                  |L10.54|
000036  f8510f94          LDR      r0,[r1,#0x94]!        ;1118
00003a  f0200003          BIC      r0,r0,#3              ;1118
00003e  6008              STR      r0,[r1,#0]            ;1118
000040  206d              MOVS     r0,#0x6d              ;1118
000042  f7fffffe          BL       clk_disable
000046  206e              MOVS     r0,#0x6e              ;1118
000048  f7fffffe          BL       clk_disable
00004c  206c              MOVS     r0,#0x6c              ;1118
                  |L10.78|
00004e  f7fffffe          BL       clk_disable
                  |L10.82|
000052  f64050ac          MOV      r0,#0xdac             ;1118
000056  f7fffffe          BL       delay_us
;;;1120   
;;;1121       dbg_msg_camera("[%s] cam: %d\n", __func__, cam_idx);
;;;1122       csi2rx_clock_stop(ctx);
;;;1123       csi2rx_power(ctx, 0);
00005a  4620              MOV      r0,r4
00005c  e8bd4010          POP      {r4,lr}
000060  2100              MOVS     r1,#0
000062  f7ffbffe          B.W      csi2rx_power
;;;1124   }
;;;1125   
                          ENDP

000066  0000              DCW      0x0000
                  |L10.104|
                          DCD      ||.bss||
                  |L10.108|
                          DCD      0xc2380000

                          AREA ||i.kdp520_cam_get_format||, CODE, READONLY, ALIGN=2

                  kdp520_cam_get_format PROC
;;;1164   
;;;1165   static int kdp520_cam_get_format(unsigned int cam_idx, struct cam_format *format)
000000  460b              MOV      r3,r1
;;;1166   {
;;;1167       struct kdp520_cam_context *ctx = &cam_ctx[cam_idx];
000002  eb000140          ADD      r1,r0,r0,LSL #1
000006  ebc11040          RSB      r0,r1,r0,LSL #5
00000a  4905              LDR      r1,|L11.32|
00000c  b510              PUSH     {r4,lr}               ;1166
00000e  eb010180          ADD      r1,r1,r0,LSL #2
;;;1168   
;;;1169       dbg_msg_camera("[%s] cam: %d\n", __func__, cam_idx);
;;;1170   
;;;1171       *format = ctx->fmt;
000012  221c              MOVS     r2,#0x1c
000014  4618              MOV      r0,r3
000016  3134              ADDS     r1,r1,#0x34
000018  f7fffffe          BL       __aeabi_memcpy4
;;;1172       return 0;
00001c  2000              MOVS     r0,#0
;;;1173   }
00001e  bd10              POP      {r4,pc}
;;;1174   
                          ENDP

                  |L11.32|
                          DCD      ||.bss||

                          AREA ||i.kdp520_cam_get_lux||, CODE, READONLY, ALIGN=1

                  kdp520_cam_get_lux PROC
;;;1273   
;;;1274   static int kdp520_cam_get_lux(unsigned int cam_idx, u16* exposure, u8* pre_gain, u8* post_gain, u8* global_gain, u8* y_average)
000000  b57c              PUSH     {r2-r6,lr}
;;;1275   {
000002  e9dd4506          LDRD     r4,r5,[sp,#0x18]
000006  e9cd4500          STRD     r4,r5,[sp,#0]
;;;1276       //dbg_msg_camera("[%s] cam: %d\n", __func__, cam_idx);
;;;1277   
;;;1278       kdp_sensor_get_lux(cam_idx, exposure, pre_gain, post_gain, global_gain, y_average);
00000a  f7fffffe          BL       kdp_sensor_get_lux
;;;1279   
;;;1280       return 0;
00000e  2000              MOVS     r0,#0
;;;1281   }
000010  bd7c              POP      {r2-r6,pc}
;;;1282   
                          ENDP


                          AREA ||i.kdp520_cam_open||, CODE, READONLY, ALIGN=2

                  kdp520_cam_open PROC
;;;1090   
;;;1091   static int kdp520_cam_open(unsigned int cam_idx)
000000  eb000140          ADD      r1,r0,r0,LSL #1
;;;1092   {
000004  b510              PUSH     {r4,lr}
;;;1093       struct kdp520_cam_context *ctx = &cam_ctx[cam_idx];
000006  ebc11040          RSB      r0,r1,r0,LSL #5
00000a  491a              LDR      r1,|L13.116|
00000c  b090              SUB      sp,sp,#0x40           ;1092
00000e  eb010480          ADD      r4,r1,r0,LSL #2
;;;1094   
;;;1095       dbg_msg_camera("[%s] cam: %d\n", __func__, cam_idx);
;;;1096   
;;;1097   #if(DPI2AHB_RESET_ENABLE == YES)
;;;1098       dpi2ahb_reset(ctx);
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       dpi2ahb_reset
;;;1099   #endif
;;;1100       csi2rx_power(ctx, 1);
000018  2101              MOVS     r1,#1
00001a  4620              MOV      r0,r4
00001c  f7fffffe          BL       csi2rx_power
000020  6820              LDR      r0,[r4,#0]
000022  b110              CBZ      r0,|L13.42|
000024  2801              CMP      r0,#1
000026  d008              BEQ      |L13.58|
000028  e010              B        |L13.76|
                  |L13.42|
00002a  2070              MOVS     r0,#0x70
00002c  f7fffffe          BL       clk_enable
000030  2071              MOVS     r0,#0x71
000032  f7fffffe          BL       clk_enable
000036  206f              MOVS     r0,#0x6f
000038  e006              B        |L13.72|
                  |L13.58|
00003a  206d              MOVS     r0,#0x6d
00003c  f7fffffe          BL       clk_enable
000040  206e              MOVS     r0,#0x6e
000042  f7fffffe          BL       clk_enable
000046  206c              MOVS     r0,#0x6c
                  |L13.72|
000048  f7fffffe          BL       clk_enable
                  |L13.76|
00004c  f64050ac          MOV      r0,#0xdac
000050  f7fffffe          BL       delay_us
;;;1101       csi2rx_clock_start(ctx);
;;;1102       csi2rx_reset(ctx);
000054  4620              MOV      r0,r4
000056  f7fffffe          BL       csi2rx_reset
;;;1103   
;;;1104       ctx->page_done_num = 0;
00005a  2000              MOVS     r0,#0
;;;1105   
;;;1106   #if FB_WAIT_TILE_VAL == YES    
;;;1107       struct frame_info info;
;;;1108       memset(&info, 0, sizeof(struct frame_info));
00005c  61e0              STR      r0,[r4,#0x1c]
00005e  2140              MOVS     r1,#0x40
000060  4668              MOV      r0,sp
000062  f7fffffe          BL       __aeabi_memclr4
;;;1109       kdp_fb_mgr_set_frame_info(ctx->id, &info);
000066  4669              MOV      r1,sp
000068  6820              LDR      r0,[r4,#0]
00006a  f7fffffe          BL       kdp_fb_mgr_set_frame_info
;;;1110   #endif
;;;1111   #if FB_TILE_RECODE == YES
;;;1112       kdp_fb_mgr_set_frame_record_rst(ctx->id);
;;;1113   #endif
;;;1114       return 0;
;;;1115   }
00006e  b010              ADD      sp,sp,#0x40
000070  2000              MOVS     r0,#0                 ;1114
000072  bd10              POP      {r4,pc}
;;;1116   
                          ENDP

                  |L13.116|
                          DCD      ||.bss||

                          AREA ||i.kdp520_cam_query_capability||, CODE, READONLY, ALIGN=2

                  kdp520_cam_query_capability PROC
;;;1125   
;;;1126   static int kdp520_cam_query_capability(unsigned int cam_idx, struct cam_capability *cap)
000000  b570              PUSH     {r4-r6,lr}
;;;1127   {
000002  460c              MOV      r4,r1
;;;1128       struct kdp520_cam_context *ctx = &cam_ctx[cam_idx];
000004  eb000140          ADD      r1,r0,r0,LSL #1
000008  ebc11040          RSB      r0,r1,r0,LSL #5
00000c  490a              LDR      r1,|L14.56|
00000e  eb010580          ADD      r5,r1,r0,LSL #2
;;;1129   
;;;1130       dbg_msg_camera("[%s] cam: %d\n", __func__, cam_idx);
;;;1131   
;;;1132       ctx->capabilities = V2K_CAP_VIDEO_CAPTURE | V2K_CAP_STREAMING | V2K_CAP_DEVICE_CAPS;
000012  2007              MOVS     r0,#7
;;;1133   
;;;1134       strcpy(cap->driver, "kl520_camera");
000014  66a8              STR      r0,[r5,#0x68]
000016  a109              ADR      r1,|L14.60|
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       strcpy
;;;1135       strcpy(cap->desc, "kl520_camera");
00001e  a107              ADR      r1,|L14.60|
000020  f1040010          ADD      r0,r4,#0x10
000024  f7fffffe          BL       strcpy
;;;1136       cap->version = 0x00010001;
000028  f04f1001          MOV      r0,#0x10001
;;;1137       cap->capabilities = ctx->capabilities;
00002c  6220              STR      r0,[r4,#0x20]
00002e  6ea8              LDR      r0,[r5,#0x68]
;;;1138       return 0;
000030  6260              STR      r0,[r4,#0x24]
000032  2000              MOVS     r0,#0
;;;1139   }
000034  bd70              POP      {r4-r6,pc}
;;;1140   
                          ENDP

000036  0000              DCW      0x0000
                  |L14.56|
                          DCD      ||.bss||
                  |L14.60|
00003c  6b6c3532          DCB      "kl520_camera",0
000040  305f6361
000044  6d657261
000048  00      
000049  00                DCB      0
00004a  00                DCB      0
00004b  00                DCB      0

                          AREA ||i.kdp520_cam_set_aec_roi||, CODE, READONLY, ALIGN=1

                  kdp520_cam_set_aec_roi PROC
;;;1282   
;;;1283   static int kdp520_cam_set_aec_roi(unsigned int cam_idx, u8 x1, u8 x2, u8 y1, u8 y2, u8 center_x1, u8 center_x2, u8 center_y1, u8 center_y2)
000000  b5f0              PUSH     {r4-r7,lr}
;;;1284   {
000002  b085              SUB      sp,sp,#0x14
000004  f10d0e28          ADD      lr,sp,#0x28
000008  e89e10f0          LDM      lr,{r4-r7,r12}
00000c  e88d10f0          STM      sp,{r4-r7,r12}
;;;1285       //dbg_msg_camera("[%s] cam: %d\n", __func__, cam_idx);
;;;1286   
;;;1287       kdp_sensor_set_aec_roi(cam_idx, x1, x2, y1, y2, center_x1, center_x2, center_y1, center_y2);
000010  f7fffffe          BL       kdp_sensor_set_aec_roi
;;;1288   
;;;1289       return 0;
;;;1290   }
000014  b005              ADD      sp,sp,#0x14
000016  2000              MOVS     r0,#0                 ;1289
000018  bdf0              POP      {r4-r7,pc}
;;;1291   
                          ENDP


                          AREA ||i.kdp520_cam_set_exp_time||, CODE, READONLY, ALIGN=1

                  kdp520_cam_set_exp_time PROC
;;;1264   
;;;1265   static int kdp520_cam_set_exp_time(unsigned int cam_idx, u8 gain1, u8 gain2)
000000  b510              PUSH     {r4,lr}
;;;1266   {
;;;1267       dbg_msg_camera("[%s] cam: %d\n", __func__, cam_idx);
;;;1268   
;;;1269       kdp_sensor_set_exp_time(cam_idx, gain1, gain2);
000002  f7fffffe          BL       kdp_sensor_set_exp_time
;;;1270   
;;;1271       return 0;
000006  2000              MOVS     r0,#0
;;;1272   }
000008  bd10              POP      {r4,pc}
;;;1273   
                          ENDP


                          AREA ||i.kdp520_cam_set_flip||, CODE, READONLY, ALIGN=1

                  kdp520_cam_set_flip PROC
;;;1300   
;;;1301   int kdp520_cam_set_flip(unsigned int cam_idx, BOOL enable)
000000  b510              PUSH     {r4,lr}
;;;1302   {
;;;1303       dbg_msg_camera("[%s] cam: %d\n", __func__, cam_idx);
;;;1304   
;;;1305       kdp_sensor_set_flip(cam_idx, enable);
000002  f7fffffe          BL       kdp_sensor_set_flip
;;;1306   
;;;1307       return 0;
000006  2000              MOVS     r0,#0
;;;1308   }
000008  bd10              POP      {r4,pc}
;;;1309   
                          ENDP


                          AREA ||i.kdp520_cam_set_format||, CODE, READONLY, ALIGN=2

                  kdp520_cam_set_format PROC
;;;1140   
;;;1141   static int kdp520_cam_set_format(unsigned int cam_idx, struct cam_format *format)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1142   {
000004  460d              MOV      r5,r1
000006  4607              MOV      r7,r0
;;;1143       struct kdp520_cam_context *ctx = &cam_ctx[cam_idx];
000008  eb000047          ADD      r0,r0,r7,LSL #1
00000c  4914              LDR      r1,|L18.96|
00000e  ebc01047          RSB      r0,r0,r7,LSL #5
000012  eb010480          ADD      r4,r1,r0,LSL #2
;;;1144       int bpp;
;;;1145   
;;;1146       ctx->fmt = *format;
000016  f1040034          ADD      r0,r4,#0x34
00001a  221c              MOVS     r2,#0x1c
00001c  4629              MOV      r1,r5
00001e  4680              MOV      r8,r0
000020  f7fffffe          BL       __aeabi_memcpy4
;;;1147   
;;;1148       if (format->pixelformat == V2K_PIX_FMT_RGB565 || format->pixelformat == V2K_PIX_FMT_RAW10)
000024  490f              LDR      r1,|L18.100|
000026  68a8              LDR      r0,[r5,#8]
000028  4288              CMP      r0,r1
00002a  d002              BEQ      |L18.50|
00002c  490e              LDR      r1,|L18.104|
00002e  4288              CMP      r0,r1
000030  d101              BNE      |L18.54|
                  |L18.50|
;;;1149           bpp = 2;
000032  2602              MOVS     r6,#2
000034  e003              B        |L18.62|
                  |L18.54|
;;;1150       else if (format->pixelformat == V2K_PIX_FMT_RAW8)
000036  490d              LDR      r1,|L18.108|
000038  4288              CMP      r0,r1
00003a  d100              BNE      |L18.62|
;;;1151           bpp = 1;
00003c  2601              MOVS     r6,#1
                  |L18.62|
00003e  e9d50100          LDRD     r0,r1,[r5,#0]
;;;1152   
;;;1153       ctx->fmt.sizeimage = format->width * format->height * bpp;
000042  4348              MULS     r0,r1,r0
000044  4370              MULS     r0,r6,r0
;;;1154   
;;;1155       // critical_msg("[%s] cam %d: w=%d h=%d p=0x%x f=%d b=%d s=%d c=%d\n", __func__, cam_idx,
;;;1156       //         ctx->fmt.width, ctx->fmt.height, ctx->fmt.pixelformat, ctx->fmt.field,
;;;1157       //         ctx->fmt.bytesperline, ctx->fmt.sizeimage, ctx->fmt.colorspace);
;;;1158   
;;;1159       dpi2ahb_enable(ctx);
000046  64a0              STR      r0,[r4,#0x48]
000048  4620              MOV      r0,r4
00004a  f7fffffe          BL       dpi2ahb_enable
;;;1160       csi2rx_init(ctx);
00004e  4620              MOV      r0,r4
000050  f7fffffe          BL       csi2rx_init
000054  4641              MOV      r1,r8
;;;1161   
;;;1162       return kdp_sensor_set_fmt(cam_idx, &ctx->fmt);
000056  4638              MOV      r0,r7
000058  e8bd41f0          POP      {r4-r8,lr}
00005c  f7ffbffe          B.W      kdp_sensor_set_fmt
;;;1163   }
;;;1164   
                          ENDP

                  |L18.96|
                          DCD      ||.bss||
                  |L18.100|
                          DCD      0x50424752
                  |L18.104|
                          DCD      0x30314152
                  |L18.108|
                          DCD      0x38574152

                          AREA ||i.kdp520_cam_set_fps||, CODE, READONLY, ALIGN=1

                  kdp520_cam_set_fps PROC
;;;1318   
;;;1319   static int kdp520_cam_set_fps(unsigned int cam_idx, u8 fps)
000000  b510              PUSH     {r4,lr}
;;;1320   {
;;;1321       dbg_msg_camera("[%s] cam: %d\n", __func__, cam_idx);
;;;1322   
;;;1323       kdp_sensor_set_fps(cam_idx, fps);
000002  f7fffffe          BL       kdp_sensor_set_fps
;;;1324   
;;;1325       return 0;
000006  2000              MOVS     r0,#0
;;;1326   }
000008  bd10              POP      {r4,pc}
;;;1327   
                          ENDP


                          AREA ||i.kdp520_cam_set_gain||, CODE, READONLY, ALIGN=1

                  kdp520_cam_set_gain PROC
;;;1255   
;;;1256   static int kdp520_cam_set_gain(unsigned int cam_idx, u8 gain1, u8 gain2)
000000  b510              PUSH     {r4,lr}
;;;1257   {
;;;1258       dbg_msg_camera("[%s] cam: %d\n", __func__, cam_idx);
;;;1259   
;;;1260       kdp_sensor_set_gain(cam_idx, gain1, gain2);
000002  f7fffffe          BL       kdp_sensor_set_gain
;;;1261   
;;;1262       return 0;
000006  2000              MOVS     r0,#0
;;;1263   }
000008  bd10              POP      {r4,pc}
;;;1264   
                          ENDP


                          AREA ||i.kdp520_cam_set_led||, CODE, READONLY, ALIGN=1

                  kdp520_cam_set_led PROC
;;;1309   
;;;1310   int kdp520_cam_set_led(unsigned int cam_idx, BOOL enable)
000000  b510              PUSH     {r4,lr}
;;;1311   {
;;;1312       dbg_msg_camera("[%s] cam: %d\n", __func__, cam_idx);
;;;1313   
;;;1314       kdp_sensor_set_led(cam_idx, enable);
000002  f7fffffe          BL       kdp_sensor_set_led
;;;1315   
;;;1316       return 0;
000006  2000              MOVS     r0,#0
;;;1317   }
000008  bd10              POP      {r4,pc}
;;;1318   
                          ENDP


                          AREA ||i.kdp520_cam_set_mirror||, CODE, READONLY, ALIGN=1

                  kdp520_cam_set_mirror PROC
;;;1291   
;;;1292   int kdp520_cam_set_mirror(unsigned int cam_idx, BOOL enable)
000000  b510              PUSH     {r4,lr}
;;;1293   {
;;;1294       dbg_msg_camera("[%s] cam: %d\n", __func__, cam_idx);
;;;1295   
;;;1296       kdp_sensor_set_mirror(cam_idx, enable);
000002  f7fffffe          BL       kdp_sensor_set_mirror
;;;1297   
;;;1298       return 0;
000006  2000              MOVS     r0,#0
;;;1299   }
000008  bd10              POP      {r4,pc}
;;;1300   
                          ENDP


                          AREA ||i.kdp520_cam_sleep||, CODE, READONLY, ALIGN=1

                  kdp520_cam_sleep PROC
;;;1344   #if CFG_ONE_SHOT_MODE == YES
;;;1345   static int kdp520_cam_sleep(unsigned int cam_idx, BOOL enable)
000000  b510              PUSH     {r4,lr}
;;;1346   {
;;;1347       dbg_msg_camera("[%s] cam: %d, en: %d\n", __func__, cam_idx, enable);
;;;1348   
;;;1349       kdp_sensor_sleep(cam_idx, enable);
000002  f7fffffe          BL       kdp_sensor_sleep
;;;1350   
;;;1351       return 0;
000006  2000              MOVS     r0,#0
;;;1352   }
000008  bd10              POP      {r4,pc}
;;;1353   #endif
                          ENDP


                          AREA ||i.kdp520_cam_start_capture||, CODE, READONLY, ALIGN=2

                  kdp520_cam_start_capture PROC
;;;1197   
;;;1198   static int kdp520_cam_start_capture(unsigned int cam_idx)
000000  eb000140          ADD      r1,r0,r0,LSL #1
;;;1199   {
;;;1200       struct kdp520_cam_context *ctx = &cam_ctx[cam_idx];
000004  ebc11040          RSB      r0,r1,r0,LSL #5
000008  4912              LDR      r1,|L24.84|
00000a  b530              PUSH     {r4,r5,lr}            ;1199
00000c  eb010380          ADD      r3,r1,r0,LSL #2
;;;1201       int i;
;;;1202       uint32_t val;
;;;1203   
;;;1204       dbg_msg_camera("[%s] cam: %d\n", __func__, cam_idx);
;;;1205   
;;;1206       val = 0;
000010  2000              MOVS     r0,#0
;;;1207       for (i = 0; i < ctx->mipi_lane_num; i++)
000012  4602              MOV      r2,r0
;;;1208           val |= BIT0 << i;
000014  2101              MOVS     r1,#1
000016  6edc              LDR      r4,[r3,#0x6c]         ;1199
000018  e004              B        |L24.36|
00001a  bf00              NOP      
                  |L24.28|
00001c  fa01f502          LSL      r5,r1,r2
000020  4328              ORRS     r0,r0,r5
000022  1c52              ADDS     r2,r2,#1
                  |L24.36|
000024  4294              CMP      r4,r2                 ;1207
000026  dcf9              BGT      |L24.28|
;;;1209   
;;;1210       CSIRX_REG_PECR_SET_PEC(ctx->csi_rx_base + CSI2RX_REG_PECR, val);
000028  695a              LDR      r2,[r3,#0x14]
00002a  6a94              LDR      r4,[r2,#0x28]
00002c  f02404ff          BIC      r4,r4,#0xff
000030  4304              ORRS     r4,r4,r0
000032  6294              STR      r4,[r2,#0x28]
;;;1211   
;;;1212       NVIC_EnableIRQ((IRQn_Type)ctx->irq);
000034  7918              LDRB     r0,[r3,#4]
000036  b240              SXTB     r0,r0
000038  2800              CMP      r0,#0
00003a  db08              BLT      |L24.78|
00003c  f000021f          AND      r2,r0,#0x1f
000040  4091              LSLS     r1,r1,r2
000042  0940              LSRS     r0,r0,#5
000044  0080              LSLS     r0,r0,#2
000046  f10020e0          ADD      r0,r0,#0xe000e000
00004a  f8c01100          STR      r1,[r0,#0x100]
                  |L24.78|
;;;1213   
;;;1214       return 0;
00004e  2000              MOVS     r0,#0
;;;1215   }
000050  bd30              POP      {r4,r5,pc}
;;;1216   
                          ENDP

000052  0000              DCW      0x0000
                  |L24.84|
                          DCD      ||.bss||

                          AREA ||i.kdp520_cam_stop_capture||, CODE, READONLY, ALIGN=2

                  kdp520_cam_stop_capture PROC
;;;1216   
;;;1217   static int kdp520_cam_stop_capture(unsigned int cam_idx)
000000  eb000140          ADD      r1,r0,r0,LSL #1
;;;1218   {
;;;1219       struct kdp520_cam_context *ctx = &cam_ctx[cam_idx];
000004  ebc11040          RSB      r0,r1,r0,LSL #5
000008  490b              LDR      r1,|L25.56|
00000a  eb010080          ADD      r0,r1,r0,LSL #2
;;;1220   
;;;1221       dbg_msg_camera("[%s] cam: %d\n", __func__, cam_idx);
;;;1222   
;;;1223       NVIC_DisableIRQ((IRQn_Type)ctx->irq);
00000e  7900              LDRB     r0,[r0,#4]
000010  b240              SXTB     r0,r0
000012  2800              CMP      r0,#0
000014  db0d              BLT      |L25.50|
000016  f000021f          AND      r2,r0,#0x1f           ;1218
00001a  2101              MOVS     r1,#1                 ;1218
00001c  4091              LSLS     r1,r1,r2              ;1218
00001e  0940              LSRS     r0,r0,#5              ;1218
000020  0080              LSLS     r0,r0,#2              ;1218
000022  f10020e0          ADD      r0,r0,#0xe000e000     ;1218
000026  f8c01180          STR      r1,[r0,#0x180]        ;1218
00002a  f3bf8f4f          DSB                            ;1218
00002e  f3bf8f6f          ISB                            ;1218
                  |L25.50|
;;;1224   
;;;1225       return 0;
000032  2000              MOVS     r0,#0
;;;1226   }
000034  4770              BX       lr
;;;1227   
                          ENDP

000036  0000              DCW      0x0000
                  |L25.56|
                          DCD      ||.bss||

                          AREA ||i.kdp520_get_device_id||, CODE, READONLY, ALIGN=1

                  kdp520_get_device_id PROC
;;;1327   
;;;1328   static int kdp520_get_device_id(unsigned int cam_idx)
000000  f7ffbffe          B.W      kdp_sensor_get_device_id
;;;1329   {
;;;1330       dbg_msg_camera("[%s] cam: %d\n", __func__, cam_idx);
;;;1331   
;;;1332       return kdp_sensor_get_device_id(cam_idx);
;;;1333   }
;;;1334   
                          ENDP


                          AREA ||i.kdp520_get_tile_en||, CODE, READONLY, ALIGN=2

                  kdp520_get_tile_en PROC
;;;1334   
;;;1335   static int kdp520_get_tile_en(unsigned int cam_idx)
000000  eb000140          ADD      r1,r0,r0,LSL #1
;;;1336   {
;;;1337       struct kdp520_cam_context *ctx = &cam_ctx[cam_idx];
000004  ebc11040          RSB      r0,r1,r0,LSL #5
000008  4902              LDR      r1,|L27.20|
00000a  eb010080          ADD      r0,r1,r0,LSL #2
;;;1338   
;;;1339       dbg_msg_camera("[%s] cam: %d\n", __func__, cam_idx);
;;;1340   
;;;1341       return ctx->tile_avg_en;
00000e  6f00              LDR      r0,[r0,#0x70]
;;;1342   }
000010  4770              BX       lr
;;;1343   
                          ENDP

000012  0000              DCW      0x0000
                  |L27.20|
                          DCD      ||.bss||

                          AREA ||i.kdp520_set_aec_en||, CODE, READONLY, ALIGN=1

                  kdp520_set_aec_en PROC
;;;1354   
;;;1355   static int kdp520_set_aec_en(unsigned int cam_idx, BOOL enable)
000000  f7ffbffe          B.W      kdp_sensor_set_aec_en
;;;1356   {
;;;1357       dbg_msg_camera("[%s] cam: %d\n", __func__, cam_idx);
;;;1358   
;;;1359       return kdp_sensor_set_aec_en(cam_idx, enable);
;;;1360   }
;;;1361   
                          ENDP


                          AREA ||i.kdp_camera_kl520_init||, CODE, READONLY, ALIGN=2

                  kdp_camera_kl520_init PROC
;;;1432   
;;;1433   int kdp_camera_kl520_init(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1434   {
;;;1435       //critical_msg("[%s] init\n", __func__);
;;;1436   
;;;1437   #if (IMGSRC_0_TYPE >= 0)
;;;1438       cam_ctx[KDP_CAM_0].irq = D2A_FTDPI2AHB_IRQ;
000004  4c22              LDR      r4,|L29.144|
000006  4f24              LDR      r7,|L29.152|
000008  2609              MOVS     r6,#9
00000a  6066              STR      r6,[r4,#4]  ; cam_ctx
;;;1439       NVIC_SetVector((IRQn_Type)cam_ctx[KDP_CAM_0].irq, (u32)camera_isr_0);
00000c  4921              LDR      r1,|L29.148|
00000e  6838              LDR      r0,[r7,#0]
;;;1440       cam_ctx[KDP_CAM_0].dpi2ahb_base = DPI2AHB_CSR_PA_BASE;
;;;1441       cam_ctx[KDP_CAM_0].csi_rx_base = CSIRX_FTCSIRX100_PA_BASE;
;;;1442       cam_ctx[KDP_CAM_0].phy_csr_base = MIPIRX_PHY_CSR_PA_BASE;
;;;1443       cam_ctx[KDP_CAM_0].id = KDP_CAM_0;
;;;1444       cam_ctx[KDP_CAM_0].mipi_lane_num = IMGSRC_0_MIPILANE_NUM;
000010  2501              MOVS     r5,#1
000012  6641              STR      r1,[r0,#0x64]         ;1440
000014  4821              LDR      r0,|L29.156|
000016  6120              STR      r0,[r4,#0x10]         ;1441  ; cam_ctx
000018  4821              LDR      r0,|L29.160|
00001a  6160              STR      r0,[r4,#0x14]         ;1442  ; cam_ctx
00001c  4821              LDR      r0,|L29.164|
00001e  61a0              STR      r0,[r4,#0x18]         ;1443  ; cam_ctx
000020  2000              MOVS     r0,#0                 ;1443
;;;1445       kdp_camera_controller_register(KDP_CAM_0, &kdp520_camera_ops);
000022  66e5              STR      r5,[r4,#0x6c]  ; cam_ctx
000024  4920              LDR      r1,|L29.168|
000026  6020              STR      r0,[r4,#0]  ; cam_ctx
000028  f7fffffe          BL       kdp_camera_controller_register
;;;1446   #endif
;;;1447   
;;;1448   #if (IMGSRC_1_TYPE >= 0)
;;;1449       cam_ctx[KDP_CAM_1].irq = D2A_FTDPI2AHB_1_IRQ;
00002c  203a              MOVS     r0,#0x3a
;;;1450       NVIC_SetVector((IRQn_Type)cam_ctx[KDP_CAM_1].irq, (u32)camera_isr_1);
00002e  67a0              STR      r0,[r4,#0x78]  ; cam_ctx
000030  481e              LDR      r0,|L29.172|
000032  6839              LDR      r1,[r7,#0]
;;;1451       cam_ctx[KDP_CAM_1].dpi2ahb_base = DPI2AHB_CSR_1_PA_BASE;
000034  f8c10128          STR      r0,[r1,#0x128]
000038  481d              LDR      r0,|L29.176|
;;;1452       cam_ctx[KDP_CAM_1].csi_rx_base = CSIRX_FTCSIRX100_1_PA_BASE;
00003a  f8c40084          STR      r0,[r4,#0x84]  ; cam_ctx
00003e  481d              LDR      r0,|L29.180|
;;;1453       cam_ctx[KDP_CAM_1].phy_csr_base = MIPIRX_PHY_CSR_1_PA_BASE;
000040  f8c40088          STR      r0,[r4,#0x88]  ; cam_ctx
;;;1454       cam_ctx[KDP_CAM_1].id = KDP_CAM_1;
;;;1455       cam_ctx[KDP_CAM_1].mipi_lane_num = IMGSRC_1_MIPILANE_NUM;
000044  6765              STR      r5,[r4,#0x74]  ; cam_ctx
000046  481c              LDR      r0,|L29.184|
;;;1456       kdp_camera_controller_register(KDP_CAM_1, &kdp520_camera_ops);
000048  f8c450e0          STR      r5,[r4,#0xe0]  ; cam_ctx
00004c  f8c4008c          STR      r0,[r4,#0x8c]  ; cam_ctx
000050  4915              LDR      r1,|L29.168|
000052  2001              MOVS     r0,#1
000054  f7fffffe          BL       kdp_camera_controller_register
;;;1457   #endif
;;;1458   
;;;1459       sys_camera_global_init();
000058  f7fffffe          BL       sys_camera_global_init
;;;1460   #if IMGSRC_0_TYPE == SENSOR_TYPE_MIXO3238    
;;;1461       cam_ctx[KDP_CAM_0].sensor_id = SENSOR_TYPE_MIXO3238;
;;;1462       cam_ctx[KDP_CAM_0].tile_avg_en = 1;
;;;1463       mixo3238_sensor_init(KDP_CAM_0);
;;;1464   #endif 
;;;1465   
;;;1466   #if IMGSRC_0_TYPE ==SENSOR_TYPE_BF20A1_R    
;;;1467       cam_ctx[KDP_CAM_0].sensor_id = SENSOR_TYPE_BF20A1_R;
;;;1468       cam_ctx[KDP_CAM_0].tile_avg_en = 1;
;;;1469       bf20a1_r_sensor_init(KDP_CAM_0);
;;;1470   #endif 
;;;1471   #if IMGSRC_1_TYPE ==SENSOR_TYPE_BF20A1_L    
;;;1472       cam_ctx[KDP_CAM_1].sensor_id = SENSOR_TYPE_BF20A1_L;
;;;1473       cam_ctx[KDP_CAM_1].tile_avg_en = 1;
;;;1474       bf20a1_l_sensor_init(KDP_CAM_1);
;;;1475   #endif 
;;;1476   
;;;1477   #if IMGSRC_1_TYPE ==SENSOR_TYPE_BF20A1_R    
;;;1478       cam_ctx[KDP_CAM_1].sensor_id = SENSOR_TYPE_BF20A1_R;
;;;1479       cam_ctx[KDP_CAM_1].tile_avg_en = 1;
;;;1480       bf20a1_r_sensor_init(KDP_CAM_1);
;;;1481   #endif 
;;;1482   #if IMGSRC_0_TYPE ==SENSOR_TYPE_BF20A1_L    
;;;1483       cam_ctx[KDP_CAM_0].sensor_id = SENSOR_TYPE_BF20A1_L;
;;;1484       cam_ctx[KDP_CAM_0].tile_avg_en = 1;
;;;1485       bf20a1_l_sensor_init(KDP_CAM_0);
;;;1486   #endif 
;;;1487   
;;;1488   #if IMGSRC_1_TYPE ==SENSOR_TYPE_OV02B1B_R    
;;;1489       cam_ctx[KDP_CAM_1].sensor_id = SENSOR_TYPE_OV02B1B_R;
;;;1490       cam_ctx[KDP_CAM_1].tile_avg_en = (KDP_CAM_1 == MIPI_CAM_NIR)?1:0;
;;;1491       ov02b1b_r_sensor_init(KDP_CAM_1);
;;;1492   #endif 
;;;1493   #if IMGSRC_0_TYPE ==SENSOR_TYPE_OV02B1B_L    
;;;1494       cam_ctx[KDP_CAM_0].sensor_id = SENSOR_TYPE_OV02B1B_L;
;;;1495       cam_ctx[KDP_CAM_0].tile_avg_en = (KDP_CAM_0 == MIPI_CAM_NIR)?1:0;
;;;1496       ov02b1b_l_sensor_init(KDP_CAM_0);
;;;1497   #endif 
;;;1498   
;;;1499   #if IMGSRC_1_TYPE ==SENSOR_TYPE_OV02B1B_L    
;;;1500       cam_ctx[KDP_CAM_1].sensor_id = SENSOR_TYPE_OV02B1B_L;
;;;1501       cam_ctx[KDP_CAM_1].tile_avg_en = (KDP_CAM_1 == MIPI_CAM_NIR)?1:0;
;;;1502       ov02b1b_l_sensor_init(KDP_CAM_1);
;;;1503   #endif 
;;;1504   #if IMGSRC_0_TYPE ==SENSOR_TYPE_OV02B1B_R    
;;;1505       cam_ctx[KDP_CAM_0].sensor_id = SENSOR_TYPE_OV02B1B_R;
;;;1506       cam_ctx[KDP_CAM_0].tile_avg_en = (KDP_CAM_0 == MIPI_CAM_NIR)?1:0;
;;;1507       ov02b1b_r_sensor_init(KDP_CAM_0);
;;;1508   #endif 
;;;1509   
;;;1510   
;;;1511   
;;;1512   #if IMGSRC_1_TYPE ==SENSOR_TYPE_SP2509_R    
;;;1513       cam_ctx[KDP_CAM_1].sensor_id = SENSOR_TYPE_SP2509_R;
;;;1514       cam_ctx[KDP_CAM_1].tile_avg_en = (KDP_CAM_1 == MIPI_CAM_NIR)?1:0;
;;;1515       sp2509_r_sensor_init(KDP_CAM_1);
;;;1516   #endif 
;;;1517   #if IMGSRC_0_TYPE ==SENSOR_TYPE_SP2509_L    
;;;1518       cam_ctx[KDP_CAM_0].sensor_id = SENSOR_TYPE_SP2509_L;
;;;1519       cam_ctx[KDP_CAM_0].tile_avg_en = (KDP_CAM_0 == MIPI_CAM_NIR)?1:0;
;;;1520       sp2509_l_sensor_init(KDP_CAM_0);
;;;1521   #endif 
;;;1522   
;;;1523   #if IMGSRC_1_TYPE ==SENSOR_TYPE_SP2509_L    
;;;1524       cam_ctx[KDP_CAM_1].sensor_id = SENSOR_TYPE_SP2509_L;
;;;1525       cam_ctx[KDP_CAM_1].tile_avg_en = (KDP_CAM_1 == MIPI_CAM_NIR)?1:0;
00005c  4d17              LDR      r5,|L29.188|
00005e  f8c460a4          STR      r6,[r4,#0xa4]  ; cam_ctx
000062  7828              LDRB     r0,[r5,#0]  ; nir_sensor_index
000064  2801              CMP      r0,#1
000066  d000              BEQ      |L29.106|
000068  2000              MOVS     r0,#0
                  |L29.106|
;;;1526       sp2509_l_sensor_init(KDP_CAM_1);
00006a  f8c400e4          STR      r0,[r4,#0xe4]  ; cam_ctx
00006e  2001              MOVS     r0,#1
000070  f7fffffe          BL       sp2509_l_sensor_init
;;;1527   #endif 
;;;1528   #if IMGSRC_0_TYPE ==SENSOR_TYPE_SP2509_R    
;;;1529       cam_ctx[KDP_CAM_0].sensor_id = SENSOR_TYPE_SP2509_R;
000074  2008              MOVS     r0,#8
;;;1530       cam_ctx[KDP_CAM_0].tile_avg_en = (KDP_CAM_0 == MIPI_CAM_NIR)?1:0;
000076  6320              STR      r0,[r4,#0x30]  ; cam_ctx
000078  7828              LDRB     r0,[r5,#0]  ; nir_sensor_index
00007a  b138              CBZ      r0,|L29.140|
00007c  2000              MOVS     r0,#0
                  |L29.126|
;;;1531       sp2509_r_sensor_init(KDP_CAM_0);
00007e  6720              STR      r0,[r4,#0x70]  ; cam_ctx
000080  2000              MOVS     r0,#0
000082  f7fffffe          BL       sp2509_r_sensor_init
;;;1532   #endif 
;;;1533   
;;;1534   #if IMGSRC_0_TYPE == SENSOR_TYPE_GC2145
;;;1535       cam_ctx[KDP_CAM_0].sensor_id = SENSOR_TYPE_GC2145;
;;;1536       cam_ctx[KDP_CAM_0].tile_avg_en = 0;
;;;1537       gc2145_sensor_init(KDP_CAM_0);
;;;1538   #elif IMGSRC_1_TYPE == SENSOR_TYPE_GC2145
;;;1539       cam_ctx[KDP_CAM_1].sensor_id = SENSOR_TYPE_GC2145;
;;;1540       cam_ctx[KDP_CAM_1].tile_avg_en = 0;
;;;1541       gc2145_sensor_init(KDP_CAM_1);
;;;1542   #endif
;;;1543   
;;;1544   #if IMGSRC_0_TYPE == SENSOR_TYPE_SC132GS
;;;1545       cam_ctx[KDP_CAM_0].sensor_id = SENSOR_TYPE_SC132GS;
;;;1546       cam_ctx[KDP_CAM_0].tile_avg_en = 1;
;;;1547       sc132gs_sensor_init(KDP_CAM_0);
;;;1548   #elif IMGSRC_1_TYPE == SENSOR_TYPE_SC132GS
;;;1549       cam_ctx[KDP_CAM_1].sensor_id = SENSOR_TYPE_SC132GS;
;;;1550       cam_ctx[KDP_CAM_1].tile_avg_en = 1;
;;;1551       sc132gs_sensor_init(KDP_CAM_1);
;;;1552   #endif
;;;1553   
;;;1554   #if IMGSRC_0_TYPE == SENSOR_TYPE_SC035HGS
;;;1555       cam_ctx[KDP_CAM_0].sensor_id = SENSOR_TYPE_SC035HGS;
;;;1556       cam_ctx[KDP_CAM_0].tile_avg_en = 1;
;;;1557       sc035hgs_sensor_init(KDP_CAM_0);
;;;1558   #elif IMGSRC_1_TYPE == SENSOR_TYPE_SC035HGS
;;;1559       cam_ctx[KDP_CAM_1].sensor_id = SENSOR_TYPE_SC035HGS;
;;;1560       cam_ctx[KDP_CAM_1].tile_avg_en = 1;
;;;1561       sc035hgs_sensor_init(KDP_CAM_1);
;;;1562   #endif
;;;1563   
;;;1564   #if IMGSRC_0_TYPE == SENSOR_TYPE_GC1054_R
;;;1565       cam_ctx[KDP_CAM_0].sensor_id = SENSOR_TYPE_GC1054_R;
;;;1566       cam_ctx[KDP_CAM_0].tile_avg_en = (KDP_CAM_0 == MIPI_CAM_NIR)?1:0;
;;;1567       gc1054_r_sensor_init(KDP_CAM_0);
;;;1568   #elif IMGSRC_0_TYPE == SENSOR_TYPE_GC1054_L
;;;1569       cam_ctx[KDP_CAM_0].sensor_id = SENSOR_TYPE_GC1054_L;
;;;1570       cam_ctx[KDP_CAM_0].tile_avg_en = (KDP_CAM_0 == MIPI_CAM_NIR)?1:0;
;;;1571       gc1054_l_sensor_init(KDP_CAM_0);
;;;1572   #endif
;;;1573   
;;;1574   #if IMGSRC_1_TYPE == SENSOR_TYPE_GC1054_R
;;;1575       cam_ctx[KDP_CAM_1].sensor_id = SENSOR_TYPE_GC1054_R;
;;;1576       cam_ctx[KDP_CAM_1].tile_avg_en = (KDP_CAM_1 == MIPI_CAM_NIR)?1:0;
;;;1577       gc1054_r_sensor_init(KDP_CAM_1);
;;;1578   #elif IMGSRC_1_TYPE == SENSOR_TYPE_GC1054_L
;;;1579       cam_ctx[KDP_CAM_1].sensor_id = SENSOR_TYPE_GC1054_L;
;;;1580       cam_ctx[KDP_CAM_1].tile_avg_en = (KDP_CAM_1 == MIPI_CAM_NIR)?1:0;
;;;1581       gc1054_l_sensor_init(KDP_CAM_1);		
;;;1582      // gc1054_sensor_init(KDP_CAM_1);
;;;1583   #endif
;;;1584   
;;;1585   #if IMGSRC_0_TYPE == SENSOR_TYPE_OV9282_R
;;;1586       cam_ctx[KDP_CAM_0].sensor_id = SENSOR_TYPE_OV9282_R;
;;;1587       cam_ctx[KDP_CAM_0].tile_avg_en = (KDP_CAM_0 == MIPI_CAM_NIR)?1:0;
;;;1588       ov9282_r_sensor_init(KDP_CAM_0);
;;;1589   #elif IMGSRC_0_TYPE == SENSOR_TYPE_OV9282_L
;;;1590       cam_ctx[KDP_CAM_0].sensor_id = SENSOR_TYPE_OV9282_L;
;;;1591       cam_ctx[KDP_CAM_0].tile_avg_en = (KDP_CAM_0 == MIPI_CAM_NIR)?1:0;
;;;1592       ov9282_l_sensor_init(KDP_CAM_0);
;;;1593   #endif
;;;1594   
;;;1595   #if IMGSRC_1_TYPE == SENSOR_TYPE_OV9282_R
;;;1596       cam_ctx[KDP_CAM_1].sensor_id = SENSOR_TYPE_OV9282_R;
;;;1597       cam_ctx[KDP_CAM_1].tile_avg_en = (KDP_CAM_1 == MIPI_CAM_NIR)?1:0;
;;;1598       ov9282_r_sensor_init(KDP_CAM_1);
;;;1599   #elif IMGSRC_1_TYPE == SENSOR_TYPE_OV9282_L
;;;1600       cam_ctx[KDP_CAM_1].sensor_id = SENSOR_TYPE_OV9282_L;
;;;1601       cam_ctx[KDP_CAM_1].tile_avg_en = (KDP_CAM_1 == MIPI_CAM_NIR)?1:0;
;;;1602       ov9282_l_sensor_init(KDP_CAM_1);		
;;;1603   #endif
;;;1604   
;;;1605   #if IMGSRC_1_TYPE == SENSOR_TYPE_GC02M1_R
;;;1606       cam_ctx[KDP_CAM_1].sensor_id = SENSOR_TYPE_GC02M1_R;
;;;1607       cam_ctx[KDP_CAM_1].tile_avg_en = (KDP_CAM_1 == MIPI_CAM_NIR)?1:0;
;;;1608       gc02m1_r_sensor_init(KDP_CAM_1);
;;;1609   #elif IMGSRC_1_TYPE == SENSOR_TYPE_GC02M1_L
;;;1610       cam_ctx[KDP_CAM_1].sensor_id = SENSOR_TYPE_GC02M1_L;
;;;1611       cam_ctx[KDP_CAM_1].tile_avg_en = (KDP_CAM_1 == MIPI_CAM_NIR)?1:0;
;;;1612       gc02m1_l_sensor_init(KDP_CAM_1);		
;;;1613      // gc1054_sensor_init(KDP_CAM_1);
;;;1614   #endif
;;;1615   
;;;1616   #if IMGSRC_0_TYPE == SENSOR_TYPE_GC02M1_R
;;;1617       cam_ctx[KDP_CAM_0].sensor_id = SENSOR_TYPE_GC02M1_R;
;;;1618       cam_ctx[KDP_CAM_0].tile_avg_en = (KDP_CAM_0 == MIPI_CAM_NIR)?1:0;
;;;1619       gc02m1_r_sensor_init(KDP_CAM_0);
;;;1620   #elif IMGSRC_0_TYPE == SENSOR_TYPE_GC02M1_L
;;;1621       cam_ctx[KDP_CAM_0].sensor_id = SENSOR_TYPE_GC02M1_L;
;;;1622       cam_ctx[KDP_CAM_0].tile_avg_en = (KDP_CAM_0 == MIPI_CAM_NIR)?1:0;
;;;1623       gc02m1_l_sensor_init(KDP_CAM_0);		
;;;1624      // gc1054_sensor_init(KDP_CAM_1);
;;;1625   #endif
;;;1626   
;;;1627   
;;;1628       return 0;
000086  2000              MOVS     r0,#0
;;;1629   }
000088  e8bd81f0          POP      {r4-r8,pc}
                  |L29.140|
00008c  2001              MOVS     r0,#1                 ;1530
00008e  e7f6              B        |L29.126|
                          ENDP

                  |L29.144|
                          DCD      ||.bss||
                  |L29.148|
                          DCD      camera_isr_0
                  |L29.152|
                          DCD      0xe000ed08
                  |L29.156|
                          DCD      0xc3900000
                  |L29.160|
                          DCD      0xc3500000
                  |L29.164|
                          DCD      0xc3700000
                  |L29.168|
                          DCD      ||.data||+0x10
                  |L29.172|
                          DCD      camera_isr_1
                  |L29.176|
                          DCD      0xc3a00000
                  |L29.180|
                          DCD      0xc3600000
                  |L29.184|
                          DCD      0xc3800000
                  |L29.188|
                          DCD      nir_sensor_index

                          AREA ||i.sys_camera_global_init||, CODE, READONLY, ALIGN=2

                  sys_camera_global_init PROC
;;;1391   
;;;1392   void sys_camera_global_init(void)
000000  4815              LDR      r0,|L30.88|
;;;1393   {
;;;1394       //critical_msg("   <%s>\n", __func__);
;;;1395   
;;;1396       SCU_EXTREG_CLK_EN1_SET_csirx0_TxEscClk(1);
000002  f8501f18          LDR      r1,[r0,#0x18]!
000006  f0410140          ORR      r1,r1,#0x40
00000a  6001              STR      r1,[r0,#0]
;;;1397       SCU_EXTREG_CLK_EN1_SET_csirx0_vc0(1);
00000c  6801              LDR      r1,[r0,#0]
00000e  f0410110          ORR      r1,r1,#0x10
000012  6001              STR      r1,[r0,#0]
;;;1398       SCU_EXTREG_CLK_EN1_SET_csirx0_csi(1);
000014  6801              LDR      r1,[r0,#0]
000016  f0410120          ORR      r1,r1,#0x20
00001a  6001              STR      r1,[r0,#0]
;;;1399   
;;;1400       SCU_EXTREG_CLK_EN1_SET_csirx1_TxEscClk(1);
00001c  6801              LDR      r1,[r0,#0]
00001e  f4416180          ORR      r1,r1,#0x400
000022  6001              STR      r1,[r0,#0]
;;;1401       SCU_EXTREG_CLK_EN1_SET_csirx1_vc0(1);
000024  6801              LDR      r1,[r0,#0]
000026  f4417180          ORR      r1,r1,#0x100
00002a  6001              STR      r1,[r0,#0]
;;;1402       SCU_EXTREG_CLK_EN1_SET_csirx1_csi(1);
00002c  6801              LDR      r1,[r0,#0]
00002e  f4417100          ORR      r1,r1,#0x200
000032  f8401b78          STR      r1,[r0],#0x78
;;;1403   
;;;1404       masked_outw( SCU_EXTREG_CSIRX_CTRL0,
000036  6802              LDR      r2,[r0,#0]
000038  4908              LDR      r1,|L30.92|
00003a  430a              ORRS     r2,r2,r1
00003c  c004              STM      r0!,{r2}
;;;1405                  ((SCU_EXTREG_CSIRX_CTRL0_ClkLnEn | SCU_EXTREG_CSIRX_CTRL0_Enable) |
;;;1406                   (SCU_EXTREG_CSIRX_CTRL0_apb_rst_n | SCU_EXTREG_CSIRX_CTRL0_pwr_rst_n |
;;;1407                    SCU_EXTREG_CSIRX_CTRL0_sys_rst_n)),
;;;1408                  ((SCU_EXTREG_CSIRX_CTRL0_ClkLnEn | SCU_EXTREG_CSIRX_CTRL0_Enable) |
;;;1409                   (SCU_EXTREG_CSIRX_CTRL0_apb_rst_n | SCU_EXTREG_CSIRX_CTRL0_pwr_rst_n |
;;;1410                    SCU_EXTREG_CSIRX_CTRL0_sys_rst_n)));
;;;1411   
;;;1412       masked_outw( SCU_EXTREG_CSIRX_CTRL1,
00003e  6802              LDR      r2,[r0,#0]
000040  430a              ORRS     r2,r2,r1
000042  f8402b08          STR      r2,[r0],#8
;;;1413                  ((SCU_EXTREG_CSIRX_CTRL1_ClkLnEn | SCU_EXTREG_CSIRX_CTRL1_Enable) |
;;;1414                   (SCU_EXTREG_CSIRX_CTRL1_apb_rst_n | SCU_EXTREG_CSIRX_CTRL1_pwr_rst_n |
;;;1415                    SCU_EXTREG_CSIRX_CTRL1_sys_rst_n)),
;;;1416                  ((SCU_EXTREG_CSIRX_CTRL1_ClkLnEn | SCU_EXTREG_CSIRX_CTRL1_Enable) |
;;;1417                   (SCU_EXTREG_CSIRX_CTRL1_apb_rst_n | SCU_EXTREG_CSIRX_CTRL1_pwr_rst_n |
;;;1418                    SCU_EXTREG_CSIRX_CTRL1_sys_rst_n)));
;;;1419   
;;;1420       masked_outw( SCU_EXTREG_DPI2AHB_CTRL,
000046  6801              LDR      r1,[r0,#0]
000048  f041010d          ORR      r1,r1,#0xd
00004c  6001              STR      r1,[r0,#0]
;;;1421                  (SCU_EXTREG_DPI2AHB_CTRL_rst_n | SCU_EXTREG_DPI2AHB_CTRL_apb_rst_n |
;;;1422                   SCU_EXTREG_DPI2AHB_CTRL_apb_rst_n | SCU_EXTREG_DPI2AHB_CTRL_pwr_rst_n),
;;;1423                  (SCU_EXTREG_DPI2AHB_CTRL_rst_n | SCU_EXTREG_DPI2AHB_CTRL_apb_rst_n |
;;;1424                   SCU_EXTREG_DPI2AHB_CTRL_apb_rst_n | SCU_EXTREG_DPI2AHB_CTRL_pwr_rst_n));
;;;1425   
;;;1426       masked_outw( SCU_EXTREG_DPI2AHB_CTRL,
00004e  6801              LDR      r1,[r0,#0]
000050  f04101f0          ORR      r1,r1,#0xf0
000054  6001              STR      r1,[r0,#0]
;;;1427                  (SCU_EXTREG_DPI2AHB_CTRL_rst_n_1 | SCU_EXTREG_DPI2AHB_CTRL_apb_rst_n_1 |
;;;1428                   SCU_EXTREG_DPI2AHB_CTRL_sys_rst_n_1 | SCU_EXTREG_DPI2AHB_CTRL_pwr_rst_n_1),
;;;1429                  (SCU_EXTREG_DPI2AHB_CTRL_rst_n_1 | SCU_EXTREG_DPI2AHB_CTRL_apb_rst_n_1 |
;;;1430                   SCU_EXTREG_DPI2AHB_CTRL_sys_rst_n_1 | SCU_EXTREG_DPI2AHB_CTRL_pwr_rst_n_1));
;;;1431   }
000056  4770              BX       lr
;;;1432   
                          ENDP

                  |L30.88|
                          DCD      0xc2380000
                  |L30.92|
                          DCD      0x13000003

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  cam_ctx
                          %        232

                          AREA ||.data||, DATA, ALIGN=2

                  buf0_idx
                          DCD      0xffffffff
                          DCD      0xffffffff
                  buf1_idx
                          DCD      0xffffffff
                          DCD      0xffffffff
                  kdp520_camera_ops
                          DCD      kdp520_cam_open
                          DCD      kdp520_cam_close
                          DCD      kdp520_cam_set_format
                          DCD      kdp520_cam_get_format
                          DCD      kdp520_cam_buffer_init
                          DCD      kdp520_cam_start_capture
                          DCD      kdp520_cam_stop_capture
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      kdp520_cam_query_capability
                          DCD      kdp520_cam_set_gain
                          DCD      kdp520_cam_set_exp_time
                          DCD      kdp520_cam_get_lux
                          DCD      kdp520_cam_set_aec_roi
                          DCD      kdp520_cam_set_mirror
                          DCD      kdp520_cam_set_flip
                          DCD      kdp520_cam_set_led
                          DCD      kdp520_get_device_id
                          DCD      kdp520_cam_set_fps
                          DCD      kdp520_set_aec_en
                          DCD      kdp520_cam_sleep
                          DCD      kdp520_get_tile_en

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\scpu\\drivers\\media\\platform\\kdp_camera_kl520.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___18_kdp_camera_kl520_c_18e5c69d____REV16|
#line 208 "F:\\Users\\fu\\AppData\\Local\\Arm\\Packs\\ARM\\CMSIS\\5.9.0\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___18_kdp_camera_kl520_c_18e5c69d____REV16| PROC
#line 209

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___18_kdp_camera_kl520_c_18e5c69d____REVSH|
#line 223
|__asm___18_kdp_camera_kl520_c_18e5c69d____REVSH| PROC
#line 224

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___18_kdp_camera_kl520_c_18e5c69d____RRX|
#line 410
|__asm___18_kdp_camera_kl520_c_18e5c69d____RRX| PROC
#line 411

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
