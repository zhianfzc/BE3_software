; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\objects\kdp_comm_app.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\kdp_comm_app.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O3 --diag_suppress=9931 -I..\..\config -I..\..\..\..\board -I..\..\..\..\common\include -I..\..\..\..\scpu\device\include\CMSIS -I..\..\..\..\scpu\device\include\Kneron -I..\..\..\..\scpu\framework\include -I..\..\..\..\scpu\framework\include\framework -I..\..\..\..\scpu\drivers\include -I..\..\..\..\scpu\drivers\include\media\touch -I..\..\..\..\scpu\drivers\include\media\flash -I..\..\..\..\scpu\lib\kdp_system\inc -I..\..\..\..\scpu\lib\kdp_application\include\ -I..\..\..\..\scpu\lib\kdp_application\base\ -I..\..\..\..\scpu\lib\kdp_application\misc -I..\..\..\..\scpu\lib\kdp_e2e_r1n1\include -I..\..\..\..\scpu\include -I..\..\..\..\scpu\middleware\ota -I..\..\..\..\scpu\middleware\comm -I..\..\..\..\scpu\middleware\kdp_comm -I..\..\..\..\scpu\share -I..\..\..\..\scpu\share\gui_lib -I..\..\user -I.\RTE\CMSIS -I.\RTE\_Target-scpu -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\RTOS2\Include -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\RTOS2\RTX\Include -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\Device\ARM\ARMCM4\Include -D__RTX -D__MICROLIB -D__UVISION_VERSION=538 -D_RTE_ -DARMCM4_FP -D_RTE_ -DARM_MATH_CM4 -DTARGET_SCPU -DLOG_ENABLE -DKL520 -DHEAD_POSE_CHECK_PERCENT --omf_browse=.\objects\kdp_comm_app.crf ..\..\..\..\scpu\middleware\kdp_comm\kdp_comm_app.c]
                          THUMB

                          AREA ||i.DSM_Uart_ConfigBaudrate||, CODE, READONLY, ALIGN=2

                  DSM_Uart_ConfigBaudrate PROC
;;;1313   
;;;1314   extern uint8_t DSM_Uart_ConfigBaudrate(uint8_t baudrate_index)//lmm-add
000000  b570              PUSH     {r4-r6,lr}
;;;1315   {
;;;1316       uint8_t ret = 0;
000002  2500              MOVS     r5,#0
;;;1317       uint8_t kl520_idx = 0;
000004  462c              MOV      r4,r5
;;;1318   //    if(rate == 0)     {baudrate = BAUD_115200;}
;;;1319   //    else if(rate == 1){baudrate = BAUD_921600;}
;;;1320   //    else if(rate == 2){baudrate = BAUD_460800;}
;;;1321   //    else if(rate == 3){baudrate = BAUD_230400;}
;;;1322   //    else if(rate == 4){baudrate = BAUD_1500000;}
;;;1323   
;;;1324    //wait KL to add specific fun.
;;;1325    //1:115200
;;;1326    //2:230400
;;;1327    //3:460800
;;;1328    //4:1500000
;;;1329       if(baudrate_index == 1) {       kl520_idx = 0; ret = MR_SUCCESS;   dbg_msg_console("BAUD_115200"); }//115200
000006  2801              CMP      r0,#1
000008  d011              BEQ      |L1.46|
;;;1330       else if(baudrate_index == 2){   kl520_idx = 3; ret = MR_SUCCESS;   dbg_msg_console("BAUD_234000"); }//234000
00000a  2802              CMP      r0,#2
00000c  d011              BEQ      |L1.50|
;;;1331       else if(baudrate_index == 3){   kl520_idx = 2; ret = MR_SUCCESS;   dbg_msg_console("BAUD_460800"); }//460800
00000e  2803              CMP      r0,#3
000010  d012              BEQ      |L1.56|
;;;1332       else if(baudrate_index == 4){   kl520_idx = 4; ret = MR_REJECTED;   dbg_msg_console("BAUD_1500000"); }//1500000
000012  2804              CMP      r0,#4
000014  d013              BEQ      |L1.62|
;;;1333       else if(baudrate_index == 5){   kl520_idx = 1; ret = MR_SUCCESS;   dbg_msg_console("BAUD_921600"); }//921600
000016  2805              CMP      r0,#5
000018  d014              BEQ      |L1.68|
;;;1334       else{                                          ret = MR_REJECTED;  dbg_msg_console("Not supported BAUD"); }
00001a  2501              MOVS     r5,#1
00001c  a111              ADR      r1,|L1.100|
                  |L1.30|
00001e  2001              MOVS     r0,#1
000020  f7fffffe          BL       kdp_level_printf
;;;1335   
;;;1336   
;;;1337       if(ret == MR_SUCCESS){
;;;1338           send_ConfigBaurate_reply_msg(MR_SUCCESS);
;;;1339           osDelay(50);//delay 50ms
;;;1340           kl520_com_reconfig_baud_rate(kl520_idx);
;;;1341           dbg_msg_engineering("baudrate index:%d Pass",baudrate_index);
;;;1342       }
;;;1343       else{
;;;1344           send_ConfigBaurate_reply_msg(MR_REJECTED);
000024  2001              MOVS     r0,#1
000026  f7fffffe          BL       send_ConfigBaurate_reply_msg
                  |L1.42|
;;;1345       }
;;;1346   
;;;1347       return ret;
00002a  4628              MOV      r0,r5
;;;1348   }
00002c  bd70              POP      {r4-r6,pc}
                  |L1.46|
00002e  a113              ADR      r1,|L1.124|
000030  e00a              B        |L1.72|
                  |L1.50|
000032  2403              MOVS     r4,#3                 ;1330
000034  a115              ADR      r1,|L1.140|
000036  e007              B        |L1.72|
                  |L1.56|
000038  2402              MOVS     r4,#2                 ;1331
00003a  a118              ADR      r1,|L1.156|
00003c  e004              B        |L1.72|
                  |L1.62|
00003e  2501              MOVS     r5,#1                 ;1332
000040  a11a              ADR      r1,|L1.172|
000042  e7ec              B        |L1.30|
                  |L1.68|
000044  2401              MOVS     r4,#1                 ;1333
000046  a11d              ADR      r1,|L1.188|
                  |L1.72|
000048  2001              MOVS     r0,#1                 ;1333
00004a  f7fffffe          BL       kdp_level_printf
00004e  2000              MOVS     r0,#0                 ;1338
000050  f7fffffe          BL       send_ConfigBaurate_reply_msg
000054  2032              MOVS     r0,#0x32              ;1339
000056  f7fffffe          BL       osDelay
00005a  4620              MOV      r0,r4                 ;1340
00005c  f7fffffe          BL       kl520_com_reconfig_baud_rate
000060  e7e3              B        |L1.42|
;;;1349   
                          ENDP

000062  0000              DCW      0x0000
                  |L1.100|
000064  4e6f7420          DCB      "Not supported BAUD\r\n",0
000068  73757070
00006c  6f727465
000070  64204241
000074  55440d0a
000078  00      
000079  00                DCB      0
00007a  00                DCB      0
00007b  00                DCB      0
                  |L1.124|
00007c  42415544          DCB      "BAUD_115200\r\n",0
000080  5f313135
000084  3230300d
000088  0a00    
00008a  00                DCB      0
00008b  00                DCB      0
                  |L1.140|
00008c  42415544          DCB      "BAUD_234000\r\n",0
000090  5f323334
000094  3030300d
000098  0a00    
00009a  00                DCB      0
00009b  00                DCB      0
                  |L1.156|
00009c  42415544          DCB      "BAUD_460800\r\n",0
0000a0  5f343630
0000a4  3830300d
0000a8  0a00    
0000aa  00                DCB      0
0000ab  00                DCB      0
                  |L1.172|
0000ac  42415544          DCB      "BAUD_1500000\r\n",0
0000b0  5f313530
0000b4  30303030
0000b8  0d0a00  
0000bb  00                DCB      0
                  |L1.188|
0000bc  42415544          DCB      "BAUD_921600\r\n",0
0000c0  5f393231
0000c4  3630300d
0000c8  0a00    
0000ca  00                DCB      0
0000cb  00                DCB      0

                          AREA ||i.DSM_Uart_FaceReset||, CODE, READONLY, ALIGN=2

                  DSM_Uart_FaceReset PROC
;;;529    
;;;530    extern uint8_t DSM_Uart_FaceReset(void)//lmm-add
000000  4902              LDR      r1,|L2.12|
;;;531    {
;;;532        uint8_t ret = 0;
;;;533    
;;;534        g_eFaceDirState = 0;
000002  2000              MOVS     r0,#0
000004  7008              STRB     r0,[r1,#0]
;;;535        g_nFaceId = 0;
000006  8188              STRH     r0,[r1,#0xc]
;;;536    
;;;537        //wait KL to add specific fun.
;;;538    //    if(kl520_api_fdfr_exist_thread() == 1){
;;;539    //        dbg_msg_console("DSM_Uart_FaceReset kl520_api_fdfr_exist_thread");
;;;540    //        kl520_api_fdfr_terminate_thread();
;;;541    //        kl520_api_dp_five_face_disable();
;;;542    //    }
;;;543    //    kdp_e2e_db_abort_reg();
;;;544        return ret;
;;;545    }
000008  4770              BX       lr
;;;546    
                          ENDP

00000a  0000              DCW      0x0000
                  |L2.12|
                          DCD      ||.data||

                          AREA ||i.DSM_Uart_GetAllUserInfo||, CODE, READONLY, ALIGN=1

                  DSM_Uart_GetAllUserInfo PROC
;;;586    
;;;587    extern uint8_t DSM_Uart_GetAllUserInfo(msg_get_all_user_id_data* allUserInfo) //lmm-add
000000  b5f0              PUSH     {r4-r7,lr}
;;;588    {
000002  4605              MOV      r5,r0
;;;589        uint8_t ret = 0;
000004  2600              MOVS     r6,#0
000006  b09b              SUB      sp,sp,#0x6c           ;588
;;;590        int i = 0;
000008  4634              MOV      r4,r6
;;;591        u8 total_id_num;
;;;592        u8 face_status[MAX_USER];
;;;593    
;;;594        //u8 BigToSmallEnd = 1; //0:no change  1:BigToSmallEndien
;;;595        memset(&allUserInfo->users_id[0], 0, MAX_USER_COUNTS*2);
00000a  21c8              MOVS     r1,#0xc8
00000c  1c40              ADDS     r0,r0,#1
00000e  f7fffffe          BL       __aeabi_memclr
;;;596        kl520_api_face_query_all(&total_id_num, &face_status[0]);
000012  4669              MOV      r1,sp
000014  a819              ADD      r0,sp,#0x64
000016  f7fffffe          BL       kl520_api_face_query_all
;;;597        if (total_id_num > MAX_USER_COUNTS)
00001a  f89d0064          LDRB     r0,[sp,#0x64]
00001e  2864              CMP      r0,#0x64
000020  d902              BLS      |L3.40|
;;;598            total_id_num = MAX_USER_COUNTS;
000022  2064              MOVS     r0,#0x64
000024  f88d0064          STRB     r0,[sp,#0x64]
                  |L3.40|
000028  466f              MOV      r7,sp                 ;592
;;;599    
;;;600        for (i = 0; i < total_id_num; i++)
00002a  e00b              B        |L3.68|
                  |L3.44|
;;;601        {
;;;602            //allUserInfo->users_id[i*2+BigToSmallEnd] = face_status[i];
;;;603            u16 id = ShortType_BigToSmallEnd(face_status[i]);
00002c  5d38              LDRB     r0,[r7,r4]
00002e  f7fffffe          BL       ShortType_BigToSmallEnd
000032  f8ad0068          STRH     r0,[sp,#0x68]
;;;604            memcpy(&allUserInfo->users_id[i*2], &id, sizeof(id));
000036  eb050044          ADD      r0,r5,r4,LSL #1
00003a  f8bd1068          LDRH     r1,[sp,#0x68]
00003e  f8a01001          STRH     r1,[r0,#1]
000042  1c64              ADDS     r4,r4,#1
                  |L3.68|
000044  f89d0064          LDRB     r0,[sp,#0x64]         ;600
000048  4284              CMP      r4,r0                 ;600
00004a  dbef              BLT      |L3.44|
;;;605            //allUserInfo->users_id[0+i*2] = ((id >>0)&0xFF);
;;;606            //allUserInfo->users_id[1+i*2] = ((id >>8)&0xFF);
;;;607            dbg_msg_engineering("User ID: 0x%04x", face_status[i]);
;;;608        }
;;;609        dbg_msg_engineering("Num Face DB:%d", total_id_num);
;;;610        allUserInfo->user_counts = total_id_num;
00004c  7028              STRB     r0,[r5,#0]
;;;611    
;;;612        return ret;
;;;613    }
00004e  b01b              ADD      sp,sp,#0x6c
000050  4630              MOV      r0,r6                 ;612
000052  bdf0              POP      {r4-r7,pc}
;;;614    
                          ENDP


                          AREA ||i.DSM_Uart_GetOtaStatus||, CODE, READONLY, ALIGN=2

                  DSM_Uart_GetOtaStatus PROC
;;;1651   
;;;1652   extern uint8_t DSM_Uart_GetOtaStatus(uint8_t* ota_status, uint8_t next_pid_e[2])
000000  b570              PUSH     {r4-r6,lr}
;;;1653   {
;;;1654       //uint8_t ret = 0;
;;;1655       //wait KL to add specific fun.
;;;1656   
;;;1657       if( ota_update_info.ota_process == OTA_START_PROCESS_FLAG )
000002  4c0d              LDR      r4,|L4.56|
000004  4605              MOV      r5,r0                 ;1653
000006  f8940060          LDRB     r0,[r4,#0x60]  ; ota_update_info
00000a  2804              CMP      r0,#4
00000c  d00d              BEQ      |L4.42|
;;;1658       {
;;;1659           next_pid_e[0] = ( (ota_update_info.packet_id & 0xFF00) >> 8) ;
;;;1660           next_pid_e[1] = ( (ota_update_info.packet_id & 0x00FF) >> 0) ;
;;;1661       }
;;;1662       else
;;;1663       {
;;;1664           next_pid_e[0] = next_pid_e[1] = 0;
00000e  2000              MOVS     r0,#0
000010  7048              STRB     r0,[r1,#1]
000012  7008              STRB     r0,[r1,#0]
                  |L4.20|
;;;1665       }
;;;1666       dbg_msg_console("[%s] packet_id: %d", __func__, ota_update_info.packet_id );
000014  8f63              LDRH     r3,[r4,#0x3a]  ; ota_update_info
000016  4a09              LDR      r2,|L4.60|
000018  a109              ADR      r1,|L4.64|
00001a  2001              MOVS     r0,#1
00001c  f7fffffe          BL       kdp_level_printf
;;;1667   
;;;1668       *ota_status = ota_update_info.ota_process;
000020  f8940060          LDRB     r0,[r4,#0x60]  ; ota_update_info
000024  7028              STRB     r0,[r5,#0]
;;;1669   
;;;1670       return MR_SUCCESS;
000026  2000              MOVS     r0,#0
;;;1671   }
000028  bd70              POP      {r4-r6,pc}
                  |L4.42|
00002a  8f60              LDRH     r0,[r4,#0x3a]         ;1659  ; ota_update_info
00002c  0a00              LSRS     r0,r0,#8              ;1659
00002e  7008              STRB     r0,[r1,#0]            ;1659
000030  f894003a          LDRB     r0,[r4,#0x3a]         ;1660  ; ota_update_info
000034  7048              STRB     r0,[r1,#1]            ;1660
000036  e7ed              B        |L4.20|
;;;1672   
                          ENDP

                  |L4.56|
                          DCD      ||.bss||
                  |L4.60|
                          DCD      ||.constdata||+0x38
                  |L4.64|
000040  5b25735d          DCB      "[%s] packet_id: %d\r\n",0
000044  20706163
000048  6b65745f
00004c  69643a20
000050  25640d0a
000054  00      
000055  00                DCB      0
000056  00                DCB      0
000057  00                DCB      0

                          AREA ||i.DSM_Uart_GetState||, CODE, READONLY, ALIGN=1

                  DSM_Uart_GetState PROC
;;;505    
;;;506    extern uint8_t DSM_Uart_GetState(uint8_t fdfr_state)
000000  2800              CMP      r0,#0
;;;507    {
000002  d004              BEQ      |L5.14|
;;;508        uint8_t ret;
;;;509    
;;;510        if (fdfr_state == USER_COM_THREAD_EVENT_READY)
;;;511        {
;;;512            ret=SYS_IDLE;
;;;513        }
;;;514        else if (fdfr_state >= USER_COM_THREAD_EVENT_ENROLL)
000004  2880              CMP      r0,#0x80
000006  d203              BCS      |L5.16|
;;;515        {
;;;516            ret=SYS_BUSY;
;;;517        }
;;;518        else if (fdfr_state == USER_COM_THREAD_EVENT_NON_OVERWRITABLE)
000008  2802              CMP      r0,#2
00000a  d001              BEQ      |L5.16|
;;;519        {
;;;520            ret=SYS_BUSY;
;;;521        }
;;;522        else
;;;523        {
;;;524            ret=SYS_INVALID;
00000c  2003              MOVS     r0,#3
                  |L5.14|
;;;525        }
;;;526    
;;;527        return ret;
;;;528    }
00000e  4770              BX       lr
                  |L5.16|
000010  2001              MOVS     r0,#1                 ;516
000012  4770              BX       lr
;;;529    
                          ENDP


                          AREA ||i.DSM_Uart_GetUserInfo||, CODE, READONLY, ALIGN=1

                  DSM_Uart_GetUserInfo PROC
;;;546    
;;;547    extern uint8_t DSM_Uart_GetUserInfo(uint16_t userID,msg_get_user_info_data* userinfo) //lmm-add
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;548    {
000004  b096              SUB      sp,sp,#0x58
000006  460d              MOV      r5,r1
000008  4680              MOV      r8,r0
;;;549        if (!kdp_app_db_check_user_id(userID))
00000a  f7fffffe          BL       kdp_app_db_check_user_id
00000e  b300              CBZ      r0,|L6.82|
;;;550            return MR_FAILED_INVALID_PARAM;
;;;551    
;;;552        uint8_t ret = MR_FAILED_UNKNOWN_USER;
000010  2708              MOVS     r7,#8
;;;553        //wait KL to add specific fun.
;;;554        int i = 0;
000012  2400              MOVS     r4,#0
;;;555    //    u8 total_id_num;
;;;556    //    u8 exist_cnt = 0;
;;;557    
;;;558        kdp_e2e_db_extra_data tmp;
;;;559        kdp_e2e_db_extra_data *pvars = &tmp;
000014  466e              MOV      r6,sp
;;;560        kdp_e2e_face_variables *vars = kdp_e2e_get_face_variables();
000016  f7fffffe          BL       kdp_e2e_get_face_variables
;;;561        u16 valid_fm0 = 0, valid_fm1 = 0, type = 0;
00001a  2000              MOVS     r0,#0
00001c  f8ad004c          STRH     r0,[sp,#0x4c]
000020  f8ad0054          STRH     r0,[sp,#0x54]
000024  f8ad0050          STRH     r0,[sp,#0x50]
;;;562    
;;;563        memset(userinfo, 0, sizeof(msg_get_user_info_data));
000028  2123              MOVS     r1,#0x23
00002a  4628              MOV      r0,r5
00002c  f7fffffe          BL       __aeabi_memclr
                  |L6.48|
;;;564    
;;;565        for ( i = 0; i < MAX_USER; i++ )
;;;566        {
;;;567            memset(&tmp, 0, sizeof(tmp));
000030  214c              MOVS     r1,#0x4c
000032  4668              MOV      r0,sp
000034  f7fffffe          BL       __aeabi_memclr4
;;;568            kdp_e2e_db_extra_read(i, &tmp, sizeof(tmp));
000038  b2e0              UXTB     r0,r4
00003a  224c              MOVS     r2,#0x4c
00003c  4669              MOV      r1,sp
00003e  f7fffffe          BL       kdp_e2e_db_extra_read
;;;569            s32 r1 = kdp_e2e_db_get_user_info_by_idx(i, &valid_fm0, &valid_fm1, &type);
000042  b2a0              UXTH     r0,r4
000044  ab14              ADD      r3,sp,#0x50
000046  aa15              ADD      r2,sp,#0x54
000048  a913              ADD      r1,sp,#0x4c
00004a  f7fffffe          BL       kdp_e2e_db_get_user_info_by_idx
;;;570            if(r1 != E2E_OK) continue;
00004e  bb20              CBNZ     r0,|L6.154|
000050  e003              B        |L6.90|
                  |L6.82|
000052  2006              MOVS     r0,#6                 ;550
                  |L6.84|
;;;571    
;;;572            if ( 0 < valid_fm0 && TYPE_VALID == type && kdp_app_db_get_user_id(i) == userID )
;;;573            {
;;;574                userinfo->admin = pvars->admin;
;;;575                memcpy( userinfo->user_name, pvars->user_name, USER_NAME_SIZE );
;;;576                userinfo->user_id_heb=((kdp_app_db_get_user_id(i) >> 8) &0xFF);
;;;577                userinfo->user_id_leb=((kdp_app_db_get_user_id(i) >> 0) &0xFF);
;;;578                ret = MR_SUCCESS;
;;;579                dbg_msg_engineering("DSM_Uart_GetUserInfo, face_id=0x%x, Admin=%d, UseName=%s", pvars->user_id , pvars->admin, pvars->user_name);
;;;580                break;
;;;581            }
;;;582        }
;;;583    
;;;584        return ret;
;;;585    }
000054  b016              ADD      sp,sp,#0x58
000056  e8bd81f0          POP      {r4-r8,pc}
                  |L6.90|
00005a  f8bd004c          LDRH     r0,[sp,#0x4c]         ;572
00005e  b1e0              CBZ      r0,|L6.154|
000060  f8bd0050          LDRH     r0,[sp,#0x50]         ;572
000064  2801              CMP      r0,#1                 ;572
000066  d118              BNE      |L6.154|
000068  4620              MOV      r0,r4                 ;572
00006a  f7fffffe          BL       kdp_app_db_get_user_id
00006e  4540              CMP      r0,r8                 ;572
000070  d113              BNE      |L6.154|
000072  f8960021          LDRB     r0,[r6,#0x21]         ;574
000076  f8850022          STRB     r0,[r5,#0x22]         ;574
00007a  2220              MOVS     r2,#0x20              ;575
00007c  4631              MOV      r1,r6                 ;575
00007e  1ca8              ADDS     r0,r5,#2              ;575
000080  f7fffffe          BL       __aeabi_memcpy
000084  4620              MOV      r0,r4                 ;576
000086  f7fffffe          BL       kdp_app_db_get_user_id
00008a  0a00              LSRS     r0,r0,#8              ;576
00008c  7028              STRB     r0,[r5,#0]            ;576
00008e  4620              MOV      r0,r4                 ;577
000090  f7fffffe          BL       kdp_app_db_get_user_id
000094  7068              STRB     r0,[r5,#1]            ;577
000096  2700              MOVS     r7,#0                 ;578
000098  e002              B        |L6.160|
                  |L6.154|
00009a  1c64              ADDS     r4,r4,#1              ;580
00009c  2c64              CMP      r4,#0x64              ;565
00009e  dbc7              BLT      |L6.48|
                  |L6.160|
0000a0  4638              MOV      r0,r7                 ;584
0000a2  e7d7              B        |L6.84|
;;;586    
                          ENDP


                          AREA ||i.DSM_Uart_Get_Cur_Part||, CODE, READONLY, ALIGN=2

                  DSM_Uart_Get_Cur_Part PROC
;;;1415   
;;;1416   uint8_t DSM_Uart_Get_Cur_Part(uint8_t* nCurPart)
000000  b570              PUSH     {r4-r6,lr}
;;;1417   {
000002  4605              MOV      r5,r0
;;;1418       uint8_t ret = MR_SUCCESS;
000004  2400              MOVS     r4,#0
;;;1419   
;;;1420       *nCurPart = (u8)ota_get_scpu_flag_status();
000006  f7fffffe          BL       ota_get_scpu_flag_status
00000a  b2c2              UXTB     r2,r0
00000c  702a              STRB     r2,[r5,#0]
;;;1421   
;;;1422       if( *nCurPart > 1 )
00000e  2a01              CMP      r2,#1
000010  d901              BLS      |L7.22|
;;;1423       {
;;;1424           ret = MR_REJECTED;
000012  2401              MOVS     r4,#1
000014  e003              B        |L7.30|
                  |L7.22|
;;;1425       }
;;;1426       else
;;;1427       {
;;;1428           dbg_msg_console("Current SCPU in %d part.", *nCurPart);
000016  a103              ADR      r1,|L7.36|
000018  2001              MOVS     r0,#1
00001a  f7fffffe          BL       kdp_level_printf
                  |L7.30|
;;;1429       }
;;;1430       return ret;
00001e  4620              MOV      r0,r4
;;;1431   }
000020  bd70              POP      {r4-r6,pc}
;;;1432   
                          ENDP

000022  0000              DCW      0x0000
                  |L7.36|
000024  43757272          DCB      "Current SCPU in %d part.\r\n",0
000028  656e7420
00002c  53435055
000030  20696e20
000034  25642070
000038  6172742e
00003c  0d0a00  
00003f  00                DCB      0

                          AREA ||i.DSM_Uart_Get_Kn_DeviceInfo||, CODE, READONLY, ALIGN=2

                  DSM_Uart_Get_Kn_DeviceInfo PROC
;;;234    #endif
;;;235    uint8_t DSM_Uart_Get_Kn_DeviceInfo(kn_device_info_data* device_info)
000000  b5fe              PUSH     {r1-r7,lr}
;;;236    {
000002  4604              MOV      r4,r0
;;;237        uint8_t ret = 0;
000004  2700              MOVS     r7,#0
;;;238        
;;;239        memset(device_info, 0, sizeof(kn_device_info_data));
000006  2194              MOVS     r1,#0x94
000008  f7fffffe          BL       __aeabi_memclr
;;;240    
;;;241        struct fw_misc_data ver_info;
;;;242        //TODO : get fw version and kl520 id.
;;;243        device_info->sn = kl520_api_get_unique_id();
00000c  f7fffffe          BL       kl520_api_get_unique_id
000010  6020              STR      r0,[r4,#0]
;;;244        device_info->boot_version = kdp_sys_get_spl_version();
000012  f7fffffe          BL       kdp_sys_get_spl_version
000016  6060              STR      r0,[r4,#4]
;;;245    
;;;246        dbg_msg_console("SN: 0x%X", device_info->sn);
000018  6822              LDR      r2,[r4,#0]
00001a  a12b              ADR      r1,|L8.200|
00001c  2001              MOVS     r0,#1
00001e  f7fffffe          BL       kdp_level_printf
;;;247        dbg_msg_console("boot_version: %X", device_info->boot_version);
000022  6862              LDR      r2,[r4,#4]
000024  a12b              ADR      r1,|L8.212|
000026  2001              MOVS     r0,#1
000028  f7fffffe          BL       kdp_level_printf
;;;248    
;;;249        kl520_api_get_scpu_version(&ver_info);
00002c  a801              ADD      r0,sp,#4
00002e  f7fffffe          BL       kl520_api_get_scpu_version
;;;250        memcpy(device_info->cpu_version, ver_info.version, sizeof(device_info->cpu_version));
000032  9801              LDR      r0,[sp,#4]
000034  60a0              STR      r0,[r4,#8]
;;;251    
;;;252        kl520_api_get_ncpu_version(&ver_info);
000036  a801              ADD      r0,sp,#4
000038  f7fffffe          BL       kl520_api_get_ncpu_version
;;;253        memcpy(device_info->npu_version, ver_info.version, sizeof(device_info->npu_version));
00003c  9801              LDR      r0,[sp,#4]
00003e  60e0              STR      r0,[r4,#0xc]
;;;254    
;;;255        {
;;;256            struct kdp_model_s model_info_s;
;;;257            struct kdp_model_s *p_model_info_s = &model_info_s;
;;;258            kdp_model_load_model(-1);
000040  1e78              SUBS     r0,r7,#1
000042  f7fffffe          BL       kdp_model_load_model
;;;259            uint8_t model_count = kdp_model_get_model_count();
000046  f7fffffe          BL       kdp_model_get_model_count
00004a  b2c6              UXTB     r6,r0
;;;260            dbg_msg_console("model_count:%d",model_count);
00004c  4632              MOV      r2,r6
00004e  a126              ADR      r1,|L8.232|
000050  2001              MOVS     r0,#1
000052  f7fffffe          BL       kdp_level_printf
;;;261            
;;;262            if ((sizeof(device_info->models)/sizeof(model_info)) < model_count)
000056  2e0f              CMP      r6,#0xf
000058  d905              BLS      |L8.102|
;;;263            {
;;;264                dbg_msg_console("[Err]device_info->models size %d(%d) is not enough", sizeof(device_info->models)/sizeof(model_info), model_count);
00005a  4633              MOV      r3,r6
00005c  220f              MOVS     r2,#0xf
00005e  a127              ADR      r1,|L8.252|
000060  2001              MOVS     r0,#1
000062  f7fffffe          BL       kdp_level_printf
                  |L8.102|
;;;265            }
;;;266    
;;;267            for (int i = 0; i < model_count; ++i)
000066  2500              MOVS     r5,#0
000068  e00f              B        |L8.138|
                  |L8.106|
;;;268            {
;;;269                p_model_info_s = (struct kdp_model_s*)kdp_model_get_model_info(i);
00006a  4628              MOV      r0,r5
00006c  f7fffffe          BL       kdp_model_get_model_info
;;;270                device_info->models[i].model_type = p_model_info_s->model_type;
000070  eb0401c5          ADD      r1,r4,r5,LSL #3
000074  6803              LDR      r3,[r0,#0]
000076  61cb              STR      r3,[r1,#0x1c]
;;;271                device_info->models[i].model_version = p_model_info_s->model_version;
000078  6840              LDR      r0,[r0,#4]
00007a  6208              STR      r0,[r1,#0x20]
;;;272                dbg_msg_console("(%d). model %d version: 0x%x", i, device_info->models[i].model_type, device_info->models[i].model_version);
00007c  9000              STR      r0,[sp,#0]
00007e  462a              MOV      r2,r5
000080  a12c              ADR      r1,|L8.308|
000082  2001              MOVS     r0,#1
000084  f7fffffe          BL       kdp_level_printf
000088  1c6d              ADDS     r5,r5,#1
                  |L8.138|
00008a  42b5              CMP      r5,r6                 ;267
00008c  dbed              BLT      |L8.106|
;;;273            }
;;;274        }
;;;275    
;;;276        device_info->sensor_id_0 = kl520_api_camera_get_id(CAMERA_DEVICE_RGB_IDX);
00008e  4831              LDR      r0,|L8.340|
000090  7800              LDRB     r0,[r0,#0]  ; rgb_sensor_index
000092  f7fffffe          BL       kl520_api_camera_get_id
000096  8220              STRH     r0,[r4,#0x10]
;;;277        device_info->sensor_id_1 = kl520_api_camera_get_id(CAMERA_DEVICE_NIR_IDX);
000098  482f              LDR      r0,|L8.344|
00009a  7800              LDRB     r0,[r0,#0]  ; nir_sensor_index
00009c  f7fffffe          BL       kl520_api_camera_get_id
0000a0  8260              STRH     r0,[r4,#0x12]
;;;278        device_info->flash_id = kl520_api_memxfer_get_device_id();
0000a2  f7fffffe          BL       kl520_api_memxfer_get_device_id
0000a6  82a0              STRH     r0,[r4,#0x14]
;;;279        device_info->display_id = kl520_api_dp_get_device_id();
0000a8  f7fffffe          BL       kl520_api_dp_get_device_id
0000ac  8320              STRH     r0,[r4,#0x18]
;;;280        
;;;281    #if ( CFG_LED_DRIVER_TYPE == LED_DRIVER_AW36515 )
;;;282        device_info->led_id = (u16)aw36515_get_id();
;;;283    #endif
;;;284        
;;;285    #if ( CFG_PANEL_TYPE != NULL )
;;;286    //    if(t_system_info->device_id_3.id == DEVICE_NOT_INIT)
;;;287    //    {
;;;288    //        kl520_api_dp_open(DISPLAY_WIDTH, DISPLAY_HEIGHT);
;;;289    //        t_system_info->device_id_3.id = kl520_api_dp_get_device_id();
;;;290    //        kl520_api_dp_close();
;;;291    //    }
;;;292    #endif
;;;293        device_info->touch_id = kl520_api_touch_get_device_id();
0000ae  f7fffffe          BL       kl520_api_touch_get_device_id
0000b2  8360              STRH     r0,[r4,#0x1a]
;;;294    #if ( CFG_TOUCH_ENABLE == YES )
;;;295    //    if(t_system_info->device_id_4.id == DEVICE_NOT_INIT)
;;;296    //    {
;;;297    //        kl520_api_touch_open();
;;;298    //        t_system_info->device_id_4.id = kl520_api_touch_get_device_id();
;;;299    //        kl520_api_touch_stop();
;;;300    //    }
;;;301    #endif
;;;302    
;;;303        dbg_msg_console("sensor_id_0:0x%X, sensor_id_1:0x%X, flash_id:0x%X ",device_info->sensor_id_0, device_info->sensor_id_1, device_info->flash_id);
0000b4  8aa0              LDRH     r0,[r4,#0x14]
0000b6  9000              STR      r0,[sp,#0]
0000b8  8a63              LDRH     r3,[r4,#0x12]
0000ba  8a22              LDRH     r2,[r4,#0x10]
0000bc  a127              ADR      r1,|L8.348|
0000be  2001              MOVS     r0,#1
0000c0  f7fffffe          BL       kdp_level_printf
;;;304    
;;;305        return ret;
0000c4  4638              MOV      r0,r7
;;;306    }
0000c6  bdfe              POP      {r1-r7,pc}
;;;307    
                          ENDP

                  |L8.200|
0000c8  534e3a20          DCB      "SN: 0x%X\r\n",0
0000cc  30782558
0000d0  0d0a00  
0000d3  00                DCB      0
                  |L8.212|
0000d4  626f6f74          DCB      "boot_version: %X\r\n",0
0000d8  5f766572
0000dc  73696f6e
0000e0  3a202558
0000e4  0d0a00  
0000e7  00                DCB      0
                  |L8.232|
0000e8  6d6f6465          DCB      "model_count:%d\r\n",0
0000ec  6c5f636f
0000f0  756e743a
0000f4  25640d0a
0000f8  00      
0000f9  00                DCB      0
0000fa  00                DCB      0
0000fb  00                DCB      0
                  |L8.252|
0000fc  5b457272          DCB      "[Err]device_info->models size %d(%d) is not enough\r\n",0
000100  5d646576
000104  6963655f
000108  696e666f
00010c  2d3e6d6f
000110  64656c73
000114  2073697a
000118  65202564
00011c  28256429
000120  20697320
000124  6e6f7420
000128  656e6f75
00012c  67680d0a
000130  00      
000131  00                DCB      0
000132  00                DCB      0
000133  00                DCB      0
                  |L8.308|
000134  28256429          DCB      "(%d). model %d version: 0x%x\r\n",0
000138  2e206d6f
00013c  64656c20
000140  25642076
000144  65727369
000148  6f6e3a20
00014c  30782578
000150  0d0a00  
000153  00                DCB      0
                  |L8.340|
                          DCD      rgb_sensor_index
                  |L8.344|
                          DCD      nir_sensor_index
                  |L8.348|
00015c  73656e73          DCB      "sensor_id_0:0x%X, sensor_id_1:0x%X, flash_id:0x%X \r\n",0
000160  6f725f69
000164  645f303a
000168  30782558
00016c  2c207365
000170  6e736f72
000174  5f69645f
000178  313a3078
00017c  25582c20
000180  666c6173
000184  685f6964
000188  3a307825
00018c  58200d0a
000190  00      
000191  00                DCB      0
000192  00                DCB      0
000193  00                DCB      0

                          AREA ||i.DSM_Uart_Get_Version_Info||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  DSM_Uart_Get_Version_Info PROC
;;;307    
;;;308    extern uint8_t DSM_Uart_Get_Version_Info(uint8_t Version[32])
000000  b530              PUSH     {r4,r5,lr}
;;;309    {
000002  b08f              SUB      sp,sp,#0x3c
000004  4605              MOV      r5,r0
;;;310        uint8_t ret = 0;
000006  2400              MOVS     r4,#0
;;;311    
;;;312        struct fw_misc_data scpu_ver, ncpu_ver;
;;;313    
;;;314        kl520_api_get_scpu_version(&scpu_ver);
000008  a802              ADD      r0,sp,#8
00000a  f7fffffe          BL       kl520_api_get_scpu_version
;;;315        kl520_api_get_ncpu_version(&ncpu_ver);
00000e  a80c              ADD      r0,sp,#0x30
000010  f7fffffe          BL       kl520_api_get_ncpu_version
;;;316        
;;;317        char str_ver[32] = {0, };
000014  2120              MOVS     r1,#0x20
000016  a804              ADD      r0,sp,#0x10
000018  f7fffffe          BL       __aeabi_memclr4
;;;318    
;;;319    #ifdef CFG_KL520_VERSION
;;;320    #ifdef CFG_MODULE_NAME
;;;321        sprintf(str_ver, "%s_V%d.%02d.%03d", CFG_MODULE_NAME, scpu_ver.version[1], scpu_ver.version[2], scpu_ver.version[3]);
;;;322    #else
;;;323       sprintf(str_ver, "ZF-BP3-X-25-V%d.%d.%d.%d", 
00001c  f89d100b          LDRB     r1,[sp,#0xb]
000020  f89d000a          LDRB     r0,[sp,#0xa]
000024  e9cd0100          STRD     r0,r1,[sp,#0]
000028  f89d3009          LDRB     r3,[sp,#9]
00002c  f89d2008          LDRB     r2,[sp,#8]
000030  a105              ADR      r1,|L9.72|
000032  a804              ADD      r0,sp,#0x10
000034  f7fffffe          BL       __2sprintf
;;;324                                scpu_ver.version[0], scpu_ver.version[1], scpu_ver.version[2], scpu_ver.version[3]
;;;325                                );
;;;326    #endif
;;;327    #else
;;;328        sprintf(str_ver, "ZF-BP3-SV%d.%d.%d.%d-NV%d.%d.%d.%d", 
;;;329                                scpu_ver.version[0], scpu_ver.version[1], scpu_ver.version[2], scpu_ver.version[3],
;;;330                                ncpu_ver.version[0], ncpu_ver.version[1], ncpu_ver.version[2], ncpu_ver.version[3]);
;;;331    #endif
;;;332    
;;;333        memcpy(Version, str_ver, 32);
000038  2220              MOVS     r2,#0x20
00003a  a904              ADD      r1,sp,#0x10
00003c  4628              MOV      r0,r5
00003e  f7fffffe          BL       __aeabi_memcpy
;;;334    
;;;335        return ret;
;;;336    }
000042  b00f              ADD      sp,sp,#0x3c
000044  4620              MOV      r0,r4                 ;335
000046  bd30              POP      {r4,r5,pc}
;;;337    
                          ENDP

                  |L9.72|
000048  5a462d42          DCB      "ZF-BP3-X-25-V%d.%d.%d.%d",0
00004c  50332d58
000050  2d32352d
000054  5625642e
000058  25642e25
00005c  642e2564
000060  00      
000061  00                DCB      0
000062  00                DCB      0
000063  00                DCB      0

                          AREA ||i.DSM_Uart_Get_Version_Info_zhian||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  DSM_Uart_Get_Version_Info_zhian PROC
;;;337    
;;;338    extern uint8_t DSM_Uart_Get_Version_Info_zhian(uint8_t Version[32])
000000  b530              PUSH     {r4,r5,lr}
;;;339    {
000002  b08b              SUB      sp,sp,#0x2c
000004  4605              MOV      r5,r0
;;;340        uint8_t ret = 0;
000006  2400              MOVS     r4,#0
;;;341    
;;;342        struct fw_misc_data scpu_ver, ncpu_ver;
;;;343    
;;;344        kl520_api_get_scpu_version(&scpu_ver);
000008  a801              ADD      r0,sp,#4
00000a  f7fffffe          BL       kl520_api_get_scpu_version
;;;345       // kl520_api_get_ncpu_version(&ncpu_ver);
;;;346        
;;;347        char str_ver[32] = {0, };
00000e  2120              MOVS     r1,#0x20
000010  a803              ADD      r0,sp,#0xc
000012  f7fffffe          BL       __aeabi_memclr4
;;;348    
;;;349    #ifdef CFG_KL520_VERSION
;;;350        //zcy mod K520 to ZF-BP3  add ver date
;;;351    		#if 1 //baikang
;;;352        sprintf(str_ver, "BH%d%d%d", 
000016  f89d0006          LDRB     r0,[sp,#6]
00001a  9000              STR      r0,[sp,#0]
00001c  f89d3005          LDRB     r3,[sp,#5]
000020  f89d2004          LDRB     r2,[sp,#4]
000024  a105              ADR      r1,|L10.60|
000026  a803              ADD      r0,sp,#0xc
000028  f7fffffe          BL       __2sprintf
;;;353                                
;;;354                                scpu_ver.version[0], scpu_ver.version[1], scpu_ver.version[2]
;;;355                   );
;;;356    		#endif
;;;357    		#if 0 //chengxiangtong
;;;358    		 sprintf(str_ver, "CH%d%d%d", 
;;;359                                
;;;360                                scpu_ver.version[0], scpu_ver.version[1], scpu_ver.version[2]
;;;361                   );
;;;362    		#endif
;;;363    		#if 0 //xing chen guang 
;;;364    		 sprintf(str_ver, "XH%d%d%d", 
;;;365                                
;;;366                                scpu_ver.version[0], scpu_ver.version[1], scpu_ver.version[2]
;;;367                   );
;;;368    		#endif
;;;369    #else
;;;370        sprintf(str_ver, "ZFBP3-SV%d.%d.%d.%d-NV%d.%d.%d.%d", 
;;;371                                scpu_ver.version[0], scpu_ver.version[1], scpu_ver.version[2], scpu_ver.version[3],
;;;372                                ncpu_ver.version[0], ncpu_ver.version[1], ncpu_ver.version[2], ncpu_ver.version[3]);
;;;373    #endif
;;;374    
;;;375        memcpy(Version, str_ver, 32);
00002c  2220              MOVS     r2,#0x20
00002e  a903              ADD      r1,sp,#0xc
000030  4628              MOV      r0,r5
000032  f7fffffe          BL       __aeabi_memcpy
;;;376    
;;;377        return ret;
;;;378    }
000036  b00b              ADD      sp,sp,#0x2c
000038  4620              MOV      r0,r4                 ;377
00003a  bd30              POP      {r4,r5,pc}
;;;379    
                          ENDP

                  |L10.60|
00003c  42482564          DCB      "BH%d%d%d",0
000040  25642564
000044  00      
000045  00                DCB      0
000046  00                DCB      0
000047  00                DCB      0

                          AREA ||i.DSM_Uart_Get_Version_Info_zhian_hard||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  DSM_Uart_Get_Version_Info_zhian_hard PROC
;;;404    
;;;405    extern uint8_t DSM_Uart_Get_Version_Info_zhian_hard(uint8_t Version[32])
000000  b530              PUSH     {r4,r5,lr}
;;;406    {
000002  b08b              SUB      sp,sp,#0x2c
000004  4605              MOV      r5,r0
;;;407        uint8_t ret = 0;
000006  2400              MOVS     r4,#0
;;;408    
;;;409        struct fw_misc_data scpu_ver, ncpu_ver;
;;;410    
;;;411        kl520_api_get_scpu_version(&scpu_ver);
000008  a808              ADD      r0,sp,#0x20
00000a  f7fffffe          BL       kl520_api_get_scpu_version
;;;412       // kl520_api_get_ncpu_version(&ncpu_ver);
;;;413        
;;;414        char str_ver[32] = {0, };
00000e  2120              MOVS     r1,#0x20
000010  4668              MOV      r0,sp
000012  f7fffffe          BL       __aeabi_memclr4
;;;415    
;;;416    
;;;417    //zcy mod K520 to ZF-BP2  add ver date
;;;418        sprintf(str_ver, "BP3-V%d.%d", 
000016  2301              MOVS     r3,#1
000018  461a              MOV      r2,r3
00001a  a106              ADR      r1,|L11.52|
00001c  4668              MOV      r0,sp
00001e  f7fffffe          BL       __2sprintf
;;;419                                1, 1 );
;;;420                              
;;;421    
;;;422    
;;;423    
;;;424        memcpy(Version, str_ver, 32);
000022  2220              MOVS     r2,#0x20
000024  4669              MOV      r1,sp
000026  4628              MOV      r0,r5
000028  f7fffffe          BL       __aeabi_memcpy
;;;425    
;;;426        return ret;
;;;427    }
00002c  b00b              ADD      sp,sp,#0x2c
00002e  4620              MOV      r0,r4                 ;426
000030  bd30              POP      {r4,r5,pc}
;;;428    
                          ENDP

000032  0000              DCW      0x0000
                  |L11.52|
000034  4250332d          DCB      "BP3-V%d.%d",0
000038  5625642e
00003c  256400  
00003f  00                DCB      0

                          AREA ||i.DSM_Uart_Get_Version_Info_zhian_prd||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  DSM_Uart_Get_Version_Info_zhian_prd PROC
;;;379    
;;;380    extern uint8_t DSM_Uart_Get_Version_Info_zhian_prd(uint8_t Version[32])
000000  b530              PUSH     {r4,r5,lr}
;;;381    {
000002  b08f              SUB      sp,sp,#0x3c
000004  4605              MOV      r5,r0
;;;382        uint8_t ret = 0;
000006  2400              MOVS     r4,#0
;;;383    
;;;384        struct fw_misc_data scpu_ver, ncpu_ver;
;;;385    
;;;386        kl520_api_get_scpu_version(&scpu_ver);
000008  a804              ADD      r0,sp,#0x10
00000a  f7fffffe          BL       kl520_api_get_scpu_version
;;;387       // kl520_api_get_ncpu_version(&ncpu_ver);
;;;388        
;;;389        char str_ver[32] = {0, };
00000e  2120              MOVS     r1,#0x20
000010  a806              ADD      r0,sp,#0x18
000012  f7fffffe          BL       __aeabi_memclr4
;;;390    
;;;391    
;;;392    //zcy mod K520 to ZF-BP2  add ver date
;;;393        sprintf(str_ver, "ZF-BP3-X-25-%s-V%d.%d.%d.%d-(%d)", 
000016  f89d0011          LDRB     r0,[sp,#0x11]
00001a  f89d2013          LDRB     r2,[sp,#0x13]
00001e  f89d1012          LDRB     r1,[sp,#0x12]
000022  9b05              LDR      r3,[sp,#0x14]
000024  e88d000f          STM      sp,{r0-r3}
000028  f89d3010          LDRB     r3,[sp,#0x10]
00002c  a206              ADR      r2,|L12.72|
00002e  a107              ADR      r1,|L12.76|
000030  a806              ADD      r0,sp,#0x18
000032  f7fffffe          BL       __2sprintf
;;;394                                "B",
;;;395                                scpu_ver.version[0], scpu_ver.version[1], scpu_ver.version[2], scpu_ver.version[3],
;;;396                                scpu_ver.date);
;;;397    
;;;398    
;;;399    
;;;400        memcpy(Version, str_ver, 32);
000036  2220              MOVS     r2,#0x20
000038  a906              ADD      r1,sp,#0x18
00003a  4628              MOV      r0,r5
00003c  f7fffffe          BL       __aeabi_memcpy
;;;401    
;;;402        return ret;
;;;403    }
000040  b00f              ADD      sp,sp,#0x3c
000042  4620              MOV      r0,r4                 ;402
000044  bd30              POP      {r4,r5,pc}
;;;404    
                          ENDP

000046  0000              DCW      0x0000
                  |L12.72|
000048  4200              DCB      "B",0
00004a  00                DCB      0
00004b  00                DCB      0
                  |L12.76|
00004c  5a462d42          DCB      "ZF-BP3-X-25-%s-V%d.%d.%d.%d-(%d)",0
000050  50332d58
000054  2d32352d
000058  25732d56
00005c  25642e25
000060  642e2564
000064  2e25642d
000068  28256429
00006c  00      
00006d  00                DCB      0
00006e  00                DCB      0
00006f  00                DCB      0

                          AREA ||i.DSM_Uart_Init_Encryption||, CODE, READONLY, ALIGN=2

                  DSM_Uart_Init_Encryption PROC
;;;1467   #if ( ENCRYPTION_MODE&AES_ENCRYPTION ) || ( ENCRYPTION_MODE&XOR_ENCRYPTION )
;;;1468   extern uint8_t DSM_Uart_Init_Encryption(msg_init_encryption_data encryption,uint8_t device_id[DEVICE_ID_NUM])
000000  e92d41ff          PUSH     {r0-r8,lr}
;;;1469   {
000004  b0ba              SUB      sp,sp,#0xe8
000006  461d              MOV      r5,r3
;;;1470   #if 0
;;;1471       //read releaseKey opt.
;;;1472       kl520_customer_info Cusinfo;
;;;1473       kl520_api_customer_get(&Cusinfo);
;;;1474       if(strcmp(Cusinfo.nReleaseKey,"0") || Cusinfo.nReleaseKey!=NULL)
;;;1475       {
;;;1476   
;;;1477               memcpy(key_num, &Cusinfo.nReleaseKey[0], KEY_SIZE);
;;;1478               if(!strcmp(key_num,"0") || key_num==NULL)
;;;1479               {
;;;1480                   memset(key_num,0x0f,KEY_SIZE);
;;;1481               }
;;;1482               int i = 0;
;;;1483               for(i=0;i<KEY_SIZE;i++)
;;;1484               {
;;;1485                   dbg_msg_console("nReleaseKey[%d]=0x%02x",i,Cusinfo.nReleaseKey[i]);
;;;1486                   dbg_msg_console("key_num[%d]=0x%02x",i,key_num[i]);
;;;1487               }
;;;1488       }
;;;1489   
;;;1490   #else
;;;1491       kl520_customer_info Cusinfo;
;;;1492       kl520_api_customer_get(&Cusinfo);
000008  a82e              ADD      r0,sp,#0xb8
00000a  f7fffffe          BL       kl520_api_customer_get
;;;1493       if (( kl520_api_customer_chk_key_exist(&Cusinfo.nReleaseKey[0], KEY_SIZE) == TRUE ) && (!use_debug_key))
00000e  2110              MOVS     r1,#0x10
000010  a832              ADD      r0,sp,#0xc8
000012  f7fffffe          BL       kl520_api_customer_chk_key_exist
000016  4e35              LDR      r6,|L13.236|
000018  2801              CMP      r0,#1
00001a  d101              BNE      |L13.32|
00001c  7970              LDRB     r0,[r6,#5]  ; use_debug_key
00001e  b130              CBZ      r0,|L13.46|
                  |L13.32|
;;;1494       {
;;;1495   //        dbg_msg_console("Load Key...");
;;;1496           memcpy(key_num, &Cusinfo.nReleaseKey[0], KEY_SIZE);
;;;1497       }
;;;1498       else if ( kl520_api_customer_chk_key_exist(&key_num[0], KEY_SIZE) == FALSE )
000020  4832              LDR      r0,|L13.236|
000022  2110              MOVS     r1,#0x10
000024  3018              ADDS     r0,r0,#0x18
000026  f7fffffe          BL       kl520_api_customer_chk_key_exist
00002a  b3d8              CBZ      r0,|L13.164|
00002c  e006              B        |L13.60|
                  |L13.46|
00002e  ac32              ADD      r4,sp,#0xc8
000030  e894000f          LDM      r4,{r0-r3}
000034  f1060418          ADD      r4,r6,#0x18
000038  e884000f          STM      r4,{r0-r3}
                  |L13.60|
;;;1499       {
;;;1500   //        dbg_msg_console("No Key...");
;;;1501           return MR_REJECTED;
;;;1502       }
;;;1503   #endif
;;;1504   
;;;1505       system_info t_sys_info = { 0 };
00003c  217c              MOVS     r1,#0x7c
00003e  a806              ADD      r0,sp,#0x18
000040  f7fffffe          BL       __aeabi_memclr4
;;;1506       //ret = kl520_api_get_device_info(&t_sys_info);
;;;1507       t_sys_info.unique_id = kdp_sys_get_unique_id();
000044  f7fffffe          BL       kdp_sys_get_unique_id
;;;1508       dbg_msg_com("unique_id : %x", t_sys_info.unique_id);
;;;1509       memset(device_id, 0,DEVICE_ID_NUM);
000048  9006              STR      r0,[sp,#0x18]
00004a  2114              MOVS     r1,#0x14
00004c  4628              MOV      r0,r5
00004e  f7fffffe          BL       __aeabi_memclr
;;;1510       uint32_t real_device_id = IntType_BigToSmallEnd(t_sys_info.unique_id);
000052  9806              LDR      r0,[sp,#0x18]
000054  f7fffffe          BL       IntType_BigToSmallEnd
;;;1511       memcpy(device_id, &real_device_id, sizeof(t_sys_info.unique_id) );
000058  6028              STR      r0,[r5,#0]
;;;1512   
;;;1513       uint8_t i = 0;
00005a  2400              MOVS     r4,#0
;;;1514       memset(device_id+sizeof(t_sys_info.unique_id), 0, DEVICE_ID_NUM-sizeof(t_sys_info.unique_id));
00005c  2110              MOVS     r1,#0x10
00005e  1d28              ADDS     r0,r5,#4
000060  f7fffffe          BL       __aeabi_memclr
;;;1515       uint8_t key_md5[KEY_SIZE] = "0";
000064  4b22              LDR      r3,|L13.240|
000066  af02              ADD      r7,sp,#8
000068  cb0f              LDM      r3,{r0-r3}
00006a  e887000f          STM      r7,{r0-r3}
;;;1516       uint8_t str_md5[KEY_SIZE*2] = "0";
00006e  4920              LDR      r1,|L13.240|
000070  2220              MOVS     r2,#0x20
000072  3110              ADDS     r1,r1,#0x10
000074  a825              ADD      r0,sp,#0x94
000076  f7fffffe          BL       __aeabi_memcpy4
;;;1517       md5_main( encryption.seed, key_md5, ARRAY_SIZE(encryption.seed) );
00007a  2204              MOVS     r2,#4
00007c  a902              ADD      r1,sp,#8
00007e  a83a              ADD      r0,sp,#0xe8
000080  f7fffffe          BL       md5_main
;;;1518       md5_HexDevide2DoubleHex( str_md5, key_md5, KEY_SIZE );
000084  2210              MOVS     r2,#0x10
000086  a902              ADD      r1,sp,#8
000088  a825              ADD      r0,sp,#0x94
00008a  f7fffffe          BL       md5_HexDevide2DoubleHex
;;;1519       memset(debug_key,0,KEY_SIZE);
00008e  2110              MOVS     r1,#0x10
000090  4818              LDR      r0,|L13.244|
000092  f7fffffe          BL       __aeabi_memclr
000096  f8df8054          LDR      r8,|L13.236|
00009a  af25              ADD      r7,sp,#0x94           ;1516
00009c  f1080818          ADD      r8,r8,#0x18           ;1498
0000a0  4d14              LDR      r5,|L13.244|
                  |L13.162|
;;;1520       for(i=0;i<KEY_SIZE;i++)
;;;1521       {
;;;1522           debug_key[i] = str_md5[key_num[i]];
0000a2  e000              B        |L13.166|
                  |L13.164|
0000a4  e009              B        |L13.186|
                  |L13.166|
0000a6  f8180004          LDRB     r0,[r8,r4]
0000aa  5c3a              LDRB     r2,[r7,r0]
0000ac  552a              STRB     r2,[r5,r4]
;;;1523           if((0x0a<=debug_key[i] && debug_key[i]<=0x0f) || (0x0A<=debug_key[i] && debug_key[i]<=0x0F) )//|| ('a'<=debug_key[i] && debug_key[i]<='f') || ('A'<=debug_key[i] && debug_key[i]<='Z'))
0000ae  2a0a              CMP      r2,#0xa
0000b0  d307              BCC      |L13.194|
0000b2  2a0f              CMP      r2,#0xf
0000b4  d805              BHI      |L13.194|
0000b6  3257              ADDS     r2,r2,#0x57
;;;1524           {
;;;1525               debug_key[i] = debug_key[i] + 87;
0000b8  e006              B        |L13.200|
                  |L13.186|
0000ba  2001              MOVS     r0,#1                 ;1501
                  |L13.188|
;;;1526           }
;;;1527           else if(debug_key[i]<=0x09)
;;;1528           {
;;;1529               debug_key[i] = debug_key[i] + 0x30;
;;;1530           }
;;;1531           else
;;;1532               dbg_msg_console("not recognized char:0x%02x",debug_key[i]);
;;;1533       }
;;;1534   
;;;1535       g_nEncryptionMode = (XOR_ENCRYPTION == encryption.mode)?XOR_ENCRYPTION:AES_ENCRYPTION;
;;;1536   
;;;1537       dbg_msg_com("debug_key=%s",debug_key);
;;;1538   
;;;1539       return MR_SUCCESS;
;;;1540   }
0000bc  b03e              ADD      sp,sp,#0xf8
0000be  e8bd81f0          POP      {r4-r8,pc}
                  |L13.194|
0000c2  2a09              CMP      r2,#9                 ;1527
0000c4  d802              BHI      |L13.204|
0000c6  3230              ADDS     r2,r2,#0x30           ;1527
                  |L13.200|
0000c8  552a              STRB     r2,[r5,r4]            ;1529
0000ca  e003              B        |L13.212|
                  |L13.204|
0000cc  a10a              ADR      r1,|L13.248|
0000ce  2001              MOVS     r0,#1                 ;1532
0000d0  f7fffffe          BL       kdp_level_printf
                  |L13.212|
0000d4  1c64              ADDS     r4,r4,#1              ;1532
0000d6  b2e4              UXTB     r4,r4                 ;1520
0000d8  2c10              CMP      r4,#0x10              ;1520
0000da  d3e2              BCC      |L13.162|
0000dc  f89d00ec          LDRB     r0,[sp,#0xec]         ;1535
0000e0  2802              CMP      r0,#2                 ;1535
0000e2  d000              BEQ      |L13.230|
0000e4  2001              MOVS     r0,#1                 ;1535
                  |L13.230|
0000e6  7130              STRB     r0,[r6,#4]            ;1535
0000e8  2000              MOVS     r0,#0                 ;1539
0000ea  e7e7              B        |L13.188|
;;;1541   
                          ENDP

                  |L13.236|
                          DCD      ||.data||
                  |L13.240|
                          DCD      ||.constdata||+0x8
                  |L13.244|
                          DCD      debug_key
                  |L13.248|
0000f8  6e6f7420          DCB      "not recognized char:0x%02x\r\n",0
0000fc  7265636f
000100  676e697a
000104  65642063
000108  6861723a
00010c  30782530
000110  32780d0a
000114  00      
000115  00                DCB      0
000116  00                DCB      0
000117  00                DCB      0

                          AREA ||i.DSM_Uart_OtaHeader||, CODE, READONLY, ALIGN=2

                  DSM_Uart_OtaHeader PROC
;;;1673   extern bool user_com_thread_event_ota_copy_to_flash(void);
;;;1674   extern uint8_t DSM_Uart_OtaHeader(msg_mass_data_header* otaheader)//lmm-add
000000  b5f8              PUSH     {r3-r7,lr}
;;;1675   {
;;;1676       if ((ota_update_info.ota_process != OTA_START_PROCESS_FLAG) || \
000002  4c34              LDR      r4,|L14.212|
000004  f8941060          LDRB     r1,[r4,#0x60]  ; ota_update_info
000008  2904              CMP      r1,#4
00000a  d15b              BNE      |L14.196|
;;;1677           (ota_update_info.ota_status != OTA_STATUS_START))
00000c  f8941061          LDRB     r1,[r4,#0x61]  ; ota_update_info
000010  2901              CMP      r1,#1
000012  d157              BNE      |L14.196|
;;;1678       {
;;;1679           return MR_REJECTED;
;;;1680       }
;;;1681   
;;;1682       memcpy( &ota_update_info.header_info, (void*)otaheader, sizeof(msg_mass_data_header) );
000014  4601              MOV      r1,r0
000016  222d              MOVS     r2,#0x2d
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       __aeabi_memcpy
;;;1683   
;;;1684       u16 num_pkt = (ota_update_info.header_info.num_pkt[2] << 8) + (ota_update_info.header_info.num_pkt[3]);
00001e  79e0              LDRB     r0,[r4,#7]  ; ota_update_info
000020  79a1              LDRB     r1,[r4,#6]  ; ota_update_info
000022  eb002001          ADD      r0,r0,r1,LSL #8
000026  b286              UXTH     r6,r0
;;;1685       if((ota_update_info.header_info.num_pkt[0] != 0) || \
000028  7920              LDRB     r0,[r4,#4]  ; ota_update_info
00002a  b9a0              CBNZ     r0,|L14.86|
;;;1686           (ota_update_info.header_info.num_pkt[1] != 0) || \
00002c  7960              LDRB     r0,[r4,#5]  ; ota_update_info
00002e  b990              CBNZ     r0,|L14.86|
;;;1687           (num_pkt == 0))
000030  b18e              CBZ      r6,|L14.86|
;;;1688       {
;;;1689           return MR_FAILED_INVALID_PARAM;
;;;1690       }
;;;1691   
;;;1692       u32 fsize = (((u32)ota_update_info.header_info.fsize_b[0]) << 24) + (((u32)ota_update_info.header_info.fsize_b[1]) << 16) \
000032  78e0              LDRB     r0,[r4,#3]  ; ota_update_info
000034  7821              LDRB     r1,[r4,#0]  ; ota_update_info
000036  78a2              LDRB     r2,[r4,#2]  ; ota_update_info
000038  eb006001          ADD      r0,r0,r1,LSL #24
00003c  7861              LDRB     r1,[r4,#1]  ; ota_update_info
00003e  0409              LSLS     r1,r1,#16
000040  eb012102          ADD      r1,r1,r2,LSL #8
000044  1845              ADDS     r5,r0,r1
;;;1693                       + (((u32)ota_update_info.header_info.fsize_b[2]) << 8) + ((u32)ota_update_info.header_info.fsize_b[3]);
;;;1694   
;;;1695       u16 pkt_size = ( ota_update_info.header_info.pkt_size[0] << 8 ) + ota_update_info.header_info.pkt_size[1];
000046  7a60              LDRB     r0,[r4,#9]  ; ota_update_info
000048  7a21              LDRB     r1,[r4,#8]  ; ota_update_info
;;;1696   
;;;1697       if (fsize <= 1024)
00004a  f5b56f80          CMP      r5,#0x400
00004e  eb002001          ADD      r0,r0,r1,LSL #8       ;1695
000052  b287              UXTH     r7,r0                 ;1695
000054  d801              BHI      |L14.90|
                  |L14.86|
;;;1698           return MR_FAILED_INVALID_PARAM;
000056  2006              MOVS     r0,#6
;;;1699       
;;;1700       ota_update_info.total_pid = num_pkt;
;;;1701       ota_update_info.total_update_size = fsize;
;;;1702       
;;;1703       u32 tmp_addr = kdp_ddr_reserve(fsize);
;;;1704       if(tmp_addr == 0) {
;;;1705           //ddr mem not enough
;;;1706           ota_update_info.ota_ddr_start_addr = OTA_START_DDR_ADDR;
;;;1707           ota_update_info.ota_mode = 0;
;;;1708       } else {
;;;1709           //ota_update_info.ota_ddr_start_addr = OTA_START_DDR_ADDR;
;;;1710           ota_update_info.ota_mode = 1;
;;;1711           ota_update_info.ota_ddr_start_addr = tmp_addr;
;;;1712       }
;;;1713       
;;;1714       dbg_msg_console ("ota ddr mem addr:%x", ota_update_info.ota_ddr_start_addr);
;;;1715       //dbg_msg_console("[%s]", __func__ );
;;;1716       dbg_msg_console("fsize: 0x%X , num_pkt: 0x%X , p_size: 0x%X", fsize, num_pkt, pkt_size);
;;;1717   
;;;1718       dbg_msg_nocrlf("md5:");
;;;1719       for (int i = 0; i < 32; i++) dbg_msg_nocrlf (" %02X", ota_update_info.header_info.md5_sum[i]);
;;;1720       dbg_msg_console("\n");
;;;1721       
;;;1722       //set to ota state
;;;1723       if (ota_update_info.ota_mode == 0) {
;;;1724           bool fl = user_com_thread_event_ota_copy_to_flash();
;;;1725           if(fl == TRUE) {
;;;1726               //status is not correct
;;;1727               return MR_REJECTED;
;;;1728           }
;;;1729       }
;;;1730   
;;;1731       ota_update_info.ota_status = OTA_STATUS_HEADER;
;;;1732   
;;;1733       return MR_SUCCESS;
;;;1734   }
000058  bdf8              POP      {r3-r7,pc}
                  |L14.90|
00005a  8726              STRH     r6,[r4,#0x38]         ;1700
00005c  4628              MOV      r0,r5                 ;1703
00005e  6365              STR      r5,[r4,#0x34]         ;1703  ; ota_update_info
000060  f7fffffe          BL       kdp_ddr_reserve
000064  2800              CMP      r0,#0                 ;1704
000066  d023              BEQ      |L14.176|
000068  2101              MOVS     r1,#1                 ;1710
00006a  f8841068          STRB     r1,[r4,#0x68]         ;1710
00006e  6660              STR      r0,[r4,#0x64]         ;1711  ; ota_update_info
                  |L14.112|
000070  a119              ADR      r1,|L14.216|
000072  2001              MOVS     r0,#1                 ;1714
000074  6e62              LDR      r2,[r4,#0x64]         ;1714  ; ota_update_info
000076  f7fffffe          BL       kdp_level_printf
00007a  4633              MOV      r3,r6                 ;1716
00007c  462a              MOV      r2,r5                 ;1716
00007e  a11c              ADR      r1,|L14.240|
000080  2001              MOVS     r0,#1                 ;1716
000082  9700              STR      r7,[sp,#0]            ;1716
000084  f7fffffe          BL       kdp_level_printf
000088  a025              ADR      r0,|L14.288|
00008a  f7fffffe          BL       kdp_printf_nocrlf
00008e  2500              MOVS     r5,#0                 ;1719
                  |L14.144|
000090  1960              ADDS     r0,r4,r5              ;1719
000092  7a81              LDRB     r1,[r0,#0xa]          ;1719
000094  a024              ADR      r0,|L14.296|
000096  f7fffffe          BL       kdp_printf_nocrlf
00009a  1c6d              ADDS     r5,r5,#1              ;1719
00009c  2d20              CMP      r5,#0x20              ;1719
00009e  dbf7              BLT      |L14.144|
0000a0  a123              ADR      r1,|L14.304|
0000a2  2001              MOVS     r0,#1                 ;1720
0000a4  f7fffffe          BL       kdp_level_printf
0000a8  f8940068          LDRB     r0,[r4,#0x68]         ;1723  ; ota_update_info
0000ac  b138              CBZ      r0,|L14.190|
0000ae  e00b              B        |L14.200|
                  |L14.176|
0000b0  f04f40c0          MOV      r0,#0x60000000        ;1706
0000b4  6660              STR      r0,[r4,#0x64]         ;1707  ; ota_update_info
0000b6  2000              MOVS     r0,#0                 ;1707
0000b8  f8840068          STRB     r0,[r4,#0x68]         ;1707
0000bc  e7d8              B        |L14.112|
                  |L14.190|
0000be  f7fffffe          BL       user_com_thread_event_ota_copy_to_flash
0000c2  b108              CBZ      r0,|L14.200|
                  |L14.196|
0000c4  2001              MOVS     r0,#1                 ;1727
0000c6  bdf8              POP      {r3-r7,pc}
                  |L14.200|
0000c8  2002              MOVS     r0,#2                 ;1731
0000ca  f8840061          STRB     r0,[r4,#0x61]         ;1731
0000ce  2000              MOVS     r0,#0                 ;1733
0000d0  bdf8              POP      {r3-r7,pc}
;;;1735   
                          ENDP

0000d2  0000              DCW      0x0000
                  |L14.212|
                          DCD      ||.bss||
                  |L14.216|
0000d8  6f746120          DCB      "ota ddr mem addr:%x\r\n",0
0000dc  64647220
0000e0  6d656d20
0000e4  61646472
0000e8  3a25780d
0000ec  0a00    
0000ee  00                DCB      0
0000ef  00                DCB      0
                  |L14.240|
0000f0  6673697a          DCB      "fsize: 0x%X , num_pkt: 0x%X , p_size: 0x%X\r\n",0
0000f4  653a2030
0000f8  78255820
0000fc  2c206e75
000100  6d5f706b
000104  743a2030
000108  78255820
00010c  2c20705f
000110  73697a65
000114  3a203078
000118  25580d0a
00011c  00      
00011d  00                DCB      0
00011e  00                DCB      0
00011f  00                DCB      0
                  |L14.288|
000120  6d64353a          DCB      "md5:",0
000124  00      
000125  00                DCB      0
000126  00                DCB      0
000127  00                DCB      0
                  |L14.296|
000128  20253032          DCB      " %02X",0
00012c  5800    
00012e  00                DCB      0
00012f  00                DCB      0
                  |L14.304|
000130  0a0d0a00          DCB      "\n\r\n",0

                          AREA ||i.DSM_Uart_OtaPacket||, CODE, READONLY, ALIGN=2

                  DSM_Uart_OtaPacket PROC
;;;1735   
;;;1736   extern uint8_t DSM_Uart_OtaPacket(msg_mass_data_pkg otapacket)//lmm-add
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1737   {
;;;1738       if ((ota_update_info.ota_status != OTA_STATUS_HEADER) && \
000004  4c26              LDR      r4,|L15.160|
000006  4605              MOV      r5,r0                 ;1737
000008  460f              MOV      r7,r1                 ;1737
00000a  f8940061          LDRB     r0,[r4,#0x61]  ; ota_update_info
00000e  2802              CMP      r0,#2
000010  d001              BEQ      |L15.22|
;;;1739           (ota_update_info.ota_status != OTA_STATUS_PACKET))
000012  2803              CMP      r0,#3
000014  d13c              BNE      |L15.144|
                  |L15.22|
000016  f3c52007          UBFX     r0,r5,#8,#8
;;;1740       {
;;;1741           return MR_REJECTED;
;;;1742       }
;;;1743   
;;;1744       uint16_t pid = (((u16)otapacket.nPkgIdx[0]) << 8) + otapacket.nPkgIdx[1];
00001a  eb002005          ADD      r0,r0,r5,LSL #8
00001e  b286              UXTH     r6,r0
;;;1745       dbg_msg_console("ota pkt id :%d", pid);
000020  4632              MOV      r2,r6
000022  a120              ADR      r1,|L15.164|
000024  2001              MOVS     r0,#1
000026  f7fffffe          BL       kdp_level_printf
;;;1746   
;;;1747       if( ota_update_info.packet_id != pid || ota_update_info.total_pid < pid )
00002a  8f60              LDRH     r0,[r4,#0x3a]  ; ota_update_info
00002c  42b0              CMP      r0,r6
00002e  d10c              BNE      |L15.74|
000030  8f20              LDRH     r0,[r4,#0x38]  ; ota_update_info
000032  42b0              CMP      r0,r6
000034  d309              BCC      |L15.74|
000036  0e28              LSRS     r0,r5,#24
000038  0c29              LSRS     r1,r5,#16
;;;1748       {
;;;1749           return MR_FAILED_INVALID_PARAM;
;;;1750       }
;;;1751   
;;;1752       uint16_t buf_size = (((u16)otapacket.nPkgSize[0]) << 8) + otapacket.nPkgSize[1];
00003a  eb002001          ADD      r0,r0,r1,LSL #8
00003e  b285              UXTH     r5,r0
000040  e9d4010c          LDRD     r0,r1,[r4,#0x30]
;;;1753       if( ota_update_info.total_update_size < ota_update_info.ddr_addr_idx + buf_size )
000044  1942              ADDS     r2,r0,r5
000046  4291              CMP      r1,r2
000048  d202              BCS      |L15.80|
                  |L15.74|
;;;1754       {
;;;1755           return MR_FAILED_INVALID_PARAM;
00004a  2006              MOVS     r0,#6
                  |L15.76|
;;;1756       }
;;;1757   
;;;1758       memcpy( (void*)(ota_update_info.ota_ddr_start_addr + ota_update_info.ddr_addr_idx), 
;;;1759           (void*)otapacket.pDataHeader, buf_size );
;;;1760   
;;;1761       ota_update_info.ddr_addr_idx+=buf_size;
;;;1762       ota_update_info.packet_id++;
;;;1763   
;;;1764       ota_update_info.ota_status = OTA_STATUS_PACKET;
;;;1765   
;;;1766       if( Ota_final_packet() == 1 )
;;;1767       {
;;;1768           ota_update_info.ota_status = OTA_STATUS_FINAL;
;;;1769           dbg_msg_console("Get all ota packets...");
;;;1770           
;;;1771           //set to ota state
;;;1772           if ( ota_update_info.ota_mode == 1) {
;;;1773               bool fl = user_com_thread_event_ota_copy_to_flash();
;;;1774               if(fl == TRUE) {
;;;1775                   //status is not correct
;;;1776                   return MR_REJECTED;
;;;1777               }
;;;1778           }
;;;1779           //start ota copy to flash...
;;;1780           user_com_event_start(USER_COM_FLAG_OTA_PROCESS);
;;;1781   
;;;1782       }
;;;1783   
;;;1784       return MR_SUCCESS;
;;;1785   }
00004c  e8bd81f0          POP      {r4-r8,pc}
                  |L15.80|
000050  6e61              LDR      r1,[r4,#0x64]         ;1758  ; ota_update_info
000052  462a              MOV      r2,r5                 ;1758
000054  4408              ADD      r0,r0,r1              ;1758
000056  4639              MOV      r1,r7                 ;1758
000058  f7fffffe          BL       __aeabi_memcpy
00005c  6b20              LDR      r0,[r4,#0x30]         ;1761  ; ota_update_info
00005e  4428              ADD      r0,r0,r5              ;1761
000060  6320              STR      r0,[r4,#0x30]         ;1762  ; ota_update_info
000062  8f60              LDRH     r0,[r4,#0x3a]         ;1762  ; ota_update_info
000064  1c40              ADDS     r0,r0,#1              ;1762
000066  8760              STRH     r0,[r4,#0x3a]         ;1762
000068  2003              MOVS     r0,#3                 ;1764
00006a  f8840061          STRB     r0,[r4,#0x61]         ;1764
00006e  f7fffffe          BL       Ota_final_packet
000072  2801              CMP      r0,#1                 ;1766
000074  d112              BNE      |L15.156|
000076  2004              MOVS     r0,#4                 ;1768
000078  f8040f61          STRB     r0,[r4,#0x61]!        ;1768
00007c  a10e              ADR      r1,|L15.184|
00007e  2001              MOVS     r0,#1                 ;1769
000080  f7fffffe          BL       kdp_level_printf
000084  79e0              LDRB     r0,[r4,#7]            ;1772  ; ota_update_info
000086  2801              CMP      r0,#1                 ;1772
000088  d104              BNE      |L15.148|
00008a  f7fffffe          BL       user_com_thread_event_ota_copy_to_flash
00008e  b108              CBZ      r0,|L15.148|
                  |L15.144|
000090  2001              MOVS     r0,#1                 ;1776
000092  e7db              B        |L15.76|
                  |L15.148|
000094  f44f7000          MOV      r0,#0x200             ;1780
000098  f7fffffe          BL       user_com_event_start
                  |L15.156|
00009c  2000              MOVS     r0,#0                 ;1784
00009e  e7d5              B        |L15.76|
;;;1786   
                          ENDP

                  |L15.160|
                          DCD      ||.bss||
                  |L15.164|
0000a4  6f746120          DCB      "ota pkt id :%d\r\n",0
0000a8  706b7420
0000ac  6964203a
0000b0  25640d0a
0000b4  00      
0000b5  00                DCB      0
0000b6  00                DCB      0
0000b7  00                DCB      0
                  |L15.184|
0000b8  47657420          DCB      "Get all ota packets...\r\n",0
0000bc  616c6c20
0000c0  6f746120
0000c4  7061636b
0000c8  6574732e
0000cc  2e2e0d0a
0000d0  00      
0000d1  00                DCB      0
0000d2  00                DCB      0
0000d3  00                DCB      0

                          AREA ||i.DSM_Uart_SET_THRESHOLD_LEVEL||, CODE, READONLY, ALIGN=2

                  DSM_Uart_SET_THRESHOLD_LEVEL PROC
;;;1297   
;;;1298   extern uint8_t DSM_Uart_SET_THRESHOLD_LEVEL(uint8_t verify_level,uint8_t live_level)
000000  b570              PUSH     {r4-r6,lr}
;;;1299   {
000002  460c              MOV      r4,r1
000004  4605              MOV      r5,r0
;;;1300       if( (verify_level > 4) || 
000006  2804              CMP      r0,#4
000008  d803              BHI      |L16.18|
;;;1301           (live_level < 50) || 
00000a  2c32              CMP      r4,#0x32
00000c  d301              BCC      |L16.18|
;;;1302           (live_level > 95))
00000e  2c5f              CMP      r4,#0x5f
000010  d901              BLS      |L16.22|
                  |L16.18|
;;;1303           return MR_FAILED_INVALID_PARAM;
000012  2006              MOVS     r0,#6
;;;1304   
;;;1305       kdp_e2e_set_fr_threshold_level(verify_level);
;;;1306       
;;;1307       kdp_set_rgb_to_nir_ratio(live_level);
;;;1308   
;;;1309       dbg_msg_console("Set fr th: %d, lv th: %d", verify_level, live_level);
;;;1310   
;;;1311       return MR_SUCCESS;
;;;1312   }
000014  bd70              POP      {r4-r6,pc}
                  |L16.22|
000016  f7fffffe          BL       kdp_e2e_set_fr_threshold_level
00001a  4620              MOV      r0,r4                 ;1307
00001c  f7fffffe          BL       kdp_set_rgb_to_nir_ratio
000020  4623              MOV      r3,r4                 ;1309
000022  462a              MOV      r2,r5                 ;1309
000024  a102              ADR      r1,|L16.48|
000026  2001              MOVS     r0,#1                 ;1309
000028  f7fffffe          BL       kdp_level_printf
00002c  2000              MOVS     r0,#0                 ;1311
00002e  bd70              POP      {r4-r6,pc}
;;;1313   
                          ENDP

                  |L16.48|
000030  53657420          DCB      "Set fr th: %d, lv th: %d\r\n",0
000034  66722074
000038  683a2025
00003c  642c206c
000040  76207468
000044  3a202564
000048  0d0a00  
00004b  00                DCB      0

                          AREA ||i.DSM_Uart_SavedImage||, CODE, READONLY, ALIGN=2

                  DSM_Uart_SavedImage PROC
;;;646    
;;;647    extern uint8_t DSM_Uart_SavedImage(uint8_t image_num, uint8_t image_size[4])
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;648    {
000004  460e              MOV      r6,r1
000006  0005              MOVS     r5,r0
;;;649        uint8_t ret = MR_SUCCESS;
000008  f04f0800          MOV      r8,#0
00000c  d004              BEQ      |L17.24|
;;;650        u32 img_size = 0;
;;;651    
;;;652    #ifdef KID_GET_SAVED_IMAGE
;;;653        int start_num = g_tSnapImgInfo.nStrNum;
;;;654        if(start_num > SNAP_IMG_MAX_ID / 2) {
;;;655            start_num -= SNAP_IMG_MAX_ID / 2;
;;;656            if(image_num <= SNAP_IMG_MAX_ID / 2) return MR_FAILED_INVALID_PARAM;
;;;657    
;;;658            image_num -= SNAP_IMG_MAX_ID / 2;
;;;659        }
;;;660        
;;;661        if(image_num == 0 || image_num > SNAP_IMG_MAX_ID / 2) return MR_FAILED_INVALID_PARAM;
;;;662    
;;;663        int real_idx = 0;
;;;664        if(image_num < start_num) {
;;;665            real_idx = image_num + (SNAP_IMG_MAX_ID / 2 - start_num);
;;;666        } else {
;;;667            real_idx = image_num - start_num;
;;;668        }
;;;669    
;;;670        dbg_msg_algo ("saving snap image:%d,%d,%d", image_num, real_idx, g_tSnapImgInfo.nStrNum);
;;;671        if(real_idx >= g_tSnapImgInfo.nImgCnt) {
;;;672            return MR_FAILED_INVALID_PARAM;
;;;673        }
;;;674    
;;;675        g_bUploadImageAllow = TRUE;
;;;676        int s_ret = 0;
;;;677    
;;;678        if(g_tSnapImgInfo.nStrNum > SNAP_IMG_MAX_ID / 2) { //RGB
;;;679            img_size = KDP_DDR_TEST_RGB_IMG_SIZE / (SNAP_IMG_X_STRIDE * SNAP_IMG_Y_STRIDE);
;;;680            s_ret = kl520_api_save_snap_img_addr(MIPI_CAM_RGB, real_idx, SNAP_IMG_X_STRIDE, SNAP_IMG_Y_STRIDE);
;;;681        } else { //NIR
;;;682            img_size = KDP_DDR_TEST_NIR_IMG_SIZE / (SNAP_IMG_X_STRIDE * SNAP_IMG_Y_STRIDE);
;;;683            s_ret = kl520_api_save_snap_img_addr(MIPI_CAM_NIR, real_idx, SNAP_IMG_X_STRIDE, SNAP_IMG_Y_STRIDE);
;;;684        }
;;;685        
;;;686        if(s_ret < 0) return MR_FAILED_STORE_ERR;
;;;687    
;;;688    #endif
;;;689    #ifdef KID_KN_GET_SAVED_IMAGE
;;;690        
;;;691        if(image_num != 0 && image_num != 1) return MR_FAILED_INVALID_PARAM;
00000e  2d01              CMP      r5,#1
000010  d002              BEQ      |L17.24|
000012  2006              MOVS     r0,#6
                  |L17.20|
;;;692        g_bUploadImageAllow = TRUE;
;;;693    
;;;694        int s_ret = kl520_api_save_snap_img_addr(image_num, 0, SNAP_IMG_X_STRIDE, SNAP_IMG_Y_STRIDE);
;;;695        if(s_ret < 0) return MR_FAILED_STORE_ERR;
;;;696        img_size = s_ret;
;;;697    #endif
;;;698    
;;;699        u32 tmp = kl_htonl(img_size);
;;;700        memcpy(image_size, &tmp, sizeof(tmp));
;;;701        
;;;702        cur_image_size = img_size;
;;;703        dbg_msg_console("image_num:%d, cur_image_size:%d",image_num, cur_image_size);
;;;704    
;;;705        return ret;
;;;706    }
000014  e8bd81f0          POP      {r4-r8,pc}
                  |L17.24|
000018  4c0c              LDR      r4,|L17.76|
00001a  2001              MOVS     r0,#1                 ;692
00001c  2100              MOVS     r1,#0                 ;694
00001e  71a0              STRB     r0,[r4,#6]            ;692
000020  7a23              LDRB     r3,[r4,#8]            ;694  ; SNAP_IMG_Y_STRIDE
000022  79e2              LDRB     r2,[r4,#7]            ;694  ; SNAP_IMG_X_STRIDE
000024  4628              MOV      r0,r5                 ;694
000026  f7fffffe          BL       kl520_api_save_snap_img_addr
00002a  2800              CMP      r0,#0                 ;695
00002c  da01              BGE      |L17.50|
00002e  2016              MOVS     r0,#0x16              ;695
000030  e7f0              B        |L17.20|
                  |L17.50|
000032  4607              MOV      r7,r0                 ;696
000034  f7fffffe          BL       kl_htonl
000038  6030              STR      r0,[r6,#0]            ;700
00003a  463b              MOV      r3,r7                 ;702
00003c  462a              MOV      r2,r5                 ;703
00003e  a104              ADR      r1,|L17.80|
000040  2001              MOVS     r0,#1                 ;703
000042  6167              STR      r7,[r4,#0x14]         ;703  ; cur_image_size
000044  f7fffffe          BL       kdp_level_printf
000048  4640              MOV      r0,r8                 ;705
00004a  e7e3              B        |L17.20|
;;;707    
                          ENDP

                  |L17.76|
                          DCD      ||.data||
                  |L17.80|
000050  696d6167          DCB      "image_num:%d, cur_image_size:%d\r\n",0
000054  655f6e75
000058  6d3a2564
00005c  2c206375
000060  725f696d
000064  6167655f
000068  73697a65
00006c  3a25640d
000070  0a00    
000072  00                DCB      0
000073  00                DCB      0

                          AREA ||i.DSM_Uart_SetDebugEncKey||, CODE, READONLY, ALIGN=2

                  DSM_Uart_SetDebugEncKey PROC
;;;1558   
;;;1559   extern uint8_t DSM_Uart_SetDebugEncKey(msg_enc_key_number_data key_number)
000000  b530              PUSH     {r4,r5,lr}
;;;1560   {
;;;1561       uint8_t ret = 0;
;;;1562       //wait KL to add specific fun.
;;;1563       memcpy(key_num, key_number.enc_key_number, sizeof(key_number.enc_key_number));
000002  4c05              LDR      r4,|L18.24|
000004  4605              MOV      r5,r0                 ;1560
000006  f1040c1c          ADD      r12,r4,#0x1c
00000a  61a5              STR      r5,[r4,#0x18]  ; key_num
00000c  e88c000e          STM      r12,{r1-r3}
000010  2000              MOVS     r0,#0                 ;1561
;;;1564       use_debug_key = true;
000012  2101              MOVS     r1,#1
000014  7161              STRB     r1,[r4,#5]
;;;1565       return ret;
;;;1566   }
000016  bd30              POP      {r4,r5,pc}
;;;1567   
                          ENDP

                  |L18.24|
                          DCD      ||.data||

                          AREA ||i.DSM_Uart_SetReleaseEncKey||, CODE, READONLY, ALIGN=2

                  DSM_Uart_SetReleaseEncKey PROC
;;;1541   
;;;1542   extern uint8_t DSM_Uart_SetReleaseEncKey(msg_enc_key_number_data key_number)
000000  b510              PUSH     {r4,lr}
;;;1543   {
;;;1544       uint8_t ret = 0;
;;;1545       //wait KL to add specific fun.
;;;1546       memcpy((void*)key_num, (void*)key_number.enc_key_number, sizeof(key_number.enc_key_number));
000002  4c11              LDR      r4,|L19.72|
000004  b08c              SUB      sp,sp,#0x30           ;1543
000006  f1040c18          ADD      r12,r4,#0x18
00000a  e88c000f          STM      r12,{r0-r3}
;;;1547       kl520_customer_info Cusinfo;
;;;1548       kl520_api_customer_get(&Cusinfo);
00000e  4668              MOV      r0,sp
000010  f7fffffe          BL       kl520_api_customer_get
;;;1549       if (memcmp(Cusinfo.nReleaseKey, key_num,KEY_SIZE))
000014  2210              MOVS     r2,#0x10
000016  f1040118          ADD      r1,r4,#0x18
00001a  a804              ADD      r0,sp,#0x10
00001c  f7fffffe          BL       memcmp
000020  b168              CBZ      r0,|L19.62|
;;;1550       {
;;;1551           dbg_msg_console("Save release key to flash");
000022  a10a              ADR      r1,|L19.76|
000024  2001              MOVS     r0,#1
000026  f7fffffe          BL       kdp_level_printf
00002a  f1040018          ADD      r0,r4,#0x18
00002e  f10d0c10          ADD      r12,sp,#0x10
000032  c80f              LDM      r0,{r0-r3}
000034  e88c000f          STM      r12,{r0-r3}
;;;1552           memcpy(Cusinfo.nReleaseKey, key_num,KEY_SIZE);
;;;1553           kl520_api_customer_write(&Cusinfo);
000038  4668              MOV      r0,sp
00003a  f7fffffe          BL       kl520_api_customer_write
                  |L19.62|
;;;1554       }
;;;1555       use_debug_key = false;
00003e  2000              MOVS     r0,#0
000040  7160              STRB     r0,[r4,#5]
;;;1556       return ret;
;;;1557   }
000042  b00c              ADD      sp,sp,#0x30
000044  bd10              POP      {r4,pc}
;;;1558   
                          ENDP

000046  0000              DCW      0x0000
                  |L19.72|
                          DCD      ||.data||
                  |L19.76|
00004c  53617665          DCB      "Save release key to flash\r\n",0
000050  2072656c
000054  65617365
000058  206b6579
00005c  20746f20
000060  666c6173
000064  680d0a00

                          AREA ||i.DSM_Uart_SnapImage||, CODE, READONLY, ALIGN=2

                  DSM_Uart_SnapImage PROC
;;;623    
;;;624    extern uint8_t DSM_Uart_SnapImage(msg_snap_img_data tInfo)
000000  b501              PUSH     {r0,lr}
;;;625    {
;;;626        dbg_msg_algo ("snap img:%d,%d.", tInfo.nStrNum, tInfo.nImgCnt);
;;;627    #ifdef KID_SNAP_IMAGE
;;;628        uint8_t cap_cnt = tInfo.nImgCnt ;
;;;629        if(cap_cnt == 0 || cap_cnt > SNAPSHOT_ADV_NUM) return MR_FAILED_INVALID_PARAM;
;;;630        if(tInfo.nStrNum > SNAP_IMG_MAX_ID || tInfo.nStrNum == 0) return MR_FAILED_INVALID_PARAM;
;;;631    #endif
;;;632    #ifdef KID_KN_SNAP_IMAGE
;;;633        uint8_t x_stride = tInfo.nImgCnt;
000002  f89d1000          LDRB     r1,[sp,#0]
;;;634        uint8_t y_stride = tInfo.nStrNum;
000006  f89d0001          LDRB     r0,[sp,#1]
;;;635        if(x_stride < 1 || x_stride > 10) return MR_FAILED_INVALID_PARAM;
00000a  1e4a              SUBS     r2,r1,#1
00000c  2a0a              CMP      r2,#0xa
00000e  d202              BCS      |L20.22|
;;;636        if(y_stride < 1 || y_stride > 10) return MR_FAILED_INVALID_PARAM;
000010  1e42              SUBS     r2,r0,#1
000012  2a0a              CMP      r2,#0xa
000014  d301              BCC      |L20.26|
                  |L20.22|
000016  2006              MOVS     r0,#6
;;;637        SNAP_IMG_X_STRIDE = x_stride;
;;;638        SNAP_IMG_Y_STRIDE = y_stride;
;;;639        tInfo.nImgCnt = 1;
;;;640        tInfo.nStrNum = 0; //hardcode
;;;641    #endif
;;;642    
;;;643        memcpy(&g_tSnapImgInfo, &tInfo, sizeof(tInfo));
;;;644        return MR_SUCCESS;
;;;645    }
000018  bd08              POP      {r3,pc}
                  |L20.26|
00001a  4a07              LDR      r2,|L20.56|
00001c  71d1              STRB     r1,[r2,#7]            ;637
00001e  7210              STRB     r0,[r2,#8]            ;638
000020  2001              MOVS     r0,#1                 ;639
000022  f88d0000          STRB     r0,[sp,#0]            ;639
000026  2000              MOVS     r0,#0                 ;640
000028  f88d0001          STRB     r0,[sp,#1]            ;640
00002c  f8bd0000          LDRH     r0,[sp,#0]            ;643
000030  81d0              STRH     r0,[r2,#0xe]          ;643
000032  2000              MOVS     r0,#0                 ;644
000034  bd08              POP      {r3,pc}
;;;646    
                          ENDP

000036  0000              DCW      0x0000
                  |L20.56|
                          DCD      ||.data||

                          AREA ||i.DSM_Uart_StartDebugMode||, CODE, READONLY, ALIGN=1

                  DSM_Uart_StartDebugMode PROC
;;;428    
;;;429    extern uint8_t DSM_Uart_StartDebugMode(uint8_t StartDebugMode)
000000  2000              MOVS     r0,#0
;;;430    {
;;;431        uint8_t ret = 0;
;;;432        //wait KL to add specific fun.
;;;433      return ret;
;;;434    }
000002  4770              BX       lr
;;;435    
                          ENDP


                          AREA ||i.DSM_Uart_StartOrStopDemoMode||, CODE, READONLY, ALIGN=2

                  DSM_Uart_StartOrStopDemoMode PROC
;;;1143   
;;;1144   extern uint8_t DSM_Uart_StartOrStopDemoMode(uint8_t Enable)
000000  b510              PUSH     {r4,lr}
;;;1145   {
000002  4601              MOV      r1,r0
;;;1146       uint8_t ret = 0;
000004  2400              MOVS     r4,#0
;;;1147   
;;;1148       if( Enable == TRUE )
;;;1149       {
;;;1150           g_bUserDemoMode = TRUE;
000006  4807              LDR      r0,|L22.36|
000008  2901              CMP      r1,#1                 ;1148
00000a  d007              BEQ      |L22.28|
;;;1151           dbg_msg_console("Enable DemoMode");
;;;1152       }
;;;1153       else
;;;1154       {
;;;1155           g_bUserDemoMode = FALSE;
00000c  2100              MOVS     r1,#0
00000e  7081              STRB     r1,[r0,#2]
;;;1156           dbg_msg_console("Disable DemoMode");
000010  a105              ADR      r1,|L22.40|
                  |L22.18|
000012  2001              MOVS     r0,#1
000014  f7fffffe          BL       kdp_level_printf
;;;1157       }
;;;1158   
;;;1159       //wait KL to add specific fun.
;;;1160     return ret;
000018  4620              MOV      r0,r4
;;;1161   }
00001a  bd10              POP      {r4,pc}
                  |L22.28|
00001c  2101              MOVS     r1,#1                 ;1150
00001e  7081              STRB     r1,[r0,#2]            ;1150
000020  a106              ADR      r1,|L22.60|
000022  e7f6              B        |L22.18|
;;;1162   
                          ENDP

                  |L22.36|
                          DCD      ||.data||
                  |L22.40|
000028  44697361          DCB      "Disable DemoMode\r\n",0
00002c  626c6520
000030  44656d6f
000034  4d6f6465
000038  0d0a00  
00003b  00                DCB      0
                  |L22.60|
00003c  456e6162          DCB      "Enable DemoMode\r\n",0
000040  6c652044
000044  656d6f4d
000048  6f64650d
00004c  0a00    
00004e  00                DCB      0
00004f  00                DCB      0

                          AREA ||i.DSM_Uart_StartOta||, CODE, READONLY, ALIGN=2

                  DSM_Uart_StartOta PROC
;;;1580   //-----0xF8-0xFF OTA
;;;1581   extern uint8_t DSM_Uart_StartOta(uint8_t v_primary, uint8_t v_secondary,uint8_t v_revision)//lmm-add
000000  e92d43fe          PUSH     {r1-r9,lr}
;;;1582   {
000004  4681              MOV      r9,r0
000006  4617              MOV      r7,r2
000008  4688              MOV      r8,r1
;;;1583       //read version from flash
;;;1584       struct fw_misc_data fw_misc;
;;;1585       kl520_api_get_scpu_version(&fw_misc);
00000a  a801              ADD      r0,sp,#4
00000c  f7fffffe          BL       kl520_api_get_scpu_version
;;;1586   
;;;1587       //u8 cur_release_v = fw_misc.version[0];
;;;1588       u8 cur_v_primary = fw_misc.version[1];
000010  f89d6005          LDRB     r6,[sp,#5]
;;;1589       u8 cur_v_secondary = fw_misc.version[2];
000014  f89d5006          LDRB     r5,[sp,#6]
;;;1590       u8 cur_v_revision = fw_misc.version[3];
000018  f89d4007          LDRB     r4,[sp,#7]
;;;1591   
;;;1592       //check version
;;;1593       dbg_msg_console("Current version: %d.%d.%d", cur_v_primary, cur_v_secondary, cur_v_revision);
00001c  462b              MOV      r3,r5
00001e  4632              MOV      r2,r6
000020  a116              ADR      r1,|L23.124|
000022  2001              MOVS     r0,#1
000024  9400              STR      r4,[sp,#0]
000026  f7fffffe          BL       kdp_level_printf
;;;1594       dbg_msg_console("Ota version:     %d.%d.%d", v_primary, v_secondary, v_revision);
00002a  4643              MOV      r3,r8
00002c  464a              MOV      r2,r9
00002e  a11a              ADR      r1,|L23.152|
000030  2001              MOVS     r0,#1
000032  9700              STR      r7,[sp,#0]
000034  f7fffffe          BL       kdp_level_printf
;;;1595       if ((v_secondary == cur_v_secondary) && (v_primary == cur_v_primary) && (v_revision == cur_v_revision))
000038  45a8              CMP      r8,r5
00003a  d10a              BNE      |L23.82|
00003c  45b1              CMP      r9,r6
00003e  d108              BNE      |L23.82|
000040  42a7              CMP      r7,r4
000042  d106              BNE      |L23.82|
;;;1596       {
;;;1597           dbg_msg_console ("version is same!");
000044  a11b              ADR      r1,|L23.180|
000046  2001              MOVS     r0,#1
000048  f7fffffe          BL       kdp_level_printf
;;;1598           return MR_FAILED_INVALID_PARAM;
00004c  2006              MOVS     r0,#6
                  |L23.78|
;;;1599       }
;;;1600       
;;;1601   #if ( UART_PROTOCOL_VERSION >= 0x201 )
;;;1602       //2: check update mode or version
;;;1603       if ( v_primary == KDP_OTA_VERSION )
;;;1604       {
;;;1605           ota_update_info.scpu_update = v_revision == cur_v_revision? NO : YES;//v_revision;
;;;1606           ota_update_info.ncpu_update = v_secondary == cur_v_secondary? NO : YES;//v_secondary;
;;;1607           ota_update_info.ui_update = NO;//v_primary;
;;;1608   
;;;1609           if ( ota_update_info.scpu_update == NO )  //same version or update ncpu only
;;;1610           {
;;;1611               return MR_FAILED_INVALID_PARAM;
;;;1612           }
;;;1613       }
;;;1614       else if ( v_primary == KDP_OTA_SCPU )
;;;1615       {
;;;1616           ota_update_info.scpu_update = YES;
;;;1617           ota_update_info.ncpu_update = NO;
;;;1618           ota_update_info.ui_update = NO;
;;;1619       }
;;;1620       else if ( v_primary == KDP_OTA_SCPU_NCPU )
;;;1621       {
;;;1622           ota_update_info.scpu_update = YES;
;;;1623           ota_update_info.ncpu_update = YES;
;;;1624           ota_update_info.ui_update = NO;
;;;1625       }
;;;1626       else if ( v_primary == KDP_OTA_SCPU_UI )
;;;1627       {
;;;1628           ota_update_info.scpu_update = YES;
;;;1629           ota_update_info.ncpu_update = NO;
;;;1630           ota_update_info.ui_update = YES;
;;;1631       }
;;;1632       else
;;;1633       {
;;;1634           return MR_FAILED_INVALID_PARAM;
;;;1635       }
;;;1636   #else
;;;1637       ota_update_info.scpu_update = NO;
;;;1638       ota_update_info.ncpu_update = NO;
;;;1639       ota_update_info.ui_update = NO;
;;;1640   #endif
;;;1641   
;;;1642       ota_update_info.ota_process = OTA_START_PROCESS_FLAG; // dsm ota start
;;;1643       ota_update_info.packet_id = 0;
;;;1644       ota_update_info.ddr_addr_idx = 0;
;;;1645       ota_update_info.ota_status = OTA_STATUS_START;
;;;1646       
;;;1647       g_nEncryptionMode = NO_ENCRYPTION;
;;;1648   
;;;1649       return MR_SUCCESS;
;;;1650   }
00004e  e8bd83fe          POP      {r1-r9,pc}
                  |L23.82|
000052  481d              LDR      r0,|L23.200|
000054  2100              MOVS     r1,#0                 ;1637
000056  2204              MOVS     r2,#4                 ;1642
000058  f880105e          STRB     r1,[r0,#0x5e]         ;1637
00005c  f880105d          STRB     r1,[r0,#0x5d]         ;1638
000060  f880105c          STRB     r1,[r0,#0x5c]         ;1639
000064  f8802060          STRB     r2,[r0,#0x60]         ;1642
000068  8741              STRH     r1,[r0,#0x3a]         ;1643
00006a  2201              MOVS     r2,#1                 ;1645
00006c  6301              STR      r1,[r0,#0x30]         ;1645  ; ota_update_info
00006e  f8802061          STRB     r2,[r0,#0x61]         ;1645
000072  4816              LDR      r0,|L23.204|
000074  7101              STRB     r1,[r0,#4]            ;1647
000076  4608              MOV      r0,r1                 ;1649
000078  e7e9              B        |L23.78|
;;;1651   
                          ENDP

00007a  0000              DCW      0x0000
                  |L23.124|
00007c  43757272          DCB      "Current version: %d.%d.%d\r\n",0
000080  656e7420
000084  76657273
000088  696f6e3a
00008c  2025642e
000090  25642e25
000094  640d0a00
                  |L23.152|
000098  4f746120          DCB      "Ota version:     %d.%d.%d\r\n",0
00009c  76657273
0000a0  696f6e3a
0000a4  20202020
0000a8  2025642e
0000ac  25642e25
0000b0  640d0a00
                  |L23.180|
0000b4  76657273          DCB      "version is same!\r\n",0
0000b8  696f6e20
0000bc  69732073
0000c0  616d6521
0000c4  0d0a00  
0000c7  00                DCB      0
                  |L23.200|
                          DCD      ||.bss||
                  |L23.204|
                          DCD      ||.data||

                          AREA ||i.DSM_Uart_StopOta||, CODE, READONLY, ALIGN=2

                  DSM_Uart_StopOta PROC
;;;2361   
;;;2362   extern uint8_t DSM_Uart_StopOta(void)
000000  4908              LDR      r1,|L24.36|
;;;2363   {
;;;2364       uint8_t ret = MR_SUCCESS;
000002  2000              MOVS     r0,#0
;;;2365       
;;;2366       if (ota_update_info.ota_status == OTA_STATUS_FINAL)
000004  f8912061          LDRB     r2,[r1,#0x61]  ; ota_update_info
000008  2a04              CMP      r2,#4
00000a  d009              BEQ      |L24.32|
;;;2367       {
;;;2368           ret = MR_REJECTED;
;;;2369       }
;;;2370       else
;;;2371       {
;;;2372           ota_update_info.ota_process = NO;
00000c  2200              MOVS     r2,#0
00000e  f8812060          STRB     r2,[r1,#0x60]
;;;2373           ota_update_info.packet_id = 0;
000012  874a              STRH     r2,[r1,#0x3a]
;;;2374           ota_update_info.ddr_addr_idx = 0;
;;;2375           ota_update_info.total_pid = 0;
000014  630a              STR      r2,[r1,#0x30]  ; ota_update_info
000016  870a              STRH     r2,[r1,#0x38]
;;;2376           ota_update_info.total_update_size = 0;
;;;2377           ota_update_info.ota_status = OTA_STATUS_IDLE;
000018  634a              STR      r2,[r1,#0x34]  ; ota_update_info
00001a  f8812061          STRB     r2,[r1,#0x61]
;;;2378       }
;;;2379       
;;;2380       return ret;
;;;2381   }
00001e  4770              BX       lr
                  |L24.32|
000020  2001              MOVS     r0,#1                 ;2368
000022  4770              BX       lr
;;;2382   
                          ENDP

                  |L24.36|
                          DCD      ||.bss||

                          AREA ||i.DSM_Uart_SwitchPart||, CODE, READONLY, ALIGN=2

                  DSM_Uart_SwitchPart PROC
;;;1375   
;;;1376   uint8_t DSM_Uart_SwitchPart(uint8_t nSwPart, uint8_t* nCurPart)
000000  b570              PUSH     {r4-r6,lr}
;;;1377   {
000002  460d              MOV      r5,r1
000004  4606              MOV      r6,r0
;;;1378       uint8_t ret = MR_SUCCESS;
000006  2400              MOVS     r4,#0
;;;1379       *nCurPart = (u8)ota_get_scpu_flag_status();
000008  f7fffffe          BL       ota_get_scpu_flag_status
00000c  b2c2              UXTB     r2,r0
00000e  702a              STRB     r2,[r5,#0]
;;;1380   
;;;1381       dbg_msg_console("Current/Switch part: %d/%d",*nCurPart, nSwPart);
000010  4633              MOV      r3,r6
000012  a10f              ADR      r1,|L25.80|
000014  2001              MOVS     r0,#1
000016  f7fffffe          BL       kdp_level_printf
;;;1382   
;;;1383       if ( nSwPart == SCPU_PART_B )
00001a  2e01              CMP      r6,#1
00001c  d007              BEQ      |L25.46|
;;;1384       {
;;;1385           if( *nCurPart == SCPU_PART_A )
;;;1386           {
;;;1387               SwitchScpu();   //Stop in this function...
;;;1388           }
;;;1389           else
;;;1390           {
;;;1391               dbg_msg_console("Already in B");
;;;1392               ret = MR_REJECTED;
;;;1393           }
;;;1394       }
;;;1395       else if( nSwPart == SCPU_PART_A )    //  B(1) to A(0)
00001e  b156              CBZ      r6,|L25.54|
;;;1396       {
;;;1397           if( *nCurPart == SCPU_PART_B )
;;;1398           {
;;;1399               SwitchScpu();   //Stop in this function...
;;;1400           }
;;;1401           else
;;;1402           {
;;;1403               dbg_msg_console("Already in A");
;;;1404               ret = MR_REJECTED;
;;;1405           }
;;;1406       }
;;;1407       else
;;;1408       {
;;;1409           dbg_msg_console("Invalid parameter");
000020  a113              ADR      r1,|L25.112|
000022  2001              MOVS     r0,#1
000024  f7fffffe          BL       kdp_level_printf
;;;1410           ret = MR_FAILED_INVALID_PARAM;
000028  2406              MOVS     r4,#6
                  |L25.42|
;;;1411       }
;;;1412   
;;;1413       return ret;
00002a  4620              MOV      r0,r4
;;;1414   }
00002c  bd70              POP      {r4-r6,pc}
                  |L25.46|
00002e  7828              LDRB     r0,[r5,#0]            ;1385
000030  b150              CBZ      r0,|L25.72|
000032  a114              ADR      r1,|L25.132|
000034  e003              B        |L25.62|
                  |L25.54|
000036  7828              LDRB     r0,[r5,#0]            ;1397
000038  2801              CMP      r0,#1                 ;1397
00003a  d005              BEQ      |L25.72|
00003c  a115              ADR      r1,|L25.148|
                  |L25.62|
00003e  2001              MOVS     r0,#1                 ;1403
000040  f7fffffe          BL       kdp_level_printf
000044  2401              MOVS     r4,#1                 ;1404
000046  e7f0              B        |L25.42|
                  |L25.72|
000048  f7fffffe          BL       SwitchScpu
00004c  e7ed              B        |L25.42|
;;;1415   
                          ENDP

00004e  0000              DCW      0x0000
                  |L25.80|
000050  43757272          DCB      "Current/Switch part: %d/%d\r\n",0
000054  656e742f
000058  53776974
00005c  63682070
000060  6172743a
000064  2025642f
000068  25640d0a
00006c  00      
00006d  00                DCB      0
00006e  00                DCB      0
00006f  00                DCB      0
                  |L25.112|
000070  496e7661          DCB      "Invalid parameter\r\n",0
000074  6c696420
000078  70617261
00007c  6d657465
000080  720d0a00
                  |L25.132|
000084  416c7265          DCB      "Already in B\r\n",0
000088  61647920
00008c  696e2042
000090  0d0a00  
000093  00                DCB      0
                  |L25.148|
000094  416c7265          DCB      "Already in A\r\n",0
000098  61647920
00009c  696e2041
0000a0  0d0a00  
0000a3  00                DCB      0

                          AREA ||i.DSM_Uart_SystemReset||, CODE, READONLY, ALIGN=1

                  DSM_Uart_SystemReset PROC
;;;472    
;;;473    extern uint8_t DSM_Uart_SystemReset(void)//lmm-add
000000  b510              PUSH     {r4,lr}
;;;474    {
;;;475        uint8_t ret = 0;
000002  2400              MOVS     r4,#0
;;;476        //wait KL to add specific fun.
;;;477        kdrv_power_sw_reset();
000004  f7fffffe          BL       power_mgr_sw_reset
;;;478        return ret;
000008  4620              MOV      r0,r4
;;;479    }
00000a  bd10              POP      {r4,pc}
;;;480    
                          ENDP


                          AREA ||i.DSM_Uart_UploadImage||, CODE, READONLY, ALIGN=2

                  DSM_Uart_UploadImage PROC
;;;707    
;;;708    extern uint8_t DSM_Uart_UploadImage(uint32_t upload_image_offset, uint8_t** upload_image_data, uint32_t* image_size)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;709    {
;;;710        uint8_t ret = MR_SUCCESS;
;;;711        u32 img_addr = KDP_DDR_TEST_RGB_IMG_ADDR;
;;;712    
;;;713        if((upload_image_offset + *image_size) >= cur_image_size) {
000004  4f11              LDR      r7,|L27.76|
000006  4606              MOV      r6,r0                 ;709
000008  4689              MOV      r9,r1                 ;709
00000a  6810              LDR      r0,[r2,#0]
00000c  6979              LDR      r1,[r7,#0x14]  ; cur_image_size
00000e  2400              MOVS     r4,#0                 ;710
000010  f8df8034          LDR      r8,|L27.72|
000014  4430              ADD      r0,r0,r6
000016  4615              MOV      r5,r2                 ;709
000018  4288              CMP      r0,r1
00001a  d306              BCC      |L27.42|
;;;714            dbg_msg_console("upload image end");
00001c  a10c              ADR      r1,|L27.80|
00001e  2001              MOVS     r0,#1
000020  f7fffffe          BL       kdp_level_printf
;;;715            *image_size = cur_image_size - upload_image_offset;
000024  6978              LDR      r0,[r7,#0x14]  ; cur_image_size
000026  1b80              SUBS     r0,r0,r6
000028  6028              STR      r0,[r5,#0]
                  |L27.42|
;;;716        }
;;;717    
;;;718        if ( g_bUploadImageAllow ) {
00002a  79b8              LDRB     r0,[r7,#6]  ; g_bUploadImageAllow
00002c  b140              CBZ      r0,|L27.64|
;;;719            if ( *image_size != 0) {
00002e  6828              LDR      r0,[r5,#0]
000030  b120              CBZ      r0,|L27.60|
;;;720                img_addr += upload_image_offset;
000032  eb080006          ADD      r0,r8,r6
;;;721                *upload_image_data = (UINT8 *)img_addr;
000036  f8c90000          STR      r0,[r9,#0]
00003a  e002              B        |L27.66|
                  |L27.60|
;;;722            } else {
;;;723                ret = MR_FAILED_BUF_OVERFLOW;
00003c  2419              MOVS     r4,#0x19
00003e  e000              B        |L27.66|
                  |L27.64|
;;;724            }
;;;725        } else {
;;;726            ret = MR_FAILED_NO_IDX;
000040  2418              MOVS     r4,#0x18
                  |L27.66|
;;;727        }
;;;728    
;;;729        dbg_msg_algo("uploading img:%x, from:%d, size:%d.", img_addr, upload_image_offset, *image_size);
;;;730        return ret;
000042  4620              MOV      r0,r4
;;;731    }
000044  e8bd87f0          POP      {r4-r10,pc}
;;;732    
                          ENDP

                  |L27.72|
                          DCD      0x61e30000
                  |L27.76|
                          DCD      ||.data||
                  |L27.80|
000050  75706c6f          DCB      "upload image end\r\n",0
000054  61642069
000058  6d616765
00005c  20656e64
000060  0d0a00  
000063  00                DCB      0

                          AREA ||i.KDP_Enroll_Add_Face_Type_Set||, CODE, READONLY, ALIGN=2

                  KDP_Enroll_Add_Face_Type_Set PROC
;;;490    //-----0x10-0x3F Function
;;;491    extern uint8_t KDP_Enroll_Add_Face_Type_Set(kl520_face_add_mode eType)
000000  2801              CMP      r0,#1
;;;492    {
000002  d000              BEQ      |L28.6|
;;;493        if ( eType != FACE_ADD_MODE_1_FACE )
;;;494        {
;;;495            eType = FACE_ADD_MODE_5_FACES;
000004  2002              MOVS     r0,#2
                  |L28.6|
;;;496        }
;;;497    
;;;498        g_eEnrollAddFaceTypeMode = eType;
000006  4904              LDR      r1,|L28.24|
;;;499    
;;;500        if (FACE_ADD_MODE_1_FACE == g_eEnrollAddFaceTypeMode)
000008  2801              CMP      r0,#1
00000a  70c8              STRB     r0,[r1,#3]            ;498
00000c  d101              BNE      |L28.18|
;;;501            g_eFaceDirState = 0;
00000e  2000              MOVS     r0,#0
000010  7008              STRB     r0,[r1,#0]
                  |L28.18|
;;;502    
;;;503        return MR_SUCCESS;
000012  2000              MOVS     r0,#0
;;;504    }
000014  4770              BX       lr
;;;505    
                          ENDP

000016  0000              DCW      0x0000
                  |L28.24|
                          DCD      ||.data||

                          AREA ||i.KDP_Uart_MP_Calibration||, CODE, READONLY, ALIGN=1

                  KDP_Uart_MP_Calibration PROC
;;;1433   #ifdef KID_MP_CALIBRATION
;;;1434   uint8_t KDP_Uart_MP_Calibration(u8 eMode)
000000  b510              PUSH     {r4,lr}
;;;1435   {
000002  0001              MOVS     r1,r0
;;;1436       uint8_t ret = MR_SUCCESS;
;;;1437   
;;;1438       u8 tm = 10; //default 10
000004  f04f000a          MOV      r0,#0xa
000008  d000              BEQ      |L29.12|
;;;1439       if(eMode != 0) tm = eMode; //mp timeout value
00000a  4608              MOV      r0,r1
                  |L29.12|
;;;1440       ret = kl520_engineering_calibration(tm, NULL);
00000c  2100              MOVS     r1,#0
00000e  f7fffffe          BL       kl520_engineering_calibration
000012  f01000ff          ANDS     r0,r0,#0xff
;;;1441   
;;;1442       if ( ret != MR_SUCCESS )
000016  d000              BEQ      |L29.26|
;;;1443       {
;;;1444           ret = MR_REJECTED;
000018  2001              MOVS     r0,#1
                  |L29.26|
;;;1445       }
;;;1446   
;;;1447       return ret;
;;;1448   }
00001a  bd10              POP      {r4,pc}
;;;1449   #endif
                          ENDP


                          AREA ||i.KDP_clr_mass_data_header||, CODE, READONLY, ALIGN=2

                  KDP_clr_mass_data_header PROC
;;;837    
;;;838    void KDP_clr_mass_data_header(void)
000000  2119              MOVS     r1,#0x19
;;;839    {
;;;840        memset(&g_tImpExpMassDataPkgInfo, 0, sizeof(g_tImpExpMassDataPkgInfo));
000002  4801              LDR      r0,|L30.8|
000004  f7ffbffe          B.W      __aeabi_memclr4
;;;841    }
;;;842    
                          ENDP

                  |L30.8|
                          DCD      ||.bss||+0x6c

                          AREA ||i.KDP_imp_fm_inejct_data||, CODE, READONLY, ALIGN=2

                  KDP_imp_fm_inejct_data PROC
;;;812    
;;;813    void KDP_imp_fm_inejct_data(void)
000000  4808              LDR      r0,|L31.36|
;;;814    {
;;;815        if ( g_tImpExpMassDataPkgInfo.nReadyType == DATA_READY_TYPE_IMP_FM )
000002  7dc1              LDRB     r1,[r0,#0x17]  ; g_tImpExpMassDataPkgInfo
000004  2920              CMP      r1,#0x20
000006  d10b              BNE      |L31.32|
;;;816        {
;;;817    #if ( CFG_LW3D_TYPE == CFG_LW3D_NORMAL )
;;;818            if ( g_tImpExpMassDataPkgInfo.nExtData == KDP_IMP_FM_RGB )
;;;819            {
;;;820                kl520_api_ap_com_import_fm_r1_inject();
;;;821            }
;;;822            else if ( g_tImpExpMassDataPkgInfo.nExtData == KDP_IMP_FM_NIR )
;;;823    #else
;;;824            if ( ( g_tImpExpMassDataPkgInfo.nExtData == KDP_IMP_FM_RGB_TO_NIR ) || 
000008  f8b0000f          LDRH     r0,[r0,#0xf]  ; g_tImpExpMassDataPkgInfo
00000c  2801              CMP      r0,#1
00000e  d005              BEQ      |L31.28|
;;;825                ( g_tImpExpMassDataPkgInfo.nExtData == KDP_IMP_FM_NIR_TO_NIR ) )
000010  2806              CMP      r0,#6
000012  d003              BEQ      |L31.28|
;;;826    #endif
;;;827            {
;;;828                kl520_api_ap_com_import_fm_n1_inject();
;;;829            }
;;;830            else if ( g_tImpExpMassDataPkgInfo.nExtData == KDP_IMP_FM_RGB_NIR )
000014  2802              CMP      r0,#2
000016  d103              BNE      |L31.32|
;;;831            {
;;;832                kl520_api_ap_com_import_fm_r1n1_inject();
000018  f7ffbffe          B.W      kl520_api_ap_com_import_fm_r1n1_inject
                  |L31.28|
00001c  f7ffbffe          B.W      kl520_api_ap_com_import_fm_n1_inject
                  |L31.32|
;;;833            }
;;;834        }
;;;835    }
000020  4770              BX       lr
;;;836    
                          ENDP

000022  0000              DCW      0x0000
                  |L31.36|
                          DCD      ||.bss||+0x6c

                          AREA ||i.KDP_imp_mass_data||, CODE, READONLY, ALIGN=2

                  KDP_imp_mass_data PROC
;;;969    #ifdef KID_IMP_FM_DATA
;;;970    void KDP_imp_mass_data(msg_mass_data_pkg* tInfo, u8 eCMD)
000000  e92d43fe          PUSH     {r1-r9,lr}
;;;971    {
000004  4688              MOV      r8,r1
000006  4607              MOV      r7,r0
;;;972        imp_exp_mass_data_info_t* ptr = &g_tImpExpMassDataPkgInfo;
000008  4c3a              LDR      r4,|L32.244|
;;;973        u32 nPkgIdx  = StreamsToBigEndU16(&tInfo->nPkgIdx[0]);
00000a  f7fffffe          BL       StreamsToBigEndU16
00000e  4605              MOV      r5,r0
;;;974        u16 nPkgSize = StreamsToBigEndU16(&tInfo->nPkgSize[0]);
000010  1cb8              ADDS     r0,r7,#2
000012  f7fffffe          BL       StreamsToBigEndU16
000016  4606              MOV      r6,r0
;;;975        u8  nMrState = MR_SUCCESS;
;;;976    
;;;977        if ( ( ptr->eType & MASS_DATA_MODE_MASK ) == MASS_DATA_IMP_MASK ) { //Import mode
000018  7ba0              LDRB     r0,[r4,#0xe]
00001a  2103              MOVS     r1,#3
00001c  ebb11f10          CMP      r1,r0,LSR #4
000020  d13e              BNE      |L32.160|
;;;978            dbg_msg_console("pkt idx:%d, total num:%d, pkt size:%d.", nPkgIdx, ptr->nTotPkgNum, nPkgSize);
000022  9600              STR      r6,[sp,#0]
000024  f8d43002          LDR      r3,[r4,#2]
000028  462a              MOV      r2,r5
00002a  a133              ADR      r1,|L32.248|
00002c  2001              MOVS     r0,#1
00002e  f7fffffe          BL       kdp_level_printf
;;;979    
;;;980            if ( ptr->bFinal == TRUE )
000032  7e20              LDRB     r0,[r4,#0x18]
000034  2801              CMP      r0,#1
000036  d018              BEQ      |L32.106|
;;;981            {
;;;982                nMrState = MR_FAILED_EXISTED_USER;
;;;983            } else if ( ( nPkgIdx <= ptr->nPkgCnt ) &&
000038  f8d4000a          LDR      r0,[r4,#0xa]
00003c  42a8              CMP      r0,r5
00003e  d32d              BCC      |L32.156|
;;;984                      ( ( ( nPkgIdx != ( ptr->nTotPkgNum-1 ) ) && ( nPkgSize == ptr->nStdPkgSize ) ) ||
000040  f8d40002          LDR      r0,[r4,#2]
000044  1e40              SUBS     r0,r0,#1
000046  42a8              CMP      r0,r5
000048  d002              BEQ      |L32.80|
00004a  8821              LDRH     r1,[r4,#0]
00004c  42b1              CMP      r1,r6
00004e  d008              BEQ      |L32.98|
                  |L32.80|
;;;985                        ( ( nPkgIdx == ( ptr->nTotPkgNum-1 ) ) && ( nPkgSize == ( ptr->nTotPkgSize - nPkgIdx*ptr->nStdPkgSize ) ) ) ) ) {
000050  42a8              CMP      r0,r5
000052  d123              BNE      |L32.156|
000054  f8d41006          LDR      r1,[r4,#6]
000058  8822              LDRH     r2,[r4,#0]
00005a  fb051112          MLS      r1,r5,r2,r1
00005e  42b1              CMP      r1,r6
000060  d11c              BNE      |L32.156|
                  |L32.98|
;;;986                if ( ( eCMD == KID_IMP_FM_DATA ) && ( ptr->eType == MASS_DATA_IMP_FM ) )
000062  f1b80f75          CMP      r8,#0x75
000066  d002              BEQ      |L32.110|
000068  e004              B        |L32.116|
                  |L32.106|
00006a  2634              MOVS     r6,#0x34              ;982
00006c  e019              B        |L32.162|
                  |L32.110|
00006e  7ba1              LDRB     r1,[r4,#0xe]
000070  2932              CMP      r1,#0x32
000072  d001              BEQ      |L32.120|
                  |L32.116|
;;;987                {
;;;988                    nMrState = kl520_api_ap_com_import_fm_mode_split(nPkgIdx, nPkgSize, ( ptr->nTotPkgNum-1 ), ptr->nStdPkgSize, 
;;;989                        ptr->nTotPkgSize, tInfo->pDataHeader, 0);
;;;990                    nMrState = KDP_imp_mass_data_result_middleware_process(nMrState);
;;;991                } else {
;;;992                    nMrState = MR_FAILED_INVALID_CMD;
000074  26ff              MOVS     r6,#0xff
000076  e014              B        |L32.162|
                  |L32.120|
000078  88e2              LDRH     r2,[r4,#6]            ;988
00007a  6879              LDR      r1,[r7,#4]            ;988
00007c  b292              UXTH     r2,r2                 ;988
00007e  9200              STR      r2,[sp,#0]            ;988
000080  2300              MOVS     r3,#0                 ;988
000082  e9cd1301          STRD     r1,r3,[sp,#4]         ;988
000086  b282              UXTH     r2,r0                 ;988
000088  8823              LDRH     r3,[r4,#0]            ;988
00008a  4628              MOV      r0,r5                 ;988
00008c  4631              MOV      r1,r6                 ;988
00008e  f7fffffe          BL       kl520_api_ap_com_import_fm_mode_split
000092  b2c0              UXTB     r0,r0                 ;988
000094  f7fffffe          BL       KDP_imp_mass_data_result_middleware_process
000098  4606              MOV      r6,r0                 ;990
00009a  e002              B        |L32.162|
                  |L32.156|
;;;993                }
;;;994            } else {
;;;995                nMrState = MR_FAILED_INVALID_PARAM;
00009c  2606              MOVS     r6,#6
00009e  e000              B        |L32.162|
                  |L32.160|
;;;996            }
;;;997        } else {
;;;998            nMrState = MR_FAILED_MASS_DATA_HEAD_EMPTY;
0000a0  2630              MOVS     r6,#0x30
                  |L32.162|
;;;999        }
;;;1000   
;;;1001       send_exp_mass_data_reply_msg(nMrState, eCMD, 0, 0);
0000a2  2300              MOVS     r3,#0
0000a4  461a              MOV      r2,r3
0000a6  4641              MOV      r1,r8
0000a8  4630              MOV      r0,r6
0000aa  f7fffffe          BL       send_exp_mass_data_reply_msg
;;;1002   
;;;1003       if ( ( nMrState == MR_SUCCESS ) || ( nMrState == MR_CONTIUNOUS ) ) {
0000ae  b10e              CBZ      r6,|L32.180|
0000b0  2e36              CMP      r6,#0x36
0000b2  d11d              BNE      |L32.240|
                  |L32.180|
;;;1004           if ( nPkgIdx == ptr->nPkgCnt ) {
0000b4  f8d4000a          LDR      r0,[r4,#0xa]
0000b8  42a8              CMP      r0,r5
0000ba  d109              BNE      |L32.208|
0000bc  1c40              ADDS     r0,r0,#1
;;;1005               ptr->nPkgCnt++;
0000be  f8c4000a          STR      r0,[r4,#0xa]
;;;1006   
;;;1007               if ( ptr->nPkgCnt == ptr->nTotPkgNum ) {
0000c2  f8d41002          LDR      r1,[r4,#2]
0000c6  4288              CMP      r0,r1
0000c8  d102              BNE      |L32.208|
;;;1008                   ptr->bFinal = TRUE;
0000ca  2001              MOVS     r0,#1
0000cc  7620              STRB     r0,[r4,#0x18]
0000ce  e002              B        |L32.214|
                  |L32.208|
;;;1009               }
;;;1010           }
;;;1011   
;;;1012           if ( ptr->bFinal == TRUE ) {
0000d0  7e20              LDRB     r0,[r4,#0x18]
0000d2  2801              CMP      r0,#1
0000d4  d10c              BNE      |L32.240|
                  |L32.214|
;;;1013               if ( eCMD == KID_IMP_FM_DATA ) {
0000d6  f1b80f75          CMP      r8,#0x75
0000da  d006              BEQ      |L32.234|
;;;1014                   ptr->nReadyType = DATA_READY_TYPE_IMP_FM;
;;;1015               } else {
;;;1016                   KDP_clr_mass_data_header();
0000dc  f7fffffe          BL       KDP_clr_mass_data_header
                  |L32.224|
;;;1017               }
;;;1018               send_exp_mass_data_done_note_msg(MR_SUCCESS);
0000e0  e8bd43fe          POP      {r1-r9,lr}
0000e4  2000              MOVS     r0,#0
0000e6  f7ffbffe          B.W      send_exp_mass_data_done_note_msg
                  |L32.234|
0000ea  2020              MOVS     r0,#0x20              ;1014
0000ec  75e0              STRB     r0,[r4,#0x17]         ;1014
0000ee  e7f7              B        |L32.224|
                  |L32.240|
;;;1019           }
;;;1020       }
;;;1021   }
0000f0  e8bd83fe          POP      {r1-r9,pc}
;;;1022   #endif
                          ENDP

                  |L32.244|
                          DCD      ||.bss||+0x6c
                  |L32.248|
0000f8  706b7420          DCB      "pkt idx:%d, total num:%d, pkt size:%d.\r\n",0
0000fc  6964783a
000100  25642c20
000104  746f7461
000108  6c206e75
00010c  6d3a2564
000110  2c20706b
000114  74207369
000118  7a653a25
00011c  642e0d0a
000120  00      
000121  00                DCB      0
000122  00                DCB      0
000123  00                DCB      0

                          AREA ||i.KDP_imp_mass_data_result_middleware_process||, CODE, READONLY, ALIGN=1

                  KDP_imp_mass_data_result_middleware_process PROC
;;;785    
;;;786    u8 KDP_imp_mass_data_result_middleware_process(u8 nRet)
000000  2800              CMP      r0,#0
;;;787    {
000002  d008              BEQ      |L33.22|
;;;788        if ( nRet == IMP_SUCCESS )
;;;789        {
;;;790            nRet = MR_SUCCESS;
;;;791        }
;;;792        else if ( nRet == IMP_CONTIUNOUS )
000004  2801              CMP      r0,#1
000006  d007              BEQ      |L33.24|
;;;793        {
;;;794            nRet = MR_CONTIUNOUS;
;;;795        }
;;;796        else if ( nRet == IMP_FAIL_IDX_EXISTED_USER )
000008  2802              CMP      r0,#2
00000a  d007              BEQ      |L33.28|
;;;797        {
;;;798            nRet = MR_FAILED_EXISTED_USER;
;;;799        }
;;;800        else if ( nRet == IMP_FAIL_DB_ERR )
00000c  2803              CMP      r0,#3
00000e  d007              BEQ      |L33.32|
;;;801        {
;;;802            nRet = MR_FAILED_MASS_DATA_DB_ABNORMAL;
;;;803        }
;;;804        else if ( nRet == IMP_FAIL_FM_ERR )
000010  2804              CMP      r0,#4
000012  d100              BNE      |L33.22|
;;;805        {
;;;806            nRet = MR_FAILED_MASS_DATA_FM_ABNORMAL;
000014  2032              MOVS     r0,#0x32
                  |L33.22|
;;;807        }
;;;808    
;;;809        return nRet;
;;;810    }
000016  4770              BX       lr
                  |L33.24|
000018  2036              MOVS     r0,#0x36              ;794
00001a  4770              BX       lr
                  |L33.28|
00001c  2034              MOVS     r0,#0x34              ;798
00001e  4770              BX       lr
                  |L33.32|
000020  2031              MOVS     r0,#0x31              ;802
000022  4770              BX       lr
;;;811    
                          ENDP


                          AREA ||i.KDP_set_mass_data_header||, CODE, READONLY, ALIGN=2

                  KDP_set_mass_data_header PROC
;;;1114   //this func only handle imp feature map data
;;;1115   u8 KDP_set_mass_data_header(msg_mass_data_header* tHeader)
000000  b5fe              PUSH     {r1-r7,lr}
;;;1116   {
000002  4606              MOV      r6,r0
;;;1117       uint8_t mode = tHeader->mode_type;
000004  f890702a          LDRB     r7,[r0,#0x2a]
;;;1118       uint16_t ext_data = StreamsToBigEndU16(&(tHeader->ext_data[0]));
000008  302b              ADDS     r0,r0,#0x2b
00000a  f7fffffe          BL       StreamsToBigEndU16
00000e  0005              MOVS     r5,r0
;;;1119       
;;;1120       if(ext_data == KDP_IMP_FM_RGB) ext_data = KDP_IMP_FM_RGB_TO_NIR;
000010  d002              BEQ      |L34.24|
;;;1121       
;;;1122       if( (mode != MASS_DATA_IMP_FM) || 
000012  2f32              CMP      r7,#0x32
000014  d108              BNE      |L34.40|
000016  e003              B        |L34.32|
                  |L34.24|
000018  2501              MOVS     r5,#1                 ;1120
00001a  2f32              CMP      r7,#0x32
00001c  d104              BNE      |L34.40|
00001e  e005              B        |L34.44|
                  |L34.32|
;;;1123           (ext_data != KDP_IMP_FM_RGB_TO_NIR && ext_data != KDP_IMP_FM_NIR_TO_NIR) ) {
000020  2d01              CMP      r5,#1
000022  d003              BEQ      |L34.44|
000024  2d06              CMP      r5,#6
000026  d001              BEQ      |L34.44|
                  |L34.40|
;;;1124               return MR_FAILED_INVALID_PARAM;
000028  2006              MOVS     r0,#6
;;;1125       }
;;;1126   
;;;1127       KDP_clr_mass_data_header();
;;;1128       imp_exp_mass_data_info_t* ptr = &g_tImpExpMassDataPkgInfo;
;;;1129   
;;;1130       //memcpy(&(ptr->tHeaderInfo), tHeader, sizeof(msg_mass_data_header));
;;;1131   
;;;1132       ptr->nStdPkgSize = StreamsToBigEndU16(&tHeader->pkt_size[0]);
;;;1133       ptr->nTotPkgNum  = StreamsToBigEndU32(&tHeader->num_pkt[0]);
;;;1134       ptr->nTotPkgSize = StreamsToBigEndU32(&tHeader->fsize_b[0]);
;;;1135       ptr->eType       = (mass_data_type)mode;
;;;1136       ptr->nExtData    = ext_data;
;;;1137   
;;;1138       dbg_msg_console("pkt size:%d, num pkt:%d, total size:%d, type:%d, ext:%d.", 
;;;1139           ptr->nStdPkgSize, ptr->nTotPkgNum, ptr->nTotPkgSize, ptr->eType, ptr->nExtData);
;;;1140   
;;;1141       return MR_SUCCESS;
;;;1142   }
00002a  bdfe              POP      {r1-r7,pc}
                  |L34.44|
00002c  f7fffffe          BL       KDP_clr_mass_data_header
000030  4c0f              LDR      r4,|L34.112|
000032  f1060008          ADD      r0,r6,#8              ;1132
000036  f7fffffe          BL       StreamsToBigEndU16
00003a  8020              STRH     r0,[r4,#0]            ;1132
00003c  1d30              ADDS     r0,r6,#4              ;1133
00003e  f7fffffe          BL       StreamsToBigEndU32
000042  f8440f02          STR      r0,[r4,#2]!           ;1133
000046  4630              MOV      r0,r6                 ;1134
000048  f7fffffe          BL       StreamsToBigEndU32
00004c  6060              STR      r0,[r4,#4]            ;1134
00004e  7327              STRB     r7,[r4,#0xc]          ;1135
000050  f8a4500d          STRH     r5,[r4,#0xd]          ;1136
000054  6861              LDR      r1,[r4,#4]            ;1138
000056  b2f8              UXTB     r0,r7                 ;1138
000058  e9cd1000          STRD     r1,r0,[sp,#0]         ;1138
00005c  9502              STR      r5,[sp,#8]            ;1138
00005e  6823              LDR      r3,[r4,#0]            ;1138
000060  f8342c02          LDRH     r2,[r4,#-2]           ;1138
000064  a103              ADR      r1,|L34.116|
000066  2001              MOVS     r0,#1                 ;1138
000068  f7fffffe          BL       kdp_level_printf
00006c  2000              MOVS     r0,#0                 ;1141
00006e  bdfe              POP      {r1-r7,pc}
;;;1143   
                          ENDP

                  |L34.112|
                          DCD      ||.bss||+0x6c
                  |L34.116|
000074  706b7420          DCB      "pkt size:%d, num pkt:%d, total size:%d, type:%d, ext:%d"
000078  73697a65
00007c  3a25642c
000080  206e756d
000084  20706b74
000088  3a25642c
00008c  20746f74
000090  616c2073
000094  697a653a
000098  25642c20
00009c  74797065
0000a0  3a25642c
0000a4  20657874
0000a8  3a2564  
0000ab  2e0d0a00          DCB      ".\r\n",0
0000af  00                DCB      0

                          AREA ||i.OtaProcess_run||, CODE, READONLY, ALIGN=2

                  OtaProcess_run PROC
;;;2605   
;;;2606   uint8_t OtaProcess_run( u8 bypass )
000000  b510              PUSH     {r4,lr}
;;;2607   {   
000002  b108              CBZ      r0,|L35.8|
;;;2608       if(bypass != 0) return OTA_IDLE;
000004  2002              MOVS     r0,#2
;;;2609   
;;;2610       u32 total_update_size = ota_update_info.total_update_size;
;;;2611       if( ota_update_info.ddr_addr_idx != total_update_size ) {
;;;2612           dbg_msg_console("ota size mismatch:%d,%d.", total_update_size, 
;;;2613               ota_update_info.ddr_addr_idx);
;;;2614           return OTA_FAIL;
;;;2615       }
;;;2616   
;;;2617   #if ( ENCRYPTION_MODE&AES_ENCRYPTION )
;;;2618       if( Ota_MD5_checksum(ota_update_info.ota_ddr_start_addr) != YES ) {
;;;2619           dbg_msg_console("ota md5 failed.");
;;;2620           return OTA_FAIL;
;;;2621       }
;;;2622       else
;;;2623   #else
;;;2624           //if( bypass == TRUE)
;;;2625   #endif
;;;2626       {
;;;2627           uint32_t ota_buf_start = ota_update_info.ota_ddr_start_addr;
;;;2628           int ret = ota_auto_update(ota_buf_start);
;;;2629           if (ret != OTA_DONE) {
;;;2630               dbg_msg_console("ota not succeeded.");
;;;2631               return OTA_FAIL;
;;;2632           } else {
;;;2633               dbg_msg_console("ota done.");
;;;2634               return OTA_DONE;
;;;2635           }
;;;2636       }
;;;2637   }
000006  bd10              POP      {r4,pc}
                  |L35.8|
000008  4c10              LDR      r4,|L35.76|
00000a  e9d4320c          LDRD     r3,r2,[r4,#0x30]      ;2610
00000e  4293              CMP      r3,r2                 ;2611
000010  d004              BEQ      |L35.28|
000012  a10f              ADR      r1,|L35.80|
000014  2001              MOVS     r0,#1                 ;2612
000016  f7fffffe          BL       kdp_level_printf
00001a  e00e              B        |L35.58|
                  |L35.28|
00001c  6e60              LDR      r0,[r4,#0x64]         ;2618  ; ota_update_info
00001e  f7fffffe          BL       Ota_MD5_checksum
000022  2801              CMP      r0,#1                 ;2618
000024  d001              BEQ      |L35.42|
000026  a111              ADR      r1,|L35.108|
000028  e004              B        |L35.52|
                  |L35.42|
00002a  6e60              LDR      r0,[r4,#0x64]         ;2628  ; ota_update_info
00002c  f7fffffe          BL       ota_auto_update
000030  b128              CBZ      r0,|L35.62|
000032  a113              ADR      r1,|L35.128|
                  |L35.52|
000034  2001              MOVS     r0,#1                 ;2630
000036  f7fffffe          BL       kdp_level_printf
                  |L35.58|
00003a  2001              MOVS     r0,#1                 ;2631
00003c  bd10              POP      {r4,pc}
                  |L35.62|
00003e  a116              ADR      r1,|L35.152|
000040  2001              MOVS     r0,#1                 ;2633
000042  f7fffffe          BL       kdp_level_printf
000046  2000              MOVS     r0,#0                 ;2634
000048  bd10              POP      {r4,pc}
;;;2638   #endif
                          ENDP

00004a  0000              DCW      0x0000
                  |L35.76|
                          DCD      ||.bss||
                  |L35.80|
000050  6f746120          DCB      "ota size mismatch:%d,%d.\r\n",0
000054  73697a65
000058  206d6973
00005c  6d617463
000060  683a2564
000064  2c25642e
000068  0d0a00  
00006b  00                DCB      0
                  |L35.108|
00006c  6f746120          DCB      "ota md5 failed.\r\n",0
000070  6d643520
000074  6661696c
000078  65642e0d
00007c  0a00    
00007e  00                DCB      0
00007f  00                DCB      0
                  |L35.128|
000080  6f746120          DCB      "ota not succeeded.\r\n",0
000084  6e6f7420
000088  73756363
00008c  65656465
000090  642e0d0a
000094  00      
000095  00                DCB      0
000096  00                DCB      0
000097  00                DCB      0
                  |L35.152|
000098  6f746120          DCB      "ota done.\r\n",0
00009c  646f6e65
0000a0  2e0d0a00

                          AREA ||i.Ota_MD5_checksum||, CODE, READONLY, ALIGN=2

                  Ota_MD5_checksum PROC
;;;2383   #if ( ENCRYPTION_MODE&AES_ENCRYPTION )
;;;2384   extern uint8_t Ota_MD5_checksum( u32 addr )
000000  b570              PUSH     {r4-r6,lr}
;;;2385   {
;;;2386       u8 md5_crc[32], md5[16];
;;;2387       u8 i;
;;;2388   
;;;2389       md5_main( (void*)addr , (void*)md5, ota_update_info.total_update_size );
000002  4e1b              LDR      r6,|L36.112|
000004  b08e              SUB      sp,sp,#0x38           ;2385
000006  a909              ADD      r1,sp,#0x24
000008  6b72              LDR      r2,[r6,#0x34]  ; ota_update_info
00000a  f7fffffe          BL       md5_main
;;;2390       md5_covers( md5 ,md5_crc );
00000e  a901              ADD      r1,sp,#4
000010  a809              ADD      r0,sp,#0x24
000012  f7fffffe          BL       md5_covers
;;;2391   
;;;2392       dbg_msg_nocrlf("md5 32:");
000016  a017              ADR      r0,|L36.116|
000018  f7fffffe          BL       kdp_printf_nocrlf
;;;2393       for (i = 0; i < 32; i++) dbg_msg_nocrlf (" %02X", md5_crc[i]);
00001c  2400              MOVS     r4,#0
00001e  ad01              ADD      r5,sp,#4              ;2386
                  |L36.32|
000020  a016              ADR      r0,|L36.124|
000022  5d29              LDRB     r1,[r5,r4]
000024  f7fffffe          BL       kdp_printf_nocrlf
000028  1c64              ADDS     r4,r4,#1
00002a  b2e4              UXTB     r4,r4
00002c  2c20              CMP      r4,#0x20
00002e  d3f7              BCC      |L36.32|
;;;2394       dbg_msg_console("\n");    
000030  a114              ADR      r1,|L36.132|
000032  2001              MOVS     r0,#1
000034  f7fffffe          BL       kdp_level_printf
;;;2395   
;;;2396       for (i = 0; i < 32; i++) {
000038  2300              MOVS     r3,#0
                  |L36.58|
;;;2397           if( md5_crc[i] != ota_update_info.header_info.md5_sum[i] ) {
00003a  18f1              ADDS     r1,r6,r3
00003c  5ce8              LDRB     r0,[r5,r3]
00003e  7a89              LDRB     r1,[r1,#0xa]
000040  4288              CMP      r0,r1
000042  d009              BEQ      |L36.88|
;;;2398               dbg_msg_console("[%s] FAIL: [%d]: %d", __func__, i, md5_crc[i] );
000044  b2c0              UXTB     r0,r0
000046  9000              STR      r0,[sp,#0]
000048  4a0f              LDR      r2,|L36.136|
00004a  a110              ADR      r1,|L36.140|
00004c  2001              MOVS     r0,#1
00004e  f7fffffe          BL       kdp_level_printf
;;;2399               return NO;
000052  2000              MOVS     r0,#0
                  |L36.84|
;;;2400           }
;;;2401       }
;;;2402       dbg_msg_console("[%s] Checksum OK", __func__);
;;;2403   
;;;2404       return YES;
;;;2405   }
000054  b00e              ADD      sp,sp,#0x38
000056  bd70              POP      {r4-r6,pc}
                  |L36.88|
000058  1c5b              ADDS     r3,r3,#1
00005a  b2db              UXTB     r3,r3                 ;2396
00005c  2b20              CMP      r3,#0x20              ;2396
00005e  d3ec              BCC      |L36.58|
000060  4a09              LDR      r2,|L36.136|
000062  a110              ADR      r1,|L36.164|
000064  2001              MOVS     r0,#1                 ;2402
000066  f7fffffe          BL       kdp_level_printf
00006a  2001              MOVS     r0,#1                 ;2404
00006c  e7f2              B        |L36.84|
;;;2406   #endif
                          ENDP

00006e  0000              DCW      0x0000
                  |L36.112|
                          DCD      ||.bss||
                  |L36.116|
000074  6d643520          DCB      "md5 32:",0
000078  33323a00
                  |L36.124|
00007c  20253032          DCB      " %02X",0
000080  5800    
000082  00                DCB      0
000083  00                DCB      0
                  |L36.132|
000084  0a0d0a00          DCB      "\n\r\n",0
                  |L36.136|
                          DCD      ||.constdata||+0x73
                  |L36.140|
00008c  5b25735d          DCB      "[%s] FAIL: [%d]: %d\r\n",0
000090  20464149
000094  4c3a205b
000098  25645d3a
00009c  2025640d
0000a0  0a00    
0000a2  00                DCB      0
0000a3  00                DCB      0
                  |L36.164|
0000a4  5b25735d          DCB      "[%s] Checksum OK\r\n",0
0000a8  20436865
0000ac  636b7375
0000b0  6d204f4b
0000b4  0d0a00  
0000b7  00                DCB      0

                          AREA ||i.Ota_final_packet||, CODE, READONLY, ALIGN=2

                  Ota_final_packet PROC
;;;1786   
;;;1787   extern uint8_t Ota_final_packet( void )
000000  4804              LDR      r0,|L37.20|
;;;1788   {
;;;1789       return (ota_update_info.ddr_addr_idx == ota_update_info.total_update_size);
000002  e9d0100c          LDRD     r1,r0,[r0,#0x30]
000006  4281              CMP      r1,r0
000008  d101              BNE      |L37.14|
00000a  2001              MOVS     r0,#1
;;;1790   }
00000c  4770              BX       lr
                  |L37.14|
00000e  2000              MOVS     r0,#0                 ;1789
000010  4770              BX       lr
;;;1791   #endif
                          ENDP

000012  0000              DCW      0x0000
                  |L37.20|
                          DCD      ||.bss||

                          AREA ||i.SwitchScpu||, CODE, READONLY, ALIGN=1

                  SwitchScpu PROC
;;;1368   
;;;1369   static void SwitchScpu(void)
000000  b510              PUSH     {r4,lr}
;;;1370   {
;;;1371       ota_update_show_config();
000002  f7fffffe          BL       ota_update_show_config
;;;1372       kl520_api_ota_switch_SCPU();
000006  f7fffffe          BL       kl520_api_ota_switch_SCPU
;;;1373       ota_update_show_config();
00000a  e8bd4010          POP      {r4,lr}
00000e  f7ffbffe          B.W      ota_update_show_config
;;;1374   }
;;;1375   
                          ENDP


                          AREA ||i.SysWaitDelayTime||, CODE, READONLY, ALIGN=2

                  SysWaitDelayTime PROC
;;;103    #if ( CFG_COM_BUS_TYPE&COM_BUS_UART_MASK ) || ( CFG_COM_BUS_TYPE&COM_BUS_USB_MASK )
;;;104    extern uint32_t SysWaitDelayTime(void)
000000  b510              PUSH     {r4,lr}
;;;105    {
;;;106        u32 nIntervalTime =  osKernelGetTickCount() - g_nSysInternalTime;
000002  f7fffffe          BL       osKernelGetTickCount
000006  4906              LDR      r1,|L39.32|
000008  6909              LDR      r1,[r1,#0x10]  ; g_nSysInternalTime
00000a  1a44              SUBS     r4,r0,r1
;;;107    
;;;108        if ( nIntervalTime <= SYS_INTERNAL_TIME_INTERVAL )
00000c  2c64              CMP      r4,#0x64
00000e  d804              BHI      |L39.26|
;;;109        {
;;;110            nIntervalTime = SYS_INTERNAL_TIME_INTERVAL - nIntervalTime;
000010  f1c40464          RSB      r4,r4,#0x64
;;;111            // dbg_msg_console("_time=%d", nIntervalTime);
;;;112            osDelay(nIntervalTime);
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       osDelay
                  |L39.26|
;;;113            //nIntervalTime = SYS_INTERNAL_TIME_INTERVAL - nIntervalTime;
;;;114        }
;;;115    
;;;116        return nIntervalTime;
00001a  4620              MOV      r0,r4
;;;117    }
00001c  bd10              POP      {r4,pc}
;;;118    
                          ENDP

00001e  0000              DCW      0x0000
                  |L39.32|
                          DCD      ||.data||

                          AREA ||i._api_face_note||, CODE, READONLY, ALIGN=2

                  _api_face_note PROC
;;;1795   //-----ENROLL
;;;1796   void _api_face_note(u8 ret)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;1797   {
;;;1798   //    static u32 _gface_note_time = 0xFFFF;
;;;1799   //    if(osKernelGetTickCount()-_gface_note_time > MSG_INTERNAL_TIME_NOTE)
;;;1800       {
;;;1801           s_msg_note_data_face msg_note;
;;;1802           u8 nid = NID_UNKNOWN_ERROR;
;;;1803           s32 msg_x, msg_y, msg_w, msg_h;
;;;1804           u8 en_note_msg = FALSE;
;;;1805           memset(&msg_note,0,sizeof(msg_note));
000004  2600              MOVS     r6,#0
000006  4635              MOV      r5,r6
000008  b098              SUB      sp,sp,#0x60           ;1797
00000a  462f              MOV      r7,r5
;;;1806   
;;;1807           if(ret == KL520_FACE_TOO_FAR){              msg_note.state = FACE_STATE_TOOFAR;             en_note_msg = TRUE; }
00000c  280c              CMP      r0,#0xc
00000e  d026              BEQ      |L40.94|
;;;1808           else if(ret == KL520_FACE_TOO_NEAR){        msg_note.state = FACE_STATE_TOOCLOSE;           en_note_msg = TRUE; }
000010  280d              CMP      r0,#0xd
000012  d026              BEQ      |L40.98|
;;;1809           else if(ret == KL520_FACE_TOOUP){           msg_note.state = FACE_STATE_TOOUP;              en_note_msg = TRUE; }
000014  2815              CMP      r0,#0x15
000016  d026              BEQ      |L40.102|
;;;1810           else if(ret == KL520_FACE_TOODOWN){         msg_note.state = FACE_STATE_TOODOWN;            en_note_msg = TRUE; }
000018  2816              CMP      r0,#0x16
00001a  d026              BEQ      |L40.106|
;;;1811   	      else if(ret == KL520_FACE_TOOLEFT){         msg_note.state = FACE_STATE_TOORIGHT;            en_note_msg = TRUE; }//zcy mod left to rignht
00001c  2817              CMP      r0,#0x17
00001e  d026              BEQ      |L40.110|
;;;1812           else if(ret == KL520_FACE_TOORIGHT){        msg_note.state = FACE_STATE_TOOLEFT;           en_note_msg = TRUE; } //zcy mod right to left
000020  2818              CMP      r0,#0x18
000022  d026              BEQ      |L40.114|
;;;1813           else if(ret == KL520_FACE_MASK){            msg_note.state = FACE_STATE_FACE_OCCLUSION;     en_note_msg = TRUE; }
000024  2811              CMP      r0,#0x11
000026  d026              BEQ      |L40.118|
;;;1814           else if(ret == KL520_FACE_EYE_CLOSE_STATUS_OPEN_EYE){   msg_note.state = FACE_STATE_EYE_CLOSE_STATUS_OPEN_EYE;  en_note_msg = TRUE;}
000028  2812              CMP      r0,#0x12
00002a  d026              BEQ      |L40.122|
;;;1815           else if(ret == KL520_FACE_EYE_CLOSED){                  msg_note.state = FACE_STATE_EYE_CLOSE_STATUS;           en_note_msg = TRUE;}
00002c  2813              CMP      r0,#0x13
00002e  d026              BEQ      |L40.126|
;;;1816           else if(ret == KL520_FACE_EYE_CLOSE_UNKNOW_STATUS){     msg_note.state = FACE_STATE_EYE_CLOSE_UNKNOW_STATUS;    en_note_msg = TRUE;}
000030  2814              CMP      r0,#0x14
000032  d026              BEQ      |L40.130|
;;;1817           else if(ret == KL520_FACE_NOFACE){          msg_note.state = FACE_STATE_NOFACE;             en_note_msg = TRUE; }
000034  2804              CMP      r0,#4
000036  d026              BEQ      |L40.134|
;;;1818           else if(ret == KL520_FACE_OK){              msg_note.state = FACE_STATE_NORMAL;             en_note_msg = FALSE;}
000038  2800              CMP      r0,#0
00003a  d00d              BEQ      |L40.88|
;;;1819           else if(ret == KL520_FACE_BADPOSE){         msg_note.state = FACE_STATE_DIRECTION_ERROR;    en_note_msg = TRUE;}
00003c  280a              CMP      r0,#0xa
00003e  d024              BEQ      |L40.138|
;;;1820           else if(ret == KL520_FACE_WAIT_DONT_MOVE){  msg_note.state = FACE_STATE_NORMAL;             en_note_msg = FALSE;}
000040  280e              CMP      r0,#0xe
000042  d009              BEQ      |L40.88|
;;;1821           else if(ret == KL520_FACE_FAIL){                                                            en_note_msg = FALSE;}
000044  2802              CMP      r0,#2
000046  d007              BEQ      |L40.88|
;;;1822           else if(ret == KL520_FACE_INVALID){                                                         en_note_msg = FALSE;}
000048  280b              CMP      r0,#0xb
00004a  d005              BEQ      |L40.88|
;;;1823           else{  dbg_msg_console("[%s], ret=0x%x",__func__, ret);                                     en_note_msg = FALSE;}
00004c  4603              MOV      r3,r0
00004e  4a3e              LDR      r2,|L40.328|
000050  a13e              ADR      r1,|L40.332|
000052  2001              MOVS     r0,#1
000054  f7fffffe          BL       kdp_level_printf
                  |L40.88|
;;;1824   
;;;1825           if(en_note_msg == TRUE)
;;;1826           {
;;;1827               nid = NID_FACE_STATE;
;;;1828               if( kdp_e2e_util_get_person_position(&msg_x, &msg_y, &msg_w, &msg_h) == 1)
;;;1829               {
;;;1830                   struct video_input_params params;
;;;1831                   kdp_video_renderer_get_params(&params);
;;;1832                   int dp_w = (int)params.dp_out_w;
;;;1833                   int dp_h = (int)params.dp_out_h;
;;;1834                   int img_w = (int)params.dp_area_w;
;;;1835                   int img_h = (int)params.dp_area_h;
;;;1836   
;;;1837                   msg_x = msg_x * dp_w / img_w;
;;;1838                   msg_y = msg_y * dp_h / img_h;
;;;1839                   msg_w = msg_w * dp_w / img_w;
;;;1840                   msg_h = msg_h * dp_h / img_h;
;;;1841   
;;;1842                   dbg_msg_algo("[FACE_POS] (msg_x, msg_y)= (%d, %d)", msg_x, msg_y);
;;;1843   
;;;1844                   msg_note.top = msg_y ;
;;;1845                   msg_note.bottom = msg_y + msg_h;
;;;1846                   msg_note.left = msg_x;
;;;1847                   msg_note.right = msg_x + msg_w;
;;;1848   
;;;1849                   msg_note.pitch = 0;
;;;1850                   msg_note.yaw = 0;
;;;1851                   msg_note.roll = 0;
;;;1852               }
;;;1853   
;;;1854               if ( ( g_bStopSendMsg == FALSE ) && ( (osKernelGetTickCount()-g_nSysInternalTime) > SYS_INTERNAL_TIME_NOTE_INTERVAL ) )
;;;1855               {
;;;1856                   send_EnrollOrVerify_note_msg(msg_note ,nid);
;;;1857                   g_nSysInternalTime = osKernelGetTickCount();
;;;1858                   //dbg_msg_console("[%s], osKernelGetTickCount()=%d",__func__, osKernelGetTickCount());
;;;1859   //                _gface_note_time = osKernelGetTickCount();
;;;1860               }
;;;1861           }
;;;1862       }
;;;1863   }
000058  b018              ADD      sp,sp,#0x60
00005a  e8bd87f0          POP      {r4-r10,pc}
                  |L40.94|
00005e  2006              MOVS     r0,#6                 ;1807
000060  e014              B        |L40.140|
                  |L40.98|
000062  2007              MOVS     r0,#7                 ;1808
000064  e012              B        |L40.140|
                  |L40.102|
000066  2002              MOVS     r0,#2                 ;1809
000068  e010              B        |L40.140|
                  |L40.106|
00006a  2003              MOVS     r0,#3                 ;1810
00006c  e00e              B        |L40.140|
                  |L40.110|
00006e  2005              MOVS     r0,#5                 ;1811
000070  e00c              B        |L40.140|
                  |L40.114|
000072  2004              MOVS     r0,#4                 ;1812
000074  e00a              B        |L40.140|
                  |L40.118|
000076  200a              MOVS     r0,#0xa               ;1813
000078  e008              B        |L40.140|
                  |L40.122|
00007a  200c              MOVS     r0,#0xc               ;1814
00007c  e006              B        |L40.140|
                  |L40.126|
00007e  200d              MOVS     r0,#0xd               ;1815
000080  e004              B        |L40.140|
                  |L40.130|
000082  200e              MOVS     r0,#0xe               ;1816
000084  e002              B        |L40.140|
                  |L40.134|
000086  2001              MOVS     r0,#1                 ;1817
000088  e000              B        |L40.140|
                  |L40.138|
00008a  200b              MOVS     r0,#0xb               ;1819
                  |L40.140|
00008c  4634              MOV      r4,r6                 ;1819
00008e  f360040f          BFI      r4,r0,#0,#16          ;1819
000092  f04f0a01          MOV      r10,#1                ;1827
000096  ab08              ADD      r3,sp,#0x20           ;1828
000098  aa07              ADD      r2,sp,#0x1c           ;1828
00009a  a906              ADD      r1,sp,#0x18           ;1828
00009c  a805              ADD      r0,sp,#0x14           ;1828
00009e  f7fffffe          BL       kdp_e2e_util_get_person_position
0000a2  2801              CMP      r0,#1                 ;1828
0000a4  d136              BNE      |L40.276|
0000a6  a80c              ADD      r0,sp,#0x30           ;1831
0000a8  f7fffffe          BL       kdp_video_renderer_get_params
0000ac  f8bdc046          LDRH     r12,[sp,#0x46]        ;1832
0000b0  9805              LDR      r0,[sp,#0x14]         ;1837
0000b2  f8bd2042          LDRH     r2,[sp,#0x42]         ;1834
0000b6  fb00f00c          MUL      r0,r0,r12             ;1837
0000ba  fb90f1f2          SDIV     r1,r0,r2              ;1837
0000be  f8dd801c          LDR      r8,[sp,#0x1c]         ;1839
0000c2  f8bd3048          LDRH     r3,[sp,#0x48]         ;1833
0000c6  fb08f80c          MUL      r8,r8,r12             ;1839
0000ca  f8bd9044          LDRH     r9,[sp,#0x44]         ;1835
0000ce  9806              LDR      r0,[sp,#0x18]         ;1838
0000d0  f8ddc020          LDR      r12,[sp,#0x20]        ;1840
0000d4  4358              MULS     r0,r3,r0              ;1838
0000d6  fb90f0f9          SDIV     r0,r0,r9              ;1838
0000da  fb98f2f2          SDIV     r2,r8,r2              ;1839
0000de  fb0cfc03          MUL      r12,r12,r3            ;1840
0000e2  fb9cf3f9          SDIV     r3,r12,r9             ;1840
0000e6  f360050f          BFI      r5,r0,#0,#16          ;1840
0000ea  9105              STR      r1,[sp,#0x14]         ;1838
0000ec  f361441f          BFI      r4,r1,#16,#16         ;1845
0000f0  4411              ADD      r1,r1,r2              ;1847
0000f2  9308              STR      r3,[sp,#0x20]         ;1845
0000f4  f361451f          BFI      r5,r1,#16,#16         ;1847
0000f8  9006              STR      r0,[sp,#0x18]         ;1839
0000fa  4403              ADD      r3,r3,r0              ;1845
0000fc  4631              MOV      r1,r6                 ;1849
0000fe  4630              MOV      r0,r6                 ;1845
000100  f363000f          BFI      r0,r3,#0,#16          ;1845
000104  f361070f          BFI      r7,r1,#0,#16          ;1849
000108  f361401f          BFI      r0,r1,#16,#16         ;1849
00010c  9207              STR      r2,[sp,#0x1c]         ;1840
00010e  4606              MOV      r6,r0                 ;1849
000110  f361471f          BFI      r7,r1,#16,#16         ;1849
                  |L40.276|
000114  f8df8048          LDR      r8,|L40.352|
000118  f8980001          LDRB     r0,[r8,#1]            ;1854  ; g_bStopSendMsg
00011c  2800              CMP      r0,#0                 ;1854
00011e  d19b              BNE      |L40.88|
000120  f7fffffe          BL       osKernelGetTickCount
000124  f8d81010          LDR      r1,[r8,#0x10]         ;1854  ; g_nSysInternalTime
000128  1a40              SUBS     r0,r0,r1              ;1854
00012a  2864              CMP      r0,#0x64              ;1854
00012c  d994              BLS      |L40.88|
00012e  463b              MOV      r3,r7                 ;1856
000130  4632              MOV      r2,r6                 ;1856
000132  4629              MOV      r1,r5                 ;1856
000134  4620              MOV      r0,r4                 ;1856
000136  f8cda000          STR      r10,[sp,#0]           ;1856
00013a  f7fffffe          BL       send_EnrollOrVerify_note_msg
00013e  f7fffffe          BL       osKernelGetTickCount
000142  f8c80010          STR      r0,[r8,#0x10]         ;1857  ; g_nSysInternalTime
000146  e787              B        |L40.88|
;;;1864   
                          ENDP

                  |L40.328|
                          DCD      ||.constdata||+0x4e
                  |L40.332|
00014c  5b25735d          DCB      "[%s], ret=0x%x\r\n",0
000150  2c207265
000154  743d3078
000158  25780d0a
00015c  00      
00015d  00                DCB      0
00015e  00                DCB      0
00015f  00                DCB      0
                  |L40.352|
                          DCD      ||.data||

                          AREA ||i._face_add_internal||, CODE, READONLY, ALIGN=2

                  _face_add_internal PROC
;;;1865   //Refer to kl520_api_face_add_internal
;;;1866   int _face_add_internal(short x, short y, short w, short h, u8 type)
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;1867   {
000004  4683              MOV      r11,r0
;;;1868       int ret = KL520_FACE_OK;
;;;1869       int face_ret = 0;
;;;1870       
;;;1871       u8 f_bmp = type;
;;;1872   
;;;1873       u8 flag = 1;
;;;1874       for(int i = 0; i < 8000; i++) {
;;;1875           if(flag) {
;;;1876               face_ret = kl520_api_face_add_ex(x, y, w, h, f_bmp | 0x80);
000006  9e0a              LDR      r6,[sp,#0x28]
000008  4698              MOV      r8,r3                 ;1867
00000a  f0460080          ORR      r0,r6,#0x80
00000e  9000              STR      r0,[sp,#0]
000010  4691              MOV      r9,r2                 ;1867
000012  468a              MOV      r10,r1                ;1867
000014  2500              MOVS     r5,#0                 ;1874
000016  4658              MOV      r0,r11
000018  f7fffffe          BL       kl520_api_face_add_ex
00001c  f44f57fa          MOV      r7,#0x1f40            ;1874
000020  e006              B        |L41.48|
                  |L41.34|
;;;1877               flag = 0;
;;;1878           } else {
;;;1879               face_ret = kl520_api_face_add_ex(x, y, w, h, f_bmp);
000022  4643              MOV      r3,r8
000024  464a              MOV      r2,r9
000026  4651              MOV      r1,r10
000028  4658              MOV      r0,r11
00002a  9600              STR      r6,[sp,#0]
00002c  f7fffffe          BL       kl520_api_face_add_ex
                  |L41.48|
;;;1880           }
;;;1881           if(face_ret != 0) {
000030  b128              CBZ      r0,|L41.62|
;;;1882               ret = KL520_FACE_FAIL;
000032  2402              MOVS     r4,#2
;;;1883               dbg_msg_console ("face ret err...");
000034  a116              ADR      r1,|L41.144|
000036  2001              MOVS     r0,#1
000038  f7fffffe          BL       kdp_level_printf
00003c  e002              B        |L41.68|
                  |L41.62|
;;;1884           } else {
;;;1885               ret = kl520_api_add_wait_and_get();
00003e  f7fffffe          BL       kl520_api_add_wait_and_get
000042  4604              MOV      r4,r0
                  |L41.68|
;;;1886           }
;;;1887           _api_face_note(ret);
000044  b2e0              UXTB     r0,r4
000046  f7fffffe          BL       _api_face_note
;;;1888   
;;;1889           if((ret < KL520_FACE_BADPOSE || ret >= KL520_FACE_ATTACK) && (ret != KL520_FACE_NOFACE))
00004a  f1a4000a          SUB      r0,r4,#0xa
00004e  2814              CMP      r0,#0x14
000050  d305              BCC      |L41.94|
000052  2c04              CMP      r4,#4
000054  d005              BEQ      |L41.98|
;;;1890           {
;;;1891   #if CFG_SNAPSHOT_ENABLE == 1 || CFG_SNAPSHOT_ENABLE == 2
;;;1892               kl520_api_snapshot_adv_shot_5face();
;;;1893   #endif
;;;1894               // kl520_api_reset_hmi_external_interface();
;;;1895               osDelay(1);
000056  2001              MOVS     r0,#1
000058  f7fffffe          BL       osDelay
;;;1896               break;
00005c  e00c              B        |L41.120|
                  |L41.94|
;;;1897           }
;;;1898           else if(ret == KL520_FACE_CALLIB_FAIL)
00005e  2c1b              CMP      r4,#0x1b
000060  d00b              BEQ      |L41.122|
                  |L41.98|
;;;1899           {
;;;1900               // kl520_api_reset_hmi_external_interface();
;;;1901               break;
;;;1902           }
;;;1903           //for bad pose, retry
;;;1904           //dbg_msg_console("get bad pose for registration, retrying:%d", i+1);
;;;1905           osDelay(1);
000062  2001              MOVS     r0,#1
000064  f7fffffe          BL       osDelay
;;;1906   
;;;1907           //in case of abort
;;;1908           if (kl520_is_fdfr_abort() != 0) {
000068  f7fffffe          BL       kl520_is_fdfr_abort
00006c  b108              CBZ      r0,|L41.114|
;;;1909               ret = KL520_FACE_FAIL;
00006e  2402              MOVS     r4,#2
;;;1910               break;
000070  e003              B        |L41.122|
                  |L41.114|
000072  1c6d              ADDS     r5,r5,#1
000074  42bd              CMP      r5,r7                 ;1874
000076  dbd4              BLT      |L41.34|
                  |L41.120|
;;;1911           }
;;;1912       }
;;;1913   #if (CFG_LED_CTRL_ENHANCE == 1)
;;;1914       kdp_e2e_nir_led_flag_off();
;;;1915       if(ret == KL520_FACE_OK)
;;;1916       {
;;;1917           osDelay(100);
;;;1918       }
;;;1919   #endif
;;;1920       
;;;1921       if(ret != KL520_FACE_OK && is_enroll_customize_uid()) {
000078  b134              CBZ      r4,|L41.136|
                  |L41.122|
00007a  f7fffffe          BL       is_enroll_customize_uid
00007e  b118              CBZ      r0,|L41.136|
;;;1922           // if oms overwrite fails, need restore
;;;1923           //restore the FLASH to DDR DB.
;;;1924           kdp_app_db_flash_to_ddr(get_enroll_customize_uid());
000080  f7fffffe          BL       get_enroll_customize_uid
000084  f7fffffe          BL       kdp_app_db_flash_to_ddr
                  |L41.136|
;;;1925       }
;;;1926       
;;;1927       return ret;
000088  4620              MOV      r0,r4
;;;1928   }
00008a  e8bd8ff8          POP      {r3-r11,pc}
;;;1929   
                          ENDP

00008e  0000              DCW      0x0000
                  |L41.144|
000090  66616365          DCB      "face ret err...\r\n",0
000094  20726574
000098  20657272
00009c  2e2e2e0d
0000a0  0a00    
0000a2  00                DCB      0
0000a3  00                DCB      0

                          AREA ||i._uart_face_del_some_users||, CODE, READONLY, ALIGN=1

                  _uart_face_del_some_users PROC
;;;2322   
;;;2323   u8 _uart_face_del_some_users(u8 face_id0, u8 face_id1)
000000  b570              PUSH     {r4-r6,lr}
;;;2324   {
;;;2325       u8 ret = 0;
;;;2326       u8 ret_count = 0;
000002  2500              MOVS     r5,#0
;;;2327       u8 id0 = (face_id0<face_id1)?face_id0:face_id1;
000004  4288              CMP      r0,r1
000006  d201              BCS      |L42.12|
000008  4604              MOV      r4,r0
00000a  e000              B        |L42.14|
                  |L42.12|
00000c  460c              MOV      r4,r1
                  |L42.14|
;;;2328       u8 id1 = (face_id0<face_id1)?face_id1:face_id0;
00000e  d200              BCS      |L42.18|
000010  4608              MOV      r0,r1
                  |L42.18|
;;;2329       
;;;2330       for(u16 i=id0; i<(id1+1); i++)
000012  f1000601          ADD      r6,r0,#1
000016  e00f              B        |L42.56|
                  |L42.24|
;;;2331       {
;;;2332           if (MAX_USER > kdp_app_db_find_exist_id(i))
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       kdp_app_db_find_exist_id
00001e  2864              CMP      r0,#0x64
000020  d208              BCS      |L42.52|
;;;2333           {
;;;2334               ret = kl520_api_face_del(2, (u8)i);
000022  b2e1              UXTB     r1,r4
000024  2002              MOVS     r0,#2
000026  f7fffffe          BL       kl520_api_face_del
00002a  f0100fff          TST      r0,#0xff
;;;2335               if (0 == ret)
00002e  d101              BNE      |L42.52|
000030  1c6d              ADDS     r5,r5,#1
;;;2336               {
;;;2337                   ret_count++;
000032  b2ed              UXTB     r5,r5
                  |L42.52|
000034  1c64              ADDS     r4,r4,#1
000036  b2a4              UXTH     r4,r4                 ;2330
                  |L42.56|
000038  42b4              CMP      r4,r6                 ;2330
00003a  d3ed              BCC      |L42.24|
;;;2338               }
;;;2339           }
;;;2340       }
;;;2341       
;;;2342       if(ret_count > 0)
00003c  b10d              CBZ      r5,|L42.66|
;;;2343           return 0;
00003e  2000              MOVS     r0,#0
;;;2344       else
;;;2345           return 1;
;;;2346   }
000040  bd70              POP      {r4-r6,pc}
                  |L42.66|
000042  2001              MOVS     r0,#1                 ;2345
000044  bd70              POP      {r4-r6,pc}
;;;2347   
                          ENDP


                          AREA ||i.get_mass_data_status||, CODE, READONLY, ALIGN=2

                  get_mass_data_status PROC
;;;2351   #if ( CFG_COM_BUS_TYPE&COM_BUS_UART_MASK ) || ( CFG_COM_BUS_TYPE&COM_BUS_USB_MASK )
;;;2352   uint8_t get_mass_data_status( void )
000000  4801              LDR      r0,|L43.8|
;;;2353   {
;;;2354       return ota_update_info.ota_process;
000002  f8900060          LDRB     r0,[r0,#0x60]  ; ota_update_info
;;;2355   }
000006  4770              BX       lr
;;;2356   
                          ENDP

                  |L43.8|
                          DCD      ||.bss||

                          AREA ||i.get_ota_data_status||, CODE, READONLY, ALIGN=2

                  get_ota_data_status PROC
;;;2356   
;;;2357   uint8_t get_ota_data_status( void )
000000  4801              LDR      r0,|L44.8|
;;;2358   {
;;;2359       return ota_update_info.ota_process;
000002  f8900060          LDRB     r0,[r0,#0x60]  ; ota_update_info
;;;2360   }
000006  4770              BX       lr
;;;2361   
                          ENDP

                  |L44.8|
                          DCD      ||.bss||

                          AREA ||i.kl520_face_recognition_note||, CODE, READONLY, ALIGN=2

                  kl520_face_recognition_note PROC
;;;2653   #if (CFG_E2E_REC_NOTE == YES)
;;;2654   void kl520_face_recognition_note(void)
000000  4808              LDR      r0,|L45.36|
;;;2655   {
000002  b508              PUSH     {r3,lr}
;;;2656       if(skip_face_note < 2){     skip_face_note++;   return;}
000004  8941              LDRH     r1,[r0,#0xa]  ; skip_face_note
000006  2902              CMP      r1,#2
000008  d202              BCS      |L45.16|
00000a  1c49              ADDS     r1,r1,#1              ;2655
00000c  8141              STRH     r1,[r0,#0xa]
;;;2657   
;;;2658   //#if 0
;;;2659   //    if( tid_notes_face_recognition == NULL)
;;;2660   //    {
;;;2661   //        osThreadAttr_t attr = {
;;;2662   //            .stack_size = 1024,
;;;2663   //            .priority = osPriorityNormal
;;;2664   //        };
;;;2665   //        tid_notes_face_recognition = osThreadNew(_tasks_notes_face_recognition_thread, NULL, &attr);
;;;2666   //    }
;;;2667   //#endif
;;;2668       {
;;;2669           u8 face_id = 0;
;;;2670           _api_face_note(kl520_api_face_get_result(&face_id));
;;;2671   
;;;2672       }
;;;2673   }
00000e  bd08              POP      {r3,pc}
                  |L45.16|
000010  2000              MOVS     r0,#0                 ;2669
000012  f88d0000          STRB     r0,[sp,#0]            ;2669
000016  4668              MOV      r0,sp                 ;2670
000018  f7fffffe          BL       kl520_api_face_get_result
00001c  b2c0              UXTB     r0,r0                 ;2670
00001e  f7fffffe          BL       _api_face_note
000022  bd08              POP      {r3,pc}
;;;2674   #endif
                          ENDP

                  |L45.36|
                          DCD      ||.data||

                          AREA ||i.ota_auto_update||, CODE, READONLY, ALIGN=2

                  ota_auto_update PROC
;;;2523   
;;;2524   u8 ota_auto_update(u32 addr_start)
000000  b530              PUSH     {r4,r5,lr}
;;;2525   {
000002  b08d              SUB      sp,sp,#0x34
000004  4604              MOV      r4,r0
;;;2526       int ret = 0;
;;;2527       struct ota_header_info *ota_header = (struct ota_header_info *)addr_start;
;;;2528       if(!ota_bin_double_check(ota_header)) {
000006  f7fffffe          BL       ota_bin_double_check
00000a  b1e0              CBZ      r0,|L46.70|
;;;2529           dbg_msg_console("bin file check fail");
;;;2530           return OTA_FAIL;
;;;2531       }
;;;2532   
;;;2533       struct ota_part_header ota_scpu_header, ota_ncpu_header, ota_model_header;
;;;2534       ota_check_info(ota_header, &ota_scpu_header, &ota_ncpu_header, &ota_model_header);
00000c  466b              MOV      r3,sp
00000e  aa04              ADD      r2,sp,#0x10
000010  a909              ADD      r1,sp,#0x24
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       ota_check_info
;;;2535       dbg_msg_console("scpu_update:%d", ota_update_info.scpu_update);
000018  4d3a              LDR      r5,|L46.260|
00001a  a13b              ADR      r1,|L46.264|
00001c  2001              MOVS     r0,#1
00001e  f895205e          LDRB     r2,[r5,#0x5e]  ; ota_update_info
000022  355d              ADDS     r5,r5,#0x5d
000024  f7fffffe          BL       kdp_level_printf
;;;2536       dbg_msg_console("ncpu_update:%d", ota_update_info.ncpu_update);
000028  782a              LDRB     r2,[r5,#0]  ; ota_update_info
00002a  a13c              ADR      r1,|L46.284|
00002c  2001              MOVS     r0,#1
00002e  f7fffffe          BL       kdp_level_printf
;;;2537       dbg_msg_console("model_update:%d", ota_update_info.model_update);
000032  78aa              LDRB     r2,[r5,#2]  ; ota_update_info
000034  a13e              ADR      r1,|L46.304|
000036  2001              MOVS     r0,#1
000038  f7fffffe          BL       kdp_level_printf
;;;2538   
;;;2539       if( ota_update_info.scpu_update == YES )
00003c  7868              LDRB     r0,[r5,#1]  ; ota_update_info
00003e  3d5d              SUBS     r5,r5,#0x5d
000040  2801              CMP      r0,#1
000042  d005              BEQ      |L46.80|
000044  e014              B        |L46.112|
                  |L46.70|
000046  a13f              ADR      r1,|L46.324|
000048  2001              MOVS     r0,#1                 ;2529
00004a  f7fffffe          BL       kdp_level_printf
00004e  e04d              B        |L46.236|
                  |L46.80|
;;;2540       {
;;;2541           //scpu
;;;2542           ret = ota_update_case( FLASH_CMD_ACT_NUM_SEL_SCPU, addr_start + ota_scpu_header.addr, ota_scpu_header.length );
000050  f8dd002d          LDR      r0,[sp,#0x2d]
000054  f8dd2025          LDR      r2,[sp,#0x25]
000058  1901              ADDS     r1,r0,r4
00005a  2007              MOVS     r0,#7
00005c  f7fffffe          BL       ota_update_case
000060  0002              MOVS     r2,r0
;;;2543           if( ret != OTA_UPDATE_SUCCESS )
000062  d001              BEQ      |L46.104|
;;;2544           {
;;;2545               dbg_msg_console("scpu ota fail, ret:%d", ret);
000064  a13d              ADR      r1,|L46.348|
;;;2546               return OTA_FAIL;
000066  e012              B        |L46.142|
                  |L46.104|
;;;2547           }
;;;2548           dbg_msg_console("scpu ota ok, ret:%d", ret);
000068  a142              ADR      r1,|L46.372|
00006a  2001              MOVS     r0,#1
00006c  f7fffffe          BL       kdp_level_printf
                  |L46.112|
;;;2549       }
;;;2550       if ( ota_update_info.ncpu_update == YES )
000070  f895005d          LDRB     r0,[r5,#0x5d]  ; ota_update_info
000074  2801              CMP      r0,#1
000076  d112              BNE      |L46.158|
;;;2551       {
;;;2552           //ncpu
;;;2553           ret = ota_update_case( FLASH_CMD_ACT_NUM_SEL_NCPU, addr_start + ota_ncpu_header.addr, ota_ncpu_header.length );
000078  f8dd0019          LDR      r0,[sp,#0x19]
00007c  f8dd2011          LDR      r2,[sp,#0x11]
000080  1901              ADDS     r1,r0,r4
000082  2008              MOVS     r0,#8
000084  f7fffffe          BL       ota_update_case
000088  0002              MOVS     r2,r0
;;;2554           if( ret != OTA_UPDATE_SUCCESS )
00008a  d004              BEQ      |L46.150|
;;;2555           {
;;;2556               dbg_msg_console("ncpu ota fail, ret:%d", ret);
00008c  a13f              ADR      r1,|L46.396|
                  |L46.142|
00008e  2001              MOVS     r0,#1                 ;2545
000090  f7fffffe          BL       kdp_level_printf
000094  e02a              B        |L46.236|
                  |L46.150|
;;;2557               return OTA_FAIL;
;;;2558           }
;;;2559           dbg_msg_console("ncpu ota ok, ret:%d", ret);
000096  a143              ADR      r1,|L46.420|
000098  2001              MOVS     r0,#1
00009a  f7fffffe          BL       kdp_level_printf
                  |L46.158|
;;;2560       }
;;;2561       
;;;2562       if ( ota_update_info.model_update == YES) 
00009e  f895005f          LDRB     r0,[r5,#0x5f]  ; ota_update_info
0000a2  2801              CMP      r0,#1
0000a4  d128              BNE      |L46.248|
;;;2563       {
;;;2564           kdp_flash_set_protect_bypass(1);
0000a6  f7fffffe          BL       kdp_flash_set_protect_bypass
;;;2565           //fw info
;;;2566           int info_size = KDP_FLASH_ALL_MODELS_ADDR - KDP_FLASH_FW_INFO_ADDR;
;;;2567           ret = ota_update_case( FLASH_CMD_ACT_NUM_SEL_FW_INFO, addr_start + ota_model_header.addr, info_size );
0000aa  f8dd0009          LDR      r0,[sp,#9]
0000ae  f44f5280          MOV      r2,#0x1000            ;2566
0000b2  1901              ADDS     r1,r0,r4
0000b4  200b              MOVS     r0,#0xb
0000b6  f7fffffe          BL       ota_update_case
0000ba  0002              MOVS     r2,r0
;;;2568           if( ret != OTA_UPDATE_SUCCESS )
0000bc  d001              BEQ      |L46.194|
;;;2569           {
;;;2570               dbg_msg_console("fw info ota fail, ret:%d", ret);
0000be  a13f              ADR      r1,|L46.444|
;;;2571               kdp_flash_set_protect_bypass(0);
;;;2572               return OTA_FAIL;
0000c0  e00e              B        |L46.224|
                  |L46.194|
;;;2573           }
;;;2574           
;;;2575           ret = ota_update_case( FLASH_CMD_ACT_NUM_SEL_MODEL, addr_start + ota_model_header.addr + info_size, 
0000c2  f8dd0009          LDR      r0,[sp,#9]
0000c6  f5045480          ADD      r4,r4,#0x1000
0000ca  f8dd2001          LDR      r2,[sp,#1]
0000ce  1901              ADDS     r1,r0,r4
0000d0  2009              MOVS     r0,#9
0000d2  f5a25280          SUB      r2,r2,#0x1000
0000d6  f7fffffe          BL       ota_update_case
0000da  0002              MOVS     r2,r0
;;;2576                   ota_model_header.length - info_size );
;;;2577           if( ret != OTA_UPDATE_SUCCESS )
0000dc  d009              BEQ      |L46.242|
;;;2578           {
;;;2579               dbg_msg_console("model ota fail, ret:%d", ret);
0000de  a13e              ADR      r1,|L46.472|
                  |L46.224|
0000e0  2001              MOVS     r0,#1
0000e2  f7fffffe          BL       kdp_level_printf
;;;2580               kdp_flash_set_protect_bypass(0);
0000e6  2000              MOVS     r0,#0
0000e8  f7fffffe          BL       kdp_flash_set_protect_bypass
                  |L46.236|
;;;2581               return OTA_FAIL;
0000ec  2001              MOVS     r0,#1
                  |L46.238|
;;;2582           }
;;;2583           kdp_flash_set_protect_bypass(0);
;;;2584       }
;;;2585   
;;;2586       ota_burn_in_config(0x3);
;;;2587   
;;;2588   
;;;2589   #if 0
;;;2590       if ( ota_update_info.ui_update == YES )
;;;2591       {
;;;2592           u32 nUiSize = USR_FLASH_LAST_ADDR - KDP_FLASH_LAST_ADDR;
;;;2593   
;;;2594           if ( ota_update_case( FLASH_CMD_ACT_NUM_SEL_IMAGE_UPDATE, ota_buf_start, nUiSize ) != OTA_UPDATE_SUCCESS )
;;;2595           {
;;;2596               return OTA_FAIL;
;;;2597           }
;;;2598           ota_buf_start += nUiSize;
;;;2599           total_update_size -= nUiSize;
;;;2600       }
;;;2601   #endif
;;;2602       
;;;2603       return OTA_DONE;
;;;2604   }
0000ee  b00d              ADD      sp,sp,#0x34
0000f0  bd30              POP      {r4,r5,pc}
                  |L46.242|
0000f2  2000              MOVS     r0,#0                 ;2583
0000f4  f7fffffe          BL       kdp_flash_set_protect_bypass
                  |L46.248|
0000f8  2003              MOVS     r0,#3                 ;2586
0000fa  f7fffffe          BL       ota_burn_in_config
0000fe  2000              MOVS     r0,#0                 ;2603
000100  e7f5              B        |L46.238|
;;;2605   
                          ENDP

000102  0000              DCW      0x0000
                  |L46.260|
                          DCD      ||.bss||
                  |L46.264|
000108  73637075          DCB      "scpu_update:%d\r\n",0
00010c  5f757064
000110  6174653a
000114  25640d0a
000118  00      
000119  00                DCB      0
00011a  00                DCB      0
00011b  00                DCB      0
                  |L46.284|
00011c  6e637075          DCB      "ncpu_update:%d\r\n",0
000120  5f757064
000124  6174653a
000128  25640d0a
00012c  00      
00012d  00                DCB      0
00012e  00                DCB      0
00012f  00                DCB      0
                  |L46.304|
000130  6d6f6465          DCB      "model_update:%d\r\n",0
000134  6c5f7570
000138  64617465
00013c  3a25640d
000140  0a00    
000142  00                DCB      0
000143  00                DCB      0
                  |L46.324|
000144  62696e20          DCB      "bin file check fail\r\n",0
000148  66696c65
00014c  20636865
000150  636b2066
000154  61696c0d
000158  0a00    
00015a  00                DCB      0
00015b  00                DCB      0
                  |L46.348|
00015c  73637075          DCB      "scpu ota fail, ret:%d\r\n",0
000160  206f7461
000164  20666169
000168  6c2c2072
00016c  65743a25
000170  640d0a00
                  |L46.372|
000174  73637075          DCB      "scpu ota ok, ret:%d\r\n",0
000178  206f7461
00017c  206f6b2c
000180  20726574
000184  3a25640d
000188  0a00    
00018a  00                DCB      0
00018b  00                DCB      0
                  |L46.396|
00018c  6e637075          DCB      "ncpu ota fail, ret:%d\r\n",0
000190  206f7461
000194  20666169
000198  6c2c2072
00019c  65743a25
0001a0  640d0a00
                  |L46.420|
0001a4  6e637075          DCB      "ncpu ota ok, ret:%d\r\n",0
0001a8  206f7461
0001ac  206f6b2c
0001b0  20726574
0001b4  3a25640d
0001b8  0a00    
0001ba  00                DCB      0
0001bb  00                DCB      0
                  |L46.444|
0001bc  66772069          DCB      "fw info ota fail, ret:%d\r\n",0
0001c0  6e666f20
0001c4  6f746120
0001c8  6661696c
0001cc  2c207265
0001d0  743a2564
0001d4  0d0a00  
0001d7  00                DCB      0
                  |L46.472|
0001d8  6d6f6465          DCB      "model ota fail, ret:%d\r\n",0
0001dc  6c206f74
0001e0  61206661
0001e4  696c2c20
0001e8  7265743a
0001ec  25640d0a
0001f0  00      
0001f1  00                DCB      0
0001f2  00                DCB      0
0001f3  00                DCB      0

                          AREA ||i.ota_bin_double_check||, CODE, READONLY, ALIGN=2

                  ota_bin_double_check PROC
;;;2407   
;;;2408   uint8_t ota_bin_double_check(struct ota_header_info *info)
000000  b570              PUSH     {r4-r6,lr}
;;;2409   {
;;;2410       u8 md5_crc[32], md5[16];
;;;2411       u8 i;
;;;2412       u8 special_str[] = {'K','N','E','R','O','N',' ','I','P','O'};
000002  a22b              ADR      r2,|L47.176|
000004  4606              MOV      r6,r0                 ;2409
000006  b09c              SUB      sp,sp,#0x70           ;2409
000008  ca07              LDM      r2,{r0-r2}
00000a  ab19              ADD      r3,sp,#0x64
00000c  e8830007          STM      r3,{r0-r2}
;;;2413       u8 final_str[42] = {0,};
000010  212c              MOVS     r1,#0x2c
000012  a809              ADD      r0,sp,#0x24
000014  f7fffffe          BL       __aeabi_memclr4
;;;2414   
;;;2415       //u32 ota_bin_addr = (u32)info;
;;;2416   
;;;2417       md5_main( (void*)(info->part_bin), (void*)md5, ota_update_info.total_update_size - 38 );
000018  4828              LDR      r0,|L47.188|
00001a  a915              ADD      r1,sp,#0x54
00001c  6b42              LDR      r2,[r0,#0x34]  ; ota_update_info
00001e  f1060026          ADD      r0,r6,#0x26
000022  3a26              SUBS     r2,r2,#0x26
000024  f7fffffe          BL       md5_main
;;;2418       md5_covers( md5 ,md5_crc );
000028  a901              ADD      r1,sp,#4
00002a  a815              ADD      r0,sp,#0x54
00002c  f7fffffe          BL       md5_covers
;;;2419   
;;;2420       memcpy(&final_str[0], &special_str[0], 10);
000030  220a              MOVS     r2,#0xa
000032  a919              ADD      r1,sp,#0x64
000034  a809              ADD      r0,sp,#0x24
000036  f7fffffe          BL       __aeabi_memcpy4
;;;2421       memcpy(&final_str[10], &md5_crc[0], 32);
00003a  2220              MOVS     r2,#0x20
00003c  a901              ADD      r1,sp,#4
00003e  f10d002e          ADD      r0,sp,#0x2e
000042  f7fffffe          BL       __aeabi_memcpy
;;;2422   
;;;2423       md5_main((void*)final_str, (void*)md5, sizeof(final_str));
000046  222a              MOVS     r2,#0x2a
000048  a915              ADD      r1,sp,#0x54
00004a  a809              ADD      r0,sp,#0x24
00004c  f7fffffe          BL       md5_main
;;;2424       md5_covers(md5 ,md5_crc);
000050  a901              ADD      r1,sp,#4
000052  a815              ADD      r0,sp,#0x54
000054  f7fffffe          BL       md5_covers
;;;2425   
;;;2426       dbg_msg_nocrlf("md5 32:");
000058  a019              ADR      r0,|L47.192|
00005a  f7fffffe          BL       kdp_printf_nocrlf
;;;2427       for (i = 0; i < 32; i++) dbg_msg_nocrlf (" %02X", md5_crc[i]);
00005e  2400              MOVS     r4,#0
000060  ad01              ADD      r5,sp,#4              ;2410
                  |L47.98|
000062  a019              ADR      r0,|L47.200|
000064  5d29              LDRB     r1,[r5,r4]
000066  f7fffffe          BL       kdp_printf_nocrlf
00006a  1c64              ADDS     r4,r4,#1
00006c  b2e4              UXTB     r4,r4
00006e  2c20              CMP      r4,#0x20
000070  d3f7              BCC      |L47.98|
;;;2428       dbg_msg_console("\n");   
000072  a117              ADR      r1,|L47.208|
000074  2001              MOVS     r0,#1
000076  f7fffffe          BL       kdp_level_printf
;;;2429   
;;;2430       for (i = 0; i < 32; i++) {
00007a  2300              MOVS     r3,#0
                  |L47.124|
;;;2431           if( md5_crc[i] != info->md5[i] ) {
00007c  18f1              ADDS     r1,r6,r3
00007e  5ce8              LDRB     r0,[r5,r3]
000080  7989              LDRB     r1,[r1,#6]
000082  4288              CMP      r0,r1
000084  d009              BEQ      |L47.154|
;;;2432               dbg_msg_console("[%s] FAIL: [%d]: %02x", __func__, i, md5_crc[i] );
000086  b2c0              UXTB     r0,r0
000088  9000              STR      r0,[sp,#0]
00008a  4a12              LDR      r2,|L47.212|
00008c  a112              ADR      r1,|L47.216|
00008e  2001              MOVS     r0,#1
000090  f7fffffe          BL       kdp_level_printf
;;;2433               return NO;
000094  2000              MOVS     r0,#0
                  |L47.150|
;;;2434           }
;;;2435       }
;;;2436       dbg_msg_console("[%s]Checksum ok", __func__);
;;;2437   
;;;2438       return YES;
;;;2439   }
000096  b01c              ADD      sp,sp,#0x70
000098  bd70              POP      {r4-r6,pc}
                  |L47.154|
00009a  1c5b              ADDS     r3,r3,#1
00009c  b2db              UXTB     r3,r3                 ;2430
00009e  2b20              CMP      r3,#0x20              ;2430
0000a0  d3ec              BCC      |L47.124|
0000a2  4a0c              LDR      r2,|L47.212|
0000a4  a112              ADR      r1,|L47.240|
0000a6  2001              MOVS     r0,#1                 ;2436
0000a8  f7fffffe          BL       kdp_level_printf
0000ac  2001              MOVS     r0,#1                 ;2438
0000ae  e7f2              B        |L47.150|
;;;2440   
                          ENDP

                  |L47.176|
0000b0  4b4e4552          DCB      "KNERON IPO",0
0000b4  4f4e2049
0000b8  504f00  
0000bb  00                DCB      0
                  |L47.188|
                          DCD      ||.bss||
                  |L47.192|
0000c0  6d643520          DCB      "md5 32:",0
0000c4  33323a00
                  |L47.200|
0000c8  20253032          DCB      " %02X",0
0000cc  5800    
0000ce  00                DCB      0
0000cf  00                DCB      0
                  |L47.208|
0000d0  0a0d0a00          DCB      "\n\r\n",0
                  |L47.212|
                          DCD      ||.constdata||+0x84
                  |L47.216|
0000d8  5b25735d          DCB      "[%s] FAIL: [%d]: %02x\r\n",0
0000dc  20464149
0000e0  4c3a205b
0000e4  25645d3a
0000e8  20253032
0000ec  780d0a00
                  |L47.240|
0000f0  5b25735d          DCB      "[%s]Checksum ok\r\n",0
0000f4  43686563
0000f8  6b73756d
0000fc  206f6b0d
000100  0a00    
000102  00                DCB      0
000103  00                DCB      0

                          AREA ||i.ota_check_info||, CODE, READONLY, ALIGN=2

                  ota_check_info PROC
;;;2440   
;;;2441   void ota_check_info(struct ota_header_info *info, struct ota_part_header *scpu_header, 
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;2442           struct ota_part_header *ncpu_header, struct ota_part_header* model_header)
;;;2443   {
;;;2444       //dbg_msg_console("sync word: %02x %02x", info->sync_word[0], info->sync_word[1]);
;;;2445       //dbg_msg_console("total_size: %d", info->total_size);
;;;2446   
;;;2447       for (size_t i = 0; i < KDP_OTA_MAX_PART; i++)
000004  2500              MOVS     r5,#0
;;;2448       {
;;;2449           if ((KDP_OTA_TYPE_SCPU > info->part_bin[i].type) || (info->part_bin[i].type > KDP_OTA_TYPE_MODEL))
;;;2450               break;
;;;2451   
;;;2452           dbg_msg_console("type: %d, length: %d. addr: 0x%08x", info->part_bin[i].type,
;;;2453               info->part_bin[i].length, info->part_bin[i].addr);
;;;2454   //        dbg_msg_console("version: %02x.%02x.%02x.%02x", info->part_bin[i].version[0], 
;;;2455   //            info->part_bin[i].version[1], info->part_bin[i].version[2], info->part_bin[i].version[3]);
;;;2456   
;;;2457           u32 ota_version = StreamsToBigEndU32(info->part_bin[i].version);
;;;2458           dbg_msg_console("ota_version:   %08x", ota_version);
;;;2459   
;;;2460           u32 local_version;
;;;2461           struct fw_misc_data scpu_version;
;;;2462           struct fw_misc_data ncpu_version;
;;;2463           struct fw_misc_data *model_version;
;;;2464           switch (info->part_bin[i].type)
;;;2465           {
;;;2466           case KDP_OTA_TYPE_SCPU:
;;;2467               memcpy(scpu_header, &info->part_bin[i], sizeof(struct ota_part_header));
;;;2468               
;;;2469               kl520_api_get_scpu_version(&scpu_version);
;;;2470               local_version = StreamsToBigEndU32(scpu_version.version);
;;;2471               dbg_msg_console("local_version: %08x", local_version);
;;;2472               if (ota_version != local_version)
;;;2473               {
;;;2474                   ota_update_info.scpu_update = YES;
000006  4e3f              LDR      r6,|L48.260|
000008  b085              SUB      sp,sp,#0x14           ;2443
00000a  469b              MOV      r11,r3                ;2443
00000c  4607              MOV      r7,r0                 ;2443
00000e  f04f0801          MOV      r8,#1                 ;2452
000012  46a9              MOV      r9,r5                 ;2452
                  |L48.20|
000014  eb050085          ADD      r0,r5,r5,LSL #2       ;2449
000018  eb0000c5          ADD      r0,r0,r5,LSL #3       ;2449
00001c  19c4              ADDS     r4,r0,r7              ;2449
00001e  f8942026          LDRB     r2,[r4,#0x26]         ;2449
000022  1e50              SUBS     r0,r2,#1              ;2449
000024  2803              CMP      r0,#3                 ;2449
000026  d269              BCS      |L48.252|
000028  f8d4002f          LDR      r0,[r4,#0x2f]         ;2452
00002c  9000              STR      r0,[sp,#0]            ;2452
00002e  f8d43027          LDR      r3,[r4,#0x27]         ;2452
000032  a135              ADR      r1,|L48.264|
000034  2001              MOVS     r0,#1                 ;2452
000036  f7fffffe          BL       kdp_level_printf
00003a  f104002b          ADD      r0,r4,#0x2b           ;2457
00003e  f7fffffe          BL       StreamsToBigEndU32
000042  4682              MOV      r10,r0                ;2457
000044  4602              MOV      r2,r0                 ;2458
000046  a13a              ADR      r1,|L48.304|
000048  2001              MOVS     r0,#1                 ;2458
00004a  f7fffffe          BL       kdp_level_printf
00004e  f8940026          LDRB     r0,[r4,#0x26]         ;2464
000052  2801              CMP      r0,#1                 ;2464
000054  d004              BEQ      |L48.96|
000056  2802              CMP      r0,#2                 ;2464
000058  d01c              BEQ      |L48.148|
00005a  2803              CMP      r0,#3                 ;2464
00005c  d14b              BNE      |L48.246|
00005e  e033              B        |L48.200|
                  |L48.96|
000060  f1040126          ADD      r1,r4,#0x26           ;2467
000064  220d              MOVS     r2,#0xd               ;2467
000066  9806              LDR      r0,[sp,#0x18]         ;2467
000068  f7fffffe          BL       __aeabi_memcpy
00006c  a801              ADD      r0,sp,#4              ;2469
00006e  f7fffffe          BL       kl520_api_get_scpu_version
000072  a801              ADD      r0,sp,#4              ;2470
000074  f7fffffe          BL       StreamsToBigEndU32
000078  4604              MOV      r4,r0                 ;2470
00007a  4602              MOV      r2,r0                 ;2471
00007c  a132              ADR      r1,|L48.328|
00007e  2001              MOVS     r0,#1                 ;2471
000080  f7fffffe          BL       kdp_level_printf
000084  45a2              CMP      r10,r4                ;2472
000086  d002              BEQ      |L48.142|
000088  f886805e          STRB     r8,[r6,#0x5e]
00008c  e033              B        |L48.246|
                  |L48.142|
;;;2475               }
;;;2476               else
;;;2477               {
;;;2478                   ota_update_info.scpu_update = NO;
00008e  f886905e          STRB     r9,[r6,#0x5e]
000092  e030              B        |L48.246|
                  |L48.148|
;;;2479               }
;;;2480               break;
;;;2481   
;;;2482           case KDP_OTA_TYPE_NCPU:
;;;2483               memcpy(ncpu_header, &info->part_bin[i], sizeof(struct ota_part_header));
000094  f1040126          ADD      r1,r4,#0x26
000098  220d              MOVS     r2,#0xd
00009a  9807              LDR      r0,[sp,#0x1c]
00009c  f7fffffe          BL       __aeabi_memcpy
;;;2484               
;;;2485               kl520_api_get_ncpu_version(&ncpu_version);
0000a0  a803              ADD      r0,sp,#0xc
0000a2  f7fffffe          BL       kl520_api_get_ncpu_version
;;;2486               local_version = StreamsToBigEndU32(ncpu_version.version);
0000a6  a803              ADD      r0,sp,#0xc
0000a8  f7fffffe          BL       StreamsToBigEndU32
0000ac  4604              MOV      r4,r0
;;;2487               dbg_msg_console("local_version: %08x", local_version);
0000ae  4602              MOV      r2,r0
0000b0  a125              ADR      r1,|L48.328|
0000b2  2001              MOVS     r0,#1
0000b4  f7fffffe          BL       kdp_level_printf
;;;2488               if (ota_version != local_version)
0000b8  45a2              CMP      r10,r4
0000ba  d002              BEQ      |L48.194|
;;;2489               {
;;;2490                   ota_update_info.ncpu_update = YES;
0000bc  f886805d          STRB     r8,[r6,#0x5d]
0000c0  e019              B        |L48.246|
                  |L48.194|
;;;2491               }
;;;2492               else
;;;2493               {
;;;2494                   ota_update_info.ncpu_update = NO;
0000c2  f886905d          STRB     r9,[r6,#0x5d]
0000c6  e016              B        |L48.246|
                  |L48.200|
;;;2495               }
;;;2496               break;
;;;2497   
;;;2498           case KDP_OTA_TYPE_MODEL:
;;;2499               memcpy(model_header, &info->part_bin[i], sizeof(struct ota_part_header));
0000c8  f1040126          ADD      r1,r4,#0x26
0000cc  220d              MOVS     r2,#0xd
0000ce  4658              MOV      r0,r11
0000d0  f7fffffe          BL       __aeabi_memcpy
;;;2500   
;;;2501               model_version = kl520_api_get_model_version();
0000d4  f7fffffe          BL       kl520_api_get_model_version
;;;2502               local_version = StreamsToBigEndU32(model_version->version);
0000d8  f7fffffe          BL       StreamsToBigEndU32
0000dc  4604              MOV      r4,r0
;;;2503               dbg_msg_console("local_version: %08x", local_version);
0000de  4602              MOV      r2,r0
0000e0  a119              ADR      r1,|L48.328|
0000e2  2001              MOVS     r0,#1
0000e4  f7fffffe          BL       kdp_level_printf
;;;2504               if (ota_version != local_version)
0000e8  45a2              CMP      r10,r4
0000ea  d002              BEQ      |L48.242|
;;;2505               {
;;;2506                   ota_update_info.model_update = YES;
0000ec  f886805f          STRB     r8,[r6,#0x5f]
0000f0  e001              B        |L48.246|
                  |L48.242|
;;;2507               }
;;;2508               else
;;;2509               {
;;;2510                   ota_update_info.model_update = NO;
0000f2  f886905f          STRB     r9,[r6,#0x5f]
                  |L48.246|
0000f6  1c6d              ADDS     r5,r5,#1
0000f8  2d03              CMP      r5,#3                 ;2447
0000fa  d38b              BCC      |L48.20|
                  |L48.252|
;;;2511               }
;;;2512               break;
;;;2513   
;;;2514           default:
;;;2515               break;
;;;2516           }
;;;2517       }
;;;2518   }
0000fc  b009              ADD      sp,sp,#0x24
0000fe  e8bd8ff0          POP      {r4-r11,pc}
;;;2519   
                          ENDP

000102  0000              DCW      0x0000
                  |L48.260|
                          DCD      ||.bss||
                  |L48.264|
000108  74797065          DCB      "type: %d, length: %d. addr: 0x%08x\r\n",0
00010c  3a202564
000110  2c206c65
000114  6e677468
000118  3a202564
00011c  2e206164
000120  64723a20
000124  30782530
000128  38780d0a
00012c  00      
00012d  00                DCB      0
00012e  00                DCB      0
00012f  00                DCB      0
                  |L48.304|
000130  6f74615f          DCB      "ota_version:   %08x\r\n",0
000134  76657273
000138  696f6e3a
00013c  20202025
000140  3038780d
000144  0a00    
000146  00                DCB      0
000147  00                DCB      0
                  |L48.328|
000148  6c6f6361          DCB      "local_version: %08x\r\n",0
00014c  6c5f7665
000150  7273696f
000154  6e3a2025
000158  3038780d
00015c  0a00    
00015e  00                DCB      0
00015f  00                DCB      0

                          AREA ||i.uart_face_add_timeout||, CODE, READONLY, ALIGN=2

                  uart_face_add_timeout PROC
;;;1930   //Refer to uart_sample_face_add_timeout
;;;1931   extern uint16_t uart_face_add_timeout(u8_t admin, char *user_name, u8_t face_type, uint16_t time_out_ms, uint8_t cmd_id)
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;1932   {
000004  b081              SUB      sp,sp,#4
000006  4690              MOV      r8,r2
;;;1933       kdp_e2e_face_variables* vars = kdp_e2e_get_face_variables();
000008  f7fffffe          BL       kdp_e2e_get_face_variables
;;;1934       db_write = DB_FACE_ADD_GOING;
00000c  4993              LDR      r1,|L49.604|
00000e  4607              MOV      r7,r0                 ;1933
000010  2001              MOVS     r0,#1
;;;1935   
;;;1936       u16 ret = 0xFF0F;
;;;1937       u8 result = MR_SUCCESS;
000012  2600              MOVS     r6,#0
000014  7008              STRB     r0,[r1,#0]            ;1934
;;;1938       u8 bmp=0;
;;;1939   		if((KDP_FACE_DIRECTION_UNDEFINE <  face_type ) && (KDP_FACE_DIRECTION_MASK> face_type))
000016  f1a80001          SUB      r0,r8,#1
;;;1940   		{
;;;1941   			if(face_type == KDP_FACE_DIRECTION_MIDDLE )
;;;1942   			{
;;;1943                   bmp = 1 << FACE_ADD_TYPE_NORMAL;
;;;1944                   g_eFaceDirState = 0;
00001a  f8df9244          LDR      r9,|L49.608|
00001e  f64f740f          MOV      r4,#0xff0f            ;1936
000022  4635              MOV      r5,r6                 ;1938
;;;1945                   face_reg_sts = 0;
;;;1946   			}
;;;1947   			else
;;;1948   			{
;;;1949   					if(face_type & KDP_FACE_DIRECTION_RIGHT) bmp |= 1<<FACE_ADD_TYPE_RIGHT;
;;;1950   					if(face_type & KDP_FACE_DIRECTION_LEFT)  bmp |= 1<<FACE_ADD_TYPE_LEFT;
;;;1951   					if(face_type & KDP_FACE_DIRECTION_DOWN)  bmp |= 1<<FACE_ADD_TYPE_DOWN;
;;;1952   					if(face_type & KDP_FACE_DIRECTION_UP)    bmp |= 1<<FACE_ADD_TYPE_UP;
;;;1953   			}
;;;1954   		
;;;1955   			if(bmp == (1<<FACE_ADD_TYPE_NORMAL))
;;;1956   			{
;;;1957   					vars->admin = admin;
;;;1958   					memcpy(vars->user_name, user_name, MAX_LEN_USERNAME);
;;;1959   			}
;;;1960   		}
;;;1961   		else
;;;1962   		{
;;;1963   				g_eFaceDirState = 0;    
;;;1964   				g_nFaceId = 0xFF;
;;;1965   				ret = 0xFF05; // PARAMETER ERROR
000024  f64f7b05          MOV      r11,#0xff05
000028  46b2              MOV      r10,r6
00002a  281e              CMP      r0,#0x1e              ;1939
00002c  d228              BCS      |L49.128|
00002e  f1b80f01          CMP      r8,#1                 ;1941
000032  d015              BEQ      |L49.96|
000034  ea5f7088          LSLS     r0,r8,#30             ;1949
000038  d500              BPL      |L49.60|
00003a  2504              MOVS     r5,#4                 ;1949
                  |L49.60|
00003c  ea5f7048          LSLS     r0,r8,#29             ;1950
000040  d501              BPL      |L49.70|
000042  f0450502          ORR      r5,r5,#2              ;1950
                  |L49.70|
000046  ea5f7008          LSLS     r0,r8,#28             ;1951
00004a  d501              BPL      |L49.80|
00004c  f0450510          ORR      r5,r5,#0x10           ;1951
                  |L49.80|
000050  ea5f60c8          LSLS     r0,r8,#27             ;1952
000054  d501              BPL      |L49.90|
000056  f0450508          ORR      r5,r5,#8              ;1952
                  |L49.90|
00005a  2d01              CMP      r5,#1                 ;1955
00005c  d006              BEQ      |L49.108|
00005e  e015              B        |L49.140|
                  |L49.96|
000060  4980              LDR      r1,|L49.612|
000062  f889a000          STRB     r10,[r9,#0]           ;1944
000066  2501              MOVS     r5,#1                 ;1943
000068  f8c1a000          STR      r10,[r1,#0]           ;1945  ; face_reg_sts
                  |L49.108|
00006c  9801              LDR      r0,[sp,#4]            ;1957
00006e  f887006c          STRB     r0,[r7,#0x6c]         ;1957
000072  2220              MOVS     r2,#0x20              ;1958
000074  f107004c          ADD      r0,r7,#0x4c           ;1958
000078  9902              LDR      r1,[sp,#8]            ;1958
00007a  f7fffffe          BL       __aeabi_memcpy
00007e  e005              B        |L49.140|
                  |L49.128|
000080  f889a000          STRB     r10,[r9,#0]           ;1963
000084  21ff              MOVS     r1,#0xff              ;1964
000086  f8a9100c          STRH     r1,[r9,#0xc]          ;1964
00008a  465c              MOV      r4,r11
                  |L49.140|
;;;1966   		}
;;;1967   
;;;1968   
;;;1969       if ( ( g_tImpExpMassDataPkgInfo.nReadyType == DATA_READY_TYPE_IMP_FM ) ||
00008c  f8df81d8          LDR      r8,|L49.616|
000090  f8980017          LDRB     r0,[r8,#0x17]  ; g_tImpExpMassDataPkgInfo
000094  2820              CMP      r0,#0x20
000096  d029              BEQ      |L49.236|
;;;1970            ( g_tImpExpMassDataPkgInfo.nReadyType == DATA_READY_TYPE_IMP_IMG ) )
000098  2830              CMP      r0,#0x30
00009a  d027              BEQ      |L49.236|
;;;1971       {
;;;1972           kl520_api_face_close();
;;;1973           kl520_api_face_set_add_mode(FACE_ADD_MODE_1_FACE);
;;;1974           kdp_e2e_prop_set2(flow_mode, FLOW_MODE_SIM_PRE_ADD);
;;;1975   
;;;1976   #if (CFG_AI_TYPE == AI_TYPE_N1R1)
;;;1977           vars->rgb_led_flag = TRUE;
;;;1978           vars->nir_led_flag = TRUE; //for sim, always on.
;;;1979   
;;;1980           if (vars->rgb_led_flag == FALSE && vars->rgb_led_lv_history_flag == FALSE)
;;;1981               vars->rgb_led_flag = FALSE;
;;;1982           else
;;;1983               vars->rgb_led_flag = TRUE;
;;;1984   #endif
;;;1985   
;;;1986           vars->pre_add = AI_TYPE_PR1; //default rgb to nir
;;;1987           if(g_tImpExpMassDataPkgInfo.nExtData == KDP_IMP_FM_NIR_TO_NIR) { //nir to nir
;;;1988               vars->pre_add += 0x80;
;;;1989           }
;;;1990           dbg_msg_algo("[%s] pre_add type = %d", __func__, vars->pre_add);
;;;1991   
;;;1992           kl520_api_face_add(0, 0, DISPLAY_WIDTH, DISPLAY_HEIGHT, FACE_ADD_TYPE_NORMAL);
;;;1993   
;;;1994           ret = kl520_api_add_wait_and_get();
;;;1995           kdp_e2e_prop_set2(flow_mode, FLOW_MODE_NORMAL);
;;;1996           kl520_api_face_close();
;;;1997           vars->pre_add = 0;
;;;1998   				//zcy add for import fm set stat FACE_ADD_MODE_5_FACES return id
;;;1999   				g_eFaceDirState = KDP_FACE_DIRECTION_MASK;
;;;2000   
;;;2001       }
;;;2002       else
;;;2003       {
;;;2004           kl520_api_face_add_set_timeout(time_out_ms);
00009c  9804              LDR      r0,[sp,#0x10]
00009e  f7fffffe          BL       kl520_api_face_add_set_timeout
;;;2005   
;;;2006   #ifdef KID_ENROLL_SINGLE
;;;2007           if ( g_eEnrollAddFaceTypeMode == FACE_ADD_MODE_1_FACE )
0000a2  f8990003          LDRB     r0,[r9,#3]  ; g_eEnrollAddFaceTypeMode
0000a6  2801              CMP      r0,#1
0000a8  d002              BEQ      |L49.176|
;;;2008           {
;;;2009               kl520_api_face_set_add_mode(FACE_ADD_MODE_1_FACE);
;;;2010           }
;;;2011           else
;;;2012   #endif
;;;2013           {
;;;2014               kl520_api_dp_five_face_enable();
0000aa  f7fffffe          BL       kl520_api_dp_five_face_enable
;;;2015               kl520_api_face_set_add_mode(FACE_ADD_MODE_5_FACES);
0000ae  2002              MOVS     r0,#2
                  |L49.176|
0000b0  f7fffffe          BL       kl520_api_face_set_add_mode
0000b4  b145              CBZ      r5,|L49.200|
;;;2016           }
;;;2017   
;;;2018           if(bmp)
;;;2019           {
;;;2020               ret = _face_add_internal(0, 0, DISPLAY_WIDTH, DISPLAY_HEIGHT, (kl520_face_add_type)bmp);
0000b6  2100              MOVS     r1,#0
0000b8  23f0              MOVS     r3,#0xf0
0000ba  f44f72a0          MOV      r2,#0x140
0000be  4608              MOV      r0,r1
0000c0  9500              STR      r5,[sp,#0]
0000c2  f7fffffe          BL       _face_add_internal
0000c6  b284              UXTH     r4,r0
                  |L49.200|
;;;2021           }
;;;2022   
;;;2023       }
;;;2024   
;;;2025       if (tid_abort_thread != 0)
0000c8  4868              LDR      r0,|L49.620|
0000ca  6800              LDR      r0,[r0,#0]  ; tid_abort_thread
0000cc  b108              CBZ      r0,|L49.210|
;;;2026       {
;;;2027           sample_force_abort_disable();
0000ce  f7fffffe          BL       sample_force_abort_disable
                  |L49.210|
;;;2028       }
;;;2029   
;;;2030       if (KL520_FACE_OK == ret)
0000d2  b3bc              CBZ      r4,|L49.324|
;;;2031       {
;;;2032           if (0xFF != kl520_api_face_get_curr_face_id())
;;;2033           {
;;;2034               g_nFaceId = (u8)kl520_api_face_get_curr_face_id();
;;;2035               kl520_api_face_set_curr_face_id(0xFF);
;;;2036           }
;;;2037   
;;;2038           ret = ret + ((g_nFaceId&0xFF)<<8);
;;;2039           result = MR_SUCCESS;
;;;2040   
;;;2041           extern u8 face_succ_index;
;;;2042           switch(face_succ_index)
;;;2043           {	
;;;2044               case FACE_ADD_TYPE_NORMAL: //middle
;;;2045                   g_eFaceDirState |= KDP_FACE_DIRECTION_MIDDLE;
;;;2046                   break;
;;;2047               case FACE_ADD_TYPE_LEFT: //left
;;;2048                   g_eFaceDirState |= KDP_FACE_DIRECTION_LEFT;
;;;2049                   break;
;;;2050               case FACE_ADD_TYPE_RIGHT: //right
;;;2051                   g_eFaceDirState |= KDP_FACE_DIRECTION_RIGHT;
;;;2052                   break;
;;;2053               case FACE_ADD_TYPE_UP: //up
;;;2054                   g_eFaceDirState |= KDP_FACE_DIRECTION_UP;
;;;2055                   break;
;;;2056               case FACE_ADD_TYPE_DOWN: //down
;;;2057                   g_eFaceDirState |= KDP_FACE_DIRECTION_DOWN;
;;;2058                   break;
;;;2059           }
;;;2060   
;;;2061       }
;;;2062       else if (KL520_FACE_EXIST == ret){ 
0000d4  2c07              CMP      r4,#7
0000d6  d066              BEQ      |L49.422|
;;;2063   			ret = 0xFF02; 
;;;2064   			result = MR_FAILED_FACE_ENROLLED; 
;;;2065   			g_eFaceDirState = KDP_FACE_DIRECTION_MASK;
;;;2066   			 
;;;2067   			g_nFaceId = (u8)kl520_api_face_get_curr_face_id(); //zcy add for return user id 
;;;2068   			dbg_msg_console("[%s] g_nFaceId= %x and g_eFaceDirState %x", __func__, g_nFaceId,g_eFaceDirState);
;;;2069   	  }
;;;2070       else if (KL520_FACE_TIMEOUT == ret){ ret = 0xFF03; result = MR_FAILED_TIME_OUT; }
0000d8  2c06              CMP      r4,#6
0000da  d07b              BEQ      |L49.468|
;;;2071       else if (KL520_FACE_FULL == ret){ ret = 0xFF01; result = MR_FAILED_MAX_USER; }
0000dc  2c09              CMP      r4,#9
0000de  d07d              BEQ      |L49.476|
;;;2072       else if (KL520_FACE_ATTACK == ret){ ret = 0xFF05; result = MR_FAILED_LIVENESS_CHECK; }
0000e0  2c1e              CMP      r4,#0x1e
0000e2  d07f              BEQ      |L49.484|
;;;2073       else if (0xff05 == ret) {result = MR_FAILED_INVALID_PARAM;}
0000e4  455c              CMP      r4,r11
0000e6  d174              BNE      |L49.466|
0000e8  2606              MOVS     r6,#6
0000ea  e081              B        |L49.496|
                  |L49.236|
0000ec  f7fffffe          BL       kl520_api_face_close
0000f0  2001              MOVS     r0,#1                 ;1973
0000f2  f7fffffe          BL       kl520_api_face_set_add_mode
0000f6  f7fffffe          BL       kdp_e2e_prop_get_inst
0000fa  2104              MOVS     r1,#4                 ;1974
0000fc  60c1              STR      r1,[r0,#0xc]          ;1977
0000fe  2001              MOVS     r0,#1                 ;1977
000100  f8870092          STRB     r0,[r7,#0x92]         ;1978
000104  f887007a          STRB     r0,[r7,#0x7a]         ;1983
000108  7039              STRB     r1,[r7,#0]            ;1986
00010a  f8b8000f          LDRH     r0,[r8,#0xf]          ;1987  ; g_tImpExpMassDataPkgInfo
00010e  2806              CMP      r0,#6                 ;1987
000110  d101              BNE      |L49.278|
000112  2084              MOVS     r0,#0x84              ;1988
000114  7038              STRB     r0,[r7,#0]            ;1988
                  |L49.278|
000116  2100              MOVS     r1,#0                 ;1992
000118  4655              MOV      r5,r10                ;1992
00011a  23f0              MOVS     r3,#0xf0              ;1992
00011c  f44f72a0          MOV      r2,#0x140             ;1992
000120  4608              MOV      r0,r1                 ;1992
000122  f8cda000          STR      r10,[sp,#0]           ;1992
000126  f7fffffe          BL       kl520_api_face_add
00012a  f7fffffe          BL       kl520_api_add_wait_and_get
00012e  b284              UXTH     r4,r0                 ;1994
000130  f7fffffe          BL       kdp_e2e_prop_get_inst
000134  60c5              STR      r5,[r0,#0xc]          ;1996
000136  f7fffffe          BL       kl520_api_face_close
00013a  703d              STRB     r5,[r7,#0]            ;1997
00013c  201f              MOVS     r0,#0x1f              ;1999
00013e  f8890000          STRB     r0,[r9,#0]            ;1999
000142  e7c1              B        |L49.200|
                  |L49.324|
000144  e7ff              B        |L49.326|
                  |L49.326|
000146  f7fffffe          BL       kl520_api_face_get_curr_face_id
00014a  28ff              CMP      r0,#0xff              ;2032
00014c  d006              BEQ      |L49.348|
00014e  f7fffffe          BL       kl520_api_face_get_curr_face_id
000152  f8a9000c          STRH     r0,[r9,#0xc]          ;2034
000156  20ff              MOVS     r0,#0xff              ;2035
000158  f7fffffe          BL       kl520_api_face_set_curr_face_id
                  |L49.348|
00015c  f899100c          LDRB     r1,[r9,#0xc]          ;2038  ; g_nFaceId
000160  4648              MOV      r0,r9                 ;2038
000162  eb042101          ADD      r1,r4,r1,LSL #8       ;2038
000166  b28c              UXTH     r4,r1                 ;2038
000168  4941              LDR      r1,|L49.624|
00016a  7809              LDRB     r1,[r1,#0]            ;2042  ; face_succ_index
00016c  2905              CMP      r1,#5                 ;2042
00016e  d23f              BCS      |L49.496|
000170  e8dff001          TBB      [pc,r1]               ;2042
000174  03070b0f          DCB      0x03,0x07,0x0b,0x0f
000178  1300              DCB      0x13,0x00
00017a  7801              LDRB     r1,[r0,#0]            ;2045  ; g_eFaceDirState
00017c  f0410101          ORR      r1,r1,#1              ;2045
000180  e00e              B        |L49.416|
000182  7801              LDRB     r1,[r0,#0]            ;2048  ; g_eFaceDirState
000184  f0410104          ORR      r1,r1,#4              ;2048
000188  e00a              B        |L49.416|
00018a  7801              LDRB     r1,[r0,#0]            ;2051  ; g_eFaceDirState
00018c  f0410102          ORR      r1,r1,#2              ;2051
000190  e006              B        |L49.416|
000192  7801              LDRB     r1,[r0,#0]            ;2054  ; g_eFaceDirState
000194  f0410110          ORR      r1,r1,#0x10           ;2054
000198  e002              B        |L49.416|
00019a  7801              LDRB     r1,[r0,#0]            ;2057  ; g_eFaceDirState
00019c  f0410108          ORR      r1,r1,#8              ;2057
                  |L49.416|
0001a0  f8891000          STRB     r1,[r9,#0]            ;2057
0001a4  e024              B        |L49.496|
                  |L49.422|
0001a6  201f              MOVS     r0,#0x1f              ;2065
0001a8  f64f7402          MOV      r4,#0xff02            ;2063
0001ac  260a              MOVS     r6,#0xa               ;2064
0001ae  464d              MOV      r5,r9                 ;2065
0001b0  f8890000          STRB     r0,[r9,#0]            ;2065
0001b4  f7fffffe          BL       kl520_api_face_get_curr_face_id
0001b8  81a8              STRH     r0,[r5,#0xc]          ;2067
0001ba  7829              LDRB     r1,[r5,#0]            ;2068  ; g_eFaceDirState
0001bc  4603              MOV      r3,r0                 ;2068
0001be  9100              STR      r1,[sp,#0]            ;2068
0001c0  4a2c              LDR      r2,|L49.628|
0001c2  a12d              ADR      r1,|L49.632|
0001c4  2001              MOVS     r0,#1                 ;2068
0001c6  f7fffffe          BL       kdp_level_printf
0001ca  e011              B        |L49.496|
0001cc  e002              B        |L49.468|
0001ce  e005              B        |L49.476|
0001d0  e008              B        |L49.484|
                  |L49.466|
0001d2  e00a              B        |L49.490|
                  |L49.468|
0001d4  f64f7403          MOV      r4,#0xff03            ;2070
0001d8  260d              MOVS     r6,#0xd               ;2070
0001da  e009              B        |L49.496|
                  |L49.476|
0001dc  f64f7401          MOV      r4,#0xff01            ;2071
0001e0  2609              MOVS     r6,#9                 ;2071
0001e2  e005              B        |L49.496|
                  |L49.484|
0001e4  465c              MOV      r4,r11                ;2072
0001e6  260c              MOVS     r6,#0xc               ;2072
0001e8  e002              B        |L49.496|
                  |L49.490|
;;;2074       else{ ret = 0xFF0F; result = MR_ABORTED; }
0001ea  f64f740f          MOV      r4,#0xff0f
0001ee  2602              MOVS     r6,#2
                  |L49.496|
;;;2075   
;;;2076       SysWaitDelayTime();
0001f0  f7fffffe          BL       SysWaitDelayTime
;;;2077       if ( g_bStopSendMsg == FALSE )
0001f4  f8990001          LDRB     r0,[r9,#1]  ; g_bStopSendMsg
0001f8  464d              MOV      r5,r9
0001fa  bb40              CBNZ     r0,|L49.590|
;;;2078       {
;;;2079           u16 user_id;
;;;2080           if ((g_eEnrollAddFaceTypeMode == FACE_ADD_MODE_5_FACES) && 
0001fc  78e8              LDRB     r0,[r5,#3]  ; g_eEnrollAddFaceTypeMode
0001fe  2802              CMP      r0,#2
000200  d10b              BNE      |L49.538|
;;;2081               (g_eFaceDirState != KDP_FACE_DIRECTION_MASK) && 
000202  7829              LDRB     r1,[r5,#0]  ; g_eFaceDirState
000204  291f              CMP      r1,#0x1f
000206  d008              BEQ      |L49.538|
;;;2082               ( g_tImpExpMassDataPkgInfo.nReadyType != DATA_READY_TYPE_IMP_FM ) && 
000208  f8981017          LDRB     r1,[r8,#0x17]  ; g_tImpExpMassDataPkgInfo
00020c  2920              CMP      r1,#0x20
00020e  d004              BEQ      |L49.538|
;;;2083               ( g_tImpExpMassDataPkgInfo.nReadyType != DATA_READY_TYPE_IMP_IMG ) )
000210  2930              CMP      r1,#0x30
000212  d002              BEQ      |L49.538|
;;;2084               user_id = 0xFFFF;
000214  f64f77ff          MOV      r7,#0xffff
000218  e00a              B        |L49.560|
                  |L49.538|
;;;2085           else
;;;2086               user_id = g_nFaceId;
00021a  89af              LDRH     r7,[r5,#0xc]  ; g_nFaceId
;;;2087           
;;;2088           if (((g_eEnrollAddFaceTypeMode == FACE_ADD_MODE_5_FACES) && (g_eFaceDirState == KDP_FACE_DIRECTION_MASK)) ||
00021c  2802              CMP      r0,#2
00021e  d002              BEQ      |L49.550|
;;;2089               ((g_eEnrollAddFaceTypeMode == FACE_ADD_MODE_1_FACE) /*&& (g_eFaceDirState == KDP_FACE_DIRECTION_MIDDLE)*/))
000220  2801              CMP      r0,#1
000222  d003              BEQ      |L49.556|
000224  e004              B        |L49.560|
                  |L49.550|
000226  7829              LDRB     r1,[r5,#0]            ;2088  ; g_eFaceDirState
000228  291f              CMP      r1,#0x1f              ;2088
00022a  d101              BNE      |L49.560|
                  |L49.556|
;;;2090           {
;;;2091               user_id = g_nFaceId;
;;;2092               g_eFaceDirState = KDP_FACE_DIRECTION_MASK;
00022c  211f              MOVS     r1,#0x1f
00022e  7029              STRB     r1,[r5,#0]
                  |L49.560|
;;;2093           }
;;;2094           dbg_msg_console("[%s] userid= %x g_eEnrollAddFaceTypeMode %d", __func__, user_id,g_eEnrollAddFaceTypeMode);
000230  9000              STR      r0,[sp,#0]
000232  463b              MOV      r3,r7
000234  4a0f              LDR      r2,|L49.628|
000236  a11b              ADR      r1,|L49.676|
000238  2001              MOVS     r0,#1
00023a  f7fffffe          BL       kdp_level_printf
;;;2095           send_enroll_reply_msg(result, ((user_id >> 8) & 0xFF), ((user_id >> 0) & 0xFF), g_eFaceDirState, cmd_id);
00023e  980e              LDR      r0,[sp,#0x38]
000240  9000              STR      r0,[sp,#0]
000242  b2fa              UXTB     r2,r7
000244  0a39              LSRS     r1,r7,#8
000246  782b              LDRB     r3,[r5,#0]  ; g_eFaceDirState
000248  4630              MOV      r0,r6
00024a  f7fffffe          BL       send_enroll_reply_msg
                  |L49.590|
;;;2096       }
;;;2097       db_write = DB_FACE_ADD_IDLE;
00024e  4903              LDR      r1,|L49.604|
;;;2098       return ret;
000250  4620              MOV      r0,r4
000252  f881a000          STRB     r10,[r1,#0]           ;2097
;;;2099   }
000256  b005              ADD      sp,sp,#0x14
000258  e8bd8ff0          POP      {r4-r11,pc}
;;;2100   //-----ENROLL
                          ENDP

                  |L49.604|
                          DCD      db_write
                  |L49.608|
                          DCD      ||.data||
                  |L49.612|
                          DCD      face_reg_sts
                  |L49.616|
                          DCD      ||.bss||+0x6c
                  |L49.620|
                          DCD      tid_abort_thread
                  |L49.624|
                          DCD      face_succ_index
                  |L49.628|
                          DCD      ||.constdata||+0x5d
                  |L49.632|
000278  5b25735d          DCB      "[%s] g_nFaceId= %x and g_eFaceDirState %x\r\n",0
00027c  20675f6e
000280  46616365
000284  49643d20
000288  25782061
00028c  6e642067
000290  5f654661
000294  63654469
000298  72537461
00029c  74652025
0002a0  780d0a00
                  |L49.676|
0002a4  5b25735d          DCB      "[%s] userid= %x g_eEnrollAddFaceTypeMode %d\r\n",0
0002a8  20757365
0002ac  7269643d
0002b0  20257820
0002b4  675f6545
0002b8  6e726f6c
0002bc  6c416464
0002c0  46616365
0002c4  54797065
0002c8  4d6f6465
0002cc  2025640d
0002d0  0a00    
0002d2  00                DCB      0
0002d3  00                DCB      0

                          AREA ||i.uart_face_recognition_timeout||, CODE, READONLY, ALIGN=2

                  uart_face_recognition_timeout PROC
;;;2106   
;;;2107   extern uint16_t uart_face_recognition_timeout(u8 pd_rightaway, uint16_t time_out_ms)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;2108   {
;;;2109       u16 ret = 0;
;;;2110       u8 face_id = 0;
000004  f04f0800          MOV      r8,#0
000008  b09c              SUB      sp,sp,#0x70           ;2108
00000a  4689              MOV      r9,r1                 ;2108
00000c  4645              MOV      r5,r8
00000e  f88d8020          STRB     r8,[sp,#0x20]
;;;2111       u32 events = 0;
000012  4647              MOV      r7,r8
;;;2112       u16 input = 0;
;;;2113   //    system_info t_sys_info = { 0 };
;;;2114       u8 result = MR_SUCCESS;
;;;2115       char buf[USER_NAME_SIZE]={'L','I','V','E','N','E','S','S'};
000014  2118              MOVS     r1,#0x18
000016  a815              ADD      r0,sp,#0x54
000018  f7fffffe          BL       __aeabi_memclr4
00001c  497d              LDR      r1,|L50.532|
00001e  e9d10100          LDRD     r0,r1,[r1,#0]
000022  e9cd0113          STRD     r0,r1,[sp,#0x4c]
;;;2116       msg_verify_data s_msg;
;;;2117       memset(&(s_msg), 0, sizeof(s_msg));
000026  2124              MOVS     r1,#0x24
000028  a80a              ADD      r0,sp,#0x28
00002a  f7fffffe          BL       __aeabi_memclr4
;;;2118       s_msg.user_id_heb = 0xFF;
00002e  20ff              MOVS     r0,#0xff
;;;2119       s_msg.user_id_leb = 0xFF;
;;;2120   #if (CFG_E2E_REC_NOTE == YES)
;;;2121       skip_face_note = 0;
000030  4c79              LDR      r4,|L50.536|
000032  f88d0028          STRB     r0,[sp,#0x28]         ;2118
000036  f88d0029          STRB     r0,[sp,#0x29]         ;2119
00003a  8165              STRH     r5,[r4,#0xa]
00003c  ae0d              ADD      r6,sp,#0x34           ;2116
;;;2122   #endif
;;;2123   
;;;2124       if(time_out_ms == 0) { //if time out is 0.
00003e  f1b90f00          CMP      r9,#0
000042  d024              BEQ      |L50.142|
;;;2125           result = MR_FAILED_INVALID_PARAM;
;;;2126           send_verify_reply_msg(result, s_msg);
;;;2127           return result;
;;;2128       }
;;;2129       
;;;2130       if (g_tImpExpMassDataPkgInfo.eType == MASS_DATA_IMP_FM)
000044  4875              LDR      r0,|L50.540|
000046  7b80              LDRB     r0,[r0,#0xe]  ; g_tImpExpMassDataPkgInfo
000048  2832              CMP      r0,#0x32
00004a  d022              BEQ      |L50.146|
;;;2131       {
;;;2132           osDelay(1000);
;;;2133           result = MR_REJECTED;
;;;2134           send_verify_reply_msg(result, s_msg);
;;;2135           return result;
;;;2136       }
;;;2137   
;;;2138       int face_ret = 0;
;;;2139       if ( g_bUserDemoMode == TRUE )
00004c  78a0              LDRB     r0,[r4,#2]  ; g_bUserDemoMode
;;;2140       {
;;;2141           dbg_msg_console("[Demo]Verify");
;;;2142           kl520_api_face_liveness_set_timeout(time_out_ms);
;;;2143           face_ret = kl520_api_face_liveness(0, 0, DISPLAY_WIDTH, DISPLAY_HEIGHT);
00004e  f44f75a0          MOV      r5,#0x140
000052  2801              CMP      r0,#1                 ;2139
000054  d02e              BEQ      |L50.180|
;;;2144       }
;;;2145       else
;;;2146       {
;;;2147           kl520_api_face_recognition_set_timeout(time_out_ms);
000056  4648              MOV      r0,r9
000058  f7fffffe          BL       kl520_api_face_recognition_set_timeout
;;;2148           face_ret = kl520_api_face_recognition(0, 0, DISPLAY_WIDTH, (input == 0)?DISPLAY_HEIGHT:input);
00005c  2100              MOVS     r1,#0
00005e  23f0              MOVS     r3,#0xf0
000060  462a              MOV      r2,r5
000062  4608              MOV      r0,r1
000064  f7fffffe          BL       kl520_api_face_recognition
                  |L50.104|
000068  4605              MOV      r5,r0                 ;2143
;;;2149       }
;;;2150   
;;;2151       do{
;;;2152   //        kl520_face_recognition_note();
;;;2153   #if KL520_REC_EYEMODE == YES
;;;2154           events = osEventFlagsWait( kl520_api_get_event(), KL520_APP_FLAG_FDFR | KL520_DEVICE_FLAG_ERR, osFlagsWaitAny, 100); // 100ms
;;;2155           if( events == 0xfffffffe ) {
;;;2156               if( get_eye_mode_status() == 1 ) {
;;;2157                   kl520_face_recognition_note();
;;;2158               }
;;;2159               //clear_event( kl520_api_get_event(), KL520_APP_FLAG_FDFR | KL520_DEVICE_FLAG_ERR );
;;;2160               continue;
;;;2161   
;;;2162           }
;;;2163   #else
;;;2164           if(face_ret != -1) {
;;;2165               events = wait_event(kl520_api_get_event(), KL520_APP_FLAG_FDFR | KL520_DEVICE_FLAG_ERR);
;;;2166           }
;;;2167   #endif
;;;2168   //        kl520_face_note_Terminate();
;;;2169   //        dbg_msg_console("sample_face_recognition events, events=%d", events);
;;;2170   
;;;2171   
;;;2172           if(events == KL520_DEVICE_FLAG_ERR){    result = MR_FAILED_DEV_OPEN_FAIL;     ret = 0xFF02;   break;}
00006a  f44f7a80          MOV      r10,#0x100
00006e  46a1              MOV      r9,r4                 ;2121
                  |L50.112|
000070  1c68              ADDS     r0,r5,#1              ;2164
000072  d006              BEQ      |L50.130|
000074  f7fffffe          BL       kl520_api_get_event
000078  f2401107          MOV      r1,#0x107             ;2165
00007c  f7fffffe          BL       wait_event
000080  4607              MOV      r7,r0                 ;2165
                  |L50.130|
000082  4557              CMP      r7,r10
000084  d124              BNE      |L50.208|
000086  2504              MOVS     r5,#4
000088  f64f7402          MOV      r4,#0xff02
00008c  e092              B        |L50.436|
                  |L50.142|
00008e  2406              MOVS     r4,#6                 ;2125
000090  e004              B        |L50.156|
                  |L50.146|
000092  f44f707a          MOV      r0,#0x3e8             ;2132
000096  f7fffffe          BL       osDelay
00009a  2401              MOVS     r4,#1                 ;2133
                  |L50.156|
00009c  2218              MOVS     r2,#0x18              ;2126
00009e  4631              MOV      r1,r6                 ;2126
0000a0  4668              MOV      r0,sp                 ;2126
0000a2  f7fffffe          BL       __aeabi_memcpy4
0000a6  ad0a              ADD      r5,sp,#0x28           ;2126
0000a8  4620              MOV      r0,r4                 ;2126
0000aa  e895000e          LDM      r5,{r1-r3}            ;2126
0000ae  f7fffffe          BL       send_verify_reply_msg
0000b2  e0ab              B        |L50.524|
                  |L50.180|
0000b4  a15a              ADR      r1,|L50.544|
0000b6  2001              MOVS     r0,#1                 ;2141
0000b8  f7fffffe          BL       kdp_level_printf
0000bc  4648              MOV      r0,r9                 ;2142
0000be  f7fffffe          BL       kl520_api_face_liveness_set_timeout
0000c2  2100              MOVS     r1,#0                 ;2143
0000c4  23f0              MOVS     r3,#0xf0              ;2143
0000c6  462a              MOV      r2,r5                 ;2143
0000c8  4608              MOV      r0,r1                 ;2143
0000ca  f7fffffe          BL       kl520_api_face_liveness
0000ce  e7cb              B        |L50.104|
                  |L50.208|
;;;2173           else
;;;2174           {
;;;2175               if(face_ret != -1) {
0000d0  1c68              ADDS     r0,r5,#1
0000d2  d006              BEQ      |L50.226|
;;;2176                   ret = kl520_api_face_get_result(&face_id);
0000d4  a808              ADD      r0,sp,#0x20
0000d6  f7fffffe          BL       kl520_api_face_get_result
0000da  0404              LSLS     r4,r0,#16
0000dc  0c24              LSRS     r4,r4,#16
0000de  d00f              BEQ      |L50.256|
0000e0  e000              B        |L50.228|
                  |L50.226|
;;;2177               } else {
;;;2178                   ret = KL520_FACE_FAIL;
0000e2  2402              MOVS     r4,#2
                  |L50.228|
;;;2179               }
;;;2180               //dbg_msg_console("kl520_api_face_get_result, ret =%d", ret );
;;;2181   
;;;2182   #ifdef DB_DRAWING_CUSTOMER_COLOR
;;;2183               kl520_api_face_notify((KL520_FACE_OK == ret)?KL520_FACE_DB_OK:ret);
0000e4  4620              MOV      r0,r4
0000e6  f7fffffe          BL       kl520_api_face_notify
0000ea  b164              CBZ      r4,|L50.262|
;;;2184   #endif
;;;2185   
;;;2186               if ( ( KL520_FACE_OK == ret ) ||
;;;2187                    ( KL520_FACE_EYE_CLOSE_STATUS_OPEN_EYE == ret ) ||
0000ec  2c12              CMP      r4,#0x12
0000ee  d00a              BEQ      |L50.262|
;;;2188                    ( KL520_FACE_EYE_CLOSED == ret ) ||
0000f0  2c13              CMP      r4,#0x13
0000f2  d008              BEQ      |L50.262|
;;;2189                    ( KL520_FACE_EYE_CLOSE_UNKNOW_STATUS == ret ) )
0000f4  2c14              CMP      r4,#0x14
0000f6  d006              BEQ      |L50.262|
;;;2190               {
;;;2191                   kdp_e2e_face_variables *vars_cur = kdp_e2e_get_face_variables();
;;;2192                   s_msg.admin = vars_cur->admin;
;;;2193   //                s_msg.unlockStatus = 0;
;;;2194                   s_msg.user_id_heb = ((face_id >> 8) &0xFF);
;;;2195                   s_msg.user_id_leb = ((face_id >> 0) &0xFF);
;;;2196   
;;;2197   //                if(vars_cur->eye_left_ratio < 0.20f && vars_cur->eye_right_ratio < 0.20f){ s_msg.unlockStatus = ST_FACE_MODULE_STATUS_UNLOCK_WITH_EYES_CLOSE;}
;;;2198   //                else{ s_msg.unlockStatus = ST_FACE_MODULE_STATUS_UNLOCK_OK; }
;;;2199                   dbg_msg_algo("vars_cur->eye_left_ratio=%f, vars_cur->eye_right_ratio=%f", vars_cur->eye_left_ratio, vars_cur->eye_right_ratio);
;;;2200   
;;;2201                   if ( g_bUserDemoMode == TRUE )
;;;2202                   {
;;;2203                       memcpy( s_msg.user_name, &buf, USER_NAME_SIZE );
;;;2204                   }
;;;2205                   else{
;;;2206                       memcpy( s_msg.user_name, vars_cur->user_name, USER_NAME_SIZE );
;;;2207                   }
;;;2208   
;;;2209                   dbg_msg_engineering("KL520_FACE_OK, face_id=0x%x, Admin=%d, UseName=%s", face_id, s_msg->admin, s_msg.user_name);
;;;2210   
;;;2211                   result = MR_SUCCESS;
;;;2212                   break;
;;;2213               }
;;;2214               else
;;;2215               {
;;;2216                   if(( g_bUserDemoMode == FALSE )&&(KL520_FACE_DB_FAIL == ret || KL520_FACE_EMPTY == ret)) { result = MR_FAILED_UNKNOWN_USER;ret = 0xFF01;break;}
0000f8  f8990002          LDRB     r0,[r9,#2]  ; g_bUserDemoMode
0000fc  b1f8              CBZ      r0,|L50.318|
0000fe  e022              B        |L50.326|
                  |L50.256|
000100  2001              MOVS     r0,#1                 ;2183
000102  f7fffffe          BL       kl520_api_face_notify
                  |L50.262|
000106  f7fffffe          BL       kdp_e2e_get_face_variables
00010a  f890106c          LDRB     r1,[r0,#0x6c]         ;2192
00010e  f88d104a          STRB     r1,[sp,#0x4a]         ;2192
000112  f88d8028          STRB     r8,[sp,#0x28]         ;2194
000116  f89d1020          LDRB     r1,[sp,#0x20]         ;2195
00011a  f88d1029          STRB     r1,[sp,#0x29]         ;2195
00011e  f8991002          LDRB     r1,[r9,#2]            ;2201  ; g_bUserDemoMode
000122  ab0a              ADD      r3,sp,#0x28           ;2116
000124  2901              CMP      r1,#1                 ;2201
000126  f04f0220          MOV      r2,#0x20              ;2206
00012a  d006              BEQ      |L50.314|
00012c  f100014c          ADD      r1,r0,#0x4c           ;2206
                  |L50.304|
000130  1c98              ADDS     r0,r3,#2              ;2206
000132  f7fffffe          BL       __aeabi_memcpy
000136  2500              MOVS     r5,#0                 ;2211
000138  e03c              B        |L50.436|
                  |L50.314|
00013a  a913              ADD      r1,sp,#0x4c           ;2203
00013c  e7f8              B        |L50.304|
                  |L50.318|
00013e  2c03              CMP      r4,#3
000140  d015              BEQ      |L50.366|
000142  2c08              CMP      r4,#8
000144  d013              BEQ      |L50.366|
                  |L50.326|
;;;2217                   else if (KL520_FACE_TIMEOUT == ret)             { result = MR_FAILED_TIME_OUT;          ret = 0xFF03;   break;}
000146  2c06              CMP      r4,#6
000148  d015              BEQ      |L50.374|
;;;2218                   else if (KL520_FACE_NOFACE_AND_TIMEOUT == ret)  { result = MR_FAILED_TIME_OUT;          ret = 0xFF04;   break;}
00014a  2c05              CMP      r4,#5
00014c  d017              BEQ      |L50.382|
;;;2219                   else if (KL520_FACE_INVALID == ret)             { result = MR_FAILED_LIVENESS_CHECK;    ret = 0xFF05;   break;}
00014e  2c0b              CMP      r4,#0xb
000150  d019              BEQ      |L50.390|
;;;2220                   else if (KL520_FACE_EYE_CLOSED == ret || KL520_FACE_FAIL == ret) { result = MR_ABORTED; ret = 0xFF06;   break;}
000152  2c02              CMP      r4,#2
000154  d01b              BEQ      |L50.398|
;;;2221                   else if (KL520_FACE_NOFACE == ret)              { result = MR_FAILED_UNKNOWN_REASON;    dbg_msg_console("event , KL520_FACE_NOFACE and continue"); }  //continue fdfr
000156  2c04              CMP      r4,#4
000158  d01d              BEQ      |L50.406|
;;;2222                   else if (KL520_FACE_TOO_FAR <= ret && KL520_FACE_LOW_QUALITY >= ret) { dbg_msg_console("event , ret=%d", ret); }   //continue fdfr
00015a  f1a4000c          SUB      r0,r4,#0xc
00015e  280d              CMP      r0,#0xd
;;;2223                   else
;;;2224                   {
;;;2225                       dbg_msg_console("face_result: %d", ret);
000160  4622              MOV      r2,r4
000162  d820              BHI      |L50.422|
000164  a132              ADR      r1,|L50.560|
000166  2001              MOVS     r0,#1                 ;2222
000168  f7fffffe          BL       kdp_level_printf
00016c  e017              B        |L50.414|
                  |L50.366|
00016e  2508              MOVS     r5,#8                 ;2216
000170  f64f7401          MOV      r4,#0xff01            ;2216
000174  e01e              B        |L50.436|
                  |L50.374|
000176  250d              MOVS     r5,#0xd               ;2217
000178  f64f7403          MOV      r4,#0xff03            ;2217
00017c  e01a              B        |L50.436|
                  |L50.382|
00017e  250d              MOVS     r5,#0xd               ;2218
000180  f64f7404          MOV      r4,#0xff04            ;2218
000184  e016              B        |L50.436|
                  |L50.390|
000186  250c              MOVS     r5,#0xc               ;2219
000188  f64f7405          MOV      r4,#0xff05            ;2219
00018c  e012              B        |L50.436|
                  |L50.398|
00018e  2502              MOVS     r5,#2                 ;2220
000190  f64f7406          MOV      r4,#0xff06            ;2220
000194  e00e              B        |L50.436|
                  |L50.406|
000196  a12b              ADR      r1,|L50.580|
000198  2001              MOVS     r0,#1                 ;2221
00019a  f7fffffe          BL       kdp_level_printf
                  |L50.414|
;;;2226                       result = MR_FAILED_UNKNOWN_REASON;
;;;2227                       ret = 0xFF07;
;;;2228                       break;
;;;2229                   }
;;;2230               }
;;;2231           }
;;;2232           osDelay(1);
00019e  2001              MOVS     r0,#1
0001a0  f7fffffe          BL       osDelay
;;;2233       }while(1);
0001a4  e764              B        |L50.112|
                  |L50.422|
0001a6  a132              ADR      r1,|L50.624|
0001a8  2001              MOVS     r0,#1                 ;2225
0001aa  f7fffffe          BL       kdp_level_printf
0001ae  2505              MOVS     r5,#5                 ;2226
0001b0  f64f7407          MOV      r4,#0xff07            ;2227
                  |L50.436|
;;;2234   
;;;2235   #if (CFG_E2E_REC_NOTE == YES)
;;;2236       skip_face_note = 0;
;;;2237   #endif
;;;2238       if(dp_draw_info.e2e_eye_type == FDFR_STATUS_EYE_CLOSED)                     { s_msg.unlockStatus = ST_FACE_MODULE_STATUS_UNLOCK_WITH_EYES_CLOSE; }  //
0001b4  4833              LDR      r0,|L50.644|
0001b6  f8a9800a          STRH     r8,[r9,#0xa]          ;2236
0001ba  464f              MOV      r7,r9                 ;2236
0001bc  f890007c          LDRB     r0,[r0,#0x7c]  ; dp_draw_info
0001c0  2813              CMP      r0,#0x13
0001c2  d00f              BEQ      |L50.484|
;;;2239       else if(dp_draw_info.e2e_eye_type == FDFR_STATUS_EYE_CLOSE_UNKNOW_STATUS)   { s_msg.unlockStatus = ST_FACE_MODULE_STATUS_UNLOCK_OK; }
0001c4  21c8              MOVS     r1,#0xc8
0001c6  f88d104b          STRB     r1,[sp,#0x4b]
;;;2240       else                                                                        { s_msg.unlockStatus = ST_FACE_MODULE_STATUS_UNLOCK_OK; }
;;;2241   
;;;2242       SysWaitDelayTime();
0001ca  bf00              NOP      
                  |L50.460|
0001cc  f7fffffe          BL       SysWaitDelayTime
;;;2243   
;;;2244   #if (MEASURE_RECOGNITION == YES)
;;;2245       kl520_measure_info();
;;;2246   #endif
;;;2247   
;;;2248       dbg_msg_console("sample_face_recognition END, ret=0x%x", ret);
0001d0  4622              MOV      r2,r4
0001d2  a12d              ADR      r1,|L50.648|
0001d4  2001              MOVS     r0,#1
0001d6  f7fffffe          BL       kdp_level_printf
;;;2249   
;;;2250   #ifdef CFG_GUI_RECOG_CLOSE_TEST
;;;2251   #if (0==CFG_GUI_RECOG_CLOSE_TEST)
;;;2252       sample_face_close();
;;;2253   #endif
;;;2254   #else
;;;2255   
;;;2256       wait_fr_update_thread();
0001da  f7fffffe          BL       wait_fr_update_thread
;;;2257   
;;;2258       if ( g_bStopSendMsg == FALSE ) {
0001de  7878              LDRB     r0,[r7,#1]  ; g_bStopSendMsg
0001e0  b120              CBZ      r0,|L50.492|
0001e2  e00e              B        |L50.514|
                  |L50.484|
0001e4  20cc              MOVS     r0,#0xcc              ;2238
0001e6  f88d004b          STRB     r0,[sp,#0x4b]         ;2238
0001ea  e7ef              B        |L50.460|
                  |L50.492|
;;;2259           send_verify_reply_msg(result, s_msg);
0001ec  2218              MOVS     r2,#0x18
0001ee  4631              MOV      r1,r6
0001f0  4668              MOV      r0,sp
0001f2  f7fffffe          BL       __aeabi_memcpy4
0001f6  af0a              ADD      r7,sp,#0x28
0001f8  4628              MOV      r0,r5
0001fa  e897000e          LDM      r7,{r1-r3}
0001fe  f7fffffe          BL       send_verify_reply_msg
                  |L50.514|
;;;2260   #if (MEASURE_RECOGNITION == YES)
;;;2261           kl520_measure_stamp(E_MEASURE_FACE_FACE_OK);
;;;2262   #endif
;;;2263       }
;;;2264       db_write = DB_FACE_ADD_IDLE;
000202  492b              LDR      r1,|L50.688|
000204  f8818000          STRB     r8,[r1,#0]
;;;2265   
;;;2266       sample_face_close();
000208  f7fffffe          BL       sample_face_close
                  |L50.524|
;;;2267   #endif
;;;2268   
;;;2269       return ret;
;;;2270   }
00020c  b01c              ADD      sp,sp,#0x70
00020e  4620              MOV      r0,r4                 ;2269
000210  e8bd87f0          POP      {r4-r10,pc}
;;;2271   //-----VERIFY
                          ENDP

                  |L50.532|
                          DCD      ||.constdata||
                  |L50.536|
                          DCD      ||.data||
                  |L50.540|
                          DCD      ||.bss||+0x6c
                  |L50.544|
000220  5b44656d          DCB      "[Demo]Verify\r\n",0
000224  6f5d5665
000228  72696679
00022c  0d0a00  
00022f  00                DCB      0
                  |L50.560|
000230  6576656e          DCB      "event , ret=%d\r\n",0
000234  74202c20
000238  7265743d
00023c  25640d0a
000240  00      
000241  00                DCB      0
000242  00                DCB      0
000243  00                DCB      0
                  |L50.580|
000244  6576656e          DCB      "event , KL520_FACE_NOFACE and continue\r\n",0
000248  74202c20
00024c  4b4c3532
000250  305f4641
000254  43455f4e
000258  4f464143
00025c  4520616e
000260  6420636f
000264  6e74696e
000268  75650d0a
00026c  00      
00026d  00                DCB      0
00026e  00                DCB      0
00026f  00                DCB      0
                  |L50.624|
000270  66616365          DCB      "face_result: %d\r\n",0
000274  5f726573
000278  756c743a
00027c  2025640d
000280  0a00    
000282  00                DCB      0
000283  00                DCB      0
                  |L50.644|
                          DCD      dp_draw_info
                  |L50.648|
000288  73616d70          DCB      "sample_face_recognition END, ret=0x%x\r\n",0
00028c  6c655f66
000290  6163655f
000294  7265636f
000298  676e6974
00029c  696f6e20
0002a0  454e442c
0002a4  20726574
0002a8  3d307825
0002ac  780d0a00
                  |L50.688|
                          DCD      db_write

                          AREA ||i.uart_face_snap_image||, CODE, READONLY, ALIGN=2

                  uart_face_snap_image PROC
;;;2274   #if defined KID_SNAP_IMAGE || defined KID_KN_SNAP_IMAGE
;;;2275   extern uint8_t uart_face_snap_image(void)
000000  b5f8              PUSH     {r3-r7,lr}
;;;2276   {
;;;2277       //u8 start_cnt = 0;//g_tSnapImgInfo.nStrNum;
;;;2278       u8 img_cnt = g_tSnapImgInfo.nImgCnt;
000002  4826              LDR      r0,|L51.156|
000004  7805              LDRB     r5,[r0,#0]  ; g_tSnapImgInfo
;;;2279       if(img_cnt > SNAPSHOT_ADV_NUM) img_cnt = SNAPSHOT_ADV_NUM;
000006  2d03              CMP      r5,#3
000008  d900              BLS      |L51.12|
00000a  2503              MOVS     r5,#3
                  |L51.12|
;;;2280   
;;;2281       u8 ret = KL520_FACE_OK;
;;;2282       u8 face_id = 0;
00000c  2000              MOVS     r0,#0
00000e  f88d0000          STRB     r0,[sp,#0]
;;;2283       
;;;2284       kl520_api_snapshot_adv_init(MIPI_CAM_RGB, KDP_DDR_TEST_RGB_IMG_SIZE);
000012  4824              LDR      r0,|L51.164|
000014  4c22              LDR      r4,|L51.160|
000016  4621              MOV      r1,r4
000018  7800              LDRB     r0,[r0,#0]  ; rgb_sensor_index
00001a  f7fffffe          BL       kl520_api_snapshot_adv_init
;;;2285       kl520_api_snapshot_adv_init(MIPI_CAM_NIR, KDP_DDR_TEST_NIR_IMG_SIZE);
00001e  4822              LDR      r0,|L51.168|
000020  4621              MOV      r1,r4
000022  7800              LDRB     r0,[r0,#0]  ; nir_sensor_index
000024  f7fffffe          BL       kl520_api_snapshot_adv_init
;;;2286   
;;;2287       for ( u8 i = 0; i < img_cnt; i++ )
000028  2400              MOVS     r4,#0
00002a  e032              B        |L51.146|
                  |L51.44|
;;;2288       {
;;;2289           u8 nIdx = i;
;;;2290           g_snap_img_cnt = nIdx;
00002c  481f              LDR      r0,|L51.172|
;;;2291           
;;;2292           int face_ret = kl520_api_snap_image(0, 0, DISPLAY_WIDTH, DISPLAY_HEIGHT);
00002e  2100              MOVS     r1,#0
000030  23f0              MOVS     r3,#0xf0
000032  7004              STRB     r4,[r0,#0]            ;2290
000034  f44f72a0          MOV      r2,#0x140
000038  4608              MOV      r0,r1
00003a  f7fffffe          BL       kl520_api_snap_image
00003e  1c40              ADDS     r0,r0,#1
;;;2293   
;;;2294           if(face_ret == -1) {
000040  d017              BEQ      |L51.114|
;;;2295               dbg_msg_console("[SnapImage] Camera is not ready", nIdx);
;;;2296               return MR_FAILED_DEV_OPEN_FAIL;
;;;2297           }
;;;2298   
;;;2299           u32 events = wait_event(kl520_api_get_event(), KL520_APP_FLAG_FDFR | KL520_DEVICE_FLAG_ERR);
000042  f7fffffe          BL       kl520_api_get_event
000046  f2401107          MOV      r1,#0x107
00004a  f7fffffe          BL       wait_event
;;;2300           
;;;2301           if(events == KL520_DEVICE_FLAG_ERR){
00004e  f5b07f80          CMP      r0,#0x100
000052  d00e              BEQ      |L51.114|
;;;2302               dbg_msg_console("[SnapImage] Camera is not ready", nIdx);
;;;2303               return MR_FAILED_DEV_OPEN_FAIL;
;;;2304           } else {
;;;2305               ret = kl520_api_face_get_result(&face_id);
000054  4668              MOV      r0,sp
000056  f7fffffe          BL       kl520_api_face_get_result
00005a  b2c6              UXTB     r6,r0
;;;2306           }
;;;2307   
;;;2308           sample_face_close();
00005c  f7fffffe          BL       sample_face_close
;;;2309           
;;;2310           if ( ret == KL520_FACE_OK ) {
;;;2311               dbg_msg_console("[SnapImage] got %d image succeeded", nIdx+1);
;;;2312           } else {
;;;2313               dbg_msg_console("[SnapImage] got %d image, failed", nIdx+1);
000060  f1040201          ADD      r2,r4,#1
000064  b166              CBZ      r6,|L51.128|
000066  a112              ADR      r1,|L51.176|
000068  2001              MOVS     r0,#1
00006a  f7fffffe          BL       kdp_level_printf
;;;2314               return MR_FAILED_STORE_ERR;
00006e  2016              MOVS     r0,#0x16
;;;2315           }
;;;2316           osDelay(200);
;;;2317       }
;;;2318       return MR_SUCCESS;
;;;2319   }
000070  bdf8              POP      {r3-r7,pc}
                  |L51.114|
000072  4622              MOV      r2,r4                 ;2302
000074  a117              ADR      r1,|L51.212|
000076  2001              MOVS     r0,#1                 ;2302
000078  f7fffffe          BL       kdp_level_printf
00007c  2004              MOVS     r0,#4                 ;2303
00007e  bdf8              POP      {r3-r7,pc}
                  |L51.128|
000080  a11d              ADR      r1,|L51.248|
000082  2001              MOVS     r0,#1                 ;2311
000084  f7fffffe          BL       kdp_level_printf
000088  20c8              MOVS     r0,#0xc8              ;2316
00008a  f7fffffe          BL       osDelay
00008e  1c64              ADDS     r4,r4,#1              ;2316
000090  b2e4              UXTB     r4,r4                 ;2287
                  |L51.146|
000092  42ac              CMP      r4,r5                 ;2287
000094  d3ca              BCC      |L51.44|
000096  2000              MOVS     r0,#0                 ;2318
000098  bdf8              POP      {r3-r7,pc}
;;;2320   #endif
                          ENDP

00009a  0000              DCW      0x0000
                  |L51.156|
                          DCD      ||.data||+0xe
                  |L51.160|
                          DCD      0x00075300
                  |L51.164|
                          DCD      rgb_sensor_index
                  |L51.168|
                          DCD      nir_sensor_index
                  |L51.172|
                          DCD      g_snap_img_cnt
                  |L51.176|
0000b0  5b536e61          DCB      "[SnapImage] got %d image, failed\r\n",0
0000b4  70496d61
0000b8  67655d20
0000bc  676f7420
0000c0  25642069
0000c4  6d616765
0000c8  2c206661
0000cc  696c6564
0000d0  0d0a00  
0000d3  00                DCB      0
                  |L51.212|
0000d4  5b536e61          DCB      "[SnapImage] Camera is not ready\r\n",0
0000d8  70496d61
0000dc  67655d20
0000e0  43616d65
0000e4  72612069
0000e8  73206e6f
0000ec  74207265
0000f0  6164790d
0000f4  0a00    
0000f6  00                DCB      0
0000f7  00                DCB      0
                  |L51.248|
0000f8  5b536e61          DCB      "[SnapImage] got %d image succeeded\r\n",0
0000fc  70496d61
000100  67655d20
000104  676f7420
000108  25642069
00010c  6d616765
000110  20737563
000114  63656564
000118  65640d0a
00011c  00      
00011d  00                DCB      0
00011e  00                DCB      0
00011f  00                DCB      0

                          AREA ||i.wait_fr_update_thread||, CODE, READONLY, ALIGN=2

                  wait_fr_update_thread PROC
;;;118    
;;;119    void wait_fr_update_thread(void)
000000  b570              PUSH     {r4-r6,lr}
;;;120    {
;;;121        u16 cnt = 0;
000002  2400              MOVS     r4,#0
;;;122        while(tid_fdfr_update_fr != NULL && cnt < 100) {
000004  4d08              LDR      r5,|L52.40|
000006  e009              B        |L52.28|
                  |L52.8|
;;;123            osDelay(50);
000008  2032              MOVS     r0,#0x32
00000a  f7fffffe          BL       osDelay
00000e  1c64              ADDS     r4,r4,#1
;;;124            cnt++;
000010  b2a4              UXTH     r4,r4
;;;125            dbg_msg_console("RESET WAIT %d", cnt);	// avoid restart when is updating DB
000012  4622              MOV      r2,r4
000014  a105              ADR      r1,|L52.44|
000016  2001              MOVS     r0,#1
000018  f7fffffe          BL       kdp_level_printf
                  |L52.28|
00001c  6828              LDR      r0,[r5,#0]            ;122  ; tid_fdfr_update_fr
00001e  2800              CMP      r0,#0                 ;122
000020  d001              BEQ      |L52.38|
000022  2c64              CMP      r4,#0x64              ;122
000024  d3f0              BCC      |L52.8|
                  |L52.38|
;;;126        }
;;;127    }
000026  bd70              POP      {r4-r6,pc}
;;;128    #endif
                          ENDP

                  |L52.40|
                          DCD      tid_fdfr_update_fr
                  |L52.44|
00002c  52455345          DCB      "RESET WAIT %d\r\n",0
000030  54205741
000034  49542025
000038  640d0a00

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  ota_update_info
                          %        108
                  g_tImpExpMassDataPkgInfo
                          %        25

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

000000  4c495645          DCB      0x4c,0x49,0x56,0x45
000004  4e455353          DCB      0x4e,0x45,0x53,0x53
000008  30000000          DCB      0x30,0x00,0x00,0x00
                          %        12
000018  30000000          DCB      0x30,0x00,0x00,0x00
                          %        28
                  __func__
000038  44534d5f          DCB      0x44,0x53,0x4d,0x5f
00003c  55617274          DCB      0x55,0x61,0x72,0x74
000040  5f476574          DCB      0x5f,0x47,0x65,0x74
000044  4f746153          DCB      0x4f,0x74,0x61,0x53
000048  74617475          DCB      0x74,0x61,0x74,0x75
00004c  7300              DCB      0x73,0x00
                  |symbol_number.167|
00004e  5f61              DCB      0x5f,0x61
000050  70695f66          DCB      0x70,0x69,0x5f,0x66
000054  6163655f          DCB      0x61,0x63,0x65,0x5f
000058  6e6f7465          DCB      0x6e,0x6f,0x74,0x65
00005c  00                DCB      0x00
                  |symbol_number.168|
00005d  756172            DCB      0x75,0x61,0x72
000060  745f6661          DCB      0x74,0x5f,0x66,0x61
000064  63655f61          DCB      0x63,0x65,0x5f,0x61
000068  64645f74          DCB      0x64,0x64,0x5f,0x74
00006c  696d656f          DCB      0x69,0x6d,0x65,0x6f
000070  757400            DCB      0x75,0x74,0x00
                  |symbol_number.169|
000073  4f                DCB      0x4f
000074  74615f4d          DCB      0x74,0x61,0x5f,0x4d
000078  44355f63          DCB      0x44,0x35,0x5f,0x63
00007c  6865636b          DCB      0x68,0x65,0x63,0x6b
000080  73756d00          DCB      0x73,0x75,0x6d,0x00
                  |symbol_number.170|
000084  6f74615f          DCB      0x6f,0x74,0x61,0x5f
000088  62696e5f          DCB      0x62,0x69,0x6e,0x5f
00008c  646f7562          DCB      0x64,0x6f,0x75,0x62
000090  6c655f63          DCB      0x6c,0x65,0x5f,0x63
000094  6865636b          DCB      0x68,0x65,0x63,0x6b
000098  00                DCB      0x00

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  4d525f53          DCB      "MR_SUCCESS",0
000004  55434345
000008  535300  
00000b  00                DCB      0
00000c  4d525f52          DCB      "MR_REJECTED",0
000010  454a4543
000014  54454400
000018  4d525f41          DCB      "MR_ABORTED",0
00001c  424f5254
000020  454400  
000023  00                DCB      0
000024  4d525f46          DCB      "MR_FAILED_DEV_OPEN_FAIL",0
000028  41494c45
00002c  445f4445
000030  565f4f50
000034  454e5f46
000038  41494c00
00003c  4d525f46          DCB      "MR_FAILED_UNKNOWN_REASON",0
000040  41494c45
000044  445f554e
000048  4b4e4f57
00004c  4e5f5245
000050  41534f4e
000054  00      
000055  00                DCB      0
000056  00                DCB      0
000057  00                DCB      0
000058  4d525f46          DCB      "MR_FAILED_INVALID_PARAM",0
00005c  41494c45
000060  445f494e
000064  56414c49
000068  445f5041
00006c  52414d00
000070  4d525f46          DCB      "MR_FAILED_OOM",0
000074  41494c45
000078  445f4f4f
00007c  4d00    
00007e  00                DCB      0
00007f  00                DCB      0
000080  4d525f46          DCB      "MR_FAILED_UNKNOWN_USER",0
000084  41494c45
000088  445f554e
00008c  4b4e4f57
000090  4e5f5553
000094  455200  
000097  00                DCB      0
000098  4d525f46          DCB      "MR_FAILED_MAX_USER",0
00009c  41494c45
0000a0  445f4d41
0000a4  585f5553
0000a8  455200  
0000ab  00                DCB      0
0000ac  4d525f46          DCB      "MR_FAILED_FACE_ENROLLED",0
0000b0  41494c45
0000b4  445f4641
0000b8  43455f45
0000bc  4e524f4c
0000c0  4c454400
0000c4  4d525f46          DCB      "MR_FAILED_LIVENESS_CHECK",0
0000c8  41494c45
0000cc  445f4c49
0000d0  56454e45
0000d4  53535f43
0000d8  4845434b
0000dc  00      
0000dd  00                DCB      0
0000de  00                DCB      0
0000df  00                DCB      0
0000e0  4d525f46          DCB      "MR_FAILED_TIME_OUT",0
0000e4  41494c45
0000e8  445f5449
0000ec  4d455f4f
0000f0  555400  
0000f3  00                DCB      0
0000f4  4d525f46          DCB      "MR_FAILED_AUTHORIZATION",0
0000f8  41494c45
0000fc  445f4155
000100  54484f52
000104  495a4154
000108  494f4e00
00010c  4d525f46          DCB      "MR_FAILED_READ_FILE",0
000110  41494c45
000114  445f5245
000118  41445f46
00011c  494c4500
000120  4d525f46          DCB      "MR_FAILED_WRITE_FILE",0
000124  41494c45
000128  445f5752
00012c  4954455f
000130  46494c45
000134  00      
000135  00                DCB      0
000136  00                DCB      0
000137  00                DCB      0
000138  4d525f46          DCB      "MR_FAILED_NO_ENCRYPT",0
00013c  41494c45
000140  445f4e4f
000144  5f454e43
000148  52595054
00014c  00      
00014d  00                DCB      0
00014e  00                DCB      0
00014f  00                DCB      0
000150  4d525f46          DCB      "MR_FAILED_STORE_ERR",0
000154  41494c45
000158  445f5354
00015c  4f52455f
000160  45525200
000164  4d525f46          DCB      "MR_FAILED_NO_IMG",0
000168  41494c45
00016c  445f4e4f
000170  5f494d47
000174  00      
000175  00                DCB      0
000176  00                DCB      0
000177  00                DCB      0
000178  4d525f46          DCB      "MR_FAILED_NO_IDX",0
00017c  41494c45
000180  445f4e4f
000184  5f494458
000188  00      
000189  00                DCB      0
00018a  00                DCB      0
00018b  00                DCB      0
00018c  4d525f46          DCB      "MR_FAILED_BUF_OVERFLOW",0
000190  41494c45
000194  445f4255
000198  465f4f56
00019c  4552464c
0001a0  4f5700  
0001a3  00                DCB      0
0001a4  4d525f46          DCB      "MR_FAILED_MASS_DATA_HEAD_EMPTY",0
0001a8  41494c45
0001ac  445f4d41
0001b0  53535f44
0001b4  4154415f
0001b8  48454144
0001bc  5f454d50
0001c0  545900  
0001c3  00                DCB      0
0001c4  4d525f46          DCB      "MR_FAILED_MASS_DATA_DB_ABNORMAL",0
0001c8  41494c45
0001cc  445f4d41
0001d0  53535f44
0001d4  4154415f
0001d8  44425f41
0001dc  424e4f52
0001e0  4d414c00
0001e4  4d525f46          DCB      "MR_FAILED_MASS_DATA_FM_ABNORMAL",0
0001e8  41494c45
0001ec  445f4d41
0001f0  53535f44
0001f4  4154415f
0001f8  464d5f41
0001fc  424e4f52
000200  4d414c00
000204  4d525f46          DCB      "MR_FAILED_NOT_READY",0
000208  41494c45
00020c  445f4e4f
000210  545f5245
000214  41445900
000218  4d525f46          DCB      "MR_FAILED_EXISTED_USER",0
00021c  41494c45
000220  445f4558
000224  49535445
000228  445f5553
00022c  455200  
00022f  00                DCB      0
000230  4d525f46          DCB      "MR_FAILED_IDX_OVERFLOW",0
000234  41494c45
000238  445f4944
00023c  585f4f56
000240  4552464c
000244  4f5700  
000247  00                DCB      0
000248  4d525f43          DCB      "MR_CONTIUNOUS",0
00024c  4f4e5449
000250  554e4f55
000254  5300    
000256  00                DCB      0
000257  00                DCB      0
000258  4d525f53          DCB      "MR_SUCCESS_BUT_DEL_USER",0
00025c  55434345
000260  53535f42
000264  55545f44
000268  454c5f55
00026c  53455200
000270  4d525f46          DCB      "MR_FAILED_INVALID_CMD",0
000274  41494c45
000278  445f494e
00027c  56414c49
000280  445f434d
000284  4400    
000286  00                DCB      0
000287  00                DCB      0
000288  00                DCB      0

                          AREA ||.data||, DATA, ALIGN=2

                  g_eFaceDirState
000000  00                DCB      0x00
                  g_bStopSendMsg
000001  00                DCB      0x00
                  g_bUserDemoMode
000002  00                DCB      0x00
                  g_eEnrollAddFaceTypeMode
000003  02                DCB      0x02
                  g_nEncryptionMode
000004  00                DCB      0x00
                  use_debug_key
000005  00                DCB      0x00
                  g_bUploadImageAllow
000006  00                DCB      0x00
                  SNAP_IMG_X_STRIDE
000007  02                DCB      0x02
                  SNAP_IMG_Y_STRIDE
000008  0200              DCB      0x02,0x00
                  skip_face_note
00000a  0000              DCW      0x0000
                  g_nFaceId
00000c  0000              DCW      0x0000
                  g_tSnapImgInfo
00000e  0000              DCB      0x00,0x00
                  g_nSysInternalTime
                          DCD      0x00000000
                  cur_image_size
                          DCD      0x00000000
                  key_num
000018  ffffffff          DCB      0xff,0xff,0xff,0xff
00001c  ffffffff          DCB      0xff,0xff,0xff,0xff
000020  ffffffff          DCB      0xff,0xff,0xff,0xff
000024  ffffffff          DCB      0xff,0xff,0xff,0xff

                          AREA ||area_number.59||, DATA, ALIGN=2

                          EXPORTAS ||area_number.59||, ||.data||
                  g_nSysReadyTime
                          DCD      0x00000000

                          AREA ||area_number.60||, DATA, ALIGN=2

                          EXPORTAS ||area_number.60||, ||.data||
                  g_nAutoPowerOffCnt
                          DCD      0x00000000

                          AREA ||area_number.61||, DATA, ALIGN=0

                          EXPORTAS ||area_number.61||, ||.data||
                  g_bAutoPowerOff
000000  00                DCB      0x00

                          AREA ||area_number.62||, DATA, ALIGN=0

                          EXPORTAS ||area_number.62||, ||.data||
                  g_bKID_SetKey
000000  00                DCB      0x00

                          AREA ||area_number.63||, DATA, ALIGN=0

                          EXPORTAS ||area_number.63||, ||.data||
                  g_nCheckSum_Error
000000  00                DCB      0x00

                          AREA ||i._str_uart_reply||, COMGROUP=_str_uart_reply, CODE, READONLY, ALIGN=2

                  _str_uart_reply PROC
;;;201    #pragma diag_suppress 111
;;;202    inline char *_str_uart_reply(enum uart_reply_result result)
000000  2814              CMP      r0,#0x14
;;;203    {
;;;204        switch (result)
000002  d04e              BEQ      |L325.162|
000004  dc0d              BGT      |L325.34|
000006  2814              CMP      r0,#0x14
000008  d22d              BCS      |L325.102|
00000a  e8dff000          TBB      [pc,r0]
00000e  2e30              DCB      0x2e,0x30
000010  322c3436          DCB      0x32,0x2c,0x34,0x36
000014  383a3c3e          DCB      0x38,0x3a,0x3c,0x3e
000018  402c4244          DCB      0x40,0x2c,0x42,0x44
00001c  462c2c2c          DCB      0x46,0x2c,0x2c,0x2c
000020  2c48              DCB      0x2c,0x48
                  |L325.34|
000022  2832              CMP      r0,#0x32
000024  d04d              BEQ      |L325.194|
000026  dc10              BGT      |L325.74|
000028  2818              CMP      r0,#0x18
00002a  d042              BEQ      |L325.178|
00002c  dc06              BGT      |L325.60|
00002e  2815              CMP      r0,#0x15
000030  d039              BEQ      |L325.166|
000032  2816              CMP      r0,#0x16
000034  d039              BEQ      |L325.170|
000036  2817              CMP      r0,#0x17
000038  d115              BNE      |L325.102|
00003a  e038              B        |L325.174|
                  |L325.60|
00003c  2819              CMP      r0,#0x19
00003e  d03a              BEQ      |L325.182|
000040  2830              CMP      r0,#0x30
000042  d03a              BEQ      |L325.186|
000044  2831              CMP      r0,#0x31
000046  d10e              BNE      |L325.102|
000048  e039              B        |L325.190|
                  |L325.74|
00004a  2836              CMP      r0,#0x36
00004c  d041              BEQ      |L325.210|
00004e  dc06              BGT      |L325.94|
000050  2833              CMP      r0,#0x33
000052  d038              BEQ      |L325.198|
000054  2834              CMP      r0,#0x34
000056  d038              BEQ      |L325.202|
000058  2835              CMP      r0,#0x35
00005a  d104              BNE      |L325.102|
00005c  e037              B        |L325.206|
                  |L325.94|
00005e  2840              CMP      r0,#0x40
000060  d039              BEQ      |L325.214|
000062  28ff              CMP      r0,#0xff
000064  d039              BEQ      |L325.218|
                  |L325.102|
;;;205        {
;;;206            CMD_REPLY_RESULT_MACRO(TO_STR)
;;;207        default:
;;;208            break;
;;;209        }
;;;210        
;;;211        return "";
000066  481e              LDR      r0,|L325.224|
;;;212    }
000068  4770              BX       lr
00006a  481e              LDR      r0,|L325.228|
00006c  4770              BX       lr
00006e  481e              LDR      r0,|L325.232|
000070  4770              BX       lr
000072  481e              LDR      r0,|L325.236|
000074  4770              BX       lr
000076  481e              LDR      r0,|L325.240|
000078  4770              BX       lr
00007a  481e              LDR      r0,|L325.244|
00007c  4770              BX       lr
00007e  481e              LDR      r0,|L325.248|
000080  4770              BX       lr
000082  481e              LDR      r0,|L325.252|
000084  4770              BX       lr
000086  481e              LDR      r0,|L325.256|
000088  4770              BX       lr
00008a  481e              LDR      r0,|L325.260|
00008c  4770              BX       lr
00008e  481e              LDR      r0,|L325.264|
000090  4770              BX       lr
000092  481e              LDR      r0,|L325.268|
000094  4770              BX       lr
000096  481e              LDR      r0,|L325.272|
000098  4770              BX       lr
00009a  481e              LDR      r0,|L325.276|
00009c  4770              BX       lr
00009e  481e              LDR      r0,|L325.280|
0000a0  4770              BX       lr
                  |L325.162|
0000a2  481e              LDR      r0,|L325.284|
0000a4  4770              BX       lr
                  |L325.166|
0000a6  481e              LDR      r0,|L325.288|
0000a8  4770              BX       lr
                  |L325.170|
0000aa  481e              LDR      r0,|L325.292|
0000ac  4770              BX       lr
                  |L325.174|
0000ae  481e              LDR      r0,|L325.296|
0000b0  4770              BX       lr
                  |L325.178|
0000b2  481e              LDR      r0,|L325.300|
0000b4  4770              BX       lr
                  |L325.182|
0000b6  481e              LDR      r0,|L325.304|
0000b8  4770              BX       lr
                  |L325.186|
0000ba  481e              LDR      r0,|L325.308|
0000bc  4770              BX       lr
                  |L325.190|
0000be  481e              LDR      r0,|L325.312|
0000c0  4770              BX       lr
                  |L325.194|
0000c2  481e              LDR      r0,|L325.316|
0000c4  4770              BX       lr
                  |L325.198|
0000c6  481e              LDR      r0,|L325.320|
0000c8  4770              BX       lr
                  |L325.202|
0000ca  481e              LDR      r0,|L325.324|
0000cc  4770              BX       lr
                  |L325.206|
0000ce  481e              LDR      r0,|L325.328|
0000d0  4770              BX       lr
                  |L325.210|
0000d2  481e              LDR      r0,|L325.332|
0000d4  4770              BX       lr
                  |L325.214|
0000d6  481e              LDR      r0,|L325.336|
0000d8  4770              BX       lr
                  |L325.218|
0000da  481e              LDR      r0,|L325.340|
0000dc  4770              BX       lr
;;;213    #pragma diag_warning 111
                          ENDP

0000de  0000              DCW      0x0000
                  |L325.224|
                          DCD      ||.conststring||+0x288
                  |L325.228|
                          DCD      ||.conststring||
                  |L325.232|
                          DCD      ||.conststring||+0xc
                  |L325.236|
                          DCD      ||.conststring||+0x18
                  |L325.240|
                          DCD      ||.conststring||+0x24
                  |L325.244|
                          DCD      ||.conststring||+0x3c
                  |L325.248|
                          DCD      ||.conststring||+0x58
                  |L325.252|
                          DCD      ||.conststring||+0x70
                  |L325.256|
                          DCD      ||.conststring||+0x80
                  |L325.260|
                          DCD      ||.conststring||+0x98
                  |L325.264|
                          DCD      ||.conststring||+0xac
                  |L325.268|
                          DCD      ||.conststring||+0xc4
                  |L325.272|
                          DCD      ||.conststring||+0xe0
                  |L325.276|
                          DCD      ||.conststring||+0xf4
                  |L325.280|
                          DCD      ||.conststring||+0x10c
                  |L325.284|
                          DCD      ||.conststring||+0x120
                  |L325.288|
                          DCD      ||.conststring||+0x138
                  |L325.292|
                          DCD      ||.conststring||+0x150
                  |L325.296|
                          DCD      ||.conststring||+0x164
                  |L325.300|
                          DCD      ||.conststring||+0x178
                  |L325.304|
                          DCD      ||.conststring||+0x18c
                  |L325.308|
                          DCD      ||.conststring||+0x1a4
                  |L325.312|
                          DCD      ||.conststring||+0x1c4
                  |L325.316|
                          DCD      ||.conststring||+0x1e4
                  |L325.320|
                          DCD      ||.conststring||+0x204
                  |L325.324|
                          DCD      ||.conststring||+0x218
                  |L325.328|
                          DCD      ||.conststring||+0x230
                  |L325.332|
                          DCD      ||.conststring||+0x248
                  |L325.336|
                          DCD      ||.conststring||+0x258
                  |L325.340|
                          DCD      ||.conststring||+0x270

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\scpu\\middleware\\kdp_comm\\kdp_comm_app.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___14_kdp_comm_app_c_28acbe83____REV16|
#line 208 "F:\\Users\\fu\\AppData\\Local\\Arm\\Packs\\ARM\\CMSIS\\5.9.0\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___14_kdp_comm_app_c_28acbe83____REV16| PROC
#line 209

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___14_kdp_comm_app_c_28acbe83____REVSH|
#line 223
|__asm___14_kdp_comm_app_c_28acbe83____REVSH| PROC
#line 224

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___14_kdp_comm_app_c_28acbe83____RRX|
#line 410
|__asm___14_kdp_comm_app_c_28acbe83____RRX| PROC
#line 411

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
