; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\objects\sp2509.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\sp2509.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O3 --diag_suppress=9931 -I..\..\config -I..\..\..\..\board -I..\..\..\..\common\include -I..\..\..\..\scpu\device\include\CMSIS -I..\..\..\..\scpu\device\include\Kneron -I..\..\..\..\scpu\framework\include -I..\..\..\..\scpu\framework\include\framework -I..\..\..\..\scpu\drivers\include -I..\..\..\..\scpu\drivers\include\media\touch -I..\..\..\..\scpu\drivers\include\media\flash -I..\..\..\..\scpu\lib\kdp_system\inc -I..\..\..\..\scpu\lib\kdp_application\include\ -I..\..\..\..\scpu\lib\kdp_application\base\ -I..\..\..\..\scpu\lib\kdp_application\misc -I..\..\..\..\scpu\lib\kdp_e2e_r1n1\include -I..\..\..\..\scpu\include -I..\..\..\..\scpu\middleware\ota -I..\..\..\..\scpu\middleware\comm -I..\..\..\..\scpu\middleware\kdp_comm -I..\..\..\..\scpu\share -I..\..\..\..\scpu\share\gui_lib -I..\..\user -I.\RTE\CMSIS -I.\RTE\_Target-scpu -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\RTOS2\Include -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\RTOS2\RTX\Include -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\Device\ARM\ARMCM4\Include -D__RTX -D__MICROLIB -D__UVISION_VERSION=538 -D_RTE_ -DARMCM4_FP -D_RTE_ -DARM_MATH_CM4 -DTARGET_SCPU -DLOG_ENABLE -DKL520 -DHEAD_POSE_CHECK_PERCENT --omf_browse=.\objects\sp2509.crf ..\..\..\..\scpu\drivers\media\sensor\sp2509.c]
                          THUMB

                          AREA ||i.sp2509_init||, CODE, READONLY, ALIGN=2

                  sp2509_init PROC
;;;247    
;;;248    int sp2509_init(struct sensor_device *sensor_dev, struct sensor_init_seq *seq, u32 length)
000000  b5f8              PUSH     {r3-r7,lr}
;;;249    {
000002  4617              MOV      r7,r2
;;;250        struct sensor_device *dev = sensor_dev;
000004  4604              MOV      r4,r0
;;;251        struct sensor_init_seq *init_fnc_ptr = seq;
000006  460e              MOV      r6,r1
;;;252      uint8_t i=0;
;;;253        //dbg_msg_camera(" sp2509_init ");
;;;254       
;;;255    //    sp2509_write_reg(dev, 0xfc , 0x01);//soft reset
;;;256    //    osDelay(5);
;;;257        for (u32 i = 0; i < length; i++) {
000008  2500              MOVS     r5,#0
00000a  e021              B        |L1.80|
                  |L1.12|
;;;258            if (init_fnc_ptr[i].addr == 0 && init_fnc_ptr[i].value == 0) break; //reaches end
00000c  eb050045          ADD      r0,r5,r5,LSL #1
000010  4430              ADD      r0,r0,r6
000012  8801              LDRH     r1,[r0,#0]
000014  b111              CBZ      r1,|L1.28|
;;;259    
;;;260            // Update mirror and flip setting
;;;261            if (init_fnc_ptr[i].addr == 0x3f)
000016  293f              CMP      r1,#0x3f
000018  d003              BEQ      |L1.34|
00001a  e014              B        |L1.70|
                  |L1.28|
00001c  7882              LDRB     r2,[r0,#2]            ;258
00001e  b1ca              CBZ      r2,|L1.84|
000020  e011              B        |L1.70|
                  |L1.34|
;;;262            {
;;;263                if (((CFG_SENSOR_0_TYPE == SENSOR_TYPE_SP2509_R) && (&sp2509_dev_r == dev)) ||
000022  4a21              LDR      r2,|L1.168|
000024  42a2              CMP      r2,r4
000026  d103              BNE      |L1.48|
;;;264                    ((CFG_SENSOR_0_TYPE == SENSOR_TYPE_SP2509_L) && (&sp2509_dev_l == dev)))
;;;265                    init_fnc_ptr[i].value = 0x00 | (sensor_0_mirror) | (sensor_0_flip << 1);
000028  4a20              LDR      r2,|L1.172|
00002a  4b21              LDR      r3,|L1.176|
00002c  7812              LDRB     r2,[r2,#0]  ; sensor_0_mirror
00002e  e006              B        |L1.62|
                  |L1.48|
;;;266                else if (((CFG_SENSOR_1_TYPE == SENSOR_TYPE_SP2509_R) && (&sp2509_dev_r == dev)) ||
000030  4a1d              LDR      r2,|L1.168|
000032  3a18              SUBS     r2,r2,#0x18
000034  42a2              CMP      r2,r4
000036  d106              BNE      |L1.70|
;;;267                         ((CFG_SENSOR_1_TYPE == SENSOR_TYPE_SP2509_L) && (&sp2509_dev_l == dev)))
;;;268                    init_fnc_ptr[i].value = 0x00 | (sensor_1_mirror) | (sensor_1_flip << 1);
000038  4a1e              LDR      r2,|L1.180|
00003a  4b1f              LDR      r3,|L1.184|
00003c  7812              LDRB     r2,[r2,#0]  ; sensor_1_mirror
                  |L1.62|
00003e  781b              LDRB     r3,[r3,#0]  ; sensor_1_flip
000040  ea420243          ORR      r2,r2,r3,LSL #1
000044  7082              STRB     r2,[r0,#2]
                  |L1.70|
;;;269            }
;;;270            
;;;271            sp2509_write_reg(dev, init_fnc_ptr[i].addr , (u8)(init_fnc_ptr[i].value & 0xFF));
000046  7882              LDRB     r2,[r0,#2]
000048  4620              MOV      r0,r4
00004a  f7fffffe          BL       sp2509_write_reg
00004e  1c6d              ADDS     r5,r5,#1
                  |L1.80|
000050  42bd              CMP      r5,r7                 ;257
000052  d3db              BCC      |L1.12|
                  |L1.84|
;;;272        }
;;;273     
;;;274        
;;;275        sp2509_write_reg(dev, 0xfd , 0x00);
000054  2200              MOVS     r2,#0
000056  21fd              MOVS     r1,#0xfd
000058  4620              MOV      r0,r4
00005a  f7fffffe          BL       sp2509_write_reg
;;;276    
;;;277        u8 data = 0;
00005e  2000              MOVS     r0,#0
000060  f88d0000          STRB     r0,[sp,#0]
;;;278       
;;;279        sp2509_read_reg(dev, 0x02, &data);
000064  466a              MOV      r2,sp
000066  2102              MOVS     r1,#2
000068  4620              MOV      r0,r4
00006a  f7fffffe          BL       sp2509_read_reg
;;;280    //    dbg_msg_console("sp2509[%d] sensor high id=%x", dev->i2c_id, data);
;;;281        dev->device_id = data << 8;
00006e  f89d0000          LDRB     r0,[sp,#0]
;;;282        sp2509_read_reg(dev, 0x03, &data);
000072  466a              MOV      r2,sp
000074  0200              LSLS     r0,r0,#8              ;281
000076  6160              STR      r0,[r4,#0x14]
000078  2103              MOVS     r1,#3
00007a  4620              MOV      r0,r4
00007c  f7fffffe          BL       sp2509_read_reg
;;;283    //    dbg_msg_console("sp2509[%d] sensor low id=%x", dev->i2c_id, data);
;;;284        dev->device_id |= data;
000080  f89d0000          LDRB     r0,[sp,#0]
000084  6963              LDR      r3,[r4,#0x14]
;;;285        dbg_msg_console("sp2509[%d] init over, sensor ID = 0x%x", dev->i2c_id, dev->device_id);
000086  a10d              ADR      r1,|L1.188|
000088  4303              ORRS     r3,r3,r0              ;284
00008a  6163              STR      r3,[r4,#0x14]
00008c  7822              LDRB     r2,[r4,#0]
00008e  2001              MOVS     r0,#1
000090  f7fffffe          BL       kdp_level_printf
;;;286        
;;;287        if(dev->device_id != 0x2509)
000094  6960              LDR      r0,[r4,#0x14]
000096  f5a05114          SUB      r1,r0,#0x2500
00009a  3909              SUBS     r1,r1,#9
00009c  d002              BEQ      |L1.164|
;;;288            return -1;
00009e  f04f30ff          MOV      r0,#0xffffffff
;;;289    
;;;290        return 0;
;;;291    }
0000a2  bdf8              POP      {r3-r7,pc}
                  |L1.164|
0000a4  2000              MOVS     r0,#0                 ;290
0000a6  bdf8              POP      {r3-r7,pc}
;;;292    
                          ENDP

                  |L1.168|
                          DCD      ||.data||+0x18
                  |L1.172|
                          DCD      sensor_0_mirror
                  |L1.176|
                          DCD      sensor_0_flip
                  |L1.180|
                          DCD      sensor_1_mirror
                  |L1.184|
                          DCD      sensor_1_flip
                  |L1.188|
0000bc  73703235          DCB      "sp2509[%d] init over, sensor ID = 0x%x\r\n",0
0000c0  30395b25
0000c4  645d2069
0000c8  6e697420
0000cc  6f766572
0000d0  2c207365
0000d4  6e736f72
0000d8  20494420
0000dc  3d203078
0000e0  25780d0a
0000e4  00      
0000e5  00                DCB      0
0000e6  00                DCB      0
0000e7  00                DCB      0

                          AREA ||i.sp2509_l_i2c_init||, CODE, READONLY, ALIGN=1

                  sp2509_l_i2c_init PROC
;;;217    }
;;;218    int sp2509_l_i2c_init(void)
000000  2000              MOVS     r0,#0
;;;219    {
;;;220        int ret = -1;
;;;221    
;;;222        ret = 0;
;;;223        
;;;224        return ret;
;;;225    }
000002  4770              BX       lr
;;;226    
                          ENDP


                          AREA ||i.sp2509_l_sensor_get_id||, CODE, READONLY, ALIGN=2

                  sp2509_l_sensor_get_id PROC
;;;422    
;;;423    static int sp2509_l_sensor_get_id(void)
000000  4801              LDR      r0,|L3.8|
;;;424    {
;;;425        //dbg_msg_camera("   <%s>\n", __func__);
;;;426    
;;;427        return sp2509_dev_l.device_id;
000002  6940              LDR      r0,[r0,#0x14]  ; sp2509_dev_l
;;;428    }
000004  4770              BX       lr
;;;429    
                          ENDP

000006  0000              DCW      0x0000
                  |L3.8|
                          DCD      ||.data||

                          AREA ||i.sp2509_l_sensor_get_lux||, CODE, READONLY, ALIGN=1

                  sp2509_l_sensor_get_lux PROC
;;;415    
;;;416    int sp2509_l_sensor_get_lux(u16* exposure, u8* pre_gain_h, u8* pre_gain_l, u8* global_gain, u8* y_average)
000000  2000              MOVS     r0,#0
;;;417    {
;;;418        struct sensor_device *sensor_dev = &sp2509_dev_l;
;;;419        int ret = sp2509_sensor_get_lux(sensor_dev, exposure, pre_gain_h, pre_gain_l, global_gain, y_average);
;;;420        return ret;
;;;421    }
000002  4770              BX       lr
;;;422    
                          ENDP


                          AREA ||i.sp2509_l_sensor_init||, CODE, READONLY, ALIGN=2

                  sp2509_l_sensor_init PROC
;;;593    
;;;594    void sp2509_l_sensor_init(int cam_idx)
000000  4901              LDR      r1,|L5.8|
;;;595    {
;;;596        //dbg_msg_camera("   <%s>\n", __func__);
;;;597        kdp_sensor_register(SENSOR_TYPE_SP2509_L, &sp2509_l_ops);
000002  2009              MOVS     r0,#9
000004  f7ffbffe          B.W      kdp_sensor_register
;;;598    }
;;;599    #endif
                          ENDP

                  |L5.8|
                          DCD      ||.data||+0x20c

                          AREA ||i.sp2509_l_sensor_set_aec_roi||, CODE, READONLY, ALIGN=1

                  sp2509_l_sensor_set_aec_roi PROC
;;;392    
;;;393    int sp2509_l_sensor_set_aec_roi(u8 x1, u8 x2, u8 y1, u8 y2, u8 center_x1, u8 center_x2, u8 center_y1, u8 center_y2)
000000  2000              MOVS     r0,#0
;;;394    {
;;;395        struct sensor_device *sensor_dev = &sp2509_dev_l;
;;;396        int ret = sp2509_sensor_set_aec_roi(sensor_dev, x1, x2, y1, y2, center_x1, center_x2, center_y1, center_y2);
;;;397        return ret;
;;;398    }
000002  4770              BX       lr
;;;399    
                          ENDP


                          AREA ||i.sp2509_l_sensor_set_exp_time||, CODE, READONLY, ALIGN=2

                  sp2509_l_sensor_set_exp_time PROC
;;;493    
;;;494    int sp2509_l_sensor_set_exp_time(u8 ana_gn1, u8 ana_gn2)
000000  4603              MOV      r3,r0
;;;495    {
;;;496        struct sensor_device *sensor_dev = &sp2509_dev_l;
;;;497        int ret = sp2509_sensor_set_exp_time(sensor_dev, ana_gn1, ana_gn2);
000002  460a              MOV      r2,r1
000004  4801              LDR      r0,|L7.12|
000006  4619              MOV      r1,r3
000008  f7ffbffe          B.W      sp2509_sensor_set_exp_time
;;;498    
;;;499        return ret;
;;;500    }
;;;501    
                          ENDP

                  |L7.12|
                          DCD      ||.data||

                          AREA ||i.sp2509_l_sensor_set_fmt||, CODE, READONLY, ALIGN=2

                  sp2509_l_sensor_set_fmt PROC
;;;349    
;;;350    static int sp2509_l_sensor_set_fmt(struct cam_format *fmt)
000000  b510              PUSH     {r4,lr}
;;;351    {
000002  4604              MOV      r4,r0
;;;352        //dbg_msg_camera("   <%s>\n", __func__);
;;;353    
;;;354        sp2509_select_win(&fmt->width, &fmt->height);
000004  1d01              ADDS     r1,r0,#4
000006  f7fffffe          BL       sp2509_select_win
;;;355    
;;;356        return sp2509_set_params(&sp2509_dev_l, &fmt->width, &fmt->height, fmt->pixelformat);
00000a  1d22              ADDS     r2,r4,#4
00000c  4621              MOV      r1,r4
00000e  68a3              LDR      r3,[r4,#8]
000010  e8bd4010          POP      {r4,lr}
000014  4801              LDR      r0,|L8.28|
000016  f7ffbffe          B.W      sp2509_set_params
;;;357    }
;;;358    
                          ENDP

00001a  0000              DCW      0x0000
                  |L8.28|
                          DCD      ||.data||

                          AREA ||i.sp2509_l_sensor_set_gain||, CODE, READONLY, ALIGN=2

                  sp2509_l_sensor_set_gain PROC
;;;456    
;;;457    int sp2509_l_sensor_set_gain(u8 ana_gn1, u8 ana_gn2)
000000  4603              MOV      r3,r0
;;;458    {
;;;459        struct sensor_device *sensor_dev = &sp2509_dev_l;
;;;460        int ret = sp2509_sensor_set_gain(sensor_dev, ana_gn1, ana_gn2);
000002  460a              MOV      r2,r1
000004  4801              LDR      r0,|L9.12|
000006  4619              MOV      r1,r3
000008  f7ffbffe          B.W      sp2509_sensor_set_gain
;;;461        return ret;
;;;462    }
;;;463    
                          ENDP

                  |L9.12|
                          DCD      ||.data||

                          AREA ||i.sp2509_r_i2c_init||, CODE, READONLY, ALIGN=1

                  sp2509_r_i2c_init PROC
;;;209    
;;;210    int sp2509_r_i2c_init(void)
000000  2000              MOVS     r0,#0
;;;211    {
;;;212        int ret = -1;
;;;213    
;;;214        ret = 0;
;;;215        
;;;216        return ret;
;;;217    }
000002  4770              BX       lr
;;;218    int sp2509_l_i2c_init(void)
                          ENDP


                          AREA ||i.sp2509_r_sensor_get_id||, CODE, READONLY, ALIGN=2

                  sp2509_r_sensor_get_id PROC
;;;429    
;;;430    static int sp2509_r_sensor_get_id(void)
000000  4801              LDR      r0,|L11.8|
;;;431    {
;;;432        //dbg_msg_camera("   <%s>\n", __func__);
;;;433    
;;;434        return sp2509_dev_r.device_id;
000002  6940              LDR      r0,[r0,#0x14]  ; sp2509_dev_r
;;;435    }
000004  4770              BX       lr
;;;436     
                          ENDP

000006  0000              DCW      0x0000
                  |L11.8|
                          DCD      ||.data||+0x18

                          AREA ||i.sp2509_r_sensor_get_lux||, CODE, READONLY, ALIGN=1

                  sp2509_r_sensor_get_lux PROC
;;;408    
;;;409    int sp2509_r_sensor_get_lux(u16* exposure, u8* pre_gain_h, u8* pre_gain_l, u8* global_gain, u8* y_average)
000000  2000              MOVS     r0,#0
;;;410    {
;;;411        struct sensor_device *sensor_dev = &sp2509_dev_r;
;;;412        int ret = sp2509_sensor_get_lux(sensor_dev, exposure, pre_gain_h, pre_gain_l, global_gain, y_average);
;;;413        return ret;
;;;414    }
000002  4770              BX       lr
;;;415    
                          ENDP


                          AREA ||i.sp2509_r_sensor_init||, CODE, READONLY, ALIGN=2

                  sp2509_r_sensor_init PROC
;;;587    };
;;;588    void sp2509_r_sensor_init(int cam_idx)
000000  4901              LDR      r1,|L13.8|
;;;589    {
;;;590        //dbg_msg_camera("   <%s>\n", __func__);
;;;591        kdp_sensor_register(SENSOR_TYPE_SP2509_R, &sp2509_r_ops);
000002  2008              MOVS     r0,#8
000004  f7ffbffe          B.W      kdp_sensor_register
;;;592    }
;;;593    
                          ENDP

                  |L13.8|
                          DCD      ||.data||+0x1c8

                          AREA ||i.sp2509_r_sensor_set_aec_roi||, CODE, READONLY, ALIGN=1

                  sp2509_r_sensor_set_aec_roi PROC
;;;385    
;;;386    int sp2509_r_sensor_set_aec_roi(u8 x1, u8 x2, u8 y1, u8 y2, u8 center_x1, u8 center_x2, u8 center_y1, u8 center_y2)
000000  2000              MOVS     r0,#0
;;;387    {
;;;388        struct sensor_device *sensor_dev = &sp2509_dev_r;
;;;389        int ret = sp2509_sensor_set_aec_roi(sensor_dev, x1, x2, y1, y2, center_x1, center_x2, center_y1, center_y2);
;;;390        return ret;
;;;391    }
000002  4770              BX       lr
;;;392    
                          ENDP


                          AREA ||i.sp2509_r_sensor_set_exp_time||, CODE, READONLY, ALIGN=2

                  sp2509_r_sensor_set_exp_time PROC
;;;485    
;;;486    int sp2509_r_sensor_set_exp_time(u8 ana_gn1, u8 ana_gn2)
000000  4603              MOV      r3,r0
;;;487    {
;;;488        struct sensor_device *sensor_dev = &sp2509_dev_r;
;;;489        int ret = sp2509_sensor_set_exp_time(sensor_dev, ana_gn1, ana_gn2);
000002  460a              MOV      r2,r1
000004  4801              LDR      r0,|L15.12|
000006  4619              MOV      r1,r3
000008  f7ffbffe          B.W      sp2509_sensor_set_exp_time
;;;490    
;;;491        return ret;
;;;492    }
;;;493    
                          ENDP

                  |L15.12|
                          DCD      ||.data||+0x18

                          AREA ||i.sp2509_r_sensor_set_fmt||, CODE, READONLY, ALIGN=2

                  sp2509_r_sensor_set_fmt PROC
;;;340    
;;;341    static int sp2509_r_sensor_set_fmt(struct cam_format *fmt)
000000  b510              PUSH     {r4,lr}
;;;342    {
000002  4604              MOV      r4,r0
;;;343        //dbg_msg_camera("   <%s>\n", __func__);
;;;344    
;;;345        sp2509_select_win(&fmt->width, &fmt->height);
000004  1d01              ADDS     r1,r0,#4
000006  f7fffffe          BL       sp2509_select_win
;;;346    
;;;347        return sp2509_set_params(&sp2509_dev_r, &fmt->width, &fmt->height, fmt->pixelformat);
00000a  1d22              ADDS     r2,r4,#4
00000c  4621              MOV      r1,r4
00000e  68a3              LDR      r3,[r4,#8]
000010  e8bd4010          POP      {r4,lr}
000014  4801              LDR      r0,|L16.28|
000016  f7ffbffe          B.W      sp2509_set_params
;;;348    }
;;;349    
                          ENDP

00001a  0000              DCW      0x0000
                  |L16.28|
                          DCD      ||.data||+0x18

                          AREA ||i.sp2509_r_sensor_set_gain||, CODE, READONLY, ALIGN=2

                  sp2509_r_sensor_set_gain PROC
;;;449    
;;;450    int sp2509_r_sensor_set_gain(u8 ana_gn1, u8 ana_gn2)
000000  4603              MOV      r3,r0
;;;451    {
;;;452        struct sensor_device *sensor_dev = &sp2509_dev_r;
;;;453        int ret = sp2509_sensor_set_gain(sensor_dev, ana_gn1, ana_gn2);
000002  460a              MOV      r2,r1
000004  4801              LDR      r0,|L17.12|
000006  4619              MOV      r1,r3
000008  f7ffbffe          B.W      sp2509_sensor_set_gain
;;;454        return ret;
;;;455    }
;;;456    
                          ENDP

                  |L17.12|
                          DCD      ||.data||+0x18

                          AREA ||i.sp2509_read_reg||, CODE, READONLY, ALIGN=1

                  sp2509_read_reg PROC
;;;237    
;;;238    static int sp2509_read_reg(struct sensor_device *sensor_dev, u16 reg, u8 *data)
000000  b538              PUSH     {r3-r5,lr}
;;;239    {
;;;240    	int ret;
;;;241    
;;;242        ret = kdp_drv_i2c_read(sensor_dev->i2c_id, sensor_dev->addr, reg, 1, data);
000002  2301              MOVS     r3,#1
000004  9200              STR      r2,[sp,#0]
000006  7c04              LDRB     r4,[r0,#0x10]
000008  460a              MOV      r2,r1
00000a  7800              LDRB     r0,[r0,#0]
00000c  4621              MOV      r1,r4
00000e  f7fffffe          BL       kdp_drv_i2c_read
;;;243    
;;;244    	return ret;
;;;245    }
000012  bd38              POP      {r3-r5,pc}
;;;246    
                          ENDP


                          AREA ||i.sp2509_select_win||, CODE, READONLY, ALIGN=2

                  sp2509_select_win PROC
;;;292    
;;;293    static const struct sensor_win_size *sp2509_select_win(u32 *width, u32 *height)
000000  4602              MOV      r2,r0
;;;294    {
000002  b510              PUSH     {r4,lr}
;;;295        int i, default_size = ARRAY_SIZE(sp2509_supported_win_sizes) - 1;
;;;296    
;;;297        for (i = 0; i < ARRAY_SIZE(sp2509_supported_win_sizes); i++) {
;;;298            if (sp2509_supported_win_sizes[i].width  >= *width &&
000004  4805              LDR      r0,|L19.28|
000006  6814              LDR      r4,[r2,#0]
000008  6803              LDR      r3,[r0,#0]
00000a  42a3              CMP      r3,r4
00000c  d301              BCC      |L19.18|
;;;299                sp2509_supported_win_sizes[i].height >= *height) {
00000e  6843              LDR      r3,[r0,#4]
000010  680c              LDR      r4,[r1,#0]
                  |L19.18|
;;;300                *width = sp2509_supported_win_sizes[i].width;
;;;301                *height = sp2509_supported_win_sizes[i].height;
;;;302                return &sp2509_supported_win_sizes[i];
;;;303            }
;;;304        }
;;;305    
;;;306        *width = sp2509_supported_win_sizes[default_size].width;
000012  6803              LDR      r3,[r0,#0]
;;;307        *height = sp2509_supported_win_sizes[default_size].height;
000014  6013              STR      r3,[r2,#0]
000016  6842              LDR      r2,[r0,#4]
000018  600a              STR      r2,[r1,#0]
;;;308        return &sp2509_supported_win_sizes[default_size];
;;;309    }
00001a  bd10              POP      {r4,pc}
;;;310    
                          ENDP

                  |L19.28|
                          DCD      ||.constdata||

                          AREA ||i.sp2509_sensor_enum_fmt||, CODE, READONLY, ALIGN=2

                  sp2509_sensor_enum_fmt PROC
;;;330    }
;;;331    static int sp2509_sensor_enum_fmt(unsigned int index, unsigned int *code)
000000  2802              CMP      r0,#2
;;;332    {
000002  d302              BCC      |L20.10|
;;;333        if (index >= ARRAY_SIZE(sp2509_colour_fmts))
;;;334            return -KDP_FRAMEWORK_ERRNO_INVALA;
000004  f06f0007          MVN      r0,#7
;;;335    
;;;336        //dbg_msg_camera("   <%s>\n", __func__);
;;;337        *code = sp2509_colour_fmts[index].fourcc;
;;;338        return 0;
;;;339    }
000008  4770              BX       lr
                  |L20.10|
00000a  4a03              LDR      r2,|L20.24|
00000c  f8520030          LDR      r0,[r2,r0,LSL #3]     ;337
000010  6008              STR      r0,[r1,#0]            ;338
000012  2000              MOVS     r0,#0                 ;338
000014  4770              BX       lr
;;;340    
                          ENDP

000016  0000              DCW      0x0000
                  |L20.24|
                          DCD      ||.constdata||+0x8

                          AREA ||i.sp2509_sensor_get_lux||, CODE, READONLY, ALIGN=1

                  sp2509_sensor_get_lux PROC
;;;399    
;;;400    int sp2509_sensor_get_lux(struct sensor_device *sensor_dev, u16* exposure, u8* pre_gain_h, u8* pre_gain_l, u8* global_gain, u8* y_average)
000000  2000              MOVS     r0,#0
;;;401    {
;;;402        enum i2c_adap_id i2c_id = sensor_dev->i2c_id;
;;;403        u8 dev_addr = sensor_dev->addr;
;;;404     
;;;405    
;;;406        return 0;
;;;407    }
000002  4770              BX       lr
;;;408    
                          ENDP


                          AREA ||i.sp2509_sensor_set_aec_roi||, CODE, READONLY, ALIGN=1

                  sp2509_sensor_set_aec_roi PROC
;;;358    
;;;359    int sp2509_sensor_set_aec_roi(struct sensor_device *sensor_dev, u8 x1, u8 x2, u8 y1, u8 y2, u8 center_x1, u8 center_x2, u8 center_y1, u8 center_y2)
000000  2000              MOVS     r0,#0
;;;360    {
;;;361    //    enum i2c_adap_id i2c_id = sensor_dev->i2c_id;
;;;362    //    u8 dev_addr = sensor_dev->addr;
;;;363    
;;;364    //    //set to page 1
;;;365    //    u8 reg = 0xfe;
;;;366    //    u8 data = 0x01;
;;;367    //    kdp_drv_i2c_write(i2c_id, dev_addr, reg, 1, data);
;;;368    //unavailable
;;;369    /*  
;;;370      
;;;371        //set roi
;;;372        kdp_drv_i2c_write(i2c_id, dev_addr, 0x01, 1, x1 + ROI_OFFSET_X);
;;;373        kdp_drv_i2c_write(i2c_id, dev_addr, 0x02, 1, x2 + ROI_OFFSET_X);
;;;374        kdp_drv_i2c_write(i2c_id, dev_addr, 0x03, 1, y1 + ROI_OFFSET_Y);
;;;375        kdp_drv_i2c_write(i2c_id, dev_addr, 0x04, 1, y2 + ROI_OFFSET_Y);
;;;376    
;;;377        //set center roi
;;;378        kdp_drv_i2c_write(i2c_id, dev_addr, 0x05, 1, center_x1 + ROI_OFFSET_X);
;;;379        kdp_drv_i2c_write(i2c_id, dev_addr, 0x06, 1, center_x2 + ROI_OFFSET_X);
;;;380        kdp_drv_i2c_write(i2c_id, dev_addr, 0x07, 1, center_y1 + ROI_OFFSET_Y);
;;;381        kdp_drv_i2c_write(i2c_id, dev_addr, 0x08, 1, center_y2 + ROI_OFFSET_Y);
;;;382    */
;;;383        return 0;
;;;384    }
000002  4770              BX       lr
;;;385    
                          ENDP


                          AREA ||i.sp2509_sensor_set_exp_time||, CODE, READONLY, ALIGN=1

                  sp2509_sensor_set_exp_time PROC
;;;463    
;;;464    int sp2509_sensor_set_exp_time(struct sensor_device *sensor_dev, u8 ana_gn1, u8 ana_gn2)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;465    {
;;;466        enum i2c_adap_id i2c_id = sensor_dev->i2c_id;
;;;467        u8 dev_addr = sensor_dev->addr;
000004  7c06              LDRB     r6,[r0,#0x10]
000006  7804              LDRB     r4,[r0,#0]            ;466
;;;468        
;;;469    //        write_cmos_sensor(0xfd, 0x01); 
;;;470    //        write_cmos_sensor(0x03, (shutter >> 8) & 0xFF);
;;;471    //        write_cmos_sensor(0x04, shutter  & 0xFF); 
;;;472    //        write_cmos_sensor(0x01, 0x01); 
;;;473    
;;;474        //set to page 1
;;;475        kdp_drv_i2c_write(i2c_id, dev_addr, 0xfd, 1, 0x01); //P1
000008  2701              MOVS     r7,#1
00000a  4690              MOV      r8,r2                 ;465
00000c  460d              MOV      r5,r1                 ;465
00000e  463b              MOV      r3,r7
000010  22fd              MOVS     r2,#0xfd
000012  4631              MOV      r1,r6
000014  4620              MOV      r0,r4
000016  9700              STR      r7,[sp,#0]
000018  f7fffffe          BL       kdp_drv_i2c_write
;;;476    
;;;477        //set exp time
;;;478        kdp_drv_i2c_write(i2c_id, dev_addr, 0x03, 1, ana_gn1);
00001c  2301              MOVS     r3,#1
00001e  2203              MOVS     r2,#3
000020  4631              MOV      r1,r6
000022  4620              MOV      r0,r4
000024  9500              STR      r5,[sp,#0]
000026  f7fffffe          BL       kdp_drv_i2c_write
;;;479        kdp_drv_i2c_write(i2c_id, dev_addr, 0x04, 1, ana_gn2);
00002a  2301              MOVS     r3,#1
00002c  2204              MOVS     r2,#4
00002e  4631              MOV      r1,r6
000030  4620              MOV      r0,r4
000032  f8cd8000          STR      r8,[sp,#0]
000036  f7fffffe          BL       kdp_drv_i2c_write
;;;480    
;;;481        kdp_drv_i2c_write(i2c_id, dev_addr, 0x01, 1, 0x01);  //P1 
00003a  2301              MOVS     r3,#1
00003c  461a              MOV      r2,r3
00003e  4631              MOV      r1,r6
000040  4620              MOV      r0,r4
000042  9700              STR      r7,[sp,#0]
000044  f7fffffe          BL       kdp_drv_i2c_write
;;;482        
;;;483        return 0;
000048  2000              MOVS     r0,#0
;;;484    }
00004a  e8bd83f8          POP      {r3-r9,pc}
;;;485    
                          ENDP


                          AREA ||i.sp2509_sensor_set_gain||, CODE, READONLY, ALIGN=1

                  sp2509_sensor_set_gain PROC
;;;436     
;;;437    int sp2509_sensor_set_gain(struct sensor_device *sensor_dev, u8 ana_gn1, u8 ana_gn2)
000000  b5f8              PUSH     {r3-r7,lr}
;;;438    {
;;;439        enum i2c_adap_id i2c_id = sensor_dev->i2c_id;
;;;440        u8 dev_addr = sensor_dev->addr;
000002  7c06              LDRB     r6,[r0,#0x10]
000004  7804              LDRB     r4,[r0,#0]            ;439
;;;441        
;;;442        kdp_drv_i2c_write(i2c_id, dev_addr, 0xfd, 1, 0x01);
000006  2701              MOVS     r7,#1
000008  4615              MOV      r5,r2                 ;438
00000a  463b              MOV      r3,r7
00000c  22fd              MOVS     r2,#0xfd
00000e  4631              MOV      r1,r6
000010  4620              MOV      r0,r4
000012  9700              STR      r7,[sp,#0]
000014  f7fffffe          BL       kdp_drv_i2c_write
;;;443        kdp_drv_i2c_write(i2c_id, dev_addr, 0x24, 1, ana_gn2);
000018  2301              MOVS     r3,#1
00001a  2224              MOVS     r2,#0x24
00001c  4631              MOV      r1,r6
00001e  4620              MOV      r0,r4
000020  9500              STR      r5,[sp,#0]
000022  f7fffffe          BL       kdp_drv_i2c_write
;;;444        kdp_drv_i2c_write(i2c_id, dev_addr, 0x01, 1, 0x01);
000026  2301              MOVS     r3,#1
000028  461a              MOV      r2,r3
00002a  4631              MOV      r1,r6
00002c  4620              MOV      r0,r4
00002e  9700              STR      r7,[sp,#0]
000030  f7fffffe          BL       kdp_drv_i2c_write
;;;445        // dbg_msg_console("SP2509MIPI_SetGain = %d", ana_gn2);
;;;446    
;;;447        return 0;
000034  2000              MOVS     r0,#0
;;;448    }
000036  bdf8              POP      {r3-r7,pc}
;;;449    
                          ENDP


                          AREA ||i.sp2509_set_params||, CODE, READONLY, ALIGN=2

                  sp2509_set_params PROC
;;;310    
;;;311    static int sp2509_set_params(
000000  2287              MOVS     r2,#0x87
;;;312            struct sensor_device *sensor_dev, u32 *width, u32 *height, u32 fourcc)
;;;313    {
;;;314        switch (fourcc) {	
;;;315            case V2K_PIX_FMT_YCBCR:
;;;316                dbg_msg_camera("%s: Selected V2K_PIX_FMT_YCBCR", __func__);
;;;317                break;            
;;;318            case V2K_PIX_FMT_RGB565:
;;;319                dbg_msg_camera("%s: Selected V2K_PIX_FMT_RGB565", __func__);
;;;320                break;
;;;321            default:;
;;;322        }
;;;323    
;;;324        /* reset hardware */
;;;325        //sp2509_reset(sensor_dev);
;;;326    
;;;327        /* initialize the sensor with default settings */
;;;328    //    dbg_msg_console("init len=%d0",sizeof(sp2509_init_regs)/sizeof(sp2509_init_regs[0]));
;;;329        return sp2509_init(sensor_dev, sp2509_init_regs, sizeof(sp2509_init_regs)/sizeof(sp2509_init_regs[0]));
000002  4901              LDR      r1,|L25.8|
000004  f7ffbffe          B.W      sp2509_init
;;;330    }
;;;331    static int sp2509_sensor_enum_fmt(unsigned int index, unsigned int *code)
                          ENDP

                  |L25.8|
                          DCD      ||.data||+0x30

                          AREA ||i.sp2509_write_reg||, CODE, READONLY, ALIGN=2

                  sp2509_write_reg PROC
;;;226    
;;;227    static int sp2509_write_reg(struct sensor_device *sensor_dev, u16 reg, u8 data)
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;228    {
000004  460f              MOV      r7,r1
;;;229        int ret;
;;;230    
;;;231        ret = kdp_drv_i2c_write(sensor_dev->i2c_id, sensor_dev->addr, reg, 1, data);
000006  9200              STR      r2,[sp,#0]
000008  4616              MOV      r6,r2                 ;228
00000a  4604              MOV      r4,r0                 ;228
00000c  7c01              LDRB     r1,[r0,#0x10]
00000e  7800              LDRB     r0,[r0,#0]
000010  2301              MOVS     r3,#1
000012  463a              MOV      r2,r7
000014  f7fffffe          BL       kdp_drv_i2c_write
000018  0005              MOVS     r5,r0
;;;232        if (ret)
00001a  d007              BEQ      |L26.44|
00001c  e9cd7600          STRD     r7,r6,[sp,#0]
;;;233            dbg_msg_console("[Err%d]sp2509_i2c addr:0x%02x, reg:0x%04x, data:0x%02x", ret, sensor_dev->addr, reg, data);
000020  4602              MOV      r2,r0
000022  8a23              LDRH     r3,[r4,#0x10]
000024  a103              ADR      r1,|L26.52|
000026  2001              MOVS     r0,#1
000028  f7fffffe          BL       kdp_level_printf
                  |L26.44|
;;;234    
;;;235        return ret;
00002c  4628              MOV      r0,r5
;;;236    }
00002e  e8bd81fc          POP      {r2-r8,pc}
;;;237    
                          ENDP

000032  0000              DCW      0x0000
                  |L26.52|
000034  5b457272          DCB      "[Err%d]sp2509_i2c addr:0x%02x, reg:0x%04x, data:0x%02x\r"
000038  25645d73
00003c  70323530
000040  395f6932
000044  63206164
000048  64723a30
00004c  78253032
000050  782c2072
000054  65673a30
000058  78253034
00005c  782c2064
000060  6174613a
000064  30782530
000068  32780d  
00006b  0a00              DCB      "\n",0
00006d  00                DCB      0
00006e  00                DCB      0
00006f  00                DCB      0

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  sp2509_supported_win_sizes
                          DCD      0x00000320
                          DCD      0x00000258
                  sp2509_colour_fmts
                          DCD      0x52594259
00000c  01000000          DCB      0x01,0x00,0x00,0x00
                          DCD      0x50424752
000014  00000000          DCB      0x00,0x00,0x00,0x00

                          AREA ||.data||, DATA, ALIGN=2

                  sp2509_dev_l
000000  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
000010  003d              DCW      0x003d
000012  0000              DCB      0x00,0x00
                          DCD      0x0000ffff
                  sp2509_dev_r
000018  01000000          DCB      0x01,0x00,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
000028  003d              DCW      0x003d
00002a  0000              DCB      0x00,0x00
                          DCD      0x0000ffff
                  sp2509_init_regs
000030  00fd              DCW      0x00fd
000032  00                DCB      0x00
000033  002f              DCWU     0x002f
000035  29                DCB      0x29
000036  0034              DCW      0x0034
000038  00                DCB      0x00
000039  0035              DCWU     0x0035
00003b  21                DCB      0x21
00003c  0030              DCW      0x0030
00003e  15                DCB      0x15
00003f  0033              DCWU     0x0033
000041  01                DCB      0x01
000042  00fd              DCW      0x00fd
000044  01                DCB      0x01
000045  003f              DCWU     0x003f
000047  02                DCB      0x02
000048  0044              DCW      0x0044
00004a  00                DCB      0x00
00004b  002a              DCWU     0x002a
00004d  4c                DCB      0x4c
00004e  002b              DCW      0x002b
000050  1e                DCB      0x1e
000051  002c              DCWU     0x002c
000053  60                DCB      0x60
000054  0025              DCW      0x0025
000056  11                DCB      0x11
000057  0003              DCWU     0x0003
000059  01                DCB      0x01
00005a  0004              DCW      0x0004
00005c  ae                DCB      0xae
00005d  0009              DCWU     0x0009
00005f  00                DCB      0x00
000060  000a              DCW      0x000a
000062  02                DCB      0x02
000063  0006              DCWU     0x0006
000065  a6                DCB      0xa6
000066  0031              DCW      0x0031
000068  00                DCB      0x00
000069  0024              DCWU     0x0024
00006b  40                DCB      0x40
00006c  0001              DCW      0x0001
00006e  01                DCB      0x01
00006f  00fb              DCWU     0x00fb
000071  73                DCB      0x73
000072  00fd              DCW      0x00fd
000074  01                DCB      0x01
000075  0016              DCWU     0x0016
000077  04                DCB      0x04
000078  001c              DCW      0x001c
00007a  09                DCB      0x09
00007b  0021              DCWU     0x0021
00007d  42                DCB      0x42
00007e  0012              DCW      0x0012
000080  04                DCB      0x04
000081  0013              DCWU     0x0013
000083  10                DCB      0x10
000084  0011              DCW      0x0011
000086  40                DCB      0x40
000087  0033              DCWU     0x0033
000089  81                DCB      0x81
00008a  00d0              DCW      0x00d0
00008c  00                DCB      0x00
00008d  00d1              DCWU     0x00d1
00008f  01                DCB      0x01
000090  00d2              DCW      0x00d2
000092  00                DCB      0x00
000093  0050              DCWU     0x0050
000095  10                DCB      0x10
000096  0051              DCW      0x0051
000098  23                DCB      0x23
000099  0052              DCWU     0x0052
00009b  20                DCB      0x20
00009c  0053              DCW      0x0053
00009e  10                DCB      0x10
00009f  0054              DCWU     0x0054
0000a1  02                DCB      0x02
0000a2  0055              DCW      0x0055
0000a4  20                DCB      0x20
0000a5  0056              DCWU     0x0056
0000a7  02                DCB      0x02
0000a8  0058              DCW      0x0058
0000aa  48                DCB      0x48
0000ab  005d              DCWU     0x005d
0000ad  15                DCB      0x15
0000ae  005e              DCW      0x005e
0000b0  05                DCB      0x05
0000b1  0066              DCWU     0x0066
0000b3  66                DCB      0x66
0000b4  0068              DCW      0x0068
0000b6  68                DCB      0x68
0000b7  006b              DCWU     0x006b
0000b9  00                DCB      0x00
0000ba  006c              DCW      0x006c
0000bc  00                DCB      0x00
0000bd  006f              DCWU     0x006f
0000bf  40                DCB      0x40
0000c0  0070              DCW      0x0070
0000c2  40                DCB      0x40
0000c3  0071              DCWU     0x0071
0000c5  0a                DCB      0x0a
0000c6  0072              DCW      0x0072
0000c8  f0                DCB      0xf0
0000c9  0073              DCWU     0x0073
0000cb  10                DCB      0x10
0000cc  0075              DCW      0x0075
0000ce  80                DCB      0x80
0000cf  0076              DCWU     0x0076
0000d1  10                DCB      0x10
0000d2  0084              DCW      0x0084
0000d4  00                DCB      0x00
0000d5  0085              DCWU     0x0085
0000d7  10                DCB      0x10
0000d8  0086              DCW      0x0086
0000da  10                DCB      0x10
0000db  0087              DCWU     0x0087
0000dd  00                DCB      0x00
0000de  008a              DCW      0x008a
0000e0  22                DCB      0x22
0000e1  008b              DCWU     0x008b
0000e3  22                DCB      0x22
0000e4  0019              DCW      0x0019
0000e6  f1                DCB      0xf1
0000e7  0029              DCWU     0x0029
0000e9  01                DCB      0x01
0000ea  00fd              DCW      0x00fd
0000ec  01                DCB      0x01
0000ed  009d              DCWU     0x009d
0000ef  16                DCB      0x16
0000f0  00a0              DCW      0x00a0
0000f2  29                DCB      0x29
0000f3  00a1              DCWU     0x00a1
0000f5  04                DCB      0x04
0000f6  00ad              DCW      0x00ad
0000f8  62                DCB      0x62
0000f9  00ae              DCWU     0x00ae
0000fb  00                DCB      0x00
0000fc  00af              DCW      0x00af
0000fe  85                DCB      0x85
0000ff  00b1              DCWU     0x00b1
000101  01                DCB      0x01
000102  008e              DCW      0x008e
000104  06                DCB      0x06
000105  008f              DCWU     0x008f
000107  40                DCB      0x40
000108  0090              DCW      0x0090
00010a  04                DCB      0x04
00010b  0091              DCWU     0x0091
00010d  b0                DCB      0xb0
00010e  0045              DCW      0x0045
000110  01                DCB      0x01
000111  0046              DCWU     0x0046
000113  00                DCB      0x00
000114  0047              DCW      0x0047
000116  6c                DCB      0x6c
000117  0048              DCWU     0x0048
000119  03                DCB      0x03
00011a  0049              DCW      0x0049
00011c  8b                DCB      0x8b
00011d  004a              DCWU     0x004a
00011f  00                DCB      0x00
000120  004b              DCW      0x004b
000122  07                DCB      0x07
000123  004c              DCWU     0x004c
000125  04                DCB      0x04
000126  004d              DCW      0x004d
000128  b7                DCB      0xb7
000129  00f0              DCWU     0x00f0
00012b  40                DCB      0x40
00012c  00f1              DCW      0x00f1
00012e  40                DCB      0x40
00012f  00f2              DCWU     0x00f2
000131  40                DCB      0x40
000132  00f3              DCW      0x00f3
000134  40                DCB      0x40
000135  00ac              DCWU     0x00ac
000137  01                DCB      0x01
000138  00fd              DCW      0x00fd
00013a  01                DCB      0x01
00013b  00fd              DCWU     0x00fd
00013d  00                DCB      0x00
00013e  0033              DCW      0x0033
000140  00                DCB      0x00
000141  00fd              DCWU     0x00fd
000143  01                DCB      0x01
000144  0003              DCW      0x0003
000146  01                DCB      0x01
000147  0004              DCWU     0x0004
000149  ae                DCB      0xae
00014a  0006              DCW      0x0006
00014c  04                DCB      0x04
00014d  0024              DCWU     0x0024
00014f  64                DCB      0x64
000150  0030              DCW      0x0030
000152  01                DCB      0x01
000153  0031              DCWU     0x0031
000155  04                DCB      0x04
000156  0033              DCW      0x0033
000158  40                DCB      0x40
000159  0066              DCWU     0x0066
00015b  a6                DCB      0xa6
00015c  0068              DCW      0x0068
00015e  a8                DCB      0xa8
00015f  0071              DCWU     0x0071
000161  10                DCB      0x10
000162  0073              DCW      0x0073
000164  80                DCB      0x80
000165  0075              DCWU     0x0075
000167  b9                DCB      0xb9
000168  0076              DCW      0x0076
00016a  80                DCB      0x80
00016b  008e              DCWU     0x008e
00016d  03                DCB      0x03
00016e  008f              DCW      0x008f
000170  20                DCB      0x20
000171  0090              DCWU     0x0090
000173  02                DCB      0x02
000174  0091              DCW      0x0091
000176  58                DCB      0x58
000177  009d              DCWU     0x009d
000179  6a                DCB      0x6a
00017a  0045              DCW      0x0045
00017c  01                DCB      0x01
00017d  0046              DCWU     0x0046
00017f  00                DCB      0x00
000180  0047              DCW      0x0047
000182  6c                DCB      0x6c
000183  0048              DCWU     0x0048
000185  03                DCB      0x03
000186  0049              DCW      0x0049
000188  8b                DCB      0x8b
000189  004a              DCWU     0x004a
00018b  00                DCB      0x00
00018c  004b              DCW      0x004b
00018e  01                DCB      0x01
00018f  004c              DCWU     0x004c
000191  01                DCB      0x01
000192  004d              DCW      0x004d
000194  2d                DCB      0x2d
000195  00d6              DCWU     0x00d6
000197  50                DCB      0x50
000198  00d7              DCW      0x00d7
00019a  00                DCB      0x00
00019b  00c9              DCWU     0x00c9
00019d  20                DCB      0x20
00019e  00ca              DCW      0x00ca
0001a0  00                DCB      0x00
0001a1  00d8              DCWU     0x00d8
0001a3  00                DCB      0x00
0001a4  00d9              DCW      0x00d9
0001a6  04                DCB      0x04
0001a7  00da              DCWU     0x00da
0001a9  50                DCB      0x50
0001aa  00db              DCW      0x00db
0001ac  00                DCB      0x00
0001ad  00dc              DCWU     0x00dc
0001af  30                DCB      0x30
0001b0  00dd              DCW      0x00dd
0001b2  02                DCB      0x02
0001b3  00de              DCWU     0x00de
0001b5  50                DCB      0x50
0001b6  00df              DCW      0x00df
0001b8  00                DCB      0x00
0001b9  00ea              DCWU     0x00ea
0001bb  30                DCB      0x30
0001bc  00eb              DCW      0x00eb
0001be  02                DCB      0x02
0001bf  0092              DCWU     0x0092
0001c1  02                DCB      0x02
0001c2  0000              DCW      0x0000
0001c4  00000000          DCB      0x00,0x00,0x00,0x00
                  sp2509_r_ops
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      sp2509_sensor_enum_fmt
                          DCD      0x00000000
                          DCD      sp2509_r_sensor_set_fmt
                          DCD      sp2509_r_sensor_set_gain
                          DCD      sp2509_r_sensor_set_exp_time
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      sp2509_r_sensor_get_id
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                  sp2509_l_ops
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      sp2509_sensor_enum_fmt
                          DCD      0x00000000
                          DCD      sp2509_l_sensor_set_fmt
                          DCD      sp2509_l_sensor_set_gain
                          DCD      sp2509_l_sensor_set_exp_time
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      sp2509_l_sensor_get_id
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
