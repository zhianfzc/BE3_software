; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\objects\power.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\power.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O3 --diag_suppress=9931 -I..\..\config -I..\..\..\..\board -I..\..\..\..\common\include -I..\..\..\..\scpu\device\include\CMSIS -I..\..\..\..\scpu\device\include\Kneron -I..\..\..\..\scpu\framework\include -I..\..\..\..\scpu\framework\include\framework -I..\..\..\..\scpu\drivers\include -I..\..\..\..\scpu\drivers\include\media\touch -I..\..\..\..\scpu\drivers\include\media\flash -I..\..\..\..\scpu\lib\kdp_system\inc -I..\..\..\..\scpu\lib\kdp_application\include\ -I..\..\..\..\scpu\lib\kdp_application\base\ -I..\..\..\..\scpu\lib\kdp_application\misc -I..\..\..\..\scpu\lib\kdp_e2e_r1n1\include -I..\..\..\..\scpu\include -I..\..\..\..\scpu\middleware\ota -I..\..\..\..\scpu\middleware\comm -I..\..\..\..\scpu\middleware\kdp_comm -I..\..\..\..\scpu\share -I..\..\..\..\scpu\share\gui_lib -I..\..\user -I.\RTE\CMSIS -I.\RTE\_Target-scpu -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\RTOS2\Include -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\RTOS2\RTX\Include -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\Device\ARM\ARMCM4\Include -D__RTX -D__MICROLIB -D__UVISION_VERSION=538 -D_RTE_ -DARMCM4_FP -D_RTE_ -DARM_MATH_CM4 -DTARGET_SCPU -DLOG_ENABLE -DKL520 -DHEAD_POSE_CHECK_PERCENT --omf_browse=.\objects\power.crf ..\..\..\..\scpu\drivers\system\power.c]
                          THUMB

                          AREA ||i._power_mgr_wait_domain_ready||, CODE, READONLY, ALIGN=2

                  _power_mgr_wait_domain_ready PROC
;;;86     
;;;87     static void _power_mgr_wait_domain_ready(u32 types) 
000000  b50e              PUSH     {r1-r3,lr}
;;;88     {
;;;89         volatile u32 val = 0;
000002  2100              MOVS     r1,#0
;;;90         volatile u32 vsssts = SCU_REG_PWR_VCCSTS_PWR_READY_DOMAIN_DEFAULT;
000004  9100              STR      r1,[sp,#0]
000006  2101              MOVS     r1,#1
;;;91         volatile u32 miscpwr = SCU_EXTREG_MISC_PWR_RESET_RELEASE_DOMAIN_DEFAULT;
000008  9101              STR      r1,[sp,#4]
00000a  2110              MOVS     r1,#0x10
;;;92     	
;;;93         if (types & POWER_DOMAIN_WORKING_DEFAULT) {
;;;94             vsssts |= SCU_REG_PWR_VCCSTS_PWR_READY_DOMAIN_DEFAULT;
;;;95             miscpwr |= SCU_EXTREG_MISC_PWR_RESET_RELEASE_DOMAIN_DEFAULT;
;;;96         }
;;;97         if (types & POWER_DOMAIN_WORKING_NPU) {
00000c  9102              STR      r1,[sp,#8]
00000e  0781              LSLS     r1,r0,#30
000010  d503              BPL      |L1.26|
;;;98             vsssts |= SCU_REG_PWR_VCCSTS_PWR_READY_DOMAIN_NPU;
000012  2103              MOVS     r1,#3
;;;99             miscpwr |= SCU_EXTREG_MISC_PWR_RESET_RELEASE_DOMAIN_NPU;
000014  9101              STR      r1,[sp,#4]
000016  2130              MOVS     r1,#0x30
000018  9102              STR      r1,[sp,#8]
                  |L1.26|
;;;100        }
;;;101        if (types & POWER_DOMAIN_WORKING_DDR) {
00001a  0740              LSLS     r0,r0,#29
00001c  d507              BPL      |L1.46|
;;;102            vsssts |= SCU_REG_PWR_VCCSTS_PWR_READY_DOMAIN_DDRCK;
00001e  9801              LDR      r0,[sp,#4]
000020  f0400004          ORR      r0,r0,#4
;;;103            miscpwr |= SCU_EXTREG_MISC_PWR_RESET_RELEASE_DOMAIN_DDRCK;
000024  9001              STR      r0,[sp,#4]
000026  9802              LDR      r0,[sp,#8]
000028  f0400040          ORR      r0,r0,#0x40
00002c  9002              STR      r0,[sp,#8]
                  |L1.46|
;;;104        }
;;;105        //dbg_msg("power_mgr_wait_domain_ready2 vsssts=%x", vsssts);
;;;106        //dbg_msg("power_mgr_wait_domain_ready2 miscpwr=%x", miscpwr);
;;;107    
;;;108        do {
;;;109            val = inw(SCU_REG_PWR_VCCSTS);
00002e  4809              LDR      r0,|L1.84|
                  |L1.48|
000030  6c81              LDR      r1,[r0,#0x48]
;;;110        } while((val & SCU_REG_PWR_VCCSTS_PWR_READY_DOMAIN_MASK) != vsssts);
000032  9100              STR      r1,[sp,#0]
000034  9a01              LDR      r2,[sp,#4]
000036  f0010107          AND      r1,r1,#7
00003a  4291              CMP      r1,r2
00003c  d1f8              BNE      |L1.48|
;;;111        
;;;112        do {
;;;113            val = inw(SCU_EXTREG_MISC);
00003e  4806              LDR      r0,|L1.88|
                  |L1.64|
000040  f8d010b0          LDR      r1,[r0,#0xb0]
;;;114        } while((val & SCU_EXTREG_MISC_PWR_RESET_RELEASE_DOMAIN_MASK) != miscpwr);
000044  9100              STR      r1,[sp,#0]
000046  9a02              LDR      r2,[sp,#8]
000048  f0010170          AND      r1,r1,#0x70
00004c  4291              CMP      r1,r2
00004e  d1f7              BNE      |L1.64|
;;;115    }
000050  bd0e              POP      {r1-r3,pc}
;;;116    
                          ENDP

000052  0000              DCW      0x0000
                  |L1.84|
                          DCD      0xc2300000
                  |L1.88|
                          DCD      0xc2380000

                          AREA ||i.power_mgr_ops||, CODE, READONLY, ALIGN=2

                  power_mgr_ops PROC
;;;239    
;;;240    void power_mgr_ops(enum power_mgr_ops ops)
000000  2800              CMP      r0,#0
;;;241    {   
000002  d104              BNE      |L2.14|
000004  4802              LDR      r0,|L2.16|
000006  6a01              LDR      r1,[r0,#0x20]
000008  4a02              LDR      r2,|L2.20|
00000a  4311              ORRS     r1,r1,r2
00000c  6201              STR      r1,[r0,#0x20]
                  |L2.14|
;;;242        switch (ops) {    
;;;243        case POWER_MGR_OPS_FCS:
;;;244            _power_mgr_ops_fcs();
;;;245            break;
;;;246        case POWER_MGR_OPS_CHANGE_BUS_SPEED:
;;;247            break;
;;;248        case POWER_MGR_OPS_PLL_UPDATE:
;;;249            break;    
;;;250        case POWER_MGR_OPS_SLEEPING:
;;;251            //stop cpu 
;;;252            //stop ddr
;;;253            //send self-refresh command to ddr
;;;254            //wait ack
;;;255            break;
;;;256        default:;
;;;257        }
;;;258    }
00000e  4770              BX       lr
;;;259    
                          ENDP

                  |L2.16|
                          DCD      0xc2300000
                  |L2.20|
                          DCD      0xf0000060

                          AREA ||i.power_mgr_set_domain||, CODE, READONLY, ALIGN=2

                  power_mgr_set_domain PROC
;;;164    
;;;165    void power_mgr_set_domain(u32 domain, int enable)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;166    {
000004  460f              MOV      r7,r1
;;;167        u32 val, mask, vcc_ready, misc_pwr, wait_state;
;;;168    
;;;169        switch (domain) {
000006  2801              CMP      r0,#1
000008  d00d              BEQ      |L3.38|
00000a  2802              CMP      r0,#2
00000c  d006              BEQ      |L3.28|
00000e  2803              CMP      r0,#3
000010  d131              BNE      |L3.118|
;;;170            case POWER_DOMAIN_DDRCK:
;;;171                mask = SCU_REG_PWR_CTRL_PWRUP_CTRL_DOMAIN_DDRCK;
;;;172                vcc_ready = SCU_REG_PWR_VCCSTS_PWR_READY_DOMAIN_DDRCK;
000012  2604              MOVS     r6,#4
000014  f44f6080          MOV      r0,#0x400             ;171
;;;173                misc_pwr = SCU_EXTREG_MISC_PWR_RESET_RELEASE_DOMAIN_DDRCK;
000018  2540              MOVS     r5,#0x40
;;;174                break;
00001a  e008              B        |L3.46|
                  |L3.28|
;;;175            case POWER_DOMAIN_NPU:
;;;176                mask = SCU_REG_PWR_CTRL_PWRUP_CTRL_DOMAIN_NPU;
;;;177                vcc_ready = SCU_REG_PWR_VCCSTS_PWR_READY_DOMAIN_NPU;
00001c  2602              MOVS     r6,#2
00001e  f44f7000          MOV      r0,#0x200             ;176
;;;178                misc_pwr = SCU_EXTREG_MISC_PWR_RESET_RELEASE_DOMAIN_NPU;
000022  2520              MOVS     r5,#0x20
;;;179                break;
000024  e003              B        |L3.46|
                  |L3.38|
;;;180            case POWER_DOMAIN_DEFAULT:
;;;181                mask = SCU_REG_PWR_CTRL_PWRUP_CTRL_DOMAIN_DEFAULT;
;;;182                vcc_ready = SCU_REG_PWR_VCCSTS_PWR_READY_DOMAIN_DEFAULT;
000026  2601              MOVS     r6,#1
000028  f44f7080          MOV      r0,#0x100             ;181
;;;183                misc_pwr = SCU_EXTREG_MISC_PWR_RESET_RELEASE_DOMAIN_DEFAULT;
00002c  2510              MOVS     r5,#0x10
                  |L3.46|
;;;184                break;
;;;185            default:
;;;186                return;
;;;187        }
;;;188    
;;;189        val = enable? mask : 0;
00002e  b10f              CBZ      r7,|L3.52|
000030  4601              MOV      r1,r0
000032  e000              B        |L3.54|
                  |L3.52|
000034  2100              MOVS     r1,#0
                  |L3.54|
;;;190        val |= SCU_REG_PWR_CTRL_PWRUP_UPDATE;
;;;191        mask |= SCU_REG_PWR_CTRL_PWRUP_UPDATE;
;;;192    
;;;193        masked_outw(SCU_REG_PWR_CTRL, val, mask);
000036  4c11              LDR      r4,|L3.124|
000038  f0417180          ORR      r1,r1,#0x1000000      ;190
00003c  f0407080          ORR      r0,r0,#0x1000000      ;191
000040  68a2              LDR      r2,[r4,#8]
000042  4001              ANDS     r1,r1,r0
000044  4382              BICS     r2,r2,r0
000046  430a              ORRS     r2,r2,r1
000048  60a2              STR      r2,[r4,#8]
;;;194        delay_us(500);
00004a  f44f70fa          MOV      r0,#0x1f4
00004e  f7fffffe          BL       delay_us
;;;195    
;;;196        /* Wait for VCC change */
;;;197        wait_state = enable? vcc_ready : 0;
000052  b10f              CBZ      r7,|L3.88|
000054  4631              MOV      r1,r6
000056  e000              B        |L3.90|
                  |L3.88|
000058  2100              MOVS     r1,#0
                  |L3.90|
;;;198        do {
;;;199            val = inw(SCU_REG_PWR_VCCSTS);
00005a  6ca0              LDR      r0,[r4,#0x48]
;;;200        } while((val & vcc_ready) != wait_state);
00005c  4030              ANDS     r0,r0,r6
00005e  4288              CMP      r0,r1
000060  d1fb              BNE      |L3.90|
;;;201    
;;;202        /* Wait for power reset change */
;;;203        wait_state = enable? misc_pwr : 0;
000062  b10f              CBZ      r7,|L3.104|
000064  4629              MOV      r1,r5
000066  e000              B        |L3.106|
                  |L3.104|
000068  2100              MOVS     r1,#0
                  |L3.106|
;;;204        do {
;;;205            val = inw(SCU_EXTREG_MISC);
00006a  4a05              LDR      r2,|L3.128|
                  |L3.108|
00006c  f8d200b0          LDR      r0,[r2,#0xb0]
;;;206        } while((val & misc_pwr) != wait_state);
000070  4028              ANDS     r0,r0,r5
000072  4288              CMP      r0,r1
000074  d1fa              BNE      |L3.108|
                  |L3.118|
;;;207    }
000076  e8bd81f0          POP      {r4-r8,pc}
;;;208    
                          ENDP

00007a  0000              DCW      0x0000
                  |L3.124|
                          DCD      0xc2300000
                  |L3.128|
                          DCD      0xc2380000

                          AREA ||i.power_mgr_set_domain_2||, CODE, READONLY, ALIGN=2

                  power_mgr_set_domain_2 PROC
;;;59     
;;;60     void power_mgr_set_domain_2(u32 types, BOOL enable)
000000  b50c              PUSH     {r2,r3,lr}
;;;61     {
;;;62         volatile u32 val = 0;
000002  2200              MOVS     r2,#0
;;;63         volatile u32 mask = SCU_REG_PWR_CTRL_PWRUP_CTRL_MASK | SCU_REG_PWR_CTRL_PWRUP_UPDATE;
000004  9200              STR      r2,[sp,#0]
000006  4a1d              LDR      r2,|L4.124|
;;;64         if (types & POWER_DOMAIN_WORKING_DEFAULT)
000008  9201              STR      r2,[sp,#4]
00000a  07c2              LSLS     r2,r0,#31
00000c  d002              BEQ      |L4.20|
;;;65             val |= SCU_REG_PWR_CTRL_PWRUP_CTRL_DOMAIN_DEFAULT;
00000e  f44f7280          MOV      r2,#0x100
000012  9200              STR      r2,[sp,#0]
                  |L4.20|
;;;66         if (types & POWER_DOMAIN_WORKING_NPU)
000014  0782              LSLS     r2,r0,#30
000016  d503              BPL      |L4.32|
;;;67             val |= SCU_REG_PWR_CTRL_PWRUP_CTRL_DOMAIN_NPU;
000018  9a00              LDR      r2,[sp,#0]
00001a  f4427200          ORR      r2,r2,#0x200
00001e  9200              STR      r2,[sp,#0]
                  |L4.32|
;;;68         if (types & POWER_DOMAIN_WORKING_DDR)
000020  0742              LSLS     r2,r0,#29
000022  d503              BPL      |L4.44|
;;;69             val |= SCU_REG_PWR_CTRL_PWRUP_CTRL_DOMAIN_DDRCK;
000024  9a00              LDR      r2,[sp,#0]
000026  f4426280          ORR      r2,r2,#0x400
00002a  9200              STR      r2,[sp,#0]
                  |L4.44|
;;;70         if (types & POWER_DOMAIN_SOFTOFF_DEFAULT)
00002c  06c2              LSLS     r2,r0,#27
00002e  d503              BPL      |L4.56|
;;;71             val |= SCU_REG_PWR_CTRL_PWRDN_CTRL_DOMAIN_DEFAULT;
000030  9a00              LDR      r2,[sp,#0]
000032  f0420201          ORR      r2,r2,#1
000036  9200              STR      r2,[sp,#0]
                  |L4.56|
;;;72         if (types & POWER_DOMAIN_SOFTOFF_NPU)
000038  0682              LSLS     r2,r0,#26
00003a  d503              BPL      |L4.68|
;;;73             val |= SCU_REG_PWR_CTRL_PWRDN_CTRL_DOMAIN_NPU;
00003c  9a00              LDR      r2,[sp,#0]
00003e  f0420202          ORR      r2,r2,#2
000042  9200              STR      r2,[sp,#0]
                  |L4.68|
;;;74         if (types & POWER_DOMAIN_SOFTOFF_DDR)
000044  0640              LSLS     r0,r0,#25
000046  d503              BPL      |L4.80|
;;;75             val |= SCU_REG_PWR_CTRL_PWRDN_CTRL_DOMAIN_DDRCK;
000048  9800              LDR      r0,[sp,#0]
00004a  f0400004          ORR      r0,r0,#4
00004e  9000              STR      r0,[sp,#0]
                  |L4.80|
;;;76     
;;;77         val |= (enable) ? (SCU_REG_PWR_CTRL_PWRUP_UPDATE) : (0);
000050  b111              CBZ      r1,|L4.88|
000052  f04f7080          MOV      r0,#0x1000000
000056  e000              B        |L4.90|
                  |L4.88|
000058  2000              MOVS     r0,#0
                  |L4.90|
00005a  9900              LDR      r1,[sp,#0]
00005c  4308              ORRS     r0,r0,r1
;;;78         //dbg_msg("power_mgr_set_domain2 val=%x", val);
;;;79         //dbg_msg("power_mgr_set_domain2 mask=%x", mask);
;;;80         masked_outw(SCU_REG_PWR_CTRL, val, mask);
00005e  4908              LDR      r1,|L4.128|
000060  9000              STR      r0,[sp,#0]
000062  6888              LDR      r0,[r1,#8]
000064  9a01              LDR      r2,[sp,#4]
000066  4390              BICS     r0,r0,r2
000068  e9dd2300          LDRD     r2,r3,[sp,#0]
00006c  401a              ANDS     r2,r2,r3
00006e  4310              ORRS     r0,r0,r2
000070  6088              STR      r0,[r1,#8]
;;;81         {
;;;82             int i = 50000;
;;;83             while (--i);
000072  f24c304e          MOV      r0,#0xc34e
                  |L4.118|
000076  1e40              SUBS     r0,r0,#1
000078  d1fd              BNE      |L4.118|
;;;84         }
;;;85     }
00007a  bd0c              POP      {r2,r3,pc}
;;;86     
                          ENDP

                  |L4.124|
                          DCD      0x01000700
                  |L4.128|
                          DCD      0xc2300000

                          AREA ||i.power_mgr_set_mode||, CODE, READONLY, ALIGN=2

                  power_mgr_set_mode PROC
;;;116    
;;;117    void power_mgr_set_mode(enum power_mgr_mode mode) 
000000  b570              PUSH     {r4-r6,lr}
;;;118    {
000002  4605              MOV      r5,r0
;;;119        BOOL update_flag = TRUE;
;;;120        u32 ctrl_types;
;;;121        u32 wait_types;
;;;122        if (mode != __power_mgr_mode) {
000004  4816              LDR      r0,|L5.96|
000006  2601              MOVS     r6,#1                 ;119
000008  7801              LDRB     r1,[r0,#0]  ; __power_mgr_mode
00000a  428d              CMP      r5,r1
00000c  d027              BEQ      |L5.94|
;;;123            switch (mode) {
00000e  2d05              CMP      r5,#5
000010  d20e              BCS      |L5.48|
000012  e8dff005          TBB      [pc,r5]
000016  0305              DCB      0x03,0x05
000018  07090b00          DCB      0x07,0x09,0x0b,0x00
;;;124            case POWER_MGR_MODE_RTC:
;;;125                ctrl_types = POWER_DOMAIN_WORKING_NONE;
00001c  2400              MOVS     r4,#0
;;;126                break;
00001e  e007              B        |L5.48|
;;;127            case POWER_MGR_MODE_ALWAYSON:
;;;128                ctrl_types = POWER_DOMAIN_WORKING_DEFAULT;
000020  2401              MOVS     r4,#1
;;;129                break;
000022  e005              B        |L5.48|
;;;130            case POWER_MGR_MODE_FULL:
;;;131                ctrl_types = POWER_DOMAIN_WORKING_DEFAULT | POWER_DOMAIN_WORKING_NPU | POWER_DOMAIN_WORKING_DDR;
000024  2407              MOVS     r4,#7
;;;132                break;
000026  e003              B        |L5.48|
;;;133            case POWER_MGR_MODE_RETENTION:
;;;134                ctrl_types = POWER_DOMAIN_WORKING_DEFAULT | POWER_DOMAIN_WORKING_DDR | POWER_DOMAIN_SOFTOFF_NPU;
000028  2425              MOVS     r4,#0x25
;;;135                break;
00002a  e001              B        |L5.48|
;;;136            case POWER_MGR_MODE_DEEP_RETENTION:
;;;137                ctrl_types = POWER_DOMAIN_WORKING_DEFAULT | POWER_DOMAIN_WORKING_DDR | POWER_DOMAIN_SOFTOFF_NPU;
00002c  2425              MOVS     r4,#0x25
;;;138                update_flag = FALSE;
00002e  2600              MOVS     r6,#0
                  |L5.48|
;;;139                break;
;;;140            default:;
;;;141            }
;;;142            
;;;143            __power_mgr_mode = mode;
000030  7005              STRB     r5,[r0,#0]
;;;144            power_mgr_set_domain_2(ctrl_types, update_flag);
000032  4631              MOV      r1,r6
000034  4620              MOV      r0,r4
000036  f7fffffe          BL       power_mgr_set_domain_2
;;;145            if (update_flag) {
00003a  b11e              CBZ      r6,|L5.68|
;;;146                wait_types = ctrl_types & ~POWER_DOMAIN_SOFTOFF_MASK;
00003c  f0240070          BIC      r0,r4,#0x70
;;;147                _power_mgr_wait_domain_ready(wait_types);
000040  f7fffffe          BL       _power_mgr_wait_domain_ready
                  |L5.68|
;;;148            }
;;;149    
;;;150            if (mode == POWER_MGR_MODE_DEEP_RETENTION) {
000044  2d04              CMP      r5,#4
000046  d10a              BNE      |L5.94|
;;;151                outw(SCU_REG_BTUP_CTRL, SCU_REG_BTUP_CTRL_RTC_BU_EN | // send power button output signal
000048  4807              LDR      r0,|L5.104|
00004a  4906              LDR      r1,|L5.100|
00004c  6041              STR      r1,[r0,#4]
;;;152                                        SCU_REG_BTUP_CTRL_PWRBTN_EN |
;;;153                                        SCU_REG_BTUP_CTRL_GPO_OUT);
;;;154    
;;;155                outw(SCU_REG_BTUP_STS, 0xffffffff);  // clear boot-up status
00004e  1781              ASRS     r1,r0,#30
000050  6001              STR      r1,[r0,#0]
;;;156                outw(SCU_REG_INT_STS, 0xffffffff); // clear all interrupt status
000052  6241              STR      r1,[r0,#0x24]
;;;157    
;;;158                SCU_REG_PWR_MOD_SET_SOFTOFF(1);
000054  6a01              LDR      r1,[r0,#0x20]
000056  f0410102          ORR      r1,r1,#2
00005a  6201              STR      r1,[r0,#0x20]
;;;159                __WFI();
00005c  bf30              WFI      
                  |L5.94|
;;;160            }
;;;161        }
;;;162    
;;;163    }
00005e  bd70              POP      {r4-r6,pc}
;;;164    
                          ENDP

                  |L5.96|
                          DCD      ||.data||
                  |L5.100|
                          DCD      0x00030001
                  |L5.104|
                          DCD      0xc2300000

                          AREA ||i.power_mgr_softoff||, CODE, READONLY, ALIGN=2

                  power_mgr_softoff PROC
;;;208    
;;;209    void power_mgr_softoff(enum power_mgr_mode mode)
000000  b118              CBZ      r0,|L6.10|
;;;210    {
;;;211        u32 val;
;;;212    
;;;213        switch (mode) {
000002  2804              CMP      r0,#4
000004  d10f              BNE      |L6.38|
;;;214            case POWER_MGR_MODE_DEEP_RETENTION:
;;;215                val = PWR_CTRL_SOFTOFF_DEEP_RETENTION;
000006  4808              LDR      r0,|L6.40|
;;;216                break;
000008  e001              B        |L6.14|
                  |L6.10|
;;;217            case POWER_MGR_MODE_RTC:
;;;218                val = PWR_CTRL_SOFTOFF_RTC_MODE;
00000a  f04f2001          MOV      r0,#0x1000100
                  |L6.14|
;;;219                break;
;;;220            default:
;;;221                return;
;;;222        }
;;;223    
;;;224        masked_outw(SCU_REG_PWR_CTRL, val, PWR_CTRL_SOFTOFF_MASK);
00000e  4907              LDR      r1,|L6.44|
000010  688a              LDR      r2,[r1,#8]
000012  4b07              LDR      r3,|L6.48|
000014  401a              ANDS     r2,r2,r3
000016  43db              MVNS     r3,r3
000018  4018              ANDS     r0,r0,r3
00001a  4302              ORRS     r2,r2,r0
00001c  608a              STR      r2,[r1,#8]
;;;225        SCU_REG_PWR_MOD_SET_SOFTOFF(1);
00001e  6a08              LDR      r0,[r1,#0x20]
000020  f0400002          ORR      r0,r0,#2
000024  6208              STR      r0,[r1,#0x20]
                  |L6.38|
;;;226    }
000026  4770              BX       lr
;;;227    
                          ENDP

                  |L6.40|
                          DCD      0x01000504
                  |L6.44|
                          DCD      0xc2300000
                  |L6.48|
                          DCD      0xfefff8f8

                          AREA ||i.power_mgr_sw_reset||, CODE, READONLY, ALIGN=2

                  power_mgr_sw_reset PROC
;;;43     
;;;44     void power_mgr_sw_reset(void)
000000  b510              PUSH     {r4,lr}
;;;45     {
;;;46     #if 1
;;;47         err_msg("Set watchdog reset\n");
000002  a108              ADR      r1,|L7.36|
000004  2002              MOVS     r0,#2
000006  f7fffffe          BL       kdp_level_printf
;;;48     
;;;49         outw(WDT_FTWDT010_PA_BASE+0x0C, 0);
00000a  480b              LDR      r0,|L7.56|
00000c  2100              MOVS     r1,#0
00000e  60c1              STR      r1,[r0,#0xc]
;;;50         outw(WDT_FTWDT010_PA_BASE+0x04, 1000);
000010  f44f717a          MOV      r1,#0x3e8
000014  6041              STR      r1,[r0,#4]
;;;51         outw(WDT_FTWDT010_PA_BASE+0x0C, 0x03); // system reset
000016  2103              MOVS     r1,#3
000018  60c1              STR      r1,[r0,#0xc]
;;;52         outw(WDT_FTWDT010_PA_BASE+0x08, 0x5AB9);
00001a  f64521b9          MOV      r1,#0x5ab9
00001e  6081              STR      r1,[r0,#8]
;;;53     
;;;54         __WFI();
000020  bf30              WFI      
;;;55     #else	
;;;56         masked_outw(SCU_REG_PWR_MOD, SCU_REG_PWR_MOD_SW_RST, SCU_REG_PWR_MOD_SW_RST);
;;;57     #endif		
;;;58     }
000022  bd10              POP      {r4,pc}
;;;59     
                          ENDP

                  |L7.36|
000024  53657420          DCB      "Set watchdog reset\n",0
000028  77617463
00002c  68646f67
000030  20726573
000034  65740a00
                  |L7.56|
                          DCD      0xc1e00000

                          AREA ||.data||, DATA, ALIGN=0

                  __power_mgr_mode
000000  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\scpu\\drivers\\system\\power.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___7_power_c_d22b5def____REV16|
#line 208 "F:\\Users\\fu\\AppData\\Local\\Arm\\Packs\\ARM\\CMSIS\\5.9.0\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___7_power_c_d22b5def____REV16| PROC
#line 209

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___7_power_c_d22b5def____REVSH|
#line 223
|__asm___7_power_c_d22b5def____REVSH| PROC
#line 224

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___7_power_c_d22b5def____RRX|
#line 410
|__asm___7_power_c_d22b5def____RRX| PROC
#line 411

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
