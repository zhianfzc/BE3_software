; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\objects\sample_app_console.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\sample_app_console.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O3 --diag_suppress=9931 -I..\..\config -I..\..\..\..\board -I..\..\..\..\common\include -I..\..\..\..\scpu\device\include\CMSIS -I..\..\..\..\scpu\device\include\Kneron -I..\..\..\..\scpu\framework\include -I..\..\..\..\scpu\framework\include\framework -I..\..\..\..\scpu\drivers\include -I..\..\..\..\scpu\drivers\include\media\touch -I..\..\..\..\scpu\drivers\include\media\flash -I..\..\..\..\scpu\lib\kdp_system\inc -I..\..\..\..\scpu\lib\kdp_application\include\ -I..\..\..\..\scpu\lib\kdp_application\base\ -I..\..\..\..\scpu\lib\kdp_application\misc -I..\..\..\..\scpu\lib\kdp_e2e_r1n1\include -I..\..\..\..\scpu\include -I..\..\..\..\scpu\middleware\ota -I..\..\..\..\scpu\middleware\comm -I..\..\..\..\scpu\middleware\kdp_comm -I..\..\..\..\scpu\share -I..\..\..\..\scpu\share\gui_lib -I..\..\user -I.\RTE\CMSIS -I.\RTE\_Target-scpu -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\RTOS2\Include -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\RTOS2\RTX\Include -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\Device\ARM\ARMCM4\Include -D__RTX -D__MICROLIB -D__UVISION_VERSION=538 -D_RTE_ -DARMCM4_FP -D_RTE_ -DARM_MATH_CM4 -DTARGET_SCPU -DLOG_ENABLE -DKL520 -DHEAD_POSE_CHECK_PERCENT --omf_browse=.\objects\sample_app_console.crf ..\..\..\..\scpu\share\sample_app_console.c]
                          THUMB

                          AREA ||i._cmd_get_answer_int||, CODE, READONLY, ALIGN=2

                  _cmd_get_answer_int PROC
;;;632    
;;;633    static int _cmd_get_answer_int(const char *str)
000000  b500              PUSH     {lr}
;;;634    {
000002  b0c1              SUB      sp,sp,#0x104
;;;635        int ans;
;;;636        char buf[256];
;;;637    
;;;638        dbg_msg_nocrlf(str);
000004  f7fffffe          BL       kdp_printf_nocrlf
;;;639        kdp_gets(DEBUG_CONSOLE, buf);
000008  4669              MOV      r1,sp
00000a  2000              MOVS     r0,#0
00000c  f7fffffe          BL       kdp_gets
;;;640        dbg_msg_nocrlf("");
000010  a005              ADR      r0,|L1.40|
000012  f7fffffe          BL       kdp_printf_nocrlf
;;;641    
;;;642        ans = atoi(strtok(buf, " \r\n\t"));
000016  a105              ADR      r1,|L1.44|
000018  4668              MOV      r0,sp
00001a  f7fffffe          BL       strtok
00001e  f7fffffe          BL       atoi
;;;643    
;;;644        return ans;
;;;645    }
000022  b041              ADD      sp,sp,#0x104
000024  bd00              POP      {pc}
;;;646    
                          ENDP

000026  0000              DCW      0x0000
                  |L1.40|
000028  00                DCB      0
000029  00                DCB      0
00002a  00                DCB      0
00002b  00                DCB      0
                  |L1.44|
00002c  200d0a09          DCB      " \r\n\t",0
000030  00      
000031  00                DCB      0
000032  00                DCB      0
000033  00                DCB      0

                          AREA ||i._control_video_renderer_from_console||, CODE, READONLY, ALIGN=2

                  _control_video_renderer_from_console PROC
;;;611    
;;;612    void _control_video_renderer_from_console(BOOL startIt)
000000  b510              PUSH     {r4,lr}
;;;613    {
;;;614        if ((DISPLAY_STATE_OPENED == sample_app_display_state) && (startIt))
000002  4c0c              LDR      r4,|L2.52|
000004  7861              LDRB     r1,[r4,#1]  ; sample_app_display_state
000006  2901              CMP      r1,#1
000008  d00b              BEQ      |L2.34|
;;;615        {
;;;616    
;;;617            kdp_video_renderer_start();
;;;618    
;;;619            osDelay(10);
;;;620    
;;;621            sample_app_display_state = DISPLAY_STATE_RUNNING;
;;;622        }
;;;623        else if ((DISPLAY_STATE_RUNNING == sample_app_display_state) && (!startIt))
00000a  2902              CMP      r1,#2
00000c  d108              BNE      |L2.32|
00000e  2800              CMP      r0,#0
000010  d106              BNE      |L2.32|
;;;624        {
;;;625            kdp_video_renderer_stop();
000012  f7fffffe          BL       kdp_video_renderer_stop
;;;626    
;;;627            osDelay(10);
000016  200a              MOVS     r0,#0xa
000018  f7fffffe          BL       osDelay
;;;628    
;;;629            sample_app_display_state = DISPLAY_STATE_OPENED;
00001c  2001              MOVS     r0,#1
                  |L2.30|
00001e  7060              STRB     r0,[r4,#1]            ;621
                  |L2.32|
;;;630        }
;;;631    }
000020  bd10              POP      {r4,pc}
                  |L2.34|
000022  2800              CMP      r0,#0                 ;614
000024  d0fc              BEQ      |L2.32|
000026  f7fffffe          BL       kdp_video_renderer_start
00002a  200a              MOVS     r0,#0xa               ;619
00002c  f7fffffe          BL       osDelay
000030  2002              MOVS     r0,#2                 ;621
000032  e7f4              B        |L2.30|
;;;632    
                          ENDP

                  |L2.52|
                          DCD      ||.data||

                          AREA ||i._stability_recognition_tc||, CODE, READONLY, ALIGN=2

                  _stability_recognition_tc PROC
;;;1918   osTimerId_t tiemr_id;
;;;1919   void _stability_recognition_tc(void *arg)
000000  b510              PUSH     {r4,lr}
;;;1920   {
;;;1921       static int count = 0;
;;;1922       //dbg_msg_console("*(int*)arg=%d", *((int*)arg));
;;;1923       sample_face_recognition_without_timeout_size();
000002  f7fffffe          BL       sample_face_recognition_without_timeout_size
;;;1924       osDelay(1);
000006  2001              MOVS     r0,#1
000008  f7fffffe          BL       osDelay
;;;1925       sample_face_close();
00000c  f7fffffe          BL       sample_face_close
;;;1926       ++count;
000010  4808              LDR      r0,|L3.52|
;;;1927       dbg_msg_console("=========================================================%d", count);
000012  a109              ADR      r1,|L3.56|
000014  6902              LDR      r2,[r0,#0x10]         ;1926  ; count
000016  1c52              ADDS     r2,r2,#1              ;1926
000018  6102              STR      r2,[r0,#0x10]  ; count
00001a  2001              MOVS     r0,#1
00001c  f7fffffe          BL       kdp_level_printf
;;;1928       dbg_msg_console("Thread NUM:%d",osThreadGetCount());
000020  f7fffffe          BL       osThreadGetCount
000024  4602              MOV      r2,r0
000026  e8bd4010          POP      {r4,lr}
00002a  a113              ADR      r1,|L3.120|
00002c  2001              MOVS     r0,#1
00002e  f7ffbffe          B.W      kdp_level_printf
;;;1929   }
;;;1930   
                          ENDP

000032  0000              DCW      0x0000
                  |L3.52|
                          DCD      ||.data||
                  |L3.56|
000038  3d3d3d3d          DCB      "======================================================="
00003c  3d3d3d3d
000040  3d3d3d3d
000044  3d3d3d3d
000048  3d3d3d3d
00004c  3d3d3d3d
000050  3d3d3d3d
000054  3d3d3d3d
000058  3d3d3d3d
00005c  3d3d3d3d
000060  3d3d3d3d
000064  3d3d3d3d
000068  3d3d3d3d
00006c  3d3d3d  
00006f  3d3d2564          DCB      "==%d\r\n",0
000073  0d0a00  
000076  00                DCB      0
000077  00                DCB      0
                  |L3.120|
000078  54687265          DCB      "Thread NUM:%d\r\n",0
00007c  6164204e
000080  554d3a25
000084  640d0a00

                          AREA ||i.app_event_thread_kneron||, CODE, READONLY, ALIGN=2

                  app_event_thread_kneron PROC
;;;181    
;;;182    void app_event_thread_kneron(void *arg)
000000  f04f36ff          MOV      r6,#0xffffffff
;;;183    {
;;;184        uint32_t flags = 0;
;;;185        static int8_t a = 1;
;;;186        //u32 cnt = 0;
;;;187    
;;;188        for(;;)
;;;189        {
;;;190            flags = osEventFlagsWait(kl520_api_get_event(),KL520_APP_FLAG_ALL,  osFlagsWaitAny, osWaitForever);
000004  0b37              LSRS     r7,r6,#12
;;;191    
;;;192            //dbg_msg_console("ffff flags=%x cnt=%u", flags, ++cnt);
;;;193    
;;;194            if ((flags & KL520_APP_FLAG_FDFR_OK) || (flags & KL520_APP_FLAG_FDFR_ERR)|| (flags & KL520_APP_FLAG_FDFR_TIMEOUT) ||(flags & KL520_DEVICE_FLAG_ERR))
;;;195            {
;;;196                kl520_api_face_close();
;;;197    
;;;198                 if (a)
;;;199                 {
;;;200                    kl520_api_dp_fresh_bg(RED, 3);
;;;201                 }
;;;202                 else
;;;203                 {
;;;204                     kl520_api_dp_fresh_bg(BLUE, 3);
;;;205                 }
;;;206            }
;;;207            if (flags & KL520_APP_FLAG_ACTION)
;;;208            {
;;;209                if (a)
;;;210                {
;;;211                    kl520_api_dp_set_backlight(100);
;;;212                    kl520_api_face_recognition_set_timeout(3);
;;;213                    kl520_api_face_recognition(0, 0, DISPLAY_WIDTH, DISPLAY_HEIGHT);
000006  f44f78a0          MOV      r8,#0x140
00000a  4d1d              LDR      r5,|L4.128|
                  |L4.12|
00000c  f7fffffe          BL       kl520_api_get_event
000010  4633              MOV      r3,r6                 ;190
000012  2200              MOVS     r2,#0                 ;190
000014  4639              MOV      r1,r7                 ;190
000016  f7fffffe          BL       osEventFlagsWait
00001a  4604              MOV      r4,r0                 ;190
00001c  0780              LSLS     r0,r0,#30             ;194
00001e  d103              BNE      |L4.40|
000020  0760              LSLS     r0,r4,#29             ;194
000022  d401              BMI      |L4.40|
000024  05e0              LSLS     r0,r4,#23             ;194
000026  d50b              BPL      |L4.64|
                  |L4.40|
000028  f7fffffe          BL       kl520_api_face_close
00002c  7828              LDRB     r0,[r5,#0]            ;198  ; a
00002e  f04f0103          MOV      r1,#3                 ;204
000032  b110              CBZ      r0,|L4.58|
000034  f44f4078          MOV      r0,#0xf800            ;200
000038  e000              B        |L4.60|
                  |L4.58|
00003a  201f              MOVS     r0,#0x1f              ;204
                  |L4.60|
00003c  f7fffffe          BL       kl520_api_dp_fresh_bg
                  |L4.64|
000040  06a0              LSLS     r0,r4,#26             ;207
000042  d5e3              BPL      |L4.12|
000044  7828              LDRB     r0,[r5,#0]            ;209  ; a
000046  2800              CMP      r0,#0                 ;209
;;;214                }
;;;215                else
;;;216                {
;;;217                    kl520_api_dp_set_backlight(100);
000048  f04f0064          MOV      r0,#0x64
00004c  d005              BEQ      |L4.90|
00004e  f7fffffe          BL       kl520_api_dp_set_backlight
000052  2003              MOVS     r0,#3                 ;212
000054  f7fffffe          BL       kl520_api_face_recognition_set_timeout
000058  e004              B        |L4.100|
                  |L4.90|
00005a  f7fffffe          BL       kl520_api_dp_set_backlight
;;;218                    kl520_api_face_add_set_timeout(3);
00005e  2003              MOVS     r0,#3
000060  f7fffffe          BL       kl520_api_face_add_set_timeout
                  |L4.100|
;;;219                    //kl520_api_face_add(0, 0, LCD_WIDTH, LCD_HEIGHT, FACE_ADD_TYPE_NORMAL);
;;;220                    kl520_api_face_recognition(0, 0, DISPLAY_WIDTH, DISPLAY_HEIGHT);
000064  2100              MOVS     r1,#0
000066  23f0              MOVS     r3,#0xf0
000068  4642              MOV      r2,r8
00006a  4608              MOV      r0,r1
00006c  f7fffffe          BL       kl520_api_face_recognition
;;;221                }
;;;222                a = !a;
000070  7828              LDRB     r0,[r5,#0]  ; a
000072  b110              CBZ      r0,|L4.122|
000074  2000              MOVS     r0,#0
                  |L4.118|
000076  7028              STRB     r0,[r5,#0]
000078  e7c8              B        |L4.12|
                  |L4.122|
00007a  2001              MOVS     r0,#1
00007c  e7fb              B        |L4.118|
;;;223            }
;;;224    #ifdef SPECIAL_SCENARIO_TEST_TOUCH_ENABLE
;;;225            else if (flags & KL520_APP_FLAG_ACTION_TOUCH)
;;;226            {
;;;227                kl520_api_dp_fresh();
;;;228            }
;;;229    #endif
;;;230        }
;;;231    }
;;;232    
                          ENDP

00007e  0000              DCW      0x0000
                  |L4.128|
                          DCD      ||.data||

                          AREA ||i.app_kl520_init||, CODE, READONLY, ALIGN=1

                  app_kl520_init PROC
;;;161    
;;;162    int app_kl520_init()
000000  b510              PUSH     {r4,lr}
;;;163    {
;;;164       //lcd_power_on();
;;;165       //tp_power_on();
;;;166       if (0 != kl520_api_touch_open())
000002  f7fffffe          BL       kl520_api_touch_open
000006  b110              CBZ      r0,|L5.14|
;;;167       {
;;;168           return -1;
000008  f04f30ff          MOV      r0,#0xffffffff
;;;169       }
;;;170       kl520_api_touch_start();
;;;171    
;;;172       kl520_api_touch_set_x_range_max(CFG_TOUCH_X_RANGE_MAX);
;;;173       kl520_api_touch_set_y_range_max(CFG_TOUCH_Y_RANGE_MAX);
;;;174       kl520_api_touch_set_x_axis_inverse(CFG_TOUCH_X_AXIS_INVERSE);
;;;175       kl520_api_touch_set_y_axis_inverse(CFG_TOUCH_Y_AXIS_INVERSE);
;;;176    
;;;177        return 0;
;;;178    }
00000c  bd10              POP      {r4,pc}
                  |L5.14|
00000e  f7fffffe          BL       kl520_api_touch_start
000012  20f0              MOVS     r0,#0xf0              ;172
000014  f7fffffe          BL       kl520_api_touch_set_x_range_max
000018  f44f70a0          MOV      r0,#0x140             ;173
00001c  f7fffffe          BL       kl520_api_touch_set_y_range_max
000020  2000              MOVS     r0,#0                 ;174
000022  f7fffffe          BL       kl520_api_touch_set_x_axis_inverse
000026  2001              MOVS     r0,#1                 ;175
000028  f7fffffe          BL       kl520_api_touch_set_y_axis_inverse
00002c  2000              MOVS     r0,#0                 ;177
00002e  bd10              POP      {r4,pc}
;;;179    
                          ENDP


                          AREA ||i.force_abort_thread||, CODE, READONLY, ALIGN=1

                  force_abort_thread PROC
                  |L6.0|
;;;647    
;;;648    void force_abort_thread(void *arg)
000000  2000              MOVS     r0,#0
;;;649    {
;;;650        char input = 0;
;;;651    
;;;652        while(1)
;;;653        {
;;;654            input = kdp_getchar(DEBUG_CONSOLE);
000002  f7fffffe          BL       kdp_getchar
;;;655    
;;;656            if('q' == input)
000006  2871              CMP      r0,#0x71
000008  d109              BNE      |L6.30|
;;;657            {
;;;658                kl520_api_face_close();
00000a  f7fffffe          BL       kl520_api_face_close
;;;659                osDelay(10);
00000e  200a              MOVS     r0,#0xa
000010  f7fffffe          BL       osDelay
;;;660                set_event(kl520_api_get_event(), KL520_APP_FLAG_FDFR_OK);
000014  f7fffffe          BL       kl520_api_get_event
000018  2101              MOVS     r1,#1
00001a  f7fffffe          BL       set_event
                  |L6.30|
;;;661            }
;;;662            osDelay(50);
00001e  2032              MOVS     r0,#0x32
000020  f7fffffe          BL       osDelay
000024  e7ec              B        |L6.0|
;;;663        }
;;;664    }
;;;665    
                          ENDP


                          AREA ||i.reserved||, CODE, READONLY, ALIGN=1

                  reserved PROC
;;;859    
;;;860    void reserved(void)
000000  4770              BX       lr
;;;861    {
;;;862    }
;;;863    void sample_ui_fill_rect(void)
                          ENDP


                          AREA ||i.sample_Flash_Info||, CODE, READONLY, ALIGN=2

                  sample_Flash_Info PROC
;;;1601   
;;;1602   void sample_Flash_Info(void)
000000  b510              PUSH     {r4,lr}
;;;1603   {
000002  b0c0              SUB      sp,sp,#0x100
;;;1604       char buf[256];
;;;1605       int id = 0;
;;;1606       dbg_msg_console("-- Flash processing start --\n\r ");
000004  a130              ADR      r1,|L8.200|
000006  2001              MOVS     r0,#1
000008  f7fffffe          BL       kdp_level_printf
;;;1607       kdp_flash_initialize();
00000c  f7fffffe          BL       kdp_flash_initialize
;;;1608       kdp_flash_get_info();
000010  f7fffffe          BL       kdp_flash_get_info
                  |L8.20|
;;;1609   
;;;1610       while(1)
;;;1611       {
;;;1612   
;;;1613           dbg_msg_console("open flash >> ");
000014  a135              ADR      r1,|L8.236|
000016  2001              MOVS     r0,#1
000018  f7fffffe          BL       kdp_level_printf
;;;1614           kdp_gets(DEBUG_CONSOLE, buf);
00001c  4669              MOV      r1,sp
00001e  2000              MOVS     r0,#0
000020  f7fffffe          BL       kdp_gets
;;;1615           dbg_msg_console("");
000024  a136              ADR      r1,|L8.256|
000026  2001              MOVS     r0,#1
000028  f7fffffe          BL       kdp_level_printf
;;;1616           id = atoi(strtok(buf, " \r\n\t"));
00002c  a135              ADR      r1,|L8.260|
00002e  4668              MOV      r0,sp
000030  f7fffffe          BL       strtok
000034  f7fffffe          BL       atoi
000038  4604              MOV      r4,r0
;;;1617   
;;;1618           dbg_msg_console("=========================");
00003a  a134              ADR      r1,|L8.268|
00003c  2001              MOVS     r0,#1
00003e  f7fffffe          BL       kdp_level_printf
;;;1619           dbg_msg_console("<0>Uart initial ....");
000042  a139              ADR      r1,|L8.296|
000044  2001              MOVS     r0,#1
000046  f7fffffe          BL       kdp_level_printf
;;;1620           dbg_msg_console("<1>Get Flash info..");
00004a  a13d              ADR      r1,|L8.320|
00004c  2001              MOVS     r0,#1
00004e  f7fffffe          BL       kdp_level_printf
;;;1621           #if (FLASH_VENDOR_SELECT == GD25S512MD )
;;;1622           dbg_msg_console("<2>Set Die 0...");
;;;1623           dbg_msg_console("<3>Set Die 1...");
;;;1624           dbg_msg_console("<4>Get active Die");
;;;1625           #endif
;;;1626   
;;;1627           #if (OTA_USER_BACKUP == YES )
;;;1628           dbg_msg_console("<5>Init user config...");
;;;1629           dbg_msg_console("<6>switch to wait active all...");
;;;1630   
;;;1631           dbg_msg_console("<61>switch to wait active fw+model");
;;;1632           dbg_msg_console("<62>switch to wait active UI...");
;;;1633   
;;;1634           dbg_msg_console("<7>switch wait active to active");
;;;1635           dbg_msg_console("<8>switch to active...");
;;;1636           dbg_msg_console("<9>get current status...");
;;;1637           dbg_msg_console("<10>set fake...");
;;;1638           dbg_msg_console("<11>Get user config status...");
;;;1639           dbg_msg_console("<12>Get user offset...");
;;;1640           dbg_msg_console("<13>Get inactive area...");
;;;1641           #endif
;;;1642   
;;;1643           dbg_msg_console("<555>Init boot config");
000052  a141              ADR      r1,|L8.344|
000054  2001              MOVS     r0,#1
000056  f7fffffe          BL       kdp_level_printf
;;;1644   
;;;1645           #if (OTA_FULL_CONSOLE_EN == YES)
;;;1646           dbg_msg_console("<556>Update boot-config to confirmed");
;;;1647           dbg_msg_console("<557>Switch to SCPU");
;;;1648           dbg_msg_console("<558>Switch to NCPU");
;;;1649           dbg_msg_console("<559>Get to SCPU/NCPU status");
;;;1650           dbg_msg_console("<665>Show model version");
;;;1651           dbg_msg_console("<666>Show model info...");
;;;1652           dbg_msg_console("<667>model info test...");
;;;1653           dbg_msg_console("<668>calc model info...");
;;;1654           dbg_msg_console("<669>read another model.");
;;;1655           dbg_msg_console("<777>model info experiment...");
;;;1656           dbg_msg_console("<778>model info CRC_check...");
;;;1657           dbg_msg_console("<888>enter ota user debug mode");
;;;1658           #endif
;;;1659           dbg_msg_console("<999>return");
00005a  a145              ADR      r1,|L8.368|
00005c  2001              MOVS     r0,#1
00005e  f7fffffe          BL       kdp_level_printf
;;;1660   
;;;1661           if( id == 1 )
000062  2c01              CMP      r4,#1
000064  d00e              BEQ      |L8.132|
;;;1662           {
;;;1663               kdp_flash_initialize();
;;;1664               kdp_flash_get_info();
;;;1665               dbg_msg_console(" *Flash Vendor ID: %X\r\n", kdp_flash_get_id());
;;;1666               dbg_msg_console(" *Flash Size: %d K Bytes\r\n",   (st_flash_info.flash_size_KByte+1) );
;;;1667               dbg_msg_console(" *Flash sector numbers: %d \r\n", st_flash_info.total_sector_numbers );
;;;1668               dbg_msg_console(" *Flash one block with sector numbers : %d\r\n", st_flash_info.block_size_Bytes );
;;;1669               dbg_msg_console(" *Flash one page size : %d Bytes\r\n", st_flash_info.page_size_Bytes );
;;;1670           }
;;;1671           else if( id == 0){
000066  2c00              CMP      r4,#0
000068  d0d4              BEQ      |L8.20|
;;;1672   //            kdp_uart_print_register(UART4_DEV);
;;;1673           }
;;;1674           #if (FLASH_VENDOR_SELECT == GD25S512MD )
;;;1675           else if( id ==2 ){
;;;1676               nor_flash_die_selection(0);
;;;1677           }
;;;1678           else if( id==3){
;;;1679               nor_flash_die_selection(1);
;;;1680           }
;;;1681           else if( id==4){
;;;1682               dbg_msg_console("Active die 0x%x \r\n", nor_flash_get_active_die() );
;;;1683           }
;;;1684           #endif
;;;1685   
;;;1686           #if(OTA_USER_BACKUP == YES )
;;;1687           else if(id==5){
;;;1688               dbg_msg_console("user config init start");
;;;1689               ota_user_config_init();
;;;1690           }
;;;1691           else if(id ==6){
;;;1692               dbg_msg_console("user config enter inactive");
;;;1693               ota_user_select_inactive_area(USER_PARTITION_FW_INFO);
;;;1694               ota_user_select_inactive_area(USER_PARTITION_MODEL);
;;;1695               #if ( OTA_USER_BACKUP_SEPERATE == NO )
;;;1696               ota_user_select_inactive_area(USER_PARTITION_MODEL);
;;;1697               #endif
;;;1698               ota_user_select_inactive_area(USER_PARTITION_UI_IMG);
;;;1699           }
;;;1700           else if(id ==61){
;;;1701               dbg_msg_console("user config enter inactive");
;;;1702               ota_user_select_inactive_area(USER_PARTITION_FW_INFO);
;;;1703               ota_user_select_inactive_area(USER_PARTITION_MODEL);
;;;1704   
;;;1705               #if ( OTA_USER_BACKUP_SEPERATE == NO )
;;;1706               ota_user_select_inactive_area(USER_PARTITION_MODEL);
;;;1707               #endif
;;;1708           }
;;;1709           else if(id ==62){
;;;1710               dbg_msg_console("user config enter inactive");
;;;1711               #if ( OTA_USER_BACKUP_SEPERATE == NO )
;;;1712               ota_user_select_inactive_area(USER_PARTITION_MODEL);
;;;1713               #endif
;;;1714               ota_user_select_inactive_area(USER_PARTITION_UI_IMG);
;;;1715           }
;;;1716   
;;;1717           else if(id==7){
;;;1718               dbg_msg_console("user config to wait active");
;;;1719               ota_user_select_wait_active_area(USER_PARTITION_FW_INFO);
;;;1720               ota_user_select_wait_active_area(USER_PARTITION_MODEL);
;;;1721               ota_user_select_wait_active_area(USER_PARTITION_UI_IMG);
;;;1722           }
;;;1723           else if(id==8){
;;;1724               dbg_msg_console("user config switch to active");
;;;1725               dbg_msg_console("   return :%d", ota_user_area_boot_check() );
;;;1726   
;;;1727           }
;;;1728           else if(id==9){
;;;1729               #if ( OTA_USER_BACKUP_SEPERATE == YES )
;;;1730               dbg_msg_console("get UI area idx: %d", ota_user_get_active_area(USER_PARTITION_FW_INFO) );
;;;1731               dbg_msg_console("get fw_info and model area idx %d", ota_user_get_active_area(USER_PARTITION_UI_IMG) );
;;;1732               #else
;;;1733               dbg_msg_console("get current area idx");
;;;1734               ota_user_get_active_area();
;;;1735               #endif
;;;1736           }
;;;1737           else if(id == 10){
;;;1738               dbg_msg_console("dummy change value");
;;;1739               ota_user_dummy_changes_status();
;;;1740           }
;;;1741           else if(id == 11){
;;;1742               dbg_msg_console("user config status");
;;;1743               ota_user_debug_show();
;;;1744           }
;;;1745           else if(id == 12){
;;;1746               dbg_msg_console("current offset");
;;;1747               dbg_msg_console("fw info offset 0x%x", kdp_get_fwinfo_offset());
;;;1748               dbg_msg_console("model offset 0x%x", kdp_get_model_offset());
;;;1749               dbg_msg_console("ui offset: 0x%x " , user_get_ui_offset());
;;;1750           }
;;;1751           else if(id == 13){
;;;1752   
;;;1753               dbg_msg_console("fw info inactive area %d", ota_user_check_on_going_area(USER_PARTITION_FW_INFO) );
;;;1754               dbg_msg_console("model inactive area  %d", ota_user_check_on_going_area(USER_PARTITION_MODEL) );
;;;1755               dbg_msg_console("ui inactive area %d " , ota_user_check_on_going_area(USER_PARTITION_UI_IMG) );
;;;1756           }
;;;1757           #endif
;;;1758           else if( id == 555 ){
00006a  f5a47000          SUB      r0,r4,#0x200
00006e  382b              SUBS     r0,r0,#0x2b
000070  d005              BEQ      |L8.126|
;;;1759               ota_init_partition_boot_cfg();
;;;1760           }
;;;1761   #if (OTA_FULL_CONSOLE_EN == YES)
;;;1762           else if( id == 556 ){
;;;1763               ota_handle_first_time_boot();
;;;1764           }
;;;1765           else if( id == 557 )
;;;1766           {
;;;1767               ota_update_show_config();
;;;1768               kl520_api_ota_switch_SCPU();
;;;1769               ota_update_show_config();
;;;1770           }
;;;1771           else if( id == 558 )
;;;1772           {
;;;1773               ota_update_show_config();
;;;1774               kl520_api_ota_switch_NCPU();
;;;1775               ota_update_show_config();
;;;1776           }
;;;1777           else if( id==559 )
;;;1778           {
;;;1779               dbg_msg_console("SCPU active area:%d", ota_get_active_scpu_partition() );
;;;1780               dbg_msg_console("NCPU active area:%d", ota_get_active_ncpu_partition() );
;;;1781           }
;;;1782           else if( id==665 )
;;;1783           {
;;;1784               dbg_msg_console("Model numbers :%d", kl520_api_model_count());
;;;1785               dbg_msg_console("Model 0 version :%d", kl520_api_model_version(0));
;;;1786               dbg_msg_console("Second Last Model index:%d version :%d",kl520_api_model_count()-2, kl520_api_model_version( kl520_api_model_count()-2 ) );
;;;1787               dbg_msg_console("Last Model index:%d version :%d",kl520_api_model_count()-1, kl520_api_model_version( kl520_api_model_count()-1 ) );
;;;1788               dbg_msg_console("Model numbers :%d", kdp_model_get_model_count() );
;;;1789               dbg_msg_console("All Model size :%d", kdp_clc_all_model_size() );
;;;1790               dbg_msg_console("Model 0 version :%d", kdp_model_version(0) );
;;;1791               dbg_msg_console("Second Last Model index:%d version :%d", kdp_model_get_model_count()-2, kdp_model_version( kdp_model_get_model_count()-2 ) );
;;;1792               dbg_msg_console("Last Model index:%d version :%d", kdp_model_get_model_count()-1, kdp_model_version( kdp_model_get_model_count()-1 ) );
;;;1793               dbg_msg_console("CRC offset in fw info :%d, value: 0x%x", kdp_crc_offset_in_fwinfo(), drv_read_all_model_crc() );
;;;1794           }
;;;1795           else if( id==666 )
;;;1796           {
;;;1797               dbg_msg_console("Model numbers :%d", kdp_model_get_model_count() );
;;;1798               kdp_model_show_info();
;;;1799   
;;;1800               for(int kk=0; kk<kdp_model_get_model_count(); kk++)
;;;1801               {
;;;1802                   dbg_msg_console("Model idx :%d, size: %d", kk, kdp_clc_each_model_size(kk) );
;;;1803                   dbg_msg_console("Model idx :%d, crc: 0x%x", kk, drv_read_each_model_crc(kk) );
;;;1804               }
;;;1805   //            kdp_model_info_reload_test();
;;;1806           }
;;;1807           else if( id==667 )
;;;1808           {
;;;1809               kdp_model_info_clear();
;;;1810               kdp_model_show_info();
;;;1811           }
;;;1812           else if( id==668 )
;;;1813           {
;;;1814               uint32_t a=0, c=0, d =0;
;;;1815               kdp_model_info_get( &a, &c, &d );
;;;1816               dbg_msg_console("second last start: 0x%x, c:0x%x, partial size:0x%x ", a,c,d );
;;;1817           }
;;;1818           #if (OTA_USER_BACKUP == YES )
;;;1819           else if( id==669 )
;;;1820           {
;;;1821               //force read another area
;;;1822               dbg_msg_console("re-load model info");
;;;1823               kdp_set_model_offset(KDP_FLASH_ALL_MODEL_OFFSET_1);
;;;1824               kdp_set_fwinfo_offset(KDP_FLASH_FW_INFO_OFFSET_1);
;;;1825               kdp_model_info_reload();
;;;1826               dbg_msg_console("all model size: %d ", kdp_clc_all_model_size() );
;;;1827           }
;;;1828           #endif
;;;1829           else if( id==777 )
;;;1830           {
;;;1831   //            return;
;;;1832           }
;;;1833           else if( id==778 )
;;;1834           {
;;;1835               u8  *ptr = (u8 *)KDP_DDR_MODEL_START_ADDR;
;;;1836               u32 target_length = 16000000;
;;;1837               dbg_msg_console("model address 0x%x ", ptr );
;;;1838               dbg_msg_console("crc result is 0x%x ", ota_crc32(ptr , target_length) );
;;;1839   
;;;1840               //calculate CRC....
;;;1841   //            return;
;;;1842           }
;;;1843   
;;;1844           else if(id==888)
;;;1845           {
;;;1846               sample_ota_model();
;;;1847           }
;;;1848   #endif
;;;1849           else if(id==999 )
000072  f5a47040          SUB      r0,r4,#0x300
000076  38e7              SUBS     r0,r0,#0xe7
000078  d1cc              BNE      |L8.20|
;;;1850           {
;;;1851               return;
;;;1852           }
;;;1853   
;;;1854       }
;;;1855   }
00007a  b040              ADD      sp,sp,#0x100
00007c  bd10              POP      {r4,pc}
                  |L8.126|
00007e  f7fffffe          BL       ota_init_partition_boot_cfg
000082  e7c7              B        |L8.20|
                  |L8.132|
000084  f7fffffe          BL       kdp_flash_initialize
000088  f7fffffe          BL       kdp_flash_get_info
00008c  f7fffffe          BL       kdp_flash_get_id
000090  4602              MOV      r2,r0                 ;1665
000092  a13b              ADR      r1,|L8.384|
000094  2001              MOVS     r0,#1                 ;1665
000096  f7fffffe          BL       kdp_level_printf
00009a  4c40              LDR      r4,|L8.412|
00009c  a140              ADR      r1,|L8.416|
00009e  2001              MOVS     r0,#1                 ;1666
0000a0  68a2              LDR      r2,[r4,#8]            ;1666  ; st_flash_info
0000a2  1c52              ADDS     r2,r2,#1              ;1666
0000a4  f7fffffe          BL       kdp_level_printf
0000a8  8aa2              LDRH     r2,[r4,#0x14]         ;1667  ; st_flash_info
0000aa  a145              ADR      r1,|L8.448|
0000ac  2001              MOVS     r0,#1                 ;1667
0000ae  f7fffffe          BL       kdp_level_printf
0000b2  a14b              ADR      r1,|L8.480|
0000b4  2001              MOVS     r0,#1                 ;1668
0000b6  6922              LDR      r2,[r4,#0x10]         ;1668  ; st_flash_info
0000b8  f7fffffe          BL       kdp_level_printf
0000bc  89a2              LDRH     r2,[r4,#0xc]          ;1669  ; st_flash_info
0000be  a154              ADR      r1,|L8.528|
0000c0  2001              MOVS     r0,#1                 ;1669
0000c2  f7fffffe          BL       kdp_level_printf
0000c6  e7a5              B        |L8.20|
;;;1856   
                          ENDP

                  |L8.200|
0000c8  2d2d2046          DCB      "-- Flash processing start --\n\r \r\n",0
0000cc  6c617368
0000d0  2070726f
0000d4  63657373
0000d8  696e6720
0000dc  73746172
0000e0  74202d2d
0000e4  0a0d200d
0000e8  0a00    
0000ea  00                DCB      0
0000eb  00                DCB      0
                  |L8.236|
0000ec  6f70656e          DCB      "open flash >> \r\n",0
0000f0  20666c61
0000f4  7368203e
0000f8  3e200d0a
0000fc  00      
0000fd  00                DCB      0
0000fe  00                DCB      0
0000ff  00                DCB      0
                  |L8.256|
000100  0d0a00            DCB      "\r\n",0
000103  00                DCB      0
                  |L8.260|
000104  200d0a09          DCB      " \r\n\t",0
000108  00      
000109  00                DCB      0
00010a  00                DCB      0
00010b  00                DCB      0
                  |L8.268|
00010c  3d3d3d3d          DCB      "=========================\r\n",0
000110  3d3d3d3d
000114  3d3d3d3d
000118  3d3d3d3d
00011c  3d3d3d3d
000120  3d3d3d3d
000124  3d0d0a00
                  |L8.296|
000128  3c303e55          DCB      "<0>Uart initial ....\r\n",0
00012c  61727420
000130  696e6974
000134  69616c20
000138  2e2e2e2e
00013c  0d0a00  
00013f  00                DCB      0
                  |L8.320|
000140  3c313e47          DCB      "<1>Get Flash info..\r\n",0
000144  65742046
000148  6c617368
00014c  20696e66
000150  6f2e2e0d
000154  0a00    
000156  00                DCB      0
000157  00                DCB      0
                  |L8.344|
000158  3c353535          DCB      "<555>Init boot config\r\n",0
00015c  3e496e69
000160  7420626f
000164  6f742063
000168  6f6e6669
00016c  670d0a00
                  |L8.368|
000170  3c393939          DCB      "<999>return\r\n",0
000174  3e726574
000178  75726e0d
00017c  0a00    
00017e  00                DCB      0
00017f  00                DCB      0
                  |L8.384|
000180  202a466c          DCB      " *Flash Vendor ID: %X\r\n\r\n",0
000184  61736820
000188  56656e64
00018c  6f722049
000190  443a2025
000194  580d0a0d
000198  0a00    
00019a  00                DCB      0
00019b  00                DCB      0
                  |L8.412|
                          DCD      st_flash_info
                  |L8.416|
0001a0  202a466c          DCB      " *Flash Size: %d K Bytes\r\n\r\n",0
0001a4  61736820
0001a8  53697a65
0001ac  3a202564
0001b0  204b2042
0001b4  79746573
0001b8  0d0a0d0a
0001bc  00      
0001bd  00                DCB      0
0001be  00                DCB      0
0001bf  00                DCB      0
                  |L8.448|
0001c0  202a466c          DCB      " *Flash sector numbers: %d \r\n\r\n",0
0001c4  61736820
0001c8  73656374
0001cc  6f72206e
0001d0  756d6265
0001d4  72733a20
0001d8  2564200d
0001dc  0a0d0a00
                  |L8.480|
0001e0  202a466c          DCB      " *Flash one block with sector numbers : %d\r\n\r\n",0
0001e4  61736820
0001e8  6f6e6520
0001ec  626c6f63
0001f0  6b207769
0001f4  74682073
0001f8  6563746f
0001fc  72206e75
000200  6d626572
000204  73203a20
000208  25640d0a
00020c  0d0a00  
00020f  00                DCB      0
                  |L8.528|
000210  202a466c          DCB      " *Flash one page size : %d Bytes\r\n\r\n",0
000214  61736820
000218  6f6e6520
00021c  70616765
000220  2073697a
000224  65203a20
000228  25642042
00022c  79746573
000230  0d0a0d0a
000234  00      
000235  00                DCB      0
000236  00                DCB      0
000237  00                DCB      0

                          AREA ||i.sample_GC1054_exp_time||, CODE, READONLY, ALIGN=2

                  sample_GC1054_exp_time PROC
;;;911    
;;;912    void sample_GC1054_exp_time(void)
000000  b510              PUSH     {r4,lr}
;;;913    {
;;;914        u8 cam_idx, exp_time_h, exp_time_l;
;;;915        u16 level;
;;;916    
;;;917        cam_idx = _cmd_get_answer_int("GC1054 camera index >>");
000002  a007              ADR      r0,|L9.32|
000004  f7fffffe          BL       _cmd_get_answer_int
000008  b2c4              UXTB     r4,r0
;;;918        level = _cmd_get_answer_int("GC1054 set exp time (0-8191) >>");
00000a  a00b              ADR      r0,|L9.56|
00000c  f7fffffe          BL       _cmd_get_answer_int
;;;919        exp_time_h = (level >> 8) & 0x1F;
000010  f3c02104          UBFX     r1,r0,#8,#5
;;;920        exp_time_l = level & 0xFF;
000014  b2c2              UXTB     r2,r0
;;;921    
;;;922        kdp_camera_set_exp_time(cam_idx, exp_time_h, exp_time_l);
000016  4620              MOV      r0,r4
000018  e8bd4010          POP      {r4,lr}
00001c  f7ffbffe          B.W      kdp_camera_set_exp_time
;;;923    }
;;;924    
                          ENDP

                  |L9.32|
000020  47433130          DCB      "GC1054 camera index >>",0
000024  35342063
000028  616d6572
00002c  6120696e
000030  64657820
000034  3e3e00  
000037  00                DCB      0
                  |L9.56|
000038  47433130          DCB      "GC1054 set exp time (0-8191) >>",0
00003c  35342073
000040  65742065
000044  78702074
000048  696d6520
00004c  28302d38
000050  31393129
000054  203e3e00

                          AREA ||i.sample_GC1054_gain||, CODE, READONLY, ALIGN=2

                  sample_GC1054_gain PROC
;;;899    
;;;900    void sample_GC1054_gain(void)
000000  b510              PUSH     {r4,lr}
;;;901    {
;;;902        u8 cam_idx, gain_h, gain_l;
;;;903        u16 level;
;;;904        cam_idx = _cmd_get_answer_int("GC1054 camera index >>");
000002  a007              ADR      r0,|L10.32|
000004  f7fffffe          BL       _cmd_get_answer_int
000008  b2c4              UXTB     r4,r0
;;;905        level = _cmd_get_answer_int("GC1054 set gain (0-2084) >>");
00000a  a00b              ADR      r0,|L10.56|
00000c  f7fffffe          BL       _cmd_get_answer_int
;;;906        gain_h = (level >> 8) & 0x0F;
000010  f3c02103          UBFX     r1,r0,#8,#4
;;;907        gain_l = level & 0xFF;
000014  b2c2              UXTB     r2,r0
;;;908        
;;;909        kdp_camera_set_gain(cam_idx, gain_h, gain_l);
000016  4620              MOV      r0,r4
000018  e8bd4010          POP      {r4,lr}
00001c  f7ffbffe          B.W      kdp_camera_set_gain
;;;910    }
;;;911    
                          ENDP

                  |L10.32|
000020  47433130          DCB      "GC1054 camera index >>",0
000024  35342063
000028  616d6572
00002c  6120696e
000030  64657820
000034  3e3e00  
000037  00                DCB      0
                  |L10.56|
000038  47433130          DCB      "GC1054 set gain (0-2084) >>",0
00003c  35342073
000040  65742067
000044  61696e20
000048  28302d32
00004c  30383429
000050  203e3e00

                          AREA ||i.sample_OV02B1B_exp_time||, CODE, READONLY, ALIGN=2

                  sample_OV02B1B_exp_time PROC
;;;936    
;;;937    void sample_OV02B1B_exp_time(void)
000000  b510              PUSH     {r4,lr}
;;;938    {
;;;939        u8 cam_idx, exp_time_h, exp_time_l;
;;;940        u16 level;
;;;941    
;;;942        cam_idx = _cmd_get_answer_int("OV02B1B camera index(0-1) >>");
000002  a00a              ADR      r0,|L11.44|
000004  f7fffffe          BL       _cmd_get_answer_int
000008  b2c4              UXTB     r4,r0
;;;943        dbg_msg_nocrlf("OV02B1B set exp time (%d-%d) >>", MIN_DEFAULT_NIR_EXP_TIME, MAX_DEFAULT_NIR_EXP_TIME);
00000a  f44f72d7          MOV      r2,#0x1ae
00000e  2102              MOVS     r1,#2
000010  a00e              ADR      r0,|L11.76|
000012  f7fffffe          BL       kdp_printf_nocrlf
;;;944        level = _cmd_get_answer_int("");
000016  a00c              ADR      r0,|L11.72|
000018  f7fffffe          BL       _cmd_get_answer_int
00001c  b282              UXTH     r2,r0
;;;945        exp_time_h = (level >> 8) & 0xFF;
;;;946        exp_time_l = level & 0xFF;
;;;947    
;;;948        kdp_camera_set_exp_time(cam_idx, exp_time_h, exp_time_l);
00001e  4620              MOV      r0,r4
000020  0a11              LSRS     r1,r2,#8              ;945
000022  e8bd4010          POP      {r4,lr}
000026  b2d2              UXTB     r2,r2                 ;946
000028  f7ffbffe          B.W      kdp_camera_set_exp_time
;;;949    }
;;;950    
                          ENDP

                  |L11.44|
00002c  4f563032          DCB      "OV02B1B camera index(0-1) >>"
000030  42314220
000034  63616d65
000038  72612069
00003c  6e646578
000040  28302d31
000044  29203e3e
                  |L11.72|
000048  00                DCB      0
000049  00                DCB      0
00004a  00                DCB      0
00004b  00                DCB      0
                  |L11.76|
00004c  4f563032          DCB      "OV02B1B set exp time (%d-%d) >>",0
000050  42314220
000054  73657420
000058  65787020
00005c  74696d65
000060  20282564
000064  2d256429
000068  203e3e00

                          AREA ||i.sample_OV02B1B_gain||, CODE, READONLY, ALIGN=2

                  sample_OV02B1B_gain PROC
;;;924    
;;;925    void sample_OV02B1B_gain(void)
000000  b510              PUSH     {r4,lr}
;;;926    {
;;;927        u8 cam_idx, gain_h, gain_l;
;;;928        u16 level;
;;;929        cam_idx = _cmd_get_answer_int("OV02B1B camera index(0-1) >>");
000002  a007              ADR      r0,|L12.32|
000004  f7fffffe          BL       _cmd_get_answer_int
000008  b2c4              UXTB     r4,r0
;;;930        level = _cmd_get_answer_int("OV02B1B set gain (15-250) >>");
00000a  a00d              ADR      r0,|L12.64|
00000c  f7fffffe          BL       _cmd_get_answer_int
;;;931        gain_h = 0;//(level >> 8) & 0x0;
;;;932        gain_l = level & 0xFF;
000010  b2c2              UXTB     r2,r0
;;;933        
;;;934        kdp_camera_set_gain(cam_idx, gain_h, gain_l);
000012  4620              MOV      r0,r4
000014  e8bd4010          POP      {r4,lr}
000018  2100              MOVS     r1,#0                 ;931
00001a  f7ffbffe          B.W      kdp_camera_set_gain
;;;935    }
;;;936    
                          ENDP

00001e  0000              DCW      0x0000
                  |L12.32|
000020  4f563032          DCB      "OV02B1B camera index(0-1) >>",0
000024  42314220
000028  63616d65
00002c  72612069
000030  6e646578
000034  28302d31
000038  29203e3e
00003c  00      
00003d  00                DCB      0
00003e  00                DCB      0
00003f  00                DCB      0
                  |L12.64|
000040  4f563032          DCB      "OV02B1B set gain (15-250) >>",0
000044  42314220
000048  73657420
00004c  6761696e
000050  20283135
000054  2d323530
000058  29203e3e
00005c  00      
00005d  00                DCB      0
00005e  00                DCB      0
00005f  00                DCB      0

                          AREA ||i.sample_SP2509_exp_time||, CODE, READONLY, ALIGN=2

                  sample_SP2509_exp_time PROC
;;;962    
;;;963    void sample_SP2509_exp_time(void)
000000  b510              PUSH     {r4,lr}
;;;964    {
;;;965        u8 cam_idx, exp_time_h, exp_time_l;
;;;966        u16 level;
;;;967    
;;;968        cam_idx = _cmd_get_answer_int("SP2509 camera index(0-1) >>");
000002  a00a              ADR      r0,|L13.44|
000004  f7fffffe          BL       _cmd_get_answer_int
000008  b2c4              UXTB     r4,r0
;;;969        dbg_msg_nocrlf("SP2509 set exp time (%d-%d) >>", MIN_DEFAULT_NIR_EXP_TIME, MAX_DEFAULT_NIR_EXP_TIME);
00000a  f44f72d7          MOV      r2,#0x1ae
00000e  2102              MOVS     r1,#2
000010  a00d              ADR      r0,|L13.72|
000012  f7fffffe          BL       kdp_printf_nocrlf
;;;970        level = _cmd_get_answer_int("");
000016  a014              ADR      r0,|L13.104|
000018  f7fffffe          BL       _cmd_get_answer_int
00001c  b282              UXTH     r2,r0
;;;971        exp_time_h = (level >> 8) & 0xFF;
;;;972        exp_time_l = level & 0xFF;
;;;973    
;;;974        kdp_camera_set_exp_time(cam_idx, exp_time_h, exp_time_l);
00001e  4620              MOV      r0,r4
000020  0a11              LSRS     r1,r2,#8              ;971
000022  e8bd4010          POP      {r4,lr}
000026  b2d2              UXTB     r2,r2                 ;972
000028  f7ffbffe          B.W      kdp_camera_set_exp_time
;;;975    }
;;;976    
                          ENDP

                  |L13.44|
00002c  53503235          DCB      "SP2509 camera index(0-1) >>",0
000030  30392063
000034  616d6572
000038  6120696e
00003c  64657828
000040  302d3129
000044  203e3e00
                  |L13.72|
000048  53503235          DCB      "SP2509 set exp time (%d-%d) >>",0
00004c  30392073
000050  65742065
000054  78702074
000058  696d6520
00005c  2825642d
000060  25642920
000064  3e3e00  
000067  00                DCB      0
                  |L13.104|
000068  00                DCB      0
000069  00                DCB      0
00006a  00                DCB      0
00006b  00                DCB      0

                          AREA ||i.sample_SP2509_gain||, CODE, READONLY, ALIGN=2

                  sample_SP2509_gain PROC
;;;950    
;;;951    void sample_SP2509_gain(void)
000000  b510              PUSH     {r4,lr}
;;;952    {
;;;953        u8 cam_idx, gain_h, gain_l;
;;;954        u16 level;
;;;955        cam_idx = _cmd_get_answer_int("SP2509 camera index(0-1) >>");
000002  a007              ADR      r0,|L14.32|
000004  f7fffffe          BL       _cmd_get_answer_int
000008  b2c4              UXTB     r4,r0
;;;956        level = _cmd_get_answer_int("SP2509 set gain (15-220) >>");
00000a  a00c              ADR      r0,|L14.60|
00000c  f7fffffe          BL       _cmd_get_answer_int
;;;957        gain_h = 0;//(level >> 8) & 0x0;
;;;958        gain_l = level & 0xFF;
000010  b2c2              UXTB     r2,r0
;;;959        
;;;960        kdp_camera_set_gain(cam_idx, gain_h, gain_l);
000012  4620              MOV      r0,r4
000014  e8bd4010          POP      {r4,lr}
000018  2100              MOVS     r1,#0                 ;957
00001a  f7ffbffe          B.W      kdp_camera_set_gain
;;;961    }
;;;962    
                          ENDP

00001e  0000              DCW      0x0000
                  |L14.32|
000020  53503235          DCB      "SP2509 camera index(0-1) >>",0
000024  30392063
000028  616d6572
00002c  6120696e
000030  64657828
000034  302d3129
000038  203e3e00
                  |L14.60|
00003c  53503235          DCB      "SP2509 set gain (15-220) >>",0
000040  30392073
000044  65742067
000048  61696e20
00004c  2831352d
000050  32323029
000054  203e3e00

                          AREA ||i.sample_app_console_quit||, CODE, READONLY, ALIGN=2

                  sample_app_console_quit PROC
;;;2555   
;;;2556   void sample_app_console_quit(void)
000000  a101              ADR      r1,|L15.8|
;;;2557   {
;;;2558       dbg_msg_console("bye bye !!");
000002  2001              MOVS     r0,#1
000004  f7ffbffe          B.W      kdp_level_printf
;;;2559   }
;;;2560   
                          ENDP

                  |L15.8|
000008  62796520          DCB      "bye bye !!\r\n",0
00000c  62796520
000010  21210d0a
000014  00      
000015  00                DCB      0
000016  00                DCB      0
000017  00                DCB      0

                          AREA ||i.sample_camera_close||, CODE, READONLY, ALIGN=2

                  sample_camera_close PROC
;;;711    
;;;712    void sample_camera_close(void)
000000  b510              PUSH     {r4,lr}
;;;713    {
;;;714        kl520_api_camera_close(_cmd_get_answer_int("close camera, index >>"));
000002  a003              ADR      r0,|L16.16|
000004  f7fffffe          BL       _cmd_get_answer_int
000008  e8bd4010          POP      {r4,lr}
00000c  f7ffbffe          B.W      kl520_api_camera_close
;;;715    }
;;;716    
                          ENDP

                  |L16.16|
000010  636c6f73          DCB      "close camera, index >>",0
000014  65206361
000018  6d657261
00001c  2c20696e
000020  64657820
000024  3e3e00  
000027  00                DCB      0

                          AREA ||i.sample_camera_open||, CODE, READONLY, ALIGN=2

                  sample_camera_open PROC
;;;690    
;;;691    void sample_camera_open(void)
000000  b510              PUSH     {r4,lr}
;;;692    {
;;;693        kl520_api_camera_open(_cmd_get_answer_int("open camera, index >>"));
000002  a003              ADR      r0,|L17.16|
000004  f7fffffe          BL       _cmd_get_answer_int
000008  e8bd4010          POP      {r4,lr}
00000c  f7ffbffe          B.W      kl520_api_camera_open
;;;694    }
;;;695    
                          ENDP

                  |L17.16|
000010  6f70656e          DCB      "open camera, index >>",0
000014  2063616d
000018  6572612c
00001c  20696e64
000020  6578203e
000024  3e00    
000026  00                DCB      0
000027  00                DCB      0

                          AREA ||i.sample_camera_start||, CODE, READONLY, ALIGN=2

                  sample_camera_start PROC
;;;695    
;;;696    void sample_camera_start(void)
000000  b510              PUSH     {r4,lr}
;;;697    {
000002  b08a              SUB      sp,sp,#0x28
;;;698        u8 cam_idx = _cmd_get_answer_int("start camera, index >>");
000004  a009              ADR      r0,|L18.44|
000006  f7fffffe          BL       _cmd_get_answer_int
00000a  b2c4              UXTB     r4,r0
;;;699    
;;;700        kdp_video_renderer_set_cam_idx(cam_idx);
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       kdp_video_renderer_set_cam_idx
;;;701        struct video_input_params params = kdp_video_renderer_setting(cam_idx);
000012  4621              MOV      r1,r4
000014  4668              MOV      r0,sp
000016  f7fffffe          BL       kdp_video_renderer_setting
;;;702        kdp_video_engineering_switch(&params);
00001a  4668              MOV      r0,sp
00001c  f7fffffe          BL       kdp_video_engineering_switch
;;;703    
;;;704        kl520_api_camera_start(cam_idx);
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       kl520_api_camera_start
;;;705    }
000026  b00a              ADD      sp,sp,#0x28
000028  bd10              POP      {r4,pc}
;;;706    
                          ENDP

00002a  0000              DCW      0x0000
                  |L18.44|
00002c  73746172          DCB      "start camera, index >>",0
000030  74206361
000034  6d657261
000038  2c20696e
00003c  64657820
000040  3e3e00  
000043  00                DCB      0

                          AREA ||i.sample_camera_stop||, CODE, READONLY, ALIGN=2

                  sample_camera_stop PROC
;;;706    
;;;707    void sample_camera_stop(void)
000000  b510              PUSH     {r4,lr}
;;;708    {
;;;709        kl520_api_camera_stop(_cmd_get_answer_int("stop camera, index >>"));
000002  a003              ADR      r0,|L19.16|
000004  f7fffffe          BL       _cmd_get_answer_int
000008  e8bd4010          POP      {r4,lr}
00000c  f7ffbffe          B.W      kl520_api_camera_stop
;;;710    }
;;;711    
                          ENDP

                  |L19.16|
000010  73746f70          DCB      "stop camera, index >>",0
000014  2063616d
000018  6572612c
00001c  20696e64
000020  6578203e
000024  3e00    
000026  00                DCB      0
000027  00                DCB      0

                          AREA ||i.sample_close_video_renderer||, CODE, READONLY, ALIGN=1

                  sample_close_video_renderer PROC
;;;156    
;;;157    void sample_close_video_renderer(void)
000000  2205              MOVS     r2,#5
;;;158    {
;;;159        kl520_api_cam_disp_ctrl(API_CTRL_DISP_CLOS, NULL, PERMANENT_DISABLE);
000002  2100              MOVS     r1,#0
000004  2080              MOVS     r0,#0x80
000006  f7ffbffe          B.W      kl520_api_cam_disp_ctrl
;;;160    }
;;;161    
                          ENDP


                          AREA ||i.sample_face_add||, CODE, READONLY, ALIGN=2

                  sample_face_add PROC
;;;1154   #endif
;;;1155   void sample_face_add(void)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1156   {
;;;1157       u16 height;
;;;1158       u16 face_add_mode;
;;;1159       u16 input;
;;;1160   
;;;1161       if (FACE_MODE_NONE != m_face_mode) {
000002  4822              LDR      r0,|L21.140|
000004  7800              LDRB     r0,[r0,#0]  ; m_face_mode
000006  b128              CBZ      r0,|L21.20|
;;;1162           dbg_msg_console("Err Face Mode");
000008  e8bd40f8          POP      {r3-r7,lr}
00000c  a120              ADR      r1,|L21.144|
00000e  2001              MOVS     r0,#1
000010  f7ffbffe          B.W      kdp_level_printf
                  |L21.20|
;;;1163           return;
;;;1164       }
;;;1165       sample_input_userinfo();
000014  f7fffffe          BL       sample_input_userinfo
;;;1166   
;;;1167   #ifdef QUICK_CONSOLE_GUIDELINE
;;;1168       height = DISPLAY_HEIGHT;
;;;1169       face_add_mode = 5;
;;;1170   #else
;;;1171       input = (u16)_cmd_get_answer_int("set the height of display(0~DISPLAY_HEIGHT): ");
000018  a021              ADR      r0,|L21.160|
00001a  f7fffffe          BL       _cmd_get_answer_int
00001e  0405              LSLS     r5,r0,#16
000020  0c2d              LSRS     r5,r5,#16
;;;1172       height = (input == 0)?DISPLAY_HEIGHT:input;
000022  d100              BNE      |L21.38|
000024  25f0              MOVS     r5,#0xf0
                  |L21.38|
;;;1173   #if MAX_FID == 1
;;;1174       input = 1;
;;;1175   #else
;;;1176       input = (u16)_cmd_get_answer_int("set face_add mode: [1: 1 face mode, 5: 5 faces mode] >>");
000026  a02a              ADR      r0,|L21.208|
000028  f7fffffe          BL       _cmd_get_answer_int
00002c  0406              LSLS     r6,r0,#16
00002e  0c36              LSRS     r6,r6,#16
;;;1177   #endif
;;;1178       face_add_mode = (input == 0)?5:input;
000030  d100              BNE      |L21.52|
000032  2605              MOVS     r6,#5
                  |L21.52|
;;;1179       input = (u16)_cmd_get_answer_int("set multiple id mode:[1: multi id, 0: single id] >>");
000034  a034              ADR      r0,|L21.264|
000036  f7fffffe          BL       _cmd_get_answer_int
;;;1180       set_enroll_overwrite_flag(input);
00003a  b2c0              UXTB     r0,r0
00003c  f7fffffe          BL       set_enroll_overwrite_flag
;;;1181   
;;;1182   #if (LED_OPEN_MEASUREMENT == YES)
;;;1183       u32 tick_start = osKernelGetTickCount();
;;;1184       tick_led_open = 0;
;;;1185   #endif
;;;1186       sample_force_abort_enable();
;;;1187   
;;;1188   #endif
;;;1189       kl520_face_add_type add_type = FACE_ADD_TYPE_NORMAL;
000040  2400              MOVS     r4,#0
;;;1190       if (1 == face_add_mode) {
;;;1191   //        kl520_api_face_add_set_timeout(5);
;;;1192           kl520_api_face_set_add_mode(FACE_ADD_MODE_1_FACE);
;;;1193   
;;;1194           if(kl520_api_face_add_internal(0, 0, DISPLAY_WIDTH, height, add_type) != KL520_FACE_OK)
000042  f44f77a0          MOV      r7,#0x140
000046  2e01              CMP      r6,#1                 ;1190
000048  d015              BEQ      |L21.118|
;;;1195           {
;;;1196               dbg_msg_algo ("add 1-face failed.");
;;;1197           }
;;;1198       }
;;;1199       else if (5 == face_add_mode) {
00004a  2e05              CMP      r6,#5
00004c  d112              BNE      |L21.116|
;;;1200           kl520_api_dp_five_face_enable();
00004e  f7fffffe          BL       kl520_api_dp_five_face_enable
;;;1201   //        kl520_api_face_add_set_timeout(10);
;;;1202           kl520_api_face_set_add_mode(FACE_ADD_MODE_5_FACES);
000052  2002              MOVS     r0,#2
000054  f7fffffe          BL       kl520_api_face_set_add_mode
000058  b22d              SXTH     r5,r5                 ;1194
                  |L21.90|
;;;1203   
;;;1204           for (add_type = FACE_ADD_TYPE_NORMAL; add_type <= FACE_ADD_TYPE_DOWN; add_type++) 
;;;1205           {
;;;1206               if(kl520_api_face_add_internal(0, 0, DISPLAY_WIDTH, height, add_type) != KL520_FACE_OK)
00005a  2100              MOVS     r1,#0
00005c  462b              MOV      r3,r5
00005e  463a              MOV      r2,r7
000060  4608              MOV      r0,r1
000062  9400              STR      r4,[sp,#0]
000064  f7fffffe          BL       kl520_api_face_add_internal
000068  2800              CMP      r0,#0
00006a  d103              BNE      |L21.116|
00006c  1c64              ADDS     r4,r4,#1
00006e  b2e4              UXTB     r4,r4                 ;1204
000070  2c04              CMP      r4,#4                 ;1204
000072  d9f2              BLS      |L21.90|
                  |L21.116|
;;;1207               {
;;;1208                   dbg_msg_algo ("add 5-face failed:%d.", add_type);
;;;1209                   break;
;;;1210               }
;;;1211           }
;;;1212       }
;;;1213       if(tid_abort_thread != 0)
;;;1214           sample_force_abort_disable();
;;;1215   
;;;1216       //sample_face_close(); or manually input item 38!
;;;1217   #if (LED_OPEN_MEASUREMENT == YES)
;;;1218       u32 tick_end = osKernelGetTickCount();
;;;1219       dbg_msg_algo ("face add time:%d, led open time:%d.", tick_end - tick_start, tick_led_open);
;;;1220   #endif
;;;1221   }
000074  bdf8              POP      {r3-r7,pc}
                  |L21.118|
000076  2001              MOVS     r0,#1                 ;1192
000078  f7fffffe          BL       kl520_api_face_set_add_mode
00007c  2100              MOVS     r1,#0                 ;1194
00007e  b22b              SXTH     r3,r5                 ;1194
000080  463a              MOV      r2,r7                 ;1194
000082  4608              MOV      r0,r1                 ;1194
000084  9400              STR      r4,[sp,#0]            ;1194
000086  f7fffffe          BL       kl520_api_face_add_internal
00008a  bdf8              POP      {r3-r7,pc}
;;;1222   
                          ENDP

                  |L21.140|
                          DCD      m_face_mode
                  |L21.144|
000090  45727220          DCB      "Err Face Mode\r\n",0
000094  46616365
000098  204d6f64
00009c  650d0a00
                  |L21.160|
0000a0  73657420          DCB      "set the height of display(0~DISPLAY_HEIGHT): ",0
0000a4  74686520
0000a8  68656967
0000ac  6874206f
0000b0  66206469
0000b4  73706c61
0000b8  7928307e
0000bc  44495350
0000c0  4c41595f
0000c4  48454947
0000c8  4854293a
0000cc  2000    
0000ce  00                DCB      0
0000cf  00                DCB      0
                  |L21.208|
0000d0  73657420          DCB      "set face_add mode: [1: 1 face mode, 5: 5 faces mode] >>"
0000d4  66616365
0000d8  5f616464
0000dc  206d6f64
0000e0  653a205b
0000e4  313a2031
0000e8  20666163
0000ec  65206d6f
0000f0  64652c20
0000f4  353a2035
0000f8  20666163
0000fc  6573206d
000100  6f64655d
000104  203e3e  
000107  00                DCB      0
                  |L21.264|
000108  73657420          DCB      "set multiple id mode:[1: multi id, 0: single id] >>",0
00010c  6d756c74
000110  69706c65
000114  20696420
000118  6d6f6465
00011c  3a5b313a
000120  206d756c
000124  74692069
000128  642c2030
00012c  3a207369
000130  6e676c65
000134  2069645d
000138  203e3e00

                          AREA ||i.sample_face_add_set_timeout||, CODE, READONLY, ALIGN=2

                  sample_face_add_set_timeout PROC
;;;1110   
;;;1111   void sample_face_add_set_timeout(void)
000000  b510              PUSH     {r4,lr}
;;;1112   {
;;;1113       kl520_api_face_add_set_timeout(_cmd_get_answer_int("set timeout, index >>"));
000002  a003              ADR      r0,|L22.16|
000004  f7fffffe          BL       _cmd_get_answer_int
000008  e8bd4010          POP      {r4,lr}
00000c  f7ffbffe          B.W      kl520_api_face_add_set_timeout
;;;1114   }
;;;1115   
                          ENDP

                  |L22.16|
000010  73657420          DCB      "set timeout, index >>",0
000014  74696d65
000018  6f75742c
00001c  20696e64
000020  6578203e
000024  3e00    
000026  00                DCB      0
000027  00                DCB      0

                          AREA ||i.sample_face_close||, CODE, READONLY, ALIGN=1

                  sample_face_close PROC
;;;1404   
;;;1405   void sample_face_close(void)
000000  b510              PUSH     {r4,lr}
;;;1406   {
;;;1407       kl520_measure_stamp(E_MEASURE_FACE_CLOSE_STR);
;;;1408       kl520_api_face_close();
000002  f7fffffe          BL       kl520_api_face_close
;;;1409       kl520_measure_stamp(E_MEASURE_FACE_CLOSE_END);
;;;1410   
;;;1411   #if CFG_FMAP_EXTRA_ENABLE == YES
;;;1412       kl520_api_extra_fmap_close();
;;;1413   #endif
;;;1414   
;;;1415       kl520_api_sim_set_rst();
000006  e8bd4010          POP      {r4,lr}
00000a  f7ffbffe          B.W      kl520_api_sim_set_rst
;;;1416   }
;;;1417   
                          ENDP


                          AREA ||i.sample_face_del_all||, CODE, READONLY, ALIGN=2

                  sample_face_del_all PROC
;;;1422   
;;;1423   void sample_face_del_all(void)
000000  b500              PUSH     {lr}
;;;1424   {
000002  b0c1              SUB      sp,sp,#0x104
;;;1425       char buf[256];
;;;1426   
;;;1427       dbg_msg_nocrlf("input password to delete: ");
000004  a00b              ADR      r0,|L24.52|
000006  f7fffffe          BL       kdp_printf_nocrlf
;;;1428       kdp_gets(DEBUG_CONSOLE, buf);
00000a  4669              MOV      r1,sp
00000c  2000              MOVS     r0,#0
00000e  f7fffffe          BL       kdp_gets
;;;1429       dbg_msg_nocrlf("");
000012  a00f              ADR      r0,|L24.80|
000014  f7fffffe          BL       kdp_printf_nocrlf
;;;1430   
;;;1431       if(strcmp(buf, "kneron")) return;
000018  a10e              ADR      r1,|L24.84|
00001a  4668              MOV      r0,sp
00001c  f7fffffe          BL       strcmp
000020  2800              CMP      r0,#0
000022  d105              BNE      |L24.48|
;;;1432   
;;;1433       kl520_api_face_del(1, (u8)0);
000024  2100              MOVS     r1,#0
000026  2001              MOVS     r0,#1
000028  f7fffffe          BL       kl520_api_face_del
;;;1434       
;;;1435   #ifdef CUSTOMIZE_DB_OFFSET
;;;1436       reset_user_db_offset();
00002c  f7fffffe          BL       reset_user_db_offset
                  |L24.48|
;;;1437   #endif
;;;1438   }
000030  b041              ADD      sp,sp,#0x104
000032  bd00              POP      {pc}
;;;1439   
                          ENDP

                  |L24.52|
000034  696e7075          DCB      "input password to delete: ",0
000038  74207061
00003c  7373776f
000040  72642074
000044  6f206465
000048  6c657465
00004c  3a2000  
00004f  00                DCB      0
                  |L24.80|
000050  00                DCB      0
000051  00                DCB      0
000052  00                DCB      0
000053  00                DCB      0
                  |L24.84|
000054  6b6e6572          DCB      "kneron",0
000058  6f6e00  
00005b  00                DCB      0

                          AREA ||i.sample_face_del_user||, CODE, READONLY, ALIGN=2

                  sample_face_del_user PROC
;;;1439   
;;;1440   void sample_face_del_user(void)
000000  b510              PUSH     {r4,lr}
;;;1441   {
;;;1442       kl520_api_face_del(2, _cmd_get_answer_int("set the user id to delete: "));
000002  a004              ADR      r0,|L25.20|
000004  f7fffffe          BL       _cmd_get_answer_int
000008  b2c1              UXTB     r1,r0
00000a  e8bd4010          POP      {r4,lr}
00000e  2002              MOVS     r0,#2
000010  f7ffbffe          B.W      kl520_api_face_del
;;;1443   }
;;;1444   
                          ENDP

                  |L25.20|
000014  73657420          DCB      "set the user id to delete: ",0
000018  74686520
00001c  75736572
000020  20696420
000024  746f2064
000028  656c6574
00002c  653a2000

                          AREA ||i.sample_face_integrate||, CODE, READONLY, ALIGN=2

                  sample_face_integrate PROC
;;;2089   
;;;2090   void sample_face_integrate(void)
000000  a102              ADR      r1,|L26.12|
;;;2091   {
;;;2092       for(;;)
;;;2093       {
;;;2094           dbg_msg_console("==================add===============");
000002  2001              MOVS     r0,#1
000004  f7fffffe          BL       kdp_level_printf
;;;2095           sample_stability_add_user();
000008  f7fffffe          BL       sample_stability_add_user
;;;2096           //sample_face_add();
;;;2097           //sample_face_close();
;;;2098           dbg_msg_console("==================rec===============");
;;;2099           sample_stability_recognition();
;;;2100           //sample_face_close();
;;;2101           sample_face_query_all();
;;;2102       }
;;;2103   }
;;;2104   
                          ENDP

                  |L26.12|
00000c  3d3d3d3d          DCB      "==================add===============\r\n",0
000010  3d3d3d3d
000014  3d3d3d3d
000018  3d3d3d3d
00001c  3d3d6164
000020  643d3d3d
000024  3d3d3d3d
000028  3d3d3d3d
00002c  3d3d3d3d
000030  0d0a00  
000033  00                DCB      0

                          AREA ||i.sample_face_liveness||, CODE, READONLY, ALIGN=2

                  sample_face_liveness PROC
;;;1310   
;;;1311   void sample_face_liveness(void)
000000  b510              PUSH     {r4,lr}
;;;1312   {
000002  b0a0              SUB      sp,sp,#0x80
;;;1313       int ret;
;;;1314       u8 face_id = 0;
000004  2000              MOVS     r0,#0
000006  f88d007c          STRB     r0,[sp,#0x7c]
;;;1315       u32 events = 0;
00000a  4604              MOV      r4,r0
;;;1316       u16 input = 0;
;;;1317       system_info t_sys_info = { 0 };
00000c  217c              MOVS     r1,#0x7c
00000e  4668              MOV      r0,sp
000010  f7fffffe          BL       __aeabi_memclr4
;;;1318   
;;;1319       //kl520_api_face_liveness_set_timeout(60);
;;;1320       input = (u16)_cmd_get_answer_int("set the height of display(0~DISPLAY_HEIGHT): ");
000014  a022              ADR      r0,|L27.160|
000016  f7fffffe          BL       _cmd_get_answer_int
00001a  0400              LSLS     r0,r0,#16
00001c  0c00              LSRS     r0,r0,#16
;;;1321   
;;;1322       int face_ret = kl520_api_face_liveness(0, 0, DISPLAY_WIDTH, (input == 0)?DISPLAY_HEIGHT:input);
00001e  d100              BNE      |L27.34|
000020  20f0              MOVS     r0,#0xf0
                  |L27.34|
000022  b203              SXTH     r3,r0
000024  2100              MOVS     r1,#0
000026  f44f72a0          MOV      r2,#0x140
00002a  4608              MOV      r0,r1
00002c  f7fffffe          BL       kl520_api_face_liveness
000030  1c40              ADDS     r0,r0,#1
;;;1323   
;;;1324       do {
;;;1325           if(face_ret != -1) {
000032  d006              BEQ      |L27.66|
;;;1326               events = wait_event(kl520_api_get_event(), KL520_APP_FLAG_FDFR | KL520_DEVICE_FLAG_ERR);
000034  f7fffffe          BL       kl520_api_get_event
000038  f2401107          MOV      r1,#0x107
00003c  f7fffffe          BL       wait_event
000040  4604              MOV      r4,r0
                  |L27.66|
;;;1327           }
;;;1328           dbg_msg_console("[%s] events=%x", __func__, events);
000042  4623              MOV      r3,r4
000044  4a22              LDR      r2,|L27.208|
000046  a123              ADR      r1,|L27.212|
000048  2001              MOVS     r0,#1
00004a  f7fffffe          BL       kdp_level_printf
;;;1329           if(events == KL520_DEVICE_FLAG_ERR)
00004e  f5b47f80          CMP      r4,#0x100
000052  d012              BEQ      |L27.122|
;;;1330           {
;;;1331               ret = kl520_api_get_device_info(&t_sys_info);
;;;1332               dbg_msg_err("[%s], DEVICE ERROR, ret=0x%x", __func__, ret);
;;;1333               kl520_api_free_device_info(&t_sys_info);
;;;1334           }
;;;1335           else
;;;1336           {
;;;1337               ret = kl520_api_face_get_result(&face_id);
000054  a81f              ADD      r0,sp,#0x7c
000056  f7fffffe          BL       kl520_api_face_get_result
00005a  4604              MOV      r4,r0
;;;1338               dbg_msg_console("[%s] ret=%x", __func__, ret);
00005c  4603              MOV      r3,r0
00005e  4a1c              LDR      r2,|L27.208|
000060  a121              ADR      r1,|L27.232|
000062  2001              MOVS     r0,#1
000064  f7fffffe          BL       kdp_level_printf
;;;1339               if (KL520_FACE_OK == ret)
000068  b1a4              CBZ      r4,|L27.148|
;;;1340               {
;;;1341                   dbg_msg_console("[%s], KL520_FACE_OK", __func__);
;;;1342               }
;;;1343               else {
;;;1344                   dbg_msg_console("[%s], ERROR, ret=0x%x", __func__, ret);
00006a  4623              MOV      r3,r4
00006c  4a18              LDR      r2,|L27.208|
00006e  a122              ADR      r1,|L27.248|
000070  2001              MOVS     r0,#1
000072  f7fffffe          BL       kdp_level_printf
                  |L27.118|
;;;1345               }
;;;1346           }
;;;1347           break;
;;;1348       }while (0);
;;;1349   
;;;1350       //sample_face_close(); //or manually input item 38!
;;;1351   }
000076  b020              ADD      sp,sp,#0x80
000078  bd10              POP      {r4,pc}
                  |L27.122|
00007a  4668              MOV      r0,sp                 ;1331
00007c  f7fffffe          BL       kl520_api_get_device_info
000080  4603              MOV      r3,r0                 ;1331
000082  4a13              LDR      r2,|L27.208|
000084  a122              ADR      r1,|L27.272|
000086  2002              MOVS     r0,#2                 ;1332
000088  f7fffffe          BL       kdp_level_printf
00008c  4668              MOV      r0,sp                 ;1333
00008e  f7fffffe          BL       kl520_api_free_device_info
000092  e7f0              B        |L27.118|
                  |L27.148|
000094  4a0e              LDR      r2,|L27.208|
000096  a126              ADR      r1,|L27.304|
000098  2001              MOVS     r0,#1                 ;1341
00009a  f7fffffe          BL       kdp_level_printf
00009e  e7ea              B        |L27.118|
;;;1352   
                          ENDP

                  |L27.160|
0000a0  73657420          DCB      "set the height of display(0~DISPLAY_HEIGHT): ",0
0000a4  74686520
0000a8  68656967
0000ac  6874206f
0000b0  66206469
0000b4  73706c61
0000b8  7928307e
0000bc  44495350
0000c0  4c41595f
0000c4  48454947
0000c8  4854293a
0000cc  2000    
0000ce  00                DCB      0
0000cf  00                DCB      0
                  |L27.208|
                          DCD      ||.constdata||+0x40
                  |L27.212|
0000d4  5b25735d          DCB      "[%s] events=%x\r\n",0
0000d8  20657665
0000dc  6e74733d
0000e0  25780d0a
0000e4  00      
0000e5  00                DCB      0
0000e6  00                DCB      0
0000e7  00                DCB      0
                  |L27.232|
0000e8  5b25735d          DCB      "[%s] ret=%x\r\n",0
0000ec  20726574
0000f0  3d25780d
0000f4  0a00    
0000f6  00                DCB      0
0000f7  00                DCB      0
                  |L27.248|
0000f8  5b25735d          DCB      "[%s], ERROR, ret=0x%x\r\n",0
0000fc  2c204552
000100  524f522c
000104  20726574
000108  3d307825
00010c  780d0a00
                  |L27.272|
000110  5b25735d          DCB      "[%s], DEVICE ERROR, ret=0x%x\r\n",0
000114  2c204445
000118  56494345
00011c  20455252
000120  4f522c20
000124  7265743d
000128  30782578
00012c  0d0a00  
00012f  00                DCB      0
                  |L27.304|
000130  5b25735d          DCB      "[%s], KL520_FACE_OK\r\n",0
000134  2c204b4c
000138  3532305f
00013c  46414345
000140  5f4f4b0d
000144  0a00    
000146  00                DCB      0
000147  00                DCB      0

                          AREA ||i.sample_face_query_all||, CODE, READONLY, ALIGN=2

                  sample_face_query_all PROC
;;;1483   
;;;1484   void sample_face_query_all(void)
000000  b5f0              PUSH     {r4-r7,lr}
;;;1485   {
000002  b0bb              SUB      sp,sp,#0xec
;;;1486       int i = 0;
000004  2400              MOVS     r4,#0
;;;1487       kdp_e2e_db_extra_data tmp;
;;;1488       kdp_e2e_db_extra_data *pvars = &tmp;
000006  ad0a              ADD      r5,sp,#0x28
;;;1489   
;;;1490       u16 valid_fm0 = 0, valid_fm1 = 0, type = 0;
000008  f8ad4020          STRH     r4,[sp,#0x20]
00000c  f8ad4024          STRH     r4,[sp,#0x24]
000010  f8ad40dc          STRH     r4,[sp,#0xdc]
;;;1491       bool tittle = true;
000014  2601              MOVS     r6,#1
;;;1492   
;;;1493       u8 total_id_num;
;;;1494       u8 face_status[MAX_USER];
;;;1495       
;;;1496       kl520_api_face_query_all(&total_id_num, &face_status[0]);
000016  a91d              ADD      r1,sp,#0x74
000018  a839              ADD      r0,sp,#0xe4
00001a  f7fffffe          BL       kl520_api_face_query_all
                  |L28.30|
;;;1497   
;;;1498       for (i = 0; i < MAX_USER; i++)
;;;1499       {
;;;1500           s32 ret = kdp_e2e_db_get_user_info_by_idx(i, &valid_fm0, &valid_fm1, &type);
00001e  b2a0              UXTH     r0,r4
000020  ab37              ADD      r3,sp,#0xdc
000022  aa09              ADD      r2,sp,#0x24
000024  a908              ADD      r1,sp,#0x20
000026  f7fffffe          BL       kdp_e2e_db_get_user_info_by_idx
;;;1501           if(ret != E2E_OK) continue;
00002a  bb78              CBNZ     r0,|L28.140|
;;;1502           
;;;1503           if(0 < valid_fm0 && TYPE_VALID == type)
00002c  f8bd0020          LDRH     r0,[sp,#0x20]
000030  b360              CBZ      r0,|L28.140|
000032  f8bd00dc          LDRH     r0,[sp,#0xdc]
000036  2801              CMP      r0,#1
000038  d128              BNE      |L28.140|
;;;1504           {
;;;1505               memset(&tmp, 0, sizeof(tmp));
00003a  214c              MOVS     r1,#0x4c
00003c  a80a              ADD      r0,sp,#0x28
00003e  f7fffffe          BL       __aeabi_memclr4
;;;1506               kdp_e2e_db_extra_read(i, &tmp, sizeof(tmp));
000042  b2e0              UXTB     r0,r4
000044  224c              MOVS     r2,#0x4c
000046  a90a              ADD      r1,sp,#0x28
000048  f7fffffe          BL       kdp_e2e_db_extra_read
;;;1507               
;;;1508               u8 uid = _kl520_app_calc_db_uid(i);
00004c  b2e0              UXTB     r0,r4
00004e  f7fffffe          BL       _kl520_app_calc_db_uid
000052  4607              MOV      r7,r0
;;;1509   
;;;1510               if(tittle == true){
000054  b126              CBZ      r6,|L28.96|
;;;1511                   dbg_msg_console("[  i][  id][pre_add][Adm][                            Name][mode][fm0][fm1]");
000056  4913              LDR      r1,|L28.164|
000058  2001              MOVS     r0,#1
00005a  f7fffffe          BL       kdp_level_printf
;;;1512                   tittle = false;
00005e  2600              MOVS     r6,#0
                  |L28.96|
;;;1513               }
;;;1514               dbg_msg_console("[%3d][%4d][%5d  ][%3d][%32s][%4d][%3d][%3d]",
000060  f8950025          LDRB     r0,[r5,#0x25]
000064  f8bd1024          LDRH     r1,[sp,#0x24]
000068  f8bd2020          LDRH     r2,[sp,#0x20]
00006c  9502              STR      r5,[sp,#8]
00006e  9105              STR      r1,[sp,#0x14]
000070  e9cd0203          STRD     r0,r2,[sp,#0xc]
000074  f8951021          LDRB     r1,[r5,#0x21]
000078  f8950020          LDRB     r0,[r5,#0x20]
00007c  e9cd0100          STRD     r0,r1,[sp,#0]
000080  463b              MOV      r3,r7
000082  4622              MOV      r2,r4
000084  a108              ADR      r1,|L28.168|
000086  2001              MOVS     r0,#1
000088  f7fffffe          BL       kdp_level_printf
                  |L28.140|
00008c  1c64              ADDS     r4,r4,#1
00008e  2c64              CMP      r4,#0x64              ;1498
000090  dbc5              BLT      |L28.30|
;;;1515                               i, uid, pvars->pre_add,
;;;1516                               pvars->admin, pvars->user_name,
;;;1517                               pvars->nir_mode, valid_fm0, valid_fm1);
;;;1518           }
;;;1519   
;;;1520       }
;;;1521       dbg_msg_console("Num Face DB:%d", total_id_num);
000092  f89d20e4          LDRB     r2,[sp,#0xe4]
000096  a110              ADR      r1,|L28.216|
000098  2001              MOVS     r0,#1
00009a  f7fffffe          BL       kdp_level_printf
;;;1522   }
00009e  b03b              ADD      sp,sp,#0xec
0000a0  bdf0              POP      {r4-r7,pc}
;;;1523   
                          ENDP

0000a2  0000              DCW      0x0000
                  |L28.164|
                          DCD      ||.conststring||+0x2dc
                  |L28.168|
0000a8  5b253364          DCB      "[%3d][%4d][%5d  ][%3d][%32s][%4d][%3d][%3d]\r\n",0
0000ac  5d5b2534
0000b0  645d5b25
0000b4  35642020
0000b8  5d5b2533
0000bc  645d5b25
0000c0  3332735d
0000c4  5b253464
0000c8  5d5b2533
0000cc  645d5b25
0000d0  33645d0d
0000d4  0a00    
0000d6  00                DCB      0
0000d7  00                DCB      0
                  |L28.216|
0000d8  4e756d20          DCB      "Num Face DB:%d\r\n",0
0000dc  46616365
0000e0  2044423a
0000e4  25640d0a
0000e8  00      
0000e9  00                DCB      0
0000ea  00                DCB      0
0000eb  00                DCB      0

                          AREA ||i.sample_face_query_user||, CODE, READONLY, ALIGN=2

                  sample_face_query_user PROC
;;;1523   
;;;1524   void sample_face_query_user(void)
000000  b510              PUSH     {r4,lr}
;;;1525   {
;;;1526       int ret = 0;
;;;1527       u16 user_id = _cmd_get_answer_int("set the user id to query: ");
000002  a009              ADR      r0,|L29.40|
000004  f7fffffe          BL       _cmd_get_answer_int
;;;1528       ret = kl520_api_face_query(user_id);
000008  b2c0              UXTB     r0,r0
00000a  f7fffffe          BL       kl520_api_face_query
;;;1529       if (KL520_FACE_EXIST == ret) {
00000e  2807              CMP      r0,#7
000010  d007              BEQ      |L29.34|
;;;1530           dbg_msg_console("user id[%u] is existed");
;;;1531       }
;;;1532       else if (KL520_FACE_EMPTY == ret) {
000012  2808              CMP      r0,#8
000014  d107              BNE      |L29.38|
;;;1533           dbg_msg_console("user id[%u] is empty");
000016  a10b              ADR      r1,|L29.68|
                  |L29.24|
000018  e8bd4010          POP      {r4,lr}
00001c  2001              MOVS     r0,#1
00001e  f7ffbffe          B.W      kdp_level_printf
                  |L29.34|
000022  a10e              ADR      r1,|L29.92|
000024  e7f8              B        |L29.24|
                  |L29.38|
;;;1534       }
;;;1535   }
000026  bd10              POP      {r4,pc}
;;;1536   
                          ENDP

                  |L29.40|
000028  73657420          DCB      "set the user id to query: ",0
00002c  74686520
000030  75736572
000034  20696420
000038  746f2071
00003c  75657279
000040  3a2000  
000043  00                DCB      0
                  |L29.68|
000044  75736572          DCB      "user id[%u] is empty\r\n",0
000048  2069645b
00004c  25755d20
000050  69732065
000054  6d707479
000058  0d0a00  
00005b  00                DCB      0
                  |L29.92|
00005c  75736572          DCB      "user id[%u] is existed\r\n",0
000060  2069645b
000064  25755d20
000068  69732065
00006c  78697374
000070  65640d0a
000074  00      
000075  00                DCB      0
000076  00                DCB      0
000077  00                DCB      0

                          AREA ||i.sample_face_recognition||, CODE, READONLY, ALIGN=2

                  sample_face_recognition PROC
;;;1222   
;;;1223   void sample_face_recognition(void)
000000  b5f0              PUSH     {r4-r7,lr}
;;;1224   {
000002  b0a1              SUB      sp,sp,#0x84
;;;1225       int ret = KL520_APP_FLAG_FDFR_ERR;
;;;1226       u8 face_id = 0;
000004  2000              MOVS     r0,#0
000006  f88d0080          STRB     r0,[sp,#0x80]
;;;1227       u32 events = 0;
00000a  4604              MOV      r4,r0
;;;1228       u16 input = 0;
;;;1229       system_info t_sys_info = { 0 };
00000c  217c              MOVS     r1,#0x7c
00000e  a801              ADD      r0,sp,#4
000010  f7fffffe          BL       __aeabi_memclr4
;;;1230   
;;;1231       //kl520_api_face_recognition_set_timeout(10);
;;;1232   
;;;1233   #if (MEASURE_RECOGNITION == YES)
;;;1234       input = 0;
;;;1235   #else
;;;1236       input = (u16)_cmd_get_answer_int("set the height of display(0~DISPLAY_HEIGHT): ");
000014  a02d              ADR      r0,|L30.204|
000016  f7fffffe          BL       _cmd_get_answer_int
00001a  0400              LSLS     r0,r0,#16
00001c  0c00              LSRS     r0,r0,#16
;;;1237   #endif
;;;1238   
;;;1239   #if (LED_OPEN_MEASUREMENT == YES)
;;;1240       u32 tick_start = osKernelGetTickCount();
;;;1241       dbg_msg_algo("face recog start...");
;;;1242       tick_led_open = 0;
;;;1243   #endif
;;;1244   
;;;1245       sample_force_abort_enable();
;;;1246   
;;;1247       int face_ret = kl520_api_face_recognition(0, 0, DISPLAY_WIDTH, (input == 0)?DISPLAY_HEIGHT:input);
00001e  d100              BNE      |L30.34|
000020  20f0              MOVS     r0,#0xf0
                  |L30.34|
000022  b203              SXTH     r3,r0
000024  2100              MOVS     r1,#0
000026  f44f72a0          MOV      r2,#0x140
00002a  4608              MOV      r0,r1
00002c  f7fffffe          BL       kl520_api_face_recognition
;;;1248   
;;;1249       kl520_measure_stamp(E_MEASURE_API_RUN_STAT_CHK);
;;;1250       do {
;;;1251           if(face_ret != -1) {
;;;1252               events = wait_event(kl520_api_get_event(), KL520_APP_FLAG_FDFR | KL520_DEVICE_FLAG_ERR);
000030  f2401607          MOV      r6,#0x107
000034  4605              MOV      r5,r0                 ;1247
;;;1253           }
;;;1254           //dbg_msg_console("sample_face_recognition events=%x", events);
;;;1255           if(events == KL520_DEVICE_FLAG_ERR)
000036  1ff7              SUBS     r7,r6,#7
                  |L30.56|
000038  1c68              ADDS     r0,r5,#1              ;1251
00003a  d005              BEQ      |L30.72|
00003c  f7fffffe          BL       kl520_api_get_event
000040  4631              MOV      r1,r6                 ;1252
000042  f7fffffe          BL       wait_event
000046  4604              MOV      r4,r0                 ;1252
                  |L30.72|
000048  42bc              CMP      r4,r7
00004a  d10d              BNE      |L30.104|
;;;1256           {
;;;1257               ret = kl520_api_get_device_info(&t_sys_info);
00004c  a801              ADD      r0,sp,#4
00004e  f7fffffe          BL       kl520_api_get_device_info
000052  4603              MOV      r3,r0
;;;1258               dbg_msg_err("[%s], DEVICE ERROR, ret=0x%x", __func__, ret);
000054  4a29              LDR      r2,|L30.252|
000056  a12a              ADR      r1,|L30.256|
000058  2002              MOVS     r0,#2
00005a  f7fffffe          BL       kdp_level_printf
;;;1259               kl520_api_free_device_info(&t_sys_info);
00005e  a801              ADD      r0,sp,#4
000060  f7fffffe          BL       kl520_api_free_device_info
                  |L30.100|
;;;1260               break;
;;;1261           }
;;;1262           else
;;;1263           {
;;;1264               ret = kl520_api_face_get_result(&face_id);
;;;1265               if (KL520_FACE_OK == ret)
;;;1266               {
;;;1267                   kdp_e2e_face_variables *vars_cur = kdp_e2e_get_face_variables();
;;;1268       #ifdef DB_DRAWING_CUSTOMER_COLOR
;;;1269                   kl520_api_face_notify(KL520_FACE_DB_OK);
;;;1270       #endif
;;;1271                   kl520_measure_stamp(E_MEASURE_FACE_FACE_OK);
;;;1272                   dbg_msg_console("sample_face_recognition, KL520_FACE_OK, face_id=0x%x, Admin=%d  UseName=%s", face_id, vars_cur->admin, vars_cur->user_name);
;;;1273                   break;
;;;1274               }
;;;1275               else if (KL520_FACE_DB_FAIL == ret) {
;;;1276       #ifdef DB_DRAWING_CUSTOMER_COLOR
;;;1277                   kl520_api_face_notify(KL520_FACE_DB_FAIL);
;;;1278       #endif
;;;1279                   kl520_measure_stamp(E_MEASURE_FACE_DB_FAIL);
;;;1280                   dbg_msg_console("sample_face_recognition, KL520_FACE_DB_FAIL, face_id=0x%x", face_id);
;;;1281                   break;
;;;1282               }
;;;1283               else if (ret >= KL520_FACE_TOO_FAR && ret <= KL520_FACE_LOW_QUALITY )
;;;1284               {
;;;1285                   dbg_msg_console("KL520_FACE NOTE, ret=0x%x", ret);
;;;1286               }
;;;1287               else {
;;;1288                   dbg_msg_console("sample_face_recognition, ERROR, ret=0x%x", ret);
;;;1289                   break;
;;;1290               }
;;;1291           }
;;;1292   		osDelay(1);
;;;1293   
;;;1294       }while (1);
;;;1295   
;;;1296       if(tid_abort_thread != 0)
;;;1297           sample_force_abort_disable();
;;;1298   
;;;1299   #ifdef DEV_TEST_VERSION
;;;1300       dbg_msg_algo ("===FACE RECOG STAT: total:%d, suc:%d.", _face_recog_count, _face_succ_count);
;;;1301   #endif
;;;1302       
;;;1303       kl520_measure_stamp(E_MEASURE_FACE_REC_END);
;;;1304       //sample_face_close(); or manually input item 38!
;;;1305   #if (LED_OPEN_MEASUREMENT == YES)
;;;1306       u32 tick_end = osKernelGetTickCount();
;;;1307       dbg_msg_console ("face recog time:%d. led open:%d.", tick_end - tick_start, tick_led_open);
;;;1308   #endif
;;;1309   }
000064  b021              ADD      sp,sp,#0x84
000066  bdf0              POP      {r4-r7,pc}
                  |L30.104|
000068  a820              ADD      r0,sp,#0x80           ;1264
00006a  f7fffffe          BL       kl520_api_face_get_result
00006e  0002              MOVS     r2,r0                 ;1264
000070  d00d              BEQ      |L30.142|
000072  2a03              CMP      r2,#3                 ;1275
000074  d01d              BEQ      |L30.178|
000076  f1a2000c          SUB      r0,r2,#0xc            ;1283
00007a  280d              CMP      r0,#0xd               ;1283
00007c  d820              BHI      |L30.192|
00007e  a128              ADR      r1,|L30.288|
000080  2001              MOVS     r0,#1                 ;1285
000082  f7fffffe          BL       kdp_level_printf
000086  2001              MOVS     r0,#1                 ;1292
000088  f7fffffe          BL       osDelay
00008c  e7d4              B        |L30.56|
                  |L30.142|
00008e  f7fffffe          BL       kdp_e2e_get_face_variables
000092  4604              MOV      r4,r0                 ;1267
000094  2001              MOVS     r0,#1                 ;1269
000096  f7fffffe          BL       kl520_api_face_notify
00009a  f104004c          ADD      r0,r4,#0x4c           ;1272
00009e  9000              STR      r0,[sp,#0]            ;1272
0000a0  f894306c          LDRB     r3,[r4,#0x6c]         ;1272
0000a4  f89d2080          LDRB     r2,[sp,#0x80]         ;1272
0000a8  4924              LDR      r1,|L30.316|
0000aa  2001              MOVS     r0,#1                 ;1272
0000ac  f7fffffe          BL       kdp_level_printf
0000b0  e7d8              B        |L30.100|
                  |L30.178|
0000b2  2003              MOVS     r0,#3                 ;1277
0000b4  f7fffffe          BL       kl520_api_face_notify
0000b8  f89d2080          LDRB     r2,[sp,#0x80]         ;1280
0000bc  a120              ADR      r1,|L30.320|
0000be  e000              B        |L30.194|
                  |L30.192|
0000c0  a12e              ADR      r1,|L30.380|
                  |L30.194|
0000c2  2001              MOVS     r0,#1                 ;1288
0000c4  f7fffffe          BL       kdp_level_printf
0000c8  e7cc              B        |L30.100|
;;;1310   
                          ENDP

0000ca  0000              DCW      0x0000
                  |L30.204|
0000cc  73657420          DCB      "set the height of display(0~DISPLAY_HEIGHT): ",0
0000d0  74686520
0000d4  68656967
0000d8  6874206f
0000dc  66206469
0000e0  73706c61
0000e4  7928307e
0000e8  44495350
0000ec  4c41595f
0000f0  48454947
0000f4  4854293a
0000f8  2000    
0000fa  00                DCB      0
0000fb  00                DCB      0
                  |L30.252|
                          DCD      ||.constdata||+0x28
                  |L30.256|
000100  5b25735d          DCB      "[%s], DEVICE ERROR, ret=0x%x\r\n",0
000104  2c204445
000108  56494345
00010c  20455252
000110  4f522c20
000114  7265743d
000118  30782578
00011c  0d0a00  
00011f  00                DCB      0
                  |L30.288|
000120  4b4c3532          DCB      "KL520_FACE NOTE, ret=0x%x\r\n",0
000124  305f4641
000128  4345204e
00012c  4f54452c
000130  20726574
000134  3d307825
000138  780d0a00
                  |L30.316|
                          DCD      ||.conststring||+0x28c
                  |L30.320|
000140  73616d70          DCB      "sample_face_recognition, KL520_FACE_DB_FAIL, face_id=0x"
000144  6c655f66
000148  6163655f
00014c  7265636f
000150  676e6974
000154  696f6e2c
000158  204b4c35
00015c  32305f46
000160  4143455f
000164  44425f46
000168  41494c2c
00016c  20666163
000170  655f6964
000174  3d3078  
000177  25780d0a          DCB      "%x\r\n",0
00017b  00      
                  |L30.380|
00017c  73616d70          DCB      "sample_face_recognition, ERROR, ret=0x%x\r\n",0
000180  6c655f66
000184  6163655f
000188  7265636f
00018c  676e6974
000190  696f6e2c
000194  20455252
000198  4f522c20
00019c  7265743d
0001a0  30782578
0001a4  0d0a00  
0001a7  00                DCB      0

                          AREA ||i.sample_face_recognition_set_timeout||, CODE, READONLY, ALIGN=2

                  sample_face_recognition_set_timeout PROC
;;;1115   
;;;1116   void sample_face_recognition_set_timeout(void)
000000  b510              PUSH     {r4,lr}
;;;1117   {
;;;1118       kl520_api_face_recognition_set_timeout(_cmd_get_answer_int("set timeout, index >>"));
000002  a003              ADR      r0,|L31.16|
000004  f7fffffe          BL       _cmd_get_answer_int
000008  e8bd4010          POP      {r4,lr}
00000c  f7ffbffe          B.W      kl520_api_face_recognition_set_timeout
;;;1119   }
;;;1120   
                          ENDP

                  |L31.16|
000010  73657420          DCB      "set timeout, index >>",0
000014  74696d65
000018  6f75742c
00001c  20696e64
000020  6578203e
000024  3e00    
000026  00                DCB      0
000027  00                DCB      0

                          AREA ||i.sample_face_recognition_test||, CODE, READONLY, ALIGN=2

                  sample_face_recognition_test PROC
;;;1388   
;;;1389   void sample_face_recognition_test(void)
000000  b500              PUSH     {lr}
;;;1390   {
000002  b09f              SUB      sp,sp,#0x7c
;;;1391       u16 input = 0;
;;;1392       s32 ret = 0;
;;;1393       system_info t_sys_info = { 0 };
000004  217c              MOVS     r1,#0x7c
000006  4668              MOV      r0,sp
000008  f7fffffe          BL       __aeabi_memclr4
;;;1394   
;;;1395       input = (u16)_cmd_get_answer_int("set the height of display(0~DISPLAY_HEIGHT): ");
00000c  a00e              ADR      r0,|L32.72|
00000e  f7fffffe          BL       _cmd_get_answer_int
000012  0400              LSLS     r0,r0,#16
000014  0c00              LSRS     r0,r0,#16
;;;1396       ret = kl520_api_face_recognition_test(0, 0, DISPLAY_WIDTH, (input == 0)?DISPLAY_HEIGHT:input);
000016  d100              BNE      |L32.26|
000018  20f0              MOVS     r0,#0xf0
                  |L32.26|
00001a  b203              SXTH     r3,r0
00001c  2100              MOVS     r1,#0
00001e  f44f72a0          MOV      r2,#0x140
000022  4608              MOV      r0,r1
000024  f7fffffe          BL       kl520_api_face_recognition_test
;;;1397       if(ret !=0)
000028  2800              CMP      r0,#0
00002a  d00a              BEQ      |L32.66|
;;;1398       {
;;;1399           ret = kl520_api_get_device_info(&t_sys_info);
00002c  4668              MOV      r0,sp
00002e  f7fffffe          BL       kl520_api_get_device_info
000032  4602              MOV      r2,r0
;;;1400           dbg_msg_err("sample_face_recognition_test device error = %x", ret);
000034  a110              ADR      r1,|L32.120|
000036  2002              MOVS     r0,#2
000038  f7fffffe          BL       kdp_level_printf
;;;1401           kl520_api_free_device_info(&t_sys_info);
00003c  4668              MOV      r0,sp
00003e  f7fffffe          BL       kl520_api_free_device_info
                  |L32.66|
;;;1402       }
;;;1403   }
000042  b01f              ADD      sp,sp,#0x7c
000044  bd00              POP      {pc}
;;;1404   
                          ENDP

000046  0000              DCW      0x0000
                  |L32.72|
000048  73657420          DCB      "set the height of display(0~DISPLAY_HEIGHT): ",0
00004c  74686520
000050  68656967
000054  6874206f
000058  66206469
00005c  73706c61
000060  7928307e
000064  44495350
000068  4c41595f
00006c  48454947
000070  4854293a
000074  2000    
000076  00                DCB      0
000077  00                DCB      0
                  |L32.120|
000078  73616d70          DCB      "sample_face_recognition_test device error = %x\r\n",0
00007c  6c655f66
000080  6163655f
000084  7265636f
000088  676e6974
00008c  696f6e5f
000090  74657374
000094  20646576
000098  69636520
00009c  6572726f
0000a0  72203d20
0000a4  25780d0a
0000a8  00      
0000a9  00                DCB      0
0000aa  00                DCB      0
0000ab  00                DCB      0

                          AREA ||i.sample_face_recognition_without_timeout_size||, CODE, READONLY, ALIGN=2

                  sample_face_recognition_without_timeout_size PROC
;;;1352   
;;;1353   void sample_face_recognition_without_timeout_size(void)
000000  b538              PUSH     {r3-r5,lr}
;;;1354   {
;;;1355       int ret;
;;;1356       u8 face_id = 0;
000002  2000              MOVS     r0,#0
000004  f88d0000          STRB     r0,[sp,#0]
;;;1357       u32 events = 0;
;;;1358       //u32 flags;
;;;1359   
;;;1360       kl520_api_face_recognition(0, 0, DISPLAY_WIDTH, DISPLAY_HEIGHT);
000008  23f0              MOVS     r3,#0xf0
00000a  f44f72a0          MOV      r2,#0x140
00000e  4601              MOV      r1,r0
000010  f7fffffe          BL       kl520_api_face_recognition
;;;1361   
;;;1362       do {
;;;1363           events = wait_event(kl520_api_get_event(), KL520_APP_FLAG_FDFR);
000014  f7fffffe          BL       kl520_api_get_event
000018  2107              MOVS     r1,#7
00001a  f7fffffe          BL       wait_event
00001e  4602              MOV      r2,r0
;;;1364           dbg_msg_console("sample_face_recognition events=%x", events);
000020  a111              ADR      r1,|L33.104|
000022  2001              MOVS     r0,#1
000024  f7fffffe          BL       kdp_level_printf
;;;1365           ret = kl520_api_face_get_result(&face_id);
000028  4668              MOV      r0,sp
00002a  f7fffffe          BL       kl520_api_face_get_result
00002e  4604              MOV      r4,r0
;;;1366           dbg_msg_console("sample_face_recognition ret=%x", ret);
000030  4602              MOV      r2,r0
000032  a116              ADR      r1,|L33.140|
000034  2001              MOVS     r0,#1
000036  f7fffffe          BL       kdp_level_printf
;;;1367           if (KL520_FACE_OK == ret)
00003a  b13c              CBZ      r4,|L33.76|
;;;1368           {
;;;1369   #ifdef DB_DRAWING_CUSTOMER_COLOR
;;;1370               kl520_api_face_notify(KL520_FACE_DB_OK);
;;;1371   #endif
;;;1372               dbg_msg_console("sample_face_recognition, KL520_FACE_OK, face_id=0x%x", face_id);
;;;1373           }
;;;1374           else if (KL520_FACE_DB_FAIL == ret) {
00003c  2c03              CMP      r4,#3
00003e  d00c              BEQ      |L33.90|
;;;1375   #ifdef DB_DRAWING_CUSTOMER_COLOR
;;;1376               kl520_api_face_notify(KL520_FACE_DB_FAIL);
;;;1377   #endif
;;;1378               dbg_msg_console("sample_face_recognition, KL520_FACE_DB_FAIL, face_id=0x%x", face_id);
;;;1379           }
;;;1380           else {
;;;1381               dbg_msg_console("sample_face_recognition, ERROR, ret=0x%x", ret);
000040  4622              MOV      r2,r4
000042  a11b              ADR      r1,|L33.176|
                  |L33.68|
000044  2001              MOVS     r0,#1                 ;1372
000046  f7fffffe          BL       kdp_level_printf
;;;1382           }
;;;1383           break;
;;;1384       }while (0);
;;;1385   
;;;1386       //sample_face_close(); or manually input item 38!
;;;1387   }
00004a  bd38              POP      {r3-r5,pc}
                  |L33.76|
00004c  2001              MOVS     r0,#1                 ;1370
00004e  f7fffffe          BL       kl520_api_face_notify
000052  f89d2000          LDRB     r2,[sp,#0]            ;1372
000056  a121              ADR      r1,|L33.220|
000058  e7f4              B        |L33.68|
                  |L33.90|
00005a  2003              MOVS     r0,#3                 ;1376
00005c  f7fffffe          BL       kl520_api_face_notify
000060  f89d2000          LDRB     r2,[sp,#0]            ;1378
000064  a12b              ADR      r1,|L33.276|
000066  e7ed              B        |L33.68|
;;;1388   
                          ENDP

                  |L33.104|
000068  73616d70          DCB      "sample_face_recognition events=%x\r\n",0
00006c  6c655f66
000070  6163655f
000074  7265636f
000078  676e6974
00007c  696f6e20
000080  6576656e
000084  74733d25
000088  780d0a00
                  |L33.140|
00008c  73616d70          DCB      "sample_face_recognition ret=%x\r\n",0
000090  6c655f66
000094  6163655f
000098  7265636f
00009c  676e6974
0000a0  696f6e20
0000a4  7265743d
0000a8  25780d0a
0000ac  00      
0000ad  00                DCB      0
0000ae  00                DCB      0
0000af  00                DCB      0
                  |L33.176|
0000b0  73616d70          DCB      "sample_face_recognition, ERROR, ret=0x%x\r\n",0
0000b4  6c655f66
0000b8  6163655f
0000bc  7265636f
0000c0  676e6974
0000c4  696f6e2c
0000c8  20455252
0000cc  4f522c20
0000d0  7265743d
0000d4  30782578
0000d8  0d0a00  
0000db  00                DCB      0
                  |L33.220|
0000dc  73616d70          DCB      "sample_face_recognition, KL520_FACE_OK, face_id=0x%x\r\n"
0000e0  6c655f66
0000e4  6163655f
0000e8  7265636f
0000ec  676e6974
0000f0  696f6e2c
0000f4  204b4c35
0000f8  32305f46
0000fc  4143455f
000100  4f4b2c20
000104  66616365
000108  5f69643d
00010c  30782578
000110  0d0a    
000112  00                DCB      0
000113  00                DCB      0
                  |L33.276|
000114  73616d70          DCB      "sample_face_recognition, KL520_FACE_DB_FAIL, face_id=0x"
000118  6c655f66
00011c  6163655f
000120  7265636f
000124  676e6974
000128  696f6e2c
00012c  204b4c35
000130  32305f46
000134  4143455f
000138  44425f46
00013c  41494c2c
000140  20666163
000144  655f6964
000148  3d3078  
00014b  25780d0a          DCB      "%x\r\n",0
00014f  00      

                          AREA ||i.sample_factory||, CODE, READONLY, ALIGN=1

                  sample_factory PROC
;;;2489   
;;;2490   void sample_factory(void)
000000  f7ffbffe          B.W      kl520_api_factory
;;;2491   {
;;;2492       kl520_measure_stamp(E_MEASURE_FACTORY_STR);
;;;2493       kl520_api_factory();
;;;2494       kl520_measure_stamp(E_MEASURE_FACTORY_END);
;;;2495   }
;;;2496   
                          ENDP


                          AREA ||i.sample_force_abort_disable||, CODE, READONLY, ALIGN=1

                  sample_force_abort_disable PROC
;;;676    }
;;;677    void sample_force_abort_disable(void)
000000  4770              BX       lr
;;;678    {
;;;679    #if (CFG_CAMERA_ROTATE != 1)
;;;680        osStatus_t status;
;;;681    
;;;682        if (tid_abort_thread) {
;;;683            status = osThreadTerminate(tid_abort_thread);
;;;684            tid_abort_thread = NULL;
;;;685        }
;;;686        if(status != osOK)
;;;687            dbg_msg_console("[%s] thread id of force abort is 0x%x, status = %d", __func__, tid_abort_thread, status);
;;;688    #endif
;;;689    }
;;;690    
                          ENDP


                          AREA ||i.sample_force_abort_enable||, CODE, READONLY, ALIGN=1

                  sample_force_abort_enable PROC
;;;665    
;;;666    void sample_force_abort_enable(void)
000000  4770              BX       lr
;;;667    {
;;;668    #if (CFG_CAMERA_ROTATE != 1)
;;;669        osThreadAttr_t attr = {
;;;670            .stack_size = 512
;;;671        };     
;;;672        
;;;673        tid_abort_thread = osThreadNew(force_abort_thread, NULL, &attr);
;;;674        //dbg_msg_console("[%s] thread id of force abort is 0x%x", __func__, tid_abort_thread);
;;;675    #endif
;;;676    }
;;;677    void sample_force_abort_disable(void)
                          ENDP


                          AREA ||i.sample_fr_threshold||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  sample_fr_threshold PROC
;;;1461   
;;;1462   void sample_fr_threshold(void)
000000  b510              PUSH     {r4,lr}
;;;1463   {
000002  b0cc              SUB      sp,sp,#0x130
;;;1464       u8 level = kdp_e2e_get_fr_threshold_level();
000004  f7fffffe          BL       kdp_e2e_get_fr_threshold_level
000008  4603              MOV      r3,r0
;;;1465       char str[256];
;;;1466       snprintf(str, 256, "set fr threshold level (%d) :", level);
00000a  a211              ADR      r2,|L37.80|
00000c  f44f7180          MOV      r1,#0x100
000010  4668              MOV      r0,sp
000012  f7fffffe          BL       __2snprintf
;;;1467       u8 n_l = _cmd_get_answer_int(str);
000016  4668              MOV      r0,sp
000018  f7fffffe          BL       _cmd_get_answer_int
00001c  b2c4              UXTB     r4,r0
;;;1468       if(n_l > 4) {
00001e  2c04              CMP      r4,#4
000020  d905              BLS      |L37.46|
;;;1469           dbg_msg_console("fr threshold level should be 0~4");
000022  a113              ADR      r1,|L37.112|
000024  2001              MOVS     r0,#1
000026  f7fffffe          BL       kdp_level_printf
                  |L37.42|
;;;1470           return;
;;;1471       }
;;;1472       kdp_e2e_set_fr_threshold_level(n_l);
;;;1473       
;;;1474       dbg_msg_console("fr threshold level set to %d.", n_l);
;;;1475       
;;;1476       kl520_customer_info Cusinfo;
;;;1477       kl520_api_customer_get(&Cusinfo);
;;;1478       Cusinfo.verify_threshold = n_l;
;;;1479       kl520_api_customer_write(&Cusinfo);
;;;1480       
;;;1481       return;
;;;1482   }
00002a  b04c              ADD      sp,sp,#0x130
00002c  bd10              POP      {r4,pc}
                  |L37.46|
00002e  4620              MOV      r0,r4                 ;1472
000030  f7fffffe          BL       kdp_e2e_set_fr_threshold_level
000034  4622              MOV      r2,r4                 ;1474
000036  a117              ADR      r1,|L37.148|
000038  2001              MOVS     r0,#1                 ;1474
00003a  f7fffffe          BL       kdp_level_printf
00003e  a840              ADD      r0,sp,#0x100          ;1477
000040  f7fffffe          BL       kl520_api_customer_get
000044  f88d4121          STRB     r4,[sp,#0x121]        ;1478
000048  a840              ADD      r0,sp,#0x100          ;1479
00004a  f7fffffe          BL       kl520_api_customer_write
00004e  e7ec              B        |L37.42|
;;;1483   
                          ENDP

                  |L37.80|
000050  73657420          DCB      "set fr threshold level (%d) :",0
000054  66722074
000058  68726573
00005c  686f6c64
000060  206c6576
000064  656c2028
000068  25642920
00006c  3a00    
00006e  00                DCB      0
00006f  00                DCB      0
                  |L37.112|
000070  66722074          DCB      "fr threshold level should be 0~4\r\n",0
000074  68726573
000078  686f6c64
00007c  206c6576
000080  656c2073
000084  686f756c
000088  64206265
00008c  20307e34
000090  0d0a00  
000093  00                DCB      0
                  |L37.148|
000094  66722074          DCB      "fr threshold level set to %d.\r\n",0
000098  68726573
00009c  686f6c64
0000a0  206c6576
0000a4  656c2073
0000a8  65742074
0000ac  6f202564
0000b0  2e0d0a00

                          AREA ||i.sample_get_adc||, CODE, READONLY, ALIGN=2

                  sample_get_adc PROC
;;;2056   
;;;2057   void sample_get_adc(void)
000000  b510              PUSH     {r4,lr}
;;;2058   {
;;;2059       int adc_value = 0;
;;;2060       int adc_chn = _cmd_get_answer_int("[input ADC channel(0~3) >>");
000002  a008              ADR      r0,|L38.36|
000004  f7fffffe          BL       _cmd_get_answer_int
000008  4604              MOV      r4,r0
;;;2061   
;;;2062       kdp520_adc_init();
00000a  f7fffffe          BL       kdp520_adc_init
;;;2063       adc_value = kdp520_adc_read(adc_chn);
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       kdp520_adc_read
;;;2064   
;;;2065       dbg_msg_console("ADC[%d] = %d", adc_chn, adc_value);
000014  4622              MOV      r2,r4
000016  4603              MOV      r3,r0                 ;2063
000018  e8bd4010          POP      {r4,lr}
00001c  a108              ADR      r1,|L38.64|
00001e  2001              MOVS     r0,#1
000020  f7ffbffe          B.W      kdp_level_printf
;;;2066   }
;;;2067   
                          ENDP

                  |L38.36|
000024  5b696e70          DCB      "[input ADC channel(0~3) >>",0
000028  75742041
00002c  44432063
000030  68616e6e
000034  656c2830
000038  7e332920
00003c  3e3e00  
00003f  00                DCB      0
                  |L38.64|
000040  4144435b          DCB      "ADC[%d] = %d\r\n",0
000044  25645d20
000048  3d202564
00004c  0d0a00  
00004f  00                DCB      0

                          AREA ||i.sample_get_system_info||, CODE, READONLY, ALIGN=2

                  sample_get_system_info PROC
;;;1856   
;;;1857   void sample_get_system_info(void)
000000  b570              PUSH     {r4-r6,lr}
;;;1858   {
000002  b0a2              SUB      sp,sp,#0x88
;;;1859       int ret = 0;
;;;1860       system_info t_sys_info = { 0 };
000004  217c              MOVS     r1,#0x7c
000006  a803              ADD      r0,sp,#0xc
000008  f7fffffe          BL       __aeabi_memclr4
;;;1861       ret = kl520_api_get_device_info(&t_sys_info);
00000c  a803              ADD      r0,sp,#0xc
00000e  f7fffffe          BL       kl520_api_get_device_info
000012  4605              MOV      r5,r0
;;;1862   
;;;1863       dbg_msg_console("unique_id : 0x%x", t_sys_info.unique_id);
000014  a141              ADR      r1,|L39.284|
000016  2001              MOVS     r0,#1
000018  9a03              LDR      r2,[sp,#0xc]
00001a  f7fffffe          BL       kdp_level_printf
;;;1864       dbg_msg_console("boot loader version : %x", t_sys_info.spl_version);
00001e  a144              ADR      r1,|L39.304|
000020  2001              MOVS     r0,#1
000022  9a04              LDR      r2,[sp,#0x10]
000024  f7fffffe          BL       kdp_level_printf
;;;1865       dbg_msg_console("scpu firmware version : %d (%d.%d.%d.%d)", t_sys_info.fw_scpu_version.date,
000028  f89d0015          LDRB     r0,[sp,#0x15]
00002c  f89d2017          LDRB     r2,[sp,#0x17]
000030  f89d1016          LDRB     r1,[sp,#0x16]
000034  e88d0007          STM      sp,{r0-r2}
000038  f89d3014          LDRB     r3,[sp,#0x14]
00003c  a143              ADR      r1,|L39.332|
00003e  2001              MOVS     r0,#1
000040  9a06              LDR      r2,[sp,#0x18]
000042  f7fffffe          BL       kdp_level_printf
;;;1866                                                                   t_sys_info.fw_scpu_version.version[0],
;;;1867                                                                   t_sys_info.fw_scpu_version.version[1],
;;;1868                                                                   t_sys_info.fw_scpu_version.version[2],
;;;1869                                                                   t_sys_info.fw_scpu_version.version[3]);
;;;1870       dbg_msg_console("ncpu firmware version : %d (%d.%d.%d.%d)", t_sys_info.fw_ncpu_version.date,
000046  f89d001d          LDRB     r0,[sp,#0x1d]
00004a  f89d201f          LDRB     r2,[sp,#0x1f]
00004e  f89d101e          LDRB     r1,[sp,#0x1e]
000052  e88d0007          STM      sp,{r0-r2}
000056  f89d301c          LDRB     r3,[sp,#0x1c]
00005a  a147              ADR      r1,|L39.376|
00005c  2001              MOVS     r0,#1
00005e  9a08              LDR      r2,[sp,#0x20]
000060  f7fffffe          BL       kdp_level_printf
;;;1871                                                                   t_sys_info.fw_ncpu_version.version[0],
;;;1872                                                                   t_sys_info.fw_ncpu_version.version[1],
;;;1873                                                                   t_sys_info.fw_ncpu_version.version[2],
;;;1874                                                                   t_sys_info.fw_ncpu_version.version[3]);
;;;1875   #if ( UART_PROTOCOL_VERSION >= 0x0200 )
;;;1876       dbg_msg_console("protocol version : 0x%x", t_sys_info.com_protocol_version);
000064  f8bd2024          LDRH     r2,[sp,#0x24]
000068  a14e              ADR      r1,|L39.420|
00006a  2001              MOVS     r0,#1
00006c  f7fffffe          BL       kdp_level_printf
;;;1877   #endif
;;;1878   
;;;1879       for (int i = 0; i < t_sys_info.model_count; ++i) {
000070  2400              MOVS     r4,#0
000072  e00b              B        |L39.140|
                  |L39.116|
;;;1880           dbg_msg_console("model[%d] type:0x%x, version:0x%x",
000074  980b              LDR      r0,[sp,#0x2c]
000076  4622              MOV      r2,r4
000078  f8500024          LDR      r0,[r0,r4,LSL #2]
00007c  6841              LDR      r1,[r0,#4]
00007e  9100              STR      r1,[sp,#0]
000080  6803              LDR      r3,[r0,#0]
000082  a14f              ADR      r1,|L39.448|
000084  2001              MOVS     r0,#1
000086  f7fffffe          BL       kdp_level_printf
00008a  1c64              ADDS     r4,r4,#1
                  |L39.140|
00008c  980a              LDR      r0,[sp,#0x28]         ;1879
00008e  42a0              CMP      r0,r4                 ;1879
000090  dcf0              BGT      |L39.116|
;;;1881               i, t_sys_info.model_infos[i]->model_type, t_sys_info.model_infos[i]->model_version);
;;;1882       }
;;;1883       
;;;1884       struct fw_misc_data *all_model_version = kl520_api_get_model_version();
000092  f7fffffe          BL       kl520_api_get_model_version
;;;1885       dbg_msg_console("all model version: %d.%d.%d.%d", all_model_version->version[0],
000096  78c2              LDRB     r2,[r0,#3]
000098  7881              LDRB     r1,[r0,#2]
00009a  e9cd1200          STRD     r1,r2,[sp,#0]
00009e  7843              LDRB     r3,[r0,#1]
0000a0  7802              LDRB     r2,[r0,#0]
0000a2  a150              ADR      r1,|L39.484|
0000a4  2001              MOVS     r0,#1
0000a6  f7fffffe          BL       kdp_level_printf
;;;1886           all_model_version->version[1], all_model_version->version[2], all_model_version->version[3]);
;;;1887   
;;;1888       dbg_msg_console("device name : %s, id : 0x%x", t_sys_info.device_id_0.device_name, t_sys_info.device_id_0.id);
0000aa  aa0c              ADD      r2,sp,#0x30
0000ac  a156              ADR      r1,|L39.520|
0000ae  2001              MOVS     r0,#1
0000b0  9b0f              LDR      r3,[sp,#0x3c]
0000b2  f7fffffe          BL       kdp_level_printf
;;;1889       dbg_msg_console("device name : %s, id : 0x%x", t_sys_info.device_id_1.device_name, t_sys_info.device_id_1.id);
0000b6  aa10              ADD      r2,sp,#0x40
0000b8  a153              ADR      r1,|L39.520|
0000ba  2001              MOVS     r0,#1
0000bc  9b13              LDR      r3,[sp,#0x4c]
0000be  f7fffffe          BL       kdp_level_printf
;;;1890       dbg_msg_console("device name : %s, id : 0x%x", t_sys_info.device_id_2.device_name, t_sys_info.device_id_2.id);
0000c2  aa14              ADD      r2,sp,#0x50
0000c4  a150              ADR      r1,|L39.520|
0000c6  2001              MOVS     r0,#1
0000c8  9b17              LDR      r3,[sp,#0x5c]
0000ca  f7fffffe          BL       kdp_level_printf
;;;1891       dbg_msg_console("device name : %s, id : 0x%x", t_sys_info.device_id_3.device_name, t_sys_info.device_id_3.id);
0000ce  aa18              ADD      r2,sp,#0x60
0000d0  a14d              ADR      r1,|L39.520|
0000d2  2001              MOVS     r0,#1
0000d4  9b1b              LDR      r3,[sp,#0x6c]
0000d6  f7fffffe          BL       kdp_level_printf
;;;1892       dbg_msg_console("device name : %s, id : 0x%x", t_sys_info.device_id_4.device_name, t_sys_info.device_id_4.id);
0000da  aa1c              ADD      r2,sp,#0x70
0000dc  a14a              ADR      r1,|L39.520|
0000de  2001              MOVS     r0,#1
0000e0  9b1f              LDR      r3,[sp,#0x7c]
0000e2  f7fffffe          BL       kdp_level_printf
;;;1893       for (u32 i = 0; i < t_sys_info.extra_device_cnt; ++i) {
0000e6  2400              MOVS     r4,#0
;;;1894           dbg_msg_console("device name : %s, id : 0x%x",
0000e8  260c              MOVS     r6,#0xc
0000ea  e00a              B        |L39.258|
                  |L39.236|
0000ec  9820              LDR      r0,[sp,#0x80]
0000ee  eb061104          ADD      r1,r6,r4,LSL #4
0000f2  eb001204          ADD      r2,r0,r4,LSL #4
0000f6  5843              LDR      r3,[r0,r1]
0000f8  a143              ADR      r1,|L39.520|
0000fa  2001              MOVS     r0,#1
0000fc  f7fffffe          BL       kdp_level_printf
000100  1c64              ADDS     r4,r4,#1
                  |L39.258|
000102  9821              LDR      r0,[sp,#0x84]         ;1893
000104  42a0              CMP      r0,r4                 ;1893
000106  d8f1              BHI      |L39.236|
;;;1895               t_sys_info.extra_device_id_array[i].device_name, t_sys_info.extra_device_id_array[i].id);
;;;1896       }
;;;1897       //dbg_msg_console("device name : %s, id : %x", t_sys_info.device_id_5.device_name, t_sys_info.device_id_5.id);
;;;1898       dbg_msg_console("Device status = 0x%x", ret);
000108  462a              MOV      r2,r5
00010a  a147              ADR      r1,|L39.552|
00010c  2001              MOVS     r0,#1
00010e  f7fffffe          BL       kdp_level_printf
;;;1899   
;;;1900       kl520_api_free_device_info(&t_sys_info);
000112  a803              ADD      r0,sp,#0xc
000114  f7fffffe          BL       kl520_api_free_device_info
;;;1901   }
000118  b022              ADD      sp,sp,#0x88
00011a  bd70              POP      {r4-r6,pc}
;;;1902   
                          ENDP

                  |L39.284|
00011c  756e6971          DCB      "unique_id : 0x%x\r\n",0
000120  75655f69
000124  64203a20
000128  30782578
00012c  0d0a00  
00012f  00                DCB      0
                  |L39.304|
000130  626f6f74          DCB      "boot loader version : %x\r\n",0
000134  206c6f61
000138  64657220
00013c  76657273
000140  696f6e20
000144  3a202578
000148  0d0a00  
00014b  00                DCB      0
                  |L39.332|
00014c  73637075          DCB      "scpu firmware version : %d (%d.%d.%d.%d)\r\n",0
000150  20666972
000154  6d776172
000158  65207665
00015c  7273696f
000160  6e203a20
000164  25642028
000168  25642e25
00016c  642e2564
000170  2e256429
000174  0d0a00  
000177  00                DCB      0
                  |L39.376|
000178  6e637075          DCB      "ncpu firmware version : %d (%d.%d.%d.%d)\r\n",0
00017c  20666972
000180  6d776172
000184  65207665
000188  7273696f
00018c  6e203a20
000190  25642028
000194  25642e25
000198  642e2564
00019c  2e256429
0001a0  0d0a00  
0001a3  00                DCB      0
                  |L39.420|
0001a4  70726f74          DCB      "protocol version : 0x%x\r\n",0
0001a8  6f636f6c
0001ac  20766572
0001b0  73696f6e
0001b4  203a2030
0001b8  7825780d
0001bc  0a00    
0001be  00                DCB      0
0001bf  00                DCB      0
                  |L39.448|
0001c0  6d6f6465          DCB      "model[%d] type:0x%x, version:0x%x\r\n",0
0001c4  6c5b2564
0001c8  5d207479
0001cc  70653a30
0001d0  7825782c
0001d4  20766572
0001d8  73696f6e
0001dc  3a307825
0001e0  780d0a00
                  |L39.484|
0001e4  616c6c20          DCB      "all model version: %d.%d.%d.%d\r\n",0
0001e8  6d6f6465
0001ec  6c207665
0001f0  7273696f
0001f4  6e3a2025
0001f8  642e2564
0001fc  2e25642e
000200  25640d0a
000204  00      
000205  00                DCB      0
000206  00                DCB      0
000207  00                DCB      0
                  |L39.520|
000208  64657669          DCB      "device name : %s, id : 0x%x\r\n",0
00020c  6365206e
000210  616d6520
000214  3a202573
000218  2c206964
00021c  203a2030
000220  7825780d
000224  0a00    
000226  00                DCB      0
000227  00                DCB      0
                  |L39.552|
000228  44657669          DCB      "Device status = 0x%x\r\n",0
00022c  63652073
000230  74617475
000234  73203d20
000238  30782578
00023c  0d0a00  
00023f  00                DCB      0

                          AREA ||i.sample_get_userinfo||, CODE, READONLY, ALIGN=2

                  sample_get_userinfo PROC
;;;1145   
;;;1146   void sample_get_userinfo(void)
000000  b508              PUSH     {r3,lr}
;;;1147   {
;;;1148       kdp_e2e_face_variables* vars = kdp_e2e_get_face_variables();
000002  f7fffffe          BL       kdp_e2e_get_face_variables
;;;1149       dbg_msg_console("id: 0x%x, admin: %d, username: %s",vars->user_id, vars->admin, vars->user_name);
000006  f100014c          ADD      r1,r0,#0x4c
00000a  9100              STR      r1,[sp,#0]
00000c  f890306c          LDRB     r3,[r0,#0x6c]
000010  6c82              LDR      r2,[r0,#0x48]
000012  a102              ADR      r1,|L40.28|
000014  2001              MOVS     r0,#1
000016  f7fffffe          BL       kdp_level_printf
;;;1150   }
00001a  bd08              POP      {r3,pc}
;;;1151   
                          ENDP

                  |L40.28|
00001c  69643a20          DCB      "id: 0x%x, admin: %d, username: %s\r\n",0
000020  30782578
000024  2c206164
000028  6d696e3a
00002c  2025642c
000030  20757365
000034  726e616d
000038  653a2025
00003c  730d0a00

                          AREA ||i.sample_input_userinfo||, CODE, READONLY, ALIGN=2

                  sample_input_userinfo PROC
;;;1120   
;;;1121   int sample_input_userinfo(void)
000000  b530              PUSH     {r4,r5,lr}
;;;1122   {
000002  b091              SUB      sp,sp,#0x44
;;;1123       dbg_msg_console("Please enter the username(Up to %d bytes): ", MAX_LEN_USERNAME);
000004  2220              MOVS     r2,#0x20
000006  a113              ADR      r1,|L41.84|
000008  2001              MOVS     r0,#1
00000a  f7fffffe          BL       kdp_level_printf
                  |L41.14|
;;;1124       while(1)
;;;1125       {
;;;1126           int nLen;
;;;1127           char buf[64];
;;;1128           nLen = kdp_gets(DEBUG_CONSOLE, buf);
00000e  4669              MOV      r1,sp
000010  2000              MOVS     r0,#0
000012  f7fffffe          BL       kdp_gets
;;;1129   
;;;1130           if(nLen > MAX_LEN_USERNAME){
000016  2820              CMP      r0,#0x20
000018  dd06              BLE      |L41.40|
;;;1131               dbg_msg_console("More than %d bytes: %s",MAX_LEN_USERNAME ,buf);
00001a  466b              MOV      r3,sp
00001c  2220              MOVS     r2,#0x20
00001e  a119              ADR      r1,|L41.132|
000020  2001              MOVS     r0,#1
000022  f7fffffe          BL       kdp_level_printf
000026  e7f2              B        |L41.14|
                  |L41.40|
;;;1132           }
;;;1133           else{
;;;1134               kdp_e2e_face_variables* vars = kdp_e2e_get_face_variables();
000028  f7fffffe          BL       kdp_e2e_get_face_variables
00002c  4604              MOV      r4,r0
;;;1135               memcpy( vars->user_name, &buf, MAX_LEN_USERNAME );
00002e  304c              ADDS     r0,r0,#0x4c
000030  2220              MOVS     r2,#0x20
000032  4669              MOV      r1,sp
000034  4605              MOV      r5,r0
000036  f7fffffe          BL       __aeabi_memcpy4
00003a  462a              MOV      r2,r5
;;;1136               dbg_msg_console("Username : %s", vars->user_name);
00003c  a118              ADR      r1,|L41.160|
00003e  2001              MOVS     r0,#1
000040  f7fffffe          BL       kdp_level_printf
;;;1137               
;;;1138               vars->admin = (u8)_cmd_get_answer_int("Is an administrator:");
000044  a01a              ADR      r0,|L41.176|
000046  f7fffffe          BL       _cmd_get_answer_int
00004a  f884006c          STRB     r0,[r4,#0x6c]
;;;1139               
;;;1140               break;
;;;1141           }
;;;1142       }
;;;1143       return 1;
;;;1144   }
00004e  b011              ADD      sp,sp,#0x44
000050  2001              MOVS     r0,#1                 ;1143
000052  bd30              POP      {r4,r5,pc}
;;;1145   
                          ENDP

                  |L41.84|
000054  506c6561          DCB      "Please enter the username(Up to %d bytes): \r\n",0
000058  73652065
00005c  6e746572
000060  20746865
000064  20757365
000068  726e616d
00006c  65285570
000070  20746f20
000074  25642062
000078  79746573
00007c  293a200d
000080  0a00    
000082  00                DCB      0
000083  00                DCB      0
                  |L41.132|
000084  4d6f7265          DCB      "More than %d bytes: %s\r\n",0
000088  20746861
00008c  6e202564
000090  20627974
000094  65733a20
000098  25730d0a
00009c  00      
00009d  00                DCB      0
00009e  00                DCB      0
00009f  00                DCB      0
                  |L41.160|
0000a0  55736572          DCB      "Username : %s\r\n",0
0000a4  6e616d65
0000a8  203a2025
0000ac  730d0a00
                  |L41.176|
0000b0  49732061          DCB      "Is an administrator:",0
0000b4  6e206164
0000b8  6d696e69
0000bc  73747261
0000c0  746f723a
0000c4  00      
0000c5  00                DCB      0
0000c6  00                DCB      0
0000c7  00                DCB      0

                          AREA ||i.sample_io_close_nir_led||, CODE, READONLY, ALIGN=1

                  sample_io_close_nir_led PROC
;;;897    }
;;;898    void sample_io_close_nir_led(void) {nir_led_close();}
000000  f7ffbffe          B.W      nir_led_close
;;;899    
                          ENDP


                          AREA ||i.sample_io_close_rgb_led||, CODE, READONLY, ALIGN=1

                  sample_io_close_rgb_led PROC
;;;884    }
;;;885    void sample_io_close_rgb_led(void) {rgb_led_close();}
000000  f7ffbffe          B.W      rgb_led_close
;;;886    
                          ENDP


                          AREA ||i.sample_io_lcd_power_off||, CODE, READONLY, ALIGN=1

                  sample_io_lcd_power_off PROC
;;;1071   void sample_io_lcd_power_on(void) { lcd_power_on(); }
;;;1072   void sample_io_lcd_power_off(void) {lcd_power_off();}
000000  f7ffbffe          B.W      lcd_power_off
;;;1073   
                          ENDP


                          AREA ||i.sample_io_lcd_power_on||, CODE, READONLY, ALIGN=1

                  sample_io_lcd_power_on PROC
;;;1070   
;;;1071   void sample_io_lcd_power_on(void) { lcd_power_on(); }
000000  f7ffbffe          B.W      lcd_power_on
;;;1072   void sample_io_lcd_power_off(void) {lcd_power_off();}
                          ENDP


                          AREA ||i.sample_io_nir_camera_power_off||, CODE, READONLY, ALIGN=1

                  sample_io_nir_camera_power_off PROC
;;;1068   void sample_io_nir_camera_power_on(void) {nir_camera_power_on();}
;;;1069   void sample_io_nir_camera_power_off(void) {nir_camera_power_off();}
000000  f7ffbffe          B.W      nir_camera_power_off
;;;1070   
                          ENDP


                          AREA ||i.sample_io_nir_camera_power_on||, CODE, READONLY, ALIGN=1

                  sample_io_nir_camera_power_on PROC
;;;1067   void sample_io_rgb_camera_power_off(void) {rgb_camera_power_off();}
;;;1068   void sample_io_nir_camera_power_on(void) {nir_camera_power_on();}
000000  f7ffbffe          B.W      nir_camera_power_on
;;;1069   void sample_io_nir_camera_power_off(void) {nir_camera_power_off();}
                          ENDP


                          AREA ||i.sample_io_open_nir_led||, CODE, READONLY, ALIGN=2

                  sample_io_open_nir_led PROC
;;;892    
;;;893    void sample_io_open_nir_led(void)
000000  b510              PUSH     {r4,lr}
;;;894    {
;;;895        u16 level = _cmd_get_answer_int("set nir led, level (0, 10, 20 ... 100) >>");
000002  a004              ADR      r0,|L48.20|
000004  f7fffffe          BL       _cmd_get_answer_int
;;;896        nir_led_open(level);
000008  e8bd4010          POP      {r4,lr}
00000c  b280              UXTH     r0,r0                 ;895
00000e  f7ffbffe          B.W      nir_led_open
;;;897    }
;;;898    void sample_io_close_nir_led(void) {nir_led_close();}
                          ENDP

000012  0000              DCW      0x0000
                  |L48.20|
000014  73657420          DCB      "set nir led, level (0, 10, 20 ... 100) >>",0
000018  6e697220
00001c  6c65642c
000020  206c6576
000024  656c2028
000028  302c2031
00002c  302c2032
000030  30202e2e
000034  2e203130
000038  3029203e
00003c  3e00    
00003e  00                DCB      0
00003f  00                DCB      0

                          AREA ||i.sample_io_open_rgb_led||, CODE, READONLY, ALIGN=2

                  sample_io_open_rgb_led PROC
;;;879    
;;;880    void sample_io_open_rgb_led(void)
000000  b510              PUSH     {r4,lr}
;;;881    {
;;;882        u16 level = _cmd_get_answer_int("set rgb led, level (0, 10, 20 ... 100) >>");
000002  a004              ADR      r0,|L49.20|
000004  f7fffffe          BL       _cmd_get_answer_int
;;;883        rgb_led_open((u16)level);
000008  e8bd4010          POP      {r4,lr}
00000c  b280              UXTH     r0,r0                 ;882
00000e  f7ffbffe          B.W      rgb_led_open
;;;884    }
;;;885    void sample_io_close_rgb_led(void) {rgb_led_close();}
                          ENDP

000012  0000              DCW      0x0000
                  |L49.20|
000014  73657420          DCB      "set rgb led, level (0, 10, 20 ... 100) >>",0
000018  72676220
00001c  6c65642c
000020  206c6576
000024  656c2028
000028  302c2031
00002c  302c2032
000030  30202e2e
000034  2e203130
000038  3029203e
00003c  3e00    
00003e  00                DCB      0
00003f  00                DCB      0

                          AREA ||i.sample_io_rgb_camera_power_off||, CODE, READONLY, ALIGN=1

                  sample_io_rgb_camera_power_off PROC
;;;1066   void sample_io_rgb_camera_power_on(void) {rgb_camera_power_on();}
;;;1067   void sample_io_rgb_camera_power_off(void) {rgb_camera_power_off();}
000000  f7ffbffe          B.W      rgb_camera_power_off
;;;1068   void sample_io_nir_camera_power_on(void) {nir_camera_power_on();}
                          ENDP


                          AREA ||i.sample_io_rgb_camera_power_on||, CODE, READONLY, ALIGN=1

                  sample_io_rgb_camera_power_on PROC
;;;1065   }
;;;1066   void sample_io_rgb_camera_power_on(void) {rgb_camera_power_on();}
000000  f7ffbffe          B.W      rgb_camera_power_on
;;;1067   void sample_io_rgb_camera_power_off(void) {rgb_camera_power_off();}
                          ENDP


                          AREA ||i.sample_io_set_nir_exp_time||, CODE, READONLY, ALIGN=2

                  sample_io_set_nir_exp_time PROC
;;;1046   #endif
;;;1047   void sample_io_set_nir_exp_time(void)
000000  b510              PUSH     {r4,lr}
;;;1048   {
;;;1049       u32 time_us = (u32)_cmd_get_answer_int("set nir exp time(us) >>");
000002  a00b              ADR      r0,|L52.48|
000004  f7fffffe          BL       _cmd_get_answer_int
;;;1050       u32 nir_cur_exp_time = time_us * 16 / 14.82;
000008  0100              LSLS     r0,r0,#4
00000a  f7fffffe          BL       __aeabi_ui2d
00000e  ed9f1b0e          VLDR     d1,|L52.72|
000012  ec532b11          VMOV     r2,r3,d1
000016  f7fffffe          BL       __aeabi_ddiv
00001a  f7fffffe          BL       __aeabi_d2uiz
;;;1051       kdp_camera_set_exp_time(MIPI_CAM_NIR, (nir_cur_exp_time&0x0000FF00)>>8, nir_cur_exp_time&0xFF);
00001e  b2c2              UXTB     r2,r0
000020  f3c02107          UBFX     r1,r0,#8,#8
000024  480a              LDR      r0,|L52.80|
000026  7800              LDRB     r0,[r0,#0]  ; nir_sensor_index
000028  e8bd4010          POP      {r4,lr}
00002c  f7ffbffe          B.W      kdp_camera_set_exp_time
;;;1052   }
;;;1053   
                          ENDP

                  |L52.48|
000030  73657420          DCB      "set nir exp time(us) >>",0
000034  6e697220
000038  65787020
00003c  74696d65
000040  28757329
000044  203e3e00
                  |L52.72|
000048  0a3d70a4          DCFD     0x402da3d70a3d70a4 ; 14.82
00004c  402da3d7
                  |L52.80|
                          DCD      nir_sensor_index

                          AREA ||i.sample_io_set_nir_led||, CODE, READONLY, ALIGN=1

                  sample_io_set_nir_led PROC
;;;886    
;;;887    void sample_io_set_nir_led(void)
000000  4770              BX       lr
;;;888    {
;;;889        //int level = _cmd_get_answer_int("set nir led, level (0, 10, 20 ... 100) >>");
;;;890        //kl520_api_set_nir_led_level(level);
;;;891    }
;;;892    
                          ENDP


                          AREA ||i.sample_io_set_rgb_led||, CODE, READONLY, ALIGN=2

                  sample_io_set_rgb_led PROC
;;;867    
;;;868    void sample_io_set_rgb_led(void)
000000  b570              PUSH     {r4-r6,lr}
;;;869    {
;;;870        BOOL reset = FALSE;
000002  2500              MOVS     r5,#0
;;;871        int level = 0;
000004  462c              MOV      r4,r5
;;;872        if (1 == _cmd_get_answer_int("set rgb led attribute, 0:Auto, 1:manual >>"))
000006  a008              ADR      r0,|L54.40|
000008  f7fffffe          BL       _cmd_get_answer_int
00000c  2801              CMP      r0,#1
00000e  d006              BEQ      |L54.30|
;;;873            level = _cmd_get_answer_int("set rgb led, level (0, 10, 20 ... 100) >>");
;;;874        else
;;;875            reset = TRUE;
000010  2501              MOVS     r5,#1
                  |L54.18|
;;;876    
;;;877        kl520_api_set_rgb_led_level(reset, level);
000012  4621              MOV      r1,r4
000014  4628              MOV      r0,r5
000016  e8bd4070          POP      {r4-r6,lr}
00001a  f7ffbffe          B.W      kl520_api_set_rgb_led_level
                  |L54.30|
00001e  a00d              ADR      r0,|L54.84|
000020  f7fffffe          BL       _cmd_get_answer_int
000024  4604              MOV      r4,r0                 ;873
000026  e7f4              B        |L54.18|
;;;878    }
;;;879    
                          ENDP

                  |L54.40|
000028  73657420          DCB      "set rgb led attribute, 0:Auto, 1:manual >>",0
00002c  72676220
000030  6c656420
000034  61747472
000038  69627574
00003c  652c2030
000040  3a417574
000044  6f2c2031
000048  3a6d616e
00004c  75616c20
000050  3e3e00  
000053  00                DCB      0
                  |L54.84|
000054  73657420          DCB      "set rgb led, level (0, 10, 20 ... 100) >>",0
000058  72676220
00005c  6c65642c
000060  206c6576
000064  656c2028
000068  302c2031
00006c  302c2032
000070  30202e2e
000074  2e203130
000078  3029203e
00007c  3e00    
00007e  00                DCB      0
00007f  00                DCB      0

                          AREA ||i.sample_lcd_adjust_backlight||, CODE, READONLY, ALIGN=2

                  sample_lcd_adjust_backlight PROC
;;;716    
;;;717    void sample_lcd_adjust_backlight(void)
000000  b500              PUSH     {lr}
;;;718    {
000002  b0c1              SUB      sp,sp,#0x104
;;;719        int _brightness = 0;
;;;720        char buf[256];
;;;721        dbg_msg_console(" lcm brightness (brightness:0-100)>>");
000004  a10a              ADR      r1,|L55.48|
000006  2001              MOVS     r0,#1
000008  f7fffffe          BL       kdp_level_printf
;;;722        kdp_gets(DEBUG_CONSOLE, buf);
00000c  4669              MOV      r1,sp
00000e  2000              MOVS     r0,#0
000010  f7fffffe          BL       kdp_gets
;;;723        dbg_msg_nocrlf("");
000014  a010              ADR      r0,|L55.88|
000016  f7fffffe          BL       kdp_printf_nocrlf
;;;724    
;;;725        _brightness = atoi(strtok(buf, " \r\n\t"));
00001a  a110              ADR      r1,|L55.92|
00001c  4668              MOV      r0,sp
00001e  f7fffffe          BL       strtok
000022  f7fffffe          BL       atoi
;;;726        kl520_api_dp_set_backlight(_brightness);
000026  f7fffffe          BL       kl520_api_dp_set_backlight
;;;727    }
00002a  b041              ADD      sp,sp,#0x104
00002c  bd00              POP      {pc}
;;;728    
                          ENDP

00002e  0000              DCW      0x0000
                  |L55.48|
000030  206c636d          DCB      " lcm brightness (brightness:0-100)>>\r\n",0
000034  20627269
000038  6768746e
00003c  65737320
000040  28627269
000044  6768746e
000048  6573733a
00004c  302d3130
000050  30293e3e
000054  0d0a00  
000057  00                DCB      0
                  |L55.88|
000058  00                DCB      0
000059  00                DCB      0
00005a  00                DCB      0
00005b  00                DCB      0
                  |L55.92|
00005c  200d0a09          DCB      " \r\n\t",0
000060  00      
000061  00                DCB      0
000062  00                DCB      0
000063  00                DCB      0

                          AREA ||i.sample_lcd_adjust_backlight_step_by_step||, CODE, READONLY, ALIGN=1

                  sample_lcd_adjust_backlight_step_by_step PROC
;;;728    
;;;729    void sample_lcd_adjust_backlight_step_by_step(void)
000000  b510              PUSH     {r4,lr}
;;;730    {
;;;731        u16 i;
;;;732    
;;;733        for(i=0;i<100;i++)
000002  2400              MOVS     r4,#0
                  |L56.4|
;;;734        {
;;;735            kl520_api_dp_set_backlight(i);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       kl520_api_dp_set_backlight
;;;736            osDelay(7);
00000a  2007              MOVS     r0,#7
00000c  f7fffffe          BL       osDelay
000010  1c64              ADDS     r4,r4,#1
000012  b2a4              UXTH     r4,r4                 ;733
000014  2c64              CMP      r4,#0x64              ;733
000016  d3f5              BCC      |L56.4|
;;;737        }
;;;738    
;;;739        for(i=100;i>1;i--)
000018  2464              MOVS     r4,#0x64
                  |L56.26|
;;;740        {
;;;741            kl520_api_dp_set_backlight(i);
00001a  4620              MOV      r0,r4
00001c  f7fffffe          BL       kl520_api_dp_set_backlight
;;;742            osDelay(5);
000020  2005              MOVS     r0,#5
000022  f7fffffe          BL       osDelay
000026  1e64              SUBS     r4,r4,#1
000028  b2a4              UXTH     r4,r4                 ;739
00002a  2c01              CMP      r4,#1                 ;739
00002c  d8f5              BHI      |L56.26|
;;;743        }
;;;744    }
00002e  bd10              POP      {r4,pc}
;;;745    
                          ENDP


                          AREA ||i.sample_log_disable||, CODE, READONLY, ALIGN=2

                  sample_log_disable PROC
;;;2501   
;;;2502   void sample_log_disable(void)
000000  b510              PUSH     {r4,lr}
;;;2503   {
;;;2504       kdp_ipc_init(FALSE);
000002  2000              MOVS     r0,#0
000004  f7fffffe          BL       kdp_ipc_init
;;;2505       kl520_api_log_set_user_level(CPU_ID_SCPU, LOG_NONE);  //scpu
000008  2100              MOVS     r1,#0
00000a  4804              LDR      r0,|L57.28|
00000c  f7fffffe          BL       kl520_api_log_set_user_level
;;;2506       kl520_api_log_set_user_level(CPU_ID_NCPU, LOG_NONE);  //ncpu
000010  e8bd4010          POP      {r4,lr}
000014  2100              MOVS     r1,#0
000016  4802              LDR      r0,|L57.32|
000018  f7ffbffe          B.W      kl520_api_log_set_user_level
;;;2507   }
;;;2508   
                          ENDP

                  |L57.28|
                          DCD      0x53430000
                  |L57.32|
                          DCD      0x4e430000

                          AREA ||i.sample_log_set_user_level||, CODE, READONLY, ALIGN=2

                  sample_log_set_user_level PROC
;;;2508   
;;;2509   void sample_log_set_user_level(void)
000000  b510              PUSH     {r4,lr}
;;;2510   {
;;;2511       u8 cpu_id = _cmd_get_answer_int("[set cpu id : (0:scpu, 1:ncpu) >>");
000002  a006              ADR      r0,|L58.28|
000004  f7fffffe          BL       _cmd_get_answer_int
000008  b2c4              UXTB     r4,r0
;;;2512       u32 level = _cmd_get_answer_int("[set user level : (0~9) >>");
00000a  a00d              ADR      r0,|L58.64|
00000c  f7fffffe          BL       _cmd_get_answer_int
;;;2513       kl520_api_log_set_user_level(cpu_id, level);
000010  b2c1              UXTB     r1,r0
000012  4620              MOV      r0,r4
000014  e8bd4010          POP      {r4,lr}
000018  f7ffbffe          B.W      kl520_api_log_set_user_level
;;;2514   }
;;;2515   
                          ENDP

                  |L58.28|
00001c  5b736574          DCB      "[set cpu id : (0:scpu, 1:ncpu) >>",0
000020  20637075
000024  20696420
000028  3a202830
00002c  3a736370
000030  752c2031
000034  3a6e6370
000038  7529203e
00003c  3e00    
00003e  00                DCB      0
00003f  00                DCB      0
                  |L58.64|
000040  5b736574          DCB      "[set user level : (0~9) >>",0
000044  20757365
000048  72206c65
00004c  76656c20
000050  3a202830
000054  7e392920
000058  3e3e00  
00005b  00                DCB      0

                          AREA ||i.sample_mp_calibration||, CODE, READONLY, ALIGN=1

                  sample_mp_calibration PROC
;;;2522   
;;;2523   void sample_mp_calibration(void)
000000  2100              MOVS     r1,#0
;;;2524   {
;;;2525       /*
;;;2526       BOOL algo_offset_calibration = _cmd_get_answer_int("[offset calibration : (0:Off, 1:On) >>");
;;;2527       BOOL algo_distance_calibration = _cmd_get_answer_int("[distance calibration : (0:Off, 1:On) >>");
;;;2528       BOOL camera_calibration = _cmd_get_answer_int("[camera calibration : (0:Off, 1:On) >>"); //color, 3a, ...
;;;2529       BOOL display_calibration = _cmd_get_answer_int("[display calibration : (0:Off, 1:On) >>"); //x, y, width, height
;;;2530       BOOL touch_calibration = _cmd_get_answer_int("[touch calibration : (0:Off, 1:On) >>"); //x, y, width, height
;;;2531       if (algo_offset_calibration)
;;;2532           kl520_engineering_calibration(0, NULL);
;;;2533       if (algo_distance_calibration)
;;;2534           kl520_engineering_calibration(1, NULL);
;;;2535       if (camera_calibration)
;;;2536           kl520_engineering_calibration(2, NULL);
;;;2537       if (display_calibration)
;;;2538           kl520_engineering_calibration(3, NULL);
;;;2539       if (touch_calibration)
;;;2540           kl520_engineering_calibration(4, NULL);
;;;2541   */
;;;2542       kl520_engineering_calibration(10, NULL);
000002  200a              MOVS     r0,#0xa
000004  f7ffbffe          B.W      kl520_engineering_calibration
;;;2543   }
;;;2544   
                          ENDP


                          AREA ||i.sample_open_video_renderer||, CODE, READONLY, ALIGN=1

                  sample_open_video_renderer PROC
;;;151    
;;;152    void sample_open_video_renderer(void)
000000  2202              MOVS     r2,#2
;;;153    {
;;;154        kl520_api_cam_disp_ctrl(API_CTRL_DISP_OPEN, NULL, PERMANENT_DISP);
000002  2100              MOVS     r1,#0
000004  20c0              MOVS     r0,#0xc0
000006  f7ffbffe          B.W      kl520_api_cam_disp_ctrl
;;;155    }
;;;156    
                          ENDP


                          AREA ||i.sample_power_manager_shutdown||, CODE, READONLY, ALIGN=1

                  sample_power_manager_shutdown PROC
;;;2051   
;;;2052   void sample_power_manager_shutdown(void)
000000  f7ffbffe          B.W      power_manager_shutdown
;;;2053   {
;;;2054       power_manager_shutdown();
;;;2055   }
;;;2056   
                          ENDP


                          AREA ||i.sample_power_manager_sw_reset||, CODE, READONLY, ALIGN=1

                  sample_power_manager_sw_reset PROC
;;;2046   
;;;2047   void sample_power_manager_sw_reset(void)
000000  f7ffbffe          B.W      power_mgr_sw_reset
;;;2048   {
;;;2049       power_mgr_sw_reset();
;;;2050   }
;;;2051   
                          ENDP


                          AREA ||i.sample_poweroff||, CODE, READONLY, ALIGN=1

                  sample_poweroff PROC
;;;2496   
;;;2497   void sample_poweroff(void)
000000  f7ffbffe          B.W      kl520_api_poweroff
;;;2498   {
;;;2499       kl520_api_poweroff();
;;;2500   }
;;;2501   
                          ENDP


                          AREA ||i.sample_pwm_timer_test_close||, CODE, READONLY, ALIGN=1

                  sample_pwm_timer_test_close PROC
;;;1540   }
;;;1541   void sample_pwm_timer_test_close(void)
000000  2004              MOVS     r0,#4
;;;1542   {
;;;1543       kl520_api_timer_close(PWMTIMER4);
000002  f7ffbffe          B.W      kl520_api_timer_close
;;;1544   }
;;;1545   
                          ENDP


                          AREA ||i.sample_pwm_timer_test_init||, CODE, READONLY, ALIGN=2

                  sample_pwm_timer_test_init PROC
;;;1536   
;;;1537   void sample_pwm_timer_test_init(void)
000000  4901              LDR      r1,|L65.8|
;;;1538   {
;;;1539       kl520_api_timer_init(PWMTIMER4, PWMTMR_5000MSEC_PERIOD);
000002  2004              MOVS     r0,#4
000004  f7ffbffe          B.W      kl520_api_timer_init
;;;1540   }
;;;1541   void sample_pwm_timer_test_close(void)
                          ENDP

                  |L65.8|
                          DCD      0x1dcd6500

                          AREA ||i.sample_rgb_led_breathe||, CODE, READONLY, ALIGN=1

                  sample_rgb_led_breathe PROC
;;;1054   extern osThreadId_t tid_rgb_led_gradually;
;;;1055   void sample_rgb_led_breathe(void)
000000  4770              BX       lr
;;;1056   {
;;;1057   #if (CFG_AI_TYPE == AI_TYPE_R1N1 || CFG_AI_TYPE == AI_TYPE_R1)
;;;1058       kdp_e2e_rgb_led_gradually();
;;;1059       if(tid_rgb_led_gradually)
;;;1060       {
;;;1061           osThreadJoin(tid_rgb_led_gradually);
;;;1062           tid_rgb_led_gradually = 0;
;;;1063       }
;;;1064   #endif
;;;1065   }
;;;1066   void sample_io_rgb_camera_power_on(void) {rgb_camera_power_on();}
                          ENDP


                          AREA ||i.sample_set_dbid_offset||, CODE, READONLY, ALIGN=2

                  sample_set_dbid_offset PROC
;;;2515   
;;;2516   void sample_set_dbid_offset()
000000  b510              PUSH     {r4,lr}
;;;2517   {
;;;2518       u8 _id_off = _cmd_get_answer_int("[set db offset : (0 ~ 80) >>");
000002  a007              ADR      r0,|L67.32|
000004  f7fffffe          BL       _cmd_get_answer_int
000008  b2c4              UXTB     r4,r0
;;;2519       dbg_msg_console ("setting db offset to %d.", _id_off);
00000a  4622              MOV      r2,r4
00000c  a10c              ADR      r1,|L67.64|
00000e  2001              MOVS     r0,#1
000010  f7fffffe          BL       kdp_level_printf
;;;2520       update_user_db_offset(_id_off);
000014  4620              MOV      r0,r4
000016  e8bd4010          POP      {r4,lr}
00001a  f7ffbffe          B.W      update_user_db_offset
;;;2521   }
;;;2522   
                          ENDP

00001e  0000              DCW      0x0000
                  |L67.32|
000020  5b736574          DCB      "[set db offset : (0 ~ 80) >>",0
000024  20646220
000028  6f666673
00002c  6574203a
000030  20283020
000034  7e203830
000038  29203e3e
00003c  00      
00003d  00                DCB      0
00003e  00                DCB      0
00003f  00                DCB      0
                  |L67.64|
000040  73657474          DCB      "setting db offset to %d.\r\n",0
000044  696e6720
000048  6462206f
00004c  66667365
000050  7420746f
000054  2025642e
000058  0d0a00  
00005b  00                DCB      0

                          AREA ||i.sample_set_e2e_prop||, CODE, READONLY, ALIGN=2

                  sample_set_e2e_prop PROC
;;;517    
;;;518    void sample_set_e2e_prop()
000000  b5f0              PUSH     {r4-r7,lr}
;;;519    {
;;;520        char buf[256];
;;;521        bool quit = false;
;;;522        float r1_confident = 0.0;
;;;523        float n1_confident = 0.0;
;;;524        int lm_diff = 0;
;;;525        int para;
;;;526    
;;;527        while(!quit)
;;;528        {
;;;529            dbg_msg_console("(1)Set r1_lm_chk_low_confident(0.000~0.999)");
000002  2501              MOVS     r5,#1
000004  b0c1              SUB      sp,sp,#0x104          ;519
000006  2600              MOVS     r6,#0
                  |L68.8|
000008  a151              ADR      r1,|L68.336|
00000a  2001              MOVS     r0,#1
00000c  f7fffffe          BL       kdp_level_printf
;;;530            dbg_msg_console("(2)Set n1_lm_chk_low_confident(0.000~0.999)");
000010  a15b              ADR      r1,|L68.384|
000012  2001              MOVS     r0,#1
000014  f7fffffe          BL       kdp_level_printf
;;;531            dbg_msg_console("(3)Set rgb_nir_lm_diff_threshold");
000018  a165              ADR      r1,|L68.432|
00001a  2001              MOVS     r0,#1
00001c  f7fffffe          BL       kdp_level_printf
;;;532            dbg_msg_console("(4)exit");
000020  a16c              ADR      r1,|L68.468|
000022  2001              MOVS     r0,#1
000024  f7fffffe          BL       kdp_level_printf
;;;533    
;;;534            kdp_gets(DEBUG_CONSOLE, buf);
000028  4669              MOV      r1,sp
00002a  2000              MOVS     r0,#0
00002c  f7fffffe          BL       kdp_gets
;;;535            dbg_msg_nocrlf("");
000030  a06b              ADR      r0,|L68.480|
000032  f7fffffe          BL       kdp_printf_nocrlf
;;;536    
;;;537            para = atoi(strtok(buf, " \r\n\t"));
000036  a16b              ADR      r1,|L68.484|
000038  4668              MOV      r0,sp
00003a  f7fffffe          BL       strtok
00003e  f7fffffe          BL       atoi
000042  4607              MOV      r7,r0
;;;538    
;;;539            kdp_e2e_prop *prop = kdp_e2e_prop_get_inst();
000044  f7fffffe          BL       kdp_e2e_prop_get_inst
000048  4604              MOV      r4,r0
;;;540    
;;;541            switch(para)
00004a  2f01              CMP      r7,#1
00004c  d007              BEQ      |L68.94|
00004e  2f02              CMP      r7,#2
000050  d031              BEQ      |L68.182|
000052  2f03              CMP      r7,#3
000054  d05d              BEQ      |L68.274|
000056  2f04              CMP      r7,#4
000058  d1d6              BNE      |L68.8|
;;;542            {
;;;543                case 1:
;;;544                    r1_confident = kdp_e2e_prop_get_value(prop, r1_lm_chk_low_confident);
;;;545                    dbg_msg_console("The current r1_confident = %f, please set the new value:", r1_confident);
;;;546                    kdp_gets(DEBUG_CONSOLE, buf);
;;;547                    dbg_msg_nocrlf("");
;;;548                    r1_confident = atof(strtok(buf, " \r\n\t"));
;;;549                    kdp_e2e_prop_set_manual_value(prop, r1_lm_chk_low_confident, r1_confident);
;;;550                    break;
;;;551                case 2:
;;;552                    n1_confident = kdp_e2e_prop_get2_value(n1_lm_chk_low_confident);
;;;553                    dbg_msg_console("The current n1_confident = %f", n1_confident);
;;;554                    kdp_gets(DEBUG_CONSOLE, buf);
;;;555                    dbg_msg_nocrlf("");
;;;556                    n1_confident = atof(strtok(buf, " \r\n\t"));
;;;557                    kdp_e2e_prop_set_manual_value(prop, n1_lm_chk_low_confident, n1_confident);
;;;558                    break;
;;;559                case 3:
;;;560                    lm_diff = kdp_e2e_prop_get2_value(rgb_nir_lm_diff_threshold);
;;;561                    dbg_msg_console("The current lm_diff = %d", lm_diff);
;;;562                    kdp_gets(DEBUG_CONSOLE, buf);
;;;563                    dbg_msg_nocrlf("");
;;;564                    lm_diff = atoi(strtok(buf, " \r\n\t"));
;;;565                    kdp_e2e_prop_set_manual_value(prop, rgb_nir_lm_diff_threshold, lm_diff);
;;;566                    break;
;;;567                case 4:
;;;568                    quit = true;
;;;569                    break;
;;;570                default:
;;;571                    break;
;;;572            }
;;;573        }
;;;574    }
00005a  b041              ADD      sp,sp,#0x104
00005c  bdf0              POP      {r4-r7,pc}
                  |L68.94|
00005e  6b20              LDR      r0,[r4,#0x30]         ;545
000060  f7fffffe          BL       __aeabi_f2d
000064  ec410b10          VMOV     d0,r0,r1              ;545
000068  a160              ADR      r1,|L68.492|
00006a  ec532b10          VMOV     r2,r3,d0              ;545
00006e  2001              MOVS     r0,#1                 ;545
000070  f7fffffe          BL       kdp_level_printf
000074  4669              MOV      r1,sp                 ;546
000076  2000              MOVS     r0,#0                 ;546
000078  f7fffffe          BL       kdp_gets
00007c  a058              ADR      r0,|L68.480|
00007e  f7fffffe          BL       kdp_printf_nocrlf
000082  a158              ADR      r1,|L68.484|
000084  4668              MOV      r0,sp                 ;548
000086  f7fffffe          BL       strtok
00008a  f7fffffe          BL       __hardfp_atof
00008e  ec510b10          VMOV     r0,r1,d0              ;548
000092  f7fffffe          BL       __aeabi_d2f
000096  f884502d          STRB     r5,[r4,#0x2d]         ;549
00009a  ee000a10          VMOV     s0,r0                 ;548
00009e  edd40a0c          VLDR     s1,[r4,#0x30]         ;549
0000a2  eef40a40          VCMP.F32 s1,s0                 ;549
0000a6  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;549
0000aa  d0ad              BEQ      |L68.8|
0000ac  f884602c          STRB     r6,[r4,#0x2c]         ;549
0000b0  ed840a0c          VSTR     s0,[r4,#0x30]         ;549
                  |L68.180|
0000b4  e7a8              B        |L68.8|
                  |L68.182|
0000b6  f7fffffe          BL       kdp_e2e_prop_get_inst
0000ba  6c80              LDR      r0,[r0,#0x48]         ;552
0000bc  f7fffffe          BL       __aeabi_f2d
0000c0  ec410b10          VMOV     d0,r0,r1              ;553
0000c4  a158              ADR      r1,|L68.552|
0000c6  ec532b10          VMOV     r2,r3,d0              ;553
0000ca  2001              MOVS     r0,#1                 ;553
0000cc  f7fffffe          BL       kdp_level_printf
0000d0  4669              MOV      r1,sp                 ;554
0000d2  2000              MOVS     r0,#0                 ;554
0000d4  f7fffffe          BL       kdp_gets
0000d8  a041              ADR      r0,|L68.480|
0000da  f7fffffe          BL       kdp_printf_nocrlf
0000de  a141              ADR      r1,|L68.484|
0000e0  4668              MOV      r0,sp                 ;556
0000e2  f7fffffe          BL       strtok
0000e6  f7fffffe          BL       __hardfp_atof
0000ea  ec510b10          VMOV     r0,r1,d0              ;556
0000ee  f7fffffe          BL       __aeabi_d2f
0000f2  f8845045          STRB     r5,[r4,#0x45]         ;557
0000f6  ee000a10          VMOV     s0,r0                 ;556
0000fa  edd40a12          VLDR     s1,[r4,#0x48]         ;557
0000fe  eef40a40          VCMP.F32 s1,s0                 ;557
000102  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;557
000106  d0d5              BEQ      |L68.180|
000108  f8846044          STRB     r6,[r4,#0x44]         ;557
00010c  ed840a12          VSTR     s0,[r4,#0x48]         ;557
000110  e77a              B        |L68.8|
                  |L68.274|
000112  f7fffffe          BL       kdp_e2e_prop_get_inst
000116  f8d020d8          LDR      r2,[r0,#0xd8]         ;561
00011a  a14b              ADR      r1,|L68.584|
00011c  2001              MOVS     r0,#1                 ;561
00011e  f7fffffe          BL       kdp_level_printf
000122  4669              MOV      r1,sp                 ;562
000124  2000              MOVS     r0,#0                 ;562
000126  f7fffffe          BL       kdp_gets
00012a  a02d              ADR      r0,|L68.480|
00012c  f7fffffe          BL       kdp_printf_nocrlf
000130  a12c              ADR      r1,|L68.484|
000132  4668              MOV      r0,sp                 ;564
000134  f7fffffe          BL       strtok
000138  f7fffffe          BL       atoi
00013c  f88450d5          STRB     r5,[r4,#0xd5]         ;565
000140  f8d410d8          LDR      r1,[r4,#0xd8]         ;565
000144  4281              CMP      r1,r0                 ;565
000146  d0b5              BEQ      |L68.180|
000148  f8046fd4          STRB     r6,[r4,#0xd4]!        ;565
00014c  6060              STR      r0,[r4,#4]            ;565
00014e  e75b              B        |L68.8|
;;;575    
                          ENDP

                  |L68.336|
000150  28312953          DCB      "(1)Set r1_lm_chk_low_confident(0.000~0.999)\r\n",0
000154  65742072
000158  315f6c6d
00015c  5f63686b
000160  5f6c6f77
000164  5f636f6e
000168  66696465
00016c  6e742830
000170  2e303030
000174  7e302e39
000178  3939290d
00017c  0a00    
00017e  00                DCB      0
00017f  00                DCB      0
                  |L68.384|
000180  28322953          DCB      "(2)Set n1_lm_chk_low_confident(0.000~0.999)\r\n",0
000184  6574206e
000188  315f6c6d
00018c  5f63686b
000190  5f6c6f77
000194  5f636f6e
000198  66696465
00019c  6e742830
0001a0  2e303030
0001a4  7e302e39
0001a8  3939290d
0001ac  0a00    
0001ae  00                DCB      0
0001af  00                DCB      0
                  |L68.432|
0001b0  28332953          DCB      "(3)Set rgb_nir_lm_diff_threshold\r\n",0
0001b4  65742072
0001b8  67625f6e
0001bc  69725f6c
0001c0  6d5f6469
0001c4  66665f74
0001c8  68726573
0001cc  686f6c64
0001d0  0d0a00  
0001d3  00                DCB      0
                  |L68.468|
0001d4  28342965          DCB      "(4)exit\r\n",0
0001d8  7869740d
0001dc  0a00    
0001de  00                DCB      0
0001df  00                DCB      0
                  |L68.480|
0001e0  00                DCB      0
0001e1  00                DCB      0
0001e2  00                DCB      0
0001e3  00                DCB      0
                  |L68.484|
0001e4  200d0a09          DCB      " \r\n\t",0
0001e8  00      
0001e9  00                DCB      0
0001ea  00                DCB      0
0001eb  00                DCB      0
                  |L68.492|
0001ec  54686520          DCB      "The current r1_confident = %f, please set the new value"
0001f0  63757272
0001f4  656e7420
0001f8  72315f63
0001fc  6f6e6669
000200  64656e74
000204  203d2025
000208  662c2070
00020c  6c656173
000210  65207365
000214  74207468
000218  65206e65
00021c  77207661
000220  6c7565  
000223  3a0d0a00          DCB      ":\r\n",0
000227  00                DCB      0
                  |L68.552|
000228  54686520          DCB      "The current n1_confident = %f\r\n",0
00022c  63757272
000230  656e7420
000234  6e315f63
000238  6f6e6669
00023c  64656e74
000240  203d2025
000244  660d0a00
                  |L68.584|
000248  54686520          DCB      "The current lm_diff = %d\r\n",0
00024c  63757272
000250  656e7420
000254  6c6d5f64
000258  69666620
00025c  3d202564
000260  0d0a00  
000263  00                DCB      0

                          AREA ||i.sample_settings_delete||, CODE, READONLY, ALIGN=1

                  sample_settings_delete PROC
;;;1417   
;;;1418   void sample_settings_delete(void)
000000  f7ffbffe          B.W      kl520_api_settings_delete
;;;1419   {
;;;1420       kl520_api_settings_delete();
;;;1421   }
;;;1422   
                          ENDP


                          AREA ||i.sample_sim_fdfr||, CODE, READONLY, ALIGN=1

                  sample_sim_fdfr PROC
;;;2081   
;;;2082   void sample_sim_fdfr(void)
000000  4770              BX       lr
;;;2083   {
;;;2084   #if CFG_USB_SIMTOOL == 1
;;;2085       kl520_sim_ctx ctx = {0};
;;;2086       kl520_api_sim_fdfr(&ctx);
;;;2087   #endif
;;;2088   }
;;;2089   
                          ENDP


                          AREA ||i.sample_ssp_spi||, CODE, READONLY, ALIGN=2

                  sample_ssp_spi PROC
;;;1573   #else
;;;1574   void sample_ssp_spi(void) {
000000  a101              ADR      r1,|L71.8|
;;;1575       dbg_msg_console("warning, SSP_SPI_MASTER_EN is not defined.\n");
000002  2001              MOVS     r0,#1
000004  f7ffbffe          B.W      kdp_level_printf
;;;1576   }
;;;1577   #endif
                          ENDP

                  |L71.8|
000008  7761726e          DCB      "warning, SSP_SPI_MASTER_EN is not defined.\n\r\n",0
00000c  696e672c
000010  20535350
000014  5f535049
000018  5f4d4153
00001c  5445525f
000020  454e2069
000024  73206e6f
000028  74206465
00002c  66696e65
000030  642e0a0d
000034  0a00    
000036  00                DCB      0
000037  00                DCB      0

                          AREA ||i.sample_stability_add_user||, CODE, READONLY, ALIGN=2

                  sample_stability_add_user PROC
;;;2010   
;;;2011   void sample_stability_add_user(void)
000000  b51c              PUSH     {r2-r4,lr}
;;;2012   {
;;;2013       int count = 0;
000002  2500              MOVS     r5,#0
;;;2014       u8 face_id = 0;
000004  462e              MOV      r6,r5
000006  f88d5004          STRB     r5,[sp,#4]
;;;2015       u32 events = 0;
;;;2016   
;;;2017       while(1)
;;;2018       {
;;;2019           kl520_api_face_add_set_timeout(2);
;;;2020   #if ( KDP_BIT_CTRL_MODE == YES )
;;;2021           kl520_api_face_add(0, 0, DISPLAY_WIDTH, DISPLAY_HEIGHT, BIT_CTRL_FACE_ADD_NORMAL);
;;;2022   #else
;;;2023           kl520_api_face_add(0, 0, DISPLAY_WIDTH, DISPLAY_HEIGHT, FACE_ADD_TYPE_NORMAL);
00000a  f44f77a0          MOV      r7,#0x140
;;;2024   #endif
;;;2025   
;;;2026           events = wait_event(kl520_api_get_event(), KL520_APP_FLAG_FDFR);
;;;2027           dbg_msg_console("sample_face_add events=%x", events);
;;;2028           int ret = kl520_api_face_get_result(&face_id);
;;;2029           dbg_msg_console("sample_face_add ret=%x", ret);
;;;2030   
;;;2031           if (KL520_FACE_OK == ret){
;;;2032               dbg_msg_console("sample_face_add, KL520_FACE_OK, face_id=0x%x", face_id);}
;;;2033           else if(KL520_FACE_EXIST == ret){
;;;2034               dbg_msg_console("sample_face_add, KL520_FACE_EXIST");}
;;;2035           else{
;;;2036               dbg_msg_console("sample_face_add, ERROR, ret=0x%x", ret);}
;;;2037   
;;;2038           osDelay(2000);
00000e  f44f68fa          MOV      r8,#0x7d0
                  |L72.18|
000012  2002              MOVS     r0,#2                 ;2019
000014  f7fffffe          BL       kl520_api_face_add_set_timeout
000018  2100              MOVS     r1,#0                 ;2023
00001a  23f0              MOVS     r3,#0xf0              ;2023
00001c  463a              MOV      r2,r7                 ;2023
00001e  4608              MOV      r0,r1                 ;2023
000020  9600              STR      r6,[sp,#0]            ;2023
000022  f7fffffe          BL       kl520_api_face_add
000026  f7fffffe          BL       kl520_api_get_event
00002a  2107              MOVS     r1,#7                 ;2026
00002c  f7fffffe          BL       wait_event
000030  4602              MOV      r2,r0                 ;2026
000032  a115              ADR      r1,|L72.136|
000034  2001              MOVS     r0,#1                 ;2027
000036  f7fffffe          BL       kdp_level_printf
00003a  a801              ADD      r0,sp,#4              ;2028
00003c  f7fffffe          BL       kl520_api_face_get_result
000040  4604              MOV      r4,r0                 ;2028
000042  4602              MOV      r2,r0                 ;2029
000044  a117              ADR      r1,|L72.164|
000046  2001              MOVS     r0,#1                 ;2029
000048  f7fffffe          BL       kdp_level_printf
00004c  b194              CBZ      r4,|L72.116|
00004e  2c07              CMP      r4,#7                 ;2033
000050  d014              BEQ      |L72.124|
000052  4622              MOV      r2,r4                 ;2036
000054  a11a              ADR      r1,|L72.192|
                  |L72.86|
000056  2001              MOVS     r0,#1                 ;2036
000058  f7fffffe          BL       kdp_level_printf
                  |L72.92|
00005c  4640              MOV      r0,r8
00005e  f7fffffe          BL       osDelay
;;;2039   
;;;2040           sample_face_close();
000062  f7fffffe          BL       sample_face_close
000066  1c6d              ADDS     r5,r5,#1
;;;2041           count++;
;;;2042           dbg_msg_console("==========================================================================%d", count);
000068  462a              MOV      r2,r5
00006a  491e              LDR      r1,|L72.228|
00006c  2001              MOVS     r0,#1
00006e  f7fffffe          BL       kdp_level_printf
000072  e7ce              B        |L72.18|
                  |L72.116|
000074  f89d2004          LDRB     r2,[sp,#4]            ;2032
000078  a11b              ADR      r1,|L72.232|
00007a  e7ec              B        |L72.86|
                  |L72.124|
00007c  a126              ADR      r1,|L72.280|
00007e  2001              MOVS     r0,#1                 ;2034
000080  f7fffffe          BL       kdp_level_printf
000084  e7ea              B        |L72.92|
;;;2043       }
;;;2044   
;;;2045   }
;;;2046   
                          ENDP

000086  0000              DCW      0x0000
                  |L72.136|
000088  73616d70          DCB      "sample_face_add events=%x\r\n",0
00008c  6c655f66
000090  6163655f
000094  61646420
000098  6576656e
00009c  74733d25
0000a0  780d0a00
                  |L72.164|
0000a4  73616d70          DCB      "sample_face_add ret=%x\r\n",0
0000a8  6c655f66
0000ac  6163655f
0000b0  61646420
0000b4  7265743d
0000b8  25780d0a
0000bc  00      
0000bd  00                DCB      0
0000be  00                DCB      0
0000bf  00                DCB      0
                  |L72.192|
0000c0  73616d70          DCB      "sample_face_add, ERROR, ret=0x%x\r\n",0
0000c4  6c655f66
0000c8  6163655f
0000cc  6164642c
0000d0  20455252
0000d4  4f522c20
0000d8  7265743d
0000dc  30782578
0000e0  0d0a00  
0000e3  00                DCB      0
                  |L72.228|
                          DCD      ||.conststring||+0x32c
                  |L72.232|
0000e8  73616d70          DCB      "sample_face_add, KL520_FACE_OK, face_id=0x%x\r\n",0
0000ec  6c655f66
0000f0  6163655f
0000f4  6164642c
0000f8  204b4c35
0000fc  32305f46
000100  4143455f
000104  4f4b2c20
000108  66616365
00010c  5f69643d
000110  30782578
000114  0d0a00  
000117  00                DCB      0
                  |L72.280|
000118  73616d70          DCB      "sample_face_add, KL520_FACE_EXIST\r\n",0
00011c  6c655f66
000120  6163655f
000124  6164642c
000128  204b4c35
00012c  32305f46
000130  4143455f
000134  45584953
000138  540d0a00

                          AREA ||i.sample_stability_all||, CODE, READONLY, ALIGN=2

                  sample_stability_all PROC
;;;1956   
;;;1957   void sample_stability_all(void)
000000  2400              MOVS     r4,#0
;;;1958   {
;;;1959       int count = 0;
;;;1960       int all = _cmd_get_answer_int("[0:touch only, 1:all >>");
000002  a020              ADR      r0,|L73.132|
000004  f7fffffe          BL       _cmd_get_answer_int
;;;1961       //BOOL app_touch_is_inited;
;;;1962       if (all) {
;;;1963   
;;;1964           sample_touch_panel_open();
;;;1965           sample_touch_app_enable();
;;;1966   
;;;1967           while(1)
;;;1968           {
;;;1969           #if CFG_TOUCH_ENABLE == YES
;;;1970               //app_touch_is_inited = sample_app_touch_is_inited();
;;;1971               //dbg_msg_console("app_touch_is_inited=%d", app_touch_is_inited);
;;;1972               //if (1 == app_touch_is_inited)
;;;1973               //    sample_touch_app_disable();
;;;1974           #endif
;;;1975   
;;;1976               kl520_api_face_recognition_test(0, 0, DISPLAY_WIDTH, DISPLAY_HEIGHT);
;;;1977   
;;;1978           #if CFG_TOUCH_ENABLE == YES
;;;1979               //if (1 == app_touch_is_inited)
;;;1980               //    sample_touch_app_enable();
;;;1981           #endif
;;;1982   
;;;1983   
;;;1984               osDelay(2000);
;;;1985               sample_face_close();
;;;1986               osDelay(1000);
000008  f44f757a          MOV      r5,#0x3e8
00000c  b1f0              CBZ      r0,|L73.76|
00000e  f44f76a0          MOV      r6,#0x140             ;1976
000012  006f              LSLS     r7,r5,#1              ;1984
                  |L73.20|
000014  2100              MOVS     r1,#0                 ;1976
000016  23f0              MOVS     r3,#0xf0              ;1976
000018  4632              MOV      r2,r6                 ;1976
00001a  4608              MOV      r0,r1                 ;1976
00001c  f7fffffe          BL       kl520_api_face_recognition_test
000020  4638              MOV      r0,r7                 ;1984
000022  f7fffffe          BL       osDelay
000026  f7fffffe          BL       sample_face_close
00002a  4628              MOV      r0,r5
00002c  f7fffffe          BL       osDelay
000030  1c64              ADDS     r4,r4,#1
;;;1987               count++;
;;;1988               dbg_msg_console("==========================================================================%d", count);
000032  4622              MOV      r2,r4
000034  4919              LDR      r1,|L73.156|
000036  2001              MOVS     r0,#1
000038  f7fffffe          BL       kdp_level_printf
;;;1989               dbg_msg_console("Thread NUM:%d",osThreadGetCount());
00003c  f7fffffe          BL       osThreadGetCount
000040  4602              MOV      r2,r0
000042  a117              ADR      r1,|L73.160|
000044  2001              MOVS     r0,#1
000046  f7fffffe          BL       kdp_level_printf
00004a  e7e3              B        |L73.20|
                  |L73.76|
;;;1990           }
;;;1991       }
;;;1992       else {
;;;1993           for (;;) {
;;;1994   
;;;1995               sample_touch_panel_open();
;;;1996               osDelay(1000);
;;;1997               sample_touch_app_enable();
;;;1998               osDelay(3000);
00004c  f64036b8          MOV      r6,#0xbb8
                  |L73.80|
000050  4628              MOV      r0,r5                 ;1996
000052  f7fffffe          BL       osDelay
000056  4630              MOV      r0,r6
000058  f7fffffe          BL       osDelay
;;;1999               sample_touch_app_disable();
;;;2000               osDelay(1000);
00005c  4628              MOV      r0,r5
00005e  f7fffffe          BL       osDelay
;;;2001               sample_touch_panel_close();
;;;2002               osDelay(1000);
000062  4628              MOV      r0,r5
000064  f7fffffe          BL       osDelay
000068  1c64              ADDS     r4,r4,#1
;;;2003   
;;;2004               count++;
;;;2005               dbg_msg_console("==========================================================================%d", count);
00006a  4622              MOV      r2,r4
00006c  490b              LDR      r1,|L73.156|
00006e  2001              MOVS     r0,#1
000070  f7fffffe          BL       kdp_level_printf
;;;2006               dbg_msg_console("Thread NUM:%d",osThreadGetCount());
000074  f7fffffe          BL       osThreadGetCount
000078  4602              MOV      r2,r0
00007a  a109              ADR      r1,|L73.160|
00007c  2001              MOVS     r0,#1
00007e  f7fffffe          BL       kdp_level_printf
000082  e7e5              B        |L73.80|
;;;2007           }
;;;2008       }
;;;2009   }
;;;2010   
                          ENDP

                  |L73.132|
000084  5b303a74          DCB      "[0:touch only, 1:all >>",0
000088  6f756368
00008c  206f6e6c
000090  792c2031
000094  3a616c6c
000098  203e3e00
                  |L73.156|
                          DCD      ||.conststring||+0x32c
                  |L73.160|
0000a0  54687265          DCB      "Thread NUM:%d\r\n",0
0000a4  6164204e
0000a8  554d3a25
0000ac  640d0a00

                          AREA ||i.sample_stability_recognition||, CODE, READONLY, ALIGN=2

                  sample_stability_recognition PROC
;;;1930   
;;;1931   void sample_stability_recognition(void)
000000  b570              PUSH     {r4-r6,lr}
;;;1932   {
;;;1933       static const int k_wish_timeout = 3;
;;;1934       int bytimer = _cmd_get_answer_int("[0:for , 1:timer >>");
000002  a018              ADR      r0,|L74.100|
000004  f7fffffe          BL       _cmd_get_answer_int
000008  4604              MOV      r4,r0
;;;1935   
;;;1936       kl520_api_face_recognition_set_timeout(k_wish_timeout);
00000a  2003              MOVS     r0,#3
00000c  f7fffffe          BL       kl520_api_face_recognition_set_timeout
;;;1937       if (bytimer) {
000010  b16c              CBZ      r4,|L74.46|
;;;1938   
;;;1939           tiemr_id = osTimerNew(_stability_recognition_tc, osTimerPeriodic, (void*)&k_wish_timeout, NULL);
000012  2300              MOVS     r3,#0
000014  4a18              LDR      r2,|L74.120|
000016  2101              MOVS     r1,#1
000018  4818              LDR      r0,|L74.124|
00001a  f7fffffe          BL       osTimerNew
00001e  4918              LDR      r1,|L74.128|
;;;1940           osTimerStart(tiemr_id, (k_wish_timeout + 2) * 1000);
000020  6148              STR      r0,[r1,#0x14]  ; tiemr_id
000022  e8bd4070          POP      {r4-r6,lr}
000026  f2413188          MOV      r1,#0x1388
00002a  f7ffbffe          B.W      osTimerStart
                  |L74.46|
;;;1941       }
;;;1942       else {
;;;1943           int count = 0;
00002e  2400              MOVS     r4,#0
;;;1944           for (;;) {
;;;1945               sample_face_recognition_without_timeout_size();
;;;1946               osDelay(1);
;;;1947               sample_face_close();
;;;1948               osDelay(k_wish_timeout * 1000);
000030  f64035b8          MOV      r5,#0xbb8
                  |L74.52|
000034  f7fffffe          BL       sample_face_recognition_without_timeout_size
000038  2001              MOVS     r0,#1                 ;1946
00003a  f7fffffe          BL       osDelay
00003e  f7fffffe          BL       sample_face_close
000042  4628              MOV      r0,r5
000044  f7fffffe          BL       osDelay
000048  1c64              ADDS     r4,r4,#1
;;;1949   
;;;1950               count++;
;;;1951               dbg_msg_console("==========================================================================%d", count);
00004a  4622              MOV      r2,r4
00004c  490d              LDR      r1,|L74.132|
00004e  2001              MOVS     r0,#1
000050  f7fffffe          BL       kdp_level_printf
;;;1952               dbg_msg_console("Thread NUM:%d",osThreadGetCount());
000054  f7fffffe          BL       osThreadGetCount
000058  4602              MOV      r2,r0
00005a  a10b              ADR      r1,|L74.136|
00005c  2001              MOVS     r0,#1
00005e  f7fffffe          BL       kdp_level_printf
000062  e7e7              B        |L74.52|
;;;1953           }
;;;1954       }
;;;1955   }
;;;1956   
                          ENDP

                  |L74.100|
000064  5b303a66          DCB      "[0:for , 1:timer >>",0
000068  6f72202c
00006c  20313a74
000070  696d6572
000074  203e3e00
                  |L74.120|
                          DCD      ||.constdata||
                  |L74.124|
                          DCD      _stability_recognition_tc
                  |L74.128|
                          DCD      ||.data||
                  |L74.132|
                          DCD      ||.conststring||+0x32c
                  |L74.136|
000088  54687265          DCB      "Thread NUM:%d\r\n",0
00008c  6164204e
000090  554d3a25
000094  640d0a00

                          AREA ||i.sample_stability_recognition_test||, CODE, READONLY, ALIGN=2

                  sample_stability_recognition_test PROC
;;;1902   
;;;1903   void sample_stability_recognition_test(void)
000000  2400              MOVS     r4,#0
;;;1904   {
;;;1905       int count = 0;
;;;1906       while(1)
;;;1907       {
;;;1908           kl520_api_face_recognition_test(0, 0, DISPLAY_WIDTH, DISPLAY_HEIGHT);
000002  f44f75a0          MOV      r5,#0x140
;;;1909           osDelay(3000);
000006  f64036b8          MOV      r6,#0xbb8
;;;1910           sample_face_close();
;;;1911           osDelay(2000);
00000a  f44f67fa          MOV      r7,#0x7d0
                  |L75.14|
00000e  2100              MOVS     r1,#0                 ;1908
000010  23f0              MOVS     r3,#0xf0              ;1908
000012  462a              MOV      r2,r5                 ;1908
000014  4608              MOV      r0,r1                 ;1908
000016  f7fffffe          BL       kl520_api_face_recognition_test
00001a  4630              MOV      r0,r6                 ;1909
00001c  f7fffffe          BL       osDelay
000020  f7fffffe          BL       sample_face_close
000024  4638              MOV      r0,r7
000026  f7fffffe          BL       osDelay
00002a  1c64              ADDS     r4,r4,#1
;;;1912           count++;
;;;1913           dbg_msg_console("==========================================================================%d", count);
00002c  4622              MOV      r2,r4
00002e  4906              LDR      r1,|L75.72|
000030  2001              MOVS     r0,#1
000032  f7fffffe          BL       kdp_level_printf
;;;1914           dbg_msg_console("Thread NUM:%d",osThreadGetCount());
000036  f7fffffe          BL       osThreadGetCount
00003a  4602              MOV      r2,r0
00003c  a103              ADR      r1,|L75.76|
00003e  2001              MOVS     r0,#1
000040  f7fffffe          BL       kdp_level_printf
000044  e7e3              B        |L75.14|
;;;1915   
;;;1916       }
;;;1917   }
;;;1918   osTimerId_t tiemr_id;
                          ENDP

000046  0000              DCW      0x0000
                  |L75.72|
                          DCD      ||.conststring||+0x32c
                  |L75.76|
00004c  54687265          DCB      "Thread NUM:%d\r\n",0
000050  6164204e
000054  554d3a25
000058  640d0a00

                          AREA ||i.sample_switch_e2e_board_params||, CODE, READONLY, ALIGN=2

                  sample_switch_e2e_board_params PROC
;;;2480   
;;;2481   void sample_switch_e2e_board_params(void)
000000  b510              PUSH     {r4,lr}
;;;2482   {
;;;2483       s32 serial_no, sub_id;
;;;2484   
;;;2485       serial_no   = (s32)_cmd_get_answer_int("set serial no. of board params (0~1): ");
000002  a006              ADR      r0,|L76.28|
000004  f7fffffe          BL       _cmd_get_answer_int
000008  4604              MOV      r4,r0
;;;2486       sub_id      = (s32)_cmd_get_answer_int("set sub id of board params (0~1): ");
00000a  a00e              ADR      r0,|L76.68|
00000c  f7fffffe          BL       _cmd_get_answer_int
000010  4601              MOV      r1,r0
;;;2487       kdp_e2e_face_switch_board_params(serial_no, sub_id);
000012  4620              MOV      r0,r4
000014  e8bd4010          POP      {r4,lr}
000018  f7ffbffe          B.W      kdp_e2e_face_switch_board_params
;;;2488   }
;;;2489   
                          ENDP

                  |L76.28|
00001c  73657420          DCB      "set serial no. of board params (0~1): ",0
000020  73657269
000024  616c206e
000028  6f2e206f
00002c  6620626f
000030  61726420
000034  70617261
000038  6d732028
00003c  307e3129
000040  3a2000  
000043  00                DCB      0
                  |L76.68|
000044  73657420          DCB      "set sub id of board params (0~1): ",0
000048  73756220
00004c  6964206f
000050  6620626f
000054  61726420
000058  70617261
00005c  6d732028
000060  307e3129
000064  3a2000  
000067  00                DCB      0

                          AREA ||i.sample_switch_rbg_nir||, CODE, READONLY, ALIGN=1

                  sample_switch_rbg_nir PROC
;;;2067   
;;;2068   void sample_switch_rbg_nir(void)
000000  b510              PUSH     {r4,lr}
;;;2069   {
000002  b092              SUB      sp,sp,#0x48
;;;2070       u8 cam_idx;
;;;2071       struct video_input_params params;
;;;2072       
;;;2073       kdp_video_renderer_next_idx();
000004  f7fffffe          BL       kdp_video_renderer_next_idx
;;;2074       cam_idx = kdp_video_renderer_get_idx();
000008  f7fffffe          BL       kdp_video_renderer_get_idx
00000c  4604              MOV      r4,r0
;;;2075       
;;;2076       params = kdp_video_renderer_setting(cam_idx); 
00000e  4601              MOV      r1,r0
000010  a809              ADD      r0,sp,#0x24
000012  f7fffffe          BL       kdp_video_renderer_setting
000016  2224              MOVS     r2,#0x24
000018  a909              ADD      r1,sp,#0x24
00001a  4668              MOV      r0,sp
00001c  f7fffffe          BL       __aeabi_memcpy4
;;;2077       kdp_video_engineering_switch(&params);
000020  4668              MOV      r0,sp
000022  f7fffffe          BL       kdp_video_engineering_switch
;;;2078   
;;;2079       kl520_api_camera_start(cam_idx);
000026  4620              MOV      r0,r4
000028  f7fffffe          BL       kl520_api_camera_start
;;;2080   }
00002c  b012              ADD      sp,sp,#0x48
00002e  bd10              POP      {r4,pc}
;;;2081   
                          ENDP


                          AREA ||i.sample_touch_app_disable||, CODE, READONLY, ALIGN=1

                  sample_touch_app_disable PROC
;;;1101   }
;;;1102   void sample_touch_app_disable(void) {
000000  4770              BX       lr
;;;1103   #if CFG_TOUCH_ENABLE == YES
;;;1104   #if CFG_UI_USR_IMG == NO
;;;1105       sample_close_video_renderer();
;;;1106   #endif
;;;1107       sample_app_deinit_touch_panel();
;;;1108   #endif
;;;1109   }
;;;1110   
                          ENDP


                          AREA ||i.sample_touch_app_enable||, CODE, READONLY, ALIGN=1

                  sample_touch_app_enable PROC
;;;1093   }
;;;1094   void sample_touch_app_enable(void) {
000000  4770              BX       lr
;;;1095   #if CFG_TOUCH_ENABLE == YES
;;;1096       sample_app_init_touch_panel();
;;;1097   #if CFG_UI_USR_IMG == NO
;;;1098       sample_open_video_renderer();
;;;1099   #endif
;;;1100   #endif
;;;1101   }
;;;1102   void sample_touch_app_disable(void) {
                          ENDP


                          AREA ||i.sample_touch_panel_close||, CODE, READONLY, ALIGN=1

                  sample_touch_panel_close PROC
;;;1086   }
;;;1087   void sample_touch_panel_close(void)
000000  4770              BX       lr
;;;1088   {
;;;1089   #if CFG_TOUCH_ENABLE == YES
;;;1090       kl520_api_touch_stop();
;;;1091       //tp_power_off();
;;;1092   #endif
;;;1093   }
;;;1094   void sample_touch_app_enable(void) {
                          ENDP


                          AREA ||i.sample_touch_panel_open||, CODE, READONLY, ALIGN=1

                  sample_touch_panel_open PROC
;;;1073   
;;;1074   void sample_touch_panel_open(void)
000000  4770              BX       lr
;;;1075   {
;;;1076   #if (MEASURE_RECOGNITION == YES)
;;;1077       kl520_measure_stamp(E_MEASURE_TOUCH_INIT);
;;;1078       app_kl520_init();
;;;1079       kl520_measure_stamp(E_MEASURE_TOUCH_INIT_DONE);
;;;1080   #else
;;;1081   #if (CFG_TOUCH_ENABLE == YES)
;;;1082       kl520_api_touch_open();
;;;1083       kl520_api_touch_start();
;;;1084   #endif
;;;1085   #endif
;;;1086   }
;;;1087   void sample_touch_panel_close(void)
                          ENDP


                          AREA ||i.sample_ui_draw_example||, CODE, READONLY, ALIGN=1

                  sample_ui_draw_example PROC
;;;766    
;;;767    void sample_ui_draw_example(void)
000000  4770              BX       lr
;;;768    {
;;;769    #if (CFG_PANEL_TYPE > PANEL_NULL)
;;;770    #define	EXAMPLE_01	(OFF)
;;;771    #define	EXAMPLE_02	(ON)
;;;772    
;;;773    
;;;774        #if (EXAMPLE_01 == ON)
;;;775    
;;;776        sample_open_video_renderer();
;;;777        kl520_api_dp_set_pen_rgb565(BLUE, 2);
;;;778        kl520_api_dp_fill_rect(0, 240, 80, 80);
;;;779    
;;;780        kl520_api_dp_set_pen_rgb565(GREEN, 2);
;;;781        kl520_api_dp_fill_rect(80, 240, 80, 80);
;;;782    
;;;783        kl520_api_dp_set_pen_rgb565(RED, 2);
;;;784        kl520_api_dp_fill_rect(160, 240, 80, 80);
;;;785        kl520_api_dp_fresh();
;;;786        sample_close_video_renderer();
;;;787        #endif
;;;788    
;;;789        #if (EXAMPLE_02 == ON)
;;;790    
;;;791        sample_open_video_renderer();
;;;792    #if CFG_UI_USR_IMG == NO
;;;793        kl520_api_dp_fresh_bg(BLACK, 2);
;;;794    
;;;795        sample_lcd_adjust_backlight_step_by_step();
;;;796        kl520_api_dp_draw_bitmap(0, 0, 240, 135, (void *)USR_DDR_IMG_01_KNERON_ADDR);
;;;797        kl520_api_dp_fresh();
;;;798    
;;;799        sample_lcd_adjust_backlight_step_by_step();
;;;800        kl520_api_dp_draw_bitmap(0, (320-45), 80, 45, (void *)USR_DDR_IMG_02_ICON_01_ADDR);
;;;801        kl520_api_dp_fresh();
;;;802    
;;;803        sample_lcd_adjust_backlight_step_by_step();
;;;804        kl520_api_dp_draw_bitmap(80, (320-45), 80, 45, (void *)USR_DDR_IMG_03_ICON_02_ADDR);
;;;805        kl520_api_dp_fresh();
;;;806    
;;;807        sample_lcd_adjust_backlight_step_by_step();
;;;808        kl520_api_dp_draw_bitmap(160, (320-45), 80, 45, (void *)USR_DDR_IMG_05_ICON_04_ADDR);
;;;809        kl520_api_dp_fresh();
;;;810    #endif
;;;811        kl520_api_dp_set_backlight(100);
;;;812        osDelay(1000);
;;;813        kl520_api_dp_fresh_bg(BLACK, 2);
;;;814    
;;;815        sample_close_video_renderer();
;;;816    
;;;817        #endif
;;;818    #endif
;;;819    }
;;;820    
                          ENDP


                          AREA ||i.sample_ui_draw_full||, CODE, READONLY, ALIGN=1

                  sample_ui_draw_full PROC
;;;745    
;;;746    void sample_ui_draw_full(void)
000000  4770              BX       lr
;;;747    {
;;;748    #if (CFG_PANEL_TYPE > PANEL_NULL)
;;;749    #if CFG_UI_USR_IMG == NO
;;;750        kl520_api_dp_draw_bitmap(0, 0, 240, 320, (void *)USR_DDR_IMG_UI1_ADDR);
;;;751        kl520_api_dp_fresh();
;;;752    #endif
;;;753    #endif
;;;754    }
;;;755    void sample_ui_draw_part(void)
                          ENDP


                          AREA ||i.sample_ui_draw_line||, CODE, READONLY, ALIGN=1

                  sample_ui_draw_line PROC
;;;820    
;;;821    void sample_ui_draw_line(void)
000000  b510              PUSH     {r4,lr}
;;;822    {
;;;823        kl520_api_dp_set_pen_rgb565(YELLOW, 2);
000002  2102              MOVS     r1,#2
000004  f64f70e0          MOV      r0,#0xffe0
000008  f7fffffe          BL       kl520_api_dp_set_pen_rgb565
;;;824        kl520_api_dp_draw_line(10, 10, 10, 200);
00000c  220a              MOVS     r2,#0xa
00000e  23c8              MOVS     r3,#0xc8
000010  4611              MOV      r1,r2
000012  4610              MOV      r0,r2
000014  f7fffffe          BL       kl520_api_dp_draw_line
;;;825    
;;;826        kl520_api_dp_fresh();
000018  e8bd4010          POP      {r4,lr}
00001c  f7ffbffe          B.W      kl520_api_dp_fresh
;;;827    }
;;;828    
                          ENDP


                          AREA ||i.sample_ui_draw_part||, CODE, READONLY, ALIGN=1

                  sample_ui_draw_part PROC
;;;754    }
;;;755    void sample_ui_draw_part(void)
000000  4770              BX       lr
;;;756    {
;;;757    #if (CFG_PANEL_TYPE > PANEL_NULL)
;;;758    #if CFG_UI_USR_IMG == NO
;;;759        kl520_api_dp_set_pen_rgb565(GREEN, 2);
;;;760        kl520_api_dp_fill_rect(80, DISPLAY_WIDTH, 80, 80);
;;;761        kl520_api_dp_draw_bitmap(0, 0, 240, 135, (void *)USR_DDR_IMG_01_KNERON_ADDR);
;;;762        kl520_api_dp_fresh();
;;;763    #endif
;;;764    #endif
;;;765    }
;;;766    
                          ENDP


                          AREA ||i.sample_ui_draw_rect||, CODE, READONLY, ALIGN=1

                  sample_ui_draw_rect PROC
;;;828    
;;;829    void sample_ui_draw_rect(void)
000000  b510              PUSH     {r4,lr}
;;;830    {
;;;831        kl520_api_dp_set_pen_rgb565(RED, 2);
000002  2102              MOVS     r1,#2
000004  f44f4078          MOV      r0,#0xf800
000008  f7fffffe          BL       kl520_api_dp_set_pen_rgb565
;;;832        kl520_api_dp_draw_rect(150, 30, 80, 200);
00000c  23c8              MOVS     r3,#0xc8
00000e  2250              MOVS     r2,#0x50
000010  211e              MOVS     r1,#0x1e
000012  2096              MOVS     r0,#0x96
000014  f7fffffe          BL       kl520_api_dp_draw_rect
;;;833    
;;;834        kl520_api_dp_fresh();
000018  e8bd4010          POP      {r4,lr}
00001c  f7ffbffe          B.W      kl520_api_dp_fresh
;;;835    }
;;;836    
                          ENDP


                          AREA ||i.sample_ui_fill_rect||, CODE, READONLY, ALIGN=1

                  sample_ui_fill_rect PROC
;;;862    }
;;;863    void sample_ui_fill_rect(void)
000000  2102              MOVS     r1,#2
;;;864    {
;;;865        kl520_api_dp_fresh_bg(BLUE, 2);
000002  201f              MOVS     r0,#0x1f
000004  f7ffbffe          B.W      kl520_api_dp_fresh_bg
;;;866    }
;;;867    
                          ENDP


                          AREA ||i.sample_user_comm_change_baud_rate||, CODE, READONLY, ALIGN=2

                  sample_user_comm_change_baud_rate PROC
;;;2471   
;;;2472   void sample_user_comm_change_baud_rate(void)
000000  b510              PUSH     {r4,lr}
;;;2473   {
;;;2474   #if CFG_COM_PROTOCOL_TYPE == COM_PROTOCOL_TYPE_LWCOM
;;;2475   #if ( CFG_COM_BUS_TYPE&COM_BUS_UART_MASK )
;;;2476       kl520_com_reconfig_baud_rate(_cmd_get_answer_int("[set baud rate : (0:115200, 1:921600) >>"));
000002  a003              ADR      r0,|L88.16|
000004  f7fffffe          BL       _cmd_get_answer_int
000008  e8bd4010          POP      {r4,lr}
00000c  f7ffbffe          B.W      kl520_com_reconfig_baud_rate
;;;2477   #endif
;;;2478   #endif
;;;2479   }
;;;2480   
                          ENDP

                  |L88.16|
000010  5b736574          DCB      "[set baud rate : (0:115200, 1:921600) >>",0
000014  20626175
000018  64207261
00001c  7465203a
000020  2028303a
000024  31313532
000028  30302c20
00002c  313a3932
000030  31363030
000034  29203e3e
000038  00      
000039  00                DCB      0
00003a  00                DCB      0
00003b  00                DCB      0

                          AREA ||i.sample_user_rotate_180_enable||, CODE, READONLY, ALIGN=2

                  sample_user_rotate_180_enable PROC
;;;2567   
;;;2568   void sample_user_rotate_180_enable(void)
000000  b510              PUSH     {r4,lr}
;;;2569   {
000002  b08c              SUB      sp,sp,#0x30
;;;2570       u8 enable = _cmd_get_answer_int("[set user rotate 180 enable: (0:disable, 1:enable) >>");
000004  a00d              ADR      r0,|L89.60|
000006  f7fffffe          BL       _cmd_get_answer_int
00000a  b2c4              UXTB     r4,r0
;;;2571   
;;;2572       kl520_customer_info Cusinfo;
;;;2573       kl520_api_customer_get(&Cusinfo);
00000c  4668              MOV      r0,sp
00000e  f7fffffe          BL       kl520_api_customer_get
;;;2574   
;;;2575       if (enable)
000012  b10c              CBZ      r4,|L89.24|
;;;2576           enable = ROTATE_180_ENABLE;
000014  2496              MOVS     r4,#0x96
000016  e000              B        |L89.26|
                  |L89.24|
;;;2577       else
;;;2578           enable = ROTATE_180_DISABLE;
000018  24ff              MOVS     r4,#0xff
                  |L89.26|
;;;2579   
;;;2580       if (Cusinfo.user_rotate_180 != enable)
00001a  f89d0028          LDRB     r0,[sp,#0x28]
00001e  42a0              CMP      r0,r4
000020  d00a              BEQ      |L89.56|
;;;2581       {
;;;2582           dbg_msg_console("Save rotate setting to flash");
000022  a114              ADR      r1,|L89.116|
000024  2001              MOVS     r0,#1
000026  f7fffffe          BL       kdp_level_printf
;;;2583           Cusinfo.user_rotate_180 = enable;
00002a  f88d4028          STRB     r4,[sp,#0x28]
;;;2584           kl520_api_customer_write(&Cusinfo);
00002e  4668              MOV      r0,sp
000030  f7fffffe          BL       kl520_api_customer_write
;;;2585           power_mgr_sw_reset();
000034  f7fffffe          BL       power_mgr_sw_reset
                  |L89.56|
;;;2586       }
;;;2587   }
000038  b00c              ADD      sp,sp,#0x30
00003a  bd10              POP      {r4,pc}
;;;2588   
                          ENDP

                  |L89.60|
00003c  5b736574          DCB      "[set user rotate 180 enable: (0:disable, 1:enable) >>",0
000040  20757365
000044  7220726f
000048  74617465
00004c  20313830
000050  20656e61
000054  626c653a
000058  2028303a
00005c  64697361
000060  626c652c
000064  20313a65
000068  6e61626c
00006c  6529203e
000070  3e00    
000072  00                DCB      0
000073  00                DCB      0
                  |L89.116|
000074  53617665          DCB      "Save rotate setting to flash\r\n",0
000078  20726f74
00007c  61746520
000080  73657474
000084  696e6720
000088  746f2066
00008c  6c617368
000090  0d0a00  
000093  00                DCB      0

                          AREA ||i.special_scenario_test_1||, CODE, READONLY, ALIGN=2

                  special_scenario_test_1 PROC
;;;575    
;;;576    void special_scenario_test_1(void)
000000  b510              PUSH     {r4,lr}
;;;577    {
000002  b08a              SUB      sp,sp,#0x28
;;;578        osThreadAttr_t attr = {
000004  2224              MOVS     r2,#0x24
000006  490d              LDR      r1,|L90.60|
000008  4668              MOV      r0,sp
00000a  f7fffffe          BL       __aeabi_memcpy4
;;;579            .stack_size = 256
;;;580        };     
;;;581        
;;;582        tid_special_scenario_1 = osThreadNew(app_event_thread_kneron, NULL, &attr);
00000e  466a              MOV      r2,sp
000010  2100              MOVS     r1,#0
000012  480b              LDR      r0,|L90.64|
000014  f7fffffe          BL       osThreadNew
000018  4c0a              LDR      r4,|L90.68|
;;;583    
;;;584        app_kl520_init();
00001a  60a0              STR      r0,[r4,#8]  ; tid_special_scenario_1
00001c  f7fffffe          BL       app_kl520_init
;;;585    
;;;586        timer_zb = osTimerNew(timer_cb, osTimerPeriodic, NULL, NULL);
000020  2300              MOVS     r3,#0
000022  461a              MOV      r2,r3
000024  2101              MOVS     r1,#1
000026  4808              LDR      r0,|L90.72|
000028  f7fffffe          BL       osTimerNew
;;;587        osTimerStart(timer_zb, (SPECIAL_SCENARIO_1_TEST_TIME + 3) * 1000);
00002c  f2417170          MOV      r1,#0x1770
000030  60e0              STR      r0,[r4,#0xc]  ; timer_zb
000032  f7fffffe          BL       osTimerStart
;;;588    
;;;589    #ifdef SPECIAL_SCENARIO_TEST_TOUCH_ENABLE
;;;590        timer_zb1 = osTimerNew(timer_cb1, osTimerPeriodic, NULL, NULL);
;;;591        osTimerStart(timer_zb, 1000);
;;;592    #endif
;;;593    }
000036  b00a              ADD      sp,sp,#0x28
000038  bd10              POP      {r4,pc}
;;;594    
                          ENDP

00003a  0000              DCW      0x0000
                  |L90.60|
                          DCD      ||.constdata||+0x4
                  |L90.64|
                          DCD      app_event_thread_kneron
                  |L90.68|
                          DCD      ||.data||
                  |L90.72|
                          DCD      timer_cb

                          AREA ||i.special_scenario_test_2||, CODE, READONLY, ALIGN=1

                  special_scenario_test_2 PROC
;;;596    #ifdef SPECIAL_SCENARIO_TEST2
;;;597    void special_scenario_test_2(void)
000000  b510              PUSH     {r4,lr}
;;;598    {
;;;599        kl520_api_dp_open(DISPLAY_WIDTH, DISPLAY_HEIGHT);
000002  f44f74a0          MOV      r4,#0x140
000006  21f0              MOVS     r1,#0xf0
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       kl520_api_dp_open
;;;600        kl520_api_dp_fresh_bg(RED, 3);
00000e  2103              MOVS     r1,#3
000010  f44f4078          MOV      r0,#0xf800
000014  f7fffffe          BL       kl520_api_dp_fresh_bg
;;;601    
;;;602        osDelay(2000);
000018  f44f60fa          MOV      r0,#0x7d0
00001c  f7fffffe          BL       osDelay
;;;603    
;;;604        kl520_api_face_recognition_test(0, 0, DISPLAY_WIDTH, DISPLAY_HEIGHT);
000020  2100              MOVS     r1,#0
000022  23f0              MOVS     r3,#0xf0
000024  4622              MOV      r2,r4
000026  4608              MOV      r0,r1
000028  f7fffffe          BL       kl520_api_face_recognition_test
;;;605    
;;;606        osDelay(5000);
00002c  f2413088          MOV      r0,#0x1388
000030  f7fffffe          BL       osDelay
;;;607    
;;;608        sample_face_close();
000034  e8bd4010          POP      {r4,lr}
000038  f7ffbffe          B.W      sample_face_close
;;;609    }
;;;610    #endif
                          ENDP


                          AREA ||i.switch_scpu_part||, CODE, READONLY, ALIGN=1

                  switch_scpu_part PROC
;;;2560   
;;;2561   void switch_scpu_part(void)
000000  b510              PUSH     {r4,lr}
;;;2562   {
;;;2563       ota_update_show_config();
000002  f7fffffe          BL       ota_update_show_config
;;;2564       kl520_api_ota_switch_SCPU();
000006  f7fffffe          BL       kl520_api_ota_switch_SCPU
;;;2565       ota_update_show_config();
00000a  e8bd4010          POP      {r4,lr}
00000e  f7ffbffe          B.W      ota_update_show_config
;;;2566   }
;;;2567   
                          ENDP


                          AREA ||i.timer_cb||, CODE, READONLY, ALIGN=1

                  timer_cb PROC
;;;137    
;;;138    void timer_cb(void *argument)
000000  b510              PUSH     {r4,lr}
;;;139    {
;;;140        osEventFlagsSet(kl520_api_get_event(),KL520_APP_FLAG_ACTION);
000002  f7fffffe          BL       kl520_api_get_event
000006  e8bd4010          POP      {r4,lr}
00000a  2120              MOVS     r1,#0x20
00000c  f7ffbffe          B.W      osEventFlagsSet
;;;141    }
;;;142    
                          ENDP


                          AREA ||i.uart_sample_face_add_timeout||, CODE, READONLY, ALIGN=2

                  uart_sample_face_add_timeout PROC
;;;2219   
;;;2220   extern uint16_t uart_sample_face_add_timeout(uint16_t time_out_ms)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;2221   {
;;;2222       u16 face_add_mode = 5, ret;
;;;2223   
;;;2224   #if CFG_COM_PROTOCOL_TYPE == COM_PROTOCOL_TYPE_LWCOM
;;;2225   #if ( CFG_COM_BUS_TYPE&COM_BUS_UART_MASK )
;;;2226   #if ( CFG_COM_URT_PROT_TYPE == COM_UART_PROT_KDP ) || ( CFG_COM_URT_PROT_TYPE == COM_UART_PROT_KDP_USR )
;;;2227       u16 nFaceId = 0xFFFF;
;;;2228       u8  nResult = MR_SUCCESS;
;;;2229       u8  eFaceType = 0;
;;;2230   #else
;;;2231       u8 face_id = 0xFF;
;;;2232   #endif
;;;2233   #endif
;;;2234   #endif
;;;2235   
;;;2236   #if ( CFG_COM_BUS_TYPE&COM_BUS_UART_MASK )
;;;2237   #if CFG_FMAP_AP_CTRL_TYPE >= EX_FM_UART_AP_CTRL_MAIN_DB
;;;2238   #if ( CFG_COM_URT_PROT_TYPE == COM_UART_PROT_DEF ) || ( CFG_COM_URT_PROT_TYPE == COM_UART_PROT_DEF_USR )
;;;2239       if ( g_bImpFmDataReady )
;;;2240       {
;;;2241           kdp_e2e_face_variables* vars = kdp_e2e_get_face_variables();
;;;2242           kl520_api_face_close();
;;;2243           kl520_api_face_set_add_mode(FACE_ADD_MODE_1_FACE);
;;;2244           kdp_e2e_prop_set2(flow_mode, FLOW_MODE_SIM_PRE_ADD);
;;;2245   #if (CFG_AI_TYPE == AI_TYPE_N1R1)
;;;2246           vars->rgb_led_flag = TRUE;
;;;2247           vars->nir_led_flag = TRUE; //for sim, always on.
;;;2248   
;;;2249           if (vars->rgb_led_flag == FALSE && vars->rgb_led_lv_history_flag == FALSE)
;;;2250               vars->rgb_led_flag = FALSE;
;;;2251           else
;;;2252               vars->rgb_led_flag = TRUE;
;;;2253   #endif
;;;2254           dbg_msg_console("[%s] pre_add type = %d", vars->pre_add);
;;;2255           vars->pre_add = AI_TYPE_PR1;
;;;2256   
;;;2257   #if ( KDP_BIT_CTRL_MODE == YES )
;;;2258           kl520_api_face_add(0, 0, DISPLAY_WIDTH, DISPLAY_HEIGHT, BIT_CTRL_FACE_ADD_NORMAL);
;;;2259   #else
;;;2260           kl520_api_face_add(0, 0, DISPLAY_WIDTH, DISPLAY_HEIGHT, FACE_ADD_TYPE_NORMAL);
;;;2261   #endif
;;;2262   
;;;2263           ret = kl520_api_add_wait_and_get();
;;;2264           kdp_e2e_prop_set2(flow_mode, FLOW_MODE_NORMAL);
;;;2265           kl520_api_face_close();
;;;2266           vars->pre_add = 0;
;;;2267   
;;;2268       }
;;;2269       else
;;;2270   #endif
;;;2271   #endif
;;;2272   #endif
;;;2273       if (1 == face_add_mode) {
;;;2274           kl520_api_face_add_set_timeout(time_out_ms/1000);
;;;2275           kl520_api_face_set_add_mode(FACE_ADD_MODE_1_FACE);
;;;2276           //dbg_msg_console("[%s] FACE_ADD_TYPE_NORMAL", __func__);
;;;2277   
;;;2278   #if ( KDP_BIT_CTRL_MODE == YES )
;;;2279           ret = kl520_api_face_add_internal(0, 0, DISPLAY_WIDTH, DISPLAY_HEIGHT, BIT_CTRL_FACE_ADD_NORMAL);
;;;2280   #else
;;;2281           ret = kl520_api_face_add_internal(0, 0, DISPLAY_WIDTH, DISPLAY_HEIGHT, FACE_ADD_TYPE_NORMAL);
;;;2282   #endif
;;;2283   
;;;2284       }
;;;2285       else if (5 == face_add_mode) {
;;;2286           kl520_api_face_add_set_timeout(time_out_ms/1000);
000004  f44f717a          MOV      r1,#0x3e8
000008  fbb0f0f1          UDIV     r0,r0,r1
00000c  f64f74ff          MOV      r4,#0xffff            ;2227
000010  2700              MOVS     r7,#0                 ;2229
000012  f7fffffe          BL       kl520_api_face_add_set_timeout
;;;2287           kl520_api_dp_five_face_enable();
000016  f7fffffe          BL       kl520_api_dp_five_face_enable
;;;2288           kl520_api_face_set_add_mode(FACE_ADD_MODE_5_FACES);
00001a  2002              MOVS     r0,#2
00001c  f7fffffe          BL       kl520_api_face_set_add_mode
;;;2289   
;;;2290           for (u8 i=0;i<5;i++) {
000020  2500              MOVS     r5,#0
;;;2291   #if ( KDP_BIT_CTRL_MODE == YES )
;;;2292               if ( i == 0 )
;;;2293               {
;;;2294                   ret = kl520_api_face_add_internal(0, 0, DISPLAY_WIDTH, DISPLAY_HEIGHT, (kl520_bit_ctrl_face_add)kl520_api_face_idx_chg_2_bit_ctrl(i));
;;;2295               }
;;;2296               else if ( i < 3 )
;;;2297               {
;;;2298                   ret = kl520_api_face_add_internal(0, 0, DISPLAY_WIDTH, DISPLAY_HEIGHT, BIT_CTRL_FACE_ADD_2FACE_LR);
;;;2299               }
;;;2300               else
;;;2301               {
;;;2302                   ret = kl520_api_face_add_internal(0, 0, DISPLAY_WIDTH, DISPLAY_HEIGHT, BIT_CTRL_FACE_ADD_2FACE_UD);
;;;2303               }
;;;2304   #else
;;;2305               ret = kl520_api_face_add_internal(0, 0, DISPLAY_WIDTH, DISPLAY_HEIGHT, (kl520_face_add_type)i);
000022  f44f78a0          MOV      r8,#0x140
                  |L94.38|
000026  2100              MOVS     r1,#0
000028  23f0              MOVS     r3,#0xf0
00002a  4642              MOV      r2,r8
00002c  4608              MOV      r0,r1
00002e  9500              STR      r5,[sp,#0]
000030  f7fffffe          BL       kl520_api_face_add_internal
000034  0406              LSLS     r6,r0,#16
000036  0c36              LSRS     r6,r6,#16
;;;2306   #endif
;;;2307   
;;;2308               if (ret != KL520_FACE_OK)
000038  d01b              BEQ      |L94.114|
;;;2309                   break;
;;;2310           }
;;;2311   
;;;2312           if (tid_abort_thread != 0)
;;;2313               sample_force_abort_disable();
;;;2314       }
;;;2315   
;;;2316   #if CFG_COM_PROTOCOL_TYPE == COM_PROTOCOL_TYPE_LWCOM
;;;2317   #if ( CFG_COM_BUS_TYPE&COM_BUS_UART_MASK )
;;;2318   #if ( CFG_COM_URT_PROT_TYPE == COM_UART_PROT_DEF ) || ( CFG_COM_URT_PROT_TYPE == COM_UART_PROT_DEF_USR )
;;;2319       if (KL520_FACE_OK == ret)
;;;2320       {
;;;2321           if (0xFF != kl520_api_face_get_curr_face_id()) {
;;;2322               face_id = kl520_api_face_get_curr_face_id();
;;;2323               kl520_api_face_set_curr_face_id(0xFF);
;;;2324           }
;;;2325           ret = ret + ((face_id&0xFF)<<8);
;;;2326       }
;;;2327       else if (KL520_FACE_NOFACE_AND_TIMEOUT == ret || KL520_FACE_TIMEOUT == ret) { ret = 0xFF03; }
;;;2328       else  if (KL520_FACE_EXIST == ret)                                          { ret = 0xFF02; }
;;;2329       else                                                                        { ret = 0xFF01; }
;;;2330   #elif ( CFG_COM_URT_PROT_TYPE == COM_UART_PROT_KDP ) || ( CFG_COM_URT_PROT_TYPE == COM_UART_PROT_KDP_USR )
;;;2331       if (KL520_FACE_OK == ret){
;;;2332           if (0xFF != kl520_api_face_get_curr_face_id()) {
;;;2333               nFaceId = (u8)kl520_api_face_get_curr_face_id();
;;;2334               kl520_api_face_set_curr_face_id(0xFF);
;;;2335           }
;;;2336           ret = ret + ((nFaceId&0xFF)<<8);
;;;2337           nResult = MR_SUCCESS;
;;;2338           eFaceType = (u8)(eFaceType|KDP_FACE_DIRECTION_MASK);
;;;2339       }
;;;2340       else if (KL520_FACE_TIMEOUT == ret) { ret = 0xFF03; nResult = MR_FAILED_TIME_OUT; }
00003a  2e06              CMP      r6,#6
00003c  d02e              BEQ      |L94.156|
;;;2341       else if (KL520_FACE_EXIST == ret)   { 
00003e  2e07              CMP      r6,#7
000040  d030              BEQ      |L94.164|
;;;2342   			ret = 0xFF02; 
;;;2343   		  nResult = MR_FAILED_FACE_ENROLLED; 
;;;2344   			nFaceId = (u8)kl520_api_face_get_curr_face_id(); //zcy add for return user id
;;;2345   	}
;;;2346       else if (KL520_FACE_FULL == ret)    { ret = 0xFF01; nResult = MR_FAILED_MAX_USER; }
000042  f64f7501          MOV      r5,#0xff01
000046  2e09              CMP      r6,#9
000048  d000              BEQ      |L94.76|
;;;2347       else                                { ret = 0xFF01; nResult = MR_ABORTED; }
00004a  2602              MOVS     r6,#2
                  |L94.76|
;;;2348   
;;;2349   		 dbg_msg_console("[%s] nFaceId= %x", __func__, nFaceId);
00004c  4623              MOV      r3,r4
00004e  4a19              LDR      r2,|L94.180|
000050  a119              ADR      r1,|L94.184|
000052  2001              MOVS     r0,#1
000054  f7fffffe          BL       kdp_level_printf
;;;2350       send_enroll_reply_msg(nResult, ((nFaceId >> 8) &0xFF),  ((nFaceId >> 0) &0xFF) , eFaceType, KID_ENROLL);
000058  2013              MOVS     r0,#0x13
00005a  9000              STR      r0,[sp,#0]
00005c  b2e2              UXTB     r2,r4
00005e  0a21              LSRS     r1,r4,#8
000060  463b              MOV      r3,r7
000062  4630              MOV      r0,r6
000064  f7fffffe          BL       send_enroll_reply_msg
;;;2351   #endif
;;;2352   #endif
;;;2353   #endif
;;;2354   
;;;2355       sample_face_close();
000068  f7fffffe          BL       sample_face_close
;;;2356   
;;;2357       return ret;
00006c  4628              MOV      r0,r5
;;;2358   }
00006e  e8bd83f8          POP      {r3-r9,pc}
                  |L94.114|
000072  1c6d              ADDS     r5,r5,#1
000074  b2ed              UXTB     r5,r5                 ;2290
000076  2d05              CMP      r5,#5                 ;2290
000078  d3d5              BCC      |L94.38|
00007a  f7fffffe          BL       kl520_api_face_get_curr_face_id
00007e  28ff              CMP      r0,#0xff              ;2332
000080  d005              BEQ      |L94.142|
000082  f7fffffe          BL       kl520_api_face_get_curr_face_id
000086  4604              MOV      r4,r0                 ;2333
000088  20ff              MOVS     r0,#0xff              ;2334
00008a  f7fffffe          BL       kl520_api_face_set_curr_face_id
                  |L94.142|
00008e  eb062004          ADD      r0,r6,r4,LSL #8       ;2336
000092  b285              UXTH     r5,r0                 ;2336
000094  2600              MOVS     r6,#0                 ;2337
000096  f047071f          ORR      r7,r7,#0x1f           ;2338
00009a  e7d7              B        |L94.76|
                  |L94.156|
00009c  f64f7503          MOV      r5,#0xff03            ;2340
0000a0  260d              MOVS     r6,#0xd               ;2340
0000a2  e7d3              B        |L94.76|
                  |L94.164|
0000a4  f64f7502          MOV      r5,#0xff02            ;2342
0000a8  260a              MOVS     r6,#0xa               ;2343
0000aa  f7fffffe          BL       kl520_api_face_get_curr_face_id
0000ae  4604              MOV      r4,r0                 ;2344
0000b0  e7cc              B        |L94.76|
;;;2359   extern uint16_t uart_sample_face_recognition_timeout(uint16_t time_out_ms)
                          ENDP

0000b2  0000              DCW      0x0000
                  |L94.180|
                          DCD      ||.constdata||+0x55
                  |L94.184|
0000b8  5b25735d          DCB      "[%s] nFaceId= %x\r\n",0
0000bc  206e4661
0000c0  63654964
0000c4  3d202578
0000c8  0d0a00  
0000cb  00                DCB      0

                          AREA ||i.uart_sample_face_del_all||, CODE, READONLY, ALIGN=1

                  uart_sample_face_del_all PROC
;;;2452   }
;;;2453   __WEAK extern uint16_t uart_sample_face_del_all(void)
000000  b570              PUSH     {r4-r6,lr}
;;;2454   {
000002  b09a              SUB      sp,sp,#0x68
;;;2455   #if CFG_DEL_CALIBRATION_SETTING_WHEN_DEL_ALL == YES
;;;2456       kl520_api_settings_delete();
000004  f7fffffe          BL       kl520_api_settings_delete
000008  2400              MOVS     r4,#0
00000a  4625              MOV      r5,r4
00000c  f88d4064          STRB     r4,[sp,#0x64]
000010  2164              MOVS     r1,#0x64
000012  4668              MOV      r0,sp
000014  f7fffffe          BL       __aeabi_memclr4
000018  4669              MOV      r1,sp
00001a  a819              ADD      r0,sp,#0x64
00001c  f7fffffe          BL       kl520_api_face_query_all
000020  f89d0064          LDRB     r0,[sp,#0x64]
000024  b140              CBZ      r0,|L95.56|
000026  466e              MOV      r6,sp
000028  e00a              B        |L95.64|
                  |L95.42|
00002a  5d31              LDRB     r1,[r6,r4]
00002c  2002              MOVS     r0,#2
00002e  f7fffffe          BL       kl520_api_face_del
000032  f0100fff          TST      r0,#0xff
000036  d002              BEQ      |L95.62|
                  |L95.56|
;;;2457   #endif
;;;2458   
;;;2459       u8 ret = _sample_face_del_all_exist_users();
;;;2460       if (0 != ret) {ret = 1;}
000038  2001              MOVS     r0,#1
                  |L95.58|
;;;2461   
;;;2462       return ret;
;;;2463   }
00003a  b01a              ADD      sp,sp,#0x68
00003c  bd70              POP      {r4-r6,pc}
                  |L95.62|
00003e  1c64              ADDS     r4,r4,#1
                  |L95.64|
000040  f89d0064          LDRB     r0,[sp,#0x64]
000044  4284              CMP      r4,r0
000046  dbf0              BLT      |L95.42|
000048  4628              MOV      r0,r5
00004a  e7f6              B        |L95.58|
;;;2464   extern uint16_t uart_sample_face_del_user(uint8_t face_id)
                          ENDP


                          AREA ||i.uart_sample_face_del_user||, CODE, READONLY, ALIGN=1

                  uart_sample_face_del_user PROC
;;;2463   }
;;;2464   extern uint16_t uart_sample_face_del_user(uint8_t face_id)
000000  b510              PUSH     {r4,lr}
;;;2465   {
;;;2466       u8 ret = kl520_api_face_del(2, face_id);
000002  4601              MOV      r1,r0
000004  2002              MOVS     r0,#2
000006  f7fffffe          BL       kl520_api_face_del
00000a  f01000ff          ANDS     r0,r0,#0xff
;;;2467       if (0 != ret) {ret = 1;}
00000e  d000              BEQ      |L96.18|
000010  2001              MOVS     r0,#1
                  |L96.18|
;;;2468   
;;;2469       return ret;
;;;2470   }
000012  bd10              POP      {r4,pc}
;;;2471   
                          ENDP


                          AREA ||i.uart_sample_face_mp_timeout||, CODE, READONLY, ALIGN=1

                  uart_sample_face_mp_timeout PROC
;;;2425   
;;;2426   extern uint16_t uart_sample_face_mp_timeout(uint16_t time_out_ms)
000000  f44f717a          MOV      r1,#0x3e8
;;;2427   {
;;;2428       int ret = 0;
;;;2429   
;;;2430       kl520_api_face_add_set_timeout(time_out_ms/1000);
000004  fbb0f0f1          UDIV     r0,r0,r1
000008  b510              PUSH     {r4,lr}               ;2427
00000a  f7fffffe          BL       kl520_api_face_add_set_timeout
;;;2431       ret = kl520_engineering_calibration(0, NULL);
00000e  2100              MOVS     r1,#0
000010  4608              MOV      r0,r1
000012  f7fffffe          BL       kl520_engineering_calibration
;;;2432   
;;;2433       return ret;
000016  b280              UXTH     r0,r0
;;;2434   }
000018  bd10              POP      {r4,pc}
;;;2435   
                          ENDP


                          AREA ||i.uart_sample_face_recognition_timeout||, CODE, READONLY, ALIGN=2

                  uart_sample_face_recognition_timeout PROC
;;;2358   }
;;;2359   extern uint16_t uart_sample_face_recognition_timeout(uint16_t time_out_ms)
000000  b570              PUSH     {r4-r6,lr}
;;;2360   {
000002  b0a2              SUB      sp,sp,#0x88
000004  4604              MOV      r4,r0
;;;2361       int ret = KL520_APP_FLAG_FDFR_ERR;
;;;2362       u8 face_id = 0;
000006  2000              MOVS     r0,#0
000008  f88d0004          STRB     r0,[sp,#4]
;;;2363       u32 events = 0;
;;;2364       u16 input = 0;
;;;2365       system_info t_sys_info = { 0 };
00000c  217c              MOVS     r1,#0x7c
00000e  a803              ADD      r0,sp,#0xc
000010  f7fffffe          BL       __aeabi_memclr4
;;;2366   
;;;2367       kl520_api_face_recognition_set_timeout(time_out_ms/1000);
000014  f44f707a          MOV      r0,#0x3e8
000018  fbb4f0f0          UDIV     r0,r4,r0
00001c  f7fffffe          BL       kl520_api_face_recognition_set_timeout
;;;2368   
;;;2369       kl520_api_face_recognition(0, 0, DISPLAY_WIDTH, (input == 0)?DISPLAY_HEIGHT:input);
000020  2100              MOVS     r1,#0
000022  23f0              MOVS     r3,#0xf0
000024  f44f72a0          MOV      r2,#0x140
000028  4608              MOV      r0,r1
00002a  f7fffffe          BL       kl520_api_face_recognition
;;;2370   
;;;2371       do {
;;;2372           events = wait_event(kl520_api_get_event(), KL520_APP_FLAG_FDFR | KL520_DEVICE_FLAG_ERR);
00002e  f2401507          MOV      r5,#0x107
;;;2373           if(events == KL520_DEVICE_FLAG_ERR)
000032  1fee              SUBS     r6,r5,#7
                  |L98.52|
000034  f7fffffe          BL       kl520_api_get_event
000038  4629              MOV      r1,r5                 ;2372
00003a  f7fffffe          BL       wait_event
00003e  42b0              CMP      r0,r6
000040  d110              BNE      |L98.100|
;;;2374           {
;;;2375               ret = kl520_api_get_device_info(&t_sys_info);
000042  a803              ADD      r0,sp,#0xc
000044  f7fffffe          BL       kl520_api_get_device_info
000048  4604              MOV      r4,r0
;;;2376               dbg_msg_err("[%s], DEVICE ERROR, ret=0x%x", __func__, ret);
00004a  4603              MOV      r3,r0
00004c  4a28              LDR      r2,|L98.240|
00004e  a129              ADR      r1,|L98.244|
000050  2002              MOVS     r0,#2
000052  f7fffffe          BL       kdp_level_printf
;;;2377               kl520_api_free_device_info(&t_sys_info);
000056  a803              ADD      r0,sp,#0xc
000058  f7fffffe          BL       kl520_api_free_device_info
00005c  b324              CBZ      r4,|L98.168|
;;;2378           }
;;;2379           else
;;;2380           {
;;;2381               ret = kl520_api_face_get_result(&face_id);
;;;2382               if (KL520_FACE_OK == ret)
;;;2383               {
;;;2384                   kdp_e2e_face_variables *vars_cur = kdp_e2e_get_face_variables();
;;;2385       #ifdef DB_DRAWING_CUSTOMER_COLOR
;;;2386                   kl520_api_face_notify(KL520_FACE_DB_OK);
;;;2387       #endif
;;;2388                   dbg_msg_console("sample_face_recognition, KL520_FACE_OK, face_id=0x%x, Admin=%d, UseName=%s", face_id, vars_cur->admin, vars_cur->user_name);
;;;2389               }
;;;2390               else if (KL520_FACE_DB_FAIL == ret)
;;;2391               {
;;;2392   #ifdef DB_DRAWING_CUSTOMER_COLOR
;;;2393                   kl520_api_face_notify(KL520_FACE_DB_FAIL);
;;;2394   #endif
;;;2395                   dbg_msg_console("sample_face_recognition, KL520_FACE_DB_FAIL, face_id=0x%x", face_id);
;;;2396               }
;;;2397               else if (ret >= KL520_FACE_TOO_FAR && ret <= KL520_FACE_LOW_QUALITY )
;;;2398               {
;;;2399                   dbg_msg_console("KL520_FACE NOTE, ret=0x%x", ret);
;;;2400                   continue;
;;;2401               }
;;;2402               else
;;;2403               {
;;;2404                   dbg_msg_console("sample_face_recognition, ERROR, ret=0x%x", ret);
;;;2405               }
;;;2406           }
;;;2407           break;
;;;2408       }while (1);
;;;2409   
;;;2410       if (KL520_FACE_OK == ret) ret = ret + ((face_id&0xFF)<<8);
;;;2411       else if (KL520_FACE_DB_FAIL == ret) ret = 0xFF01;
00005e  2c03              CMP      r4,#3
000060  d030              BEQ      |L98.196|
000062  e036              B        |L98.210|
                  |L98.100|
000064  a801              ADD      r0,sp,#4              ;2381
000066  f7fffffe          BL       kl520_api_face_get_result
00006a  0004              MOVS     r4,r0                 ;2381
00006c  d00b              BEQ      |L98.134|
00006e  2c03              CMP      r4,#3                 ;2390
000070  d01f              BEQ      |L98.178|
000072  f1a4000c          SUB      r0,r4,#0xc            ;2397
000076  280d              CMP      r0,#0xd               ;2397
000078  4622              MOV      r2,r4                 ;2404
00007a  d826              BHI      |L98.202|
00007c  a125              ADR      r1,|L98.276|
00007e  2001              MOVS     r0,#1                 ;2399
000080  f7fffffe          BL       kdp_level_printf
000084  e7d6              B        |L98.52|
                  |L98.134|
000086  f7fffffe          BL       kdp_e2e_get_face_variables
00008a  4605              MOV      r5,r0                 ;2384
00008c  2001              MOVS     r0,#1                 ;2386
00008e  f7fffffe          BL       kl520_api_face_notify
000092  f105004c          ADD      r0,r5,#0x4c           ;2388
000096  9000              STR      r0,[sp,#0]            ;2388
000098  f895306c          LDRB     r3,[r5,#0x6c]         ;2388
00009c  f89d2004          LDRB     r2,[sp,#4]            ;2388
0000a0  4923              LDR      r1,|L98.304|
0000a2  2001              MOVS     r0,#1                 ;2388
0000a4  f7fffffe          BL       kdp_level_printf
                  |L98.168|
0000a8  f89d0004          LDRB     r0,[sp,#4]            ;2410
0000ac  eb042400          ADD      r4,r4,r0,LSL #8       ;2410
0000b0  e015              B        |L98.222|
                  |L98.178|
0000b2  2003              MOVS     r0,#3                 ;2393
0000b4  f7fffffe          BL       kl520_api_face_notify
0000b8  f89d2004          LDRB     r2,[sp,#4]            ;2395
0000bc  a11d              ADR      r1,|L98.308|
0000be  2001              MOVS     r0,#1                 ;2395
0000c0  f7fffffe          BL       kdp_level_printf
                  |L98.196|
0000c4  f64f7401          MOV      r4,#0xff01
0000c8  e009              B        |L98.222|
                  |L98.202|
0000ca  a129              ADR      r1,|L98.368|
0000cc  2001              MOVS     r0,#1                 ;2404
0000ce  f7fffffe          BL       kdp_level_printf
                  |L98.210|
;;;2412       else if (KL520_FACE_NOFACE_AND_TIMEOUT == ret || KL520_FACE_TIMEOUT == ret) ret = 0xFF03;
0000d2  2c05              CMP      r4,#5
0000d4  d008              BEQ      |L98.232|
0000d6  2c06              CMP      r4,#6
0000d8  d006              BEQ      |L98.232|
;;;2413       else ret = 0xFF02;
0000da  f64f7402          MOV      r4,#0xff02
                  |L98.222|
;;;2414   
;;;2415   #ifdef CFG_GUI_RECOG_CLOSE_TEST
;;;2416   #if (0==CFG_GUI_RECOG_CLOSE_TEST)
;;;2417       sample_face_close();
;;;2418   #endif
;;;2419   #else
;;;2420       sample_face_close();
0000de  f7fffffe          BL       sample_face_close
;;;2421   #endif
;;;2422   
;;;2423       return ret;
;;;2424   }
0000e2  b022              ADD      sp,sp,#0x88
0000e4  b2a0              UXTH     r0,r4                 ;2423
0000e6  bd70              POP      {r4-r6,pc}
                  |L98.232|
0000e8  f64f7403          MOV      r4,#0xff03            ;2412
0000ec  e7f7              B        |L98.222|
;;;2425   
                          ENDP

0000ee  0000              DCW      0x0000
                  |L98.240|
                          DCD      ||.constdata||+0x72
                  |L98.244|
0000f4  5b25735d          DCB      "[%s], DEVICE ERROR, ret=0x%x\r\n",0
0000f8  2c204445
0000fc  56494345
000100  20455252
000104  4f522c20
000108  7265743d
00010c  30782578
000110  0d0a00  
000113  00                DCB      0
                  |L98.276|
000114  4b4c3532          DCB      "KL520_FACE NOTE, ret=0x%x\r\n",0
000118  305f4641
00011c  4345204e
000120  4f54452c
000124  20726574
000128  3d307825
00012c  780d0a00
                  |L98.304|
                          DCD      ||.conststring||+0x37c
                  |L98.308|
000134  73616d70          DCB      "sample_face_recognition, KL520_FACE_DB_FAIL, face_id=0x"
000138  6c655f66
00013c  6163655f
000140  7265636f
000144  676e6974
000148  696f6e2c
00014c  204b4c35
000150  32305f46
000154  4143455f
000158  44425f46
00015c  41494c2c
000160  20666163
000164  655f6964
000168  3d3078  
00016b  25780d0a          DCB      "%x\r\n",0
00016f  00      
                  |L98.368|
000170  73616d70          DCB      "sample_face_recognition, ERROR, ret=0x%x\r\n",0
000174  6c655f66
000178  6163655f
00017c  7265636f
000180  676e6974
000184  696f6e2c
000188  20455252
00018c  4f522c20
000190  7265743d
000194  30782578
000198  0d0a00  
00019b  00                DCB      0

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  k_wish_timeout
                          DCD      0x00000003
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000100
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                  __func__
000028  73616d70          DCB      0x73,0x61,0x6d,0x70
00002c  6c655f66          DCB      0x6c,0x65,0x5f,0x66
000030  6163655f          DCB      0x61,0x63,0x65,0x5f
000034  7265636f          DCB      0x72,0x65,0x63,0x6f
000038  676e6974          DCB      0x67,0x6e,0x69,0x74
00003c  696f6e00          DCB      0x69,0x6f,0x6e,0x00
                  |symbol_number.264|
000040  73616d70          DCB      0x73,0x61,0x6d,0x70
000044  6c655f66          DCB      0x6c,0x65,0x5f,0x66
000048  6163655f          DCB      0x61,0x63,0x65,0x5f
00004c  6c697665          DCB      0x6c,0x69,0x76,0x65
000050  6e657373          DCB      0x6e,0x65,0x73,0x73
000054  00                DCB      0x00
                  |symbol_number.265|
000055  756172            DCB      0x75,0x61,0x72
000058  745f7361          DCB      0x74,0x5f,0x73,0x61
00005c  6d706c65          DCB      0x6d,0x70,0x6c,0x65
000060  5f666163          DCB      0x5f,0x66,0x61,0x63
000064  655f6164          DCB      0x65,0x5f,0x61,0x64
000068  645f7469          DCB      0x64,0x5f,0x74,0x69
00006c  6d656f75          DCB      0x6d,0x65,0x6f,0x75
000070  7400              DCB      0x74,0x00
                  |symbol_number.266|
000072  7561              DCB      0x75,0x61
000074  72745f73          DCB      0x72,0x74,0x5f,0x73
000078  616d706c          DCB      0x61,0x6d,0x70,0x6c
00007c  655f6661          DCB      0x65,0x5f,0x66,0x61
000080  63655f72          DCB      0x63,0x65,0x5f,0x72
000084  65636f67          DCB      0x65,0x63,0x6f,0x67
000088  6e697469          DCB      0x6e,0x69,0x74,0x69
00008c  6f6e5f74          DCB      0x6f,0x6e,0x5f,0x74
000090  696d656f          DCB      0x69,0x6d,0x65,0x6f
000094  757400            DCB      0x75,0x74,0x00

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  4d525f53          DCB      "MR_SUCCESS",0
000004  55434345
000008  535300  
00000b  00                DCB      0
00000c  4d525f52          DCB      "MR_REJECTED",0
000010  454a4543
000014  54454400
000018  4d525f41          DCB      "MR_ABORTED",0
00001c  424f5254
000020  454400  
000023  00                DCB      0
000024  4d525f46          DCB      "MR_FAILED_DEV_OPEN_FAIL",0
000028  41494c45
00002c  445f4445
000030  565f4f50
000034  454e5f46
000038  41494c00
00003c  4d525f46          DCB      "MR_FAILED_UNKNOWN_REASON",0
000040  41494c45
000044  445f554e
000048  4b4e4f57
00004c  4e5f5245
000050  41534f4e
000054  00      
000055  00                DCB      0
000056  00                DCB      0
000057  00                DCB      0
000058  4d525f46          DCB      "MR_FAILED_INVALID_PARAM",0
00005c  41494c45
000060  445f494e
000064  56414c49
000068  445f5041
00006c  52414d00
000070  4d525f46          DCB      "MR_FAILED_OOM",0
000074  41494c45
000078  445f4f4f
00007c  4d00    
00007e  00                DCB      0
00007f  00                DCB      0
000080  4d525f46          DCB      "MR_FAILED_UNKNOWN_USER",0
000084  41494c45
000088  445f554e
00008c  4b4e4f57
000090  4e5f5553
000094  455200  
000097  00                DCB      0
000098  4d525f46          DCB      "MR_FAILED_MAX_USER",0
00009c  41494c45
0000a0  445f4d41
0000a4  585f5553
0000a8  455200  
0000ab  00                DCB      0
0000ac  4d525f46          DCB      "MR_FAILED_FACE_ENROLLED",0
0000b0  41494c45
0000b4  445f4641
0000b8  43455f45
0000bc  4e524f4c
0000c0  4c454400
0000c4  4d525f46          DCB      "MR_FAILED_LIVENESS_CHECK",0
0000c8  41494c45
0000cc  445f4c49
0000d0  56454e45
0000d4  53535f43
0000d8  4845434b
0000dc  00      
0000dd  00                DCB      0
0000de  00                DCB      0
0000df  00                DCB      0
0000e0  4d525f46          DCB      "MR_FAILED_TIME_OUT",0
0000e4  41494c45
0000e8  445f5449
0000ec  4d455f4f
0000f0  555400  
0000f3  00                DCB      0
0000f4  4d525f46          DCB      "MR_FAILED_AUTHORIZATION",0
0000f8  41494c45
0000fc  445f4155
000100  54484f52
000104  495a4154
000108  494f4e00
00010c  4d525f46          DCB      "MR_FAILED_READ_FILE",0
000110  41494c45
000114  445f5245
000118  41445f46
00011c  494c4500
000120  4d525f46          DCB      "MR_FAILED_WRITE_FILE",0
000124  41494c45
000128  445f5752
00012c  4954455f
000130  46494c45
000134  00      
000135  00                DCB      0
000136  00                DCB      0
000137  00                DCB      0
000138  4d525f46          DCB      "MR_FAILED_NO_ENCRYPT",0
00013c  41494c45
000140  445f4e4f
000144  5f454e43
000148  52595054
00014c  00      
00014d  00                DCB      0
00014e  00                DCB      0
00014f  00                DCB      0
000150  4d525f46          DCB      "MR_FAILED_STORE_ERR",0
000154  41494c45
000158  445f5354
00015c  4f52455f
000160  45525200
000164  4d525f46          DCB      "MR_FAILED_NO_IMG",0
000168  41494c45
00016c  445f4e4f
000170  5f494d47
000174  00      
000175  00                DCB      0
000176  00                DCB      0
000177  00                DCB      0
000178  4d525f46          DCB      "MR_FAILED_NO_IDX",0
00017c  41494c45
000180  445f4e4f
000184  5f494458
000188  00      
000189  00                DCB      0
00018a  00                DCB      0
00018b  00                DCB      0
00018c  4d525f46          DCB      "MR_FAILED_BUF_OVERFLOW",0
000190  41494c45
000194  445f4255
000198  465f4f56
00019c  4552464c
0001a0  4f5700  
0001a3  00                DCB      0
0001a4  4d525f46          DCB      "MR_FAILED_MASS_DATA_HEAD_EMPTY",0
0001a8  41494c45
0001ac  445f4d41
0001b0  53535f44
0001b4  4154415f
0001b8  48454144
0001bc  5f454d50
0001c0  545900  
0001c3  00                DCB      0
0001c4  4d525f46          DCB      "MR_FAILED_MASS_DATA_DB_ABNORMAL",0
0001c8  41494c45
0001cc  445f4d41
0001d0  53535f44
0001d4  4154415f
0001d8  44425f41
0001dc  424e4f52
0001e0  4d414c00
0001e4  4d525f46          DCB      "MR_FAILED_MASS_DATA_FM_ABNORMAL",0
0001e8  41494c45
0001ec  445f4d41
0001f0  53535f44
0001f4  4154415f
0001f8  464d5f41
0001fc  424e4f52
000200  4d414c00
000204  4d525f46          DCB      "MR_FAILED_NOT_READY",0
000208  41494c45
00020c  445f4e4f
000210  545f5245
000214  41445900
000218  4d525f46          DCB      "MR_FAILED_EXISTED_USER",0
00021c  41494c45
000220  445f4558
000224  49535445
000228  445f5553
00022c  455200  
00022f  00                DCB      0
000230  4d525f46          DCB      "MR_FAILED_IDX_OVERFLOW",0
000234  41494c45
000238  445f4944
00023c  585f4f56
000240  4552464c
000244  4f5700  
000247  00                DCB      0
000248  4d525f43          DCB      "MR_CONTIUNOUS",0
00024c  4f4e5449
000250  554e4f55
000254  5300    
000256  00                DCB      0
000257  00                DCB      0
000258  4d525f53          DCB      "MR_SUCCESS_BUT_DEL_USER",0
00025c  55434345
000260  53535f42
000264  55545f44
000268  454c5f55
00026c  53455200
000270  4d525f46          DCB      "MR_FAILED_INVALID_CMD",0
000274  41494c45
000278  445f494e
00027c  56414c49
000280  445f434d
000284  4400    
000286  00                DCB      0
000287  00                DCB      0
000288  00                DCB      0
000289  00                DCB      0
00028a  00                DCB      0
00028b  00                DCB      0
00028c  73616d70          DCB      "sample_face_recognition, KL520_FACE_OK, face_id=0x%x, A"
000290  6c655f66
000294  6163655f
000298  7265636f
00029c  676e6974
0002a0  696f6e2c
0002a4  204b4c35
0002a8  32305f46
0002ac  4143455f
0002b0  4f4b2c20
0002b4  66616365
0002b8  5f69643d
0002bc  30782578
0002c0  2c2041  
0002c3  646d696e          DCB      "dmin=%d  UseName=%s\r\n",0
0002c7  3d256420
0002cb  20557365
0002cf  4e616d65
0002d3  3d25730d
0002d7  0a00    
0002d9  00                DCB      0
0002da  00                DCB      0
0002db  00                DCB      0
0002dc  5b202069          DCB      "[  i][  id][pre_add][Adm][                            N"
0002e0  5d5b2020
0002e4  69645d5b
0002e8  7072655f
0002ec  6164645d
0002f0  5b41646d
0002f4  5d5b2020
0002f8  20202020
0002fc  20202020
000300  20202020
000304  20202020
000308  20202020
00030c  20202020
000310  20204e  
000313  616d655d          DCB      "ame][mode][fm0][fm1]\r\n",0
000317  5b6d6f64
00031b  655d5b66
00031f  6d305d5b
000323  666d315d
000327  0d0a00  
00032a  00                DCB      0
00032b  00                DCB      0
00032c  3d3d3d3d          DCB      "======================================================="
000330  3d3d3d3d
000334  3d3d3d3d
000338  3d3d3d3d
00033c  3d3d3d3d
000340  3d3d3d3d
000344  3d3d3d3d
000348  3d3d3d3d
00034c  3d3d3d3d
000350  3d3d3d3d
000354  3d3d3d3d
000358  3d3d3d3d
00035c  3d3d3d3d
000360  3d3d3d  
000363  3d3d3d3d          DCB      "===================%d\r\n",0
000367  3d3d3d3d
00036b  3d3d3d3d
00036f  3d3d3d3d
000373  3d3d3d25
000377  640d0a00
00037b  00                DCB      0
00037c  73616d70          DCB      "sample_face_recognition, KL520_FACE_OK, face_id=0x%x, A"
000380  6c655f66
000384  6163655f
000388  7265636f
00038c  676e6974
000390  696f6e2c
000394  204b4c35
000398  32305f46
00039c  4143455f
0003a0  4f4b2c20
0003a4  66616365
0003a8  5f69643d
0003ac  30782578
0003b0  2c2041  
0003b3  646d696e          DCB      "dmin=%d, UseName=%s\r\n",0
0003b7  3d25642c
0003bb  20557365
0003bf  4e616d65
0003c3  3d25730d
0003c7  0a00    

                          AREA ||.data||, DATA, ALIGN=2

                  a
000000  01                DCB      0x01
                  sample_app_display_state
000001  000000            DCB      0x00,0x00,0x00
                  tid_abort_thread
                          DCD      0x00000000
                  tid_special_scenario_1
                          DCD      0x00000000
                  timer_zb
                          DCD      0x00000000
                  count
                          DCD      0x00000000
                  tiemr_id
                          DCD      0x00000000

                          AREA ||area_number.104||, DATA, ALIGN=2

                          EXPORTAS ||area_number.104||, ||.data||
                  tid_doorlock_console
                          DCD      0x00000000

                          AREA ||i._str_uart_reply||, COMGROUP=_str_uart_reply, CODE, READONLY, ALIGN=2

                  _str_uart_reply PROC
;;;201    #pragma diag_suppress 111
;;;202    inline char *_str_uart_reply(enum uart_reply_result result)
000000  2814              CMP      r0,#0x14
;;;203    {
;;;204        switch (result)
000002  d04e              BEQ      |L593.162|
000004  dc0d              BGT      |L593.34|
000006  2814              CMP      r0,#0x14
000008  d22d              BCS      |L593.102|
00000a  e8dff000          TBB      [pc,r0]
00000e  2e30              DCB      0x2e,0x30
000010  322c3436          DCB      0x32,0x2c,0x34,0x36
000014  383a3c3e          DCB      0x38,0x3a,0x3c,0x3e
000018  402c4244          DCB      0x40,0x2c,0x42,0x44
00001c  462c2c2c          DCB      0x46,0x2c,0x2c,0x2c
000020  2c48              DCB      0x2c,0x48
                  |L593.34|
000022  2832              CMP      r0,#0x32
000024  d04d              BEQ      |L593.194|
000026  dc10              BGT      |L593.74|
000028  2818              CMP      r0,#0x18
00002a  d042              BEQ      |L593.178|
00002c  dc06              BGT      |L593.60|
00002e  2815              CMP      r0,#0x15
000030  d039              BEQ      |L593.166|
000032  2816              CMP      r0,#0x16
000034  d039              BEQ      |L593.170|
000036  2817              CMP      r0,#0x17
000038  d115              BNE      |L593.102|
00003a  e038              B        |L593.174|
                  |L593.60|
00003c  2819              CMP      r0,#0x19
00003e  d03a              BEQ      |L593.182|
000040  2830              CMP      r0,#0x30
000042  d03a              BEQ      |L593.186|
000044  2831              CMP      r0,#0x31
000046  d10e              BNE      |L593.102|
000048  e039              B        |L593.190|
                  |L593.74|
00004a  2836              CMP      r0,#0x36
00004c  d041              BEQ      |L593.210|
00004e  dc06              BGT      |L593.94|
000050  2833              CMP      r0,#0x33
000052  d038              BEQ      |L593.198|
000054  2834              CMP      r0,#0x34
000056  d038              BEQ      |L593.202|
000058  2835              CMP      r0,#0x35
00005a  d104              BNE      |L593.102|
00005c  e037              B        |L593.206|
                  |L593.94|
00005e  2840              CMP      r0,#0x40
000060  d039              BEQ      |L593.214|
000062  28ff              CMP      r0,#0xff
000064  d039              BEQ      |L593.218|
                  |L593.102|
;;;205        {
;;;206            CMD_REPLY_RESULT_MACRO(TO_STR)
;;;207        default:
;;;208            break;
;;;209        }
;;;210        
;;;211        return "";
000066  481e              LDR      r0,|L593.224|
;;;212    }
000068  4770              BX       lr
00006a  481e              LDR      r0,|L593.228|
00006c  4770              BX       lr
00006e  481e              LDR      r0,|L593.232|
000070  4770              BX       lr
000072  481e              LDR      r0,|L593.236|
000074  4770              BX       lr
000076  481e              LDR      r0,|L593.240|
000078  4770              BX       lr
00007a  481e              LDR      r0,|L593.244|
00007c  4770              BX       lr
00007e  481e              LDR      r0,|L593.248|
000080  4770              BX       lr
000082  481e              LDR      r0,|L593.252|
000084  4770              BX       lr
000086  481e              LDR      r0,|L593.256|
000088  4770              BX       lr
00008a  481e              LDR      r0,|L593.260|
00008c  4770              BX       lr
00008e  481e              LDR      r0,|L593.264|
000090  4770              BX       lr
000092  481e              LDR      r0,|L593.268|
000094  4770              BX       lr
000096  481e              LDR      r0,|L593.272|
000098  4770              BX       lr
00009a  481e              LDR      r0,|L593.276|
00009c  4770              BX       lr
00009e  481e              LDR      r0,|L593.280|
0000a0  4770              BX       lr
                  |L593.162|
0000a2  481e              LDR      r0,|L593.284|
0000a4  4770              BX       lr
                  |L593.166|
0000a6  481e              LDR      r0,|L593.288|
0000a8  4770              BX       lr
                  |L593.170|
0000aa  481e              LDR      r0,|L593.292|
0000ac  4770              BX       lr
                  |L593.174|
0000ae  481e              LDR      r0,|L593.296|
0000b0  4770              BX       lr
                  |L593.178|
0000b2  481e              LDR      r0,|L593.300|
0000b4  4770              BX       lr
                  |L593.182|
0000b6  481e              LDR      r0,|L593.304|
0000b8  4770              BX       lr
                  |L593.186|
0000ba  481e              LDR      r0,|L593.308|
0000bc  4770              BX       lr
                  |L593.190|
0000be  481e              LDR      r0,|L593.312|
0000c0  4770              BX       lr
                  |L593.194|
0000c2  481e              LDR      r0,|L593.316|
0000c4  4770              BX       lr
                  |L593.198|
0000c6  481e              LDR      r0,|L593.320|
0000c8  4770              BX       lr
                  |L593.202|
0000ca  481e              LDR      r0,|L593.324|
0000cc  4770              BX       lr
                  |L593.206|
0000ce  481e              LDR      r0,|L593.328|
0000d0  4770              BX       lr
                  |L593.210|
0000d2  481e              LDR      r0,|L593.332|
0000d4  4770              BX       lr
                  |L593.214|
0000d6  481e              LDR      r0,|L593.336|
0000d8  4770              BX       lr
                  |L593.218|
0000da  481e              LDR      r0,|L593.340|
0000dc  4770              BX       lr
;;;213    #pragma diag_warning 111
                          ENDP

0000de  0000              DCW      0x0000
                  |L593.224|
                          DCD      ||.conststring||+0x288
                  |L593.228|
                          DCD      ||.conststring||
                  |L593.232|
                          DCD      ||.conststring||+0xc
                  |L593.236|
                          DCD      ||.conststring||+0x18
                  |L593.240|
                          DCD      ||.conststring||+0x24
                  |L593.244|
                          DCD      ||.conststring||+0x3c
                  |L593.248|
                          DCD      ||.conststring||+0x58
                  |L593.252|
                          DCD      ||.conststring||+0x70
                  |L593.256|
                          DCD      ||.conststring||+0x80
                  |L593.260|
                          DCD      ||.conststring||+0x98
                  |L593.264|
                          DCD      ||.conststring||+0xac
                  |L593.268|
                          DCD      ||.conststring||+0xc4
                  |L593.272|
                          DCD      ||.conststring||+0xe0
                  |L593.276|
                          DCD      ||.conststring||+0xf4
                  |L593.280|
                          DCD      ||.conststring||+0x10c
                  |L593.284|
                          DCD      ||.conststring||+0x120
                  |L593.288|
                          DCD      ||.conststring||+0x138
                  |L593.292|
                          DCD      ||.conststring||+0x150
                  |L593.296|
                          DCD      ||.conststring||+0x164
                  |L593.300|
                          DCD      ||.conststring||+0x178
                  |L593.304|
                          DCD      ||.conststring||+0x18c
                  |L593.308|
                          DCD      ||.conststring||+0x1a4
                  |L593.312|
                          DCD      ||.conststring||+0x1c4
                  |L593.316|
                          DCD      ||.conststring||+0x1e4
                  |L593.320|
                          DCD      ||.conststring||+0x204
                  |L593.324|
                          DCD      ||.conststring||+0x218
                  |L593.328|
                          DCD      ||.conststring||+0x230
                  |L593.332|
                          DCD      ||.conststring||+0x248
                  |L593.336|
                          DCD      ||.conststring||+0x258
                  |L593.340|
                          DCD      ||.conststring||+0x270

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\scpu\\share\\sample_app_console.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___20_sample_app_console_c_50b85415____REV16|
#line 208 "F:\\Users\\fu\\AppData\\Local\\Arm\\Packs\\ARM\\CMSIS\\5.9.0\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___20_sample_app_console_c_50b85415____REV16| PROC
#line 209

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___20_sample_app_console_c_50b85415____REVSH|
#line 223
|__asm___20_sample_app_console_c_50b85415____REVSH| PROC
#line 224

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___20_sample_app_console_c_50b85415____RRX|
#line 410
|__asm___20_sample_app_console_c_50b85415____RRX| PROC
#line 411

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
