; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\objects\kdp_comm_aes.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\kdp_comm_aes.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O3 --diag_suppress=9931 -I..\..\config -I..\..\..\..\board -I..\..\..\..\common\include -I..\..\..\..\scpu\device\include\CMSIS -I..\..\..\..\scpu\device\include\Kneron -I..\..\..\..\scpu\framework\include -I..\..\..\..\scpu\framework\include\framework -I..\..\..\..\scpu\drivers\include -I..\..\..\..\scpu\drivers\include\media\touch -I..\..\..\..\scpu\drivers\include\media\flash -I..\..\..\..\scpu\lib\kdp_system\inc -I..\..\..\..\scpu\lib\kdp_application\include\ -I..\..\..\..\scpu\lib\kdp_application\base\ -I..\..\..\..\scpu\lib\kdp_application\misc -I..\..\..\..\scpu\lib\kdp_e2e_r1n1\include -I..\..\..\..\scpu\include -I..\..\..\..\scpu\middleware\ota -I..\..\..\..\scpu\middleware\comm -I..\..\..\..\scpu\middleware\kdp_comm -I..\..\..\..\scpu\share -I..\..\..\..\scpu\share\gui_lib -I..\..\user -I.\RTE\CMSIS -I.\RTE\_Target-scpu -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\RTOS2\Include -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\RTOS2\RTX\Include -IF:\Users\fu\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\Device\ARM\ARMCM4\Include -D__RTX -D__MICROLIB -D__UVISION_VERSION=538 -D_RTE_ -DARMCM4_FP -D_RTE_ -DARM_MATH_CM4 -DTARGET_SCPU -DLOG_ENABLE -DKL520 -DHEAD_POSE_CHECK_PERCENT --omf_browse=.\objects\kdp_comm_aes.crf ..\..\..\..\scpu\middleware\kdp_comm\kdp_comm_aes.c]
                          THUMB

                          AREA ||i.DecBytes||, CODE, READONLY, ALIGN=1

                  DecBytes PROC
;;;390    
;;;391    int DecBytes(uint8_t *bytes, int length, const uint8_t *key, int stride, uint8_t *out)
000000  b5f0              PUSH     {r4-r7,lr}
;;;392    {
000002  9d05              LDR      r5,[sp,#0x14]
000004  b905              CBNZ     r5,|L1.8|
;;;393        if (!out)
;;;394            out = bytes;
000006  4605              MOV      r5,r0
                  |L1.8|
;;;395        for(int index = 0; index < length; index++){
000008  2400              MOVS     r4,#0
00000a  e00a              B        |L1.34|
                  |L1.12|
;;;396            bytes[index] = ~bytes[index];
;;;397            out[index] = bytes[index] ^ key[index % stride];
00000c  fb94f7f3          SDIV     r7,r4,r3
000010  5d06              LDRB     r6,[r0,r4]            ;396
000012  fb034717          MLS      r7,r3,r7,r4
000016  43f6              MVNS     r6,r6                 ;396
000018  5506              STRB     r6,[r0,r4]            ;396
00001a  5dd7              LDRB     r7,[r2,r7]
00001c  4077              EORS     r7,r7,r6
00001e  552f              STRB     r7,[r5,r4]
000020  1c64              ADDS     r4,r4,#1
                  |L1.34|
000022  428c              CMP      r4,r1                 ;395
000024  dbf2              BLT      |L1.12|
;;;398        }
;;;399        return 0;
000026  2000              MOVS     r0,#0
;;;400    }
000028  bdf0              POP      {r4-r7,pc}
;;;401    #endif
                          ENDP


                          AREA ||i.GMul||, CODE, READONLY, ALIGN=1

                  GMul PROC
;;;205    /* Galois Field (256) Multiplication of two Bytes */
;;;206    uint8_t GMul(uint8_t u, uint8_t v) {
000000  b510              PUSH     {r4,lr}
;;;207        uint8_t p = 0;
000002  2300              MOVS     r3,#0
;;;208    
;;;209        for (int i = 0; i < 8; ++i) {
000004  461a              MOV      r2,r3
                  |L2.6|
;;;210            if (u & 0x01) {    //
000006  07c4              LSLS     r4,r0,#31
000008  d000              BEQ      |L2.12|
;;;211                p ^= v;
00000a  404b              EORS     r3,r3,r1
                  |L2.12|
;;;212            }
;;;213    
;;;214            int flag = (v & 0x80);
00000c  f0110f80          TST      r1,#0x80
;;;215            v <<= 1;
000010  ea4f6141          LSL      r1,r1,#25
000014  ea4f6111          LSR      r1,r1,#24
;;;216            if (flag) {
000018  d001              BEQ      |L2.30|
;;;217                v ^= 0x1B; /* x^8 + x^4 + x^3 + x + 1 */
00001a  f081011b          EOR      r1,r1,#0x1b
                  |L2.30|
;;;218            }
;;;219    
;;;220            u >>= 1;
00001e  0840              LSRS     r0,r0,#1
000020  1c52              ADDS     r2,r2,#1
000022  2a08              CMP      r2,#8                 ;209
000024  dbef              BLT      |L2.6|
;;;221        }
;;;222    
;;;223        return p;
000026  4618              MOV      r0,r3
;;;224    }
000028  bd10              POP      {r4,pc}
;;;225    
                          ENDP


                          AREA ||i.addRoundKey||, CODE, READONLY, ALIGN=2

                  addRoundKey PROC
;;;142    
;;;143    int addRoundKey(uint8_t (*state)[4], const uint32_t *key) {
000000  b5ff              PUSH     {r0-r7,lr}
;;;144        uint8_t k[4][4];
;;;145    
;;;146        /* i: row, j: col */
;;;147        for (int i = 0; i < 4; ++i) {
000002  2300              MOVS     r3,#0
000004  46ec              MOV      r12,sp                ;144
                  |L3.6|
;;;148            for (int j = 0; j < 4; ++j) {
000006  2200              MOVS     r2,#0
;;;149                k[i][j] = (uint8_t) BYTE(key[j], 3 - i);  /* copy uint32 key[4] to uint8 k[4][4] */
000008  f1c30403          RSB      r4,r3,#3
00000c  00e7              LSLS     r7,r4,#3
;;;150                state[i][j] ^= k[i][j];
00000e  eb000583          ADD      r5,r0,r3,LSL #2
000012  eb0c0683          ADD      r6,r12,r3,LSL #2      ;149
000016  bf00              NOP                            ;149
                  |L3.24|
000018  f8514022          LDR      r4,[r1,r2,LSL #2]     ;149
00001c  40fc              LSRS     r4,r4,r7              ;149
00001e  54b4              STRB     r4,[r6,r2]            ;149
000020  f815e002          LDRB     lr,[r5,r2]
000024  ea8e0e04          EOR      lr,lr,r4
000028  f805e002          STRB     lr,[r5,r2]
00002c  1c52              ADDS     r2,r2,#1
00002e  2a04              CMP      r2,#4                 ;148
000030  dbf2              BLT      |L3.24|
000032  1c5b              ADDS     r3,r3,#1              ;148
000034  2b04              CMP      r3,#4                 ;147
000036  dbe6              BLT      |L3.6|
;;;151            }
;;;152        }
;;;153    
;;;154        return 0;
;;;155    }
000038  b004              ADD      sp,sp,#0x10
00003a  2000              MOVS     r0,#0                 ;154
00003c  bdf0              POP      {r4-r7,pc}
;;;156    
                          ENDP


                          AREA ||i.aesDecrypt||, CODE, READONLY, ALIGN=2

                  aesDecrypt PROC
;;;328    
;;;329    int aesDecrypt(const uint8_t *key, uint32_t keyLen, const uint8_t *ct, uint8_t *pt, uint32_t len) {
000000  e92d47f0          PUSH     {r4-r10,lr}
000004  b0e6              SUB      sp,sp,#0x198
000006  4691              MOV      r9,r2
;;;330        AesKey aesKey;
;;;331        uint8_t *pos = pt;
;;;332        const uint32_t *rk = aesKey.dK;
;;;333        //uint8_t out[BLOCKSIZE] = {0};
;;;334        uint8_t actualKey[16] = {0};
000008  2200              MOVS     r2,#0
00000a  f8dd81b8          LDR      r8,[sp,#0x1b8]
00000e  ac30              ADD      r4,sp,#0xc0           ;332
000010  925f              STR      r2,[sp,#0x17c]
000012  9260              STR      r2,[sp,#0x180]
000014  9261              STR      r2,[sp,#0x184]
;;;335        uint8_t state[4][4] = {0};
000016  9262              STR      r2,[sp,#0x188]
000018  461d              MOV      r5,r3                 ;331
00001a  46a2              MOV      r10,r4                ;332
00001c  9200              STR      r2,[sp,#0]
00001e  9201              STR      r2,[sp,#4]
000020  9202              STR      r2,[sp,#8]
;;;336    		//dbg_msg_console("aesDecrypt coming in.");
;;;337        if (NULL == key ){//|| NULL == ct ){//|| NULL == pt){
;;;338            dbg_msg_console("param err.");
;;;339            return -1;
000022  1e56              SUBS     r6,r2,#1
000024  9203              STR      r2,[sp,#0xc]          ;329
000026  b118              CBZ      r0,|L4.48|
;;;340        }
;;;341    
;;;342        if (keyLen > 16){
000028  2910              CMP      r1,#0x10
00002a  d903              BLS      |L4.52|
;;;343            dbg_msg_console("keyLen must be 16.");
00002c  a126              ADR      r1,|L4.200|
;;;344            return -1;
00002e  e005              B        |L4.60|
                  |L4.48|
000030  a12b              ADR      r1,|L4.224|
000032  e003              B        |L4.60|
                  |L4.52|
;;;345        }
;;;346    
;;;347        if (len % BLOCKSIZE){
000034  ea5f7208          LSLS     r2,r8,#28
000038  d007              BEQ      |L4.74|
;;;348            dbg_msg_console("inLen is invalid.");
00003a  a12d              ADR      r1,|L4.240|
                  |L4.60|
00003c  2001              MOVS     r0,#1
00003e  f7fffffe          BL       kdp_level_printf
;;;349            return -1;
000042  4630              MOV      r0,r6
                  |L4.68|
;;;350        }
;;;351    
;;;352        memcpy(actualKey, key, keyLen);
;;;353        keyExpansion(actualKey, 16, &aesKey);
;;;354    
;;;355        for (int i = 0; i < len; i += BLOCKSIZE) {
;;;356            loadStateArray(state, ct);
;;;357            addRoundKey(state, rk);
;;;358            for (int j = 1; j < 10; ++j) {
;;;359                rk += 4;
;;;360                invShiftRows(state);
;;;361                invSubBytes(state);
;;;362                addRoundKey(state, rk);
;;;363                invMixColumns(state);
;;;364            }
;;;365            invSubBytes(state);
;;;366            invShiftRows(state);
;;;367            addRoundKey(state, rk+4);
;;;368    
;;;369            storeStateArray(state, pos);
;;;370            pos += BLOCKSIZE;
;;;371            ct += BLOCKSIZE;
;;;372            rk = aesKey.dK;
;;;373        }
;;;374        //dbg_msg_console("aesDecrypt coming out.");
;;;375        return 0;
;;;376    }
000044  b066              ADD      sp,sp,#0x198
000046  e8bd87f0          POP      {r4-r10,pc}
                  |L4.74|
00004a  460a              MOV      r2,r1                 ;352
00004c  4601              MOV      r1,r0                 ;352
00004e  a85f              ADD      r0,sp,#0x17c          ;352
000050  f7fffffe          BL       __aeabi_memcpy
000054  aa04              ADD      r2,sp,#0x10           ;353
000056  2110              MOVS     r1,#0x10              ;353
000058  a85f              ADD      r0,sp,#0x17c          ;353
00005a  f7fffffe          BL       keyExpansion
00005e  2700              MOVS     r7,#0                 ;355
000060  e02d              B        |L4.190|
                  |L4.98|
000062  4649              MOV      r1,r9                 ;356
000064  4668              MOV      r0,sp                 ;356
000066  f7fffffe          BL       loadStateArray
00006a  4621              MOV      r1,r4                 ;357
00006c  4668              MOV      r0,sp                 ;357
00006e  f7fffffe          BL       addRoundKey
000072  2601              MOVS     r6,#1                 ;358
                  |L4.116|
000074  4668              MOV      r0,sp                 ;360
000076  3410              ADDS     r4,r4,#0x10           ;360
000078  f7fffffe          BL       invShiftRows
00007c  4668              MOV      r0,sp                 ;361
00007e  f7fffffe          BL       invSubBytes
000082  4621              MOV      r1,r4                 ;362
000084  4668              MOV      r0,sp                 ;362
000086  f7fffffe          BL       addRoundKey
00008a  4668              MOV      r0,sp                 ;363
00008c  f7fffffe          BL       invMixColumns
000090  1c76              ADDS     r6,r6,#1              ;363
000092  2e0a              CMP      r6,#0xa               ;358
000094  dbee              BLT      |L4.116|
000096  4668              MOV      r0,sp                 ;365
000098  f7fffffe          BL       invSubBytes
00009c  4668              MOV      r0,sp                 ;366
00009e  f7fffffe          BL       invShiftRows
0000a2  f1040110          ADD      r1,r4,#0x10           ;367
0000a6  4668              MOV      r0,sp                 ;367
0000a8  f7fffffe          BL       addRoundKey
0000ac  4629              MOV      r1,r5                 ;369
0000ae  4668              MOV      r0,sp                 ;369
0000b0  f7fffffe          BL       storeStateArray
0000b4  3510              ADDS     r5,r5,#0x10           ;371
0000b6  f1090910          ADD      r9,r9,#0x10           ;371
0000ba  4654              MOV      r4,r10                ;371
0000bc  3710              ADDS     r7,r7,#0x10           ;371
                  |L4.190|
0000be  4547              CMP      r7,r8                 ;355
0000c0  d3cf              BCC      |L4.98|
0000c2  2000              MOVS     r0,#0                 ;375
0000c4  e7be              B        |L4.68|
;;;377    #endif
                          ENDP

0000c6  0000              DCW      0x0000
                  |L4.200|
0000c8  6b65794c          DCB      "keyLen must be 16.\r\n",0
0000cc  656e206d
0000d0  75737420
0000d4  62652031
0000d8  362e0d0a
0000dc  00      
0000dd  00                DCB      0
0000de  00                DCB      0
0000df  00                DCB      0
                  |L4.224|
0000e0  70617261          DCB      "param err.\r\n",0
0000e4  6d206572
0000e8  722e0d0a
0000ec  00      
0000ed  00                DCB      0
0000ee  00                DCB      0
0000ef  00                DCB      0
                  |L4.240|
0000f0  696e4c65          DCB      "inLen is invalid.\r\n",0
0000f4  6e206973
0000f8  20696e76
0000fc  616c6964
000100  2e0d0a00

                          AREA ||i.aesEncrypt||, CODE, READONLY, ALIGN=2

                  aesEncrypt PROC
;;;273    
;;;274    int aesEncrypt(const uint8_t *key, uint32_t keyLen, const uint8_t *pt, uint8_t *ct, uint32_t len) {
000000  e92d43f0          PUSH     {r4-r9,lr}
000004  b0e1              SUB      sp,sp,#0x184
000006  4690              MOV      r8,r2
;;;275    
;;;276        AesKey aesKey;
;;;277        uint8_t *pos = ct;
;;;278        const uint32_t *rk = aesKey.eK;
;;;279        //uint8_t out[BLOCKSIZE] = {0};
;;;280        uint8_t actualKey[16] = {0};
000008  2200              MOVS     r2,#0
00000a  f8dd91a0          LDR      r9,[sp,#0x1a0]
00000e  925e              STR      r2,[sp,#0x178]
000010  925f              STR      r2,[sp,#0x17c]
;;;281        uint8_t state[4][4] = {0};
000012  9260              STR      r2,[sp,#0x180]
000014  461d              MOV      r5,r3                 ;277
000016  466c              MOV      r4,sp                 ;278
000018  925d              STR      r2,[sp,#0x174]        ;280
00001a  9259              STR      r2,[sp,#0x164]
00001c  925a              STR      r2,[sp,#0x168]
00001e  925b              STR      r2,[sp,#0x16c]
;;;282    		//dbg_msg_console("aesEncrypt");
;;;283        if (NULL == key || NULL == pt ){//|| NULL == ct){
;;;284            dbg_msg_console("param err.");
;;;285            return -1;
000020  1e56              SUBS     r6,r2,#1
000022  925c              STR      r2,[sp,#0x170]        ;274
000024  b130              CBZ      r0,|L5.52|
000026  f1b80f00          CMP      r8,#0                 ;283
00002a  d003              BEQ      |L5.52|
;;;286        }
;;;287    
;;;288        if (keyLen > 16){
00002c  2910              CMP      r1,#0x10
00002e  d903              BLS      |L5.56|
;;;289            dbg_msg_console("keyLen must be 16.");
000030  a126              ADR      r1,|L5.204|
;;;290            return -1;
000032  e005              B        |L5.64|
                  |L5.52|
000034  a12b              ADR      r1,|L5.228|
000036  e003              B        |L5.64|
                  |L5.56|
;;;291        }
;;;292    
;;;293        if (len % BLOCKSIZE){
000038  ea5f7209          LSLS     r2,r9,#28
00003c  d007              BEQ      |L5.78|
;;;294            dbg_msg_console("inLen is invalid.");
00003e  a12d              ADR      r1,|L5.244|
                  |L5.64|
000040  2001              MOVS     r0,#1
000042  f7fffffe          BL       kdp_level_printf
;;;295            return -1;
000046  4630              MOV      r0,r6
                  |L5.72|
;;;296        }
;;;297    
;;;298        memcpy(actualKey, key, keyLen);
;;;299    		//dbg_msg_console("1111");
;;;300        keyExpansion(actualKey, 16, &aesKey);
;;;301    //dbg_msg_console("2222");
;;;302        for (int i = 0; i < len; i += BLOCKSIZE) {
;;;303    
;;;304            loadStateArray(state, pt);
;;;305            addRoundKey(state, rk);
;;;306    //dbg_msg_console("33333");
;;;307            for (int j = 1; j < 10; ++j) {
;;;308                rk += 4;
;;;309                subBytes(state);
;;;310                shiftRows(state);
;;;311                mixColumns(state);
;;;312                addRoundKey(state, rk);
;;;313            }
;;;314    
;;;315            subBytes(state);
;;;316            shiftRows(state);
;;;317            addRoundKey(state, rk+4);
;;;318    
;;;319            storeStateArray(state, pos);
;;;320    
;;;321            pos += BLOCKSIZE;
;;;322            pt += BLOCKSIZE;
;;;323            rk = aesKey.eK;
;;;324        }
;;;325    		//dbg_msg_console("44444");
;;;326        return 0;
;;;327    }
000048  b061              ADD      sp,sp,#0x184
00004a  e8bd83f0          POP      {r4-r9,pc}
                  |L5.78|
00004e  460a              MOV      r2,r1                 ;298
000050  4601              MOV      r1,r0                 ;298
000052  a85d              ADD      r0,sp,#0x174          ;298
000054  f7fffffe          BL       __aeabi_memcpy
000058  466a              MOV      r2,sp                 ;300
00005a  2110              MOVS     r1,#0x10              ;300
00005c  a85d              ADD      r0,sp,#0x174          ;300
00005e  f7fffffe          BL       keyExpansion
000062  2700              MOVS     r7,#0                 ;302
000064  e02d              B        |L5.194|
                  |L5.102|
000066  4641              MOV      r1,r8                 ;304
000068  a859              ADD      r0,sp,#0x164          ;304
00006a  f7fffffe          BL       loadStateArray
00006e  4621              MOV      r1,r4                 ;305
000070  a859              ADD      r0,sp,#0x164          ;305
000072  f7fffffe          BL       addRoundKey
000076  2601              MOVS     r6,#1                 ;307
                  |L5.120|
000078  a859              ADD      r0,sp,#0x164          ;309
00007a  3410              ADDS     r4,r4,#0x10           ;309
00007c  f7fffffe          BL       subBytes
000080  a859              ADD      r0,sp,#0x164          ;310
000082  f7fffffe          BL       shiftRows
000086  a859              ADD      r0,sp,#0x164          ;311
000088  f7fffffe          BL       mixColumns
00008c  4621              MOV      r1,r4                 ;312
00008e  a859              ADD      r0,sp,#0x164          ;312
000090  f7fffffe          BL       addRoundKey
000094  1c76              ADDS     r6,r6,#1              ;312
000096  2e0a              CMP      r6,#0xa               ;307
000098  dbee              BLT      |L5.120|
00009a  a859              ADD      r0,sp,#0x164          ;315
00009c  f7fffffe          BL       subBytes
0000a0  a859              ADD      r0,sp,#0x164          ;316
0000a2  f7fffffe          BL       shiftRows
0000a6  f1040110          ADD      r1,r4,#0x10           ;317
0000aa  a859              ADD      r0,sp,#0x164          ;317
0000ac  f7fffffe          BL       addRoundKey
0000b0  4629              MOV      r1,r5                 ;319
0000b2  a859              ADD      r0,sp,#0x164          ;319
0000b4  f7fffffe          BL       storeStateArray
0000b8  3510              ADDS     r5,r5,#0x10           ;323
0000ba  f1080810          ADD      r8,r8,#0x10           ;322
0000be  466c              MOV      r4,sp                 ;323
0000c0  3710              ADDS     r7,r7,#0x10           ;323
                  |L5.194|
0000c2  454f              CMP      r7,r9                 ;302
0000c4  d3cf              BCC      |L5.102|
0000c6  2000              MOVS     r0,#0                 ;326
0000c8  e7be              B        |L5.72|
;;;328    
                          ENDP

0000ca  0000              DCW      0x0000
                  |L5.204|
0000cc  6b65794c          DCB      "keyLen must be 16.\r\n",0
0000d0  656e206d
0000d4  75737420
0000d8  62652031
0000dc  362e0d0a
0000e0  00      
0000e1  00                DCB      0
0000e2  00                DCB      0
0000e3  00                DCB      0
                  |L5.228|
0000e4  70617261          DCB      "param err.\r\n",0
0000e8  6d206572
0000ec  722e0d0a
0000f0  00      
0000f1  00                DCB      0
0000f2  00                DCB      0
0000f3  00                DCB      0
                  |L5.244|
0000f4  696e4c65          DCB      "inLen is invalid.\r\n",0
0000f8  6e206973
0000fc  20696e76
000100  616c6964
000104  2e0d0a00

                          AREA ||i.encBytes||, CODE, READONLY, ALIGN=1

                  encBytes PROC
;;;379    #if ( ENCRYPTION_MODE&XOR_ENCRYPTION )
;;;380    int encBytes(uint8_t *bytes, int length, const uint8_t *key, int stride, uint8_t *out)
000000  b5f0              PUSH     {r4-r7,lr}
;;;381    {
000002  9d05              LDR      r5,[sp,#0x14]
000004  b905              CBNZ     r5,|L6.8|
;;;382        if (!out)
;;;383            out = bytes;
000006  4605              MOV      r5,r0
                  |L6.8|
;;;384        for(int index = 0; index < length; index++){
000008  2400              MOVS     r4,#0
00000a  e009              B        |L6.32|
                  |L6.12|
;;;385            out[index] = bytes[index] ^ key[index % stride];
00000c  fb94f6f3          SDIV     r6,r4,r3
000010  fb034616          MLS      r6,r3,r6,r4
000014  5d07              LDRB     r7,[r0,r4]
000016  5d96              LDRB     r6,[r2,r6]
000018  407e              EORS     r6,r6,r7
;;;386            out[index] = ~out[index];
00001a  43f6              MVNS     r6,r6
00001c  552e              STRB     r6,[r5,r4]
00001e  1c64              ADDS     r4,r4,#1
                  |L6.32|
000020  428c              CMP      r4,r1                 ;384
000022  dbf3              BLT      |L6.12|
;;;387        }
;;;388        return 0;
000024  2000              MOVS     r0,#0
;;;389    }
000026  bdf0              POP      {r4-r7,pc}
;;;390    
                          ENDP


                          AREA ||i.invMixColumns||, CODE, READONLY, ALIGN=2

                  invMixColumns PROC
;;;249    
;;;250    int invMixColumns(uint8_t (*state)[4]) {
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;251        uint8_t tmp[4][4];
;;;252        uint8_t M[4][4] = {{0x0E, 0x0B, 0x0D, 0x09},
000004  4b22              LDR      r3,|L7.144|
000006  4683              MOV      r11,r0                ;250
000008  b08f              SUB      sp,sp,#0x3c           ;250
00000a  cb0f              LDM      r3,{r0-r3}
00000c  ac05              ADD      r4,sp,#0x14
00000e  e884000f          STM      r4,{r0-r3}
;;;253                           {0x09, 0x0E, 0x0B, 0x0D},
;;;254                           {0x0D, 0x09, 0x0E, 0x0B},
;;;255                           {0x0B, 0x0D, 0x09, 0x0E}};
;;;256    
;;;257        /* copy state[4][4] to tmp[4][4] */
;;;258        for (int i = 0; i < 4; ++i) {
000012  2100              MOVS     r1,#0
000014  aa01              ADD      r2,sp,#4              ;251
                  |L7.22|
;;;259            for (int j = 0; j < 4; ++j){
000016  2000              MOVS     r0,#0
;;;260                tmp[i][j] = state[i][j];
000018  eb0b0481          ADD      r4,r11,r1,LSL #2
00001c  eb020381          ADD      r3,r2,r1,LSL #2
                  |L7.32|
000020  5c25              LDRB     r5,[r4,r0]
000022  541d              STRB     r5,[r3,r0]
000024  1c40              ADDS     r0,r0,#1
000026  2804              CMP      r0,#4                 ;259
000028  dbfa              BLT      |L7.32|
00002a  1c49              ADDS     r1,r1,#1              ;259
00002c  2904              CMP      r1,#4                 ;258
00002e  dbf2              BLT      |L7.22|
;;;261            }
;;;262        }
;;;263    
;;;264        for (int i = 0; i < 4; ++i) {
000030  2500              MOVS     r5,#0
000032  f10d0a14          ADD      r10,sp,#0x14          ;252
                  |L7.54|
;;;265            for (int j = 0; j < 4; ++j) {
000036  2400              MOVS     r4,#0
;;;266                state[i][j] = GMul(M[i][0], tmp[0][j]) ^ GMul(M[i][1], tmp[1][j])
000038  eb0b0985          ADD      r9,r11,r5,LSL #2
00003c  eb0a0685          ADD      r6,r10,r5,LSL #2
                  |L7.64|
000040  f10d0804          ADD      r8,sp,#4
000044  f81a0025          LDRB     r0,[r10,r5,LSL #2]
000048  f8181004          LDRB     r1,[r8,r4]
00004c  f7fffffe          BL       GMul
000050  44a0              ADD      r8,r8,r4
000052  4607              MOV      r7,r0
000054  f8981004          LDRB     r1,[r8,#4]
000058  7870              LDRB     r0,[r6,#1]
00005a  f7fffffe          BL       GMul
00005e  4047              EORS     r7,r7,r0
000060  f8981008          LDRB     r1,[r8,#8]
000064  78b0              LDRB     r0,[r6,#2]
000066  f7fffffe          BL       GMul
00006a  4047              EORS     r7,r7,r0
00006c  f898100c          LDRB     r1,[r8,#0xc]
000070  78f0              LDRB     r0,[r6,#3]
000072  f7fffffe          BL       GMul
000076  4047              EORS     r7,r7,r0
000078  f8097004          STRB     r7,[r9,r4]
00007c  1c64              ADDS     r4,r4,#1
00007e  2c04              CMP      r4,#4                 ;265
000080  dbde              BLT      |L7.64|
000082  1c6d              ADDS     r5,r5,#1              ;265
000084  2d04              CMP      r5,#4                 ;264
000086  dbd6              BLT      |L7.54|
;;;267                              ^ GMul(M[i][2], tmp[2][j]) ^ GMul(M[i][3], tmp[3][j]);
;;;268            }
;;;269        }
;;;270    
;;;271        return 0;
;;;272    }
000088  b00f              ADD      sp,sp,#0x3c
00008a  2000              MOVS     r0,#0                 ;271
00008c  e8bd8ff0          POP      {r4-r11,pc}
;;;273    
                          ENDP

                  |L7.144|
                          DCD      ||.constdata||+0x38

                          AREA ||i.invShiftRows||, CODE, READONLY, ALIGN=1

                  invShiftRows PROC
;;;191    
;;;192    int invShiftRows(uint8_t (*state)[4]) {
000000  b5ff              PUSH     {r0-r7,lr}
;;;193        uint32_t block[4] = {0};
000002  2100              MOVS     r1,#0
000004  9100              STR      r1,[sp,#0]
000006  9101              STR      r1,[sp,#4]
000008  9102              STR      r1,[sp,#8]
00000a  466d              MOV      r5,sp
;;;194    
;;;195        /* i: row */
;;;196        for (int i = 0; i < 4; ++i) {
;;;197            LOAD32H(block[i], state[i]);
;;;198            block[i] = ROR32(block[i], 8*i);
00000c  2620              MOVS     r6,#0x20
00000e  9103              STR      r1,[sp,#0xc]
                  |L8.16|
000010  eb000381          ADD      r3,r0,r1,LSL #2       ;197
000014  00cf              LSLS     r7,r1,#3              ;197
000016  681a              LDR      r2,[r3,#0]            ;197
000018  ba12              REV      r2,r2                 ;197
00001a  f02204ff          BIC      r4,r2,#0xff           ;197
00001e  78da              LDRB     r2,[r3,#3]            ;197
000020  4314              ORRS     r4,r4,r2              ;197
000022  fa24f207          LSR      r2,r4,r7
000026  424f              RSBS     r7,r1,#0
000028  f8454021          STR      r4,[r5,r1,LSL #2]     ;197
00002c  eb0607c7          ADD      r7,r6,r7,LSL #3
000030  40bc              LSLS     r4,r4,r7
000032  4322              ORRS     r2,r2,r4
000034  f8452021          STR      r2,[r5,r1,LSL #2]
;;;199            STORE32H(block[i], state[i]);
000038  0e14              LSRS     r4,r2,#24
00003a  f8004021          STRB     r4,[r0,r1,LSL #2]
00003e  0c14              LSRS     r4,r2,#16
000040  705c              STRB     r4,[r3,#1]
000042  0a14              LSRS     r4,r2,#8
000044  709c              STRB     r4,[r3,#2]
000046  1c49              ADDS     r1,r1,#1
000048  70da              STRB     r2,[r3,#3]
00004a  2904              CMP      r1,#4                 ;196
00004c  dbe0              BLT      |L8.16|
;;;200        }
;;;201    
;;;202        return 0;
;;;203    }
00004e  b004              ADD      sp,sp,#0x10
000050  2000              MOVS     r0,#0                 ;202
000052  bdf0              POP      {r4-r7,pc}
;;;204    
                          ENDP


                          AREA ||i.invSubBytes||, CODE, READONLY, ALIGN=2

                  invSubBytes PROC
;;;167    
;;;168    int invSubBytes(uint8_t (*state)[4]) {
000000  b530              PUSH     {r4,r5,lr}
;;;169        /* i: row, j: col */
;;;170        for (int i = 0; i < 4; ++i) {
;;;171            for (int j = 0; j < 4; ++j) {
;;;172                state[i][j] = inv_S[state[i][j]];
000002  4c08              LDR      r4,|L9.36|
000004  2200              MOVS     r2,#0                 ;170
                  |L9.6|
000006  2100              MOVS     r1,#0                 ;171
000008  eb000382          ADD      r3,r0,r2,LSL #2
                  |L9.12|
00000c  5c5d              LDRB     r5,[r3,r1]
00000e  5d65              LDRB     r5,[r4,r5]
000010  545d              STRB     r5,[r3,r1]
000012  1c49              ADDS     r1,r1,#1
000014  2904              CMP      r1,#4                 ;171
000016  dbf9              BLT      |L9.12|
000018  1c52              ADDS     r2,r2,#1              ;171
00001a  2a04              CMP      r2,#4                 ;170
00001c  dbf3              BLT      |L9.6|
;;;173            }
;;;174        }
;;;175    
;;;176        return 0;
00001e  2000              MOVS     r0,#0
;;;177    }
000020  bd30              POP      {r4,r5,pc}
;;;178    
                          ENDP

000022  0000              DCW      0x0000
                  |L9.36|
                          DCD      ||.data||+0x100

                          AREA ||i.keyExpansion||, CODE, READONLY, ALIGN=2

                  keyExpansion PROC
;;;98     
;;;99     int keyExpansion(const uint8_t *key, uint32_t keyLen, AesKey *aesKey) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4613              MOV      r3,r2
;;;100    
;;;101        if (NULL == key || NULL == aesKey){
;;;102            dbg_msg_console("keyExpansion param is NULL\n");
;;;103            return -1;
000006  f04f34ff          MOV      r4,#0xffffffff
00000a  b150              CBZ      r0,|L10.34|
00000c  b14b              CBZ      r3,|L10.34|
;;;104        }
;;;105    
;;;106        if (keyLen != 16){
00000e  2910              CMP      r1,#0x10
000010  d00c              BEQ      |L10.44|
;;;107            dbg_msg_console("keyExpansion keyLen = %d, Not support.\n", keyLen);
000012  460a              MOV      r2,r1
000014  a130              ADR      r1,|L10.216|
000016  2001              MOVS     r0,#1
000018  f7fffffe          BL       kdp_level_printf
                  |L10.28|
;;;108            return -1;
00001c  4620              MOV      r0,r4
                  |L10.30|
;;;109        }
;;;110    
;;;111        uint32_t *w = aesKey->eK;
;;;112        uint32_t *v = aesKey->dK;
;;;113    
;;;114        /* keyLen is 16 Bytes, generate uint32_t W[44]. */
;;;115    
;;;116        /* W[0-3] */
;;;117        for (int i = 0; i < 4; ++i) {
;;;118            LOAD32H(w[i], key + 4*i);
;;;119        }
;;;120    
;;;121        /* W[4-43] */
;;;122        for (int i = 0; i < 10; ++i) {
;;;123            w[4] = w[0] ^ MIX(w[3]) ^ rcon[i];
;;;124            w[5] = w[1] ^ w[4];
;;;125            w[6] = w[2] ^ w[5];
;;;126            w[7] = w[3] ^ w[6];
;;;127            w += 4;
;;;128        }
;;;129    
;;;130        w = aesKey->eK+44 - 4;
;;;131        for (int j = 0; j < 11; ++j) {
;;;132    
;;;133            for (int i = 0; i < 4; ++i) {
;;;134                v[i] = w[i];
;;;135            }
;;;136            w -= 4;
;;;137            v += 4;
;;;138        }
;;;139    
;;;140        return 0;
;;;141    }
00001e  e8bd81f0          POP      {r4-r8,pc}
                  |L10.34|
000022  a138              ADR      r1,|L10.260|
000024  2001              MOVS     r0,#1                 ;102
000026  f7fffffe          BL       kdp_level_printf
00002a  e7f7              B        |L10.28|
                  |L10.44|
00002c  f10301b0          ADD      r1,r3,#0xb0           ;112
000030  f05f0400          MOVS.W   r4,#0                 ;117
                  |L10.52|
000034  eb000584          ADD      r5,r0,r4,LSL #2       ;118
000038  682e              LDR      r6,[r5,#0]            ;118
00003a  78ed              LDRB     r5,[r5,#3]            ;118
00003c  ba36              REV      r6,r6                 ;118
00003e  f02606ff          BIC      r6,r6,#0xff           ;118
000042  432e              ORRS     r6,r6,r5              ;118
000044  f8426024          STR      r6,[r2,r4,LSL #2]     ;118
000048  1c64              ADDS     r4,r4,#1              ;118
00004a  2c04              CMP      r4,#4                 ;117
00004c  dbf2              BLT      |L10.52|
00004e  4d35              LDR      r5,|L10.292|
000050  4f35              LDR      r7,|L10.296|
000052  2400              MOVS     r4,#0                 ;122
                  |L10.84|
000054  68d0              LDR      r0,[r2,#0xc]          ;123
000056  eb056610          ADD      r6,r5,r0,LSR #24      ;123
00005a  f3c04c07          UBFX     r12,r0,#16,#8         ;123
00005e  7836              LDRB     r6,[r6,#0]            ;123
000060  f815c00c          LDRB     r12,[r5,r12]          ;123
000064  ea86660c          EOR      r6,r6,r12,LSL #24     ;123
000068  f3c02c07          UBFX     r12,r0,#8,#8          ;123
00006c  f815c00c          LDRB     r12,[r5,r12]          ;123
000070  ea4f4c0c          LSL      r12,r12,#16           ;123
000074  fa55fe80          UXTAB    lr,r5,r0              ;123
000078  f89ee000          LDRB     lr,[lr,#0]            ;123
00007c  ea8c2c0e          EOR      r12,r12,lr,LSL #8     ;123
000080  ea86060c          EOR      r6,r6,r12             ;123
000084  f852cb10          LDR      r12,[r2],#0x10        ;123
000088  ea86060c          EOR      r6,r6,r12             ;123
00008c  f857c024          LDR      r12,[r7,r4,LSL #2]    ;123
000090  1c64              ADDS     r4,r4,#1              ;126
000092  ea86060c          EOR      r6,r6,r12             ;123
000096  6016              STR      r6,[r2,#0]            ;124
000098  f852cc0c          LDR      r12,[r2,#-0xc]        ;124
00009c  ea8c0c06          EOR      r12,r12,r6            ;124
0000a0  f8c2c004          STR      r12,[r2,#4]           ;125
0000a4  f8526c08          LDR      r6,[r2,#-8]           ;125
0000a8  ea86060c          EOR      r6,r6,r12             ;125
0000ac  4070              EORS     r0,r0,r6              ;126
0000ae  e9c26002          STRD     r6,r0,[r2,#8]         ;122
0000b2  2c0a              CMP      r4,#0xa               ;122
0000b4  dbce              BLT      |L10.84|
0000b6  2200              MOVS     r2,#0                 ;131
0000b8  33a0              ADDS     r3,r3,#0xa0           ;131
                  |L10.186|
0000ba  2000              MOVS     r0,#0                 ;133
                  |L10.188|
0000bc  f8534020          LDR      r4,[r3,r0,LSL #2]     ;134
0000c0  f8414020          STR      r4,[r1,r0,LSL #2]     ;134
0000c4  1c40              ADDS     r0,r0,#1              ;134
0000c6  2804              CMP      r0,#4                 ;133
0000c8  dbf8              BLT      |L10.188|
0000ca  3110              ADDS     r1,r1,#0x10           ;133
0000cc  1c52              ADDS     r2,r2,#1              ;133
0000ce  3b10              SUBS     r3,r3,#0x10           ;133
0000d0  2a0b              CMP      r2,#0xb               ;131
0000d2  dbf2              BLT      |L10.186|
0000d4  2000              MOVS     r0,#0                 ;140
0000d6  e7a2              B        |L10.30|
;;;142    
                          ENDP

                  |L10.216|
0000d8  6b657945          DCB      "keyExpansion keyLen = %d, Not support.\n\r\n",0
0000dc  7870616e
0000e0  73696f6e
0000e4  206b6579
0000e8  4c656e20
0000ec  3d202564
0000f0  2c204e6f
0000f4  74207375
0000f8  70706f72
0000fc  742e0a0d
000100  0a00    
000102  00                DCB      0
000103  00                DCB      0
                  |L10.260|
000104  6b657945          DCB      "keyExpansion param is NULL\n\r\n",0
000108  7870616e
00010c  73696f6e
000110  20706172
000114  616d2069
000118  73204e55
00011c  4c4c0a0d
000120  0a00    
000122  00                DCB      0
000123  00                DCB      0
                  |L10.292|
                          DCD      ||.data||
                  |L10.296|
                          DCD      ||.constdata||

                          AREA ||i.loadStateArray||, CODE, READONLY, ALIGN=2

                  loadStateArray PROC
;;;79     /* copy in[16] to state[4][4] */
;;;80     int loadStateArray(uint8_t (*state)[4], const uint8_t *in) {
000000  b530              PUSH     {r4,r5,lr}
;;;81         for (int i = 0; i < 4; ++i) {
000002  2300              MOVS     r3,#0
                  |L11.4|
;;;82             for (int j = 0; j < 4; ++j) {
000004  f05f0200          MOVS.W   r2,#0
                  |L11.8|
;;;83                 state[j][i] = *in++;
000008  eb000582          ADD      r5,r0,r2,LSL #2
00000c  f8114b01          LDRB     r4,[r1],#1
000010  1c52              ADDS     r2,r2,#1
000012  54ec              STRB     r4,[r5,r3]
000014  2a04              CMP      r2,#4                 ;82
000016  dbf7              BLT      |L11.8|
000018  1c5b              ADDS     r3,r3,#1              ;82
00001a  2b04              CMP      r3,#4                 ;81
00001c  dbf2              BLT      |L11.4|
;;;84             }
;;;85         }
;;;86         return 0;
00001e  2000              MOVS     r0,#0
;;;87     }
000020  bd30              POP      {r4,r5,pc}
;;;88     
                          ENDP


                          AREA ||i.mixColumns||, CODE, READONLY, ALIGN=2

                  mixColumns PROC
;;;225    
;;;226    int mixColumns(uint8_t (*state)[4]) {
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;227        uint8_t tmp[4][4];
;;;228        uint8_t M[4][4] = {{0x02, 0x03, 0x01, 0x01},
000004  4b22              LDR      r3,|L12.144|
000006  4683              MOV      r11,r0                ;226
000008  b08f              SUB      sp,sp,#0x3c           ;226
00000a  cb0f              LDM      r3,{r0-r3}
00000c  ac05              ADD      r4,sp,#0x14
00000e  e884000f          STM      r4,{r0-r3}
;;;229                           {0x01, 0x02, 0x03, 0x01},
;;;230                           {0x01, 0x01, 0x02, 0x03},
;;;231                           {0x03, 0x01, 0x01, 0x02}};
;;;232    
;;;233        /* copy state[4][4] to tmp[4][4] */
;;;234        for (int i = 0; i < 4; ++i) {
000012  2100              MOVS     r1,#0
000014  aa01              ADD      r2,sp,#4              ;227
                  |L12.22|
;;;235            for (int j = 0; j < 4; ++j){
000016  2000              MOVS     r0,#0
;;;236                tmp[i][j] = state[i][j];
000018  eb0b0481          ADD      r4,r11,r1,LSL #2
00001c  eb020381          ADD      r3,r2,r1,LSL #2
                  |L12.32|
000020  5c25              LDRB     r5,[r4,r0]
000022  541d              STRB     r5,[r3,r0]
000024  1c40              ADDS     r0,r0,#1
000026  2804              CMP      r0,#4                 ;235
000028  dbfa              BLT      |L12.32|
00002a  1c49              ADDS     r1,r1,#1              ;235
00002c  2904              CMP      r1,#4                 ;234
00002e  dbf2              BLT      |L12.22|
;;;237            }
;;;238        }
;;;239    
;;;240        for (int i = 0; i < 4; ++i) {
000030  2500              MOVS     r5,#0
000032  f10d0a14          ADD      r10,sp,#0x14          ;228
                  |L12.54|
;;;241            for (int j = 0; j < 4; ++j) {
000036  2400              MOVS     r4,#0
;;;242                state[i][j] = GMul(M[i][0], tmp[0][j]) ^ GMul(M[i][1], tmp[1][j])
000038  eb0b0985          ADD      r9,r11,r5,LSL #2
00003c  eb0a0685          ADD      r6,r10,r5,LSL #2
                  |L12.64|
000040  f10d0804          ADD      r8,sp,#4
000044  f81a0025          LDRB     r0,[r10,r5,LSL #2]
000048  f8181004          LDRB     r1,[r8,r4]
00004c  f7fffffe          BL       GMul
000050  44a0              ADD      r8,r8,r4
000052  4607              MOV      r7,r0
000054  f8981004          LDRB     r1,[r8,#4]
000058  7870              LDRB     r0,[r6,#1]
00005a  f7fffffe          BL       GMul
00005e  4047              EORS     r7,r7,r0
000060  f8981008          LDRB     r1,[r8,#8]
000064  78b0              LDRB     r0,[r6,#2]
000066  f7fffffe          BL       GMul
00006a  4047              EORS     r7,r7,r0
00006c  f898100c          LDRB     r1,[r8,#0xc]
000070  78f0              LDRB     r0,[r6,#3]
000072  f7fffffe          BL       GMul
000076  4047              EORS     r7,r7,r0
000078  f8097004          STRB     r7,[r9,r4]
00007c  1c64              ADDS     r4,r4,#1
00007e  2c04              CMP      r4,#4                 ;241
000080  dbde              BLT      |L12.64|
000082  1c6d              ADDS     r5,r5,#1              ;241
000084  2d04              CMP      r5,#4                 ;240
000086  dbd6              BLT      |L12.54|
;;;243                            ^ GMul(M[i][2], tmp[2][j]) ^ GMul(M[i][3], tmp[3][j]);
;;;244            }
;;;245        }
;;;246    
;;;247        return 0;
;;;248    }
000088  b00f              ADD      sp,sp,#0x3c
00008a  2000              MOVS     r0,#0                 ;247
00008c  e8bd8ff0          POP      {r4-r11,pc}
;;;249    
                          ENDP

                  |L12.144|
                          DCD      ||.constdata||+0x28

                          AREA ||i.shiftRows||, CODE, READONLY, ALIGN=1

                  shiftRows PROC
;;;178    
;;;179    int shiftRows(uint8_t (*state)[4]) {
000000  b5ff              PUSH     {r0-r7,lr}
;;;180        uint32_t block[4] = {0};
000002  2100              MOVS     r1,#0
000004  9100              STR      r1,[sp,#0]
000006  9101              STR      r1,[sp,#4]
000008  9102              STR      r1,[sp,#8]
00000a  466d              MOV      r5,sp
;;;181    
;;;182        /* i: row */
;;;183        for (int i = 0; i < 4; ++i) {
;;;184            LOAD32H(block[i], state[i]);
;;;185            block[i] = ROF32(block[i], 8*i);
00000c  2620              MOVS     r6,#0x20
00000e  9103              STR      r1,[sp,#0xc]
                  |L13.16|
000010  eb000381          ADD      r3,r0,r1,LSL #2       ;184
000014  00cf              LSLS     r7,r1,#3              ;184
000016  681a              LDR      r2,[r3,#0]            ;184
000018  ba12              REV      r2,r2                 ;184
00001a  f02204ff          BIC      r4,r2,#0xff           ;184
00001e  78da              LDRB     r2,[r3,#3]            ;184
000020  4314              ORRS     r4,r4,r2              ;184
000022  fa04f207          LSL      r2,r4,r7
000026  424f              RSBS     r7,r1,#0
000028  f8454021          STR      r4,[r5,r1,LSL #2]     ;184
00002c  eb0607c7          ADD      r7,r6,r7,LSL #3
000030  40fc              LSRS     r4,r4,r7
000032  4322              ORRS     r2,r2,r4
000034  f8452021          STR      r2,[r5,r1,LSL #2]
;;;186            STORE32H(block[i], state[i]);
000038  0e14              LSRS     r4,r2,#24
00003a  f8004021          STRB     r4,[r0,r1,LSL #2]
00003e  0c14              LSRS     r4,r2,#16
000040  705c              STRB     r4,[r3,#1]
000042  0a14              LSRS     r4,r2,#8
000044  709c              STRB     r4,[r3,#2]
000046  1c49              ADDS     r1,r1,#1
000048  70da              STRB     r2,[r3,#3]
00004a  2904              CMP      r1,#4                 ;183
00004c  dbe0              BLT      |L13.16|
;;;187        }
;;;188    
;;;189        return 0;
;;;190    }
00004e  b004              ADD      sp,sp,#0x10
000050  2000              MOVS     r0,#0                 ;189
000052  bdf0              POP      {r4-r7,pc}
;;;191    
                          ENDP


                          AREA ||i.storeStateArray||, CODE, READONLY, ALIGN=2

                  storeStateArray PROC
;;;89     /* copy state[4][4] to out[16] */
;;;90     int storeStateArray(uint8_t (*state)[4], uint8_t *out) {
000000  b510              PUSH     {r4,lr}
;;;91         for (int i = 0; i < 4; ++i) {
000002  2300              MOVS     r3,#0
                  |L14.4|
;;;92             for (int j = 0; j < 4; ++j) {
000004  f05f0200          MOVS.W   r2,#0
                  |L14.8|
;;;93                 *out++ = state[j][i];
000008  eb000482          ADD      r4,r0,r2,LSL #2
00000c  1c52              ADDS     r2,r2,#1
00000e  5ce4              LDRB     r4,[r4,r3]
000010  f8014b01          STRB     r4,[r1],#1
000014  2a04              CMP      r2,#4                 ;92
000016  dbf7              BLT      |L14.8|
000018  1c5b              ADDS     r3,r3,#1              ;92
00001a  2b04              CMP      r3,#4                 ;91
00001c  dbf2              BLT      |L14.4|
;;;94             }
;;;95         }
;;;96         return 0;
00001e  2000              MOVS     r0,#0
;;;97     }
000020  bd10              POP      {r4,pc}
;;;98     
                          ENDP


                          AREA ||i.subBytes||, CODE, READONLY, ALIGN=2

                  subBytes PROC
;;;156    
;;;157    int subBytes(uint8_t (*state)[4]) {
000000  b530              PUSH     {r4,r5,lr}
;;;158        /* i: row, j: col */
;;;159        for (int i = 0; i < 4; ++i) {
;;;160            for (int j = 0; j < 4; ++j) {
;;;161                state[i][j] = S[state[i][j]];
000002  4c08              LDR      r4,|L15.36|
000004  2200              MOVS     r2,#0                 ;159
                  |L15.6|
000006  2100              MOVS     r1,#0                 ;160
000008  eb000382          ADD      r3,r0,r2,LSL #2
                  |L15.12|
00000c  5c5d              LDRB     r5,[r3,r1]
00000e  5d65              LDRB     r5,[r4,r5]
000010  545d              STRB     r5,[r3,r1]
000012  1c49              ADDS     r1,r1,#1
000014  2904              CMP      r1,#4                 ;160
000016  dbf9              BLT      |L15.12|
000018  1c52              ADDS     r2,r2,#1              ;160
00001a  2a04              CMP      r2,#4                 ;159
00001c  dbf3              BLT      |L15.6|
;;;162            }
;;;163        }
;;;164    
;;;165        return 0;
00001e  2000              MOVS     r0,#0
;;;166    }
000020  bd30              POP      {r4,r5,pc}
;;;167    
                          ENDP

000022  0000              DCW      0x0000
                  |L15.36|
                          DCD      ||.data||

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  rcon
                          DCD      0x01000000
                          DCD      0x02000000
                          DCD      0x04000000
                          DCD      0x08000000
                          DCD      0x10000000
                          DCD      0x20000000
                          DCD      0x40000000
                          DCD      0x80000000
                          DCD      0x1b000000
                          DCD      0x36000000
000028  02030101          DCB      0x02,0x03,0x01,0x01
00002c  01020301          DCB      0x01,0x02,0x03,0x01
000030  01010203          DCB      0x01,0x01,0x02,0x03
000034  03010102          DCB      0x03,0x01,0x01,0x02
000038  0e0b0d09          DCB      0x0e,0x0b,0x0d,0x09
00003c  090e0b0d          DCB      0x09,0x0e,0x0b,0x0d
000040  0d090e0b          DCB      0x0d,0x09,0x0e,0x0b
000044  0b0d090e          DCB      0x0b,0x0d,0x09,0x0e

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  4d525f53          DCB      "MR_SUCCESS",0
000004  55434345
000008  535300  
00000b  00                DCB      0
00000c  4d525f52          DCB      "MR_REJECTED",0
000010  454a4543
000014  54454400
000018  4d525f41          DCB      "MR_ABORTED",0
00001c  424f5254
000020  454400  
000023  00                DCB      0
000024  4d525f46          DCB      "MR_FAILED_DEV_OPEN_FAIL",0
000028  41494c45
00002c  445f4445
000030  565f4f50
000034  454e5f46
000038  41494c00
00003c  4d525f46          DCB      "MR_FAILED_UNKNOWN_REASON",0
000040  41494c45
000044  445f554e
000048  4b4e4f57
00004c  4e5f5245
000050  41534f4e
000054  00      
000055  00                DCB      0
000056  00                DCB      0
000057  00                DCB      0
000058  4d525f46          DCB      "MR_FAILED_INVALID_PARAM",0
00005c  41494c45
000060  445f494e
000064  56414c49
000068  445f5041
00006c  52414d00
000070  4d525f46          DCB      "MR_FAILED_OOM",0
000074  41494c45
000078  445f4f4f
00007c  4d00    
00007e  00                DCB      0
00007f  00                DCB      0
000080  4d525f46          DCB      "MR_FAILED_UNKNOWN_USER",0
000084  41494c45
000088  445f554e
00008c  4b4e4f57
000090  4e5f5553
000094  455200  
000097  00                DCB      0
000098  4d525f46          DCB      "MR_FAILED_MAX_USER",0
00009c  41494c45
0000a0  445f4d41
0000a4  585f5553
0000a8  455200  
0000ab  00                DCB      0
0000ac  4d525f46          DCB      "MR_FAILED_FACE_ENROLLED",0
0000b0  41494c45
0000b4  445f4641
0000b8  43455f45
0000bc  4e524f4c
0000c0  4c454400
0000c4  4d525f46          DCB      "MR_FAILED_LIVENESS_CHECK",0
0000c8  41494c45
0000cc  445f4c49
0000d0  56454e45
0000d4  53535f43
0000d8  4845434b
0000dc  00      
0000dd  00                DCB      0
0000de  00                DCB      0
0000df  00                DCB      0
0000e0  4d525f46          DCB      "MR_FAILED_TIME_OUT",0
0000e4  41494c45
0000e8  445f5449
0000ec  4d455f4f
0000f0  555400  
0000f3  00                DCB      0
0000f4  4d525f46          DCB      "MR_FAILED_AUTHORIZATION",0
0000f8  41494c45
0000fc  445f4155
000100  54484f52
000104  495a4154
000108  494f4e00
00010c  4d525f46          DCB      "MR_FAILED_READ_FILE",0
000110  41494c45
000114  445f5245
000118  41445f46
00011c  494c4500
000120  4d525f46          DCB      "MR_FAILED_WRITE_FILE",0
000124  41494c45
000128  445f5752
00012c  4954455f
000130  46494c45
000134  00      
000135  00                DCB      0
000136  00                DCB      0
000137  00                DCB      0
000138  4d525f46          DCB      "MR_FAILED_NO_ENCRYPT",0
00013c  41494c45
000140  445f4e4f
000144  5f454e43
000148  52595054
00014c  00      
00014d  00                DCB      0
00014e  00                DCB      0
00014f  00                DCB      0
000150  4d525f46          DCB      "MR_FAILED_STORE_ERR",0
000154  41494c45
000158  445f5354
00015c  4f52455f
000160  45525200
000164  4d525f46          DCB      "MR_FAILED_NO_IMG",0
000168  41494c45
00016c  445f4e4f
000170  5f494d47
000174  00      
000175  00                DCB      0
000176  00                DCB      0
000177  00                DCB      0
000178  4d525f46          DCB      "MR_FAILED_NO_IDX",0
00017c  41494c45
000180  445f4e4f
000184  5f494458
000188  00      
000189  00                DCB      0
00018a  00                DCB      0
00018b  00                DCB      0
00018c  4d525f46          DCB      "MR_FAILED_BUF_OVERFLOW",0
000190  41494c45
000194  445f4255
000198  465f4f56
00019c  4552464c
0001a0  4f5700  
0001a3  00                DCB      0
0001a4  4d525f46          DCB      "MR_FAILED_MASS_DATA_HEAD_EMPTY",0
0001a8  41494c45
0001ac  445f4d41
0001b0  53535f44
0001b4  4154415f
0001b8  48454144
0001bc  5f454d50
0001c0  545900  
0001c3  00                DCB      0
0001c4  4d525f46          DCB      "MR_FAILED_MASS_DATA_DB_ABNORMAL",0
0001c8  41494c45
0001cc  445f4d41
0001d0  53535f44
0001d4  4154415f
0001d8  44425f41
0001dc  424e4f52
0001e0  4d414c00
0001e4  4d525f46          DCB      "MR_FAILED_MASS_DATA_FM_ABNORMAL",0
0001e8  41494c45
0001ec  445f4d41
0001f0  53535f44
0001f4  4154415f
0001f8  464d5f41
0001fc  424e4f52
000200  4d414c00
000204  4d525f46          DCB      "MR_FAILED_NOT_READY",0
000208  41494c45
00020c  445f4e4f
000210  545f5245
000214  41445900
000218  4d525f46          DCB      "MR_FAILED_EXISTED_USER",0
00021c  41494c45
000220  445f4558
000224  49535445
000228  445f5553
00022c  455200  
00022f  00                DCB      0
000230  4d525f46          DCB      "MR_FAILED_IDX_OVERFLOW",0
000234  41494c45
000238  445f4944
00023c  585f4f56
000240  4552464c
000244  4f5700  
000247  00                DCB      0
000248  4d525f43          DCB      "MR_CONTIUNOUS",0
00024c  4f4e5449
000250  554e4f55
000254  5300    
000256  00                DCB      0
000257  00                DCB      0
000258  4d525f53          DCB      "MR_SUCCESS_BUT_DEL_USER",0
00025c  55434345
000260  53535f42
000264  55545f44
000268  454c5f55
00026c  53455200
000270  4d525f46          DCB      "MR_FAILED_INVALID_CMD",0
000274  41494c45
000278  445f494e
00027c  56414c49
000280  445f434d
000284  4400    
000286  00                DCB      0
000287  00                DCB      0
000288  00                DCB      0

                          AREA ||.data||, DATA, ALIGN=0

                  S
000000  637c777b          DCB      0x63,0x7c,0x77,0x7b
000004  f26b6fc5          DCB      0xf2,0x6b,0x6f,0xc5
000008  3001672b          DCB      0x30,0x01,0x67,0x2b
00000c  fed7ab76          DCB      0xfe,0xd7,0xab,0x76
000010  ca82c97d          DCB      0xca,0x82,0xc9,0x7d
000014  fa5947f0          DCB      0xfa,0x59,0x47,0xf0
000018  add4a2af          DCB      0xad,0xd4,0xa2,0xaf
00001c  9ca472c0          DCB      0x9c,0xa4,0x72,0xc0
000020  b7fd9326          DCB      0xb7,0xfd,0x93,0x26
000024  363ff7cc          DCB      0x36,0x3f,0xf7,0xcc
000028  34a5e5f1          DCB      0x34,0xa5,0xe5,0xf1
00002c  71d83115          DCB      0x71,0xd8,0x31,0x15
000030  04c723c3          DCB      0x04,0xc7,0x23,0xc3
000034  1896059a          DCB      0x18,0x96,0x05,0x9a
000038  071280e2          DCB      0x07,0x12,0x80,0xe2
00003c  eb27b275          DCB      0xeb,0x27,0xb2,0x75
000040  09832c1a          DCB      0x09,0x83,0x2c,0x1a
000044  1b6e5aa0          DCB      0x1b,0x6e,0x5a,0xa0
000048  523bd6b3          DCB      0x52,0x3b,0xd6,0xb3
00004c  29e32f84          DCB      0x29,0xe3,0x2f,0x84
000050  53d100ed          DCB      0x53,0xd1,0x00,0xed
000054  20fcb15b          DCB      0x20,0xfc,0xb1,0x5b
000058  6acbbe39          DCB      0x6a,0xcb,0xbe,0x39
00005c  4a4c58cf          DCB      0x4a,0x4c,0x58,0xcf
000060  d0efaafb          DCB      0xd0,0xef,0xaa,0xfb
000064  434d3385          DCB      0x43,0x4d,0x33,0x85
000068  45f9027f          DCB      0x45,0xf9,0x02,0x7f
00006c  503c9fa8          DCB      0x50,0x3c,0x9f,0xa8
000070  51a3408f          DCB      0x51,0xa3,0x40,0x8f
000074  929d38f5          DCB      0x92,0x9d,0x38,0xf5
000078  bcb6da21          DCB      0xbc,0xb6,0xda,0x21
00007c  10fff3d2          DCB      0x10,0xff,0xf3,0xd2
000080  cd0c13ec          DCB      0xcd,0x0c,0x13,0xec
000084  5f974417          DCB      0x5f,0x97,0x44,0x17
000088  c4a77e3d          DCB      0xc4,0xa7,0x7e,0x3d
00008c  645d1973          DCB      0x64,0x5d,0x19,0x73
000090  60814fdc          DCB      0x60,0x81,0x4f,0xdc
000094  222a9088          DCB      0x22,0x2a,0x90,0x88
000098  46eeb814          DCB      0x46,0xee,0xb8,0x14
00009c  de5e0bdb          DCB      0xde,0x5e,0x0b,0xdb
0000a0  e0323a0a          DCB      0xe0,0x32,0x3a,0x0a
0000a4  4906245c          DCB      0x49,0x06,0x24,0x5c
0000a8  c2d3ac62          DCB      0xc2,0xd3,0xac,0x62
0000ac  9195e479          DCB      0x91,0x95,0xe4,0x79
0000b0  e7c8376d          DCB      0xe7,0xc8,0x37,0x6d
0000b4  8dd54ea9          DCB      0x8d,0xd5,0x4e,0xa9
0000b8  6c56f4ea          DCB      0x6c,0x56,0xf4,0xea
0000bc  657aae08          DCB      0x65,0x7a,0xae,0x08
0000c0  ba78252e          DCB      0xba,0x78,0x25,0x2e
0000c4  1ca6b4c6          DCB      0x1c,0xa6,0xb4,0xc6
0000c8  e8dd741f          DCB      0xe8,0xdd,0x74,0x1f
0000cc  4bbd8b8a          DCB      0x4b,0xbd,0x8b,0x8a
0000d0  703eb566          DCB      0x70,0x3e,0xb5,0x66
0000d4  4803f60e          DCB      0x48,0x03,0xf6,0x0e
0000d8  613557b9          DCB      0x61,0x35,0x57,0xb9
0000dc  86c11d9e          DCB      0x86,0xc1,0x1d,0x9e
0000e0  e1f89811          DCB      0xe1,0xf8,0x98,0x11
0000e4  69d98e94          DCB      0x69,0xd9,0x8e,0x94
0000e8  9b1e87e9          DCB      0x9b,0x1e,0x87,0xe9
0000ec  ce5528df          DCB      0xce,0x55,0x28,0xdf
0000f0  8ca1890d          DCB      0x8c,0xa1,0x89,0x0d
0000f4  bfe64268          DCB      0xbf,0xe6,0x42,0x68
0000f8  41992d0f          DCB      0x41,0x99,0x2d,0x0f
0000fc  b054bb16          DCB      0xb0,0x54,0xbb,0x16
                  inv_S
000100  52096ad5          DCB      0x52,0x09,0x6a,0xd5
000104  3036a538          DCB      0x30,0x36,0xa5,0x38
000108  bf40a39e          DCB      0xbf,0x40,0xa3,0x9e
00010c  81f3d7fb          DCB      0x81,0xf3,0xd7,0xfb
000110  7ce33982          DCB      0x7c,0xe3,0x39,0x82
000114  9b2fff87          DCB      0x9b,0x2f,0xff,0x87
000118  348e4344          DCB      0x34,0x8e,0x43,0x44
00011c  c4dee9cb          DCB      0xc4,0xde,0xe9,0xcb
000120  547b9432          DCB      0x54,0x7b,0x94,0x32
000124  a6c2233d          DCB      0xa6,0xc2,0x23,0x3d
000128  ee4c950b          DCB      0xee,0x4c,0x95,0x0b
00012c  42fac34e          DCB      0x42,0xfa,0xc3,0x4e
000130  082ea166          DCB      0x08,0x2e,0xa1,0x66
000134  28d924b2          DCB      0x28,0xd9,0x24,0xb2
000138  765ba249          DCB      0x76,0x5b,0xa2,0x49
00013c  6d8bd125          DCB      0x6d,0x8b,0xd1,0x25
000140  72f8f664          DCB      0x72,0xf8,0xf6,0x64
000144  86689816          DCB      0x86,0x68,0x98,0x16
000148  d4a45ccc          DCB      0xd4,0xa4,0x5c,0xcc
00014c  5d65b692          DCB      0x5d,0x65,0xb6,0x92
000150  6c704850          DCB      0x6c,0x70,0x48,0x50
000154  fdedb9da          DCB      0xfd,0xed,0xb9,0xda
000158  5e154657          DCB      0x5e,0x15,0x46,0x57
00015c  a78d9d84          DCB      0xa7,0x8d,0x9d,0x84
000160  90d8ab00          DCB      0x90,0xd8,0xab,0x00
000164  8cbcd30a          DCB      0x8c,0xbc,0xd3,0x0a
000168  f7e45805          DCB      0xf7,0xe4,0x58,0x05
00016c  b8b34506          DCB      0xb8,0xb3,0x45,0x06
000170  d02c1e8f          DCB      0xd0,0x2c,0x1e,0x8f
000174  ca3f0f02          DCB      0xca,0x3f,0x0f,0x02
000178  c1afbd03          DCB      0xc1,0xaf,0xbd,0x03
00017c  01138a6b          DCB      0x01,0x13,0x8a,0x6b
000180  3a911141          DCB      0x3a,0x91,0x11,0x41
000184  4f67dcea          DCB      0x4f,0x67,0xdc,0xea
000188  97f2cfce          DCB      0x97,0xf2,0xcf,0xce
00018c  f0b4e673          DCB      0xf0,0xb4,0xe6,0x73
000190  96ac7422          DCB      0x96,0xac,0x74,0x22
000194  e7ad3585          DCB      0xe7,0xad,0x35,0x85
000198  e2f937e8          DCB      0xe2,0xf9,0x37,0xe8
00019c  1c75df6e          DCB      0x1c,0x75,0xdf,0x6e
0001a0  47f11a71          DCB      0x47,0xf1,0x1a,0x71
0001a4  1d29c589          DCB      0x1d,0x29,0xc5,0x89
0001a8  6fb7620e          DCB      0x6f,0xb7,0x62,0x0e
0001ac  aa18be1b          DCB      0xaa,0x18,0xbe,0x1b
0001b0  fc563e4b          DCB      0xfc,0x56,0x3e,0x4b
0001b4  c6d27920          DCB      0xc6,0xd2,0x79,0x20
0001b8  9adbc0fe          DCB      0x9a,0xdb,0xc0,0xfe
0001bc  78cd5af4          DCB      0x78,0xcd,0x5a,0xf4
0001c0  1fdda833          DCB      0x1f,0xdd,0xa8,0x33
0001c4  8807c731          DCB      0x88,0x07,0xc7,0x31
0001c8  b1121059          DCB      0xb1,0x12,0x10,0x59
0001cc  2780ec5f          DCB      0x27,0x80,0xec,0x5f
0001d0  60517fa9          DCB      0x60,0x51,0x7f,0xa9
0001d4  19b54a0d          DCB      0x19,0xb5,0x4a,0x0d
0001d8  2de57a9f          DCB      0x2d,0xe5,0x7a,0x9f
0001dc  93c99cef          DCB      0x93,0xc9,0x9c,0xef
0001e0  a0e03b4d          DCB      0xa0,0xe0,0x3b,0x4d
0001e4  ae2af5b0          DCB      0xae,0x2a,0xf5,0xb0
0001e8  c8ebbb3c          DCB      0xc8,0xeb,0xbb,0x3c
0001ec  83539961          DCB      0x83,0x53,0x99,0x61
0001f0  172b047e          DCB      0x17,0x2b,0x04,0x7e
0001f4  ba77d626          DCB      0xba,0x77,0xd6,0x26
0001f8  e1691463          DCB      0xe1,0x69,0x14,0x63
0001fc  55210c7d          DCB      0x55,0x21,0x0c,0x7d

                          AREA ||i._str_uart_reply||, COMGROUP=_str_uart_reply, CODE, READONLY, ALIGN=2

                  _str_uart_reply PROC
;;;201    #pragma diag_suppress 111
;;;202    inline char *_str_uart_reply(enum uart_reply_result result)
000000  2814              CMP      r0,#0x14
;;;203    {
;;;204        switch (result)
000002  d04e              BEQ      |L97.162|
000004  dc0d              BGT      |L97.34|
000006  2814              CMP      r0,#0x14
000008  d22d              BCS      |L97.102|
00000a  e8dff000          TBB      [pc,r0]
00000e  2e30              DCB      0x2e,0x30
000010  322c3436          DCB      0x32,0x2c,0x34,0x36
000014  383a3c3e          DCB      0x38,0x3a,0x3c,0x3e
000018  402c4244          DCB      0x40,0x2c,0x42,0x44
00001c  462c2c2c          DCB      0x46,0x2c,0x2c,0x2c
000020  2c48              DCB      0x2c,0x48
                  |L97.34|
000022  2832              CMP      r0,#0x32
000024  d04d              BEQ      |L97.194|
000026  dc10              BGT      |L97.74|
000028  2818              CMP      r0,#0x18
00002a  d042              BEQ      |L97.178|
00002c  dc06              BGT      |L97.60|
00002e  2815              CMP      r0,#0x15
000030  d039              BEQ      |L97.166|
000032  2816              CMP      r0,#0x16
000034  d039              BEQ      |L97.170|
000036  2817              CMP      r0,#0x17
000038  d115              BNE      |L97.102|
00003a  e038              B        |L97.174|
                  |L97.60|
00003c  2819              CMP      r0,#0x19
00003e  d03a              BEQ      |L97.182|
000040  2830              CMP      r0,#0x30
000042  d03a              BEQ      |L97.186|
000044  2831              CMP      r0,#0x31
000046  d10e              BNE      |L97.102|
000048  e039              B        |L97.190|
                  |L97.74|
00004a  2836              CMP      r0,#0x36
00004c  d041              BEQ      |L97.210|
00004e  dc06              BGT      |L97.94|
000050  2833              CMP      r0,#0x33
000052  d038              BEQ      |L97.198|
000054  2834              CMP      r0,#0x34
000056  d038              BEQ      |L97.202|
000058  2835              CMP      r0,#0x35
00005a  d104              BNE      |L97.102|
00005c  e037              B        |L97.206|
                  |L97.94|
00005e  2840              CMP      r0,#0x40
000060  d039              BEQ      |L97.214|
000062  28ff              CMP      r0,#0xff
000064  d039              BEQ      |L97.218|
                  |L97.102|
;;;205        {
;;;206            CMD_REPLY_RESULT_MACRO(TO_STR)
;;;207        default:
;;;208            break;
;;;209        }
;;;210        
;;;211        return "";
000066  481e              LDR      r0,|L97.224|
;;;212    }
000068  4770              BX       lr
00006a  481e              LDR      r0,|L97.228|
00006c  4770              BX       lr
00006e  481e              LDR      r0,|L97.232|
000070  4770              BX       lr
000072  481e              LDR      r0,|L97.236|
000074  4770              BX       lr
000076  481e              LDR      r0,|L97.240|
000078  4770              BX       lr
00007a  481e              LDR      r0,|L97.244|
00007c  4770              BX       lr
00007e  481e              LDR      r0,|L97.248|
000080  4770              BX       lr
000082  481e              LDR      r0,|L97.252|
000084  4770              BX       lr
000086  481e              LDR      r0,|L97.256|
000088  4770              BX       lr
00008a  481e              LDR      r0,|L97.260|
00008c  4770              BX       lr
00008e  481e              LDR      r0,|L97.264|
000090  4770              BX       lr
000092  481e              LDR      r0,|L97.268|
000094  4770              BX       lr
000096  481e              LDR      r0,|L97.272|
000098  4770              BX       lr
00009a  481e              LDR      r0,|L97.276|
00009c  4770              BX       lr
00009e  481e              LDR      r0,|L97.280|
0000a0  4770              BX       lr
                  |L97.162|
0000a2  481e              LDR      r0,|L97.284|
0000a4  4770              BX       lr
                  |L97.166|
0000a6  481e              LDR      r0,|L97.288|
0000a8  4770              BX       lr
                  |L97.170|
0000aa  481e              LDR      r0,|L97.292|
0000ac  4770              BX       lr
                  |L97.174|
0000ae  481e              LDR      r0,|L97.296|
0000b0  4770              BX       lr
                  |L97.178|
0000b2  481e              LDR      r0,|L97.300|
0000b4  4770              BX       lr
                  |L97.182|
0000b6  481e              LDR      r0,|L97.304|
0000b8  4770              BX       lr
                  |L97.186|
0000ba  481e              LDR      r0,|L97.308|
0000bc  4770              BX       lr
                  |L97.190|
0000be  481e              LDR      r0,|L97.312|
0000c0  4770              BX       lr
                  |L97.194|
0000c2  481e              LDR      r0,|L97.316|
0000c4  4770              BX       lr
                  |L97.198|
0000c6  481e              LDR      r0,|L97.320|
0000c8  4770              BX       lr
                  |L97.202|
0000ca  481e              LDR      r0,|L97.324|
0000cc  4770              BX       lr
                  |L97.206|
0000ce  481e              LDR      r0,|L97.328|
0000d0  4770              BX       lr
                  |L97.210|
0000d2  481e              LDR      r0,|L97.332|
0000d4  4770              BX       lr
                  |L97.214|
0000d6  481e              LDR      r0,|L97.336|
0000d8  4770              BX       lr
                  |L97.218|
0000da  481e              LDR      r0,|L97.340|
0000dc  4770              BX       lr
;;;213    #pragma diag_warning 111
                          ENDP

0000de  0000              DCW      0x0000
                  |L97.224|
                          DCD      ||.conststring||+0x288
                  |L97.228|
                          DCD      ||.conststring||
                  |L97.232|
                          DCD      ||.conststring||+0xc
                  |L97.236|
                          DCD      ||.conststring||+0x18
                  |L97.240|
                          DCD      ||.conststring||+0x24
                  |L97.244|
                          DCD      ||.conststring||+0x3c
                  |L97.248|
                          DCD      ||.conststring||+0x58
                  |L97.252|
                          DCD      ||.conststring||+0x70
                  |L97.256|
                          DCD      ||.conststring||+0x80
                  |L97.260|
                          DCD      ||.conststring||+0x98
                  |L97.264|
                          DCD      ||.conststring||+0xac
                  |L97.268|
                          DCD      ||.conststring||+0xc4
                  |L97.272|
                          DCD      ||.conststring||+0xe0
                  |L97.276|
                          DCD      ||.conststring||+0xf4
                  |L97.280|
                          DCD      ||.conststring||+0x10c
                  |L97.284|
                          DCD      ||.conststring||+0x120
                  |L97.288|
                          DCD      ||.conststring||+0x138
                  |L97.292|
                          DCD      ||.conststring||+0x150
                  |L97.296|
                          DCD      ||.conststring||+0x164
                  |L97.300|
                          DCD      ||.conststring||+0x178
                  |L97.304|
                          DCD      ||.conststring||+0x18c
                  |L97.308|
                          DCD      ||.conststring||+0x1a4
                  |L97.312|
                          DCD      ||.conststring||+0x1c4
                  |L97.316|
                          DCD      ||.conststring||+0x1e4
                  |L97.320|
                          DCD      ||.conststring||+0x204
                  |L97.324|
                          DCD      ||.conststring||+0x218
                  |L97.328|
                          DCD      ||.conststring||+0x230
                  |L97.332|
                          DCD      ||.conststring||+0x248
                  |L97.336|
                          DCD      ||.conststring||+0x258
                  |L97.340|
                          DCD      ||.conststring||+0x270
